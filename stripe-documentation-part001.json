[
  {
    "url": "https://docs.stripe.com/issuing/compliance-us",
    "markdown": "# Treasury and Issuing product marketing, design, and compliance guidelines\n\n## Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.\n\n#### Legal Disclaimer\n\nDon’t consider any of the information in this guide as legal advice. If you use Stripe Treasury and Stripe Issuing, consult your own legal counsel for advice about product branding and using Stripe products to offer financial services.\n\nTo offer and promote Stripe Treasury and Issuing products to your customers and connected accounts, your marketing and user interfaces must adhere to the guidelines that we outline here. These guidelines help you navigate the financial regulations that apply to Stripe products. We’ve organized them into the following sections:\n\n*   [Account management](#account-management)\n*   [Required agreements and disclosures for Issuing](#issuing-terms)\n*   [Required agreements and disclosures for Treasury](#treasury-terms)\n*   [Required agreements and disclosures for fees, credits, and rewards programs](#fees-credits-rewards-terms)\n*   [Customer communications and documents](#customer-communications-and-documents)\n*   [Going live and marketing](#going-live)\n*   [Recordkeeping](#recordkeeping)\n\nThe following table outlines the steps you must complete before onboarding your first connected accounts. If you need help, contact the Stripe Compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nIf you make changes to any items in the table at a later date, you must submit a request to the Stripe Compliance team using the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n| Topic | Checklist | Product applicability |\n| --- | --- | --- |\n| Application flow | Your application flow:<br><br>*   Includes bank disclosures<br>*   Includes required agreements<br>*   Required KYC fields<br>*   Approved by Stripe Compliance | Treasury and Issuing |\n| Fees and credits | You’ve [submitted your planned fees and credits to Stripe](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms) | Treasury and Issuing |\n| Marketing and user interfaces | Your marketing materials, including your website landing pages, dashboards, and support pages:<br><br>*   Are approved by Stripe Compliance (or align with messaging guidelines)<br>*   Include bank disclosures | Treasury and Issuing |\n| Customer service channels | Your customers can access your customer service channels and they can:<br><br>*   Submit complaints<br>*   Submit disputes | Treasury and Issuing |\n| Account statements (optional) | If you choose to send account statements, they must:<br><br>*   Be approved by Stripe Compliance<br>*   Include Bank disclosures and relevant contact information | Treasury |\n| Receipts | You have a mechanism to send your customers Stripe-generated money transmission receipts | Treasury and Issuing |\n| Regulated customer notices | You send regulated customer notices to applicants and accountholders, and they’re either:<br><br>*   Sent by Stripe on your behalf<br>*   Sent by your platform with templates approved by Stripe Compliance | Issuing Spend Card and Charge Card |\n| Recordkeeping | You have a mechanism to retain copies of:<br><br>*   Customer consent to open accounts<br>*   Marketing materials and user interfaces<br>*   Customer communications, such as support emails<br>*   Account statements, if applicable | Treasury and Issuing |\n\n## Account management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need the proper internal compliance controls before launching Stripe Treasury or Stripe Issuing. You also need to build the processes described in this section into your various workflows, customer service, and product channels.\n\n### Complaints program guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nComplaints are any expression of dissatisfaction with a product, service, policy, or employee related to Stripe Treasury or Stripe Issuing, except those expressions made by employees of your company. Properly handling complaints is mandatory when offering financial services products. See the [Handling complaints](https://docs.stripe.com/treasury/handling-complaints) guide for detailed complaint management requirements.\n\n### Disputes and charge errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of providing customer support, you might be notified of suspected disputed charges, charge errors, or both. The two most common types of disputes or errors are:\n\n*   You or your customer believe a charge is unauthorized\n*   You or your customer see an error on an account statement\n\nIf these errors occur, submit the dispute through the Stripe Dashboard. Select the relevant transactions and choose **Dispute**. Be prepared to provide Stripe with specific information to investigate the dispute, such as:\n\n*   Details about the authorized user\n*   Details about the disputed charge amount\n*   The transaction date\n*   An explanation of why the disputed charge is an error or unauthorized\n\nYou must report any disputed charge or error immediately upon notification of it. Failure to do so might impact your financial liability. To avoid a sustained reduction to your available balance, you can pay the disputed charge while we determine the validity of the dispute. If Stripe deems the dispute valid, we credit the disputed charge amount back to the appropriate account.\n\n### Application flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must provide for three main compliance requirement workflows:\n\n*   Collection of required KYC information\n*   Presentation of the required bank disclosure\n*   Ensuring that your applicant reads and accepts the required legal agreements\n\n## Required agreements and disclosures for Issuing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a platform and you’re not using Stripe-hosted onboarding, you must present the following program-specific agreements and disclosures for your connected accounts to accept during their account opening process. You must also provide them with ongoing access to these agreements.\n\n### Spend card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Spend Card (Celtic Bank)](https://stripe.com/legal/celtic-spend-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Spend Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-spend-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the “Issuing Bank Terms” link that states: “By clicking “submit application,” you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms, and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For Connected Accounts with a business address in CA, NY, or UT, you must present one of the following disclosures:\n    *   For platforms that don’t charge fees:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (no fee)](https://stripe.com/legal/issuing-offer-document)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (no fee)](https://stripe.com/legal/crb-issuing-offer-document)\n    *   For platforms that charge a $0.10 fee when creating cards for users:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (fee included)](https://stripe.com/legal/issuing-offer-document-fees)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (fee included)](https://stripe.com/legal/crb-issuing-offer-document-fees)\n    *   For platforms that charge fees other than a $0.10 fee when creating cards for users:\n        *   If you charge fees beyond Stripe’s fee of 0.10 USD, you might be required to create your own commercial financing disclosure to present to your connected accounts for creating virtual cards. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. To assess the applicability of commercial financing disclosures to your program, contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\n_Authorized User Agreements and Disclosures._\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Charge card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Charge Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder) or Custom Platform Accountholder Terms\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Charge Card (Celtic Bank)](https://stripe.com/legal/celtic-charge-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Charge Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-charge-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n*   **Card Program Terms**: These are your bespoke program terms that supplement the Issuing Bank Terms. At a minimum, consider including the following items in your terms. Consult your legal counsel about which items to define within your own Card Program Terms.\n    *   Repayment methods, including automatic withdrawal consents\n    *   Billing cycles, including due dates\n    *   Fees\n    *   Rewards\n    *   Credit limits\n    *   Account closure requirements\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the **Issuing Bank Terms** link stating that signing the Issuing Bank Terms signifies consent to electronic signatures and communications. For example, your message might read: “By clicking the submit application button, you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms; and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For connected accounts with a business address in CA, NY, or UT, you must present your own custom commercial financing disclosure. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. Contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com) to assess the commercial financing disclosure requirements of your program.\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Commercial prepaid debit users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Commercial Prepaid Debit Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   [Issuing Bank Terms (Sutton Bank)](https://stripe.com/legal/issuing/commercial-prepaid-sutton-terms)\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   [Sutton Bank Authorized User Terms](https://stripe.com/legal/issuing/sutton-authorized-user-terms)\n\n## Required agreements and disclosures for Treasury ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must provide the following terms of service to your connected accounts and record their agreement before they can start using the Stripe Treasury Program:\n\n*   [Stripe Services Agreement](https://stripe.com/legal/ssa)\n*   [Stripe Treasury Terms - Connected Accounts](https://stripe.com/legal/ssa#services-terms)\n\n## Required agreements and disclosures for fees, credits, and rewards programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the previous agreements, your terms of service and fee schedule must clearly outline the fees and terms that you implement as part of your Treasury or Issuing program.\n\nYou must report to Stripe the details of any fees, credits, and rewards programs that you plan to offer. That helps make sure your user interfaces and marketing materials are compliant with financial regulations regarding fees or offer credits, especially in the form of rewards programs. Use the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n## Customer communications and documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo comply with applicable laws and regulations, you must send certain communications to both your applicants and accountholders upon certain trigger events.\n\nTo learn about customer communication requirements when using Issuing and Treasury together, see [Issuing regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n### Statements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProviding statements, while optional, is a best practice that allows your Treasury or Issuing customers to periodically check their transaction history. If you send statements, make sure they contain the following information:\n\n*   \\[Company\\] name and address.\n*   Your company’s customer support contact number and website\n*   Customer account number\n*   Customer name and address\n*   Required disclosures\n*   Transaction history (including opening and closing balances for the statement period)\n*   Fees and credits.\n*   Information about how you resolve errors and complaints\n\n### Receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne of the most important ongoing obligations you have in overseeing your Treasury or Issuing program is providing your customers with money transmissions receipts. Every regulated transaction your customers initiate generates a compliant money transmission receipt URL that you must share with your customer. You can provide these URL receipts in a few different ways, such as emailing them or making them available in your customer’s Dashboard. See the [Regulatory receipts guide](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) for more information on how to access hosted receipts. If you plan to charge your connected account owners any fees, whether they’re transactional or monthly recurring, include a description of the fee on the receipt so that they can reconcile it to corresponding transactions or monthly statements.\n\n## Going live and marketing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following information pertains to marketing and releasing your Stripe Treasury or Issuing programs to the public.\n\n### General requirements for marketing your account offerings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny message or communication you provide to the public for financial products or services they don’t currently use must be truthful and fair, and in the interest of your potential customers.\n\n### UDAP and correct messaging![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFederal regulation prohibits unfair and deceptive acts or practices (UDAP). To avoid UDAP violations, you must think of the end user first when developing and deploying any marketing materials.\n\nMake sure that marketing materials use clear messaging that fully explains product features, costs, benefits, and limitations. Don’t leave out key terms or fees, and don’t advertise product uses or features that aren’t true.\n\n| Do  | Don’t |\n| --- | --- |\n| Only use statements about products that are true, accurate, and aligned with how users engage with the products. | Don’t leave out key information from marketing content. If the information is likely to affect whether someone uses the product, then it’s “key.\" |\n| If you make claims that require additional data to support them, or if an end user needs to know more details to know how a certain claim is true, you must:<br><br>*   Provide documented evidence<br>*   Disclose that information | Make exaggerated claims that are hard to prove. Don’t make absolute statements that are disproved by a single exception. For example, “number 1,\" “every,\" “only,\" “all,\" “never,\" “always.\" |\n| Clearly explain all qualifying limitations and requirements needed by end users to get the product or features that you’ve advertised. | Don’t advertise features or programs that only a few applicants actually qualify for. |\n| All disclosures must meet a “clear and conspicuous” standard:<br><br>*   Font size must be large enough to read.<br>*   Font color must visibly contrast with the background.<br>*   Dynamic or video ads must have the disclosure on screen long enough to be read. | Don’t make disclosures hard to read. |\n| Disclosures used to explain or modify a claim must be tied to the claim they’re explaining.<br><br>*   Use a hyperlink directly linking to the disclosure (or include the disclosure next to the claim in the copy itself)<br>*   Use reference text or symbols (an asterisk, for example) directly after the claim and before the disclosure language. | Don’t bury disclosures in other non-key disclosures or footnotes. |\n| Disclose all account fees, costs, benefits, and terms as part of onboarding before your end users take out a product. | Don’t advertise products as “free” if you’re charging fees. |\n| Make sure all images used are properly licensed and that you can document this fact. | Don’t use images, formatting, or copy that implies products are endorsed by, or affiliated with, government entities or celebrities. |\n\n### Messaging guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following suggested messaging guidelines to convey key aspects of Stripe Issuing, Stripe Treasury, or both programs. Stripe or our banking partners have validated (proven as true) this content, so you can confidently use this messaging in user-facing materials.\n\n*   [Issuing](#issuing-messaging-guidelines)\n*   [Treasury](#treasury-messaging-guidelines)\n\nThe following tables include validated content you can provide in your marketing campaigns. You can make non-substantive changes (for example, changing the design or infusing your brand’s voice) to the suggested messaging as long as the key information remains the same. Any substantive deviations from these guidelines require you to submit marketing materials and get approval from Stripe and our bank partners. Approvals might take up to 10 business days to process.\n\nYou’re responsible for training employees on these requirements if they engage in marketing or sales activities for your Treasury or Issuing program.\n\n#### Issuing messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table provides guidelines for you to follow when developing messaging around your Issuing program.\n\n| Topic category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | Your card program name and your brand name must have equal status, as with plain text: Widget balance® + Stripe. When referencing registered brand products, you must adhere to their separate brand guidelines. You only need to use the ®, ™, SM, mark once per asset. | Don’t maintain unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Comparison value propositions | Use language promoting the benefits of the card:<br><br>*   Better than cash<br>*   Safer than carrying cash<br>*   Manage your money hassle free<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t make disparaging remarks about other financial products or institutions: this includes debit, credit, bank accounts, banks, or other financial products used or issued by financial institutions. Don’t allude to prepaid card programs as superior to other card products with terms like:<br><br>*   Better than credit<br>*   Better than a bank account<br>*   No interest<br>*   No security deposit<br>*   No debt |\n| Currency and using the funds | Use phrases like:<br><br>*   Access your contractor earnings<br>*   All \\[card program\\] cards are USD denominated<br>*   \\[Card program\\] cards can be used anywhere that accepts Visa cards | Don’t use phrases like:<br><br>*   Access your wages<br>*   Get funds in any format you want<br>*   Can spend money across the world |\n| What you can use the card for and limitations | Use phrases like:<br><br>*   Use \\[card program\\] for business needs<br>*   Get \\[card program\\] for your commercial needs<br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t use phrases like:<br><br>*   Use \\[card program\\] for anything you want<br>*   Spend funds to buy the things you love<br>*   Personal cards<br>*   Use these cards like a payday loan, title loan, or pawn shop loan |\n| Where to spend funds | Use phrases like:<br><br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend funds easily on your business | Don’t use phrases like:<br><br>*   Can be used just like a personal account<br>*   Get consumer cards<br>*   Spend funds to buy the things you love |\n\n#### Issuing messaging specifics per product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table provides guidelines for you to follow when developing messaging for specific cards in your Issuing program.\n\n| Card | Do  | Don’t |\n| --- | --- | --- |\n| Spend card only | Use phrases like:<br><br>*   …is a commercial credit program<br>*   A business credit card | Don’t use phrases like:<br><br>*   Debit card<br>*   Prepaid card<br>*   Better than a debit card |\n| Payout account only (Treasury account connected) | Money management account | Don’t use phrases like:<br><br>*   Bank account<br>*   Deposit account<br>*   Checking account<br>*   Savings account<br>*   Similar terms to the previous ones that connote a traditional bank account product |\n\n#### Treasury messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDon’t use words like “bank account,” “deposit account,\" “checking account,” “savings account,” or similar terms that imply a traditional bank account product because Stripe isn’t a bank. Pre-approved terms include the following:\n\n*   Business account\n*   Cash management account\n*   Financial account\n*   Money transfer account\n\nSee [Marketing Treasury-based services](https://docs.stripe.com/treasury/marketing-treasury) for a full list of terms you can and can’t use to describe your accounts. Inaccurately referring to Treasury accounts as “bank accounts” could result in regulatory action, including fines.\n\n| Category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | When referencing registered/® brand products, you must adhere to their separate brand guidelines. You only need to reference the ®, ™, SM mark once per asset. | Don’t apply unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Description of account value propositions | Use the following terms:<br><br>*   Business account<br>*   Cash management account<br>*   Financial account<br>*   Money transfer account | Don’t use the following terms:<br><br>*   “Bank account”<br>*   “Deposit account”<br>*   “Checking account”<br>*   “Savings account”<br>*   Similar terms to the previous ones that imply a traditional bank account product, because Stripe isn’t a bank |\n| FDIC insurance | Use the following terms that incorporate the term “eligible”:<br><br>*   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | Don’t use the following terms:<br><br>*   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\n### CAN-SPAM![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CAN-SPAM Act regulates marketing activity conducted by email. An email is deemed a commercial message, subject to the CAN-SPAM act, if the primary purpose of the email is to convey a commercial advertisement, or to promote a product or service. A transactional email is an email sent to a customer that has a primary purpose relating to a particular transaction or relationship between you and the customer, such as a payment reminder. The CAN-SPAM Act imposes more rigorous requirements on commercial email messages, as compared with transactional messages. Transactional messages aren’t subject to most of the requirements of the CAN-SPAM Act. If a message contains both transactional content and commercial content, the CAN-SPAM Act commercial email requirements might apply, if the primary purpose of the message can be considered commercial.\n\nTo facilitate compliance with the CAN-SPAM Act, any employee or staff using or having access to your email systems and resources for marketing must adhere to the following guidelines:\n\n*   Misleading header information. Any email message, whether commercial or transactional, must not contain:\n    *   False or misleading header information.\n    *   A “from” line that doesn’t accurately identify any person (individual or business) who initiated the message.\n    *   Inaccurate or misleading identification of a protected computer used to initiate the message for purposes of disguising its origin.\n*   Deceptive subject headings. Any commercial email message must not contain deceptive subject headings. For example, a deceptive subject heading is one that likely misleads the recipient about a material fact regarding the message’s contents or subject matter.\n*   Opt-out mechanism. You must provide your customers with the ability to opt-out of receiving future commercial messages, and you must honor customer requests to opt-out within 10 days. You can’t require a user to pay a fee or provide information other than an email address to opt-out.\n*   Advertisement identification. Any commercial email message must contain clear and conspicuous identification that the message is an advertisement or solicitation.\n*   Physical address disclosure. Any commercial email message must disclose a valid physical address of the sender.\n\nFailure to comply with CAN-SPAM could result in large fines for each violation.\n\n### Testimonials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using testimonials or endorsements in advertising Stripe products to your users, consider the following:\n\n*   The person giving a testimonial must be a real person and a true, bona fide user of the service or product they’re talking about.\n*   You must obtain and keep their permission in writing to use their quote. You must update that permission every 24 months.\n*   Product benefits, costs, or features in any quotes must be verifiable and true to what most users can expect to get.\n*   If you paid someone for their quote, or gave them anything of value, you must put a disclaimer near the quote stating this fact. This includes paid actors, if their scripting makes it sound like they’re giving a testimonial.\n\n### Prohibited advertising![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t advertise Stripe Issuing or Treasury, in print, radio, TV, on the internet, or any other digital format that promotes any unlawful activity or causes reputation concerns for Stripe or our bank partners.\n\n### Prohibition on international marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury isn’t available to users or merchants located outside the US, so limit all marketing for Treasury to US domestic audiences.\n\nFor Issuing, although you can ship cards to international addresses for US-domiciled cardholders, you must not market the Issuing program internationally or to persons outside of the United States. That includes advertising or promoting Issuing through marketing channels such as social media, email, and paid search results. As with all other aspects of the Issuing program, your marketing activities must comply with card network rules.\n\n### Required marketing disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users must understand the role that Stripe’s bank partners play in offering and operating certain financial products—and in many cases, that they’re entering into a contractual relationship with these banks. Your users must also understand the material costs and fees associated with their use of each financial product. We require you to build the following disclosures into your marketing materials:\n\n#### Disclosures when marketing Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   The name for your card program (for example, Rocket Rides Corporate Card).\n*   The relevant statement from the following table identifying the issuing bank. It can be in the footers section of your materials; however, the font must be a legible size and a contrasting color to the background.\n\n| Statement for Celtic Bank users | Statement for Sutton Bank users | Statement for Cross River Bank users |\n| --- | --- | --- |\n| \\[Card Program Name\\] Visa® Commercial Credit cards are powered by Stripe and issued by Celtic Bank. | \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. | \\[Card Program Name\\] Charge Cards are issued by Cross River Bank, Member FDIC. |\n\n#### Disclosures when marketing Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Treasury products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A statement that you’re neither a bank nor a money transmitter.\n*   Statement of partnership with Stripe.\n*   “Stripe Payments Company” must be hyperlinked and point to `https://stripe.com`.\n\n| Statement for Evolve bank users | Statement for Goldman bank users |\n| --- | --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. | \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Goldman Sachs Bank USA, Member FDIC. |\n\n#### Disclosures when marketing both Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer both Treasury and Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A name for your card program (for example, Rocket Rides Corporate Card).\n*   A combined statement identifying the issuing bank and saying that you’re neither a bank nor a money transmitter.\n\n| Example combined statement (Payout Card) |\n| --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. |\n\n### Materials submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubmit copies of your marketing materials and user interface mockups through our [Review Intake Form](https://docs.google.com/forms/d/e/1FAIpQLSfI67WWnEC-bPdzXllK7fq9hlwK6pY3qZpEnpOBwz8UZ_R-Xg/viewform) for review before you launch. If you make any changes to marketing materials, application flows, or user communications, Stripe’s compliance team must perform a review before going live. Our team of compliance specialists reviews them with our bank partners and responds within 10 business days.\n\nWhen submitting your materials:\n\n*   Provide full screenshots of product pages that include headings and footers.\n*   The preferable format for materials is PDF, however any format where all text is legible is acceptable.\n*   Describe the types of marketing material you’re submitting (for example, web banners, emails, search engine marketing, and whether it’s only text or images and text).\n*   You can send up to 5 attachments per submission.\n\nSend any additional questions to our team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nWe might request that you change your marketing materials to comply with regulatory requirements. If we request a change, it’s your responsibility to update the materials and provide evidence of the change to Stripe. Failure to update materials at our request might result in Stripe disabling your Treasury or Issuing capabilities.\n\n## Recordkeeping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must demonstrate your adherence to the requirements listed in this guide. Keep thorough records of all marketing materials, customer data, account information, and other disclosures you make to customers for at least 5 years. The following is a list of all records to keep, with examples of record types.\n\n| Record type | Example form of records |\n| --- | --- |\n| Product user experience | Screenshots of all deployed versions of the product user experience and their deployment dates. Include application flow, customer dashboard, support pages, and so on. |\n| Marketing | Inventory of all marketing copy deployed, email distribution lists used, and email solicitation opt-out lists, including timestamps of user opt-outs. |\n| Customer communications and complaints | Email interactions and documentation developed in the course of resolving complaints. |\n| Receipts | Receipts provided by Stripe and evidence that they’re uploaded to the customer’s Dashboard. |\n| Customer statements | Historical statements generated and made available to customers for download. |",
    "title": "Treasury and Issuing product marketing, design, and compliance guidelines | Stripe Documentation",
    "description": "Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools",
    "markdown": "# Advanced fraud tools | Stripe DocumentationThe Stripe Docs logo\n\n## Advanced fraud toolsBeta\n\n## Reduce fraud with Issuing’s advanced tooling.\n\nStripe Issuing’s advanced fraud tools help you identify and prevent transaction fraud. Use our real-time webhook functionality to approve or reject authorizations with the API. This guide helps you understand how to use these signals and features to drive down transaction fraud while minimizing impact on legitimate transactions.\n\n## Fraud controls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides access to fraud-adjacent features such as spending controls, dispute filing, token management, and card management tools. To get started, review and enable the following controls that align with your business needs. While these settings might not be customized to your business model, geography, or cardholder behavior, you can use them as a source of directional guidance when using Stripe’s tools. Contact us for support in adjusting these thresholds.\n\n|     |     |\n| --- | --- |\n| [3D Secure (3DS)](#three-d-secure) | Verify cardholders for online purchases. |\n| [Stripe Defense Layer](#stripe-defense-layer) | Automatically block high-risk transactions based on Stripe’s risk modeling. |\n| [Fraud challenges](#fraud-challenges) | Trigger SMS-based verification of authorizations. Use this to verify users or to let users verify Stripe. |\n| [Authorization signals](#authorization-signals) | *   Verification data<br>*   Fraud disputability likelihood<br>*   High risk merchant alerts<br>*   Card testing risk |\n| [Stripe’s risk score](#stripe-risk-score) | Incorporate Stripe’s risk assessment when deciding whether to approve or reject an authorization. |\n| [Compromised card alerting](#compromised-card-alerting) | Stripe assesses whether a card has been compromised in a card testing attack. |\n\n## 3D Secure (3DS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n3DS uses multi-factor authentication to reduce fraud for online transactions where a card isn’t physically present. It’s triggered by businesses in online checkout flows, and requires multi-factor authentication (usually through SMS or email-based one-time passcode that Stripe sends) to complete.\n\n### Protection against online fraud with 3DS verification and SCA compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, merchants are responsible for online fraud losses in card-not-present transactions. To protect themselves, businesses can trigger 3DS verification to reduce the chances of accepting a fraudulent transaction. If a merchant triggers 3DS verification, the cardholder needs to complete the verification step if your Stripe cards are enrolled in 3DS. In the UK and EU, 3DS is the standard for implementing the regulatory requirements of Strong Customer Authentication (SCA).\n\n### Request enrollment of your cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must request enrollment of your Issuing account through Support to use 3DS. After enrollment, your cards are set up to trigger additional verification on authorizations in which a merchant requests 3DS.\n\nLearn more about [Cardholder authentication using 3D Secure](https://docs.stripe.com/issuing/3d-secure).\n\n## Stripe Defense Layer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s proprietary monitoring can help identify transactions that are high risk and decline them before they can impact your bottom line. The Stripe Defense Layer is enabled for all Stripe Issuing users, and provides several automatic controls to help reduce your fraud exposure without changing loss liability. Among other considerations, Stripe blocks authorizations that:\n\n*   Appear to be card testing\n*   Seem high risk based on our fraud risk modeling\n\nThese defenses typically impact a very small subset (less than 0.5%) of authorizations.\n\n## Fraud challenges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFraud challenges provide you with the ability to request additional, SMS-based verification in situations where you prefer not to outright decline potentially risky authorizations.\n\nFalse positive declines can occur in fraud protection. To allow cardholders to override potential false-positive declines, and limit disruption for them, you can trigger SMS-based verification.\n\nSMS verification works as an override option to a decline. For cardholders, the process looks like this:\n\n1.  Attempt a transaction, but receive a fraud-related decline.\n2.  Successfully complete a fraud challenge by replying to an SMS, sent to the cardholder’s phone number on file with Stripe.\n3.  Try the transaction again and receive approval.\n\nYou can can let Stripe manage fraud challenges for you, send them yourself, or use a mixture of both:\n\n### Stripe-managed fraud challenges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you enable fraud challenges, Stripe automatically triggers SMS verification for authorizations that we consider to be high risk.\n\nIf the cardholder successfully completes the verification within 60 minutes, the merchant is allow-listed on that card for 7 days. Subsequent authorizations during that time won’t encounter fraud-related declines.\n\nWe recommend using this option if you’re an Issuing user who’s comfortable with Stripe’s risk thresholds and would prefer if Stripe managed the process of reconciling post-verification authorizations after the challenge has been completed.\n\n### User-managed fraud challenges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond to an `issuing_authorization.request` webhook to decline a transaction, and send a fraud challenge at the same time.\n\nIn these scenarios, you can define your own logic to trigger fraud challenges. We recommend using this option if you’re an Issuing user who prefers to own the logic that triggers SMS prompts.\n\n| Optimize for approval rate | Balance approval rate and risk prevention | Optimize for risk prevention |\n| --- | --- | --- |\n| Enabled by default, trigger this through a webhook | Optional | Optional |\n\nLearn more about the [Fraud challenge flow](https://docs.stripe.com/issuing/controls/fraud-challenges) and how to [define your own logic](https://docs.stripe.com/issuing/controls/fraud-challenges#define-your-own-logic).\n\nDuring authorization, we provide a comprehensive set of signals that you can use to make informed approve or decline decisions in real-time webhook responses.\n\nLearn more about [Authorization signals](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals).\n\n## Stripe’s risk score ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses a variety of risk signals to assess the risk level of an authorization then makes this assessment available to you through the API. You can incorporate Stripe’s assessment into your decision logic when determining whether to approve or decline an authorization.\n\n| Optimize for approval rate | Balance approval rate and risk prevention | Optimize for risk prevention |\n| --- | --- | --- |\n| Block authorizations with score above 75 | Block authorizations with score above 50 | Block authorizations with score above 25 |\n\nLearn more about [Stripe’s risk score](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/stripes-risk-score).\n\n## Compromised card alerting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe notifies you through the API when we believe a card might have been compromised. This helps you know when to cancel and reissue a card, file disputes, or notify a cardholder.\n\n### Prevent subsequent abuse and initiate cardholder communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanceling a card suspected to be compromised can help you prevent future fraudulent use of PANs that have been compromised. You can use these indicators to initiate communications and a reissuance workflow for cardholders. If Stripe observes that a card has been successfully used in a card testing attack, we flag the card as compromised.\n\n### Mitigate risk and take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe observes a successful authorization during a severe card testing attack (defined as a `risk_assessment.card_testing_risk.risk_level` of `elevated` or `highest`), the card’s `fraud_warning.type` field will have a value of `card_testing_exposure`. The `started_at` value corresponds to the date that the successful authorization in card testing attack took place. This value won’t update if the card is compromised again in a later attack.\n\nAfter Stripe sets the `type` field to `card_testing_exposure`, we recommend contacting the cardholder, canceling the card, and issuing a new one. This mitigates the risk of subsequent authorizations on what a fraudulent actor likely assumes is a valid PAN that they can use.\n\nIssuing advanced fraud tools are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Real-time authorizations quickstart](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart)\n*   [Manage fraud with Stripe Issuing controls and tools](https://docs.stripe.com/issuing/manage-fraud)",
    "title": "Advanced fraud tools | Stripe Documentation",
    "description": "Reduce fraud with Issuing’s advanced tooling.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/cards/pin-management",
    "markdown": "# PIN management | Stripe DocumentationThe Stripe Docs logo\n\n## Let your cardholders manage their personal identification numbers.\n\nSome Point-of-Sale and ATM card terminals require cardholders to enter their card’s PIN to authenticate transactions. Cardholders also need to use their PINs with physical cards in many regions of the world. You can use the Stripe API and [Stripe Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") to manage and view PINs on your issued cards.\n\nBoth [physical card](https://docs.stripe.com/issuing/cards/physical) and [virtual card](https://docs.stripe.com/issuing/cards/virtual) PINs are set to a random value at creation. Cards created as a [replacement for](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-replacement_for) other cards won’t inherit the old card’s PIN. In [test mode](https://docs.stripe.com/test-mode \"test mode\"), all PINs are set to 0000 by default.\n\n## Set a card’s initial PIN at creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen issuing a new card through the API, you can provide a desired PIN to be pre-set on the card. This is optional, and if you don’t provide an initial PIN, we randomly generate one for you. You can always [view a card’s PIN](#viewing-a-cards-pin).\n\nTo pre-set a PIN when issuing a new card, pass it in encrypted form as the `pin.encrypted_number` parameter to the Create Card API method:\n\n`curl https://api.stripe.com/v1/issuing/cards \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"cardholder\"=\"ich_1D4b3fdsa\" \\   -d \"pin[encrypted_number]\"=\"eyJhbGciOiJSU0...\"   -d \"type\"=\"virtual\" \\   -d \"currency\"=\"usd\"`\n\nSee [Encrypting PINs](#encrypting-pins) for more information about how to encrypt a PIN before passing it to the Stripe API or your own servers.\n\n#### Note\n\nWhen setting a card’s initial PIN in a request to the Create Card API method, the response to the creation request won’t return the PIN (in either encrypted or plain-text form).\n\n## View a card’s PIN ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Issuing Elements](https://docs.stripe.com/issuing/elements) to retrieve a card’s PIN in a [PCI-DSS](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\")\\-compliant way.\n\n### Use Issuing Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a browser-side JavaScript library that allows you to display the sensitive data (including PINs) of your Issuing cards in a PCI-compliant manner. The PIN renders inside of a Stripe-hosted `iframe` and never touches your servers. Stripe offers this library as a part of [Stripe.js](https://docs.stripe.com/js).\n\nAll Issuing users, whether they’re PCI-compliant or not, can use Issuing Elements to retrieve PINs.\n\nTo retrieve a card’s PIN using Issuing Elements, first [create an Issuing Elements integration](https://docs.stripe.com/issuing/elements), and then use it to display the `issuingCardPinDisplay` Element:\n\n`const stripe = Stripe(`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`);  const cardId = 'ic_abc123'; // ID of the issued Card you want to retrieve the PIN for const ephemeralKeyNonce = ...; const ephemeralKey = ...;  // create the PIN Element with Stripe.js const pinElement = stripe.elements().create('issuingCardPinDisplay', {   issuingCard: cardId,   nonce: ephemeralKeyNonce,   ephemeralKeySecret: ephemeralKey.secret, });  // Mount the PIN element onto DOM elements on your web page pinElement.mount('#card-pin');`\n\n## Change a card’s PIN![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Change a card’s PIN at an ATM ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCardholders can change the PIN for their Stripe Issuing card at most ATMs. The cardholder must know the card’s current PIN to change it at an ATM. You can [retrieve a card’s PIN](#viewing-a-cards-pin) before changing it. Some countries, such as France, don’t provide PIN management features at ATMs.\n\n## Unblock a card’s PIN ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you incorrectly enter a card’s PIN three consecutive times, the PIN becomes blocked. No further PIN-authenticated payments can be made through the card until the PIN is unblocked. Additionally, when a card’s online PIN is blocked, the card’s status is set to `inactive`, and no payments of any kind can be made until the card is reactivated.\n\nTo unblock a card’s online PIN, and reactivate the card, use the Cards API to set its [status](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-status) to `active`. You can also reactivate a card in your Stripe Dashboard.\n\nIn most countries, cardholders can unblock a card’s offline PIN at an ATM.\n\n## Encrypting PINs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo enable you to set a card’s PIN in a way that doesn’t require it to pass through your servers in plain text, the Stripe API expects you to provide PINs in an encrypted form.\n\nEncrypt the desired PIN (for example, `\"0123\"`) in JWE (JSON Web Encryption) format using [Stripe’s RSA public key](https://issuing-key.stripe.com/v1/keys). When encrypting, use the `RSA-OAEP` algorithm for key wrapping and `A128CBC-HS256` for content encryption.\n\nStripe provides its public key for PIN encryption in both PKCS#8 and JWK format. Depending on your client environment and the library used, one might be easier to use than the other.\n\n### PIN encryption best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Don’t cache, store, or reuse encrypted PINs for longer than necessary to call the Stripe API.\n*   Don’t encrypt PINs on your servers. Instead, perform encryption as soon as your user provides the PIN (for example, in your mobile application or in your web application’s frontend) and pass the encrypted form to your servers, and then on to the Stripe API.\n*   Don’t cache Stripe’s Issuing public key: we can change it or rotate it without notice. Instead, fetch it for every PIN operation you perform on the Stripe API.\n*   Don’t roll your own cryptography. JWE libraries are available for most common languages and platforms.\n\n### PIN encryption examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n``import fetch from 'node-fetch'; import { importJWK, CompactEncrypt } from 'jose'  async function encryptPin(myNewPin) {   // Fetch Stripe's RSA public key   const keyData = await fetch('[https://issuing-key.stripe.com/v1/keys](https://issuing-key.stripe.com/v1/keys)')     .then(r => r.json());    // Import the public key. Here, we choose to import the JWK-formatted key,   // but it will also be available in PKCS#8 format as `keyData.pkcs8`   const publicKey = await importJWK(keyData.jwk, 'RSA');    // Encrypt the new PIN with the given public key, using the RSA-OAEP   // algorithm to wrap the key, and A128CBC-HS256 to produce the ciphertext   const jwe = await new CompactEncrypt(new TextEncoder().encode(myNewPin))     .setProtectedHeader({ alg: 'RSA-OAEP', enc: 'A128CBC-HS256', kid: keyData.key_id })     .encrypt(publicKey);    // Return our JWE (JWEs are base64url-encoded)   return jwe; }  await encryptPin(\"0123\"); // => eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJraWQiOiJz...``\n\nThe example above encrypts a PIN (0123) using JSON Object Signing and Encryption libraries for various languages. Equivalent libraries exist for other languages:",
    "title": "PIN management | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations",
    "markdown": "# Issuing real-time authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about real-time authorizations.\n\nUsing the synchronous webhook, you can approve or decline authorization requests in real time.\n\nYour webhook endpoint can be configured in your [settings](https://dashboard.stripe.com/account/issuing). When a card is used to make a purchase, Stripe creates an `issuing_authorization.request` and sends it to your configured endpoint for your approval.\n\nGet started with our [interactive guide to real-time authorizations](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\nYou can respond to authorization requests by responding directly to the webhook event.\n\n### Respond directly![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRespond to the `issuing_authorization.request` webhook event directly to either approve or decline an authorization after it’s received.\n\n#### Webhook response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOur webhook accepts `JSON` responses with the following parameters:\n\n**Status code:** Return `200` to indicate success.\n\n**Header:**\n\n| field name | required or optional | description |\n| --- | --- | --- |\n| **Stripe-Version** | required | Version in `YYYY-dd-mm` format. |\n| **Content-Type** | optional | The only content type accepted for Authorization webhook responses is `application/json`. |\n\n**Body:**\n\n| field name | required or optional | type | description |\n| --- | --- | --- | --- |\n| **approved** | required | Boolean | Set `true` to approve an authorization and `false` to decline. |\n| **amount** | optional | Integer | If the authorization’s `pending_request.is_amount_controllable` property is `true`, you can provide this value to control how much to hold for the authorization. It must be positive. |\n| **metadata** | optional | Set of [key-value pairs](https://docs.stripe.com/api/metadata) | This can be useful for storing additional information about the object in a structured format. |\n| **send\\_fraud\\_challenges** Beta | optional | Array of strings | You can send a fraud challenge for this authorization only through SMS. Leave it blank if you don’t want to send a challenge. |\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Replace with a real secret. You can find your endpoint's secret in your webhook settings. webhook_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, webhook_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature.     status 400     return   end    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     # ... custom business logic      status 200     header 'Stripe-Version' => '2022-08-01', 'Content-Type' => 'application/json'     data = { 'approved' => true }     body data.to_json   end   # ...handle other cases end`\n\n### Make an API call Deprecated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis documentation is maintained for existing users. If you’re a new user, respond directly to the webhook. If you’re an existing user, plan to migrate to the direct webhook response. You can follow [our direct webhook migration guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration).\n\nMake an API call to either [approve](https://docs.stripe.com/api/issuing/authorizations/approve) or [decline](https://docs.stripe.com/api/issuing/authorizations/decline) the request and include the [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) ID. If you use this method, your webhook must approve or decline each authorization before responding to the incoming webhook request.\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Uncomment and replace with a real secret. You can find your endpoint's # secret in your webhook settings. # webhook_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, webhook_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature.     status 400     return   end    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     handle_authorization(auth)   end    status 200 end  def handle_authorization(auth)   # Authorize the transaction   authorization = Stripe::Issuing::Authorization.approve(auth[\"id\"]) end`\n\nWe recommend that you only use one of these two methods to respond to authorization requests. For users migrating from one method to another, both methods are supported during a migration. In the event both methods are used on the same authorization, the API call takes precedence over the direct response. For migrations, we recommend only using one method on a given request at a time.\n\nIf Stripe doesn’t receive your approve or decline response or request within 2 seconds, the `Authorization` is automatically approved or declined based on your [timeout settings](https://dashboard.stripe.com/account/issuing).\n\n#### Note\n\nIf your Issuing balance has insufficient funds for the incoming authorization, the authorization will be denied and your webhook endpoint will not receive the `issuing_authorization.request` event. To learn more about funding your Issuing balance, [read here](https://docs.stripe.com/issuing/funding/balance).\n\n## Authorization requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorization request is sent to your webhook, the `amount` requested is stored in `pending_request`.\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing_authorization\",   \"approved\": false,   \"amount\": 0,   \"currency\": \"usd\",   \"status\": \"pending\",   ...   \"pending_request\": {     \"amount\": 400,     \"currency\": \"usd\",     \"merchant_amount\": 360,     \"merchant_currency\": \"gbp\"   } }`\n\nThe top-level `amount` in the request is set to 0 and `approved` is false. Once you respond to the request, the top-level `amount` reflects the total amount approved or declined, the `approved` field is updated, and `pending_request` is set to null.\n\n### Testing webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test webhooks locally, you can use [Stripe CLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can forward events to your server:\n\n`stripe listen --forward-to localhost:4242/webhook Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nIn another terminal, you can then manually trigger `issuing_authorization.request` events from the CLI for more streamlined testing.\n\n`stripe trigger issuing_authorization.request`\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n## Autopilot Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAutopilot is a set of fallback options that allow you to continue making real-time authorization decisions in the event your systems are down or don’t respond to an authorization request within the allotted time window.\n\nFor users with their own dedicated Bank Identification Numbers (BIN), we also offer Autopilot in the event that Stripe can’t communicate with the network to prevent any continuity issues that might result.\n\nIn both cases, we make an authorization decision on your behalf based on a predefined set of rules. We create authorization objects for transmission, so that reconciliation can take place for the Autopilot transactions. When an authorization is approved or declined through Autopilot while you’re down, the `request_history.reason` field within the `issuing_authorization.created` webhook changes to `webhook_timeout`. When an authorization is approved or declined through Autopilot while Stripe is down, the `request_history.reason` field within the `issuing_authorization.created` webhook changes to `network_stip`.\n\nAccess to Autopilot is currently limited to US beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## Fraud challenges Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Fraud challenges](https://docs.stripe.com/issuing/controls/fraud-challenges) allow your cardholders to retry non-fraudulent transactions that would have otherwise been blocked.\n\nTo manage the rules that dictate when a fraud challenge is sent, adjust your response to the `issuing_authorization.request` webhook. You can trigger fraud challenges in scenarios where you detect spending that appears suspicious and want additional verification (for example, a cardholder using their card out of the country).\n\nTo do so, decline the `issuing_authorization.request` webhook and include the `send_fraud_challenges` field with the `[\"sms\"]` value.\n\nFraud challenges are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Issuing real-time authorizations | Stripe Documentation",
    "description": "Learn about real-time authorizations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/elements",
    "markdown": "# Using Issuing Elements | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to display card details in your web application in a PCI-compliant way.\n\n[Stripe.js](https://docs.stripe.com/js) includes a browser-side JavaScript library you can use to display the sensitive data of your Issuing cards on the web in compliance with PCI requirements. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\n#### Note\n\nStripe.js collects extra data to protect our users. Learn more about how Stripe collects data for [advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection).\n\n## Ephemeral key authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe.js uses ephemeral keys to securely retrieve Card information from the Stripe API without publicly exposing your secret keys. You need to do some of the ephemeral key exchange on the server-side to set this up.\n\nThe ephemeral key creation process begins in the browser, by creating a **nonce** using Stripe.js. A nonce is a single-use token that creates an **ephemeral key**. This nonce is sent to your server, where you exchange it for an ephemeral key by calling the Stripe API (using your secret key).\n\nAfter creating an ephemeral key server-side, pass it back to the browser for Stripe.js to use.\n\n[](#create-secure-endpoint)\n\nThe first step to integrating with Issuing Elements is to create a secure, server-side endpoint to generate ephemeral keys for the card you want to show. Your Issuing Elements web integration calls this endpoint.\n\nHere’s how you might implement an ephemeral key creation endpoint in web applications framework across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,   }); });`\n\n#### Note\n\nYou must specify the API version when creating ephemeral keys. Currently, the required version is `2020-03-02`. You must also pass in an ephemeral key nonce, which you can create in your web integration.\n\n[](#web-api-integration)\n\nFirst, include Stripe.js on your page. For more information on how to set up Stripe.js, refer to [including Stripe.js.](https://docs.stripe.com/js/including)\n\nCreate a `Stripe` instance and an ephemeral key nonce for the card you want to retrieve using [stripe.createEphemeralKeyNonce](https://docs.stripe.com/js/issuing/create_ephemeral_key_nonce). Use the nonce to retrieve the ephemeral key by calling the [server-side endpoint](#create-secure-endpoint) that you created:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Initialize Elements which you'll need later const elements = stripe.elements();  // Use Stripe.js to create a nonce const cardId = 'ic_1ITi6XKYfU8ZP6raDAXem8ql'; const nonceResult = await stripe.createEphemeralKeyNonce({   issuingCard: cardId, }); const nonce = nonceResult.nonce;  // Call your ephemeral key creation endpoint to fetch the ephemeral key const ephemeralKeyResult = await fetch('/ephemeral-keys', {   method: 'POST',   headers: { 'Content-Type': 'application/json' },   body: JSON.stringify({     card_id: cardId,     nonce: nonce,   }) });  const ephemeralKeyResponse = await ephemeralKeyResult.json(); const ephemeralKeySecret = ephemeralKeyResponse.ephemeralKeySecret;`\n\nNow that you have an ephemeral key, you’re ready to show sensitive card details. You can do so using any of the following Elements, and you can re-use the same nonce and ephemeral key pair for multiple Elements on the same page:\n\n| Element | Name | Availability |\n| --- | --- | --- |\n| Number (PAN) | `issuingCardNumberDisplay` | Virtual cards only |\n| CVC | `issuingCardCvcDisplay` | Virtual cards only |\n| Expiry date | `issuingCardExpiryDisplay` | Virtual cards only |\n| PIN | `issuingCardPinDisplay` | Physical cards only |\n\nEach Element takes the following configuration:\n\n| Name | Type | Usage |\n| --- | --- | --- |\n| `style` | [Style object](https://docs.stripe.com/js/appendix/style) | Keep in mind that some variants, pseudo-classes, and properties are for input Elements and won’t apply to these Elements. An example of an input-only pseudo-class is `::placeholder`. |\n| `issuingCard` | `string` | The ID of your issued card (for example, `ic_abc123`) |\n| `nonce` | `string` | Your ephemeral key nonce |\n| `ephemeralKeySecret` | `string` | The `secret` component of your ephemeral key |\n\n#### Note\n\nIf you decide to use `issuingCardPinDisplay`, then you must implement appropriate methods to ensure that access is limited to your authorized users. In particular, you must apply two-factor authentication (2FA) before providing access to a page using `issuingCardPinDisplay`. If Stripe decides that you don’t have sufficient security measures in place, we might suspend your access to this Element.\n\nThe following is an example of how to display one of these Elements, using the nonce and ephemeral key pair created in the example above:\n\n`const number = elements.create('issuingCardNumberDisplay', {   issuingCard: cardId,   nonce: nonce,   ephemeralKeySecret: ephemeralKeySecret,   style: {     base: {       color: '#fff',       fontSize: '16px'     },   }, });  number.mount('#card-number');`\n\n## Adding a copy button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the “card data display elements” that we’ve already described, we also provide an `issuingCardCopyButton` element. This takes a `toCopy` argument and renders a transparent “copy to clipboard” button that takes up the space of its parent `<div>`. This allows it to intercept all click events with a click handler that takes the corresponding card data specified at initialization and copies it to the clipboard.\n\nWith this, you can display “copy to clipboard” buttons next to the card number, expiry, and cvc, which prevents your cardholders from manually copying card data. We restrict the copy functionality to Stripe’s PCI-compliant `<iframe>`.\n\nThe `issuingCardCopyButton` element takes the following configuration:\n\n| Name | Type | Usage |\n| --- | --- | --- |\n| style | [Style object](https://docs.stripe.com/js/appendix/style) | Keep in mind that some variants, pseudo-classes, and properties are for input Elements and won’t apply to these Elements. An example of an input-only pseudo-class is `::placeholder`. |\n| toCopy | `'expiry'` or `'cvc'` or `'number'` or `'pin'` |     |\n\nAn example of how to use this component is below:\n\n`const cardNumber = elements.create('issuingCardNumberDisplay', {   issuingCard: cardId,   nonce: nonce,   ephemeralKeySecret: ephemeralKeySecret, });  cardNumber.mount('#card-number');  const cardNumberCopy = elements.create('issuingCardCopyButton', {   toCopy: 'number',   style: {     base: {       fontSize: '12px',       lineHeight: '24px',     },   }, });  cardNumberCopy.mount('#card-number-copy');`\n\nIf you’re having trouble with your button responding to clicks, be sure to line up the iframe to your button correctly. You can customize your image and containing `<div>` in your stylesheets however you want.\n\n`#card-number-copy {   height: 24px;   width: 24px;   position: relative;   background-repeat: no-repeat;   background-position: center;   background-size: contain;   background-image: url('data:image/svg+xml;base64,...'); }`\n\nAs a last step, provide an “after click feedback” option to your users. To do so, use the `issuingCardCopyButton` Element’s [on click event](https://docs.stripe.com/js/element/events/on_click). This could be temporarily showing a new icon as shown below.\n\n`#card-number-copy-success {   display: none;   height: 24px;   width: 24px;   background-image: url('data:image/svg+xml;base64,...');   background-size: 100%; }`\n\n`// Example of hiding, replacing, and re-showing icons upon click const timeout = (ms) => {   return new Promise((resolve) => setTimeout(resolve, ms)); }; const hideAndShowSuccess = (iconElementId, successIconElementId) => {   const el = document.getElementById(iconElementId);   el.style.display = 'none';   const elSuccess = document.getElementById(successIconElementId);   elSuccess.style.display = 'block';   timeout(2000).then(() => {     elSuccess.style.display = 'none';     el.style.display = 'block';   }); };  cardNumberCopy.on('click', () => {   hideAndShowSuccess('card-number-copy', 'card-number-copy-success'); });`\n\n## Additional details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe returned card object has PCI fields (such as the number) fully removed from the `result.issuingCard` payload.\n\nIn addition to `.mount()` in the example above, the Elements also support the following methods:\n\n*   `.destroy()`\n*   `.unmount()`\n*   `.update({style})`\n\n## Issuing Elements and native applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing Elements does not directly support native application platforms such as iOS, Android, or React Native.\n\nTo display sensitive card details with Issuing Elements in your native app, use a web view. Build a web integration on your servers following this guide, and then point a web view’s URL to that integration. To learn about implementing web views for native apps, see these external resources:\n\n*   iOS and iPadOS: [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview)\n*   Android: [WebView](https://developer.android.com/reference/android/webkit/WebView)\n*   React Native: [react-native-webview](https://github.com/react-native-webview/react-native-webview)\n*   Flutter: [webview-flutter](https://pub.dev/packages/webview_flutter)",
    "title": "Using Issuing Elements | Stripe Documentation",
    "description": "Learn how to display card details in your web application in a PCI-compliant way.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/funding/balance",
    "markdown": "# Issuing balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to make funds available to your cards.\n\nTo spend money using cards, add funds to the Issuing balance on your account. This balance represents funds reserved for Issuing and is safely separated from your earnings, payouts, and funds from other Stripe products.\n\nUsing the Stripe Dashboard or API, you can access the bank account and routing information you need to push funds from your from external bank account. When that account receives funds, they’re immediately available as a [top-up](https://docs.stripe.com/api/topups) to your Stripe account’s Issuing balance.\n\nFor a given currency, the provided bank account information will be unique and able to receive funds any number of times. Funds always arrive in your Issuing balance in the specified currency. In some cases, your bank might perform currency conversion.\n\n| Region | Payment Scheme | Currency Supported | Speed | Maximum amount accepted |\n| --- | --- | --- | --- | --- |\n| United States<br><br>Beta | Wire Transfer from US banks only | USD | A few minutes to 1 business day | Varies by bank, usually many millions |\n| ACH Credit Transfer | USD | Several hours to several business days | Varies by bank, usually less than $25k |\n| Euro area | SEPA Credit Transfer | EUR | About a day | €999,999,999.99 |\n| United Kingdom | FPS | GBP | About 2 hours during a bank’s business hours, or at the start of the next banking day. | £1 million |\n| BACS | GBP | 2-3 business days | £20 million |\n\nSelect region:\n\n## Access account information for push funding in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo access account information for push funding:\n\n1.  Navigate to the [Balances page](https://dashboard.stripe.com/balance/overview) in the Dashboard.\n2.  Scroll down to the **Issuing balance** heading and click **Add to balance**.\n3.  Choose your **Issuing balance** and specify how much to add. Click **Next**.\n4.  Select **Wire transfer** from the dropdown, and expand **Show instructions** to see the information you need to send a wire.\n\nTo send a wire from your bank, use the routing and account number, along with the beneficiary information.\n\nWires from banks outside the US aren’t allowed. Funds received from an international wire are returned to the sender’s bank account, which can take up to 3 business days.\n\n### Request early access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess to US push funding is currently limited to US beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## Enable notifications about your balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable email notifications to help monitor your Issuing balance from your settings. To configure these notifications:\n\n1.  Visit your Balance notifications [settings](https://dashboard.stripe.com/settings/issuing/balance-notifications) page.\n2.  Choose from two types of alerting thresholds:\n    *   Fixed amount: Receive an alert whenever your Issuing balance falls below this amount.\n    *   Ratio of balance to rolling spend: Receive an alert whenever the ratio of your Issuing balance to your spend over the previous 24 hours falls below the threshold. For example, if you set your threshold to 80% and your spend over the past day is 100 USD, you receive an alert whenever your balance falls below 80 USD.",
    "title": "Issuing balance | Stripe Documentation",
    "description": "Learn how to make funds available to your cards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/purchases/authorizations",
    "markdown": "# Issuing authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to handle authorization requests.\n\nWhen a card is used to make a purchase, it generates an authorization request, which is approved or declined based on the following steps:\n\n1.  Stripe checks that the [balance used for Issuing](https://docs.stripe.com/issuing/funding/balance) has sufficient funds, that the card is active, and that your [spending controls](https://docs.stripe.com/issuing/controls/spending-controls) allow the authorization. Sometimes, Stripe [immediately approves or declines the authorization request](#scenarios-without-a-real-time-authorization-request) at this stage.\n    \n2.  Stripe sends an `issuing_authorization.request` event. If you don’t have a real-time authorization webhook, we approve the authorization without sending the `issuing_authorization.request`.\n    \n    #### Listen for Stripe events\n    \n3.  You can [approve or decline](https://docs.stripe.com/issuing/controls/real-time-authorizations) the authorization by responding directly to the webhook event. If you don’t approve or decline the `issuing_authorization.request` within 2 seconds, Stripe uses your [webhook timeout settings](https://dashboard.stripe.com/settings/issuing) to approve or decline the authorization.\n    \n4.  Stripe sends an `issuing_authorization.created` event, notifying you of the [Authorization](https://docs.stripe.com/api#issuing_authorization_object) creation and decision.\n    \n\nSometimes, Stripe receives an authorization request from the card network and approves or declines it without sending you an `issuing_authorization.request` event:\n\n*   If Stripe decides that the authorization request can’t be approved (for example, because the card is inactive or your [spending controls](https://docs.stripe.com/issuing/controls/spending-controls) don’t allow it), we’ll decline it.\n*   If you don’t have a [real-time authorization webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations) configured, and we don’t have a reason to decline the authorization request, we’ll approve it.\n\nWhen this occurs, Stripe still sends an `issuing_authorization.created` event, notifying you of the [Authorization’s](https://docs.stripe.com/api#issuing_authorization_object) creation.\n\n## Authorization updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe receives an authorization request, we send an `issuing_authorization.created` [webhook](https://docs.stripe.com/webhooks) event. If you approve the authorization, we deduct the `amount` from your Issuing balance and hold it in reserve until the authorization is either captured, voided, or expired without capture. If you decline the authorization, the status is set to `closed` and we don’t place any holds.\n\nWhen the authorization is captured, a [transaction](https://docs.stripe.com/issuing/purchases/transactions) is created and the `status` of the authorization is set to `closed`.\n\nIf the authorization request is voided, we send an `issuing_authorization.updated` [webhook](https://docs.stripe.com/webhooks) event with its `status` set to `reversed` and the `amount` as `0`. We add the voided amount back to your Issuing balance, essentially undoing the balance impact of the original authorization.\n\nIf the authorization request is expired without capture, we send an `issuing_authorization.updated` [webhook](https://docs.stripe.com/webhooks) event with its `status` set to `reversed` and the `amount` representing any remaining amount authorized for possible late captures. We add the expired amount back to your Issuing balance, essentially undoing the balance impact of the original authorization.\n\n## Purchases in different currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards can be used for purchases in any currency that the card network supports. Stripe automatically converts the currency of the purchase into the card’s currency when holding funds, using the card network’s daily rate.\n\nThe `merchant_amount` represents the cost of the purchase in the local currency. The `amount` field represents the expected amount of the `Transaction` in the card’s currency and is not final until the `Authorization` has been captured.\n\n## Handling other authorizations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to regular authorizations, there are a few other cases that you should be ready to handle.\n\nSome authorizations are partially authorized to limit spending. This allows you to authorize a specific lower amount and is useful when there are not sufficient funds to cover the full purchase.\n\nFueling stations in the US are a special example of this. Learn more about [fuel dispenser transactions](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions).\n\nWhen an authorization is partially authorized, the `is_amount_controllable` field on the authorization request is set to `true`. You can specify the amount you want to approve by setting the `amount` in the webhook response body or the [approve](https://docs.stripe.com/api/issuing/authorizations/approve) call.\n\nIf you partially approve a cashback authorization, you must approve the full cashback amount. You can’t set the approved `amount` lower than the `cashback_amount`.\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate the creation of a new partial authorization, you can use the [Authorization Create API](https://docs.stripe.com/api/issuing/authorizations/test_mode_create) in the Issuing test helpers.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=100 \\  -d \"merchant_data[category]\"=automated_fuel_dispensers \\  -d is_amount_controllable=true`\n\n## Fuel dispenser transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a cardholder attempts a purchase at a fuel dispenser ([MCC 5542](https://docs.stripe.com/issuing/categories)), an `issuing_authorization.request` for 1 USD is sent (called a “status check”). The default amount held is 100 USD to cover the unknown purchase amount. When the cardholder finishes pumping fuel, an `issuing_authorization.updated` event is sent to reflect the amount of the purchase.\n\nWhen the fuel dispenser allows a [partial authorization](https://docs.stripe.com/issuing/purchases/authorizations?issuing-authorization-type=partial_authorization#handling-other-authorizations) by setting the field `is_amount_controllable` to `true`, you can respond with a lesser approved amount (for example, 50 USD). However, when a fuel dispenser doesn’t allow partial authorizations, you must either approve the network default amount (Stripe ignores any amount you specify), or decline the entire authorization.\n\nFor [Commercial Fleet programs](https://docs.stripe.com/issuing/customize-your-program#card-product-type), Stripe receives some information in the Issuing Authorization [fleet](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fleet) and [fuel](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fuel) hashes after the fuel has been dispensed. As a result, some of these fields won’t be populated during the `issuing_authorization.request` webhook and will be sent later in the `issuing_authorization.updated` webhook.\n\n## Using with Stripe Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAuthorizations on cards that use funds stored in Treasury [FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts) have a [`treasury` field](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-treasury) with references to Treasury resources: Treasury [Transaction](https://docs.stripe.com/api/treasury/transactions), [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits), and [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits).\n\n## Scenarios with no record of declined authorizations in the Dashboard or API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, an authorization made with an Issuing Card might be declined and neither you or your connected accounts will receive a webhook event or an authorization record (`iauth_`).\n\nIn these cases, make sure that you collect as much information as possible about the declined authorization before reaching out to Stripe support for assistance.\n\nWe recommend including the following information:\n\n*   The time of the decline\n*   The cardholder (`ich_`) who made the purchase\n*   The card (`ic_`) used for the authorization\n*   The merchant involved in the authorization\n*   Any other circumstances surrounding the authorization\n\nIt’s possible that the authorization is declined before any related information is transmitted to Stripe. In these cases, the cardholder involved must directly contact the business to determine the cause of the decline because Stripe hasn’t received a record of the authorization request.\n\nYou might encounter additional instances of declines without an associated webhook event or authorization object that Stripe can assist with. To determine the classification of the decline, contact Stripe support with the information provided above. We can help to determine the most appropriate steps to investigate the decline(s).",
    "title": "Issuing authorizations | Stripe Documentation",
    "description": "Learn how to use Issuing to handle authorization requests.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/token-management",
    "markdown": "# Token Management | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to manage network tokens on your cards.\n\n## About tokens![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTokens are virtual representations of issued cards that are created when a cardholder:\n\n*   Adds a card to a digital wallet like Apple Pay or Google Pay\n    \n*   Saves a payment method for their account at an online storefront or intermediary payment method\n    \n\nCustomers can use tokens for payment, and they don’t expose sensitive card information every time they use them. As such, they function as substitutes for card details including the number, expiration date, and verification code, reducing the risk of stolen card information because of a transaction or a fraudulent actor. Because they don’t expose sensitive card information, tokens are generally considered a more secure form of payment than physical cards, or the manual entry of card details into a checkout form.\n\nTokens are most relevant for users that:\n\n*   Allow their cardholders to spend using Apple Pay, Google Pay, or Samsung Pay\n*   Have significant issuing volume on Card Not Present transactions (like online purchases)\n*   Want to incorporate token behavior into their business logic\n\n## Token management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Issuing allows you to view and manage details associated with all tokens issued through your program with the [Tokens API](https://docs.stripe.com/api/issuing/tokens). We provide these details to help you better understand the characteristics of your tokens and how they’re being used. For example, you can find details on the following key characteristics:\n\n*   **The originator of a token:** Whether a [digital wallet provider or business](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider) is requesting the token.\n*   **The predicted riskiness of a token:** The card network’s assessment of [risk](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-visa-token_risk_score) and its [recommendation](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-suggested_decision) for a given token.\n*   **The device associated with a token:** Whether a watch, phone, or other [device](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-device-type) is requesting the token, and the [assessed risk](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-device_trust_score) of that device.\n*   **The cardholder characteristics of the token originator:** Whether the cardholder values such as the [name](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-cardholder_name) and [address](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-cardholder_address) match those of the cardholder in Stripe for additional verification.\n\nIn addition to visibility into token characteristics, the Tokens API allows you to activate, suspend, or deactivate tokens based on your desired workflows. For example, you might opt to do so to:\n\n*   Verify which existing tokens migrate to a new card when your program replaces a card.\n*   Deactivate tokens suspected of fraudulent activity without impacting the underlying card.\n\nThe `issuing.authorization` object also has a [token field](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-token) that populates if it uses a token.\n\n## Risk controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe receives a tokenization request, we assess a variety of variables to determine whether or not we should approve the request. As a result of this assessment, we choose one of the following:\n\n*   Approve the tokenization request, creating the token and adding it to a digital wallet.\n*   Require additional authentication, triggering a one-time passcode flow through the digital wallet provider. After the authentication successfully completes, we create the token and add it to the corresponding digital wallet. In these scenarios, the [status field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-status) is populated as `requested` until the additional authentication completes.\n*   Reject the tokenization request, preventing the token from being created.\n\nUsers also have the ability to put their own additional risk controls in place on top of Stripe’s. The Tokens API doesn’t allow for the outright rejection of a tokenization request at the point of creation, but users can deactivate or suspend tokens shortly after creation.\n\n## How tokens work![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnderstand how tokens work to give yourself a picture of token creation and the token lifecycle.\n\n### Create a token![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToken creation, or tokenization, is a multi-step process involving cardholders, users, a digital wallet provider, Stripe, and a card network. The example scenario below shows the steps the cardholder must complete and the processes involved when using the Tokens API as part of your program.\n\n#### Example scenario![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cardholder on your Issuing program wants to add their Stripe-issued card to a digital wallet, such as Apple Pay. To do so, they open their digital wallet app and complete prompts to enter their cardholder information (such as name and billing address), and card information (such as card number and expiration date).\n\nThis information is then submitted to the wallet provider, (in this case, Apple Pay) which is registered with the card’s underlying network (for example, Visa or Mastercard) as a ‘token requestor’ within the network. Next, the card network conducts a series of validations against this data, combines it with their own data into a tokenization request, and forwards it to Stripe to decide. Stripe conducts its own additional validation to determine how to proceed with the request. As noted earlier on this page, this validation step can result in three outcomes:\n\n*   Stripe approves the tokenization, which activates the token in the wallet, making it ready to use. Stripe sends out the `issuing_token.created` event to any listening webhook endpoints.\n*   Stripe requires additional verification, which prompts an authentication challenge to the cardholder. Stripe sends out the `issuing_token.created` event to any listening webhook endpoints. The token becomes active when the cardholder successfully completes this step. Stripe sends out the `issuing_token.updated` event to any listening webhook endpoints as soon as the token becomes activated.\n*   Stripe declines the tokenization request, which prevents the token from being added to the wallet. Stripe doesn’t send out the `issuing_token.created` event to any listening webhook endpoints.\n\nThe wallet provider or the card network can halt a tokenization request from proceeding further at any step in the tokenization process—Stripe doesn’t always receive notification when this happens.\n\nThe sequence diagram below helps to further illustrate the tokenization process.\n\n### Token lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a token is created, it can exist in four distinct states in the digital wallet:\n\n*   **Inactive**: The token request is outstanding, and the token can’t be used for authorizations yet. An inactive token in the Tokens API has a status of `requested`.\n*   **Suspended**: The token is temporarily unavailable to use in the wallet. A cardholder or a Stripe user using the Tokens API can trigger a token suspension. Cardholders can’t undo suspensions by a Stripe user (that is, through a digital wallet app). Users can only reactivate suspended cards directly through the Tokens API.\n*   **Active**: The token is available for use in the wallet it’s been added to.\n*   **Deleted**: The token has been removed from the wallet and you can no longer use it. You can’t modify tokens in this state.\n\nThe below state diagram helps show the different states, how they’re reflected in the API, and how you can use our APIs to modify them.\n\nStripe automatically synchronizes token status with the cardholder states and card states when they change. Stripe also migrates tokens between card replacements if the original card isn’t canceled first. To see which tokens are associated with which card, use the [List API](https://docs.stripe.com/api/issuing/tokens/list).\n\n### Merchant tokens![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses can also create tokens when saving a payment method for future use at a retailer (for example, a cardholder saving their card details for checkout at Amazon). In these scenarios, the business originates the token creation, and the Tokens API won’t have the [wallet\\_provider field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider). To assess the underlying business that originated the token, we recommend examining the [business details](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data) associated with authorizations conducted using the token. If you issue cards from MasterCard, tokens that originate from them might populate a readable name in the [network\\_data.mastercard.token\\_requestor\\_name field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-mastercard-token_requestor_name).\n\nMerchant tokens are tied to the specific business (token requestor in the card network) that originates them and can’t be used at other businesses.\n\n### Identify when a token was used for a transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAuthorizations or Transactions that used a token have an expandable reference to the Token object in the `token` attribute. This field is null for Authorizations or Transactions that didn’t use a token. Combine this with the `wallet` attribute on the Authorization or Transaction object, or the [`wallet_provider`](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider) attribute on the Token object, to determine whether a digital wallet token was used.\n\nSee the [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-token) and [Transactions](https://docs.stripe.com/api/issuing/transactions/object#issuing_transaction_object-token) API documentation for more details.\n\n## Network data restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Issuing token object contains an optional, [expandable field](https://docs.stripe.com/api/expanding_objects) called [network\\_data](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data). It contains additional, sensitive card network details about your tokens, primarily related to the token creation process. Because this data is highly sensitive, you must have a [restricted access key](https://docs.stripe.com/keys#create-restricted-api-secret-key) with the necessary permissions to access the data, and can only view the data on a token within the first 24 hours after token creation (based on the **created** value). This data is only available in the API to [retrieve a token](https://docs.stripe.com/api/issuing/tokens/retrieve) and the API to [update a token status](https://docs.stripe.com/api/issuing/tokens/update).\n\nTo access this data, configure your restricted access keys with the following permissions:\n\n*   Issuing tokens read access for Retrieve and List methods\n*   Issuing tokens write access for the Update Status method\n*   Issuing token network data read access for accessing **network\\_data** within the 24 hour time limit\n\nIf you need access to **network\\_data** beyond the initial 24-hour period that it’s available for, you must [limit the IP addresses](https://docs.stripe.com/keys#limit-api-secret-keys-ip-address) from which your restricted access keys will use.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn Issuer’s cardholder can create tokens for free at storefronts or in digital wallets. We recommend creating one in a digital wallet of your choice to understand the webhook events, API fields, and effects of updating a token. To do so, follow the [Digital Wallets guide](https://docs.stripe.com/issuing/cards/digital-wallets) for manual provisioning first.\n\nIf you prefer to test Tokens API in test mode, you can create a test mode authorization with the [wallet field](https://docs.stripe.com/api/issuing/authorizations/test_mode_create#test_mode_create_authorization-wallet) set to one of the available choices. The **token** field is set on the resulting authorization. You can then use the API methods on this token as normal. In these scenarios, not all fields are set, including **network\\_data**, and this token isn’t used for subsequent test authorizations.\n\n## The Tokens API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToken data is only accessible through the Tokens API. Below are a few examples applications.\n\n### Verify a successful manual provisioning example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In this example, you subscribe to the `issuing_token.created` and `issuing_token.updated` events.\n*   When you receive an `issuing_token.created` event, use the Retrieve API and expand **network\\_data** to look at provisioning details. Here’s an example:\n\n`{   \"id\": \"evt_1NxBn3FUQNp5XJkna0rkKU2r\",   \"object\": \"event\",   \"api_version\": \"2024-06-20\",   \"created\": 1691100189,   \"data\": {     \"object\": {       \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",       \"object\": \"issuing.token\",       \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",       \"created\": 1691100179,       \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",       \"last4\": \"9203\",       \"livemode\": true,       \"network\": \"mastercard\",       \"network_updated_at\": 1691100170,       \"status\": \"requested\",       \"wallet_provider\": \"apple_pay\"     }   },   \"livemode\": true,   \"pending_webhooks\": 0,   \"request\": {     \"id\": \"req_ARTvFhTufhHna9\",     \"idempotency_key\": \"49a40678-8f45-4c91-9d6f-98a5bd569f9d\"   },   \"type\": \"issuing_token.created\" }`\n\n*   Check that the **wallet\\_provider** field is populated, which tells you that it originates from a digital wallet, and take note of the object’s **id**. Use that in the Retrieve API call:\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d \"expand[]\"=network_data \\  -G`\n\nThis yields the following response:\n\n`{   \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",   \"object\": \"issuing.token\",   \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",   \"created\": 1691100159,   \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",   \"last4\": \"9203\",   \"livemode\": true,   \"network\": \"mastercard\",   \"network_data\": {     \"device\": {       \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",       \"ip_address\": null,       \"location\": \"+30.22/-89.10\",       \"name\": \"AB's phone\",       \"phone_number\": null,       \"type\": \"phone\"     },     \"mastercard\": {       \"card_reference_id\": \"...\",       \"token_reference_id\": \"...\",       \"token_requestor_id\": \"...\",       \"token_requestor_name\": \"APPLE PAY\"     },     \"type\": \"mastercard\",     \"wallet_provider\": {       \"account_id\": null,       \"account_trust_score\": null,       \"card_number_source\": \"manual\",       \"cardholder_address\": null,       \"cardholder_name\": null,       \"device_trust_score\": null,       \"hashed_account_email_address\": null,       \"reason_codes\": [],       \"suggested_decision\": null,       \"suggested_decision_version\": null     }   },   \"network_updated_at\": 1691100170,   \"status\": \"requested\",   \"wallet_provider\": \"apple_pay\" }`\n\n*   In the example, **card\\_number\\_source** is `manual`, token **status** is `requested`, and it’s an Apple Pay wallet. This means the cardholder had the card details with them when they put the card in their Apple Wallet, and they need to complete additional verification before they can use the card in the wallet.\n*   A few seconds later, you can see an `issuing_token.updated` event for the same token. The token status is now in the `active` state. This means the cardholder successfully completed the verification and can use their card for Apple Pay.\n\n### Delete a suspicious merchant token example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In this example, you subscribe to the `issuing_token.created` event.\n*   The webhook receives an `issuing_token.created` event.\n\n`{   \"object\": {     \"id\": \"intok_1NuMIZuTQ2hhXJooNmDzEz0t\",     \"object\": \"issuing.token\",     \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",     \"created\": 1691100179,     \"device_fingerprint\": null,     \"last4\": \"9203\",     \"livemode\": true,     \"network\": \"visa\",     \"network_updated_at\": 1691100170,     \"status\": \"active\"   } }`\n\n*   The token has no **wallet\\_provider** field, so it’s a merchant token. Use the Retrieve API and expand **network\\_data** to look at provisioning details.\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d \"expand[]\"=network_data \\  -G`\n\nThis yields the response:\n\n`{   \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",   \"object\": \"issuing.token\",   \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",   \"created\": 1691100186,   \"device_fingerprint\": null,   \"last4\": \"4674\",   \"livemode\": true,   \"network\": \"visa\",   \"network_data\": {     \"visa\": {       // ...other fields     },     \"type\": \"visa\",     \"wallet_provider\": {       \"card_number_source\": \"manual\",       \"cardholder_address\": null,       \"cardholder_name\": \"abc\",       // ...other fields     }   },   \"network_updated_at\": 1691100170,   \"status\": \"active\", }`\n\n*   You can see that the cardholder name is an invalid value that doesn’t match the expected cardholder name.\n*   To avoid any fraudulent activity, use the Update Status API to delete the token before it can be used. Then follow up with the cardholder to see if the token was actually requested by them. If they didn’t request it, cancel and replace the card if the number was stolen, or the account compromised.\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d status=deleted`\n\n### Device monitoring example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs with the previous examples, subscribe to the token events, and perform a Retrieve API request on the ID when you receive an event. In this case, you see that a **device\\_fingerprint** is populated, and check the **network\\_data.device.location** field. You see that the device was provisioned in a different country using the location coordinates. You see that you received prior notice that this cardholder was traveling abroad, and that it matches the country that they specified they were traveling to.",
    "title": "Token Management | Stripe Documentation",
    "description": "Learn how to use Issuing to manage network tokens on your cards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/purchases/transactions",
    "markdown": "# Issuing transactions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to handle transactions.\n\nAfter an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is approved and is captured, the `status` on the authorization is set to `closed` and a [Transaction](https://docs.stripe.com/api#issuing_transaction_object) object is created. This normally happens within 24 hours; however hotels, airlines, and car rental companies are able to capture up to 31 days after authorization.\n\nWhen an authorization is captured, two things happen.\n\n*   The `status` on the authorization is set to `closed`, releasing the purchase amount held by that authorization. A [balance transaction](https://docs.stripe.com/reports/balance-transaction-types) of type `issuing_authorization_release` is created to represent this.\n*   A new transaction object of type `capture` is created. The purchase amount is deducted from the [balance you’re using for Issuing](https://docs.stripe.com/issuing/funding/balance).\n\n[Spending controls](https://docs.stripe.com/issuing/controls/spending-controls), [real time authorization controls](https://docs.stripe.com/issuing/controls/real-time-authorizations), and card status (whether a card is active or not) don’t apply for capture. They can be used to determine whether authorizations are approved, but captures for approved authorizations always succeed.\n\n## Handling other transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to regular transactions, there are a few other cases that you should be ready to handle.\n\nRefunds are transactions with `type` of `refund`.\n\nWhen we create a transaction representing a refund or credit, we try to link it to the original payment authorization. Refunds aren’t necessarily tied to the original payment transaction or authorization, so linking them is an inexact science. As a result, we might link to an unrelated authorization or be unable to link to an authorization at all (for example, if the card is credited rather than refunded). In these cases, the `authorization` field of the transaction is set to `null`, and the transaction won’t be linked to the authorization. We process all refunds and credits the same way, regardless of their linkage to a payment authorization.\n\n`{   \"id\": \"ipi_1GTG10EEsyYlpYZ9VJn2xV3B\",   \"object\": \"issuing.transaction\",   \"amount\": 100,   \"authorization\": \"iauth_1GBZQyEEsyYlpYZ9255L8GQC\",   \"balance_transaction\": null,   \"card\": \"ic_1GBZQJEEsyYlpYZ99v6rq38S\",   \"cardholder\": null,   \"created\": 1585783834,   \"currency\": \"usd\",   \"livemode\": false,   \"merchant_amount\": 100,   \"merchant_currency\": \"usd\",   \"merchant_data\": {     \"category\": \"taxicabs_limousines\",     \"city\": \"San Francisco\",     \"country\": \"US\",     \"name\": \"Rocket Rides\",     \"network_id\": \"1234567890\",     \"postal_code\": \"94111\",     \"state\": \"CA\",     \"url\": null   },   \"metadata\": {},   \"type\": \"refund\", }`\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate the creation of a refund transaction, you can use the [Transaction Refund API](https://docs.stripe.com/api/issuing/transactions/test_mode_refund) in the Issuing test helpers.\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/transactions/`\n\n`{{TRANSACTION_ID}}`\n\n`/refund \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo create a refund transaction that doesn’t link to an authorization, use the [Create Unlinked Refund API](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund) in the Issuing test helpers.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000`",
    "title": "Issuing transactions | Stripe Documentation",
    "description": "Learn how to use Issuing to handle transactions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/purchases/disputes",
    "markdown": "# Issuing disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to dispute transactions.\n\nThe purpose of a dispute is to recover funds for captured transactions. Disputes are often used to correct fraudulent transactions or problems with the quality or delivery of the product.\n\nStripe offers a guided Dashboard process and an API to submit disputes and monitor them through to resolution. This process typically takes between 30 and 90 days. If you only manage occasional disputes, we recommend using the Dashboard. If you manage a high volume of disputes, we recommend programmatically managing disputes using the API.\n\nIf you think a card has been compromised, [cancel and replace it](https://docs.stripe.com/issuing/cards/physical/standard#cancelling-cards) using the Dashboard or the API before continuing with the dispute process.\n\n## Considerations before initiating a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCheck the transaction’s dispute eligibility.\n\n*   The transaction must be a [capture](https://docs.stripe.com/issuing/purchases/transactions) and not a refund.\n    \n*   The transaction isn’t a mobile push payment transaction.\n    \n*   Fewer than 110 days have passed since the business captured the transaction.\n    \n    *   However, if you plan to file an Authorization dispute, this deadline is shorter:\n        *   For Visa, the transaction was captured fewer than 65 days ago.\n        *   For Mastercard, the transaction was captured fewer than 80 days ago.\n*   If you plan to file a fraud dispute, ensure that:\n    \n    *   **For Visa card-not-present fraud:** Fewer than 35 fraud disputes have been filed on the card in the last 120 days.\n    *   **For any type of Mastercard fraud:** Fewer than 35 fraud disputes have been filed over the card’s lifespan.\n\nStripe attempts to block disputes on ineligible transactions. In the Dashboard, the **Dispute transaction** button is only enabled for eligible transactions. In the API, attempting to dispute an ineligible transaction results in an error.\n\nNext, ensure that the cardholder has exhausted other means of resolving the issue. They must attempt to return any products they received, cancel any ongoing services, and seek a refund directly from the business. Collect documentation of these attempts to use as evidence when filing the dispute.\n\n## Lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Merchant terminology\n\nIn the above diagram, _merchant_ refers to the _acquiring merchant_, the business receiving the payment.\n\nNewly-created disputes begin in an `unsubmitted` status. At this point, you can update their evidence and metadata. After you’ve added all the required evidence, you can then submit the dispute. If you don’t submit a dispute within 110 days of the transaction clearing, its status becomes `expired`.\n\nStripe and card networks process disputes that have a status of `submitted`. As such, you can’t update dispute evidence, but you can still update their `metadata`. Submitted disputes enter into a multi-step process defined by card networks and participating banks. After a dispute is resolved, Stripe transitions it to either the terminal `won` or `lost` status.\n\n## Creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFill out the **Dispute Amount** field to indicate the disputed amount (full or partial). The field’s initial value is the transaction amount. Submissions that have empty **Dispute Amount** fields create disputes with the full transaction amount.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-issuing-partial-disputes-amount.4e5e241c2c73428c07e60cf2e2c133bc.png)\n\nDispute Amount field on the Issuing dispute creation page\n\nClick **Dispute transaction** when viewing an eligible transaction. You’ll be redirected to a form which requests different information based on the dispute reason and product type (merchandise, services or digital goods). A dispute is created the first time you click **Save**. If you click **Submit** without saving, we create a dispute before submitting it.\n\nOnce you submit a dispute, you can’t modify the information or resubmit the dispute.\n\n## Update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the **Unsubmitted** tab to access disputes that are in progress. The **Submit before** date indicates when the dispute expires.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-unsubmitted-tab-usd.a6674be2254ad9d5fafde47eba475552.png)\n\nFrom the individual dispute page, click **Edit submission** to access the form where you can update the evidence.\n\n## Submission ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Submit** button on the evidence form is enabled when all required evidence is present.\n\n#### Caution\n\nReview the evidence thoroughly before you submit, because you can’t modify dispute information after submitting the dispute.\n\n## Resolution ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe updates a dispute’s status when we hear back from the card network.\n\nIf you win the dispute, its status changes to `won` and we credit your Issuing balance in the form of an `issuing_dispute` [balance transaction](https://docs.stripe.com/reports/balance-transaction-types#issuing_related). This balance transaction is accessible in the Dashboard under [All transactions](https://dashboard.stripe.com/balance) and on the bottom of the dispute detail page.\n\n#### Note\n\nIf you make a transaction in a currency other than your account’s default currency (for example, a GBP transaction that your USD card pays), Stripe refunds the won dispute in the transaction’s original currency.\n\nIf you lose the dispute, the dispute’s status changes to `lost` and we don’t credit any amount to your Issuing balance.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-balance-transactions-panel-usd.a4e6e46b8e975afd9ff3ffd67fbcb840.png)\n\nViewing a dispute’s balance transactions in the Dashboard.\n\nStripe processes disputes according to card network rules. These rules are updated twice a year. You can review the latest rules on each network’s website:\n\n*   **Visa**: [Visa Core Rules and Visa Product and Service Rules](https://usa.visa.com/dam/VCOM/download/about-visa/visa-rules-public.pdf)\n*   **Mastercard**: [Mastercard Rules](https://www.mastercard.us/en-us/business/overview/support/rules.html)\n    *   The Mastercard Chargeback Guide is especially useful for understanding Mastercard’s dispute rules.\n\n## Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s test mode allows you to test dispute logic without any live mode effects. For example, we send webhook events, create [balance transactions](https://docs.stripe.com/reports/balance-transaction-types), and update your test mode Issuing balance without moving any funds or changing any balances in live mode.\n\nSimilar to live mode, a test mode dispute transitions to `expired` 110 days after the transaction is captured.\n\nWhen submitting a test mode dispute through the Dashboard, you can choose the dispute’s outcome. Selecting **Won** automatically changes the dispute’s `explanation` field to `winning_evidence`, and selecting **Lost** automatically changes the dispute’s **explanation** field to `losing_evidence`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-dispute-testmode-outcome.4ecf905762fae3b734c479c7b838686c.png)\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo be notified of changes to your disputes, you can listen for Issuing dispute [webhook events](https://docs.stripe.com/webhooks). All Issuing dispute events contain the updated [Dispute](https://docs.stripe.com/api/#issuing_dispute_object) object.\n\n| Webhook events | Trigger |\n| --- | --- |\n| `issuing_dispute.created` | Dispute created. |\n| `issuing_dispute.updated` | Dispute updated. |\n| `issuing_dispute.submitted` | Dispute submitted. |\n| `issuing_dispute.funds_reinstated` | Funds transferred to your Issuing balance (usually associated with `won` dispute status). |\n| `issuing_dispute.closed` | Dispute transitioned into a `won`, `lost`, or `expired` status. |\n\n## Dispute reasons and evidence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must submit supporting documentation with a dispute. The quality of this documentation directly influences your chances of winning and the strongest disputes have clear, descriptive documentation.\n\nThe type of documentation required depends on the reason for the dispute. Because of this, it’s important to choose the correct reason.\n\nDisputes can be submitted with one of these reasons:\n\n*   **Canceled**: Cardholder canceled or returned merchandise or canceled services, and the merchant didn’t process a credit or void a transaction receipt.\n*   **Duplicate**: Covers processing error dispute types, including duplicate transaction, incorrect amount, paid by other means, and so on.\n*   **Fraudulent**: The cardholder’s details were compromised and the transaction wasn’t authorized by them.\n*   **Merchandise not as described**: Cardholder received the merchandise, but it didn’t match what was presented at time of purchase, or it was damaged or defective.\n*   **Not received**: Cardholder participated in the transaction but didn’t receive the merchandise or service.\n*   **No valid authorization**: (API only) The merchant processed a transaction without a valid authorization.\n*   **Service not as described**: Cardholder received the service, but it didn’t match what was presented at time of purchase.\n*   **Other**: A dispute scenario that doesn’t clearly qualify as any other dispute reason. Authorization disputes might have this reason (for example, if filed through the Dashboard).\n\nIn the Dashboard, “Merchandise not as described” and “Service not as described” are consolidated under “Not as described”.\n\nEach reason requires a different set of evidence:\n\n| Evidence | Description |\n| --- | --- |\n| Explanation | A description of the transaction and why the cardholder is disputing it. You can also use this field to provide an additional explanation that’s not captured anywhere else. It’s important for the cardholder to verify that they didn’t participate in the transaction, and that the transaction wasn’t made by someone known to the cardholder. |\n| Additional documentation | Relevant documents such as card statements or return shipping tracking. The files must be in PDF or JPEG format. Before submitting the dispute, ensure that all text and images are clear and large enough to be legible in a black-and-white fax transmission. Encouraging cardholders to keep their billing address up to date is a key component in the assessment of fraudulent disputes. |\n\n### Fraud disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can dispute a transaction for fraud if the cardholder’s card details were compromised and they didn’t authorize the transaction.\n\nBefore filing a dispute:\n\n1.  Confirm with the cardholder that they didn’t make the transaction in error, and that it wasn’t made by someone known to them. Transactions made by a friend or family member, for example, don’t constitute fraud for dispute purposes.\n2.  Cancel the affected card.\n\nIn certain situations, you can lose fraud dispute rights for a transaction:\n\n*   **For card-present transactions**: A card network might automatically reject a fraud dispute because liability defaults to the issuer.\n*   **For card-not-present transactions**: A card network might automatically reject a fraud dispute if the cardholder was authenticated during the transaction. That often happens when [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") was requested or a secured payment method like Apple Pay was used.\n\n### Authorization disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach time an acquiring merchant processes a transaction, they must first request an authorization from the issuer. If a merchant captures a payment without a valid authorization, you can dispute the transaction. The reason you should choose depends on the surface used to submit the dispute:\n\n*   **Filing dispute via API**: File the dispute under the `no_valid_authorization` reason.\n*   **Filing dispute via Dashboard**: File the dispute under the `other` reason and specify in the `explanation` field that the merchant didn’t get a valid authorization.\n\nAuthorization disputes are distinct from fraud disputes:\n\n*   File a fraud dispute when the cardholder didn’t participate in the transaction. For example, a thief stole their card and used it.\n*   File an authorization dispute when the merchant didn’t have a valid authorization for the transaction. For example, they captured a payment two days after its authorization expired.\n\nA common reason for an authorization dispute is an overcapture. An overcapture occurs when the captured amount exceeds the authorized amount. When you submit an authorization dispute for an overcapture, you must adjust the dispute amount to include only the amount that exceeded the authorization.\n\n#### Note\n\nSome Merchant Category Codes (MCCs) allow overcaptures of certain amounts or disallow authorization disputes. For details, refer to the current card network rules for your region.\n\nA card network can reject an authorization dispute if the transaction had a valid authorization. In the case of an overcapture, it can reject the dispute if the disputed amount doesn’t take into account the allowed overcapture amount for the associated MCC.\n\n## Withdrawing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe can only withdraw a dispute within one day of its submission to the card network. If you want to withdraw a dispute, contact [Stripe Support](https://support.stripe.com/contact) immediately.\n\n## Liability for fraud (platforms in the USA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost aspects of Regulation Z don’t apply to business-purpose cards, but Regulation Z does protect users of business-purpose cards from fraud and other types of “unauthorized card use,\" which means the use of a charge card by a person who doesn’t have the authority to use it. In most cases, an accountholder can’t be held responsible for unauthorized use of cards linked to their account unless a reasonable investigation into the fraud is conducted. However, if the account holder has 10 or more employee authorized users, they might not qualify for this protection.\n\nWhen one of your users disputes a transaction because the user believes it was unauthorized, Stripe sends the dispute to the card network for adjudication (as with any other type of disputed transaction). Stripe or the card network determines who must pay for the fraud: you or the merchant.\n\nIf Stripe or the card network determines the merchant is liable for the fraud, then neither you nor your user are responsible for the disputed transactions.\n\nIf Stripe or the card network determines that you’re liable for the fraud, then you might be required to pay for the disputed transaction. Stripe performs a reasonable investigation into the dispute to determine whether fraud actually occurred or whether the user doesn’t qualify for protection under Regulation Z. If the investigation uncovers that unauthorized card use actually occurred and that the user qualifies for protection, then you remain liable for the unauthorized transactions. Alternatively, if the investigation uncovers that unauthorized card use didn’t occur or that the user doesn’t qualify for protection, then we hold the accountholder responsible for the disputed charges.\n\n## Emailing connect accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing platforms must send regulated notice emails to connected accounts when a dispute is submitted, and again when a dispute is won or lost. [Learn more about regulated notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n## Use with Stripe Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisputes of `ReceivedDebits` on `FinancialAccounts` have a corresponding [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals) once the dispute is submitted.",
    "title": "Issuing disputes | Stripe Documentation",
    "description": "Learn how to use Issuing to dispute transactions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/access",
    "markdown": "# Get started with API access to Treasury and Issuing\n\n## Immediately access test mode to experiment before going live.\n\nYou can use Stripe Treasury and Issuing in test mode to see what functionality you want to enable in your live integration.\n\n## Get test mode access to Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable your Stripe account to request `issuing` and `treasury` capabilities on connected accounts.\n\n[Activate Test Mode in the Dashboard](https://dashboard.stripe.com/setup/treasury/activate?a=1)\n\nClick **Activate Test Mode in the Dashboard**. Then, from the Dashboard, click **Get started** > **Enable Test mode**.\n\n## Start with test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are a few ways to start testing the Issuing and Treasury APIs.\n\n### Test with the Issuing and Treasury sample application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Issuing and Treasury sample application](https://docs.stripe.com/treasury/examples/sample-app) to onboard your first test mode connected account, create a financial account and card, and make test transactions.\n\n### Test from the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must use the API or sample app to create financial accounts and cards linked to financial accounts. After you create a financial account, you can use the Dashboard to view activity, copy routing and account numbers, and move funds from your platform Treasury balance into the financial account. After you create a card, you can use the Dashboard to make test authorizations. See [Use the Dashboard for Issuing with connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing).\n\n### Test Treasury only (without Issuing)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test Treasury without Issuing, request the `treasury` capability on a connected account and don’t request `card_issuing`. When you activate test mode through the link above, it gives your platform the ability to request both capabilities independently.\n\n### Confirm test mode is enabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo confirm you’ve enabled Treasury and Issuing in test mode, click **Treasury** in the Dashboard to access the [Financial Accounts page](https://dashboard.stripe.com/test/connect/financial-accounts). If you can’t access Financial Accounts then you haven’t enabled access.\n\n## Configure your account to go live![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnabling Treasury and Issuing through the link above lets you try out basic functionality in test mode. However, this is a temporary state, and after you’re approved for a [supported business use case](https://support.stripe.com/questions/supported-business-use-cases-for-stripe-issuing), your account loses access to any test mode objects you created in this mode, such as test financial accounts, cardholders and cards.\n\n[Speak to sales](https://go.stripe.global/treasury-inquiry) to get approved for a supported business use case, and configure your account for live mode and ongoing test mode access.\n\n#### Caution\n\nSpeak to sales before building a full API integration, because some functionality could change.",
    "title": "Get started with API access to Treasury and Issuing | Stripe Documentation",
    "description": "Immediately access test mode to experiment before going live.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/requirements",
    "markdown": "# Treasury requirements | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the requirements for using Stripe Treasury.\n\nTreasury has compliance requirements and restrictions in addition to those needed for [Stripe Payments](https://docs.stripe.com/payments). They apply to both the platform and its connected accounts. Offer your Treasury-based financial services only to businesses that meet the requirements.\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury is available only to platforms and connected accounts located in the United States.\n\n## Business use cases only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury is available only to platforms with B2B use cases. Stripe doesn’t offer financial accounts to consumers or provide Treasury features for consumer purposes.\n\n## Connected account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\n## Supported countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury currently supports businesses in the US only, but the business owners and authorized persons of those businesses can reside in over 150 countries. Some countries of residence, however, can require a more detailed review before you can onboard them to your platform.\n\nStripe prohibits using Treasury for any dealings, engagement, or sale of goods or services linked directly or indirectly with jurisdictions Stripe has deemed high risk, such as Cuba, Iran, North Korea, Crimea region, and Syria.\n\n### Standard review countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury supports business owners, beneficial owners, and authorized persons that have a primary address in one of the following countries, typically without an enhanced review:\n\n### Enhanced review countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury supports Business owners, beneficial owners, and authorized persons that have a primary address in one of the following countries, but they’re subject to an enhanced review:\n\n*   St Vincent and the Grenadines\n    \n\n## Prohibited and restricted business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe businesses and business practices in the following categories are either restricted or prohibited from using Stripe Treasury. Financial network rules or the requirements of our financial services providers determine whether Stripe can provide financial services. In some cases, a business in one of these categories can use Treasury after getting explicit approval from Stripe.\n\n#### Warning\n\nBusinesses that offer illegal products or services are never eligible to use Stripe Treasury.\n\nFor more information about businesses restricted by Stripe Payments, and by extension Treasury, see [Prohibited and Restricted Businesses](https://stripe.com/restricted-businesses).\n\n### Prohibited business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe businesses and business practices in the following categories are classified as prohibited and are therefore not eligible to use Treasury:\n\n*   Adult industry, escort, or dating services\n*   Arms trading—retail or manufacturing\n*   Casinos or gaming\n*   Cryptocurrency\n*   Marijuana, tobacco, or illegal drug products and services\n*   Money services and currency exchange\n*   Unfair, predatory, or deceptive practices, including multi-level marketing and pyramid schemes\n*   Payday lending and tax anticipation programs\n*   Stock promotion\n*   Tattoo and massage parlors\n*   Waste or hazardous material management\n\n### Restricted business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following categories of businesses and business practices are classified as restricted and are subject to enhanced review:\n\n#### Regulated industries, such as:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Virtual currencies and cryptocurrencies, non-fungible tokens (NFTs), and mining services\n*   Investment and brokerage services\n*   Insurance services\n*   Debt collection, debt relief, and credit restoration agencies\n*   Bail bonds\n*   Lending and cash advance services\n*   Student loan assistance companies\n*   Unregistered charities\n\n#### Businesses that can pose elevated financial risk, such as:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Art dealers, antique dealers, or auction houses\n*   Import, export, and freight transport of physical commodities\n*   Jewelry, gems, precious metals—dealers or wholesalers\n*   Games of skill and chance, including lotteries, fantasy sports, and sweepstakes\n*   Direct marketing businesses, including telemarketing, “As Seen on TV”, and door-to-door sales\n*   Telecommunication or surveillance equipment providers\n*   Talent and model agencies\n*   Vehicle sales\n*   Secondhand shops and pawnshops\n*   Warranties and lifetime guarantees\n*   Travel agencies, including tour operators, hotel reservation services, and resort promotions\n*   Pharmaceutical, vitamin, and supplement sales\n\n## Politically exposed persons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe screens applications to identify any connected account user that is a politically exposed person (PEP). All PEPs are subject to enhanced review.",
    "title": "Treasury requirements | Stripe Documentation",
    "description": "Understand the requirements for using Stripe Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/compliance",
    "markdown": "# Treasury and Issuing product marketing, design, and compliance guidelines\n\n## Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.\n\n#### Legal Disclaimer\n\nDon’t consider any of the information in this guide as legal advice. If you use Stripe Treasury and Stripe Issuing, consult your own legal counsel for advice about product branding and using Stripe products to offer financial services.\n\nTo offer and promote Stripe Treasury and Issuing products to your customers and connected accounts, your marketing and user interfaces must adhere to the guidelines that we outline here. These guidelines help you navigate the financial regulations that apply to Stripe products. We’ve organized them into the following sections:\n\n*   [Account management](#account-management)\n*   [Required agreements and disclosures for Issuing](#issuing-terms)\n*   [Required agreements and disclosures for Treasury](#treasury-terms)\n*   [Required agreements and disclosures for fees, credits, and rewards programs](#fees-credits-rewards-terms)\n*   [Customer communications and documents](#customer-communications-and-documents)\n*   [Going live and marketing](#going-live)\n*   [Recordkeeping](#recordkeeping)\n\nThe following table outlines the steps you must complete before onboarding your first connected accounts. If you need help, contact the Stripe Compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nIf you make changes to any items in the table at a later date, you must submit a request to the Stripe Compliance team using the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n| Topic | Checklist | Product applicability |\n| --- | --- | --- |\n| Application flow | Your application flow:<br><br>*   Includes bank disclosures<br>*   Includes required agreements<br>*   Required KYC fields<br>*   Approved by Stripe Compliance | Treasury and Issuing |\n| Fees and credits | You’ve [submitted your planned fees and credits to Stripe](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms) | Treasury and Issuing |\n| Marketing and user interfaces | Your marketing materials, including your website landing pages, dashboards, and support pages:<br><br>*   Are approved by Stripe Compliance (or align with messaging guidelines)<br>*   Include bank disclosures | Treasury and Issuing |\n| Customer service channels | Your customers can access your customer service channels and they can:<br><br>*   Submit complaints<br>*   Submit disputes | Treasury and Issuing |\n| Account statements (optional) | If you choose to send account statements, they must:<br><br>*   Be approved by Stripe Compliance<br>*   Include Bank disclosures and relevant contact information | Treasury |\n| Receipts | You have a mechanism to send your customers Stripe-generated money transmission receipts | Treasury and Issuing |\n| Regulated customer notices | You send regulated customer notices to applicants and accountholders, and they’re either:<br><br>*   Sent by Stripe on your behalf<br>*   Sent by your platform with templates approved by Stripe Compliance | Issuing Spend Card and Charge Card |\n| Recordkeeping | You have a mechanism to retain copies of:<br><br>*   Customer consent to open accounts<br>*   Marketing materials and user interfaces<br>*   Customer communications, such as support emails<br>*   Account statements, if applicable | Treasury and Issuing |\n\n## Account management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need the proper internal compliance controls before launching Stripe Treasury or Stripe Issuing. You also need to build the processes described in this section into your various workflows, customer service, and product channels.\n\n### Complaints program guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nComplaints are any expression of dissatisfaction with a product, service, policy, or employee related to Stripe Treasury or Stripe Issuing, except those expressions made by employees of your company. Properly handling complaints is mandatory when offering financial services products. See the [Handling complaints](https://docs.stripe.com/treasury/handling-complaints) guide for detailed complaint management requirements.\n\n### Disputes and charge errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of providing customer support, you might be notified of suspected disputed charges, charge errors, or both. The two most common types of disputes or errors are:\n\n*   You or your customer believe a charge is unauthorized\n*   You or your customer see an error on an account statement\n\nIf these errors occur, submit the dispute through the Stripe Dashboard. Select the relevant transactions and choose **Dispute**. Be prepared to provide Stripe with specific information to investigate the dispute, such as:\n\n*   Details about the authorized user\n*   Details about the disputed charge amount\n*   The transaction date\n*   An explanation of why the disputed charge is an error or unauthorized\n\nYou must report any disputed charge or error immediately upon notification of it. Failure to do so might impact your financial liability. To avoid a sustained reduction to your available balance, you can pay the disputed charge while we determine the validity of the dispute. If Stripe deems the dispute valid, we credit the disputed charge amount back to the appropriate account.\n\n### Application flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must provide for three main compliance requirement workflows:\n\n*   Collection of required KYC information\n*   Presentation of the required bank disclosure\n*   Ensuring that your applicant reads and accepts the required legal agreements\n\n## Required agreements and disclosures for Issuing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a platform and you’re not using Stripe-hosted onboarding, you must present the following program-specific agreements and disclosures for your connected accounts to accept during their account opening process. You must also provide them with ongoing access to these agreements.\n\n### Spend card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Spend Card (Celtic Bank)](https://stripe.com/legal/celtic-spend-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Spend Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-spend-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the “Issuing Bank Terms” link that states: “By clicking “submit application,” you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms, and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For Connected Accounts with a business address in CA, NY, or UT, you must present one of the following disclosures:\n    *   For platforms that don’t charge fees:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (no fee)](https://stripe.com/legal/issuing-offer-document)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (no fee)](https://stripe.com/legal/crb-issuing-offer-document)\n    *   For platforms that charge a $0.10 fee when creating cards for users:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (fee included)](https://stripe.com/legal/issuing-offer-document-fees)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (fee included)](https://stripe.com/legal/crb-issuing-offer-document-fees)\n    *   For platforms that charge fees other than a $0.10 fee when creating cards for users:\n        *   If you charge fees beyond Stripe’s fee of 0.10 USD, you might be required to create your own commercial financing disclosure to present to your connected accounts for creating virtual cards. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. To assess the applicability of commercial financing disclosures to your program, contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\n_Authorized User Agreements and Disclosures._\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Charge card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Charge Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder) or Custom Platform Accountholder Terms\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Charge Card (Celtic Bank)](https://stripe.com/legal/celtic-charge-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Charge Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-charge-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n*   **Card Program Terms**: These are your bespoke program terms that supplement the Issuing Bank Terms. At a minimum, consider including the following items in your terms. Consult your legal counsel about which items to define within your own Card Program Terms.\n    *   Repayment methods, including automatic withdrawal consents\n    *   Billing cycles, including due dates\n    *   Fees\n    *   Rewards\n    *   Credit limits\n    *   Account closure requirements\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the **Issuing Bank Terms** link stating that signing the Issuing Bank Terms signifies consent to electronic signatures and communications. For example, your message might read: “By clicking the submit application button, you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms; and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For connected accounts with a business address in CA, NY, or UT, you must present your own custom commercial financing disclosure. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. Contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com) to assess the commercial financing disclosure requirements of your program.\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Commercial prepaid debit users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Commercial Prepaid Debit Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   [Issuing Bank Terms (Sutton Bank)](https://stripe.com/legal/issuing/commercial-prepaid-sutton-terms)\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   [Sutton Bank Authorized User Terms](https://stripe.com/legal/issuing/sutton-authorized-user-terms)\n\n## Required agreements and disclosures for Treasury ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must provide the following terms of service to your connected accounts and record their agreement before they can start using the Stripe Treasury Program:\n\n*   [Stripe Services Agreement](https://stripe.com/legal/ssa)\n*   [Stripe Treasury Terms - Connected Accounts](https://stripe.com/legal/ssa#services-terms)\n\n## Required agreements and disclosures for fees, credits, and rewards programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the previous agreements, your terms of service and fee schedule must clearly outline the fees and terms that you implement as part of your Treasury or Issuing program.\n\nYou must report to Stripe the details of any fees, credits, and rewards programs that you plan to offer. That helps make sure your user interfaces and marketing materials are compliant with financial regulations regarding fees or offer credits, especially in the form of rewards programs. Use the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n## Customer communications and documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo comply with applicable laws and regulations, you must send certain communications to both your applicants and accountholders upon certain trigger events.\n\nTo learn about customer communication requirements when using Issuing and Treasury together, see [Issuing regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n### Statements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProviding statements, while optional, is a best practice that allows your Treasury or Issuing customers to periodically check their transaction history. If you send statements, make sure they contain the following information:\n\n*   \\[Company\\] name and address.\n*   Your company’s customer support contact number and website\n*   Customer account number\n*   Customer name and address\n*   Required disclosures\n*   Transaction history (including opening and closing balances for the statement period)\n*   Fees and credits.\n*   Information about how you resolve errors and complaints\n\n### Receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne of the most important ongoing obligations you have in overseeing your Treasury or Issuing program is providing your customers with money transmissions receipts. Every regulated transaction your customers initiate generates a compliant money transmission receipt URL that you must share with your customer. You can provide these URL receipts in a few different ways, such as emailing them or making them available in your customer’s Dashboard. See the [Regulatory receipts guide](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) for more information on how to access hosted receipts. If you plan to charge your connected account owners any fees, whether they’re transactional or monthly recurring, include a description of the fee on the receipt so that they can reconcile it to corresponding transactions or monthly statements.\n\n## Going live and marketing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following information pertains to marketing and releasing your Stripe Treasury or Issuing programs to the public.\n\n### General requirements for marketing your account offerings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny message or communication you provide to the public for financial products or services they don’t currently use must be truthful and fair, and in the interest of your potential customers.\n\n### UDAP and correct messaging![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFederal regulation prohibits unfair and deceptive acts or practices (UDAP). To avoid UDAP violations, you must think of the end user first when developing and deploying any marketing materials.\n\nMake sure that marketing materials use clear messaging that fully explains product features, costs, benefits, and limitations. Don’t leave out key terms or fees, and don’t advertise product uses or features that aren’t true.\n\n| Do  | Don’t |\n| --- | --- |\n| Only use statements about products that are true, accurate, and aligned with how users engage with the products. | Don’t leave out key information from marketing content. If the information is likely to affect whether someone uses the product, then it’s “key.\" |\n| If you make claims that require additional data to support them, or if an end user needs to know more details to know how a certain claim is true, you must:<br><br>*   Provide documented evidence<br>*   Disclose that information | Make exaggerated claims that are hard to prove. Don’t make absolute statements that are disproved by a single exception. For example, “number 1,\" “every,\" “only,\" “all,\" “never,\" “always.\" |\n| Clearly explain all qualifying limitations and requirements needed by end users to get the product or features that you’ve advertised. | Don’t advertise features or programs that only a few applicants actually qualify for. |\n| All disclosures must meet a “clear and conspicuous” standard:<br><br>*   Font size must be large enough to read.<br>*   Font color must visibly contrast with the background.<br>*   Dynamic or video ads must have the disclosure on screen long enough to be read. | Don’t make disclosures hard to read. |\n| Disclosures used to explain or modify a claim must be tied to the claim they’re explaining.<br><br>*   Use a hyperlink directly linking to the disclosure (or include the disclosure next to the claim in the copy itself)<br>*   Use reference text or symbols (an asterisk, for example) directly after the claim and before the disclosure language. | Don’t bury disclosures in other non-key disclosures or footnotes. |\n| Disclose all account fees, costs, benefits, and terms as part of onboarding before your end users take out a product. | Don’t advertise products as “free” if you’re charging fees. |\n| Make sure all images used are properly licensed and that you can document this fact. | Don’t use images, formatting, or copy that implies products are endorsed by, or affiliated with, government entities or celebrities. |\n\n### Messaging guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following suggested messaging guidelines to convey key aspects of Stripe Issuing, Stripe Treasury, or both programs. Stripe or our banking partners have validated (proven as true) this content, so you can confidently use this messaging in user-facing materials.\n\n*   [Issuing](#issuing-messaging-guidelines)\n*   [Treasury](#treasury-messaging-guidelines)\n\nThe following tables include validated content you can provide in your marketing campaigns. You can make non-substantive changes (for example, changing the design or infusing your brand’s voice) to the suggested messaging as long as the key information remains the same. Any substantive deviations from these guidelines require you to submit marketing materials and get approval from Stripe and our bank partners. Approvals might take up to 10 business days to process.\n\nYou’re responsible for training employees on these requirements if they engage in marketing or sales activities for your Treasury or Issuing program.\n\n#### Issuing messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table provides guidelines for you to follow when developing messaging around your Issuing program.\n\n| Topic category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | Your card program name and your brand name must have equal status, as with plain text: Widget balance® + Stripe. When referencing registered brand products, you must adhere to their separate brand guidelines. You only need to use the ®, ™, SM, mark once per asset. | Don’t maintain unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Comparison value propositions | Use language promoting the benefits of the card:<br><br>*   Better than cash<br>*   Safer than carrying cash<br>*   Manage your money hassle free<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t make disparaging remarks about other financial products or institutions: this includes debit, credit, bank accounts, banks, or other financial products used or issued by financial institutions. Don’t allude to prepaid card programs as superior to other card products with terms like:<br><br>*   Better than credit<br>*   Better than a bank account<br>*   No interest<br>*   No security deposit<br>*   No debt |\n| Currency and using the funds | Use phrases like:<br><br>*   Access your contractor earnings<br>*   All \\[card program\\] cards are USD denominated<br>*   \\[Card program\\] cards can be used anywhere that accepts Visa cards | Don’t use phrases like:<br><br>*   Access your wages<br>*   Get funds in any format you want<br>*   Can spend money across the world |\n| What you can use the card for and limitations | Use phrases like:<br><br>*   Use \\[card program\\] for business needs<br>*   Get \\[card program\\] for your commercial needs<br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t use phrases like:<br><br>*   Use \\[card program\\] for anything you want<br>*   Spend funds to buy the things you love<br>*   Personal cards<br>*   Use these cards like a payday loan, title loan, or pawn shop loan |\n| Where to spend funds | Use phrases like:<br><br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend funds easily on your business | Don’t use phrases like:<br><br>*   Can be used just like a personal account<br>*   Get consumer cards<br>*   Spend funds to buy the things you love |\n\n#### Issuing messaging specifics per product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table provides guidelines for you to follow when developing messaging for specific cards in your Issuing program.\n\n| Card | Do  | Don’t |\n| --- | --- | --- |\n| Spend card only | Use phrases like:<br><br>*   …is a commercial credit program<br>*   A business credit card | Don’t use phrases like:<br><br>*   Debit card<br>*   Prepaid card<br>*   Better than a debit card |\n| Payout account only (Treasury account connected) | Money management account | Don’t use phrases like:<br><br>*   Bank account<br>*   Deposit account<br>*   Checking account<br>*   Savings account<br>*   Similar terms to the previous ones that connote a traditional bank account product |\n\n#### Treasury messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDon’t use words like “bank account,” “deposit account,\" “checking account,” “savings account,” or similar terms that imply a traditional bank account product because Stripe isn’t a bank. Pre-approved terms include the following:\n\n*   Business account\n*   Cash management account\n*   Financial account\n*   Money transfer account\n\nSee [Marketing Treasury-based services](https://docs.stripe.com/treasury/marketing-treasury) for a full list of terms you can and can’t use to describe your accounts. Inaccurately referring to Treasury accounts as “bank accounts” could result in regulatory action, including fines.\n\n| Category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | When referencing registered/® brand products, you must adhere to their separate brand guidelines. You only need to reference the ®, ™, SM mark once per asset. | Don’t apply unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Description of account value propositions | Use the following terms:<br><br>*   Business account<br>*   Cash management account<br>*   Financial account<br>*   Money transfer account | Don’t use the following terms:<br><br>*   “Bank account”<br>*   “Deposit account”<br>*   “Checking account”<br>*   “Savings account”<br>*   Similar terms to the previous ones that imply a traditional bank account product, because Stripe isn’t a bank |\n| FDIC insurance | Use the following terms that incorporate the term “eligible”:<br><br>*   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | Don’t use the following terms:<br><br>*   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\n### CAN-SPAM![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CAN-SPAM Act regulates marketing activity conducted by email. An email is deemed a commercial message, subject to the CAN-SPAM act, if the primary purpose of the email is to convey a commercial advertisement, or to promote a product or service. A transactional email is an email sent to a customer that has a primary purpose relating to a particular transaction or relationship between you and the customer, such as a payment reminder. The CAN-SPAM Act imposes more rigorous requirements on commercial email messages, as compared with transactional messages. Transactional messages aren’t subject to most of the requirements of the CAN-SPAM Act. If a message contains both transactional content and commercial content, the CAN-SPAM Act commercial email requirements might apply, if the primary purpose of the message can be considered commercial.\n\nTo facilitate compliance with the CAN-SPAM Act, any employee or staff using or having access to your email systems and resources for marketing must adhere to the following guidelines:\n\n*   Misleading header information. Any email message, whether commercial or transactional, must not contain:\n    *   False or misleading header information.\n    *   A “from” line that doesn’t accurately identify any person (individual or business) who initiated the message.\n    *   Inaccurate or misleading identification of a protected computer used to initiate the message for purposes of disguising its origin.\n*   Deceptive subject headings. Any commercial email message must not contain deceptive subject headings. For example, a deceptive subject heading is one that likely misleads the recipient about a material fact regarding the message’s contents or subject matter.\n*   Opt-out mechanism. You must provide your customers with the ability to opt-out of receiving future commercial messages, and you must honor customer requests to opt-out within 10 days. You can’t require a user to pay a fee or provide information other than an email address to opt-out.\n*   Advertisement identification. Any commercial email message must contain clear and conspicuous identification that the message is an advertisement or solicitation.\n*   Physical address disclosure. Any commercial email message must disclose a valid physical address of the sender.\n\nFailure to comply with CAN-SPAM could result in large fines for each violation.\n\n### Testimonials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using testimonials or endorsements in advertising Stripe products to your users, consider the following:\n\n*   The person giving a testimonial must be a real person and a true, bona fide user of the service or product they’re talking about.\n*   You must obtain and keep their permission in writing to use their quote. You must update that permission every 24 months.\n*   Product benefits, costs, or features in any quotes must be verifiable and true to what most users can expect to get.\n*   If you paid someone for their quote, or gave them anything of value, you must put a disclaimer near the quote stating this fact. This includes paid actors, if their scripting makes it sound like they’re giving a testimonial.\n\n### Prohibited advertising![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t advertise Stripe Issuing or Treasury, in print, radio, TV, on the internet, or any other digital format that promotes any unlawful activity or causes reputation concerns for Stripe or our bank partners.\n\n### Prohibition on international marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury isn’t available to users or merchants located outside the US, so limit all marketing for Treasury to US domestic audiences.\n\nFor Issuing, although you can ship cards to international addresses for US-domiciled cardholders, you must not market the Issuing program internationally or to persons outside of the United States. That includes advertising or promoting Issuing through marketing channels such as social media, email, and paid search results. As with all other aspects of the Issuing program, your marketing activities must comply with card network rules.\n\n### Required marketing disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users must understand the role that Stripe’s bank partners play in offering and operating certain financial products—and in many cases, that they’re entering into a contractual relationship with these banks. Your users must also understand the material costs and fees associated with their use of each financial product. We require you to build the following disclosures into your marketing materials:\n\n#### Disclosures when marketing Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   The name for your card program (for example, Rocket Rides Corporate Card).\n*   The relevant statement from the following table identifying the issuing bank. It can be in the footers section of your materials; however, the font must be a legible size and a contrasting color to the background.\n\n| Statement for Celtic Bank users | Statement for Sutton Bank users | Statement for Cross River Bank users |\n| --- | --- | --- |\n| \\[Card Program Name\\] Visa® Commercial Credit cards are powered by Stripe and issued by Celtic Bank. | \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. | \\[Card Program Name\\] Charge Cards are issued by Cross River Bank, Member FDIC. |\n\n#### Disclosures when marketing Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Treasury products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A statement that you’re neither a bank nor a money transmitter.\n*   Statement of partnership with Stripe.\n*   “Stripe Payments Company” must be hyperlinked and point to `https://stripe.com`.\n\n| Statement for Evolve bank users | Statement for Goldman bank users |\n| --- | --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. | \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Goldman Sachs Bank USA, Member FDIC. |\n\n#### Disclosures when marketing both Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer both Treasury and Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A name for your card program (for example, Rocket Rides Corporate Card).\n*   A combined statement identifying the issuing bank and saying that you’re neither a bank nor a money transmitter.\n\n| Example combined statement (Payout Card) |\n| --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. |\n\n### Materials submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubmit copies of your marketing materials and user interface mockups through our [Review Intake Form](https://docs.google.com/forms/d/e/1FAIpQLSfI67WWnEC-bPdzXllK7fq9hlwK6pY3qZpEnpOBwz8UZ_R-Xg/viewform) for review before you launch. If you make any changes to marketing materials, application flows, or user communications, Stripe’s compliance team must perform a review before going live. Our team of compliance specialists reviews them with our bank partners and responds within 10 business days.\n\nWhen submitting your materials:\n\n*   Provide full screenshots of product pages that include headings and footers.\n*   The preferable format for materials is PDF, however any format where all text is legible is acceptable.\n*   Describe the types of marketing material you’re submitting (for example, web banners, emails, search engine marketing, and whether it’s only text or images and text).\n*   You can send up to 5 attachments per submission.\n\nSend any additional questions to our team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nWe might request that you change your marketing materials to comply with regulatory requirements. If we request a change, it’s your responsibility to update the materials and provide evidence of the change to Stripe. Failure to update materials at our request might result in Stripe disabling your Treasury or Issuing capabilities.\n\n## Recordkeeping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must demonstrate your adherence to the requirements listed in this guide. Keep thorough records of all marketing materials, customer data, account information, and other disclosures you make to customers for at least 5 years. The following is a list of all records to keep, with examples of record types.\n\n| Record type | Example form of records |\n| --- | --- |\n| Product user experience | Screenshots of all deployed versions of the product user experience and their deployment dates. Include application flow, customer dashboard, support pages, and so on. |\n| Marketing | Inventory of all marketing copy deployed, email distribution lists used, and email solicitation opt-out lists, including timestamps of user opt-outs. |\n| Customer communications and complaints | Email interactions and documentation developed in the course of resolving complaints. |\n| Receipts | Receipts provided by Stripe and evidence that they’re uploaded to the customer’s Dashboard. |\n| Customer statements | Historical statements generated and made available to customers for download. |",
    "title": "Treasury and Issuing product marketing, design, and compliance guidelines | Stripe Documentation",
    "description": "Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/financial-accounts",
    "markdown": "# Use Treasury and Issuing to set up financial accounts and cards\n\n## Follow a sample Treasury and Issuing integration that sets up a financial account and creates cards.\n\nHomebox is a fictitious vertical SaaS that builds software for home-services companies like HVAC technicians, cleaners, and plumbers. Homebox begins its Treasury integration by setting up a Treasury financial account and creating payment cards. To see how Homebox moves money to and from external bank accounts, see the [Using Treasury to move money](https://docs.stripe.com/treasury/examples/moving-money) example integration.\n\n## Platform onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox is already a Stripe platform with [Payments](https://docs.stripe.com/payments) and [Connect](https://docs.stripe.com/connect) enabled. Homebox uses [Custom connected accounts](https://docs.stripe.com/connect/accounts), and those connected accounts already have the `card_payments` capability enabled.\n\n## Add capabilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use Treasury and Issuing services, Homebox needs to request the additional `treasury` and `card_issuing` capabilities for the platform’s connected accounts. Each connected account must then onboard before Stripe can create a Treasury financial account for it.\n\nTo use ACH transfers with Treasury, Homebox also needs to request the `us_bank_account_ach_payments` capability.\n\nTo request the `treasury`, `card_issuing`, and `us_bank_account_ach_payments` capabilities, Homebox makes a request to the [Accounts API](https://docs.stripe.com/api/accounts).\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nTo use Hosted Onboarding, Homebox makes a call to [Account Links](https://docs.stripe.com/api/account_links) to retrieve a URL that their connected account can use to submit onboarding information for the Treasury financial account.\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\nThe response includes a URL the connected account uses to access the application, which must be done before the link expires.\n\nHomebox listens for the `account.updated` webhook to confirm the following fields and capabilities on the connected account:\n\n``{   \"object\": {     \"id\": \"{{CONNECTED_ACCOUNT_ID}}\",     \"object\": \"account\",     \"capabilities\": {       \"card_payments\": \"active\",       \"treasury\": \"active\",       \"card_issuing\": \"active\", // Only appears if requesting the `card_issuing` capability.       \"us_bank_account_ach_payments\": \"active\", // Only appears if requesting the `us_bank_account_ach_payments` capability.     },     ...   } }``\n\n## Create a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter Stripe adds the `treasury` capability to an account, Homebox can create the `FinancialAccount` object for the account. To do so, Homebox calls `FinancialAccounts` and requests the `Features` the company wants to provide.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response confirms the account is processing. After processing completes and all relevant features are active, Homebox gets a confirmation from their `treasury.financial_account.features_status_updated` webhook listener.\n\n``{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"financial_addresses\": [ // This field is empty until the \"financial_addresses.aba\" feature becomes active     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"us_domestic_wire\"],       \"aba\": {         \"account_number_last4\": \"7890\",         // Use the expand[] parameter to view the `account_number` field hidden by default         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Bank of Earth\"       }     }   ],   \"livemode\": true,    // State machine:   // open - the account is ready to be used   // closed - the account is closed   \"status\": \"open\",   \"status_details\": {     // `closed` is null if financial account is not closed     \"closed\": {       // List of one or more reasons why the FinancialAccount was closed:       // - account_rejected       // - closed_by_platform       // - other       \"reasons\": [],     }   },    active_features: [\"card_issuing\"],   pending_features: [\"deposit_insurance\", \"financial_addresses.aba\", \"outbound_payments.ach\", \"us_domestic_wire\", \"inbound_transfers.ach\", \"outbound_transfers.ach\", \"outbound_transfers.us_domestic_wire\"],   restricted_features: [],    \"features\": {     \"object\": \"treasury.financial_account_features\",     \"card_issuing\": {       \"status\": \"active\",       \"status_details\": [],       \"access\": \"active\",     },     \"deposit_insurance\": {         \"requested\": true,         \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up         \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],     },     \"financial_addresses\": {         \"aba\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_payments\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"us_domestic_wire\": {         \"requested\": true,         \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up         \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],     },     \"inbound_transfers\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_transfers\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_payments\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_transfers\": {         \"us_domestic_wire\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"unrestricted\"   },  \"metadata\": {},   ... }``\n\n## Create a payment cardholder![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore Homebox can create cards for Treasury financial accounts, it needs to create cardholders. The cardholders in this example are plumbers who use Homebox services and own the connected accounts on the platform.\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Jenny Bath Remodeling\" \\  -d type=company \\   --data-urlencode email=\"jenny@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nThe response confirms the cardholder is created.\n\n`{     \"id\": \"{{CARDHOLDER_ID}}\",     \"object\": \"issuing.cardholder\",     \"billing\": {         \"address\": {             \"city\": \"\\\"San Francisco\\\"\",             \"country\": \"US\",             \"line1\": \"\\\"1234 Main Street\\\"\",             \"postal_code\": \"94111\",             \"state\": \"CA\"         }     },     \"created\": 1623803705,     \"email\": \"jenny@example.com\",     \"livemode\": false,     \"metadata\": {},     \"name\": \"Jenny Bath Remodeling\",     \"phone_number\": \"+18008675309\",     \"requirements\": {         \"disabled_reason\": \"under_review\",         \"past_due\": []     },     \"spending_controls\": {         \"allowed_categories\": [],         \"blocked_categories\": [],         \"spending_limits\": [],     },     \"status\": \"active\",     \"type\": \"company\" }`\n\n## Create payment cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that the connected account has a `FinancialAccount` object associated with it and an available cardholder, Homebox can create a payment card using the `FinancialAccount` balance as the card’s available balance.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d currency=usd \\  -d type=virtual \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}    `\n\nThe response confirms the card is issued.\n\n`{   \"id\": \"{{CARD_ID}}\",   \"object\": \"issuing.card\",   \"cardholder\": {     \"id\": \"{{CARDHOLDER_ID}}\",     \"object\": \"issuing.cardholder\",     \"billing\": {       \"address\": {         \"city\": \"San Francisco\",         \"country\": \"US\",         \"line1\": \"123 Main Street\",         \"line2\": null,         \"postal_code\": \"94111\",         \"state\": \"CA\"       }     },     ...   },   \"created\": 1643293629,   \"currency\": \"usd\",   \"exp_month\": 12,   \"exp_year\": 2024,   \"last4\": \"0930\",   \"livemode\": false,   ... }`",
    "title": "Use Treasury and Issuing to set up financial accounts and cards | Stripe Documentation",
    "description": "Follow a sample Treasury and Issuing integration that sets up a financial account and creates cards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/onboarding-guide",
    "markdown": "# Treasury connected account onboarding guide\n\n## Learn how to reduce friction while onboarding your connected accounts.\n\nWhen a Connect platform uses Stripe Treasury to offer financial services to its connected accounts, the account onboarding process must consider fraud prevention and regulatory compliance. For example, financial services providers must employ Know Your Customer (KYC) and Know Your Business (KYB) client data collection and verification procedures. Use this guide to implement a Treasury onboarding process for your connected accounts.\n\n## KYC and KYB onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you launch your embedded finance capabilities, implement an onboarding flow that collects the [necessary KYC and KYB information from your connected accounts](https://docs.stripe.com/connect/identity-verification). The [US Treasury Financial Crimes Enforcement Network](https://www.fincen.gov/resources/statutes-and-regulations/cdd-final-rule) (FinCEN) sets and enforces the legal requirements for customer due diligence, which each financial institution or partner can supplement with additional requirements.\n\n#### Note\n\nWhen onboarding connected accounts that use Treasury features, you must collect their requirements up front. Don’t use incremental onboarding.\n\nWhen onboarding connected accounts to Treasury, Stripe only presents your platform with the core business compliance requirements. Your platform is responsible for collecting the required KYC and KYB information during onboarding and passing it to Stripe. The specific process depends on [the type of onboarding flow you implement](https://docs.stripe.com/connect/onboarding). Stripe then performs checks to determine if the connected accounts meet KYC and KYB requirements and to flag potential risks of money laundering or fraud. Those checks include:\n\n*   Verifying ID documents using public and private databases\n*   Checking application information against databases of known fraudulent actors and criminals (such as known terrorists and money launderers)\n*   Validating addresses\n*   Verifying that an application is from a registered business with the appropriate licenses\n\n### Required information from your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open a Treasury financial account for a connected account, you must collect information including, but not limited to:\n\n*   Business name\n*   Legal entity type\n*   Tax ID number\n*   Merchant category code (MCC)\n*   Company name\n*   Company address\n*   Information about company owners, including:\n    *   SSN\n    *   Date of birth\n    *   Title\n    *   Ownership percentage\n\nTo review the full requirements for opening a financial account associated with a connected account, see [Required verification information](https://docs.stripe.com/connect/required-verification-information#US-full-company--card_payments%7Ctransfers%7Cus_bank_account_ach_payments).\n\n## Ways to onboard connected accounts to Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can onboard your connected accounts onto Connect and Treasury using the Stripe-hosted onboarding flow or using the Stripe API to pass verification information to Stripe.\n\nBenefits of Stripe-hosted onboarding include:\n\n*   With [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding), you don’t need to design or build a custom onboarding UI. Stripe provides a customizable web form that collects the required identity information from your connected accounts.\n*   Hosted onboarding dynamically adjusts input fields depending on account capabilities, product usage, country, and business type.\n*   You can use hosted onboarding if you need support for mobile browsers, accessibility, and localization.\n*   Hosted onboarding allows you to automatically collect all currently required information up front or incrementally, depending on what’s needed (see [onboarding flows](https://docs.stripe.com/connect/identity-verification#onboarding-flows)). To use Stripe Treasury products, connected accounts must provide all information to satisfy KYC requirements up front.\n\nBenefits of API onboarding include:\n\n*   [API onboarding (custom onboarding)](https://docs.stripe.com/connect/api-onboarding) gives you full control over the onboarding UI and process.\n*   You don’t need to redirect connected account holders to an external Stripe-hosted page.\n*   You can design the information collection flow for your connected accounts.\n\n## Keep up with changing requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChanging requirements can necessitate gathering additional information from connected accounts. While hosted onboarding dynamically updates to reflect new requirements, platforms using API onboarding need to make sure they update their UI and collect this information. If a connected account has already onboarded using hosted onboarding and the requirements change, you can forward them the hosted onboarding link. Clicking it prompts them to provide the new required information. You can obtain new requirements for accounts using the methods detailed in the [Required verification information](https://docs.stripe.com/connect/required-verification-information) guide.\n\nYou can also use a mixture of hosted and API onboarding. If you use hosted onboarding but have already collected some information from a different source, you can pass that information to Stripe through the [identity verification process](https://docs.stripe.com/connect/identity-verification) and prefill the hosted onboarding page with the provided information. In that case, the connected account can modify or verify the information within the Stripe-hosted UI.\n\n## Tips for onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo make sure onboarding is successful and boost conversion for your Treasury product, keep the following tips in mind:\n\n*   Consider onboarding connected accounts to the `treasury` capability to start, even if you don’t plan to create a Treasury financial account until later. If you decide to perform Treasury onboarding later, prevent friction by setting clear expectations during onboarding that additional information might be required to use all aspects of the product.\n    \n*   If you already have a Connect integration, or have otherwise collected identifying information from your connected accounts, you can use the API to pass data you already have. Doing so reduces the amount of information a connected account needs to provide through hosted onboarding.\n    \n*   For issued cards, provide the card use case to help cardholders understand how it works.\n    \n*   If a connected account has recently incorporated their business, they might not have their TIN entered in the IRS database yet. In that case, their TIN might come back as unverified until the IRS database updates. The account is still usable, and Stripe periodically attempts to reverify the TIN.\n    \n*   Hosted onboarding allows you to test out your integration. If you want more customization, you can switch to custom onboarding.\n    \n*   Only onboard connected accounts that are supportable on Stripe and Treasury. Review the [Treasury requirements](https://docs.stripe.com/treasury/requirements) for supportability, and follow the guidelines on [marketing Treasury to users](https://docs.stripe.com/treasury/compliance).\n    \n*   Offering incentives to onboard, such as a free subscription period or incentive funds, can help boost activation and engagement.\n    \n\n### See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Connect integration guide](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Treasury documentation on opening connected accounts](https://docs.stripe.com/treasury/account-management/connected-accounts#requirements)\n*   [Documentation on opening Treasury financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)",
    "title": "Treasury connected account onboarding guide | Stripe Documentation",
    "description": "Learn how to reduce friction while onboarding your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/fraud-guide",
    "markdown": "# Treasury fraud guide | Stripe DocumentationThe Stripe Docs logo\n\n## Learn best practices for managing fraud as a Treasury platform.\n\nStripe Treasury is a banking-as-a-service API that enables you to embed financial services into your platform’s product. With Stripe Treasury (through our partnerships with US domestic banks), you can offer your connected accounts a simple stored-value account that’s directly integrated into your application. It lets them perform financial actions such as sending and receiving funds (through ACH wires), earning yield, and spending money through a card.\n\nStripe Treasury uses the same workflows as Stripe Connect to get connected accounts up and running, including various [KYC](https://en.wikipedia.org/wiki/Know_your_customer \"know your customer\") and compliance requirements. You can use our API to customize how you manage fraud risk and reduce friction for your connected accounts.\n\nSee the following high-level guidance about how to monitor and minimize fraud when using Stripe Treasury, because you’re liable for fraud losses and disputes from your connected accounts. This guide breaks fraud down into three main categories:\n\n*   **Business fraud**: A person creates a fraudulent connected account (often with a stolen identity) to commit fraud\n*   **Transaction fraud**: A legitimate connected account has their card or financial account information stolen or compromised resulting in unauthorized activity\n*   **Account takeover fraud**: A legitimate connected account owner’s login is compromised by a third party and unauthorized actions are taken on their account\n\n## Business fraud examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe most well known types of business fraud in the financial services industry are first party fraud, third party fraud, and force capture or overcapture fraud.\n\n**First party fraud example (ACH debit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor logs into the Financial Institution A and initiates a 10,000 USD ACH debit to pull funds from another financial account they also have ownership over (Financial Institution B). In this case, Financial Institution A is the originator of the debit (ODFI) and Financial Institution B is the receiver of the debit (RDFI).\n3.  When the debited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  The bad actor then goes to Financial Institution B and claims the ACH debit initiated by Financial Institution A wasn’t authorized.\n5.  Financial Institution B initiates an ACH return, citing the debit wasn’t authorized and pulls back the full amount of the debit.\n6.  Financial Institution A is left with a negative balance.\n\n**Third party fraud example (ACH debit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor logs into Financial Institution A and initiates a 10,000 USD ACH to pull funds from another financial account they don’t have ownership over but have account and routing number information for at Financial Institution B. In this case, Financial Institution A is the originator of the debit (ODFI) and Financial Institution B is the receiver of the debit (RDFI).\n3.  When the debited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  The accountholder of Financial Institution B then notices the erroneous debit to their account and reports it to their financial institution that the debit initiated by Financial Institution A wasn’t authorized.\n5.  Financial Institution B initiates an ACH return, citing that the debit wasn’t authorized and pulls back the full amount of the debit.\n6.  Financial Institution A is left with a negative balance.\n\n**Third party fraud example (ACH or wire credit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor uses either compromised financial account login credentials or other means to initiate an ACH or wire credit transfer from another financial account into Financial Institution A.\n3.  When the credited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  Financial Institution A might not be in a loss position here because only the originating financial institution can recall the incoming credit transfer or wire under limited circumstances. That said, Financial Institution A has enabled fraudulent activity through their account, which has compliance and reputation implications for Stripe and our financial partners.\n\n**Force capture or overcapture fraud example**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account with a card attached (Financial Institution A).\n2.  The bad actor creates a separate account, or compromises one in good standing on another acquirer (using account takeover, or ATO).\n3.  The bad actor uses the account to create authorizations on the card issued by Financial Institution A that don’t have issuer dispute rights—for example, card-present transactions on a chip card or card not present transactions that attempt [3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") or Visa Secure.\n4.  The bad actor then force captures or overcaptures on previous authorizations.\n5.  The bad actor then gets paid out from the business account by the acquirer.\n6.  The bad actor then files fraud disputes on the card issued by Financial Institution A, but Financial Institution A can’t file disputes against the acquirer due to lack of dispute rights and loses the disputes.\n7.  The financial account is left with a negative balance in the amount of the overcaptured or force captured funds.\n\nThe best way to protect yourself from fraud on Treasury, including the previous scenarios, is to make sure the connected accounts signing up for access to the Treasury product are legitimate. It’s a good practice to assess a new account’s risk profile holistically. Generally, the better you understand your customers and their business, the better you can assess and manage your risk exposure.\n\n### Fraud risk mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following risk mitigation strategies to protect yourself at the various stages of business.\n\n#### At onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Monitor signup volume:** Unexpected upticks in signup volume can indicate that your platform is being discovered and exploited by bad actors. It’s also common to see an influx of fraud after making a marketing announcement. Pay special attention to signups in these cases.\n*   **Limit access to faster payouts:** If your connected accounts are also using Stripe for payments, we recommend limiting which ones have access to [faster payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts) to their Treasury accounts. Limit faster payouts to trusted connected accounts. You might also consider implementing criteria through which your connected accounts can demonstrate good intent and earn faster payouts (for example, a certain number of months of activity with no issues, or a set dollar amount of processed volume).\n*   **ACH debit controls:** ACH debits present an elevated risk of fraud due to their **pull** payment method nature. Given this elevated risk, it’s important to treat the funding method with the appropriate level of fraud protections and controls, including restricting this feature to trusted accounts.\n*   **Additional identity verification:** Although the Treasury product includes standard Connect KYC on your connected accounts, this process focuses on identity validation (whether the information provided at signup is valid) rather than identity verification (whether the person or business providing the information at signup is who they claim to be). You can optionally use [Stripe Identity](https://docs.stripe.com/identity), an identity verification product that programmatically confirms the identity of customers so you can greatly reduce attacks from bad actors while minimizing friction for legitimate customers.\n*   **Collect industry relevant information at signup:**\n    *   If your connected accounts are small businesses, consider collecting URL and relevant social media information such as Linkedin, Facebook, and Twitter.\n    *   If your connected accounts are contractors or creators, consider collecting relevant social media information such as Facebook, Twitter, TikTok, YouTube, or Instagram.\n    *   If your connected accounts are businesses in an industry that requires a license, consider collecting that license at signup.\n*   **Domain verification:** Confirm a connected account owner’s email address if it’s linked to their business domain (for example, send an email to an address at that domain and require a response from it).\n*   **Duplicate detection:** Conduct checks for duplicate account information associated with previously fraudulent connected accounts, such as financial account information, name with DOB, and tax information. You might also consider weak links between accounts such as multiple accounts spun up from the same IP, device, and so on.\n\n#### Throughout an Account’s lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Holistic fraud review:** Perform a manual review for fraud at a certain point in each new connected account’s lifecycle. Depending on the number of connected accounts you have, your business model, and your risk appetite, it might make sense to do that at signup, at a certain dollar amount in inflows, a certain dollar amount in outflows, or similar conditions.\n*   **Flag anomalous activity:** Flag businesses showing anomalous behavior for manual review. That can include, but isn’t limited to, a business with more than a certain number of transactions where there’s no authorization (force capture) or a capture greater than the authorization amount (overcapture), a large credit transfer or wire into an account, a large international wire out of an account, card transactions outside of the country, or a return for an ACH debit into the account. It’s also critical to encourage your users to do the same, as they are often in the best position to recognize anomalous activity and report it to you.\n\nIf you suspect the business might be fraudulent, set the `outbound_flows` [feature](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted` until you’re able to review the account and make a determination. Examples of information you might want to request from your connected account when performing this manual review depend on your industry, but can include social media profiles, business documentation, photos of inventory, tracking numbers for shipments, business licenses, and so on.\n\nIf you’re confident a business is fraudulent, set the `outbound_flows` and `inbound_flows` features to `restricted`. If the account has a zero balance, close the account. If the account balance isn’t zero, you can’t close the account but you can disable the listed features.\n\n## Transaction fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction fraud is the unauthorized use of a credit card or financial account to fraudulently obtain money or property. On Stripe, transaction fraud manifests as unauthorized charges on a Stripe issued card or unauthorized debits to a Stripe issued financial account. Cards can be compromised either through physical theft or a lost card, or through credentials compromised through phishing, spyware, non-secure checkouts, external breaches, and so on. Financial accounts can be compromised if a bad actor gains knowledge of your financial account’s account and routing numbers.\n\nUnlike the fraud outlined above, transaction fraud occurs for good customers and can occur at any point in a customer’s lifecycle. A connected account on your platform can operate on the Treasury product for months or years with no problem before having their card or financial account compromised.\n\nCurrently, Issuing has [fraud protection](https://docs.stripe.com/issuing/manage-fraud) that extends to the card attach products within Treasury, but you still need to monitor for transaction fraud. The most effective ways to combat transaction fraud are to empower your connected accounts to be diligent about keeping their card and financial account information safe. Have them pay close attention to the activity on their Treasury account. Text message or email notifications of account activity can help increase visibility. Quick identification of fraudulent transactions gives your connected accounts the best chance of being eligible to file disputes.\n\nFor card disputes, a transaction is only eligible for a dispute if fewer than 110 days have passed since capture of the transaction. Disputes are handled through the Dashboard or the API. Read the [Issuing disputes](https://docs.stripe.com/issuing/purchases/disputes) guide for more information on filing Issuing disputes.\n\nFor ACH debit disputes (returns), a transaction is only eligible for a dispute if you notify Stripe of any return request at least 24 hours before the settlement date of the transaction. ACH Debit disputes are currently handled manually through email. Read more about [filing ACH Debit disputes](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals).\n\nIf your connected account’s card or financial account number is compromised, resulting in unauthorized transactions, you can take multiple actions. In addition to disputing eligible transactions, consider closing and reissuing the card and opening a [new connect and financial account](https://docs.stripe.com/treasury/account-management/financial-accounts#close-a-financialaccount) to prevent future instances of fraud.\n\nYou can also take proactive measures to manage transaction fraud on your platform. The following examples are some controls you can put in place:\n\n#### Card transaction fraud mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Enroll in 3DS:** 3DS is an additional layer of authentication used by businesses to make sure a purchase is from a legitimate cardholder. The additional 3DS step at checkout typically involves showing the cardholder an authentication page on their financial institution’s website that has a prompt to enter a verification code sent to their phone or email. 3DS is used for online transactions only, and works only if the business and the issuer support it. If a business has 3DS enabled, liability automatically shifts to the issuer for fraudulent disputes, regardless of whether the issuer enables 3DS. We recommend that you [enable 3DS](https://docs.stripe.com/issuing/3d-secure).\n*   **Spending controls:** Set spending controls to block merchant categories (for example, bakeries), or to set spending limits such as 100 USD per authorization or 3,000 USD per month. You can apply them to both cards and cardholders by either setting their `spending_controls` fields when you create them or by updating them later. Setting spending controls is particularly effective when a card or cardholder has an expected spending pattern and it’s likely that anomalous spending is unauthorized. Read more on [spending controls and how to configure them](https://docs.stripe.com/issuing/controls/spending-controls).\n*   **VAA score:** Stripe has certain fraud protections on Issuing transactions, which includes automatically blocking authorizations that look suspicious using Visa’s Advanced Authorization (VAA) score in some cases. If you want us to expose this score to you through the API, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n*   **Flag high risk transactions for cardholder review:** In some situations you might want to flag card transactions that appear to be high risk to your connected accounts and request that they confirm whether the transaction is authorized. Some ideas of what to look out for include:\n    *   Transactions that are for large or rounded amounts\n    *   Transactions that significantly exceed the average charge size for the cardholder\n    *   Transactions at retailers where gift cards are commonly sold (grocery stores, for example)\n    *   [Force captures](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions)\n    *   [Overcaptures](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions)\n    *   Transactions on businesses based outside of the country where the cardholder resides\n\n#### ACH debit transaction fraud mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Flag high risk transactions for accountholder review:** In some situations you may want to flag ACH debit transactions that appear to be high risk to your connected accounts and request that they confirm whether the transaction is authorized. Some types of debits to monitor include:\n    *   Debits that are for large amounts or for an amount close to enforced limits\n    *   Debits associated with a new originating party\n    *   Debits attempted when there aren’t sufficient funds in the account to cover\n\nThis step is particularly critical if you have reason to believe the account details of one of your accountholders may be compromised, as it can leave them susceptible to ACH debit transaction fraud.\n\nIf a received ACH is suspected to be unauthorized activity, we recommend processing a [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals) immediately. Debit reversals allow you to reverse the transaction, but must be completed within two business days of the transaction being received. This short time window underscores the importance of vigilance of ACH debit activity. More on DebitReversals and how to use them effectively can be found in [Moving money with Treasury using DebitReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals).\n\nTo further mitigate this risk, you may consider automatically processing reversals in scenarios you consider high risk. You should also encourage your users to leverage “push” funding methods like [OutboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers).\n\n## Account takeover (ATO) fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccount takeover fraud occurs when a third party gains access to your connected account. Typically, the attacker takes unauthorized actions on the account motivated by financial gain. The most common actions taken by the attacker on a Treasury account are wiring or transferring funds to an external financial account and issuing a new card or viewing raw PAN data of an existing card and making unauthorized transactions on the card.\n\nProtecting against account takeovers depends on whether your platform or Stripe owns the login steps and verification for your connected accounts.\n\nThe following are some examples of controls that you can put in place to protect against account takeovers:\n\n*   [Implement 2FA](https://support.stripe.com/topics/2fa) on all connected accounts.\n*   Educate connected accounts on phishing and not sharing their 2FA codes.\n*   Enforce unique password policies.\n*   Collect device and IP address information to trace whether high risk actions (such as password updates, 2FA method updates, creating a new card, sending funds to a new external financial account) are performed from aged devices or IP addresses.\n*   Monitor IP activity for logins from previously unseen locations or hosting providers.\n*   Implement challenges for high-risk actions, for example, requiring a 2FA code to send a wire to a new account.\n*   Monitor connected accounts for anomalous activity. Examples include a transfer or wire that zeros out the entire treasury balance or international card spending.\n\nIf you suspect an account has been taken over, set the `outbound_flows` and `inbound_flows` [features](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted`, expire existing login sessions, and disable login. After you restrict the account, work with the original account owner to verify their identity and restore access to the account. Remediation is typically executed by calling the phone number associated with the customer (pre takeover) and verifying various pieces of personally identifiable information (PII) with the customer. After you confirm the customer’s identity, you can assist them with resetting their password or 2FA device (if changed during the takeover), re-enabling login, and re-enabling treasury capabilities previously set to restricted. Financial reimbursement for any funds lost during the takeover is dependent on your internal policies.\n\n## Other risk mitigation considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to those already described, take the following risk mitigation considerations into account also.\n\n### Faster payout controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOffering [faster payouts](https://docs.stripe.com/treasury/moving-money/payouts#automatic-payouts) to new businesses presents a risk, so approach it cautiously. To mitigate that risk, we recommend that you implement controls to turn off faster payouts availability if you see an influx of fraud.\n\nOffer faster payouts availability to connected accounts only after they meet a defined trust level, for example:\n\n*   More than 60 days of processing\n*   Greater than 2,000 USD lifetime total volume\n*   Less than 3% chargeback or return rate\n*   Offer T+1 faster payouts to connected accounts before graduating them to T+0 faster payouts\n*   While limiting faster payouts availability to trusted connected accounts helps mitigate fraud at signup, it doesn’t remove the possibility of fraud on account takeovers (ATO) or good-merchant-gone-bad (GMGB) accounts. It’s important to have alerts in place to trigger on businesses who display anomalous charge patterns usually indicative of ATO or GMGB (a spike in processing volume or a shift in average transaction size, sometimes affiliated with change in bank account or login).\n\n### ACH debit controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOriginating ACH debits through Treasury [InboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers) presents an elevated risk of fraud because they’re _pull_ payments. That means that Treasury account holders input customer details and pull funds from the customer’s account, rather than the customer pushing funds from their own account. Because of the elevated risk profile, we suggest a number of risk mitigation efforts for originated ACH debit:\n\n*   Make sure that the business in question has permission to debit funds from a bank account and that the account is verified. Read more about [ACH Debit authorization and verification](https://docs.stripe.com/payments/ach-debit).\n*   For ACH debit, funds can be returned for a number of reasons, ranging from fraud to insufficient funds. Most failures (for example, insufficient funds or an invalid account) occur within 4 business days of their post date, so it’s important to make sure that connected accounts that haven’t built trust yet aren’t paid out funds prior to this initial settlement period passing.\n*   Given the elevated risk profile of ACH debit, you need to either restrict access to trusted connected accounts or place strict limits and monitor use to identify fraudulent actors. For example, new accounts might have their ACH debit limited to a transaction size of 2,000 USD and a weekly limit of 5,000 USD to start out. As more trust builds with connected accounts, you can increase these limits alongside their business growth.\n\nWhen you suspect fraud, taking the appropriate actions to minimize financial loss and further fraudulent activity is extremely important. You can think of fraud remediation as two main steps:\n\n1.  Stop the immediate damage.\n2.  Build long term solutions to mitigate future abuse. Some important steps you can take when you identify fraud include the following:\n    *   Make sure all funds flows and money movement are blocked for the account in question. For example, set the `outbound_flows` and `inbound_flows` [features](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted`.\n    *   Determine why the account in question wasn’t identified by fraud and risk controls and make sure that additional controls are put in place. When fraudsters identify a gap in risk systems, they continue to try to exploit this gap until it’s successfully fixed.\n    *   Identify any other accounts attempting similar fraudulent behavior. As mentioned previously, fraudulent actors will continue to exploit gaps as long as they exist, and will try to do so at scale to maximize their return. When you identify one case of fraud, it’s important to make sure that the same type of fraud isn’t occurring on other accounts, and that the perpetrator doesn’t simply create a new account and repeat the same actions. Doing so allows you to potentially get ahead of lagging signals, such as disputes, and disincentivize fraudulent actors from returning by minimizing their gains.\n\n## Suggested metrics monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are some metrics we recommend monitoring to help guide identification and measurement of fraud on your Treasury-enabled customers. The following metrics assume your connected accounts are using both our Treasury and Payments products. If this isn’t the case, you can modify them accordingly.\n\n### Lagging metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rejection rate on Treasury-enabled accounts versus other accounts, over time\n*   Absolute acquiring losses on Treasury-enabled accounts\n*   Percentage of lossy accounts that are Treasury-enabled\n*   Absolute loss per account on Treasury-enabled accounts versus other accounts\n*   Time to acquiring loss on Treasury-enabled accounts versus other accounts\n\n### Leading metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Signup rate over time for Treasury-enabled accounts versus other accounts\n*   Transfer amount anomalies: New connected accounts with high volume of `ReceivedTransfers` (not including acquiring payouts) in the first 30 days\n*   Transfer amount anomalies: Low acquiring processing volume with high volume `ReceivedTransfers` (not including acquiring payouts)\n*   List of accounts with material `ReceivedTransfers` followed by `OutboundTransfers` bringing the Treasury balance to zero\n*   List of accounts who exceed certain total amounts in international card spending or `OutboundTransfers`",
    "title": "Treasury fraud guide | Stripe Documentation",
    "description": "Learn best practices for managing fraud as a Treasury platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/sample-app",
    "markdown": "# Issuing and Treasury sample app\n\n## Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.\n\nIn addition to a full suite of documentation and SDKs for Stripe Issuing and Treasury, we offer a Next.js sample app.\n\nSee a demo of our sample app at [baas.stripe.dev](https://baas.stripe.dev/), or check out the [GitHub repository](https://github.com/stripe-samples/issuing-treasury).\n\n## Accessing code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe sample app is a Next.js app that leverages TypeScript, React, and Material UI. You can fork the project from the [Stripe samples GitHub repository](https://github.com/stripe-samples/issuing-treasury) and use the included components as a starting point for your own app.\n\n## App features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app provides many how-to examples, including:\n\n*   Leverage Stripe Connect Onboarding to collect Know Your Customer (KYC) information for onboarding connected accounts compliantly\n*   Display account information and balance\n*   Display transactions on the Treasury Financial Account\n*   Simulate sending funds to an external account using ACH or wire\n*   Simulate receiving an ACH credit\n*   Visualize the volume of inbound and outbound money flows using [ApexCharts](https://github.com/apexcharts/apexcharts.js)\n*   Create cardholders compliantly\n*   Create cards using the Treasury Financial Account as an issuable balance\n*   Show sensitive card numbers in a PCI-compliant way\n*   Simulate card authorizations\n*   Get paid through a payment link, then transfer funds from your Stripe payments balance to the Financial Account\n*   Use test helpers to simulate actions impacting the account\n\n## Component breakdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sections provide an overview of how each component in the sample app works.\n\nYou can learn more about [Issuing APIs and features](https://docs.stripe.com/issuing) or [Treasury APIs](https://docs.stripe.com/api/treasury/financial_accounts) and [features](https://docs.stripe.com/treasury).\n\n### Account creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account creation flow consists of four steps:\n\n1.  Create a [connected account](https://docs.stripe.com/treasury/account-management/connected-accounts) with the following capabilities: `transfers`, `card_issuing`, and `treasury`.\n\n`const account = await stripe.accounts.create({   country: 'US',   email: email,   capabilities: {     transfers: {requested: true},     treasury: {requested: true},     card_issuing: {requested: true},   },   controller: {     dashboard: {type: \"none\"},     losses: {payments: \"application\"},     requirement_collection: \"application\",     fees: {payer: \"application\"}   }, });`\n\n1.  Create a Stripe Treasury [Financial Account](https://docs.stripe.com/treasury/account-management/financial-accounts).\n\n`const financialAccount = await stripe.treasury.financialAccounts.create(   {     supported_currencies: ['usd'],     features: {       card_issuing: {requested: true},       deposit_insurance: {requested: true},       financial_addresses: {aba: {requested: true}},       inbound_transfers: {ach: {requested: true}},       intra_stripe_flows: {requested: true},       outbound_payments: {         ach: {requested: true},         us_domestic_wire: {requested: true},       },       outbound_transfers: {         ach: {requested: true},         us_domestic_wire: {requested: true},       },     },   },   {stripeAccount: account.id}, );`\n\n1.  Create a Connect Onboarding link and use it to redirect new connected accounts to collect the necessary profile information for the requested capabilities.\n\n`const { url } = await stripe.accountLinks.create({   type: 'account_onboarding',   account: accountId,   refresh_url: host + '/onboard',   return_url: host + '/onboard',   collect: 'eventually_due', });`\n\n### Account balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account balance card uses only the `stripe.treasury.financialAccounts.list` API.\n\n`const financialAccounts = await stripe.treasury.financialAccounts.list({   stripeAccount: StripeAccountID, }); const financialAccount = financialAccounts.data[0];`\n\nThe payload of the above command contains a balance object consisting of the current [balance](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) (cash) and outbound funds.\n\n`{   \"id\": \"fa_...\",  ...   \"balance\": {     \"cash\": { \"usd\": 534214 },     \"inbound_pending\": { \"usd\": 0 },     \"outbound_pending\": { \"usd\": 2200 }   },  ...   \"supported_currencies\": [ \"usd\" ] }`\n\n### Funds in and funds out chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe funds movement chart uses only the `stripe.treasury.transactions.list` API.\n\n`const fa_transactions = await stripe.treasury.transactions.list(   {     financial_account: financialAccount.id,     order_by: 'created',     limit: 100,   },   {stripeAccount: StripeAccountID}, );`\n\nThe responses are grouped by positive or negative balances and creation date. The data is then ported into [ApexCharts](https://github.com/apexcharts/apexcharts.js) to create a dynamic display of the funds flow.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"open\",   \"amount\": -1000,   \"currency\": \"usd\",   \"balance_impact\": {     \"cash\": -1000,     \"inbound_pending\": 0,     \"outbound_pending\": 1000,   },   \"entries\": {     \"data\": [       {         \"id\": \"{{TRANSACTION_ENTRY_ID}}\",         \"object\": \"treasury.transaction_entry\",         ...         \"created\": \"{{T}}\",         \"effective_at\": \"{{T}}\",         \"currency\": \"usd\",         \"balance_impact\": {           \"cash\": -1000,           \"inbound_pending\": 0,           \"outbound_pending\": 1000,         }       }     ],     \"has_more\": false,     \"object\": \"list\",     \"url\": \"/v1/treasury/transaction_entries?financial_account={{FINANCIAL_ACCOUNT_ID}}&transaction={{TRANSACTION_ID}}\"   } }`\n\n### Transaction list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transaction list uses the `stripe.treasury.transactions.list` API.\n\n`const fa_transactions = await stripe.treasury.transactions.list(   {     financial_account: financialAccount.id,     order_by: 'created',     limit: 100,   },   {stripeAccount: StripeAccountID}, );`\n\nThe columns in the transactions table are parsed from the `transaction` object using the following mapping:\n\n*   `created` → Date\n*   `amount` → Amount / Currency\n*   `flow_type` → Type\n*   `status` → Status\n*   `description` → Description\n\n### Send money interface![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe money sending feature in the sample app uses the Stripe Treasury `OutboundPayment` feature. You can use [OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send money to a third party’s external account.\n\n`const outboundPayment = await stripe.treasury.outboundPayments.create(   {     financial_account: financialAccount.id,     amount: amount,     currency: 'usd',     statement_descriptor: req.descriptor,     destination_payment_method_data: {       type: 'us_bank_account',       us_bank_account: {         account_holder_type: 'individual',         routing_number: '110000000',         account_number: '000000000009',       }     }   },   {     stripeAccount: StripeAccountId   }, );`\n\n### Issuing cardholder creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must create a `Cardholder` before you can issue a card using Stripe Issuing to spend funds from the Treasury Financial Account. Use the `stripe.issuing.cardholders.create` API to create cardholders.\n\n`const cardholder = await stripe.issuing.cardholders.create(   {     type: 'individual',     name: firstName + ' ' + lastName,     email: email,     individual: {       first_name: firstName,       last_name: lastName,       dob: {day: day, month: month, year: year}     },     billing: {       address: {         city: city,         line1: address1,         state: state,         postal_code: postalCode,         country: country,       },     },   },   {     stripeAccount: StripeAccountId,   } );`\n\n### Issuing cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create a `Cardholder`, you can issue a card to the `Cardholder` using the `stripe.issuing.cards.create` API.\n\n`const card = await stripe.issuing.cards.create(   {     cardholder: req.body.cardholderid,     financial_account: financialAccount.id,     currency: 'usd',     type: 'virtual',     status: 'active',   },   {stripeAccount: StripeAccountId}, );`\n\n### Cards list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe cards list renders using data from the `stripe.issuing.cards.list` API.\n\n`const cards = await stripe.issuing.cards.list(   {limit: 10},   {stripeAccount: StripeAccountID}, );`\n\nUse the `stripe.issuing.authorizations.list` API to retrieve authorizations for a specific card. The following example limits the list to the 10 most recent authorizations.\n\n`const card_authorizations = await stripe.issuing.authorizations.list(   {     card: cardId,     limit: 10,   },   {stripeAccount: StripeAccountID}, );`\n\nThe columns in the authorization table are parsed from the response object using the following mapping:\n\n*   `created` → Date\n*   `amount` → Amount / Amount Currency\n*   `card.cardholder.name` → Name on Card\n*   `card.last4` → Last 4\n*   `approved` → Approved\n*   `status` → Status\n*   `merchant_data.name` → Merchant\n*   `merchant_data.category` → Merchant Category\n\n## Test mode helpers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe sample app features test mode helpers that enable you to perform certain actions, such as funding your account, creating a payment link to collect funds in a connected account, and paying out funds to the Financial Account. You can access most of the test helpers by clicking the **Generate Test Data** button or clicking **Test Data**.\n\n### Received Credit test helper![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn test mode, you can add funds to a Treasury Financial Account using the [ReceivedCredit Test Helpers](https://docs.stripe.com/api/treasury/received_credits/test_mode_create). This test helper simulates receiving a transfer from an external bank account into your Financial Account.\n\n`const receivedCredit = await stripe.testHelpers.treasury.receivedCredits.create(   {     amount: 50000,     currency: 'usd',     financial_account: financialAccount.id,     network: 'ach',   },   {stripeAccount: StripeAccountId}, );`\n\n### Payment links and payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use payment links to add funds to the connected account that’s associated with a Financial Account:\n\n1.  Create a `Price` that determines the amount deposited into the connected account after completion of payment.\n\n`const prices = await stripe.prices.list(   {     limit: 1,     active: true,     type: 'one_time',   },   {stripeAccount: StripeAccountId,}, );  let price;  if (prices.data.length < 1) {   price = await stripe.prices.create(     {       unit_amount: 1000,       currency: 'usd',       product_data:         {           name: 'Unit',       },     },     {stripeAccount: StripeAccountId,},   ); } else {   price = prices.data[0]; }`\n\n1.  After obtaining the price, Stripe creates a `PaymentLink`, and you redirect the customer to complete the payment. Use the `Price` `id` from the previous step to set the value for the `price` parameter. Alternatively, you can exclude the parameter to use a default value instead.\n\n`const paymentLink = await stripe.paymentLinks.create(   {     line_items: [       {         price: price.id,         quantity: 1,         adjustable_quantity: {enabled: true},       },     ],   },   {stripeAccount: StripeAccountId,}, );`\n\n### Payout from the connected account payments balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts) can send funds from a connected account’s payments balance to their Treasury Financial Account. Do the following to execute a payout:\n\n1.  Check if there’s an external account configured for the connected account. To do so, use the [accounts.retrieve](https://docs.stripe.com/api/accounts/retrieve) API to obtain the [account object](https://docs.stripe.com/api/accounts/object) and verify if the `external_account` property is populated.\n\n`const responseAccount = await stripe.accounts.retrieve(StripeAccountID); const accountExternalAccount = responseAccount.external_accounts.data[0];  let hasExternalAccount = false;  if (accountExternalAccount) {   hasExternalAccount = true; }`\n\n1.  If the connected account doesn’t have an external account, they can set up the Treasury Financial Account as their external account.\n\n`const financialAccounts = await stripe.treasury.financialAccounts.list(   {expand: ['data.financial_addresses.aba.account_number']},   {     stripeAccount: StripeAccountId,   }, );  const financialAccount = financialAccounts.data[0];  await stripe.accounts.createExternalAccount(StripeAccountId, {   external_account: {     object: 'bank_account',     country: 'US',     currency: 'usd',     account_number:       financialAccount.financial_addresses[0].aba.account_number,     routing_number:       financialAccount.financial_addresses[0].aba.routing_number,   }, });`\n\n1.  Initiate a payout to the connected account’s external account. In this case, the external account is the Treasury Financial Account.\n\n`const balance = await stripe.balance.retrieve({   stripeAccount: StripeAccountId, });  const payout = await stripe.payouts.create(   {     amount: balance.available[0].amount,     currency: 'usd',   },   {stripeAccount: StripeAccountId}, );`",
    "title": "Issuing and Treasury sample app | Stripe Documentation",
    "description": "Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/webhooks",
    "markdown": "# Webhooks for Stripe Issuing and Stripe Treasury\n\ntreasury.credit\\_reversal.createdOccurs whenever a CreditReversal is created.treasury.credit\\_reversal.postedOccurs whenever a CreditReversal post is posted.treasury.debit\\_reversal.completedOccurs whenever a DebitReversal is completed.treasury.debit\\_reversal.createdOccurs whenever a DebitReversal is created.treasury.debit\\_reversal.initial\\_credit\\_grantedOccurs whenever an initial credit is granted on a DebitReversal.treasury.financial\\_account.closedOccurs whenever the status of the FinancialAccount becomes closed.treasury.financial\\_account.createdOccurs whenever a new FinancialAccount is created.treasury.financial\\_account.features\\_status\\_updatedOccurs whenever the statuses of any features within an existing FinancialAccount are updated.treasury.inbound\\_transfer.canceledOccurs whenever an InboundTransfer is canceled.treasury.inbound\\_transfer.createdOccurs whenever an InboundTransfer is created.treasury.inbound\\_transfer.failedOccurs whenever an InboundTransfer has failed.treasury.inbound\\_transfer.succeededOccurs whenever an InboundTransfer has succeeded.treasury.outbound\\_payment.canceledOccurs whenever an OutboundPayment is canceled.treasury.outbound\\_payment.createdOccurs whenever a new OutboundPayment is successfully created.treasury.outbound\\_payment.expected\\_arrival\\_date\\_updatedOccurs whenever the arrival date on an OutboundPayment updates.treasury.outbound\\_payment.failedOccurs whenever an OutboundPayment fails.treasury.outbound\\_payment.postedOccurs whenever an OutboundPayment posts.treasury.outbound\\_payment.returnedOccurs whenever an OutboundPayment is returned.treasury.outbound\\_transfer.canceledOccurs whenever an OutboundTransfer is canceled.treasury.outbound\\_transfer.createdOccurs whenever an OutboundTransfer is created.treasury.outbound\\_transfer.expected\\_arrival\\_date\\_updatedOccurs whenever the arrival date on an OutboundTransfer updates.treasury.outbound\\_transfer.failedOccurs whenever an OutboundTransfer has failed.treasury.outbound\\_transfer.postedOccurs whenever an OutboundTransfer is posted.treasury.outbound\\_transfer.returnedOccurs whenever an OutboundTransfer is returned.treasury.received\\_credit.createdOccurs whenever a received\\_credit is created as a result of funds being pushed by another account.treasury.received\\_credit.failedOccurs whenever a received\\_credit transitions to a failed state. Only applicable for check deposits.treasury.received\\_credit.succeededOccurs whenever a received\\_credit transitions to a succeeded state. Only applicable for check deposits.treasury.received\\_debit.createdOccurs whenever a received\\_debit is created as a result of funds being pulled by another account.",
    "title": "Webhooks for Stripe Issuing and Stripe Treasury | Stripe Documentation",
    "description": "Learn about webhook events for Stripe Issuing and Stripe Treasury and why they occur.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/treasury-accounts-structure",
    "markdown": "# Stripe Treasury accounts structure | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how the account components of Treasury fit together and interact.\n\nUnderstanding the technical components of Stripe Treasury is important for you to develop an optimized financial service for the sellers and service providers on your platform. A crucial first step in that understanding is to learn the different account types involved with a Treasury integration.\n\n## Account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must have Stripe [Connect](https://docs.stripe.com/connect \"Connect\") to use Treasury. In its most basic form, a Connect integration includes a platform account with many connected accounts, each owned by a seller or service provider that uses the platform. Both the platform account and its connected accounts are [`Account`](https://docs.stripe.com/api/accounts) objects in the Stripe API.\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\n![Flow chart with lines connecting a platform with three different connected accounts.](https://b.stripecdn.com/docs-statics-srv/assets/connected-accounts.7443ee88f52a49904439afc21ded676e.png)\n\nA Connect platform with connected accounts\n\nStripe Treasury introduces another type of account to the Stripe ecosystem: financial accounts. When you onboard your platform to Treasury, Stripe automatically creates and assigns a `FinancialAccount` object to your platform account. As the platform, you request the `treasury` capability when requesting the capabilities you need for your connected accounts. After you request it, Stripe updates the connected account’s `Account` object to include additional requirements in its [`requirements` hash](https://docs.stripe.com/api/accounts/object#account_object-requirements). You can create financial accounts for your connected accounts, but until you gather the requirements from your connected account owners, the financial accounts aren’t accessible. For more information on using Treasury financial accounts, see the [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) guide.\n\n## Account balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach account in Stripe Connect (both platform and connected accounts) has an [account balance](https://docs.stripe.com/connect/account-balances) that tracks pending and available funds for that account. With Stripe Treasury, each of these accounts can also have a financial account, which has a balance of its own. Treasury provides you the tools to transfer funds between the platform account and financial account, but their respective balances always remain separate. However, funds can’t be transferred from a platform end-user’s financial account to their connected account. For more information on platform and connected account balances, see the [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances) guide. For more information on financial account balances, see the [Working with balances and transactions](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) guide.\n\n![Flow chart with a line connecting a platform account with a connected account. For each account, two lines connect both a payments account balance and a financial account balance. A double arrow with a dollar sign shows funds flow between each accounts balances and a one direction arrow with a dollar sign flow from the platform financial account balance to the connected account financial account balance.](https://b.stripecdn.com/docs-statics-srv/assets/fund-flow.6fb714d66e6c95a45f14066001c290bc.png)\n\nFlow of funds between accounts\n\n## Flow of funds between accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough the payments balance and financial account balances are separate, Treasury supports the flow of funds between the two. Treasury also enables you to transfer funds from your platform financial account to the financial accounts attached to your platform’s connected accounts. You can use [Payouts](https://docs.stripe.com/api/payouts) to send funds from your payment balance to your financial account or to the financial accounts attached to your platform’s connected accounts. To move money between two financial accounts, Treasury introduces [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments) objects to facilitate this movement.\n\nTransfers affect funds on the Stripe Account Balance, so if you want to move funds between two financial accounts, you must use OutboundPayments.",
    "title": "Stripe Treasury accounts structure | Stripe Documentation",
    "description": "Learn how the account components of Treasury fit together and interact.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/examples/moving-money",
    "markdown": "# Using Treasury to move money\n\n## Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.\n\nHomebox is a fictitious vertical SaaS that builds software for home services companies like HVAC, cleaners, and plumbers. This integration walks through some basic money movement using the Treasury endpoints of the [Stripe API](https://docs.stripe.com/api). To see how the company set up a Treasury financial account and issued payment cards, see [Using Treasury to set up financial accounts and cards](https://docs.stripe.com/treasury/examples/financial-accounts).\n\n## Using external bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury provides platforms with a suite of account creation and money movement API endpoints to help store, manage, and move connected accounts’ funds. Platforms can fund a financial account, and move money between Treasury financial accounts and external bank accounts.\n\nThe Stripe API offers `InboundTransfer` and `OutboundTransfer` to facilitate moving money between connected accounts’ external bank accounts and their Treasury financial accounts. The Stripe API also offers `OutboundPayment` to facilitate moving money from connected accounts’ Treasury financial accounts to third-parties’ external bank accounts. All of these objects can leverage `PaymentMethods` to store external bank account details such as routing numbers and account numbers.\n\n## PaymentMethods explained![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWithin the Stripe API, you can save payment method information using a `PaymentMethod` object. For example, Homebox might save their vendors’ accounts as `PaymentMethods` to send money without having to re-enter and collect their information.\n\nYou can attach `PaymentMethods` that contain external bank account information to a customer (for sending money to a third party) or to a Stripe account (for pulling money from or sending money to an external bank account belonging to the Stripe accountholder). The “customer” refers to the `Customer` object in the Stripe API, which defines any third party. In Treasury usage, the customer is generally a vendor receiving payments from the Stripe accountholder rather than making payments to the Stripe accountholder. Use the `SetupIntent` object to set up both customer-attached and account-attached `PaymentMethod` objects.\n\nThe relevant API objects that you can use with a `PaymentMethod` depend on how they’re attached:\n\n*   Customer-attached: Use `OutboundPayments`.\n*   Account-attached: Use `InboundTransfers` and `OutboundTransfers`.\n\n![Flowchart with external bank account on left and flow moving to SetupIntent then PaymentMethod and attaching to customer or account.](https://b.stripecdn.com/docs-statics-srv/assets/paymentmethods.f429ec4e87b87636c0e2b34c26a69c83.png)\n\nPaymentMethod flow\n\n## InboundTransfers and OutboundTransfers overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can pull funds from a Stripe account’s external bank account using an `InboundTransfer` and push funds to their external bank account using an `OutboundTransfer`.\n\nTo successfully pull funds into a Treasury financial account with an `InboundTransfer`, external bank accounts must be verified by the Stripe accountholder. Bank accounts that are used to send funds out of a financial account with an `OutboundTransfer` don’t need to be verified.\n\nWhen an external bank account is used for either `InboundTransfers` or `OutboundTransfers`, you need to attach the corresponding `PaymentMethod` to the Stripe account rather than to a customer. You do this by using the `attach_to_self=true` parameter rather than the `customer` parameter when creating the `PaymentMethod` using `SetupIntent`.\n\n![Flow chart with external bank on the left and flow pointing to SetupIntent to PaymentMethod and attaching to Stripe account.](https://b.stripecdn.com/docs-statics-srv/assets/iot.38c049d39deca401a3341b34d72189fe.png)\n\n`InboundTransfers` and `OutboundTransfers` flow.\n\n## OutboundPayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms use the `OutboundPayment` API to send funds from a Treasury financial account to an external bank account owned by a third party.\n\nYou must attach `PaymentMethods` to a customer to use them with `OutboundPayments`. Bank accounts used for `OutboundPayments` don’t need to be verified.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/iot-customer.5476c499693c606ead280fbae61ebe4a.png)\n\n`OutboundPayments` flow\n\n## Adding an external bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox wants to link their customers’ own external bank accounts to their Treasury financial accounts. Homebox’s connected accounts want to keep all of their business capital in their financial accounts and use inbound transfers to pull money from their external account into their Treasury financial account. To enable their connected accounts to transfer money to and from their external accounts, Homebox creates a `SetupIntent` with the required parameters and attaches it to an account-attached `PaymentMethod`:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d attach_to_self=true \\  -d \"flow_directions[]\"=inbound \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=company \\  -d \"payment_method_data[billing_details][name]\"=\"Company Corp\" \\  -d confirm=true \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"123.123.123.123\" \\   --data-urlencode \"mandate_data[customer_acceptance][online][user_agent]\"=\"curl/1.2.3\"`\n\nTo send and receive money through `OutboundTransfers` or `InboundTransfers`, Homebox must specify an external bank account with the `payment_method_data[us_bank_account]` parameter. Before creating the live external bank account link, Homebox tests the flow using the [test account numbers](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers) Stripe provides.\n\nAs shown in the preceding example, Homebox has defined the external bank account (`payment_method_data[us_bank_account]`) and set `attach_to_self` as `true`, which enables the bank account information to be associated with the Stripe accountholder (rather than a third party). When the platform sends the request, the Treasury API responds with a `SetupIntent`:\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"application\": \"{{APPLICATION_ID}}\",   \"attach_to_self\": true,   \"cancellation_reason\": null,   \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",   \"created\": 1642520861,   \"customer\": null,   \"description\": null,   \"flow_directions\": [     \"inbound\",     \"outbound\"   ],   \"last_setup_error\": null,   \"latest_attempt\": \"{{ATTEMPT_ID}}\",   \"livemode\": false,   \"mandate\": \"{{MANDATE_ID}}\",   \"metadata\": {   },   \"next_action\": {     \"type\": \"verify_with_microdeposits\",     \"verify_with_microdeposits\": {       \"arrival_date\": 1642579200,       \"hosted_verification_url\": \"[https://payments.stripe.com/microdeposit/sacs_test_xxx](https://payments.stripe.com/microdeposit/sacs_test_xxx)\",       \"microdeposit_type\": \"amounts\"     }   },   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": {     \"us_bank_account\": {       \"verification_method\": \"automatic\"     }   },   \"payment_method_types\": [     \"us_bank_account\"   ],   \"single_use_mandate\": null,   \"status\": \"requires_confirmation\",   \"usage\": \"off_session\" }`\n\n## Verifying an external bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox linked an external bank account in the previous section. The bank account must be verified, though, before Homebox can use it for `InboundTransfers`. Bank account verification enables the account owner to confirm ownership of the external bank account. To verify, Homebox can use [Stripe Financial Connections](#connections) for instant verification, or [microdeposits](#microdeposits) (which take more time).\n\n### Stripe Financial Connections ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe offers [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify an owned bank account. Financial Connections is a Stripe hosted flow integrated on the application’s client- and server-side.\n\nThere are three steps necessary for Homebox to collect and verify bank account information with Financial Connections:\n\n1.  Create a `SetupIntent` with the property `attach_to_self` (replacing the `customer_id` property), and the value `instant` for the `verification_method` property.\n    \n2.  Provide the `client_secret` to the frontend application to use `stripe.collectBankAccountForSetup` to collect bank account details, create a `PaymentMethod`, and attach that `PaymentMethod` to the `SetupIntent`.\n    \n    #### Note\n    \n    The account holder’s name in the `billing_details` parameter is required to create a US bank account `PaymentMethod`.\n    \n3.  Display the mandate terms to collect the authorization for the `PaymentMethod` usage.\n    \n\nFor step 1, Homebox develops the following code to create a `SetupIntent` server-side and pass the information to a handlebars.js template. This code assumes that an application has a user logged in to Stripe and that it passes the Stripe Account ID as part of the [`Session` object](https://docs.stripe.com/api/financial_connections/sessions/object) (`req.session.accountId`).\n\n`const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY); router.get('/add_bank_account', async (req, res) => {   const account = await stripe.accounts.retrieve(req.session.accountId);   const setupIntent = await stripe.setupIntents.create({     attach_to_self: true,     flow_directions: ['inbound', 'outbound'],     payment_method_types: ['us_bank_account'],     payment_method_options: {us_bank_account: {verification_method: \"automatic\"}}   },{     stripeAccount: account.id,   });   let client_secret= setupIntent.client_secret;   res.render('add_bank_account', { account: account, client_secret: client_secret, stripe_pk: process.env.STRIPE_PUBLISHABLE_KEY }); });`\n\nStep 2 begins when Homebox passes the following data to the render function:\n\n*   The Stripe account ID.\n*   The client secret obtained from the `SetupIntent` that’s used as the identifier.\n*   The platform’s publishable API key.\n\nIn this example, the client-side page renders with a button for the user to validate their bank account through Financial Connections.\n\n![Screenshot of a modal titled Add a bank account with a button labeled Save Payment Details](https://b.stripecdn.com/docs-statics-srv/assets/add-bank-account-modal.0b727f65d3c6691f3bef211c1a45cb83.png)\n\nModal to add a bank account\n\nHomebox creates the following code to drive the logic behind the preceding button.\n\n`const getBankAccount = async e => {   paymentMethodButton.setAttribute(\"disabled\", \"disabled\");   // Calling this method triggers the Financial Connections modal to display.   const response = await stripe.collectBankAccountForSetup(\"{{ client_secret }}\", {     billing_details: {       name: \"John Doe\",       email: \"test@test.com\",     },   });   if (response.error)   {     console.error(response.error);   }   if (response.status == \"requires_confirmation\")   {     //Show confirmation modal     AcceptBankAccountModal.classList.remove(\"hidden\");   } };`\n\nIn this code example, the script calls the `collectUsBankAccountForSetup` method and passes the `client_secret` from the `SetupIntent`. An application dialog walks the user through linking their bank account.\n\n![Screenshot of a modal going through the workflow of adding a bank account. First state of modal shows the authorize step with an Agree button and the next state shows the highlighted account with a Link Account button.](https://b.stripecdn.com/docs-statics-srv/assets/add-account-flow.cfd2209695ca186cd617f682319e564c.png)\n\nWorkflow for adding a bank account\n\nStep 3 begins with the successful completion of the preceding workflow, as the `SetupIntent` status changes to `requires_confirmation` and a modal displays an [authorization message](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web#web-collect-mandate-and-submit) for the user to confirm.\n\n![Screenshot of a modal displaying the authorization confirmation language with an Accept button at the bottom and an x in the top left to cancel.](https://b.stripecdn.com/docs-statics-srv/assets/accept-modal.6db14c686b9ec87ff471a18d2f9d2abf.png)\n\nAuthorization message\n\nAfter the user clicks **Accept**, the code calls the `confirmUsBankAccountSetup` method and the bank account is stored as verified. The bank account can now be used for `InboundTransfers`.\n\n`const acceptBankAccount = async e => {   acceptButton.setAttribute(\"disabled\", \"disabled\");   const response = await stripe.confirmUsBankAccountSetup(\"{{ client_secret }}\");   if (response.setupIntent.status == \"requires_payment_method\") {     // Confirmation failed. Attempt again with a different payment method.     console.log(\"Requires payment method\")   } else if (response.setupIntent.status == \"succeeded\") {     // Confirmation succeeded! The account is now saved.     // Display a message to customer.     AcceptBankAccountModal.classList.add(\"hidden\");     console.log(\"Account added\");   } else if (response.setupIntent.next_action?.type == \"verify_with_microdeposits\") {     // The account needs to be verified via microdeposits.     // Display a message to consumer with next steps (consumer waits for     // microdeposits, then enters an amount on a page sent to them via email).     console.log(\"The account needs to be verified with microdeposits\")   } };`\n\n### Microdeposits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMicrodeposits are small sums of money, typically a fraction of a US dollar, that Stripe deposits into an external bank account. Owners of the account can verify ownership of the account by confirming the exact amount of those deposits.\n\nThe `SetupIntent` object that Homebox created in the previous section includes a `PaymentMethod` ID.\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   …   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": { …  } }`\n\nThe `SetupIntent` also includes a `next_action` object with a URL defined in the `hosted_verification_url` value.\n\nHomebox provides the URL to the connected account owner to complete verification. The owner must follow the URL to verify receipt by entering the associated descriptor code of the microdeposit (in [test mode](https://docs.stripe.com/test-mode \"test mode\"), use the value `SM11AA`).\n\n![Microdeposit verification dialog showing one cent deposited into an account with a prompt to enter descriptor code and a verify button.](https://b.stripecdn.com/docs-statics-srv/assets/microdeposits.0b67c00bb4028265c9ed9dbe300f5b81.png)\n\nMicrodeposit verification\n\n## Using PaymentMethods with InboundTransfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox can begin creating `InboundTransfers` using a bank account verified with one of the previously described methods.\n\nThe following request transfers 200 USD using an account-attached payment method into the financial account with the provided ID. The `Stripe-Account` header value identifies the Stripe account that owns both the financial account and the payment method.\n\n`curl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d origin_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=20000 \\  -d currency=usd \\  -d description=\"Funds for repair\" \\  -d statement_descriptor=\"Invoice 12\"`\n\nIf successful, the response provides the `InboundTransfer` object. The object includes a `hosted_regulatory_receipt_url` that provides access to details of the transaction for the account holder on the Homebox platform.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Funds for repair\",     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{IBT_URL}}\",     \"linked_flows\": null,     \"livemode\": false,     \"metadata\": {},     \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     ...     \"statement_descriptor\": \"Invoice 12\",     \"status\": \"processing\",     ... }`\n\n## Using PaymentMethods with OutboundPayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also use a `PaymentMethod` to send funds to an external bank account owned by a third party using `OutboundPayment` objects.\n\nHomebox wants to send funds to one of its connected account’s vendors on a recurring basis to pay for supplies. To do so, the platform needs to first get the customer ID using the `Customers` endpoint.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"Test Customer\"`\n\nThe response provides the customers for the associated connected account. Homebox identifies the correct customer and records their ID.\n\n`{   \"id\": \"{{CUSTOMER_ID}}\",   \"object\": \"customer\",   \"address\": null,   \"balance\": 0,   \"created\": 1642523420,   \"currency\": null,   \"default_source\": null,   \"delinquent\": false,   \"description\": \"Test Customer\",   \"discount\": null,   \"email\": null,   \"invoice_prefix\": \"96A50A92\",   \"invoice_settings\": {     \"custom_fields\": null,     \"default_payment_method\": null,     \"footer\": null   },   \"livemode\": false,   \"metadata\": {   },   \"name\": null,   \"next_invoice_sequence\": 1,   \"phone\": null,   \"preferred_locales\": [    ],   \"shipping\": null,   \"tax_exempt\": \"none\" }`\n\nHomebox then creates a `SetupIntent` using the ID. Because `OutboundPayments` are used for outbound money flows to third parties, Homebox makes sure to set `flow_directions` to `outbound` and doesn’t use `attach_to_self`, instead specifying a `customer`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"payment_method_data[billing_details][name]\"=\"John doe\" \\  -d confirm=true`\n\nA successful call returns the following object to indicate the `PaymentMethod` is successfully attached to the customer.\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"application\": \"{{APPLICATION_ID}}\",   \"cancellation_reason\": null,   \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",   \"created\": 1642528487,   \"customer\": \"{{CUSTOMER_ID}}\",   \"description\": null,   \"flow_directions\": [     \"outbound\"   ],   \"last_setup_error\": null,   \"latest_attempt\": null,   \"livemode\": false,   \"mandate\": null,   \"metadata\": {   },   \"next_action\": null,   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": {   },   \"payment_method_types\": [     \"us_bank_account\"   ],   \"single_use_mandate\": null,   \"status\": \"succeeded\",   \"usage\": \"off_session\" }`\n\n## Creating an OutboundPayment without a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`PaymentMethods` aren’t required when sending or using `OutboundPayments` if you don’t have a need to store the recipient’s bank account, as in the case of one-off payments.\n\nHomebox needed to pay a vendor 50 USD to cover the cost of supplies. To pay the vendor, the platform calls `OutboundPayments` with the external bank account information.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"destination_payment_method_data[type]\"=us_bank_account \\  -d \"destination_payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"destination_payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"destination_payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"destination_payment_method_data[billing_details][name]\"=\"John Doe\" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d statement_descriptor=payment_1 \\  -d amount=5000 \\  -d currency=usd`\n\nThe successful call returns the following object:\n\n`{   \"id\": \"{{OUTBOUNDPAYMENT_ID}}\",   \"object\": \"treasury.outbound_payment\",   \"amount\": 5000,   \"cancelable\": true,   \"created\": 1643033124,   \"currency\": \"usd\",   \"customer\": null,   \"description\": null,   \"destination_payment_method\": null,   \"destination_payment_method_details\": {     \"billing_details\": {       \"address\": {         \"city\": null,         \"country\": null,         \"line1\": null,         \"line2\": null,         \"postal_code\": null,         \"state\": null       },       \"email\": null,       \"name\": \"John Doe\",       \"phone\": null     },     \"type\": \"us_bank_account\",     \"us_bank_account\": {       \"account_holder_type\": \"individual\",       \"bank_name\": \"STRIPE TEST BANK\",       \"fingerprint\": \"SzrMIps1gg91aVKG\",       \"last4\": \"6789\",       \"network\": \"ach\",       \"routing_number\": \"110000000\"     }   },   \"end_user_details\": {     \"present\": false,     \"ip_address\": null   },   \"expected_arrival_date\": 1643068800,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/bot_test_xxx\",   \"livemode\": false,   \"metadata\": {   },   \"statement_descriptor\": \"payment_1\",   \"status\": \"processing\",   \"status_transitions\": {     \"canceled_at\": null,     \"failed_at\": null,     \"posted_at\": null,     \"processing_at\": 1643033124,     \"returned_at\": null   },   \"transaction\": \"{{TRANSACTION_ID}}\" }`",
    "title": "Using Treasury to move money | Stripe Documentation",
    "description": "Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/issuing-cards",
    "markdown": "# Working with Stripe Issuing cards\n\nAfter the `card_issuing` capability is active, the sellers and service providers that own your platform’s connected accounts can create cardholders and cards. You can issue cards only through the API.\n\nA [Cardholder object](https://docs.stripe.com/api/#issuing_cardholder_object) represents an individual or business entity that you can issue cards to. You can begin by creating a `Cardholder` with name, billing information, and whether they’re an `individual` or `company`.\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d type=individual \\  -d \"individual[first_name]\"=Jenny \\  -d \"individual[last_name]\"=Rosen \\  -d \"individual[dob][day]\"=1 \\  -d \"individual[dob][month]\"=11 \\  -d \"individual[dob][year]\"=1981 \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nIf successful, the response returns the newly created `Cardholder` object.\n\nCreate a [Card](https://docs.stripe.com/api/#issuing_card_object) and assign it to both the `Cardholder` you just created and a financial account. To assign the cardholder and financial account, specify the cardholder ID in the `cardholder` parameter and the financial account ID in the `financial_account` parameter of the `/v1/issuing/cards` request.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d cardholder={{CARDHOLDER_ID}} \\   -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d currency=usd \\  -d type=virtual \\  -d status=active`\n\nIf successful, the response returns the newly created `Card` object.",
    "title": "Working with Stripe Issuing cards | Stripe Documentation",
    "description": "Learn how to integrate Stripe Issuing with Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/platform-financial-account",
    "markdown": "# Platform financial accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the financial account for your platform.\n\nAfter you’ve [gained API access](https://docs.stripe.com/treasury/access) to Stripe Treasury, we automatically provision your platform with two financial accounts, one for test mode and one for live mode.\n\nThe test mode platform financial account enables you to set up and test your integration without actually affecting either your platform account balance or the balance of your live mode platform financial account.\n\nThe live mode platform financial account is where you store your own funds as working capital for your Treasury program. The live mode platform financial account has its own routing number and account number and supports most of the same types of money movement as the financial accounts attached to your platform’s connected accounts.\n\n## Platform financial account differences![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe financial accounts (live mode and test mode) for your platform are essentially the same as the financial accounts attached to your platform’s connected accounts. You use the same API requests regardless of which financial account is involved; however, you don’t include a [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) when making API calls against your platform financial account. The `Stripe-Account` header signals that a request is for the associated connected account’s financial account rather than your platform’s.\n\nThe following list itemizes the differences between platform financial accounts and financial accounts attached to connected accounts:\n\n*   You can’t attach Stripe Issuing cards to platform financial accounts.\n    *   You can attach Stripe Issuing cards to the financial accounts attached to connected accounts.\n*   You can’t transfer funds from your platform financial account balance directly to the account balance of a connected account.\n    *   You can transfer funds from your platform financial account balance directly to the balance of a financial account attached to a connected account.\n*   You can’t use the Stripe API to close a platform financial account.\n    *   Beta You can use `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close` to [close financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts#close-a-financialaccount) attached to connected accounts if you have access to the beta Closure API methods. The Closure API methods don’t provide the ability to close the platform financial account.\n*   You must use the Stripe Dashboard (rather than the API) to set the platform financial account as a `BankAccount` object that you can use for payouts from or top-ups to the platform payments balance.\n    *   See the [Payouts and top-ups](https://docs.stripe.com/treasury/moving-money/payouts#financial-accounts-as-external-accounts) guide for more information.\n*   You can’t accelerate payouts from the platform account balance to the platform financial account balance.\n\n## Retrieving platform financial account details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find your platform financial account routing number, account number, and balance in the **Treasury balance** section under the **Balances** tab of your Stripe [Dashboard](https://dashboard.stripe.com/test/treasury). Use the API to view the other details of your platform financial account.\n\n![Treasury balance section of the Dashboard showing account number, routing number, and total amount of balance.](https://b.stripecdn.com/docs-statics-srv/assets/treasury-balance.1647f7e2fdd3492e4bdab81cfced4b8b.png)\n\nTreasury balance\n\nUse `GET /v1/treasury/financial_accounts` to list all the details of your platform financial accounts through the API. A `Stripe-Account` header isn’t included, signaling this request is for the platform financial account.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf successful, the response includes your platform financial account `id`. You can use the financial account ID to directly retrieve your platform financial account details using `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nThe `FinancialAccount` object displays the data that defines your financial account, including your balance and the balance of any pending transactions.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   // Arrays of active, pending and restricted features summarize the status of all requested features   \"active_features\": [\"financial_addresses.aba\", \"deposit_insurance\"],   \"pending_features\": [\"inbound_transfers.ach\"],   \"restricted_features\": [\"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\"],`\n\n## Retrieving platform financial account features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}/features` to retrieve your platform’s financial account feature information.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIf successful, the response itemizes the features assigned to your platform financial account.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   \"deposit_insurance\": {     \"requested\": true,     \"status\": \"active\",`\n\n## Moving money between the Treasury financial accounts of the platform and its connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `OutboundPayments` over the `stripe` network to instantly move funds between a platform Treasury financial account and the Treasury financial accounts of connected accounts associated with the same platform. See [Creating an OutboundPayment to a financial account](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments#create-obp-for-fa) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Treasury account structure](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure)\n*   [Working with connected accounts](https://docs.stripe.com/treasury/account-management/connected-accounts)\n*   [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)\n*   [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Working with balances](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions)\n*   [Moving money into Treasury financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts)\n*   [Moving money out of Treasury financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts)",
    "title": "Platform financial accounts | Stripe Documentation",
    "description": "Learn about the financial account for your platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/financial-accounts",
    "markdown": "# Working with Treasury financial accounts\n\n## Learn how to work with financial accounts in Treasury.\n\nWhen you enable Stripe Treasury on your platform, you can add `FinancialAccount` objects to your [platform architecture](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) to enable the efficient storing, sending, and receiving of funds. After you [gain API access to Treasury](https://docs.stripe.com/treasury/access), Stripe attaches a financial account to your platform account and enables you to provision financial accounts for eligible connected accounts on your platform.\n\nEach financial account has its own distinct [balance of funds](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions), separate from the balance of the account it’s linked to. For example, the owner of a connected account on your platform might have a 100 USD connected account balance and a 200 USD financial account balance. In this scenario, the connected account owner has a sum of 300 USD spread between their financial account and connected account balances. These two balances remain separate, but the API provides the ability to move money from the connected account balance to the financial account balance.\n\nIn the Stripe API, `FinancialAccount` objects serve as the source and destination of money movement API requests. You request `Features` through the API to assign to `FinancialAccounts` that provide additional functionality for the financial accounts on your platform. For example, to enable payment card features on a specific financial account, you send an API request with the `FinancialAccount` ID for the `card_issuing` feature. See [Financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) for more information on `Feature` objects. See the [Available features](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features) section within that guide to check required connected account capabilities for each `Feature`.\n\nBefore you create financial accounts in live mode for your Treasury integration, we recommend you first create test financial accounts in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Test mode financial accounts can’t receive or send real money, can’t be used in live mode, and don’t generate a live account with real routing and account information, but are otherwise identical in configuration and functionality.\n\n## Create a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `POST /v1/treasury/financial_accounts` to create `FinancialAccounts`. Include the connected account ID as the value of the `Stripe-Account` header of the call to associate the `FinancialAccount` with a connected account.\n\nConnected accounts can have multiple financial accounts associated with them through providing the same connected account ID as the value of the `Stripe-Account` header. By default, you can associate a maximum of two financial accounts with a single connected account (closed financial accounts don’t contribute to the limit). If you need a higher account threshold, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nThe following JSON defines the `FinancialAccount` object structure:\n\n``{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   // Arrays of active, pending and restricted features summarize the status of all requested features   \"active_features\": [\"financial_addresses.aba\", \"deposit_insurance\"],   \"pending_features\": [\"inbound_transfers.ach\"],   \"restricted_features\": [\"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\"],   \"balance\": {     \"cash\": {\"usd\": 9000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   },   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see \"Activating features\"   \"financial_addresses\": [     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"domestic_wire_us\"],       \"aba\": {         \"account_number_last4\": \"7890\",         // Use the expand[] parameter to view the `account_number` field hidden by default         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Goldman Sachs\"       }     }   ],   \"livemode\": true,   // Financial accounts begin in the \"open\" state, but can be closed   // `status_details.closed` is populated once a financial account is closed   \"status\": \"open\",   \"status_details\": {     \"closed\": {       // List of one or more reasons why the FinancialAccount was closed:       // - account_rejected       // - closed_by_platform       // - other       \"reasons\": [],     }   },   // User-defined metadata   \"metadata\": {},   \"nickname\": {},   // Restrictions that the platform can apply to the FinancialAccount   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"restricted\"   }, }``\n\nTypically, you also request [financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) when you make the API request to create the account. Regardless of the `Features` you request, the connected account must have the `treasury` capability enabled. If you’re unsure if the connected account has the capability, use `GET /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to check. The account’s `capabilities` hash must have a `treasury` value of `active`.\n\n`…   \"capabilities\": {     \"card_issuing\": \"active\",     \"card_payments\": \"active\",     \"transfers\": \"active\",     \"treasury\": \"active\",     \"us_bank_account_ach_payments\": \"active\"   }, …`\n\nIf you want to issue cards attached to the financial account balance, your platform’s connected accounts must also have the Issuing (`card_issuing`) capability enabled. The connected account must have this capability before you can request the `card_issuing` feature for its financial account. If the connected account doesn’t have the capability, attempting to create a `FinancialAccount` with a request for the `card_issuing` feature results in an error.\n\nYou can set the `nickname` field of a `FinancialAccount` object to designate the financial account with a custom name. You can use nicknames to create unique identifiers, which you can use when working with multiple financial accounts under a single connected account. For nicknames to be valid, they must:\n\n*   Be unique for each financial account under a given connected account\n*   Be a non-blank string\n*   Contain less than 250 characters\n\nIf you don’t provide a nickname upon account creation, the nickname field will be empty and will return `null`. You can [update](https://docs.stripe.com/treasury/account-management/financial-accounts#update-a-financialaccount) nicknames after creating a `FinancialAccount`.\n\nThe following request creates a financial account assigned to the connected account with the ID assigned in the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d nickname={{OPTIONAL_NICKNAME}} \\   -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response is a `FinancialAccount` object to confirm financial account creation.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [     \"card_issuing\",   ],   // Features that require activation enter a pending state before activating`\n\n## Update a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}` to update the `FinancialAccount` with the associated ID. Include the connected account ID as the `Stripe-Account` header value. The following example updates the [metadata](https://docs.stripe.com/api/metadata) of the FinancialAccount.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"metadata[key]\"=value`\n\n## Retrieve a FinancialAccount and account number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}` to retrieve the `FinancialAccount` with the associated ID. Include the connected account ID as the `Stripe-Account` header value.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nBy default, the account number for a financial account isn’t included in the response. To retrieve the account number, include the `financial_addresses.aba.account_number` field in the `expand` array.\n\n`curl -G https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"financial_addresses.aba.account_number\"`\n\nIf successful, the response returns the `FinancialAccount` object with or without the account number depending on the inclusion of the `expand` array.\n\n`{   \"id\": {{FINANCIAL_ACCOUNT_ID}},   ...   \"financial_addresses\": [     {       \"aba\": {         \"account_holder_name\": \"jenny\",         \"account_number\": \"4242424242420239\",         \"account_number_last4\": \"0239\",         \"bank_name\": \"Stripe Test Bank\",         \"routing_number\": \"000000001\"       },       ...     }   ],   ... }`\n\nFor more information on the `expand` parameter, see [expanding responses](https://docs.stripe.com/expand).\n\n### Feature summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `FinancialAccount` object contains a summary of the state of all its `Features` in three arrays - `active_features`, `pending_features`, and `restricted_features`.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"fa_987\",   \"status\": \"open\",   ...   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [\"outbound_transfers.ach\"], }`\n\nThese arrays provide a convenient way to see:\n\n*   Inactive features (included in `pending_features` or `restricted_features`)\n*   Active features (included in `active_features`)\n*   Restricted features that require action (included in `restricted_features`)\n\nSee [Financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) for more information.\n\n## Close a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can permanently close a financial account if it meets the following conditions:\n\n*   Has a zero balance.\n*   There are no pending inbound transfers.\n*   All attached Issuing cards are canceled.\n\n#### Warning\n\nYou can’t reopen financial accounts after you’ve closed them.\n\nTo close a financial account, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) and provide the `FinancialAccount` ID you want to close and the reason for the closure. You must provide your users with account closure notices, as detailed in the Treasury compliance guidelines.\n\nClosing a financial account has no impact on data retention for associated objects, such as `Transactions`.\n\n## FinancialAccount closure using the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use `POST/v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close` to close the financial account with the associated ID. Include the associated connected account ID as a header value.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nThe response is the `FinancialAccount` object with a `status` of `closed` to confirm the action.\n\n`{   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"object\": \"treasury.financial_account\",   \"status\": \"closed\",   \"status_details\": {     \"closed\": {       \"reasons\": [\"closed_by_platform\"]     }   },   \"active_features\": [],   \"pending_features\": [],   \"restricted_features\": [\"financial_addresses.aba\"],   ... }`\n\n### Handling transactions on closed accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn rare circumstances, financial accounts might receive credits or debits on closed accounts that Stripe can’t return automatically. As a platform owner, you’re responsible for negative balances incurred after account closure. Stripe support works with you to return any remaining funds owed to the seller or service provider and to remediate closed accounts with a negative balance.\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create financial accounts before fulfilling onboarding requirements. In this case, the financial account opens asynchronously and then triggers a `treasury.financial_account.features_status_updated` [webhook](https://docs.stripe.com/webhooks) with an updated view on any features still restricted due to outstanding onboarding requirements.\n\n*   `account.updated`\n    *   When requesting new Features, the platform might get an `account.updated` webhook prompting that the requirements hash has changed and some new fields are now in `pending_verification`.\n*   `treasury.financial_account.created`\n    *   Triggered whenever a new FinancialAccount is created.\n*   `treasury.financial_account.closed`\n    *   Notifies when the status of the top-level FinancialAccount changes to closed.\n*   `treasury.financial_account.features_status_updated`\n    *   Indicates that one or more Features have changed status. This is reflected in changes to the `active_features, pending_features` or `restricted_features` arrays.",
    "title": "Working with Treasury financial accounts | Stripe Documentation",
    "description": "Learn how to work with financial accounts in Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/financial-account-features",
    "markdown": "# Financial account features | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the features available for financial accounts.\n\nYou add features to [financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) to provide the functionality that enables you to move money between accounts, attach payment cards, and more. You typically assign the `Feature` objects you want when creating `FinancialAccount` objects, but you can add or remove them at any time. Some `Features` require that the connected account associated with the financial account have particular capabilities active. For example, a connected account must have the `card_issuing` capability active before you can request the `card_issuing` feature on the financial account attached to that connected account.\n\n## Available features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table lists the available `Features` for a `FinancialAccount` and the capabilities the associated connected account must have active to add them.\n\n#### Note\n\nYou must request or have the following capabilities active before you can request the `treasury` capability for connected accounts:\n\n*   `transfers`\n*   `card_payments`\n\n| Feature | Description | Required capabilities |\n| --- | --- | --- |\n| `card_issuing` | Allows the creation of a [Card object](https://docs.stripe.com/api/#issuing_card_object) associated with this financial account. | `card_issuing` |\n| `deposit_insurance` | Requests FDIC insurance eligibility for the financial account. | `treasury` |\n| `financial_addresses.aba` | Triggers the creation of a `FinancialAddress` object of type ABA associated with this financial account. When this feature is active, the address can receive money over ACH or wire, and external bank accounts can debit it. | `treasury` |\n| `inbound_transfers.ach` | Allows creation of `InboundTransfer` objects to fund the financial account by debiting an external US bank account. | `treasury`, `us_bank_account_ach_payments` |\n| `intra_stripe_flows` | Enables this financial account to send money to or receive money from other financial accounts over the `stripe` network. Both financial accounts (originator and recipient) need this feature enabled for `stripe` network outbound payments to work. | `treasury` |\n| `outbound_payments.ach` | Allows this financial account to send ACH transfers using the `OutboundPayment` objects of the Stripe API. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_payments.us_domestic_wire` | Allows this financial account to send US domestic wire transfers using `OutboundPayment` objects of the Stripe API. | `treasury` |\n| `outbound_transfers.ach` | Allows this financial account to send ACH transfers using `OutboundTransfer` objects of the Stripe API. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_transfers.us_domestic_wire` | Allows this financial account to send US domestic wire transfers using `OutboundTransfer` objects of the Stripe API. | `treasury` |\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nThe following features enable financial accounts to use same-day ACH functionality. You must request the corresponding `*.ach` feature on a financial account to use it. For example, to enable a financial account to send a same-day [OutboundPayment](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments), you must request `outbound_payments.ach` and `outbound_payments.ach.same_day` on that financial account:\n\n|     |     |     |\n| --- | --- | --- |\n| Feature | Description | Required capabilities |\n| `outbound_payments.ach.same_day` | Allows this financial account to send ACH transfers using `OutboundPayment` objects that arrive in the destination account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_transfers.ach.same_day` | Allows this financial account to send ACH transfers using `OutboundTransfer` objects that arrive in the destination account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n| `inbound_payments.ach.same_day` | Allows creation of `InboundTransfer` objects to fund the financial account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n\n## Requesting features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTypically, you request features on your Treasury financial account when you [create the financial account](https://docs.stripe.com/treasury/account-management/financial-accounts#create-a-financialaccount). The following request creates a financial account and requests features in the same call.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true`\n\nIf you’re working with existing financial accounts, use `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features` to request additional features.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"card_issuing[requested]\"=true \\  -d \"deposit_insurance[requested]\"=true \\  -d \"financial_addresses[aba][requested]\"=true \\  -d \"inbound_transfers[ach][requested]\"=true \\  -d \"intra_stripe_flows[requested]\"=true \\  -d \"outbound_payments[ach][requested]\"=true \\  -d \"outbound_payments[us_domestic_wire][requested]\"=true \\  -d \"outbound_transfers[ach][requested]\"=true \\  -d \"outbound_transfers[us_domestic_wire][requested]\"=true`\n\n### Feature activation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you request a feature and satisfy all verification requirements to onboard the connected account to your platform, the feature activates. For some features, activation can be instantaneous (for example, `card_issuing`). Other features, like `financial_addresses.aba`, [activate asynchronously](#webhooks). The following API call creates a financial account and requests the ‘financial\\_addresses.aba’ and ‘card\\_issuing’ features.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[card_issuing][requested]\"=true`\n\nWhen you request features on financial account creation, the response indicates their status in the `active_features`, `pending_features`, and `restricted_features` properties. For more information, see the [Retrieving features](#retrieving-features) section.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [],   // No FinancialAddress added as the financial_addresses.aba feature is not yet active   \"financial_addresses\": [],   \"livemode\": true,   \"status\": \"open\",   ... }`\n\nYou can use `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features` to retrieve the features for the financial account created in the previous example.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe response shows `financial_addresses.aba` with a `status` of `pending` and `status_details` with a `code` of `activating`.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"financial_addresses\": {     \"aba\": {       \"requested\": true,       \"status\": \"pending\",       \"status_details\": [         {           \"code\": \"activating\"         }       ]     }   },   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   ... }`\n\nA feature can remain in this state for up to 30 minutes while Stripe communicates with external systems. When the `financial_addresses.aba` feature activates, the financial account receives a `FinancialAddress` object and triggers a `treasury.financial_account.features_status_updated` [webhook](https://docs.stripe.com/webhooks).\n\nThe following request retrieves the `FinancialAccount` details with the `financial_addresses.aba` details expanded.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"financial_addresses.aba.account_number\" \\  -d \"supported_currencies[]\"=usd`\n\nThe response provides the account details, including the complete financial address information.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\", \"financial_addresses.aba\"],   \"pending_features\": [],   \"restricted_features\": [],   \"financial_addresses\": [     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"domestic_wire_us\"],       \"aba\": {         \"account_number_last4\": \"7890\",         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Goldman Sachs\"       }     }   ],   \"livemode\": true,   ... }`\n\nThe financial account can now receive credits or debits to this ABA financial address.\n\n## Removing features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remove a feature, use `POST /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}/features` and set the value of the feature to `false`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"card_issuing[requested]\"=false`\n\nIf successful, you receive the [`Features` object](https://docs.stripe.com/api/treasury/financial_account_features) as a response with the feature you removed absent from the object.\n\n## Retrieving features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve the features of a financial account, use `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe JSON response provides the feature details defined by three properties:\n\n*   `requested`: Indicates whether the feature has been requested.\n*   `status`: Describes the current state of the feature: `active`, `pending`, or `restricted`.\n*   `status_details`: Array of hashes containing a code and resolution.\n\n`{   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   \"deposit_insurance\": {     \"requested\": true,     \"status\": \"restricted\",     \"status_details\": [       {         \"code\": \"requirements_past_due\",         \"resolution\": \"provide_information\"       }     ]   } }`\n\nThe following table identifies the possible combinations of `status` and `status_details`.\n\n| Status | Status details code | Status details resolution | Description |\n| --- | --- | --- | --- |\n| `pending` | `activating` |     | Stripe is currently activating the feature. |\n| `pending` | `requirements_pending_verification` |     | The requirements for the associated capability on the connected account have been submitted but haven’t completed verification. |\n| `restricted` | `requirements_past_due` | `provide_information` | The connected account has requirements that must be fulfilled before this feature can be enabled. |\n| `restricted` | `rejected_unsupported_business` | `contact_stripe` | The account is rejected because this type of business isn’t currently supported. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n| `restricted` | `rejected_other` | `contact_stripe` | The account is rejected for other reasons. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n| `restricted` | `restricted_by_platform` | `remove_restriction` | The platform has restricted this feature using the [`platform_restrictions`](https://docs.stripe.com/api/treasury/financial_accounts/object#financial_account_object-platform_restrictions) hash. |\n| `restricted` | `financial_account_closed` |     | This feature is unavailable because the financial account is closed. |\n| `restricted` | `restricted_other` | `contact_stripe` | This feature is restricted for other reasons. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n\n## Restricted features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can restrict money movement in financial accounts on your platform to not allow inbound flows (`inbound_flows`), outbound flows (`outbound_flows`), or both types of flows. To do so, use the [`platform_restrictions`](https://docs.stripe.com/api/treasury/financial_accounts/object#financial_account_object-platform_restrictions) hash. Restricting a flow impacts the financial account’s features that rely completely or partially on that flow. For example, to prevent money from moving out of a financial account, call `POST /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"platform_restrictions[outbound_flows]\"=restricted`\n\nIf successful, the response returns the financial account object with the appropriate flow set as `restricted`.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"status\": \"open\",   ...   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"restricted\"   },   \"active_features\": [\"card_issuing\", \"deposit_insurance\", \"inbound_transfers.ach\"],   \"pending_features\": [],   \"restricted_features\": [\"financial_addresses.aba\", \"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\", \"outbound_transfers.ach\", \"outbound_transfers.us_domestic_wire\"] }`\n\nAs the previous response shows, restricting `outbound_flows` on the FinancialAccount adds `financial_addresses.aba`, `intra_stripe_flows`, and `inbound_transfers.ach` to the `restricted_features` array.\n\nFeatures in the `restricted_features` array can be fully or partially restricted. For example, `financial_addresses.aba` is part of the `restricted_features` array in the preceding response because restricting `outbound_flows` prevents debits to the financial address. However, that financial address can still receive ACH or wire transfers, because `inbound_flows` aren’t restricted.\n\nSimilarly, the `intra_stripe_flows` feature is restricted because the `outbound_flows` restriction prevents using this financial account as the source of an outbound payment to another financial account. However, the financial account can still be the destination of an outbound payment, so the feature isn’t completely restricted.\n\nThe following request retrieves feature details for a financial account with restricted flows.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe response provides the `Feature` object that includes `status_details` with a code of `restricted_by_platform`. The `restriction` property provides a reference to the `platform_restriction` applied.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"financial_addresses\": {     \"aba\": {       \"requested\": true,       \"status\": \"restricted\",       \"status_details\": [         {           \"code\": \"restricted_by_platform\",           \"resolution\": \"remove_restriction\",           \"restriction\": \"inbound_flows\"         }       ]     }   },   ... }`\n\nThe following table outlines the impacts to features by `platform_restrictions`.\n\n#### Note\n\nRestricting inbound flows for the `financial_addresses.aba` feature doesn’t block inbound wires.\n\n| Feature | Impact of inbound\\_flows restriction | Impact of outbound\\_flows restriction |\n| --- | --- | --- |\n| `card_issuing` | N/A | N/A |\n| `deposit_insurance` | N/A | N/A |\n| `financial_addresses.aba` | Prevents the ABA financial address from receiving credits over ACH. | Prevents debits from the ABA financial address. |\n| `inbound_transfers.ach` | Disables the feature. | N/A |\n| `intra_stripe_flows` | Prevents the financial account from receiving outbound payments from other financial accounts. | Outbound payments can’t be made from this financial account to other financial accounts. |\n| `outbound_payments.ach` | N/A | Disables the feature. |\n| `outbound_payments.us_domestic_wire` | N/A | Disables the feature. |\n| `outbound_transfers.ach` | N/A | Disables the feature. |\n| `outbound_transfers.us_domestic_wire` | N/A | Disables the feature. |\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo perform an action with [webhooks](https://docs.stripe.com/webhooks) when one or more features have transitioned to a certain status, compare your local state with the latest state of the feature. While the `previous_attributes` property of the `treasury.financial_account.features_status_updated` webhook also indicates which features have changed from one status to another, events can be duplicated or received out of order. For more information, see the [webhooks best practices](https://docs.stripe.com/webhooks#best-practices).\n\n*   `account.updated`\n    *   When requesting new features, the platform might get an `account.updated` webhook indicating that the `requirements` hash has changed with fields added to `pending_verification`.\n*   `treasury.financial_account.features_status_updated`\n    *   Indicates that one or more features have changed status, reflected in changes to the `active_features`, `pending_features` or `restricted_features` arrays.",
    "title": "Financial account features | Stripe Documentation",
    "description": "Learn about the features available for financial accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/payouts",
    "markdown": "# Payouts and top-ups from Stripe Payments\n\n## Learn how to move money between Payments account balances and Treasury financial account balances.\n\nYou can move money from Stripe Payments to Stripe Treasury with [payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts), and from Stripe Treasury back to Stripe Payments with [top-ups](https://docs.stripe.com/treasury/moving-money/payouts#top-ups).\n\n## Financial accounts as external accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can send payouts to a Treasury financial account or receive top-ups from a Treasury financial account, you must set the financial account as an external account (BankAccount object) connected to the relevant Stripe account.\n\n*   Connected accounts: Use [POST /v1/accounts/{{CONNECTED\\_ACCOUNT\\_ID}}/external\\_accounts](https://docs.stripe.com/api/external_account_bank_accounts/create) with the financial account `routing_number` and `account_number` to create a `BankAccount` object you can use for payouts from a connected account\n*   Platform accounts: Use the Stripe Dashboard to create a `BankAccount` object you can use for payouts from, or top-ups to, your platform account\n\nIf there isn’t a default external account set for the `usd` currency, the financial account becomes the account’s default payout destination. If there is one, you can make the financial account the default for a connected account by setting [default\\_for\\_currency](https://docs.stripe.com/api/external_account_bank_accounts/create?lang=node#account_create_bank_account-default_for_currency) to true, as in the following example. If you have an automatic payout schedule enabled, that changes the target of the payouts to the financial account.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}}/external_accounts \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"external_account[object]\"=\"bank_account\" \\   -d \"external_account[routing_number]\"=\"{{FINANCIAL_ACCOUNT_ROUTING_NUMBER}}\" \\   -d \"external_account[account_number]\"=\"{{FINANCIAL_ACCOUNT_ACCOUNT_NUMBER}}\" \\   -d \"external_account[country]\"=\"US\" \\   -d \"external_account[currency]\"=\"usd\" \\   -d \"default_for_currency\"=\"true\"`\n\nIf successful, the response returns the newly created `BankAccount` object.\n\n`{   \"id\": \"{{BANK_ACCOUNT_ID}}\",   \"object\": \"bank_account\",   \"account\": \"{{CONNECTED_ACCOUNT_ID}}\",   \"account_holder_name\": null,   \"account_holder_type\": null,   \"available_payout_methods\": [     \"standard\",     \"instant\"   ],   ...   \"default_for_currency\": true,   ... }`\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery Stripe platform account and connected account has an account balance (also called a payments balance or acquiring balance) that stores their money. Those funds aren’t directly accessible for use outside Stripe. Payouts move funds from an account balance to an externally accessible Treasury financial account balance or external bank account.\n\nYou can fund a Treasury financial account using automatic or manual payouts. For more information about Treasury accounts, see the [Stripe Treasury accounts structure guide](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure).\n\nTo learn more about how payouts work with Connect, see the [Pay out money guide](https://docs.stripe.com/connect/add-and-pay-out-guide).\n\n## Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have connected accounts on your platform with an automatic payout schedule, you can change the target of direct payouts from their external bank accounts to their financial accounts. It requires the Treasury financial account to be set up as a `BankAccount` object; see the [Financial accounts as external accounts](#financial-accounts-as-external-accounts) section for more information.\n\n## Automatic payout speeds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, when using automatic payouts, funds from incoming card payments become available in the financial account balance two business days after the payment is received (T+2 schedule). Other payment types, such as ACH payments take longer.\n\nAfter a platform-level credit approval, you can enable T+1 faster payouts on a per-account basis for connected accounts. You can set the `interval` and `delay_days` parameters with `POST /v1/accounts` to accelerate payout schedules automatically (or you can manually trigger faster payouts as described below). Contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) if you want to request access to faster payouts (manual, automated, or both) for the connected accounts on your platform.\n\nT+1 faster payout schedules apply to all payment types, including card payments and ACH payments.\n\n### T+1 automatic payout schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo have incoming payments automatically available in the financial account on the next business day, send a request with `interval` set to `daily` and `delay_days` set to `1`.\n\nUse [POST /v1/accounts/{{CONNECTED\\_ACCOUNT\\_ID}}](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-schedule) to update the payout schedule.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"settings[payouts][schedule][interval]\"=daily \\  -d \"settings[payouts][schedule][delay_days]\"=1`\n\nThe response confirms the updated settings.\n\n`{   ...   \"settings\": {     \"payouts\": {       \"schedule\": {         \"interval\": \"daily\",         \"delay_days\": 1,       },     },     ...   }   ... }`\n\n## Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use manual payouts to send specific portions of an account balance to that account’s Treasury financial account.\n\nUse [POST /v1/payouts](https://docs.stripe.com/api/payouts/create) with the bank account `id` associated with your financial account specified as the `destination` parameter value. If you don’t have a `BankAccount` object associated with your Treasury financial account yet, see the [Financial accounts as external accounts](#financial-accounts-as-external-accounts) section for more information.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d method=standard \\  -d amount=1000 \\  -d currency=usd \\  -d destination={{BANK_ACCOUNT_ID}}`\n\nIf successful, the response returns the newly created [Payout object](https://docs.stripe.com/api/payouts/object).\n\n`{   \"id\": \"{{PAYOUT_ID}}\",   \"object\": \"payout\",   \"amount\": 1000,   ...   \"currency\": \"usd\",   \"destination\": \"{{BANK_ACCOUNT_ID}}\",   ...   \"method\": \"standard\",   ... }`\n\n## Manual payout speeds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo speed methods are available for manual payouts - `standard` and `instant`.\n\nManual payouts using `standard` speed can only draw on the `available` balance, and funds will generally arrive in the financial account in one business day (T+1 schedule).\n\nIf your platform is enabled for faster payouts, you can use `instant` manual payouts to move funds to a connected account’s financial account within an hour. You can request instant manual payouts at any time, including weekends and holidays, and instant manual payouts can draw on the `instant_available` balance of a Stripe account. If your platform is not enabled for faster payouts and you’re interested in adding the ability, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) to request the feature.\n\nTo request an instant manual payout rather than a standard manual payout, change the `method` parameter in the payout request from `standard` to `instant`.\n\n## Testing payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can simulate a payout to a connected account financial account using test mode API keys.\n\nYou can only simulate a payout to a platform financial account using the Dashboard. While in test mode, click the **Add money** button in the upper right of the [**Balances**](https://dashboard.stripe.com/test/treasury) view of your Dashboard to open the **Add Money** dialog. Follow the prompts to simulate sending money from your platform account balance to your financial account balance.\n\n![Stripe Dashboard open to the Treasury balance page in test mode with the Add money button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/test-payout.31e4405710a6d92e3592f570ac86f0be.png)\n\nAdd money button\n\n## Top-ups![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the owner of a [Connect](https://docs.stripe.com/connect \"Connect\") platform, you can use your Treasury financial account balance to top-up your platform account balance instead of using an external bank account. To top-up a platform account balance, you must set the platform’s Treasury financial account as the platform’s default external `BankAccount` using the Stripe Dashboard as described in the [Adding funds to your platform balance](https://docs.stripe.com/connect/top-ups) guide.\n\nUnlike true external bank accounts, new `BankAccount` objects with Treasury financial account details are automatically verified upon creation so they don’t require verification with microdeposits.\n\nAfter you set the Treasury financial account as your platform’s default external bank account, use `POST /v1/topups` to create the top-up.\n\n`curl https://api.stripe.com/v1/topups \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=Top-up \\  -d statement_descriptor=Top-up`\n\nIf successful, the response returns the `Top-Up` object.\n\n`{   \"id\": \"{{TOP_UP_ID}}\",   \"object\": \"topup\",   \"amount\": 2000,   \"currency\": \"usd\",   \"description\": \"Top-up\",   ... }`\n\nLearn more about [adding funds to your platform account balance](https://docs.stripe.com/connect/top-ups) with Stripe Connect.",
    "title": "Payouts and top-ups from Stripe Payments | Stripe Documentation",
    "description": "Learn how to move money between Payments account balances and Treasury financial account balances.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects",
    "markdown": "# Working with SetupIntents, PaymentMethods, and BankAccounts\n\n## Learn how to set up money movements in Treasury.\n\nYou can use [PaymentMethod](https://docs.stripe.com/payments/payment-methods#payment-method-object) objects to save account credentials for a US-based bank account for future use. After creating the `PaymentMethod`, you can use the same object repeatedly to move funds into and out of a financial account. Depending on your use case, you can attach the `PaymentMethod` to either a [Customer](https://docs.stripe.com/api/customers) object or the Stripe account.\n\n*   Attach the `PaymentMethod` to a `Customer` object if you intend to use the payment method for an outbound payment to a third party.\n*   Attach the `PaymentMethod` to a connected account or platform account if you intend to use the payment method for an inbound transfer or outbound transfer between an external account that belongs to the same business as the Stripe account.\n\n#### Note\n\nThe `Customer` object defines a third-party entity that represents the owner of an external bank account.\n\nIf you previously collected customer payment details with Stripe using the [BankAccounts](https://docs.stripe.com/ach-deprecated) object, you can substitute the `BankAccount` for a `PaymentMethod` in those requests. For `InboundTransfers`, the `BankAccount` `status` value in this case must be `verified`. We recommend using `PaymentMethods` where possible to get the full suite of features.\n\nIn some cases, banks on the receiving end of ACH money movements notify Stripe that account information (such as account number or routing number) has changed. If we receive such a notification for an account associated with a `PaymentMethod` or `BankAccount` object, we automatically update the object. See the [ACH Notification of Change handling](https://docs.stripe.com/treasury/moving-money/notification-of-change) guide for more information.\n\n## Create a SetupIntent to save `us_bank_account` details ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[SetupIntents](https://docs.stripe.com/payments/setup-intents) enable you to set up a payment method to use with money movement endpoints of the Stripe API. Use `SetupIntents` to save customer or account credentials as a payment method and optimize them for the objects you intend to use it with. For example, when setting up a US bank account, it’s necessary to verify the bank account if you intend to debit that external account with an inbound transfer. Stripe updates the `SetupIntent` object throughout the setup process.\n\nThe following example demonstrates using a `SetupIntent` with a bank account that allows for bidirectional fund transfers. For complete details on how to set up a payment method for creating payments and bank account verification, see the [Save details for future payments with ACH Direct Debit](https://docs.stripe.com/payments/ach-debit/set-up-payment) guide. When setting up payment methods for managing financial account funds with `SetupIntents`, the following fields are the most relevant:\n\n*   [flow\\_directions](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-flow_directions): this array defines the directionality of the flows for a payment method. Its possible values are `inbound` and `outbound`, denoting whether the payment method can move funds into, out of, or both into and out of a financial account. You can also configure an existing payment method to become bidirectional.\n*   [attach\\_to\\_self](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-attach_to_self): a Boolean flag to indicate whether you want to attach this payment method to the in-context `Account` object. Set this value to true to create an account-attached payment method for managing this account’s own money movement flows such as inbound transfers and outbound transfers.\n*   [customer](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-confirm): ID of the `Customer` object the payment method is attached to on successful setup. You can use `Customer`\\-attached payment methods with outbound payments to send money to third parties and customers. You can also use them with Stripe Payments `PaymentIntents` to receive money. You must set the `attach_to_self` attribute to false or leave it blank when creating a customer-attached payment method.\n\n### Permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use a payment method for ‘inbound’ flow directions (such as `InboundTransfers`), you need [permission from the account holder](https://docs.stripe.com/payments/setup-intents#mandates). Creating this agreement (`Mandate` object) up front and associating it with the payment method allows you to charge the payment method later.\n\nAdd terms to your website or app that state how you plan to debit funds from external accounts, and let connected accounts opt in. At a minimum, make sure that your terms cover the following:\n\n*   Connected account permission for you to initiate a debit or a series of debits on their behalf\n*   The anticipated frequency of debits (one-time or recurring)\n*   How the debit amount is determined\n\nWhile you need a mandate to debit an external bank account in the US with inbound transfers, you don’t need it to send money to a bank account with outbound transfers or outbound payments.\n\n### Creating a SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a `SetupIntent`, you must either use an existing payment method with the `payment_method` parameter, or provide new credentials using the inline `payment_method_data` parameter.\n\nUse `POST /v1/setup_intents` to create a `SetupIntent`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `\n\nIf successful, the response returns the newly created `SetupIntent` object.\n\n`{   // ID of the Customer to attach the resulting PaymentMethod to   \"customer\": \"{{CUSTOMER_ID}}\",   \"attach_to_self\": false,   // Configure what direction of funds flows this PaymentMethod will support.   \"flow_directions\": [\"inbound\", \"outbound\"],  // US Bank Account credentials   \"payment_method_types\": [\"us_bank_account\"],   \"payment_method_data\": {     \"type\": \"us_bank_account\",`\n\nThe `SetupIntent` has one of the following statuses:\n\n| STATUS | DESCRIPTION | NEXT STEPS |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification isn’t necessary. | No action needed. |\n| `requires_action` | Further action needed to complete bank account verification. | See `next_action` for further setup steps. |\n\nAfter successfully confirming the `SetupIntent`, Stripe sends an email confirmation of the mandate and collected bank account details to your connected account. The default email references Stripe Payments, so if you use Stripe Treasury without Stripe Payments, you might want to turn off Stripe emails and send [custom messages](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) instead.",
    "title": "Working with SetupIntents, PaymentMethods, and BankAccounts | Stripe Documentation",
    "description": "Learn how to set up money movements in Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions",
    "markdown": "# Working with balances and transactions\n\n## Learn about Treasury account balances and the effect transactions have on them.\n\n[Financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) have their own balance separate from the balance of the account they’re attached to (platform account or connected account). `Balance` objects record the amount of funds in a financial account and their state of availability. `Transaction` and `TransactionEntry` objects debit or credit the funds in that balance.\n\n## Balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA financial account has a balance of funds. The sum total of the balance isn’t always available for spending, however, as it might include pending transactions into or out of the financial account. The financial account balance contains three properties that define the availability of its funds:\n\n*   `cash`—funds the user can spend right now.\n*   `inbound_pending`—funds not spendable yet, but that will become available at a later time. The `inbound_pending` property is reserved for future functionality and always has a value of 0.\n*   `outbound_pending`—funds in the account, but not spendable because they’re being held for pending outbound flows.\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}` to retrieve the balance details of a financial account with the associated ID. Provide the `Stripe-Account` header if the financial account is attached to one of your connected accounts. If the financial account is attached to your platform account, don’t include the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response is a [`FinancialAccount`](https://docs.stripe.com/api/treasury/financial_accounts) object with a `balance` hash that details the funds and their availability.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     // $90 is currently available for use,     // with an additional $10 held in the outbound_pending sub-balance     \"cash\": {\"usd\": 9000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   } }`\n\n### Negative balances and overdrafts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs stated in our [custodial account agreement](https://stripe.com/treasury-connect-account/legal), Stripe doesn’t yet offer an overdraft feature on financial accounts. If your balance is insufficient to cover a transaction, Stripe rejects the transaction where possible. Otherwise, the account moves to a negative balance, which you then need to remediate.\n\nFor example, if your financial account balance is less than 100 USD, a 100 USD issuing authorization fails due to insufficient funds because Stripe recognizes the attempted overcharge. However, if your account balance is 50 USD and you pay for a 50 USD meal, then add a 15 USD tip after the initial authorization, the issuing authorization succeeds. Stripe authorizes the charge because the overcharge amount isn’t known. As a result, the 65 USD issuing [over capture](https://docs.stripe.com/issuing/purchases/transactions?issuing-capture-type=over_capture) succeeds and results in a negative 15 USD available balance. You must then add funds to your financial account to avoid subsequent transactions being denied with insufficient funds.\n\nIf a connected account on your platform has a financial account with a negative balance and doesn’t add funds to it, you’re responsible for covering the negative amount.\n\nStripe emails you a monthly reminder if your platform has any associated financial accounts that have had negative balances for more than 15 days. However, you need to regularly monitor account balances and take remediation steps as soon as possible when a balance goes negative. Don’t wait for the reminder email to address a negative balance.\n\n#### Note\n\nYou can have Treasury financial accounts cover negative payment balances for connected accounts using automatic debits. For more information, see the [Negative balances on accounts section](https://docs.stripe.com/connect/risk-management/best-practices#negative-balances-on-accounts) of the risk management best practices.\n\n## Transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll changes to a balance have a corresponding [Transaction](https://docs.stripe.com/api/treasury/transactions) object that details money movements. Transactions affect only one balance and are in only one currency (currently, Stripe Treasury supports only USD).\n\nEach transaction points to the balance-affecting money movement object, such as an [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers), [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits), or [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits).\n\n### Transaction state machine![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Status | State applied | Description | Transitions to |\n| --- | --- | --- | --- |\n| `open` | initial | This is the initial state for all transactions. The transaction results in updates to the sub-balance amounts, but the current balance isn’t affected until the transaction posts. | `posted` or `void` |\n| `posted` | terminal | Funds have successfully entered or left the account. The current balance was affected. | N/A |\n| `void` | terminal | The transaction never impacted the balance. For example, a transaction enters this state if an outbound payment was initiated but then canceled before the funds left the account. | N/A |\n\nThe available `Transaction` endpoints enable you to retrieve specific transactions and list or filter transactions affecting a financial account. There are no webhooks available for transactions, but webhooks are available for the associated money movement objects (for example, `OutboundPayments`).\n\n## Retrieve a transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET/v1/treasury/transactions/{{TRANSACTION_ID}}` to retrieve the transaction with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/transactions/txn_123 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `Transaction` object.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{Timestamp}}\",   \"livemode\": false,   // The FinancialAccount this Transaction impacts   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The flow responsible for this Transaction. Each Transaction is created   // synchronously (that is, in the same API request for initiated objects) with   // its flow.`\n\n### List Transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transactions` to list transactions for a financial account. Set the required `financial_account` parameter in the body to the value of the financial account ID to retrieve transactions for. Include additional parameters to filter the results returned.\n\nIn addition to the [standard set of list parameters](https://docs.stripe.com/api/pagination), you can filter transactions by the following.\n\n*   `status`\n*   `flow`\n*   Either `created` or `posted_at`, but not both\n\n``{   // Standard list parameters   limit, starting_after, ending_before,   // Filter by FinancialAccount, required   financial_account: \"{{FINANCIAL_ACCOUNT_ID}}\"   // Filter by status   status: \"open\" | \"posted\" | \"void\",   // Filter by flow   flow: \"{{FLOW_OBJECT_ID}}\",   // Order the results by the created or posted_at timestamps, default is `created`.   // For order_by=posted_at, setting status='posted' is required   order_by: \"created\" | \"posted_at\",   // created can only be specified with order_by = 'created'   created: {gt, gte, lt, lte},   status_transitions: {     // status_transitions.posted_at can only be specified with order_by = 'posted_at' and status = 'posted'     posted_at: {gt, gte, lt, lte}   } }``\n\nThe following request retrieves the three most recent transactions created on the financial account that have a `status` of `posted`.\n\n`curl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=3 \\  -d status=posted \\  -d order_by=created`\n\n### Webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are no webhooks for transactions because the various money movements that initiate a transaction have their own webhooks.\n\n## Transaction entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries) objects are the most granular view of money movements that affect a financial account balance. A single flow of money comprises multiple individual money movements, each represented by a transaction. Transactions, in turn, are an aggregation of transaction entries. For example, when initiating an outbound payment of 10 USD at time T, funds are moved from the `cash` sub-balance to the `outbound_pending` sub-balance. The following `Transaction` object response demonstrates this initial event.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"open\",   \"amount\": -1000,   \"currency\": \"usd\",`\n\nAfter the outbound payment posts at time T+1, the funds are deducted from `outbound_pending` and a new transaction entry is added to the transaction. The following `Transaction` response demonstrates this progression.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"posted\",   \"amount\": -1000,   \"currency\": \"usd\",`\n\nAs the preceding responses show, a transaction can contain multiple transaction entries. The available `TransactionEntry` endpoints enable you to retrieve specific transaction entries and list or filter them for a particular transaction.\n\nA `Transaction` in the `void` status won’t have any new transaction entries added to it. A `Transaction` in the `posted` status where all `balance_impact` is to the `cash` sub-balance won’t have any new transaction entries added to it, either.\n\n### Retrieve transaction entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transaction_entries/{{TRANSACTIONENTRY_ID}}` to retrieve details for the transaction entry with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/transaction_entries/{{TRANSACTION_ENTRY_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns a `TransactionEntry` object with the following form.\n\n`{   \"id\": \"{{TRANSACTION_ENTRY_ID}}\",   \"object\": \"treasury.transaction_entry\",   \"created\": \"{{Timestamp}}\",   \"livemode\": false,   // The FinancialAccount this transaction entry impacts.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The transaction that this transaction entry belongs to.   \"transaction\": \"{{TRANSACTION_ID}}\",   // The flow responsible for this transaction entry.`\n\n### List TransactionEntries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transaction_entries` to list the transaction entries for a financial account. Set the required `financial_account` parameter in the body to the value of the financial account ID to retrieve transaction entries for. Include additional parameters if you want to filter the list.\n\nIn addition to the [standard set of list parameters](https://docs.stripe.com/api/pagination), you can filter transaction entries by:\n\n*   `transaction`\n*   Either `created` or `effective_at`, but not both\n\n``{   // Standard list parameters   limit, starting_after, ending_before,   // Filter by FinancialAccount, required   financial_account: \"fa_123\"   // Filter by transaction   transaction: 'trxn_123',   // Order the results by the created or effective_at timestamps, default is `created`.   order_by: \"created\" | \"effective_at\",   // created can only be specified with order_by = 'created'   created: {gt, gte, lt, lte},   // effective_at can only be specified with order_by = 'effective_at'   effective_at: {gt, gte, lt, lte}, }``\n\nThe following request retrieves the transaction entries created before `{{Timestamp}}` and orders them by `created` date.\n\n`curl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d order_by=created \\  -d \"created[lt]\"=1234567890`\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are no webhooks for transaction entries because the various money movements that initiate a transaction entry have their own webhooks.",
    "title": "Working with balances and transactions | Stripe Documentation",
    "description": "Learn about Treasury account balances and the effect transactions have on them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts",
    "markdown": "# Moving money out of Treasury financial accounts\n\n## Learn the requests available to move money out of financial accounts.\n\nYou can use a number of methods to move funds from a Treasury financial account to another account (either an external account or another Treasury financial account):\n\n*   Originate an `OutboundPayment` to move money to a third party’s external account or financial account through ACH, wire transfer, or the Stripe network.\n*   Originate an `OutboundTransfer` to move money to an external account belonging to the same connected account through ACH or wire transfer.\n*   Initiate a card transaction through Stripe Issuing to send money using card networks.\n*   Receive a `ReceivedDebit` (initiated by the owner of an external account) to pull money from the financial account through ACH.\n\n### Money movement with PaymentMethods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWithin Stripe, you can save payment method information using a [PaymentMethod](https://docs.stripe.com/api/payment_methods) object. You might use `PaymentMethods` to save your vendors’ account data so you don’t have to re-enter and collect their information for every payment you make to them.\n\nYou can attach `PaymentMethods` containing bank account information to a customer (for sending money to a third party) or to a Stripe account (for sending money to a company’s own external bank account). In both cases, you create the `PaymentMethod` using [SetupIntent](https://docs.stripe.com/payments/setup-intents) endpoints.\n\nThe type of Treasury requests you make with a `PaymentMethod` depends on how they’re attached:\n\n*   For customer-attached, use `PaymentIntent` and `OutboundPayment` requests.\n*   For account-attached, use `InboundTransfer` and `OutboundTransfer` requests.\n\nSee [Working with SetupIntents, PaymentMethods, and BankAccounts](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects) for more information.\n\n## Handling returned funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe destination for `OutboundTransfers` and `OutboundPayments` can reject the relative flow. For example, the destination address might not exist and the `OutboundTransfer` or `OutboundPayment` fails. This can occur over the `ach` and `us_domestic_wire` networks. `CreditReversals` can also return `OutboundPayments` over the `stripe` network. In the case of returned funds, the `OutboundTransfer` or `OutboundPayment` transitions to the `returned` status and Stripe creates a transaction to return the funds to the source financial account. Stripe also triggers a `treasury.outbound_transfer.returned` or `treasury.outbound_payment.returned` webhook.\n\n## Tracking outbound funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to track the status of an outbound transaction initiated from a financial account for several reasons. Examples of such situations include a payment that has been sent but not yet received, or a payment that appears to be arriving late. To help you in tracking `OutboundTransfers` and `OutboundPayments`, we provide network-specific tracking IDs for you to work with banks to track their status.\n\n### Tracking an ACH transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re sending funds over ACH rails, we recommend allowing up to three business days for the transaction to process as per the standard timeline. Anytime after the transaction is submitted to our partner bank, you can use the ACH trace ID to track the payment status, found in the `tracking_details[ach][trace_id]` field of the `OutboundTransfer` or `OutboundPayment` object. You can share this trace ID with the receiving bank to help identify potential issues.\n\n### Tracking a wire transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor domestic wire transfers, you can find the IMAD and OMAD fields in the `tracking_details[us_domestic_wire][imad]` and `tracking_details[us_domestic_wire][omad]` fields, respectively. You can share these IDs with the receiving bank for help tracking the status of a wire transfer.\n\nThe `tracking_details` field can populate anytime after the transaction is submitted to our partner bank and is no longer cancelable. Stripe also fires the `treasury.outbound_payment.tracking_details_updated` or `treasury.outbound_transfers.tracking_details_updated` webhook when there’s an update to the `tracking_details` field.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\n*   [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers)\n*   [Moving money with Treasury using ReceivedDebit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/received-debits)\n*   [Moving money with Treasury using DebitReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals)\n*   [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards)",
    "title": "Moving money out of Treasury financial accounts | Stripe Documentation",
    "description": "Learn the requests available to move money out of financial accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/money-movement/timelines",
    "markdown": "# Money movement timelines | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the timelines for various types of money movement in Treasury.\n\nStripe Treasury integrates with banking partners and payment networks, which have varying processing and cutoff times.\n\n## OutboundPayment and OutboundTransfer transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | `OutboundPayment` and `OutboundTransfer` requests processed before the cutoff time are submitted to our banking partner on the same day. These transfers are expected to arrive at the receiving bank within the next one to two business days. Same-day ACH transactions arrive at the receiving bank the same business day if the request is received before the cutoff time. |\n| `us_domestic_wire` | `OutboundPayment` and `OutboundTransfer` requests processed before the cutoff are expected to arrive at the receiving bank on the same business day. |\n| `stripe` | `OutboundPayment` requests using the `stripe` network post immediately and arrive at the receiving financial account within minutes, both during and outside of business hours. `OutboundTransfer` requests aren’t supported for `stripe` network transactions. |\n\n### Evolve Bank & Trust ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   `ach` cutoff:\n    *   Default Speed: 6pm central time (CST/CDT)\n    *   Same Day speed: 11am central time (CST/CDT)\n*   `us_domestic_wire` cutoff: 3pm central time (CST/CDT)\n\n| Submission date | Arrival date (by end of business day) |     |\n| --- | --- | --- |\n|     | ACH | Wire |\n| Monday | Tuesday | Monday |\n| Tuesday | Wednesday | Tuesday |\n| Wednesday | Thursday | Wednesday |\n| Thursday | Friday | Thursday |\n| Friday | Monday | Friday |\n| Saturday | Tuesday | Monday |\n| Sunday | Tuesday | Monday |\n\nYou can programmatically access the `expected_arrival_date` attribute on [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/object#outbound_payment_object-expected_arrival_date) or [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/object#outbound_transfer_object-expected_arrival_date) to reference when Stripe expects the funds to arrive at their destination.\n\nRequests, including default speed requests, that are received after the cutoff time are processed the following business day. Same-day ACH requests received after the cutoff time arrive by the end of the following business day.\n\n## InboundTransfer transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | `InboundTransfer` If using the default speed, `InboundTransfer` requests processed before the cutoff time are submitted to our banking partner on the same business day. Otherwise, they’re submitted on the following business day. Transfers are expected to arrive in the Treasury financial account on the morning of the fourth business day after submission to the banking partner, if no returns are received during that time. |\n\n### Evolve Bank & Trust ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Submission date, before 6pm central time (CST/CDT) | Available at approximately 10am central time (CST/CDT) |\n| --- | --- |\n| Monday | Friday |\n| Tuesday | Monday |\n| Wednesday | Tuesday |\n| Thursday | Wednesday |\n| Friday | Thursday |\n| Saturday | Friday |\n| Sunday | Friday |\n\n## ReceivedCredit and ReceivedDebit transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredits and debits initiated from outside Stripe and received on a financial account are processed as soon as Stripe receives notification of the transfer. The time it takes to complete the transfer depends on the originating institution.\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | Available same day or next business day, depending on originating institution. |\n| `us_domestic_wire` | Depends on originating institution. |\n| `stripe` | Transfers using the `stripe` network post immediately and are expected to arrive at the receiving financial account within minutes. |\n| `card` | Card transactions are typically captured within 24 hours of authorization approval; however, some companies can capture funds up to 30 days after authorization. See [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions). |\n\n## Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll platforms using Treasury have access to standard automatic payouts, which move money from Stripe Payments to a Treasury financial account on a T+2 or slower schedule from the time of transaction (T+2 for card payments, slower for ACH).\n\nYou can request a platform risk review to access faster payouts; upon approval, your platform can use T+1 and T+0 automatic payouts for connected accounts. T+1 and T+0 faster payout schedules apply to all payment types, including both card payments and ACH payments, and the timelines start when the transaction occurs (faster payouts eliminate the need to wait for standard payments fund settlement times).\n\nTo request access to faster payouts for your platform, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nFor more details, see the [Automatic payouts guide](https://docs.stripe.com/treasury/moving-money/payouts#automatic-payouts).\n\n## Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms using Treasury also have access to standard manual payouts, which move funds in one business day (T+1 schedule) but can only draw on an account’s `available` payments balance. In other words, you must wait for funds from a payment to settle in the payments balance before initiating a standard manual payout to a Treasury financial account.\n\nPlatforms granted access to faster payouts also have access to instant manual payouts. Instant manual payouts move funds to a connected account’s financial account within an hour (T+0 schedule) and are available any time, including nights, weekends, and holidays. Instant manual payouts are drawn on a connected account’s `instant_available` balance rather than being limited to the `available` balance.\n\nFor more details, see the [Manual payouts guide](https://docs.stripe.com/treasury/moving-money/payouts#manual-payouts).\n\n## Top-ups![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe [Connect](https://docs.stripe.com/connect \"Connect\") platform users can top up their existing Stripe platform account balance using a Stripe Treasury financial account by verifying the routing and account numbers. These funds settle to your account balance according to [Top-ups settlement timing](https://docs.stripe.com/connect/top-ups#settlement-timing).\n\nFor more details, see [Adding funds to your platform balance](https://docs.stripe.com/connect/top-ups).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money out of financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts)\n*   [Moving money into financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts)\n*   [Payouts](https://docs.stripe.com/treasury/moving-money/payouts)\n\n## Same-day ACH regulations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH transactions are regulated by [Nacha](https://www.nacha.org/content/how-ach-rules-are-made). Consider the following when using same-day ACH:\n\n*   Individual same-day ACH transactions [can’t exceed 1,000,000 USD](https://www.nacha.org/million). If you submit a larger single transaction for same-day processing, Stripe remits the funds for processing on the following day.\n*   The 1,000,000 USD limit applies only to single transactions. You can submit multiple smaller transactions that total more than 1,000,000 USD for same-day processing.\n\n#### Note\n\nACH operators monitor for attempts to evade the limit, such as by splitting a single large transaction into multiple smaller transactions. If they suspect an evasion attempt, they process those transactions for next-day settlement in the next available processing window.",
    "title": "Money movement timelines | Stripe Documentation",
    "description": "Learn about the timelines for various types of money movement in Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts",
    "markdown": "# Moving money into financial accounts\n\n## Learn the requests available to move money into financial accounts.\n\nYou can add money to your financial account using `InboundTransfer` and `ReceivedCredit` objects. In some scenarios, you can reverse `ReceivedCredits`, which creates a [CreditReversal object](https://docs.stripe.com/api/treasury/credit_reversals/object). For more information, see the [Moving money with Treasury using CreditReversal objects guide](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals).\n\nStripe Treasury also provides test mode objects to facilitate testing money flows into financial accounts. The test mode endpoint for creating a `ReceivedCredit`, for example, enables you to add money to your test mode financial account balance to begin experimenting with other money movement capabilities. The test mode endpoints for `InboundTransfers`, on the other hand, enable you to test effects of your other business logic when an `InboundTransfer` object transitions to a particular state.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers)\n*   [Moving money with Treasury using ReceivedCredit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits)\n*   [Moving money with Treasury using CreditReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals)",
    "title": "Moving money into financial accounts | Stripe Documentation",
    "description": "Learn the requests available to move money into financial accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/capital/eligibility",
    "markdown": "# Stripe Capital eligibility | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about our offer eligibility criteria.\n\nStripe determines your eligibility for a loan offer based on a variety of factors related to your Stripe account, including your processing volume and the size of your customer base.\n\nWe automatically review your business for loan offer eligibility on a daily basis. If you become eligible, you’ll receive an email and you can view your offer in the Dashboard under the [Capital tab](https://dashboard.stripe.com/capital).\n\nYou might see a banner in the Stripe Dashboard that indicates that you’re on track for a future offer. This isn’t a guarantee of a future offer or of specific terms and doesn’t reflect a credit decision or evaluation.\n\n## Minimum eligibility requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo qualify for a loan through Stripe Capital, your business must:\n\n*   **Be based in the US.** Stripe Capital only supports businesses located or incorporated in the US. Funding might not be available in certain states due to local rules and regulations.\n*   **Have processed payments on Stripe for 9 months or more.**\n*   **Have a processing volume of 5,000 USD minimum per year.**\n*   **Be in good standing with Stripe Capital.** If your business previously applied for a Capital loan and was rejected, you’re not eligible to receive a new loan offer for 30 days.\n*   **Certain geographic limitations may apply.**\n\n#### Note\n\nMeeting the minimum eligibility requirements doesn’t guarantee that your business qualifies for a Stripe Capital offer.\n\n## Important factors we consider![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the minimum requirements, our underwriting model evaluates many other characteristics of your business to determine eligibility. We’ve highlighted some key considerations:\n\n*   **A growing business.** How much you process through Stripe influences the size of your financing offer. Businesses with positive growth trajectories are more likely to be eligible for an offer.\n*   **A steady processing record.** A consistent, steady processing record with limited periods of low or zero volume shows stability in your business and increases your likelihood of qualifying for an offer.\n*   **A large customer base.** Businesses with more customers are more likely to be eligible for an offer.\n*   **A low dispute rate.** Businesses with low rates of unresolved chargebacks are more likely to qualify for funding.\n\n## Additional steps you can take![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe more information we can see about the health of your business, the better we can evaluate your eligibility for a Stripe loan.\n\n*   **Connect your business bank account.** Securely [linking your bank account](https://docs.stripe.com/get-started/account/linked-external-accounts) lets Stripe view your bank balances and transactions to better determine your eligibility for an offer.\n*   **Bring more processing volume onto Stripe.** Our underwriting model is based on the payment volume that you process on Stripe. Shifting transaction volume from other payment sources onto Stripe increases your overall Stripe processing volume and improves your likelihood of receiving an offer.",
    "title": "Stripe Capital eligibility | Stripe Documentation",
    "description": "Learn more about our offer eligibility criteria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/linked-external-accounts",
    "markdown": "# Linked external accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your linked external accounts.\n\nWhen you first set up your Stripe account, we ask you to connect your bank account so that you can receive payouts. If you want Stripe to access additional account information, you can link a financial account. This allows Stripe to better serve your business needs and provide necessary information for credit and risk reviews. Linking your account also reduces the need for us to collect additional financial information in the future, potentially reducing the frequency of credit and other risk reviews.\n\nStripe might use your financial account information to:\n\n*   Link your financial account for [payouts](https://docs.stripe.com/payouts \"payout\").\n*   Evaluate eligibility for loans or other Stripe products.\n*   Enable additional Stripe product features.\n*   Re-evaluate reserve balances during risk reviews.\n\n## Financial account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith your consent, we can access your linked account to retrieve the following information:\n\n*   **Account details**: Account type, account number, current balance, and historical balances.\n*   **Contact information**: Your name, email address, phone number, physical address, and other details held by your financial account.\n*   **Account transactions**: Each transaction’s amount, date, and description.\n\nHere are a few Stripe products and services that rely on your financial account information:\n\n*   **Payouts**: Stripe uses your financial account information (specifically, the account number and routing number) to verify your account to enable [payouts](https://docs.stripe.com/payouts). You can link this account during onboarding, or at a later time by using your **Linked external accounts** settings in the Stripe Dashboard.\n*   **Risk**: We analyze your financial account information to ascertain if a [reserve](https://support.stripe.com/topics/reserves) is required, and decide the appropriate amount for that reserve. Linking your financial account allows Stripe to continually reassess your risk profile, which could help reduce or eliminate the need for a reserve.\n*   **Corporate Card**: We use your financial account information during the underwriting process to determine your [Corporate Card](https://docs.stripe.com/issuing) credit limit. This limit can vary based on changes in your financial account information. If you unlink a financial account, it might affect your ability to use your Corporate Card.\n*   **Capital**: [Stripe Capital](https://docs.stripe.com/capital/eligibility) uses your financial account information to evaluate your loan eligibility and the details of your loan offer.\n\nThe type of data available to Stripe might vary based on your financial account or our technology partner. Go to your [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) to see the accounts you’ve linked to Stripe and what information you’ve shared with different Stripe products.\n\n#### Note\n\nWe have organizational, technical, and administrative measures in place to protect your financial account data from unauthorized access, destruction, loss, alteration, or misuse within our organization. Should you believe that your interaction with us is no longer secure (for instance, if you feel that the security of your account has been compromised), please [contact us](https://support.stripe.com/contact) immediately.\n\n## Link a financial account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your Dashboard prompts you to **Link your bank account to Stripe**, follow these steps:\n\n1.  Click **Link bank account** in the **Link your bank account to Stripe** banner in your Dashboard.\n2.  Click **Link your account**.\n3.  Choose your bank account provider and enter your bank account login details.\n4.  Select all accounts or specific accounts (such as checking or savings accounts) and click **Link accounts**.\n5.  To add multiple bank accounts, click **Link another account**. If not, click **Done**.\n6.  You can verify the successful linking of bank accounts on the [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts).\n\nYou can also link your financial accounts directly from the Dashboard by following these steps:\n\n1.  Visit the [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) in your Dashboard.\n2.  Click **\\+ Add account**.\n3.  Choose your bank account provider and enter your bank account login credentials.\n4.  Select all or specific accounts (such as checking or savings accounts) and click **Link Accounts**.\n5.  To add multiple bank accounts, click **Link another account**. If not, click **Done**.\n6.  Check the **Linked external accounts** page to verify that the bank accounts were successfully linked.\n\n## Data management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can control which Stripe products use your account data. By default, when you link your financial accounts, this account data is shared with Stripe products as shown on the [Link external accounts settings](https://dashboard.stripe.com/settings/linked-accounts). From this page, you can control which Stripe products receive and use your data. You also have the option to opt out of sharing your financial account data, which might affect your ability to use certain products and features.\n\n### Data retrieval frequency ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHow often Stripe accesses your data depends on the products you use. For instance, when assessing a risk reserve on your account, we might access your financial account information as often as daily because understanding your business’s risk profile requires this information.\n\nFor the Corporate Card, we might monitor your financial account data daily to assess if a change in your credit limit is necessary. For other products, such as Capital, we might get your financial account data once a week or once a month.\n\n### Data retention duration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe retain your financial account information for as long as we’re providing services to you. We also keep this information to comply with our tax, accounting, and financial reporting obligations, to meet our contractual commitments to our financial partners, and where data retention is mandated by the payment methods we support. Even if you close your Stripe account, we might still need to retain your financial account information for a certain period following any limitation periods and record-keeping requirements imposed by applicable law.\n\n### Data sharing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use your financial account information as outlined in the [Stripe Privacy Policy](https://stripe.com/privacy). We only use your data for internal purposes, such as offering additional products, services, or features. Stripe doesn’t sell or rent your financial account information to marketers or unaffiliated third parties. We might share your data with trusted entities (like service providers, business partners, third parties authorized by you to access this information, and for compliance purposes) as stated in our privacy policy.\n\n### Revoke consent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAt any time, you can revoke your consent by visiting your [Link external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) and clicking **Remove account** on any account you want to unlink. After you revoke your consent, we stop obtaining your account data. You can learn more about what happens when you [disconnect an account](https://support.stripe.com/questions/what-happens-when-i-disconnect-a-linked-financial-account).\n\nChoosing not to link a financial account, or unlinking one, might make you ineligible to access or receive offers for additional products or services, enhancements to current products, or services. In some cases, we might request alternative information, such as financial statements.\n\n## Trusted entity identification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you link a financial account with Stripe, we become the primary recipient of your account data. Depending on the purpose for linking your account, we may also share this data with certain financial institutions or service providers involved in offering Stripe Capital and other financial services. For example, if you obtain a loan through Stripe Capital, we might share your account data with service providers that help manage your loan. Stripe only shares your data as set out in the [Stripe Privacy Policy](https://stripe.com/privacy).\n\n## Stripe’s technology partners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe work with third-party data aggregators, namely Finicity and MX, to obtain the data you’ve agreed to share with us and other reliable entities. When you enter your login credentials in the credential dialog, you might be sharing this information with Finicity and MX, or otherwise allowing these third-party data aggregators access to your accounts. Finicity and MX use your login details or your authorization to continually access your account data and provide this data to Stripe and other trusted entities authorized by you to receive it.",
    "title": "Linked external accounts | Stripe Documentation",
    "description": "Manage your linked external accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct",
    "markdown": "# Connect integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build your integration based on choices for onboarding, dashboards, and charges types.\n\nUse this guide to explore different Connect integrations, make choices, and access a personalized integration guide. Before starting your integration in test mode, you must:\n\n*   Create a Stripe Account\n*   Begin filling out your platform profile\n\n## Select properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create and onboard accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe enables you to create accounts on behalf of users, called connected accounts. When using Connect, you create connected accounts for each user that receives money on your platform.\n\nBuild out each aspect of the onboarding flow by calling the corresponding Stripe APIs. You need to build custom logic in your integration to satisfy all required verification information.\n\nBest for when you want to have full control over the onboarding flow:\n\n*   Build and maintain all onboarding flow logic yourself. Can be resource intensive and expensive to build.\n*   You manage risk with full responsibility for negative balance liabilities on connected accounts.\n*   You must keep your flows up to date as verification requirements change, and also build additional flows to communicate and collect such requirements from your users. Review and update onboarding requirements at least every six months to make sure you build the latest requirements into your flow.\n*   You must build a custom form to collect bank accounts or debit cards so that connected accounts can be set up with a payout account.\n\n### Set up dashboard flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts need access to a dashboard to manage their account. Provide connected accounts with access to the Stripe Dashboard, the Express Dashboard, or a dashboard built using the Stripe API and embedded components.\n\nCreate a dashboard using Stripe APIs or embedded components to enable connected accounts to manage their account.\n\nConnected accounts won’t have access to the Stripe Dashboard or Express Dashboard. It’s up to you to provide access to these workflows by building your user’s dashboard, refunds, disputes workflows and reporting functionality. Your users might not realize that they have a Stripe account through your platform.\n\nWe recommend integrating [embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) to add dashboard functionality to your platform application with a low integration effort. Embedded components are highly themable and can support connected accounts with:\n\n*   Payments workflows such as viewing payments and payouts, managing refunds and responding to disputes\n*   Payout workflows such as managing payout schedules, creating manual payouts or updating payout accounts\n*   Reporting workflows to download and export payments and payouts\n*   Account management workflows such as updating business information\n\n### Accept a payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou create a charge to accept a payment from a customer on behalf of your connected account. The type of charge you create:\n\n*   Determines how payment funds are split among all parties involved\n*   Impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s)\n*   Determines which account Stripe debits for refunds and chargebacks\n\nA direct charge is a customer payment made directly to a connected account. Customers directly transact with your connected account, often unaware of your platform’s existence.\n\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n\n### Stripe fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe collects Stripe fees from your platform account, inclusive of processing fees. You control the processing fee amounts you bill connected accounts. Use the application fee parameter to collect processing fees from your connected accounts.\n\n### Pay out users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the funds from the payment settle and your user’s connected account has a positive Stripe balance, you can pay out those funds to their external account.\n\nIf you onboard users in your own flow using the Stripe API, you must also collect bank accounts or debit cards to set up your connected accounts with a payout account. When you’ve collected the user’s information for the payout account, attach it as an external account. Payouts are blocked if your connected account doesn’t have a verified external account.\n\nBy default, Stripe pays out funds that have settled in your connected accounts’ balances on a daily rolling basis. If you prefer, you can configure different automatic payout schedules, trigger payouts manually instead of automatically, or pay out instantly.\n\n### Responsibility for negative balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNegative balance liability:\n\nYour platform is liable for losses incurred by negative balances on your connected accounts. Your platform is responsible for reviewing new connected accounts during onboarding and determining the risk profile of your users.\n\nRecommended for marketplaces that collect payments from buyers to payout sellers, or for advanced platforms that want full control over how risk and negative liabilities are managed on connected accounts:\n\n*   Your platform must monitor connected accounts for ongoing risk of loss.\n*   Your platform has to build flows to communicate and remediate connected accounts when you detect fraud or risk.\n*   You have both the operational team and the engineering resources to establish processes for managing ongoing risk of loss and preventing fraud.\n\nBefore creating accounts with this setup, carefully consider and acknowledge your platform responsibilities for negative balance liabilities.\n\n## Your personalized guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis list of steps is customized based on your choices above. Use it to get started building your integration.\n\n*   Create connected accounts and collect requirements using the Stripe API. [Learn more](https://docs.stripe.com/connect/api-onboarding)\n    \n\n*   Create direct charges. Your platform will pay Stripe fees and can collect revenue using application fees. [Learn more](https://docs.stripe.com/connect/charges)\n    \n\n*   Build a dashboard yourself using the Stripe API or use embedded components. [Learn more](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n    \n\n*   Build tools and processes to manage negative balance liabilities on your connected accounts. [Learn more](https://docs.stripe.com/connect/risk-management)\n    \n\n*   Handle ongoing changes in requirements for your connected accounts using the Stripe API. [Learn more](https://docs.stripe.com/connect/required-verification-information)\n    \n\n*   Manage bank accounts and debit cards using Stripe Financial Connections or the Stripe API, then pay out your connected accounts.\n    \n\nOnboarding\n\nDashboard access\n\nCharge type\n\nWho pays Stripe fees\n\nNegative balance liability",
    "title": "Connect integration guide | Stripe Documentation",
    "description": "Build your integration based on choices for onboarding, dashboards, and charges types.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links",
    "markdown": "# Payment Links | Stripe DocumentationThe Stripe Docs logo\n\n## Sell online without building a digital storefront.\n\nAccept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.\n\nPayment Links supports [20+ payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support)—including credit and debit cards, Apple Pay, and Google Pay. The Payment Link automatically matches your customer’s preferred browser language for [30+ languages](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links). If you don’t have a Stripe account, [sign up now](https://dashboard.stripe.com/register/payment_links).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Explore advanced options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Compare Invoicing and Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoicing and Payment Links are two of the easiest ways to start accepting payments with Stripe without writing any code. Use the following table to compare the two products, and to understand which works best for your use case:\n\n| **Product** | **Invoicing** | **Payment Links** |\n| --- | --- | --- |\n| **Description** | Use [invoices](https://dashboard.stripe.com/invoices) to collect one-time or recurring payments from a specific customer. | Use [Payment Links](https://dashboard.stripe.com/payment-links) to sell a product, a subscription, or accept a donation. |\n| **Customer** | *   Specific individuals or businesses<br>*   You can’t reuse invoices, but you can duplicate them and edit the details for another customer. | *   Anyone with the link<br>*   Reuse multiple times with multiple customers, or limit the number of purchases. |\n| **Integration effort** | No coding | No coding |\n| **Stripe-hosted payment page** |     |     |\n| **Sharing options** | *   You can [email from the Dashboard](https://docs.stripe.com/invoicing/dashboard#create-invoice).<br>*   Copy the [invoice link](https://docs.stripe.com/invoicing/hosted-invoice-page#email-links) to share over email or SMS.<br>*   [Send a PDF](https://docs.stripe.com/invoicing/hosted-invoice-page).<br>*   [Auto-charge](https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard) the payment method on file. | *   [Show a QR code](https://docs.stripe.com/payment-links/share#create-qr-code).<br>*   [Copy the link](https://docs.stripe.com/payment-links/share#share-online) to share it over email, SMS, or social media.<br>*   Add a [buy button](https://docs.stripe.com/payment-links/buy-button) to your website. |\n| **UI customization** | Editable template1 | Limited customization2 |\n| **Payment methods** | *   Choose from over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods).<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. | *   [Dynamically display](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods)3.<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. |\n| **[Stripe Tax](https://docs.stripe.com/tax) support** |     |     |\n| **Preferred language support** | *   Over 30 languages<br>*   Set the Dashboard [language preference](https://docs.stripe.com/invoicing/customize#customer-language) for each customer. | *   Over 30 languages<br>*   Match the [browser language setting](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links) for each customer, or set the language with a URL parameter. |\n| **Recurring payments** | Use Stripe Billing to send a subscription or recurring invoice. [No-code subscriptions](https://dashboard.stripe.com/subscriptions?create=subscription) are available | Create a payment link for a subscription. |\n| **Collection tools** | [Automatic collection](https://docs.stripe.com/invoicing/automatic-collection) features, including Smart Retries and reminder emails are available. | [Revenue recovery](https://docs.stripe.com/billing/revenue-recovery) features, including Smart Retries and reminder emails are available for subscription payment links. |\n| **Reconciliation** | Auto-reconciliation of bank payments | Simple reconciliation by using URL parameters |\n| **Customers can choose what to pay** |     |     |\n| **Collect partial payments or set up payment plans** |     |     |\n| **Customers can edit quantities** |     |     |\n| **Coupons or discounts** |     |     |\n| **Send a quote or estimate and convert it to an invoice once finalized** |     |     |\n| **Upsells and cross-sells** |     |     |\n| **PCI compliance handling** | 4   |     |\n\n1 Use the [editable template](https://docs.stripe.com/invoicing/customize) to incorporate your own icons, brand colors, payment terms, page sizes, as well as memo and footer fields.  \n2 With [limited customization](https://docs.stripe.com/payment-links/customize), you can access 20 preset fonts, three predefined border radiuses, and options for adjusting your logo, background, product images, and the color of your own button.  \n3 Dynamic payment methods filter for eligibility, displaying the most relevant payment methods to maximize conversion. Payment method availability [varies by product](https://docs.stripe.com/payments/payment-methods/integration-options#product-support).  \n4 See the best practices for [globally compliant invoices](https://docs.stripe.com/invoicing/global-invoicing).",
    "title": "Payment Links | Stripe Documentation",
    "description": "Accept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/upgrades",
    "markdown": "# Upgrade your integration | Stripe DocumentationThe Stripe Docs logo\n\n## Increase conversion and get access to new features by upgrading your integration.\n\nDiscover the recommended options for upgrading both your entire payments integration, and individual features. For a comprehensive list of changes to the API, see [API upgrades](https://docs.stripe.com/upgrades).\n\n## Payment integration upgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTake advantage of new features by upgrading your existing integration.\n\n| Legacy integration | Recommended integration | Why you should upgrade | Upgrade path |\n| --- | --- | --- | --- |\n| [Card Element](https://docs.stripe.com/payments/payment-card-element-comparison) | [Payment Element](https://docs.stripe.com/payments/payment-element) | *   Use a single UI component to present over 100 payment methods and build a customizable checkout.<br>*   Access the latest compatible features.<br>*   Have Stripe handle the presentment logic using various factors, such as location, currency, and success metrics.<br>*   Customize payment method preferences in the Dashboard. | [Migrate to the Payment Element](https://docs.stripe.com/payments/payment-element/migration) |\n| Legacy Checkout | *   [Checkout](https://docs.stripe.com/payments/checkout/how-checkout-works)<br>*   [Payment Links](https://docs.stripe.com/payment-links) | *   Checkout:<br>    <br>    *   Checkout offers a prebuilt payment form to securely accept online payments.<br>    *   Embed Checkout on your site or redirect to a Stripe-hosted Checkout page.<br>    *   Checkout gives you access to additional features, such as [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) and [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).<br>*   Payment Links:<br>    <br>    *   Accept a payment or sell subscriptions without building additional standalone websites or applications.<br>    *   Share a link as many times as you want on social media, in emails, or on your website.<br>    *   Access [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) from the Dashboard. | [Migrate to Checkout](https://docs.stripe.com/payments/checkout/migration) |\n| [Client-only Checkout](https://docs.stripe.com/payments/checkout/client) | *   [Create a payment link](https://docs.stripe.com/payment-links/create)<br>*   [Create an embeddable buy button](https://docs.stripe.com/payment-links/buy-button)<br>*   [Embed a pricing table](https://docs.stripe.com/payments/checkout/pricing-table) | *   Start accepting payments without writing any code.<br>*   Replace your existing integration by adding a buy button or pricing table onto your website with a simple script tag, or use payment links that you can present to your customers. | [Migrate to a no-code solution](https://docs.stripe.com/no-code/get-started#get-retain-subscribers) |\n| [Payment request button](https://docs.stripe.com/stripe-js/elements/payment-request-button) | [Express checkout element](https://docs.stripe.com/elements/express-checkout-element) | *   Accept additional payment method options, such as [Apple pay](https://docs.stripe.com/apple-pay), [Amazon Pay](https://docs.stripe.com/payments/amazon-pay), [Google Pay](https://docs.stripe.com/google-pay), [Link](https://docs.stripe.com/payments/link), and [PayPal](https://docs.stripe.com/payments/paypal).<br>*   Display multiple payment method buttons at the same time.<br>*   For more details, see the [Express Checkout Element comparison guide](https://docs.stripe.com/elements/express-checkout-element/comparison). | [Migrate to the Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element/migration) |\n\n## Feature upgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend upgrading these features to enhance your checkout process.",
    "title": "Upgrade your integration | Stripe Documentation",
    "description": "Increase conversion and get access to new features by upgrading your integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/account-management/connected-accounts",
    "markdown": "# Working with connected accounts in Treasury\n\n## Learn how to work with connected accounts in Treasury.\n\nTo use Stripe Treasury, your platform must have a Stripe [Connect](https://docs.stripe.com/connect \"Connect\") integration. Stripe Connect enables a platform to provide connected accounts to sellers and service providers. For an overview of how connected accounts fit into the Stripe Treasury account structure, see the [Stripe Treasury accounts structure](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) guide.\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\nConnected accounts require specific capabilities enabled on the account to use features of Treasury. Different features require different capabilities, which might require additional information about your connected account owners. The `treasury` capability, for example, is a requirement on connected accounts for Treasury access. When you request `treasury` for an account, additional fields become required for that connected account before the account can use Treasury.\n\nBefore you create connected accounts in live mode for your Treasury integration, we recommend you first create test connected accounts in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Test mode connected accounts can’t receive or send real money and can’t be used in live mode, but are otherwise identical in configuration and functionality.\n\n## Checking current connected account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform already has a Connect integration with connected accounts but are unsure of their type, you can use the Dashboard or API to retrieve this information.\n\nNavigate to the [Connected accounts page](https://dashboard.stripe.com/test/connect/accounts/overview) in the Dashboard. We list your connected accounts in a table format.\n\n![Table of connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/account-dashboard.f7c91e5c9e06a1ca68102ed2cbaaa8ce.png)\n\nConnected accounts\n\nTo find the account features, select an account in the table to open the detailed view, then click **Profile** > **Account information**.\n\n![Account details section of the dashboard displaying one account of type Custom.](https://b.stripecdn.com/docs-statics-srv/assets/account-information.22a76ce6f2d50771ebd78a0f21020fb3.png)\n\nAccount information\n\n## Create a new connected account with the `treasury` capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nThis guide demonstrates how to create a new connected account using the Stripe API for Treasury and isn’t exhaustive. For complete documentation on creating a connected account, including through hosted onboarding, see the [Connect integration guide](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct).\n\nUse `POST /v1/accounts` to create a new connected account. Request the following capabilities for the account, which are required to use Stripe Treasury:\n\n*   `transfers` (required for all connected accounts)\n*   `treasury`\n\n#### Note\n\nYou can update the account later to request these capabilities if you don’t do so when creating the account.\n\nIf you want to issue cards with Stripe Issuing to your connected account, you must request the `card_issuing` capability, as well. See the [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards) guide for more information.\n\nIf you want to use ACH to transfer funds to or from an external account, you must also request the `us_bank_account_ach_payments` capability.\n\nWith all the previous options included, the request resembles the following:\n\n`const account = await stripe.accounts.create({   country: 'US',   email: email,   capabilities: {     transfers: {requested: true},     treasury: {requested: true},     card_issuing: {requested: true},   },   controller: {     dashboard: {type: \"none\"},     losses: {payments: \"application\"},     requirement_collection: \"application\",     fees: {payer: \"application\"}   }, });`\n\nIf successful, the response you receive confirms the connected account and requested `capabilities`.\n\n`{   \"id\": \"acct_1234\",   \"object\": \"account\",   \"capabilities\": {     \"card_issuing\": \"inactive\", // Should be requested only for Stripe Issuing users.     \"treasury\": \"inactive\",     \"us_bank_account_ach_payments\": \"inactive\"   },   ... }`\n\nTo learn more about connected account capabilities, see the [Account capabilities](https://docs.stripe.com/connect/account-capabilities) guide for Connect.\n\n## Update a connected account to include the `treasury` capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you already have a connected account with `card_payments` enabled, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to update the account with the associated ID with a request for the `treasury` capability. The following request updates a connected account with a request for the `treasury` capability, and includes the optional capabilities of `card_issuing` and `us_bank_account_ach_payments`:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nUse `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to update connected account capabilities for connected accounts that already have a `FinancialAccount` assigned. See [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) or the [FinancialAccount object](https://docs.stripe.com/api/treasury/financial_accounts/object) API documentation for more information.\n\n## Onboard the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create an account, you must onboard the seller or service provider to the account for ownership. The [Account](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) object that represents the connected account has a `requirements` hash that contains `currently_due` [identity verification](https://docs.stripe.com/connect/handling-api-verification) requirements. The seller or service provider on your platform must provide the details itemized in the `requirements` hash to enable charges and [payouts](https://docs.stripe.com/payouts) on their connected account and enable all requested features of their financial account.\n\nYou have two options for onboarding connected account owners to Treasury: [hosted onboarding](https://docs.stripe.com/treasury/account-management/connected-accounts#using-hosted-onboarding) and [custom onboarding](https://docs.stripe.com/treasury/account-management/connected-accounts#using-custom-onboarding). We recommend hosted onboarding.\n\nIf you create an `Account` object in test mode and want to bypass onboarding requirements to test functionality, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to [provide test values](https://docs.stripe.com/connect/testing-verification) that fulfill all the requirements. The following request uses a previously created connected account to apply the required account details.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"tos_acceptance[date]\"=1547923073 \\  -d \"tos_acceptance[ip]\"=\"172.18.80.19\" \\  -d \"business_profile[mcc]\"=5045 \\   --data-urlencode \"business_profile[url]\"=\"[https://bestcookieco.com](https://bestcookieco.com/)\" \\  -d \"company[address][city]\"=Schenectady \\  -d \"company[address][line1]\"=\"123 State St\" \\  -d \"company[address][postal_code]\"=12345 \\  -d \"company[address][state]\"=NY \\  -d \"company[tax_id]\"=000000000 \\  -d \"company[name]\"=\"The Best Cookie Co\" \\  -d \"company[phone]\"=8888675309 \\  -d \"individual[first_name]\"=Jenny \\  -d \"individual[last_name]\"=Rosen`\n\n### Using hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Connect Onboarding to efficiently collect required information. That offloads the verification complexity from your platform to Stripe and collects the terms of the service agreement. Alternatively, you can write your own API requests for initial integration, but must monitor for changes to compliance requirements to keep your onboarding workflow current. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nBefore you can use Connect Onboarding, you must provide the name, color, and icon of your brand in the **Branding** section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect). Doing so customizes the visual appearance of the form that sellers and service providers interact with when onboarding to your platform.\n\nTo take advantage of Connect Onboarding, use `POST /v1/account_links` to create an `AccountLink` to provide to the seller or service provider who’s going to take ownership of the connected account:\n\n#### Warning\n\nFor security, don’t email, text, or otherwise send account link URLs directly to your user. Instead, redirect the authenticated user to the account link URL from within your platform’s application.\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\nThe response you receive includes the URL to provide to your user.\n\n### Using custom onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you prefer to build custom onboarding for your users, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` and `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}/persons/{{PERSON_ID}}` to update the relevant `Account` and `Person` objects with the required information.\n\nYou must also confirm that the connected account owner has read and agreed to the [Stripe Treasury Agreement](https://stripe.com/treasury-connect-account/legal). See [Handling verification with the API](https://docs.stripe.com/connect/handling-api-verification) for additional details on fulfilling onboarding requirements.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"company[name]\"=Homebox \\  -d \"company[address][line1]\"=\"123 Market St.\" \\  -d \"company[address][city]\"=\"San Francisco\" \\  -d \"company[address][state]\"=CA \\  -d \"company[address][postal_code]\"=94107 \\  -d \"company[address][country]\"=US`\n\n### Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe fields in the following table are required for Treasury users.\n\n| Entity type | At onboarding |\n| --- | --- |\n| Individual, Sole proprietorship | Entity details:<br><br>*   Business names (customer facing and legal)<br>*   Legal entity type<br>*   Business address<br>*   Business phone number<br>*   Product or service description<br>*   Industry or Merchant category code<br>*   Tax ID Number (SSN, ITIN, or EIN)<br>*   Treasury TOS acceptance<br>*   Stripe TOS acceptance<br><br>Owner details:<br><br>*   Legal name<br>*   Date of birth<br>*   Email address<br>*   Residential address<br>*   Full SSN, or ID document scan for non-US persons or if SSN can’t be verified<br>*   Title<br>*   Phone number |\n| Companies (LLCs, corporations, non-profits, partnerships, and so on) | Entity details:<br><br>*   Business names (customer facing and legal)<br>*   Legal entity type<br>*   Business address<br>*   Business phone number<br>*   Product or service description<br>*   Industry or Merchant category code<br>*   Tax ID Number (EIN)<br>*   Treasury TOS acceptance<br>*   Stripe TOS acceptance<br><br>Owner/representative details:<br><br>*   Legal name<br>*   Date of birth<br>*   Email address<br>*   Residential address<br>*   Phone number<br>*   Title<br>*   Percent ownership of company<br>*   Full SSN, or ID document scan for non-US persons or if SSN can’t be verified |\n\n### Completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connected account onboarding process is complete when you receive an `account.updated` [webhook](https://docs.stripe.com/webhooks) confirming the following fields on your connected account:\n\n``{   \"object\": {     \"object\": \"account\",     \"id\": \"acct_1234\",     \"capabilities\": {       \"treasury\": \"active\",       \"card_issuing\": \"active\", // Only appears if requesting the `card_issuing` capability.       \"us_bank_account_ach_payments\": \"active\", // Only appears if requesting the `us_bank_account_ach_payments` capability.     },     ...   } }``\n\nAccount onboarding latency when your platform’s bank partner is Evolve Bank & Trust is less than 5 minutes.\n\n### Updates to requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo adapt to changes in financial regulations, Stripe must occasionally update information collection requirements for Treasury. The `requirements.eventually_due` array on the `Account` object captures the updated information required by these regulation changes. Learn more about the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash.",
    "title": "Working with connected accounts in Treasury | Stripe Documentation",
    "description": "Learn how to work with connected accounts in Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/create",
    "markdown": "# Create a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Create a custom payment page without code.\n\nUse the [Stripe Dashboard](https://dashboard.stripe.com/payment-links/create) to create a payment link that you can [share](https://docs.stripe.com/payment-links/share) with your customers. Stripe redirects customers who open this link to a Stripe-hosted payment page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you begin, decide what pricing model works best for you:\n\n*   **Products or subscriptions**: Best for e-commerce or SaaS where you’re selling products for a fixed price.\n*   **Customers choose what to pay**: Best for donations, tipping, or pay-what-you-want. This pricing model currently doesn’t support recurring payments or recurring donations. Learn more about the requirements for [accepting tips or donations](https://support.stripe.com/questions/requirements-for-accepting-tips-or-donations).\n\nTo let your customers choose what to pay, create a payment link by completing the following steps:\n\n1.  In the Dashboard, open the [Payment Links](https://dashboard.stripe.com/payment-links/create/customer-chooses-pricing) page and click **New** (or click the plus sign () and select **Payment link**).\n2.  Fill out the payment details.\n3.  (Optional) Set a preset amount.\n4.  (Optional) Set minimum and maximum payment amounts. By default, the maximum payment amount is 10,000.00 USD. [Contact support](https://support.stripe.com/) to increase this limit.\n5.  Click **Create link**.\n\n## Payment Links on mobile ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re creating a product or subscription, use the [Stripe Dashboard iOS app](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-docs-plinks&mt=8) to create a payment link on your mobile device. In the app, go to **Payments** > **Payment Links** to create a payment link (or click the create icon () and select **Payment link**). The iOS app doesn’t currently support creating links where your customers choose how much to pay.\n\n## Configure payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe displays the most relevant and compatible payment methods to your customers, including Apple Pay and Google Pay. Stripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. Use the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) to enable or disable payment methods at any time. Learn more about [supported payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) and [different types of payment methods](https://stripe.com/guides/payment-methods-guide).\n\nYou can review what payment methods your customers see in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review) by entering a transaction ID or setting an order amount and currency.",
    "title": "Create a payment link | Stripe Documentation",
    "description": "Create a custom payment page without code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/share",
    "markdown": "# Share a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Share payment links across social media, emails, or your website.\n\nAfter you create a [payment link](https://docs.stripe.com/payment-links), share it with your customers to accept payments without a digital storefront.\n\nUse the Dashboard to copy your payment link, and share it online. Click the copy icon next to an existing link on the [Payment Links](https://dashboard.stripe.com/payment-links) page, or go to the payment link’s details page. You can share your payment link multiple times and anywhere online, including:\n\n*   Emails\n*   Text messages\n*   Social media platforms\n\n## Generate a QR code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a QR code for a payment link in the Dashboard. Choose an existing link from the **Payment Links** page, or [create a new link](https://dashboard.stripe.com/payment-links/create) and then click **QR code**. Copy or download a PNG image of the QR code.\n\nThe QR code doesn’t expire. If you deactivate the underlying payment link, the QR code redirects to an expiration page.\n\n## Embed a button on your site ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTurn your payment link into an embeddable buy button to sell a product or subscription from your website. Select an existing link from the **Payment Links** page or create a new link and then click **Buy button**. Copy the code and paste it into your website. To learn more on how to embed and customize a button, see [Create a buy button](https://docs.stripe.com/payment-links/buy-button).\n\n## Deactivate a link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard to deactivate a payment link. Click the overflow menu () to the right of the desired payment link, and then **Deactivate**. After you deactivate a link, customers are no longer able to make a purchase using it. You can choose to reactivate the payment link at any time. You can also use the [API](https://docs.stripe.com/payment-links/api#deactivate-link) to deactivate a payment link.",
    "title": "Share a payment link | Stripe Documentation",
    "description": "Share payment links across social media, emails, or your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/url-parameters",
    "markdown": "# Track a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Use URL parameters and UTM codes to track a payment link.\n\nModify your payment link with URL parameters and [Urchin Tracking Module (UTM)](https://en.wikipedia.org/wiki/UTM_parameters) codes to get insight into customer behaviors and your marketing strategy’s effectiveness. These tools help identify the source of your traffic and the marketing campaigns leading to the most conversions.\n\n## Track campaigns with UTM codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse UTM codes to track how customers find your site when they pay using your payment link. You can add the following UTM codes as parameters in the query string of your URL: `utm_source`, `utm_content`, `utm_medium`, `utm_term`, and `utm_campaign`.\n\n| Parameter | Description |\n| --- | --- |\n| `utm_source` | Identifies where the traffic originated (for example, a website name, social media, or a search engine). |\n| `utm_content` | Identifies what content your customer chooses. Use this parameter to distinguish between links that point to the same payment page. |\n| `utm_medium` | Identifies the marketing medium that accesses your payment link (for example, email, cost per click (cpc), or other methods). |\n| `utm_term` | Identifies specific search terms and keywords in your paid search ads. |\n| `utm_campaign` | Identifies your marketing campaigns using the payment link URL. |\n\nTo add UTM codes, specify `redirect` as your [confirmation behavior](https://docs.stripe.com/payment-links/post-payment#change-confirmation-behavior). When customers complete a payment, your redirect URL contains the UTM code parameters specified in your payment link URL. Here’s what a payment link looks like with an appended UTM codes: `https://buy.stripe.com/test_eVa5nPg1j1wmfXq5kr?utm_medium=earned_email&utm_source=marketo&utm_campaign=campaign_a`\n\n#### Caution\n\nConstruct UTM codes using alphanumeric characters, dashes, or underscores, ensuring they don’t exceed a 150-character limit. Invalid values are discreetly discarded, guaranteeing your payment links performance remains unaffected.\n\n## Simplify reconciliation with a URL parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can simplify reconciliation with the `client_reference_id` URL parameter. Use URL parameters in the query string of your payment link URL. To configure URL parameters directly in the Dashboard [Payment Links](https://dashboard.stripe.com/payment-links) page:\n\n1.  Click the payment link you want to modify.\n2.  Click the down arrow of the **Copy** button and select **URL parameters**.\n3.  In the dialog, use the drop-down menu to select **Client reference ID**.\n4.  Enter a value that meets the requirements described in the following table to append the reference to your URL.\n5.  Copy the amended URL for use in your integration.\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `client_reference_id` | Use `client_reference_id` to attach a unique string of your choice to the Checkout Session. This can be a customer ID or a cart ID (or similar), and you can use it to reconcile the Session with your internal systems. If you add this parameter to your payment link, it’s sent in the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") after payment completion. | `client_reference_id` can be composed of alphanumeric characters, dashes, or underscores, and be any value up to 200 characters. Invalid values are silently dropped, but your payment page continues to work as expected. |",
    "title": "Track a payment link | Stripe Documentation",
    "description": "Use URL parameters and UTM codes to track a payment link.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/customize",
    "markdown": "# Customize checkout for Payment Links\n\n## Collect additional information, taxes, or update your branding.\n\nWhen you create a payment link, you can customize the look and feel of a checkout session for your user. You can also choose what type of customer information to collect and save for later.\n\nSee [After a payment link payment](https://docs.stripe.com/payment-links/post-payment) for more information about customizing a session post-payment, such as redirecting the customer to a branded confirmation page or emailing a receipt.\n\n[](#limit-payments)\n\nYou can limit the amount of times a payment link is paid for. This is helpful, for example, if you have limited inventory, or only want the links to be used once. When the payment link reaches the limit, it automatically deactivates and customers can’t use it to make a purchase. If a customer tries to open the link after the limit has been reached, they’re shown the default message for deactivated links or [a message that you can customize](#custom-deactivated-link-message).\n\nA payment link is considered “paid for” when a checkout session is complete. You can see the payments for completed checkout sessions in two different ways, depending on the type of payment link:\n\n*   For payment links that include subscriptions (that is, any link that has a [recurring price](https://docs.stripe.com/products-prices/pricing-models)), go to **Billing** > **Subscriptions**.\n*   For all other payment links, go to the payment link’s details page, then **Payments and analytics** > **Recent payments**.\n\nTo limit the number of payments using the Dashboard:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n2.  Select **Limit the number of payments** and enter the number of payments you want to allow before the link deactivates.\n\n[](#custom-deactivated-link-message)\n\nIf customers try to open a deactivated payment link, they’re shown a default message. You can customize this message in the Dashboard or with the API.\n\nYou can customize the message for a deactivated link in the Dashboard in two ways:\n\n*   When you [create](https://dashboard.stripe.com/payment-links/create) or edit a payment link, select **Limit the number of payments**. Then select **Change deactivation message** and add your custom message.\n*   When you attempt to deactivate a payment link, a modal with a prompt to change the default deactivation message appears. Use that to update the message.\n\n[\n\n## Collect customer addresses and phone numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-addresses-and-phone-numbers)\n\nYou can collect addresses and phone numbers with payment links by adding those fields to the checkout session.\n\n### Collect an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect addresses from your customers:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n    \n    To edit a payment link go to its details page and click the overflow menu ().\n    \n2.  Select **Collect customers’ addresses** in the **Options** section.\n    \n3.  You can collect **Billing addresses only** or you can collect **Billing and shipping addresses**. Choosing either makes these fields required for customers.\n    \n4.  If you collect shipping addresses:\n    \n    *   You need to select the countries you ship to. These countries appear in the **Country** dropdown in the **Shipping Address form** in the checkout session.\n    *   You can optionally add shipping rates. Learn how to [create shipping rates in the Dashboard](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links).\n\n### Collect a phone number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need to collect phone numbers to complete the transaction:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n2.  Select **Require customers to provide a phone number**.\n\nYou can configure Payment Links to always collect a billing address, or always collect both a billing and a shipping address. When you collect shipping addresses, you can define the allowed values for shipping countries, and create one or more shipping rates to include in your link. Learn more about how to [charge for shipping](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links).\n\nYou can configure Payment Links to collect a phone number for shipping or invoicing. Only collect phone numbers if you need them for the transaction. When choosing this option, the payment page shows a required field to capture your customer’s phone number.\n\n[](#collect-taxes)\n\nPayment Links work with [Stripe Tax](https://stripe.com/tax) to calculate and collect tax on your payments. Stripe Tax is a paid product that automatically calculates the tax on your transactions without the need to define the rates and rules.\n\nFees only apply after you’ve added at least one location where you’re registered to calculate and remit tax.\n\nTo get started, [activate Stripe Tax](https://dashboard.stripe.com/setup/tax/activate) in the Dashboard. Learn how to use [products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) to automatically calculate tax.\n\n[](#collect-agreement-to-terms-of-services)\n\nYou can require that your customers accept your terms of service before completing their purchase. When your terms of service URL is set in your account’s [Public details](https://dashboard.stripe.com/settings/public), you have the option to require a terms of service agreement when you create a payment link in the Dashboard. Enabling this setting requires that your customers click a checkbox to accept your terms in their checkout page. The checkout page also links to your Privacy policy when a URL to your Privacy policy is set your [public details](https://dashboard.stripe.com/settings/public).\n\n[](#add-custom-fields)\n\n#### Caution\n\nDon’t use custom fields to collect personal, protected, or sensitive data, or information restricted by law.\n\nYou can add custom fields on the payment form to collect additional information from your customers. The information is available after the payment is complete and is useful for fulfilling the purchase. You can add the following types of fields.\n\n| Type | Description |\n| --- | --- |\n| Text | Collects freeform text up to 255 characters. |\n| Numbers only | Collects only numerical values up to 255 digits. |\n| Dropdown | Presents your customers with a list of options to select from. Payment links created through the Dashboard support up to 10 options. You can add up to 200 options after you create a link through the API. |\n\n1.  Click **Add custom fields** in the **Options** section.\n2.  Select a type of field to add.\n3.  Enter a label for the field.\n4.  _(Optional)_ Mark your field as required.\n\nLabels for custom fields aren’t translated, but you can use the `locale` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to set the language of your payment link to match the same language as your labels.\n\nAfter your customer completes the payment, you can view the fields on the payment details page in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment.56e708902bb56215b40e523371418a6e.png)\n\nThe custom fields are also sent in the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") upon payment completion.\n\n[](#convert-to-local-currency)\n\nEnable [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) in the [Stripe Dashboard](https://dashboard.stripe.com/settings/automatic_currency_conversion) in either test or live mode to let prices automatically convert to an international customer’s local currency depending on their location.\n\nAlternatively, you can set pricing manually for each currency using [manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices).\n\n[](#save-payment-details-for-future-use)\n\n#### Caution\n\nConsult with your legal counsel or compliance team regarding saving and using payment details. For example, the European Data Protection Board issued [guidance](https://edpb.europa.eu/system/files/2021-05/recommendations022021_on_storage_of_credit_card_data_en_1.pdf) regarding the saving of payment details for faster future checkouts.\n\nIf you want to save the payment method information to provide returning customers an optional 1-click payment experience in the future, we recommend using [Link](https://docs.stripe.com/payments/checkout/customization#link).\n\nTo save payment details for a customer, select **Save payment details for future use** in the **Advanced options** section when you create a payment link. You can use the payment details to charge the customer again.\n\n[\n\n## Use your own domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#custom-domains)\n\nIf you have your own custom domain, you can add it in the Stripe Dashboard. Instead of Stripe-branded payment links (`buy.stripe.com/`), you can create links using your own subdomain (`pay.example.com`)\n\n#### Note\n\n[](#set-store-policies-and-contact-information)\n\nYou can display your return, refund, and legal policies on the payment page in addition to your support contact information.\n\nGo to the [Checkout and Payment Links settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display.\n\nPresenting this information can increase buyer confidence and minimize [cart abandonment](https://docs.stripe.com/payments/checkout/abandoned-carts).\n\n[](#customize-checkout-with-url-parameters)\n\nURL parameters allow you to add additional context to your payment page and streamline checkout. Specify the language that appears during checkout, prefill an email address or promotional code for your customers, track campaigns, and streamline reconciliation.\n\nYou can configure URL parameters directly from the Stripe Dashboard, and use them in the query string of your payment link URL. From the [payment links page](https://dashboard.stripe.com/payment-links), click a specific payment link, then click the dropdown menu on the **Copy** button to add URL parameters.\n\nHere’s an example link with prefilled email, promotional code, and locale parameters.\n\n`https://buy.stripe.com/test_eVa3do41l4Ye6KkcMN?prefilled_email=jenny%40example.com&prefilled_promo_code=20off&locale=de`\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `prefilled_email` | Use `prefilled_email` to enter an email address on the payment page automatically. Your end customer can still edit this field, so the email you pass in for `prefilled_email` might not be the same email that your customer uses to complete the payment. | `prefilled_email` must be a valid email address. Invalid values are silently dropped and your payment page continues to work as expected.<br><br>We recommend [encoding](https://en.wikipedia.org/wiki/Percent-encoding) email addresses that you attach as URL parameters to reduce the risk of them not being passed through to your payment page. |\n| `prefilled_promo_code` | Use `prefilled_promo_code` to enter a [promotion code](https://docs.stripe.com/api/promotion_codes) on the payment page automatically. Your customer can still edit this field, so the promotion code you pass in for `prefilled_promo_code` might not be the same promotion code that your customer uses to complete the payment.<br><br>You must also [enable promotion codes](https://docs.stripe.com/payment-links/promotions) on your payment link, or this parameter has no effect. | `prefilled_promo_code` must be composed of alphanumeric characters and can’t use any special characters. Promotion codes are case insensitive. Invalid values are silently dropped, and your payment page continues to work as expected. |\n| `locale` | Use `locale` to display your payment link in a specific language for your customers regardless of their location. | View the complete list of all [supported languages](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-locale). |\n\nYou can also use URL parameters to [track payment links and related campaigns](https://docs.stripe.com/payment-links/url-parameters).\n\n[](#trials-without-payment-method)\n\nFor Payment Links that you create with a product that includes a free trial, you can allow customers to sign up for a subscription without providing their payment method details.\n\nTo configure trials without payment methods for Payment Links in the Dashboard:\n\n*   When you [create](https://dashboard.stripe.com/payment-links/create) or edit a payment link with a subscription product, select **Include a free trial**. Then select **Let customers start trial without payment method**.\n*   Set [subscription email reminders](https://docs.stripe.com/payments/checkout/free-trials#collect-payment) to make sure that Stripe prompts your customer to add their payment information before the trial ends. Otherwise, Stripe pauses the trial.",
    "title": "Customize checkout for Payment Links | Stripe Documentation",
    "description": "Collect additional information, taxes, or update your branding.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/buy-button",
    "markdown": "# Create an embeddable buy button\n\n## Use Payment Links to create an embeddable buy button for your website.\n\nCreate an embeddable buy button to sell a product, subscription, or accept a payment on your website. Start by selecting an existing link from the [Payment Links list view](https://dashboard.stripe.com/payment-links) or by [creating a new link](https://dashboard.stripe.com/payment-links/create) where you can decide which products to sell and customize the checkout UI. After you create your link, click **Buy button** to configure the buy button design and generate the code that you can copy and paste into your website.\n\n## Customize the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your buy button uses the same branding and call to action configured for your payment link. You can:\n\n*   Choose between a simple button and a card widget.\n*   Set brand colors, shapes, and fonts to match your website.\n*   Set the language of the button and payment page to match your website’s language.\n*   Customize your button’s call to action.\n\n![Customize the buy button](https://b.stripecdn.com/docs-statics-srv/assets/buy-button-card-layout.4003c3e9ffe3ce4378092dbdcd456ed9.png)\n\nCustomize the buy button\n\n## Embed the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides an embed code composed of a `<script>` tag and a `<stripe-buy-button>` web component. Click **Copy code** to copy the code and paste it into your website.\n\nIf you’re using HTML, paste the embed code into the HTML. If you’re using React, include the `script` tag in your `index.html` page to mount the `<stripe-buy-button>` component.\n\n#### Caution\n\nThe buy button uses your account’s [publishable API key](https://docs.stripe.com/keys#obtain-api-keys). If you revoke the API key, you need to update the embed code with your new publishable API key.\n\n`<body>   <h1>Purchase your new kit</h1>   <!-- Paste your embed code script here. -->   <script     async     src=\"[https://js.stripe.com/v3/buy-button.js](https://js.stripe.com/v3/buy-button.js)\">   </script>   <stripe-buy-button     buy-button-id=`\n\n`'{{BUY_BUTTON_ID}}'`\n\n    `publishable-key=  \"pk_test_TYooMQauvdEDq54NiTphI7jx\"    >   </stripe-buy-button> </body>`\n\n## Attributes to customize checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `client-reference-id` | Use `client-reference-id` to attach a unique string of your choice to the Checkout Session. The string can be a customer ID or a cart ID (or similar) that you use to reconcile the Session with your internal systems. If you pass this parameter to your `<stripe-buy-button>`, it’s sent in the [checkout.session.completed webhook](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) upon payment completion. | `client-reference-id` can be composed of alphanumeric characters, dashes, or underscores, and be any value up to 200 characters. Invalid values are silently dropped, but your payment page continues to work as expected. |\n| `customer-email` | Use `customer-email` to prefill the email address on the payment page. When the property is set, the buy button passes it to the Checkout Session’s `customer_email` attribute. The customer can’t edit the email address on the payment page. | `customer-email` must be a valid email. Invalid values are silently dropped, but your payment pages continues to work as expected.<br><br>* * *<br><br>*   `customer-session-client-secret`<br>*   You can provide an existing [Customer object](https://docs.stripe.com/api/customers) to Checkout Sessions created from the buy button. Create a customer session for a user you’ve already authenticated server-side, and return the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) to the client. Set the `customer-session-client-secret` attribute on the `<stripe-buy-button>` web component to be the `client_secret` from the Customer Session.<br>*   The `customer-session-client-secret` value must be generated from the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret).<br><br>* * * |\n\n## Pass an existing customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide an existing [Customer object](https://docs.stripe.com/api/customers) to Checkout Sessions created from the buy button. Create a customer session for a user you’ve already authenticated server-side, and return the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) to the client.\n\n`curl https://api.stripe.com/v1/customer_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"components[buy_button][enabled]\"=true`\n\nSet the `customer-session-client-secret` attribute on the `<stripe-buy-button>` web component to the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) from the Customer Session.\n\n#### Note\n\nYou must provide the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) within 30 minutes. After providing the client secret, you have an additional 30 minutes until the customer session expires. Any resulting Checkout Sessions created from the buy button will fail. Don’t cache the client secret, instead generate a new one every time you render each buy button.\n\n`<body>   <script     async     src=\"[https://js.stripe.com/v3/buy-button.js](https://js.stripe.com/v3/buy-button.js)\">   </script>   <stripe-buy-button     buy-button-id=`\n\n`'{{BUY_BUTTON_ID}}'`\n\n    `publishable-key=  \"pk_test_TYooMQauvdEDq54NiTphI7jx\"      customer-session-client-secret=\"{{CLIENT_SECRET}}\"   >   </stripe-buy-button> </body>`\n\n## Content Security Policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve deployed a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), the policy directives that the buy button requires are:\n\n*   frame-src, https://js.stripe.com\n*   script-src, https://js.stripe.com\n\n## Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRendering the buy button requires a website domain. To test the buy button locally, run a local HTTP server to host your website’s `index.html` file over the localhost domain. To run a local HTTP server, use Python’s [SimpleHTTPServer](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server#running_a_simple_local_http_server) or the [http-server](https://www.npmjs.com/package/http-server) npm module.\n\n## Track payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter your customer makes a payment using a payment link, you can see it in the [payments overview](https://dashboard.stripe.com/payments) in the Dashboard.\n\nIf you’re new to Stripe, you’ll receive an email after your first payment. To receive emails for all successful payments, update your notification preferences in your [profile settings](https://dashboard.stripe.com/settings/user).\n\nStripe creates a new [guest customer](https://docs.stripe.com/payments/checkout/guest-customers) for one-time payments and a new [Customer](https://docs.stripe.com/api/customers) when selling a subscription or [saving a payment method for future use](https://docs.stripe.com/payment-links/customize#save-payment-details-for-future-use).\n\nLearn more about handling [payment links post-payment](https://docs.stripe.com/payment-links/post-payment), like how to configure post-payment behavior for a buy button or payment link.",
    "title": "Create an embeddable buy button | Stripe Documentation",
    "description": "Use Payment Links to create an embeddable buy button for your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/promotions",
    "markdown": "# Promotion codes, upsells and cross-sells\n\n## Work with promotion codes, upsells and cross-sells.\n\nPayment Links lets you offer discounts using promotion codes, motivate long-term commitments with subscription upsells, and market related items during checkout through cross-sells.\n\n[](#promotion-codes)\n\nWhen you [create a payment link](https://dashboard.stripe.com/payment-links/create) in the Stripe Dashboard, you have the option of adding promotion codes. Customers can enter these codes on their payment page to apply discounts on their purchases.\n\nCreate a promotion code in the [Dashboard](https://dashboard.stripe.com/coupons/create) by creating a coupon and then turning it into a customer-facing promotion code. Use the `prefilled_promo_code` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to prefill a promotion code when sharing a payment link. Learn more about how to generate [promotion codes for Checkout](https://docs.stripe.com/payments/checkout/discounts#promotion-codes).\n\n#### Note\n\nBy default, payment links create [guest customers](https://support.stripe.com/questions/guest-customer-faq) for one-time payments. As a result, promotion codes that are only eligible for first-time orders won’t work as expected.\n\n[](#subscription-upsells)\n\n[Subscription upsells](https://docs.stripe.com/payments/checkout/upsells) give customers the option to upgrade to a longer-term plan during checkout, such as progressing from monthly to yearly. This strategy might enhance your average order value and improve your cash flow.\n\nYou can configure a subscription upsell in the Dashboard on the **Price detail** page. You can view the details for a price by clicking on one you’ve added to a product. You’ll see a list of eligible upsell prices in the dropdown menu. After you select an upsell, it immediately applies to eligible payment links that use that price.\n\nTo set up a subscription upsell:\n\n1.  Choose a subscription under [Subscriptions](https://dashboard.stripe.com/subscriptions), navigate down to **Pricing**.\n2.  Use the overflow menu to select **View price details**.\n3.  Navigate down to Upsells, and in the **Upsells to** dropdown menu, select or add a price.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/upsell-preview.2a43c1a8acb9f167178b7fda6a2b0796.gif)\n\n[](#cross-sells)\n\nUse [cross-sells](https://docs.stripe.com/payments/checkout/cross-sells) to give your customers the option to purchase related products through payment links.\n\nTo configure a cross-sell:\n\n1.  Click the desired product in [Products](https://dashboard.stripe.com/test/products), then navigate down to **Cross-sells**.\n2.  From the dropdown menu, pick the product you wish to cross-sell.\n\nOnce configured, any fitting payment link and checkout page will cross-sell the designated product from the dropdown menu.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-preview.cc9b1a4716015a18004f62de760cf29a.gif)",
    "title": "Promotion codes, upsells and cross-sells | Stripe Documentation",
    "description": "Work with promotion codes, upsells and cross-sells.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/post-payment",
    "markdown": "# After a payment link payment\n\n## Learn what you can do after receiving a payment link payment.\n\nAfter you receive a payment through a payment link, you can track payments, manage fulfillment automatically, view payment link metrics, and more.\n\n[](#track-payments)\n\nAfter your customer makes a payment using a payment link, you can see it in the payments overview in the [Dashboard](https://dashboard.stripe.com/payments). If you’re new to Stripe, you receive an email after your first payment. To receive emails for all successful payments, update your notification preferences in your [profile settings](https://dashboard.stripe.com/settings/user).\n\nStripe creates a new [guest customer](https://docs.stripe.com/payments/checkout/guest-customers) for one-time payments and a new [Customer](https://docs.stripe.com/api/customers) when selling a subscription or [saving a payment method for future use](https://docs.stripe.com/payment-links/customize#save-payment-details-for-future-use).\n\n[\n\n## Automatically handle fulfillment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#automatically-handle-fulfillment)\n\nYou can automatically handle fulfillment through a Stripe partner or programmatically with the Stripe API:\n\n*   **Automation with a Stripe partner:** To automate post-purchase activities like order fulfillment, emailing customers, and recording data to a spreadsheet, you can use a Stripe partner, like [Zapier](https://help.zapier.com/hc/articles/10821467221133), to connect Stripe data to other applications.\n    \n*   **Handle fulfillment programmatically:** If you’re interested in handling fulfillment programmatically using the Stripe API and [webhooks](https://docs.stripe.com/webhooks \"webhook\"), learn how to [fulfill orders after a customer pays](https://docs.stripe.com/checkout/fulfillment).\n    \n\n[](#change-confirmation-behavior)\n\nAfter a successful payment, your customer sees a localized confirmation message thanking them for their purchase. You can customize the confirmation message or redirect to a URL of your choice. To change the confirmation behavior on a payment link, click **After the payment** when [creating](https://dashboard.stripe.com/payment-links/create) or editing a payment link. Under **Confirmation page**, you can choose to replace the default message with a custom one.\n\nYou can also choose to redirect your customers to your website instead of providing a confirmation page. If you redirect your customers to your own confirmation page, you can include `{CHECKOUT_SESSION_ID}` in the redirect URL to dynamically pass the customer’s current Checkout Session ID. This is helpful if you want to tailor the success message on your website based on the information in the Checkout Session. You can also add [UTM codes](https://docs.stripe.com/payment-links/url-parameters#track-campaigns-with-utm-codes) as parameters in the query string of the payment link URL. The UTM codes are automatically added to your redirect URL when your customer completes a payment.\n\n[](#split-payment-with-a-connected-account)\n\nWith Stripe Connect, you can split a payment with a connected account. When [creating a new payment link](https://dashboard.stripe.com/payment-links/create), on the **After payment** tab, select the checkbox that says **Split the payment with a connected account**. Selecting this checkbox allows a connected account to automatically get paid when a customer buys the product through this payment link. Learn how to [use payment links with connected accounts](https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code).\n\n[](#let-customers-manage-their-subscriptions)\n\nCreate a link that you can send to customers, letting them log in and manage their subscriptions using the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\n[](#view-payment-link-metrics)\n\nYou can see metrics such as views, sales, and revenue from a given payment link by clicking the **Payments and analytics** tab after selecting a payment link from the [list view](https://dashboard.stripe.com/payment-links). Note that Stripe can delay data for up to 18 hours, and isn’t available in test mode. Analytics aren’t supported for links that include recurring prices.\n\nYou can use this data to better understand how your link is performing and what its conversion rate is:\n\n*   **Views**: The number of times your payment link was opened.\n*   **Sales**: The number of times the payment link was used to complete a purchase.\n*   **Revenue**: The gross sales volume that the link generated and is always in your default currency regardless of the presentment currency. Stripe converts the amounts using the exchange rate on the day the payment occurs.",
    "title": "After a payment link payment | Stripe Documentation",
    "description": "Learn what you can do after receiving a payment link payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-links/api",
    "markdown": "# Use the API to create and manage payment links\n\n## Create and manage payment links with the API.\n\nYou can use the [Payment Links API](https://docs.stripe.com/api/payment_links/payment_links) to create a payment link that you can share with your customers. Stripe redirects customers who open this link to a Stripe-hosted payment page.\n\n[](#product-catalog)\n\nPayment Links use [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") to model what your business is selling. To get started with Payment Links, [create a product](https://docs.stripe.com/api/products/create), then use that product to [create a price](https://docs.stripe.com/api/prices/create).\n\nPayment Links only supports _Standard pricing_ (charging the same price for each unit—either one time or recurring) and _Customer chooses price_ (letting your customer specify the price). It doesn’t support advanced options like package pricing, graduated pricing, or volume pricing. Additionally, _Customer choose prices_ currently doesn’t support recurring payments or donations.\n\nUse _Standard pricing_ to create a product or subscription with a fixed amount.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d product=  {{PRODUCT_ID}}    `\n\n[](#create-link)\n\nTo create a payment link, pass in [line\\_items](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items). Each line item contains a [price](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items-price) and [quantity](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items-quantity). Payment links can contain up to 20 line items when using Standard pricing and 1 line item when using _Customer chooses price_.\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1`\n\n[](#share-link)\n\nEach payment link contains a [url](https://docs.stripe.com/api/payment_links/payment_links/object#payment_link_object-url) that you can share with your customers through email, on social media, with a website link, in an app, or through other channels.\n\n[](#tracking-payments)\n\nWhen customers use a payment link to complete a payment, Stripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook that you can use for fulfillment and reconciliation.\n\nMake sure to listen to additional webhooks in case you’ve enabled payment methods like bank debits or vouchers, which can take 2-14 days to confirm the payment. For more information, see our guide on [fulfilling orders after a customer pays](https://docs.stripe.com/checkout/fulfillment).\n\nAfter a customer completes a purchase, you can redirect them to a URL or display a custom message by setting [after\\_completion](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion) on the payment link.\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"after_completion[type]\"=redirect \\   --data-urlencode \"after_completion[redirect][url]\"=\"[https://example.com](https://example.com/)\"`\n\n[](#deactivate-link)\n\nAfter you’ve created a payment link, you can’t delete it. What you can do is deactivate a payment link by setting the [active](https://docs.stripe.com/api/payment_links/payment_links/update#update_payment_link-active) attribute to `false`.\n\nAfter you deactivate a link, customers can’t finalize purchases using the link anymore and are redirected to an expiration page. If you want to reuse a deactivated payment link, turn it back on by setting the [`active`](https://docs.stripe.com/api/payment_links/payment_links/update#update_payment_link-active) attribute to `true`.",
    "title": "Use the API to create and manage payment links | Stripe Documentation",
    "description": "Create and manage payment links with the API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods",
    "markdown": "# Dynamic payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Simplify your payment methods code by dynamically ordering and displaying payment methods.\n\nDynamic payment methods is part of the [default Stripe integration](https://stripe.com/blog/dynamic-payment-methods) and enables you to configure payment methods settings from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods)—no code required. When you use dynamic payment methods in a [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout) integration, Stripe handles the logic for dynamically displaying the most relevant eligible payment methods to each customer to maximize conversion. Dynamic payment methods also unlocks [customization features](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods#customization-features) to help you customize and experiment with payment methods.\n\nUse dynamic payment methods to:\n\n*   Turn on and manage most payment methods in the Dashboard\n*   Eliminate the need to specify eligibility requirements for individual payment methods\n*   Dynamically order eligible payment methods to maximize conversion based on factors such as customer device, location, and local currency\n*   Set rules when payment methods are shown to buyers\n*   Run A/B Tests for new payment methods before rolling them out to buyers\n\n## Integration options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [Checkout](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted) or [Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements) with dynamic payment methods to have Stripe handle the logic for displaying eligible payment methods in your frontend for each transaction. If you have a platform account, follow our [Connect integration](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n### Migrate to dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Dashboard-based customization features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess the following features with dynamic payment methods to control how and when payment methods render.\n\n| Feature | Description |\n| --- | --- |\n| [Payment method rules](https://docs.stripe.com/payments/payment-method-rules) | Customize how you display payment methods by setting targeting parameters based on amount or the buyer’s location. |\n| [A/B test payment methods](https://docs.stripe.com/payments/a-b-testing) | Turn on payment methods for a percentage of traffic, run an experiment, and see the resulting impact on conversion rate, average order value, and shift in volume from other payment methods. |\n| [Payment method configurations](https://docs.stripe.com/payments/payment-method-configurations) | Create different sets of payment methods for different checkout scenarios using complex logic, such as only showing specific payment methods for one-time purchases and another set for recurring purchases. |\n| [Embed the Payment methods settings component](https://docs.stripe.com/connect/embed-payment-method-settings) | Embed a payment method settings page directly into your website to allow your users to manage their payment methods. |",
    "title": "Dynamic payment methods | Stripe Documentation",
    "description": "Simplify your payment methods code by dynamically ordering and displaying payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard",
    "markdown": "# Automatic charging | Stripe DocumentationThe Stripe Docs logo\n\n## Have Stripe automatically charge a customer's stored payment method.\n\nStripe can automatically attempt to pay an [invoice](https://docs.stripe.com/api/invoices \"invoices\") if the customer has a payment method on file. You can automatically charge a customer when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) or through the [API](https://docs.stripe.com/api/invoices). When you automatically charge a payment method on file, Stripe doesn’t notify the customer about the invoice. However, if you want to send an email receipt, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you’ve added your customer’s email address.\n\n## Add a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a payment method, go to the [Customers page](https://dashboard.stripe.com/customers) and select a customer. Select **Add** in the **Payment methods** section to add a card or an ACH debit bank account. You can also add a payment method during invoice creation. If your customer uses multiple payment methods, click the overflow menu () next to the card to make it the default.",
    "title": "Automatic charging | Stripe Documentation",
    "description": "Have Stripe automatically charge a customer's stored payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/hosted-invoice-page",
    "markdown": "# Hosted Invoice Page | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Hosted Invoice Page to securely collect payment from your customers.\n\nThe Hosted Invoice Page provides a secure, private URL where your customers can:\n\n*   View the details, amounts, and status of the invoice.\n*   Pay the invoice using any of the enabled payment methods.\n*   Download PDF copies of the invoice and receipt.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page.3f79f6d4ded5d51047ae2b16270c2c42.png)\n\nA sample Hosted Invoice Page\n\nStripe assigns all invoices a unique URL that you can send to your customer. We host these invoices, which means you can securely collect payments without any extra implementation code.\n\n## Invoice URLs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create and send an invoice, Stripe generates a unique URL for the Hosted Invoice Page. The URL includes a secure, long, and random identifier, resembling the following example:\n\n`https://invoice.stripe.com/i/acct_abcdefghijklmno/test_YWNjdF8xRGZ3UzJDbENJS2xqV3ZzLF9MNGJvMDBzY0xFQ2c1cG1QZzZ6Wk5jV0RXR2lOS1V6LDM0Mjk3NjEz0200wpYOWgBE?s=em`\n\nInvoice URLs expire 30 days after the due date. If the invoice doesn’t have a due date, the invoice expires 30 days after it finalizes. In all cases, the expiration window is never longer than 120 days.\n\n#### Note\n\nEven after expiration, any URLs that the Dashboard displays or a user retrieves through the API are guaranteed to be valid for at least 10 days.\n\nWhen a URL expires, it no longer loads the intended resource. Instead, Stripe redirects invoiced customers to a page that states that the URL has expired and to contact the merchant. This page also provides the merchant’s contact information.\n\n#### Note\n\nIf you sent an invoice through the Dashboard or API, any email recipients are automatically associated with that invoice. In this case, Stripe redirects the user to a recovery page where they can enter their email address to receive a new copy of the original email with non-expired links.\n\n## Invoice email links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure the invoice email to include a link to the Hosted Invoice Page. When enabled, the Hosted Invoice Page URL appears in:\n\n*   Invoice emails as a payment link.\n*   The footer of invoice PDFs.\n*   The Invoice API response as [hosted\\_invoice\\_url](https://docs.stripe.com/api/invoices/object#invoice_object-hosted_invoice_url).\n\nTo enable the Hosted Invoice Page for all newly created invoices, select the checkbox for **Include a Stripe-hosted link to an invoice payment page in the invoice email** in the [Invoice template](https://dashboard.stripe.com/account/billing/invoice).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-default.c99683dc71960790d621bc6e8ba3e064.png)\n\nEnable the Hosted Invoice Page by default\n\nTo enable the Hosted Invoice Page on any individual invoice, click the gear icon and select **Email invoice with link** in the **Payment** section when you’re editing an invoice. Once selected, **Email invoice to customer with link to payment page** appears next to the radio button.\n\nYou can also generate a link to the Hosted Invoice Page by clicking the gear icon and selecting **Send invoice or link manually**. (We don’t send an email to your customer when you select this option). After you complete the invoice go to the **Details** section in your invoice’s details page. Next to **Payment page**, copy the link and send it manually.\n\n## Page customization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Hosted Invoice Page is customizable with your:\n\n*   Brand color\n*   Logo\n*   Icon\n\nYou can customize these [branding settings](https://dashboard.stripe.com/account/branding) in the Dashboard.\n\n## Set allowed payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the Hosted Invoice Page, you can configure invoices to allow payment with one or more of the [supported payment methods](https://docs.stripe.com/invoicing/payment-methods). You can set defaults to apply to all of the newly created invoices from the [Invoice template](https://dashboard.stripe.com/account/billing/invoice). You can also select the payment method on a per-invoice basis when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) through the Dashboard.\n\nWith the Hosted Invoice Page, you can display the allowed payment method list to the customer. This gives them the option to choose a payment method that suits them best. Additionally, enabling the Hosted Invoice Page gives the customer the benefit of having Stripe handle complex payment and authentication flows (without any extra implementation effort from you).\n\n#### Note\n\nFor example, the [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) regulation in Europe requires customers to confirm their payment with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS). In this case, the Hosted Invoice Page displays the payment confirmation modal to your customer.\n\n## Payment method persistence ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards, Bacs Direct Debit and BECS Direct Debit details that you enter on the Hosted Invoice Page are stored on the customer for use in subsequent payments. We don’t store single-use payment methods like iDEAL, Bancontact, Sofort, and giropay for reuse.\n\n## Public support information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices include any public information that you specified under [Public business information](https://dashboard.stripe.com/settings/public), such as your support email address or business website. Using these settings, you can also choose to include a support phone number in customer-facing documents—like invoice PDFs and emails—or default to your business address.",
    "title": "Hosted Invoice Page | Stripe Documentation",
    "description": "Use the Hosted Invoice Page to securely collect payment from your customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/integration-options",
    "markdown": "# Payment method integration options | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different ways to integrate payment methods.\n\nThe [payment methods](#payment-method-availability) you can offer depend on the currency, country, and Stripe products you integrate with. Use this guide to make sure your chosen payment methods work for your business and to determine how you want to add payment methods.\n\n## Choose your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo decide which integration works best for you, consider:\n\n*   The Stripe products and checkout options you want to use or are currently using.\n*   The payment methods you want to enable.\n\n### No-code integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe offer several ways to get started with your integration using the Stripe Dashboard that don’t require any code:\n\n*   [Payment Links](https://docs.stripe.com/payment-links): Redirect your customers to a Stripe-hosted payment page. This page dynamically displays the payment methods most relevant to the currency and customer’s location based on the payment methods you enabled in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n    \n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide): Allows you to automatically charge your customer’s payment method on file, or email them the invoice with or without a link to a payment page. You can also [create basic subscriptions](https://dashboard.stripe.com/subscriptions/create) from the Dashboard. To configure payment methods for invoices and subscriptions, see the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice).\n    \n\n### Low-code integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re looking for more control over your payments integration, Stripe offers several unique low-code offerings:\n\n*   [Checkout](https://docs.stripe.com/payments/checkout): Lets you add an embeddable payment form to your site or redirect users to a Stripe-hosted checkout page. You can configure Checkout programmatically through the API or configure it in the Dashboard. Stripe selects enabled payment methods from your Dashboard by default. If you’re using the API, you can manually list payment methods using [payment method types](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_types).\n    \n*   [Payment Element](https://docs.stripe.com/payments/payment-element): A UI component that you embed into your website or app. When customers are ready to complete a purchase, you create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") or a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") and configure how you want to display payment methods. For the Payment Element, you can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n    \n\nWith Checkout and the Payment Element, you can also use [subscriptions or recurring charges](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted). To manage customer subscriptions and payment methods for invoices and subscriptions, see [Customer management](https://docs.stripe.com/customer-management). You can also list payment methods manually with [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n## Payment method support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment methods only support certain currencies, countries, and products. Make sure your chosen payment methods work for your scenario. Depending on your payments flows, some [additional API options](#additional-api-supportability) might restrict the payment methods you can offer.\n\nIf you’re seeing that a specific payment method isn’t appearing for a customer, use the [Payment Methods review](https://dashboard.stripe.com/settings/payment_methods/review) page in the Dashboard. This tool lets you troubleshoot the issue using an existing PaymentIntent ID or custom field.\n\nAll payment methods have specific requirements for their use and may contain additional restrictions that you must comply with, such as marketing guidelines, additional prohibited and restricted businesses, and information about handling disputes and refunds. These usage requirements and restrictions are described in the [documentation](https://docs.stripe.com/payments/payment-methods/overview) for that payment method or in the applicable [payment terms](https://stripe.com/payment-terms/legal).\n\n### Country and currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefer to the following table to see where each [payment method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) is supported and what presentment currencies it accepts. This table contains all of the supported currencies and countries for a given payment method. In some cases, not all of the countries listed can accept payments in all of the listed presentment currencies. For more details on exactly what currencies are accepted, see the individual payment method’s page.\n\n### Payment method availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Product support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefer to the following tables to determine which payment methods are supported by each Stripe product:\n\n#### Checkout modes\n\nThere are three Checkout modes: [payment](https://docs.stripe.com/payments/accept-a-payment?platform=web), [subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=stripe-hosted), and [setup](https://docs.stripe.com/payments/save-and-reuse?platform=web). Unless specified otherwise, the payment method is available in all modes or any that remain.\n\n### Bank debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank redirects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Buy now, pay later![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Real-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Vouchers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Wallets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Additional API support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following tables detail additional payment method API support:\n\n### Bank debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank redirects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Buy now, pay later![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Real-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Vouchers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Wallets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Add payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customers see the available payment methods during the checkout process. You can either manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) or list payment methods manually in code. See the [Accept a payment](https://docs.stripe.com/payments/accept-a-payment) guide for detailed steps.\n\n### Use dynamic payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe dynamically displays the most relevant payment methods to your customers based on the payment method preferences you set in the Dashboard and eligibility factors such as transaction amount, currency, and payment flow. To enable and manage your payment method preferences, go to the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe enables certain payment methods for you by default and might enable additional payment methods after notifying you.\n\nUnless you have to list payment methods manually, we recommend using dynamic payment methods. Dynamic payment methods automatically determines whether to display payment methods according to set rules.\n\nSee [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to learn more.\n\n### Manually list payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nListing payment methods manually requires some coding. Every payment method you want your PaymentIntent to accept must be added to `payment_method_types`. Unless your integration requires that you list payment methods manually, we recommend that you manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc: \\   -d success_url=\"https://example.com/success\" \\   -d cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"=price_H5ggYwtDq4fbrJ \\   -d \"line_items[0][quantity]\"=2 \\   -d “payment_method_types[]”=bancontact\\   -d “payment_method_types[]”=card\\   -d “payment_method_types[]”=eps\\   -d “payment_method_types[]”=giropay\\   -d “payment_method_types[]”=ideal\\   -d “payment_method_types[]”=p24\\   -d “payment_method_types[]”=sepa_debit\\   ...   -d mode=payment`\n\nIf multiple payment methods are passed, Checkout dynamically reorders them to prioritize the most relevant payment methods based on the customer’s location and other characteristics. The payments acceptance page prioritizes showing payment methods known to increase conversion for your customer’s location while lower priority payment methods are hidden in an overflow menu.",
    "title": "Payment method integration options | Stripe Documentation",
    "description": "Learn about the different ways to integrate payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/automatic-collection",
    "markdown": "# Automatic collection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's automatic recovery features for Invoicing.\n\nStripe provides a number of automated revenue recovery features for one-off invoices to help collect payments that might have failed otherwise. These include automatically updating your users’ saved cards, sending emails when a failed payment occurs, and retrying cards at strategic times.\n\n## Smart Retries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing machine learning, Smart Retries chooses the best times to retry failed payment attempts to increase the chance of successfully paying an invoice. The machine learning system behind Smart Retries uses time-dependent, dynamic signals, such as:\n\n*   The number of different devices that have presented a given payment method in the last _N_ hours.\n*   The best time to pay (payments made for debit cards in certain countries might be slightly more successful at 12:01 AM in local time zones).\n\nBased on a combination of these factors, Stripe intelligently assesses when to retry payments. We continuously learn from new purchaser behaviors and transactions, which provide for a more targeted approach over traditional rules-based payment retry logic. Any invoice with the [auto\\_advance](https://docs.stripe.com/api/invoices/create#create_invoice-auto_advance) attribute set to `true` goes through the Smart Retries flow (if enabled), regardless of the selected payment method.\n\nSmart Retries reattempts the charge according to your specifications for the number of retries and the maximum duration. You can also use [automations](https://docs.stripe.com/billing/automations) to create different retry policies for different customer segments.\n\nYou can override this behavior by [disabling Smart Retries](https://dashboard.stripe.com/revenue_recovery/retries) and defining your own custom retry rules. When you enable dunning, the [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) attribute on the `invoice.payment_failed` [webhook](https://docs.stripe.com/webhooks \"webhook\") indicates when Stripe attempts the next collection.\n\n## Failed payment notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the [Subscriptions and emails tab of your billing settings](https://dashboard.stripe.com/settings/billing/automatic), scroll to the **Manage failed payments for subscriptions** section. The setting **Send emails when card payments fail** turns on automatic customer emails for failed payments.\n\nIf a payment failure occurs on a one-off invoice and **Link to a Stripe-hosted page** is selected, Stripe sends a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) to the customer.\n\nYou can customize the color, icon, and logo of your customer emails and Stripe-hosted page in the [Branding settings](https://dashboard.stripe.com/settings/branding).\n\n### Customize the email message Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor failed payment emails, you can write your own email message to your customers instead of using the default email message. You’ll also need to use a verified [custom domain](https://docs.stripe.com/get-started/account/email-domain) to send emails from.\n\n1.  Click the **customize** link in the sentence below the **Send emails to customers to update failed card payment methods** option.\n    \n2.  Choose the **Use your own custom email** option.\n    \n3.  Read the email policy guidelines. By law, you can’t add promotional content without explicit consent from the customer.\n    \n4.  Fill out the contents of the email. As you enter information, you can see a preview of the email.\n    \n\n## Manage invoices sent to customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the [Subscriptions and emails tab of your billing settings](https://dashboard.stripe.com/settings/billing/automatic), scroll to the **Manage invoices sent to customers** section to:\n\n*   **Email finalized invoices to customers**—You can turn this option on to always email your customers a finalized invoice. This setting only affects invoices where the [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) is set to `send_invoice`.\n*   **Change a past due invoice’s status**—You can mark an invoice as uncollectible if it’s past due by 30, 60, or 90 days. You can also leave the invoice past-due.\n*   **Automatically reconcile partial payments that meet a minimum**—You can instruct Stripe to mark an invoice as paid if ​​it’s partially paid within the set amount. For example, if the payment received from your customer is within 20 USD or less of the total (or at whatever amount you configure), then this setting applies a credit to the invoice for the outstanding amount. It then marks the invoice as paid.\n\n### Automatic reminders for one-off invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo turn on automatic reminders for unpaid, one-off invoices, navigate to the [Invoices tab of your billing settings](https://dashboard.stripe.com/settings/billing/invoice), scroll to the **Manage advanced invoicing features** section, and turn on **Send reminders if a one-off invoice hasn’t been paid**. For each reminder you want to send, click **Add reminder** and select a schedule from the dropdown list. You can schedule reminders for before, on, or after the invoice due date.",
    "title": "Automatic collection | Stripe Documentation",
    "description": "Learn about Stripe's automatic recovery features for Invoicing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/global-invoicing",
    "markdown": "# Global invoicing | Stripe DocumentationThe Stripe Docs logo\n\n## Set up invoices globally following best practices.\n\nThe invoice compliance process varies across different countries. Stripe provides best practices guides for full invoices in different countries around the world.",
    "title": "Global invoicing | Stripe Documentation",
    "description": "The invoice compliance process varies across different countries. Stripe provides best practices guides for full invoices in different countries around the world.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/address-element",
    "markdown": "# Address Element | Stripe DocumentationThe Stripe Docs logo\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\n## Start with examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo see the Address Element in action, start with one of these examples:\n\n## Create an Address Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create an Address Element, specify whether to use it in shipping or billing mode.\n\nIn shipping mode, the element does two things:\n\n*   Collect a shipping address.\n*   Offer the customer the option to use it as a billing address too.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret, appearance }); const addressElement = elements.create('address', options); addressElement.mount('#address-element');`\n\n### Use Address Element with other elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere can only be one Address Element per Elements group. If you need to collect both shipping and billing addresses, use the Address Element in Shipping mode and use the [Payment Element](https://docs.stripe.com/payments/payment-element) to collect only the necessary billing address details.\n\nWhen you use the Address Element with other elements, you can expect some automatic behavior when confirming the PaymentIntent or SetupIntent. The Address Element validates completeness upon confirming the PaymentIntent or SetupIntent and then displays errors for each field if there are any validation errors.\n\n## Use an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element automatically works with the [Payment](https://docs.stripe.com/payments/payment-element) or Express Checkout Element. When a customer provides an address and a payment method, Stripe combines them into a single [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") with the address in the correct field.\n\n### Automatic behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe element’s default behavior depends on its mode.\n\nIn shipping mode, the address is stored in these fields:\n\n*   It appears in the [shipping](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-shipping) field.\n*   If the customer indicates it is also the billing address, it also appears in the [billing\\_details](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_data-billing_details) field.\n\nTo enable combining information, create all elements from the same `Elements` object, as in this example:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret }); const addressElement = elements.create('address', options); const paymentElement = elements.create('payment'); addressElement.mount('#address-element'); paymentElement.mount('#payment-element');`\n\n### Custom behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNormally, the Address Element’s default behavior is enough. But in a complex payment flow, you might need to write custom responses to the customer’s input. For information, see [Listen for address input](https://docs.stripe.com/elements/address-element/collect-addresses).\n\n## Autocomplete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element can autocomplete addresses for 25 countries. If your customer selects a supported country for their address, then they see the autocomplete options. These are the supported countries for autocomplete:\n\nAustralia\n\nBelgium\n\nBrazil\n\nCanada\n\nFrance\n\nGermany\n\nIndia\n\nIreland\n\nItaly\n\nJapan\n\nMalaysia\n\nMexico\n\nNetherlands\n\nNorway\n\nPhilippines\n\nPoland\n\nRussia\n\nSingapore\n\nSouth Africa\n\nSpain\n\nSweden\n\nSwitzerland\n\nTurkey\n\nUnited Kingdom\n\nUnited States\n\nIf you use the Address Element and the Payment Element together, Stripe enables autocomplete with no configuration required.\n\nIf you use the Address Element alone, you must use your own [Google Maps API Places Library key](https://developers.google.com/maps/documentation/javascript/places), which is managed separately from your Stripe account. Pass the key in the [autocomplete.apiKey](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-autocomplete-apiKey) option.\n\n## Autofill with Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Link](https://docs.stripe.com/payments/link) saves and autofills payment and shipping information. When a returning Link customer authenticates, Stripe autofills their shipping information in the Address element.\n\n![Create a payment form using multiple Elements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nTo enable autofill, create all elements from the same `Elements` object, as in this example:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret }); const linkAuthElement = elements.create('linkAuthentication'); const addressElement = elements.create('address', options); const paymentElement = elements.create('payment'); linkAuthElement.mount('#link-auth-element'); addressElement.mount('#address-element'); paymentElement.mount('#payment-element');`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Appearance API to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the address element.](https://b.stripecdn.com/docs-statics-srv/assets/address_appearance_example.c7884ea763b05e5881d65ed2b2afadbc.png)\n\nFor instance, choose the “flat” theme and override the primary text color.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat',   variables: { colorPrimaryText: '#262626' } };`\n\nSee the [Appearance API](https://docs.stripe.com/elements/appearance-api) documentation for a full list of themes and variables.",
    "title": "Address Element | Stripe Documentation",
    "description": "Use the Address Element to collect complete billing and shipping addresses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/express-checkout-element",
    "markdown": "# Express Checkout Element | Stripe DocumentationThe Stripe Docs logo\n\n## Show multiple one-click payment buttons with a single component.\n\n![Add Link to the Express Checkout Element](https://b.stripecdn.com/docs-statics-srv/assets/link-in-express-checkout-element.67be6745e5a37c1c09074b0f43763cff.png)\n\nThe Express Checkout Element gives you a single integration for accepting payments through one-click payment buttons. Supported payment methods include [Link](https://docs.stripe.com/payments/link/what-is-link), [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [PayPal](https://docs.stripe.com/payments/paypal), and [Amazon Pay](https://docs.stripe.com/payments/amazon-pay).\n\nWith this integration, you can:\n\n*   Dynamically sort payment buttons based on a customer’s location.\n*   Add payment buttons without any frontend changes.\n*   Integrate Elements seamlessly by reusing an existing Elements instance to save time.\n\n[](#try-demo)\n\nIn the following demo, you can toggle some of the prebuilt options to change the background color, layout, size, and shipping address collection of the payment interface. The demo displays Google Pay and Apple Pay only on their available platforms. Payment Method buttons are only shown in their supported countries.\n\nIf you don’t see the demo, try viewing this page in a [supported browser](#supported-browsers).\n\n## Create an Express Checkout Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis code [creates](https://docs.stripe.com/js/element/express_checkout_element) an elements group with an Express Checkout Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM.\n\n`const appearance = { /* appearance */ } const options = { /* options */ } const elements = stripe.elements({   mode: 'payment',   amount: 1099,   currency: 'usd',   appearance, }) const expressCheckoutElement = elements.create('expressCheckout', options) expressCheckoutElement.mount('#express-checkout-element')`\n\nMake sure the `#express-checkout-element` container has enough space to display the payment buttons by setting its width to at least `150px`.\n\n## Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Express Checkout Element presents one-click payment methods that are active, supported, and set up.\n\n*   Some payment methods [require activation in the Dashboard](https://dashboard.stripe.com/settings/connect/payment_methods).\n*   Payment methods are only available when the customer uses a supported browser and pays in a supported currency.\n*   Some payment methods require setup actions from the customer. For example, a customer won’t see a Google Pay button if they don’t have Google Pay set up.\n\nThe element sorts payment methods by relevance to your customer.\n\nTo control these behaviors, you can [customize the payment methods](#customize-payment-methods).\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain payment methods work with specific browsers.\n\n|     | Apple Pay | Google Pay | Link | PayPal | Amazon Pay |\n| --- | --- | --- | --- | --- | --- |\n| Chrome1 |     |     |     |     |     |\n| Edge |     |     |     |     |     |\n| Firefox |     |     |     |     |     |\n| Opera |     |     |     |     |     |\n| Safari | 2   |     |     |     |     |\n| Chrome on iOS 16+ |     |     |     |     |     |\n| Firefox on iOS 16+ |     |     |     |     |     |\n| Edge on iOS 16+ |     |     |     |     |     |\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, when the Express Checkout Element displays multiple buttons, it arranges the buttons in a grid based on available space, and shows an overflow menu if necessary.\n\nYou can override this default and specify a grid layout yourself with the [layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout) option.\n\n## Text![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can control a button’s text by selecting a [buttonType](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonType). Each wallet offers its own types.\n\nLink only offers one button type, with the “Pay faster” call to action.\n\nWe attempt to detect your customer’s locale and use it to localize the button text. You can also specify a [locale](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-locale).\n\nThis example code includes the call to action “Buy” or “Buy now” for buttons that support it. Then, it specifies the locale `de` to get their German equivalents.\n\n`const expressCheckoutOptions = {   buttonType: {     applePay: 'buy',     googlePay: 'buy',     paypal: 'buynow'   } } const elements = stripe.elements({   locale: 'de',   mode: 'payment',`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t fully customize the appearance of Express Checkout Element buttons because each payment method sets its own logo and brand colors. You can customize the following options:\n\n*   [Button height](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonHeight)\n*   Border radius using variables with the [Appearance](https://docs.stripe.com/elements/appearance-api) API\n*   [Button themes](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonTheme)\n\nThis example code sets up an elements group with a light theme and 36px border radius, makes buttons 50px tall, and overrides the theme to use the white-outline version of the Apple Pay button.\n\n`const appearance = {   theme: 'stripe',   variables: {     borderRadius: '36px',   } } const expressCheckoutOptions = {   buttonHeight: '50',   buttonTheme: {`\n\nWe support the following themes:\n\nLink has a single button theme, which is readable on either a light or a dark background.\n\n## Customize payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t specify which payment methods to display. For example, you can’t force a Google Pay button to appear if your customer’s device doesn’t support Google Pay.\n\nBut you can customize payment method behavior in various ways, such as:\n\n*   You can activate or deactivate payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n*   You can override Stripe’s default logic of sorting payment methods by relevance. Use the [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethodOrder) option to set your preferred order.\n*   If there is too little room in the layout, low-relevance payment methods might appear in an overflow menu. Customize when the menu appears using the [layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout) option.\n*   To prevent Apple Pay or Google Pay from appearing, set [paymentMethods.applePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) or [paymentMethods.googlePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) to `never`.\n*   To allow Apple Pay or Google Pay to appear when they’re not set up, set [paymentMethods.applePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) or [paymentMethods.googlePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) to `always`. This still won’t force them to appear on unsupported platforms, or when the payment is in an unsupported currency.\n\nRegulations in [Finland](https://support.stripe.com/questions/payment-method-legislation-in-finland) and [Sweden](https://support.stripe.com/questions/payment-method-legislation-in-sweden) require you to present debit payment methods first before showing credit payment methods at checkout in these countries.",
    "title": "Express Checkout Element | Stripe Documentation",
    "description": "Show multiple one-click payment buttons with a single component.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-element",
    "markdown": "# Stripe Payment Element | Stripe DocumentationThe Stripe Docs logo\n\n## Accept payment methods from around the globe with a secure, embeddable UI component.\n\n#### Interested in using Stripe Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nThe Payment Element is a UI component for the web that accepts 40+ payment methods, validates input, and handles errors. Use it alone or with other elements in your web app’s frontend.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet.\n\nTo try the Payment Element for yourself, start with one of these examples:\n\n## Create a Payment Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis code [creates](https://docs.stripe.com/js/elements_object/create_payment_element) a Payment Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { /* options */ }; const elements = stripe.elements({ clientSecret, appearance }); const paymentElement = elements.create('payment', options); paymentElement.mount('#payment-element');`\n\nAccepting payments with the Payment Element requires additional backend code. See the [quickstart](https://docs.stripe.com/payments/quickstart) or [sample app](https://github.com/stripe-samples/accept-a-payment/tree/main/payment-element) to learn how this works.\n\n## Combine elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element interoperates with other elements. For instance, this form uses one additional element to [autofill checkout details](https://docs.stripe.com/payments/link), and another to [collect the shipping address](https://docs.stripe.com/elements/address-element).\n\n![A form with contact info, shipping address, and payment fields. The contact info is labeled Link Authentication Element, the shipping address is labeled Address Element, and the payment fields are labeled Payment Element](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nFor the complete code for this Link example, see [Add Link to an Elements integration](https://docs.stripe.com/payments/link/add-link-elements-integration).\n\n## Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. Use the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) to enable or disable payment methods at any time. With the Payment Element, you can use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to:\n\n*   Manage payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding\n*   Dynamically display the most relevant payment options based on factors such as location, currency, and transaction amount\n\nFor instance, if a customer in Germany is paying in EUR, they see all the active payment methods that accept EUR, starting with ones that are widely used in Germany.\n\n![A variety of payment methods.](https://b.stripecdn.com/docs-statics-srv/assets/payment-element-methods.26cae03aff199d6f02b0d92bd324c219.png)\n\nShow payment methods in order of relevance to your customer\n\nTo further customize how payment methods render, such as by filtering card brands that you don’t want to support, see [Customize payment methods](https://docs.stripe.com/payments/customize-payment-methods). To add payment methods integrated outside of Stripe, see [External payment methods](https://docs.stripe.com/payments/external-payment-methods).\n\nIf your integration requires you to list payment methods manually, see [Manually list payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#listing-payment-methods-manually).\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the Payment Element’s layout to fit your checkout flow. The following image is the same Payment Element rendered using different layout configurations.\n\n![Examples of the three checkout forms. The image shows the tab option, where customers pick from payment methods shown as tabs or the two accordion options, where payment methods are vertically listed. You can choose to either display radio buttons or not in the accordion view. ](https://b.stripecdn.com/docs-statics-srv/assets/pe_layout_example.525f78bcb99b95e49be92e5dd34df439.png)\n\nPayment Element with different layouts.\n\nThe tabs layout displays payment methods horizontally using tabs. To use this layout, set the value for [layout.type](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout-type) to `tabs`. You can also specify other properties, such as [layout.defaultCollapsed](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout-defaultCollapsed).\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = {   layout: {     type: 'tabs',     defaultCollapsed: false,   } };`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Appearance API to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the payment element checkout form.](https://b.stripecdn.com/docs-statics-srv/assets/appearance_example.e076cc750983bf552baf26c305e7fc90.png)\n\nFor instance, choose the “flat” theme and override the primary text color.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat',   variables: { colorPrimaryText: '#262626' } };`\n\nSee the [Appearance API](https://docs.stripe.com/elements/appearance-api) documentation for a full list of themes and variables.\n\n## Options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe elements support more options than these. For instance, display your business name using the [business](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) option.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */}; const options = {   business: \"RocketRides\" };`\n\nThe Payment Element supports the following options. See each options’s reference entry for more information.\n\n|     |     |\n| --- | --- |\n| [layout](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout) | Layout for the Payment Element. |\n| [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues) | Initial customer information to display in the Payment Element. |\n| [business](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Information about your business to display in the Payment Element. |\n| [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Order to list payment methods in. |\n| [fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Whether to display certain fields. |\n| [readOnly](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-readOnly) | Whether payment details can be changed. |\n| [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) | Whether mandates or other legal agreements are displayed in the Payment Element. The default behavior is to show them only when necessary. |\n| [wallets](https://docs.stripe.com/js/elements_object/create_payment_element) | Whether to show wallets like Apple Pay or Google Pay. The default is to show them when possible. |",
    "title": "Stripe Payment Element | Stripe Documentation",
    "description": "Accept payment methods from around the globe with a secure, embeddable UI component.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-method-messaging",
    "markdown": "# Payment Method Messaging Element | Stripe DocumentationThe Stripe Docs logo\n\n## Automatically explain buy now, pay later payment options.\n\nThe Payment Method Messaging Element is a UI component for informing a customer about available buy-now-pay-later plans. It automatically determines the available plans and conditions, generates a localized description, and displays it in your form’s theme.\n\n![Prince of Persia book](https://b.stripecdn.com/docs-statics-srv/assets/c2815bda1cf26cedf5b8603b4667acae.png)\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Create and mount the Payment Method Messaging Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Elements to include the [Payment Method Messaging](https://docs.stripe.com/js/elements_object/create_element?type=paymentMethodMessaging) Element on your site.\n\n1.  Add the Stripe.js script on your page by adding it to the `head` of your HTML file:\n    \n2.  Create a placeholder element in your page where you want to mount the Payment Method Messaging Element:\n    \n    `<div id=\"payment-method-messaging-element\"></div>`\n    \n3.  On your product, cart, and payment pages, include the following code to create an instance of Stripe.js ([with locale](https://docs.stripe.com/js/appendix/supported_locales)) and mount the Payment Method Messaging Element:\n    \n    `// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n    \n    `'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n    \n    `); const elements = stripe.elements(); const options = {   amount: 9900, // $99.00 USD   currency: 'USD',   // the country that the end-buyer is in   countryCode: 'US', }; const PaymentMessageElement =   elements.create('paymentMethodMessaging', options); PaymentMessageElement.mount('#payment-method-messaging-element');`\n    \n\n#### Caution\n\nIf your integration requires you to list payment methods manually, see [Customize payment methods](#customize-payment-methods).\n\n## Dynamic display![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe element dynamically displays payment plans that the customer is eligible for. These depend on the customer’s location and currency. They also depend on the amount of the payment, as in this example:\n\nWhen available, the interest-bearing loan payment plans are shown on a separate line from the pay-in-x plans, which might increase the space needed for the element.\n\n## Customize Payment Methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), the Payment Method Messaging Element automatically pulls your payment method preferences from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to dynamically show the most relevant payment methods to your customers. Alternatively, you can list payment methods manually using `paymentMethodTypes`. The Payment Method Messaging Element still only displays plans that the customer is eligible for based on their location, the currency, and the amount of the payment.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements(); const options = {   amount: 9900, // $99.00 USD   currency: 'USD',   paymentMethodTypes: ['klarna', 'afterpay_clearpay', 'affirm'],   // the country that the end-buyer is in   countryCode: 'US', }; const PaymentMessageElement =   elements.create('paymentMethodMessaging', options); PaymentMessageElement.mount('#payment-method-messaging-element');`\n\n## Info modal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the customer selects the info icon (ⓘ), the Payment Method Messaging Element displays a modal with details about buy now, pay later payment plans.\n\n![The info modal](https://b.stripecdn.com/docs-statics-srv/assets/pmme-learn-more.eb5802e4d0caeb5469ee11fcfbc26c09.png)\n\nA preview of the info modal\n\nThe modal includes:\n\n*   A step-by-step overview of how to use a buy now, pay later payment method\n*   A summary of terms for each available payment plan\n*   A link to the full terms for each available payment plan\n\n## Supported plans![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Method Messaging Element supports these payment methods and payment plans:\n\n| Klarna | Afterpay | Affirm |\n| --- | --- | --- |\n| *   Pay in 3<br>*   Pay in 4<br>*   Pay in 30 days<br>*   Pay in 60 days<br>*   Financing<br>*   Pay now | *   Pay in 4<br>*   Interest-bearing loan installments | *   Pay in 4<br>*   0% interest loan installments<br>*   Interest-bearing loan installments |\n\nIt supports these values for `countryCode`: `AT, AU, BE, CA, CZ, DE, DK, ES, FI, FR, GB, GR, IE, IT, NL, NO, NZ, PL, PT, RO, SE, US`.\n\nIt supports these values for `currency`: `AUD, CAD, CZN, DKK, EUR, GBP, NOK, NZD, PLN, RON, SEK, USD`.\n\n#### Caution\n\nMessaging does not render if the `countryCode` and `currency` combination passed has no eligible payment plans.\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Appearance API](https://docs.stripe.com/elements/appearance-api) to customize the font and logo of your messaging. You can select a [theme](https://docs.stripe.com/elements/appearance-api?platform=web#theme) as in the example below.\n\nUse [variables](https://docs.stripe.com/elements/appearance-api#variables) for additional customization.\n\n`const appearance = {   variables: {     colorText: 'rgb(84, 51, 255)',     colorTextSecondary: 'rgb(28, 198, 255)', // info icon color     fontSizeBase: '16px',     spacingUnit: '10px',     fontWeightMedium: 'bolder',     fontFamily: 'Ideal Sans, system-ui, sans-serif',   },   rules: {     '.PaymentMethodMessaging': {         textAlign: 'right',     }   } };`\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\nThe Payment Method Messaging Element is a tool that allows you to message various buy now, pay later payment options to your customers. You’re responsible for compliance with applicable laws, rules, and regulations regarding the promotion of buy now, pay later payment options.",
    "title": "Payment Method Messaging Element | Stripe Documentation",
    "description": "Automatically explain buy now, pay later payment options.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/elements/appearance-api",
    "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\n`-moz-osx-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-text-fill-color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``backgroundColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `BlockDivider`, `Button`, `CheckboxInput`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `InputDivider`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `Switch`, `Tab``border``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink`, `TermsText`, `Text``borderRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``boxShadow``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fill``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `SwitchControl`, `Tab`, `TabIcon``fontFamily``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontSize``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontVariant``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontWeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``letterSpacing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``lineHeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``margin``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginBottom``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginLeft``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginRight``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginTop``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``opacity``Label``outline``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``outlineOffset``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``padding``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``textDecoration``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textShadow``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textTransform``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``transition``Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CheckboxLabel`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Icon`, `Input`, `InputCloseIcon`, `Label`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text`",
    "title": "Elements Appearance API | Stripe Documentation",
    "description": "Customize the look and feel of Elements to match the design of your site.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/quickstart",
    "markdown": "# Custom payment flow | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Custom payment flow | Stripe Documentation",
    "description": "Learn how to embed a custom Stripe payment form in your website or application. Build a checkout form with Elements to complete a payment using various payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-card-element-comparison",
    "markdown": "# Payment Element and Card Element comparison\n\n## Learn more about the Payment Element and Card Element so you can decide which to use in your integration.\n\nPreviously, each payment method (cards, iDEAL, etc.) required integrating a separate Element. Now, you can use the Payment Element to accept payments from one or multiple payment methods. Since this also includes cards, you have the option to integrate the Card Element or the Payment Element to accept card payments.\n\nFor most users, the Payment Element is the best option to process cards. The integration effort is the same as the Card Element and it supports all the common payment flows. It also gives you instant access to additional payment methods, including Google Pay and Apple Pay. Accepting more [payment methods](https://docs.stripe.com/payments/payment-methods/overview) can help your business expand its global reach and improve checkout conversion.\n\nIf you’re already using the [Card Element](https://docs.stripe.com/js/element/other_element?type=card) and want to migrate to the [Payment Element](https://docs.stripe.com/js/element/payment_element), follow our [migration guide](https://docs.stripe.com/payments/payment-element/migration).\n\n#### Note\n\nYou can have a single line [Card Element](https://docs.stripe.com/js/element/other_element?type=card) or use split Elements, such as [Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), and [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc). When referring to the Card Element, the information below applies to both styles.\n\n| Features | Payment Element | Card Element |\n| --- | --- | --- |\n| Accepts card payments |     |     |\n| Accepts card payments using Wallets (e.g., Apple Pay, Google Pay) |     |     |\n| Accepts payments with other payment methods |     |     |\n| Enables faster checkout with [Link](https://docs.stripe.com/payments/link) |     |     |\n| Customizable look and feel |     |     |\n| Handles all [Stripe supported card brands](https://docs.stripe.com/payments/cards#supported-card-brands) |     |     |\n| Handles [3D Secure authentication](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") |     |     |\n| Input style\\* | Split | Split and single-line |\n\n_\\* Using split input fields is more accessible than using a single line input_\n\n## Advanced scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to use the Card Element, see our guide on [accepting a payment](https://docs.stripe.com/payments/card-element).",
    "title": "Payment Element and Card Element comparison | Stripe Documentation",
    "description": "Learn more about the Payment Element and Card Element so you can decide which to use in your integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/products",
    "markdown": "# Explore all products | Stripe DocumentationThe Stripe Docs logo\n\n## Browse our guides and examples by product area.\n\nPayments\n\n[\n\nPaymentsOnline payments\n\n\n\n](https://docs.stripe.com/payments)[\n\nTerminalIn-person and omnichannel payments\n\n\n\n](https://docs.stripe.com/terminal)[\n\nConnectPayments for platforms\n\n\n\n](https://docs.stripe.com/connect)[\n\nRadarFraud and risk management\n\n\n\n](https://docs.stripe.com/radar)[\n\nClimateCarbon removal\n\n\n\n](https://docs.stripe.com/climate/faqs)[\n\nIdentityOnline identity verification\n\n\n\n](https://docs.stripe.com/identity)[\n\nFinancial ConnectionsConnect users' financial accounts\n\n\n\n](https://docs.stripe.com/financial-connections)\n\nFinance automation\n\n[\n\nBillingSubscriptions and recurring payments\n\n\n\n](https://docs.stripe.com/billing)[\n\nTaxSales tax and VAT automation\n\n\n\n](https://docs.stripe.com/tax)[\n\nRevenue RecognitionAccounting automation\n\n\n\n](https://docs.stripe.com/billing/revenue-recognition)[\n\nSigmaCustom reports\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-dashboard)[\n\nData PipelineData warehouse sync\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-warehouse)[\n\nAtlasStartup incorporation\n\n\n\n](https://docs.stripe.com/atlas)\n\nBanking as a service\n\n[\n\nIssuingCard creation\n\n\n\n](https://docs.stripe.com/issuing)[\n\nTreasuryBuilding blocks for financial services\n\n\n\n](https://docs.stripe.com/treasury)[\n\nCapitalBusiness financing\n\n\n\n](https://docs.stripe.com/capital/how-stripe-capital-works)\n\nPrebuilt components\n\n[\n\nPayment LinksNo-code payments\n\n\n\n](https://docs.stripe.com/payments/payment-links)[\n\nCheckoutPrebuilt, Stripe-hosted checkout page\n\n\n\n](https://docs.stripe.com/payments/checkout)[\n\nElementsSecure frontend UI components\n\n\n\n](https://docs.stripe.com/payments/elements)\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
    "title": "Explore all products | Stripe Documentation",
    "description": "Browse our guides and examples by product area.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/element/other_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/get-started/subscription-migrations",
    "markdown": "# Migrate your subscriptions to Stripe\n\n## Successfully migrate your existing subscriptions to Stripe\n\nYou can import existing [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") from third-party billing systems (such as Zuora, Recurly, Chargify, or Chargebee) into Stripe Billing. You can also migrate subscriptions from an in-house billing system or from a different Stripe account.\n\nTo begin migration, see [Migrate subscriptions to Stripe Billing](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions).",
    "title": "Migrate your subscriptions to Stripe | Stripe Documentation",
    "description": "Successfully migrate your existing subscriptions to Stripe",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/dashboard/mobile",
    "markdown": "# Stripe Dashboard mobile app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the mobile app version of the Stripe Dashboard.\n\nStripe offers a mobile application to access the Dashboard for both iOS and Android devices. Use the app to view business metrics, track and manage payments and customers, and initiate payouts. You can also accept in-person payments (such as Tap to Pay), create payment links, basic invoices, and subscriptions.\n\n## Download the mobile app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  If you haven’t already, [create a Stripe account](https://dashboard.stripe.com/register). You must have an active Stripe account to use the app.\n2.  Enable [two-factor authentication](https://support.stripe.com/questions/update-the-phone-number-for-two-step-authentication), and [verify your phone number](https://dashboard.stripe.com/settings/user) in the Dashboard.\n3.  Download the app based on your device:\n    *   [iOS on App Store](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-docs-mobile&mt=8)\n    *   [Android on Google Play](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard&pli=1)\n\n## App capabilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app is available in 14 languages, and automatically defaults to the device language set in your system preferences. If you manage a [Connect](https://docs.stripe.com/connect) business, the app is also available to connected accounts that have full access to the Stripe Dashboard.\n\n|     |     |\n| --- | --- |\n| [Monitor your business](https://docs.stripe.com/dashboard/mobile#monitor-business-metrics) | *   Dashboard charts<br>*   Payment and customer list, and detail screens<br>*   Push notifications for new payments, alerts, and daily summary<br>*   Search across your entire business<br>*   iOS lock screen widgets<br>*   Android home screen widgets |\n| [Accept online or in-person payments](https://docs.stripe.com/dashboard/mobile#accept-payments-on-mobile) | *   Tap to pay<br>*   Payment links (iOS only)<br>*   Invoices (basic creation only)<br>*   Subscriptions (iOS only)<br>*   Manual card entry |\n| [Manage payments](https://docs.stripe.com/dashboard/mobile#manage-payments) | *   Issue refunds<br>*   Activate, deactivate, or share payment links (iOS only)<br>*   Cancel a subscription (iOS only)<br>*   Send and view receipts |\n| [Create payouts](https://docs.stripe.com/dashboard/mobile#create-and-manage-payouts) | *   View balances<br>*   Initiate an instant or standard payout<br>*   Track the status of bank transfers |\n| [Create and manage customers](https://docs.stripe.com/dashboard/mobile#create-and-manage-customers) | *   Create or edit a customer<br>*   Add a card on file (iOS only)<br>*   Send an email |\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app only displays live mode transactions, and mobile app users can’t use test mode or view test data. Stripe users with the **View only** role can’t create payments, refunds, or payouts in the app. Inactive Stripe accounts and users with the **Support specialist** role can’t log in to the app. For more information, see [User roles](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Monitor business metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app’s home page has various charts providing account information. You can customize this page to stay informed about your financial data.\n\nThe Dashboard displays data in your default currency. If you receive payments in multiple currencies, Stripe home charts convert these to your default currency using sample exchange rates. These conversions are estimates and won’t exactly match with settled amounts because of fluctuating exchange rates.\n\n![Stripe home charts for business metrics.](https://b.stripecdn.com/docs-statics-srv/assets/mobile-app-metrics.8a84e7d07defcdf19b3074011cdfcf59.png)\n\nMobile app metrics\n\nTo explore and manage available charts for iOS:\n\n1.  Tap **Edit** next to the **Reports overview** title.\n2.  Add, remove, or reorder charts as needed.\n\nTo explore and manage available charts for Android:\n\n1.  On the **Home** tab, scroll down to the bottom, and click **Add or edit charts**.\n2.  Add, remove, or reorder charts as needed.\n\n### Push notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPush notifications are messages sent directly to a user’s device from a mobile app. To [enable push notifications from the app](https://support.stripe.com/questions/enabling-notifications-on-the-stripe-dashboard-mobile-app), you must allow notifications from Stripe in the settings of your phone.\n\nTypes of notifications include:\n\n*   Daily summary\n*   New payments\n*   New customers\n*   Disputed payments\n*   Deposited transfers\n\n### Widgets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWidgets are available on [iOS](https://support.apple.com/guide/iphone/add-edit-and-remove-widgets-iphb8f1bf206/17.0/ios/17.0) and [Android](https://developer.android.com/develop/ui/views/appwidgets/overview) to provide a faster way to manage your business metrics.\n\nTo add widgets to your iOS lock screen:\n\n1.  Touch and hold the **Lock Screen** until **Customize** button appears at the bottom of the screen\n2.  Tap **Customize**, then tap **Lock Screen**.\n3.  Select any of the 17+ metrics, and set the time range and account you want.\n4.  Tap **Add** or **Done**.\n\n| Widget type | iOS | Android |\n| --- | --- | --- |\n| Home |     | 4 metric widgets, such as:<br><br>*   Daily gross volume<br>*   Daily new payments<br>*   Daily new customers<br>*   Daily net volume |\n| Lock screen | 17 metric widgets, such as:<br><br>*   Monthly recurring revenue<br>*   Net volume from new sales<br>*   High risk payments<br>*   Dispute activity |     |\n\n## Accept payments on mobile![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can accept and manage in-person or online payments from the Stripe Dashboard mobile app, such as:\n\n| Payment capability | Description | iOS | Android |\n| --- | --- | --- | --- |\n| [Tap to pay](https://docs.stripe.com/no-code/tap-to-pay) | Accept in-person payments through a contactless card without needing a hardware reader |     |     |\n| [Manual card entry](https://support.stripe.com/questions/b7bd8ea6-d20c-40f8-a273-4d6c4902957a) | A transaction where you enter a customer’s card details and process it in the Stripe Dashboard |     |     |\n| [Invoices](https://docs.stripe.com/no-code/invoices) | Use invoices to collect one-time or recurring payments from a specific customer. |     |     |\n| [Payment links](https://docs.stripe.com/no-code/payment-links) (including QR codes) | Reusable links that take your customers to a prebuilt checkout page |     |     |\n| [Subscriptions](https://docs.stripe.com/no-code/subscriptions) | Recurring payments for your products or services |     |     |\n\nTo accept payments on mobile:\n\n1.  Verify if your [user role](https://docs.stripe.com/get-started/account/teams/roles) can accept payments. Users with the **Support specialist** and **View-only** roles can’t accept payments.\n2.  Confirm if your country [accepts in-person payment features](https://docs.stripe.com/terminal/overview#availability).\n3.  If you haven’t already, enable [2FA](https://support.stripe.com/questions/update-the-phone-number-for-two-step-authentication), and [verify your phone number](https://dashboard.stripe.com/settings/user).\n4.  Open the Stripe Dashboard mobile app, and tap the plus symbol ().\n5.  Select either:\n    *   **Charge a card or send an invoice**: To accept **[Tap to pay](https://docs.stripe.com/no-code/tap-to-pay)**, **Hosted Invoice**, or **Manually Charge Card**.\n    *   **Create a payment link**: To share a link or a QR code to a customer\n\n#### Note\n\nIf you want to accept a subscription: Navigate to the **Customers** tab, select a customer, and then tap the **create icon (+)** icon in the subscription row. Alternatively, tap the overflow menu (), and select **Create subscription**. You can only select existing products with a recurring price.\n\n## Manage payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can manage payments from your app:\n\n### Issue a refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Select a successful payment.\n3.  Navigate to the action bar at the bottom, and tap **Refund**.\n4.  Enter the amount you want to refund, and select if you want to make a partial refund.\n\n### Send and view receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Select a successful payment.\n3.  Navigate to the action bar at the bottom, tap the overflow menu (), and select **View receipt** or **Send receipt**. You can also send a receipt directly after accepting a Tap to Pay payment from the success screen. After you complete the payment, tap **Send receipt**.\n\n1.  Tap the **Payments** tab.\n2.  Tap **Payment Links**, and select the active payment link you want to change.\n3.  You can copy the link, generate a QR code, or open the payment link in the web Dashboard. If you deactivate a payment link, it immediately deactivates without a confirmation prompt. If you deactivate a payment link by accident, reactivate it by tapping **Activate** in the action bar at the bottom of the screen.\n\n### Cancel a subscription (iOS only)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Tap **Subscriptions**, and select an active subscription.\n3.  Navigate to the action bar at the bottom, and tap **Cancel subscription**.\n4.  Confirm if you want to cancel the subscription immediately or at the end of the billing period.\n\n## Create and manage payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Verify you have a [debit card or external account linked to your Stripe account](https://docs.stripe.com/get-started/account/linked-external-accounts#link-financial-account).\n    *   Currently, you can only link these accounts through the [web version](https://dashboard.stripe.com/settings/payouts) of the Stripe Dashboard.\n    *   If you want to use instant payouts, use a debit card or bank account that [supports instant payouts](https://docs.stripe.com/payouts/instant-payouts-banks).\n2.  Open the Stripe Dashboard mobile app on your device and log in.\n3.  Go to the **Balances** tab at the bottom of the screen. Alternatively, you can tap the plus symbol () at the top right of any tab and select **Pay out funds**.\n4.  Check your balance:\n    *   **Standard payouts**: If you have a positive balance, you can start the payout process by entering the amount you want to pay out. For more information, see [Receive payouts](https://docs.stripe.com/payouts).\n    *   **Instant payouts**: Funds acquired from card payments are available as soon as the charge is complete. ACH or bank debits are only available after the payment has settled in the Stripe account. For more information, see [Instant payouts for Stripe Dashboard users](https://docs.stripe.com/payouts/instant-payouts).\n5.  Complete your payout. The time it takes for funds to settle in the bank account depends on several factors, including whether you select a standard or instant payout:\n    *   **Standard payouts**: The time it takes for funds to appear in your account depends on your industry, country, and whether it’s your first payout. It takes around 7 days for funds to settle in the applicable bank account for your first payout.\n    *   **Instant payouts**: After Stripe verifies your account is eligible to send instant payouts, funds typically settle in the applicable bank account within 30 minutes.\n\n## Create and manage customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a new customer:\n\n1.  Tap the plus icon () at the top right of any tab, and select **Create a customer**.\n2.  Enter the customer’s name, email address, and a description.\n\nTo manage existing customers:\n\n1.  Tap the **Customer** icon () from the app’s navigation bar, and select a customer. You can view their past payments, subscriptions, invoices, and payment cards saved on file.\n2.  Navigate to the action bar at the bottom to:\n    *   Add a card on file\n    *   Send customers an email\n    *   Edit their details, or open the customer details in the web Dashboard",
    "title": "Stripe Dashboard mobile app | Stripe Documentation",
    "description": "Learn how to use the mobile app version of the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations",
    "markdown": "# Migrate your customer data to Stripe\n\n## Successfully migrate your customers' data to Stripe.\n\nMigrating your customer data to Stripe is a multi-step process. After you read through this guide, you’ll:\n\n*   Understand the Stripe migration process.\n*   Be able to scope the timeline for your migration.\n*   Know the integration elements required for a successful migration.\n*   Understand how to migrate payment details with minimal disruption to your users.\n\nIf you run into issues while trying to migrate customer data, contact [Stripe support](https://support.stripe.com/contact/login?email=true&subject=Migration+to+Stripe).\n\n## Build your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Develop your data migration plan, starting with new customers. Your end goal is to migrate 100% of new customers, then migrate existing customers.\n*   Design a process for customers to update their card information.\n\n## Learn about the migration process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Review Stripe’s [migration documentation](https://docs.stripe.com/get-started/data-migrations/pan-import).\n*   Contact your previous processor to understand their migrations process.\n\n## Plan a migration and connect with an existing processor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Identify which payment details you want to migrate.\n*   Identify which payment methods you want to migrate.\n*   Find out how many customer records you want to migrate.\n*   Plan a migration timeline that considers your previous processor, your customer count, and any upcoming deadlines.\n*   Send the Stripe Migrations team details about your previous processor, Stripe account number, number of records to be migrated, and types of payment methods that you plan to import.\n\n## The Stripe Migrations team ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Introduce your existing processor to Stripe’s Migrations team.\n*   Complete any action items or provide any additional information requested by Stripe or your existing processor’s migrations team.\n\n## Migrate and update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Follow communication between Stripe and your previous processor to ensure your team is prepared.\n*   Respond to any issues identified during migration.\n*   Look for an email from the Stripe Migration team with the JSON mapping file.\n*   Parse JSON mapping file and update your database accordingly.\n*   Implement a process for customers to update their card information.\n*   Design your remapping plan, and include [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") remapping where applicable.\n*   Begin charging existing customers on Stripe.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [The Customer object](https://docs.stripe.com/api/customers/object)\n*   [The Subscription object](https://docs.stripe.com/api/subscriptions/object)\n*   [Default payment source](https://docs.stripe.com/api/customers/object#customer_object-default_source)\n*   [Products and prices](https://docs.stripe.com/products-prices/overview)\n*   [Billing cycle anchor](https://docs.stripe.com/api/subscriptions/create#create_subscription-billing_cycle_anchor)",
    "title": "Migrate your customer data to Stripe | Stripe Documentation",
    "description": "Successfully migrate your customers' data to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/elements/link-authentication-element",
    "markdown": "# Link Authentication Element | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Link Authentication Element to integrate Link.\n\n[Link](https://stripe.com/payments/link) saves and autofills customer payment and shipping information. Customers can use different funding sources to pay with Link, including credit cards, debit cards, and US bank accounts. Learn more at [link.com](https://www.link.com/).\n\nUse the [Link Authentication Element](https://docs.stripe.com/js/element/link_authentication_element) to create a single email input field for both email collection and Link authentication.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet. To see how Link works, type in any email address into the email input.\n\n## Start with examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo see the Link Authentication Element in action, start with one of these examples:\n\n## Create the Link Authentication Element ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following code [creates](https://docs.stripe.com/js/elements_object/create_link_authentication_element) an instance of the Link Authentication Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM:\n\n`// Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  // Create an elements group from the Stripe instance passing in the clientSecret and enabling the loader UI. const elements = stripe.elements({clientSecret, loader});  // Create an instance of the Link Authentication Element. const linkAuthenticationElement = elements.create(\"linkAuthentication\");  // Mount the Elements to their corresponding DOM node linkAuthenticationElement.mount(\"#link-authentication-element\"); paymentElement.mount(\"#payment-element\");`\n\n## Retrieving email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the email address details using the `onChange` prop on the `linkAuthenticationElement` component. The `onChange` handler fires whenever the user updates the email field, or when a saved customer email is autofilled.\n\n`linkAuthenticationElement.on('change', (event) => {   const email = event.value.email; });`\n\n## Prefill customer data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element accepts an email address. Providing a customer’s email address starts the Link authentication flow as soon as the customer lands on the payment page using the [defaultValues](https://docs.stripe.com/js/elements_object/create_link_authentication_element#link_authentication_element_create-options-defaultValues) option:\n\n`// Create the Link Authentication Element with the defaultValues option const linkAuthenticationElement = elements.create(\"linkAuthentication\", {defaultValues: {email: \"foo@bar.com\"}});  // Mount the Link Authentication Element to its corresponding DOM node linkAuthenticationElement.mount(\"#link-authentication-element\");`\n\nIf you want to prefill additional customer data, add the [defaultValues.billingDetails](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues-billingDetails) object to the [Payment Element](https://docs.stripe.com/payments/payment-element). This prefills a customer’s name, phone number, and shipping addresses. By prefilling as much of your customer’s information as possible, you simplify Link account creation and reuse.\n\nThe following code shows a Payment Element with all of its values prefilled:\n\n`<PaymentElement   options={{     defaultValues: {       billingDetails: {         name: 'John Doe',         phone: '888-888-8888',         address: {           postal_code: '10001',           country: 'US',         }       },     },   }} />;`\n\n## Combine Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element interoperates with other elements. For instance, the following example uses the Link Authentication Element with the Address Element and Payment Element:\n\n![A checkout page that includes the Link Authentication Element, Address Element, and Payment Element.](https://b.stripecdn.com/docs-statics-srv/assets/lae-with-ae-pe.b70e0386757f6061d9b27c7211794173.png)\n\nUse the Link Authentication Element with other Elements to compose your checkout page\n\n## Appearance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the [Appearance API](https://docs.stripe.com/elements/appearance-api) to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the payment element checkout form.](https://b.stripecdn.com/docs-statics-srv/assets/appearance_example.e076cc750983bf552baf26c305e7fc90.png)\n\nUse the Appearance API to change the look and style of your Elements\n\nIn the following example, the “flat” theme overrides the default text color used for Elements:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat'   variables: { colorPrimaryText: '#262626' } };`",
    "title": "Link Authentication Element | Stripe Documentation",
    "description": "Use the Link Authentication Element to integrate Link.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/add-and-pay-out-guide",
    "markdown": "# Pay out money | Stripe DocumentationThe Stripe Docs logo\n\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n\n#### Note\n\nWhen adding funds to your balance, best practice is to use a manual [payout](https://docs.stripe.com/payouts \"payout\") schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#with-code-setup)\n\nInstall Stripe’s official libraries so you can access the API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#with-code-create-connected-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n\n#### Note\n\nThis guide uses connected accounts that use the Express Dashboard, which have certain [restrictions](https://docs.stripe.com/connect/express-accounts#prerequisites-for-using-express). You can evaluate [Custom accounts](https://docs.stripe.com/connect/custom-accounts) as an alternative.\n\n### 1\\. Customize your signup form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [platform settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), customize your Express signup form by changing the color and logos that users see when they click your [Connect](https://docs.stripe.com/connect \"Connect\") link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-form.4b13fc5edc56abd16004b4ccdff27fb6.png)\n\nDefault Express signup form\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/branding-settings-payouts.20c99c810389a4e7f5c55238e80a9fc8.png)\n\nBranding settings\n\n### 2\\. Create a connected account and prefill information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the `/v1/accounts` API to [create](https://docs.stripe.com/api/accounts/create) a connected account by specifying the [connected account properties](https://docs.stripe.com/connect/migrate-to-controller-properties), or by specifying the account type.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\n### 3\\. Create an account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate an [Account Link](https://docs.stripe.com/api/account_links) with the following arguments:\n\n*   `account`\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n### 4\\. Redirect your user to the account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect your user to this link. URLs from the [Account Links](https://docs.stripe.com/api/account_links) API are temporary and can be used only once because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the connected account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n### 5\\. Handle the user returning to your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to update testing URLs to HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listening to `account.updated` events.\n*   Calling the [Accounts](https://docs.stripe.com/api/accounts) API and inspecting the returned object.\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user is redirected to the `refresh_url` when:\n\n*   The link has expired (a few minutes have passed since the link was created).\n*   The link was already visited (the user refreshed the page or clicked back or forward in their browser).\n*   The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired.\n*   Your platform is no longer able to access the account.\n*   The account has been rejected.\n\nThe `refresh_url` should call [Account Links](https://docs.stripe.com/api/account_links) again on your server with the same parameters and redirect the user to the Connect Onboarding flow to create a seamless experience.\n\n### 6\\. Handle users that haven’t completed onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA user that’s redirected to your `return_url` might not have completed the onboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s account and check for `charges_enabled`. If the account is not fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the `details_submitted` parameter on their account to see if they’ve completed the onboarding process.\n\n[](#with-code-add-funds)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard. Click **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nSelect **Pay out connected accounts** to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n### Verify your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` as the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n### Create a top-up ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce verified, create a [top-up](https://docs.stripe.com/api#topups) to add funds to your account balance.\n\n`curl https://api.stripe.com/v1/topups \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for week of May 31\" \\  -d statement_descriptor=\"Weekly top-up\"`\n\nWhen you transfer funds, a statement descriptor appears on your banking statement for the transaction. The default statement descriptor is **Top-up**. You can customize the statement descriptor and internal description for the top-up.\n\n### View funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID in the format **tu\\_XXXXXX**, which you can see on the detailed view for the top-up.\n\n### Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfers](https://docs.stripe.com/get-started/account/add-funds) and are available in 1-2 business days.\n\n[](#with-code-pay-out-to-user)\n\nYou can transfer available funds to a connected account using the [API](https://docs.stripe.com/api/transfers). For example, make the following call to transfer 10 USD to an account:\n\n`curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1000 \\   -d currency=\"usd\" \\   -d destination=\"{{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nBy default, any funds that you transfer to a connected account accumulates in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and is paid out on a daily rolling basis. You can change the [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) as needed.\n\n[](#with-code-testing)\n\nFrom your [account Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), you can view an account and its balance.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-account-payout.94e15f1be4a11a54d18fc305433e50f4.png)\n\nUse the [test bank tokens](https://docs.stripe.com/connect/testing#testing-top-ups) to simulate flows for accounts and onboarding, payouts, and adding funds.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect payments then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide)\n*   [Manage connected accounts in the Dashboard](https://docs.stripe.com/connect/dashboard)\n*   [Debit a connected account](https://docs.stripe.com/connect/account-debits)\n*   [Integrate with the Express Dashboard](https://docs.stripe.com/connect/express-dashboard)\n*   [Collect information required for US taxes](https://docs.stripe.com/connect/account-capabilities#tax-reporting)",
    "title": "Pay out money | Stripe Documentation",
    "description": "Add money to your Stripe balance and pay out your sellers or service providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/a-b-testing",
    "markdown": "# A/B testing a payment method\n\n## Understand your experiment results![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your experiment begins, view its progress in the Stripe Dashboard.\n\n![A page with experiment results](https://b.stripecdn.com/docs-statics-srv/assets/experiment-report.4327bdbe4685ba68d9f90f3d024d6f84.png)\n\nA/B testing considers an experiment complete when two conditions have been met:\n\n*   Average revenue per session is [statistically significant](https://en.wikipedia.org/wiki/Statistical_significance). We consider results to be statistically significant when there’s less than a 5% probability that the result is due to a random chance. See [Experiment methodology](https://docs.stripe.com/payments/a-b-testing#experiment-methodology).\n*   The experiment has accrued enough sessions. This is a dynamic number based on the treatment versus control percentage you set during experiment creation.\n\nExperiment result metrics include:\n\n*   **Average revenue per session**: Average revenue per session is the total revenue divided by the total number of sessions. It shows the difference in revenue per session between your treatment and control groups, and is a summary of the overall results of your experiment. The total number of sessions includes both sessions that resulted in a purchase and sessions that didn’t result in a purchase. Due to the significant variations in conversion rates and average order values by payment method, we recommend using the Average revenue per session metric as a guiding metric when determining the overall success of the experiment.\n*   **Revenue at 100% of sessions**: Projected total revenue if the treatment group payment methods were offered to 100% of traffic across treatment and control.\n*   **Gross revenue**: Actual revenue (full purchase amount). This amount is influenced mainly by your treatment/control percentage selection.\n*   **Conversion rate**: Conversion rate is the number of sessions with a purchase divided by the total number of eligible sessions. Eligible sessions is defined as:\n    *   One or more treatment payment methods was eligible (for example, the buyer was in a country where the payment method is accepted)\n    *   The payment interface (Payment Element) was rendered to the buyer\n*   **Average order value**: Average order value is the average purchase amount for sessions where the buyer made a purchase.\n\n### Statistical significance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the indicators on the overview tables to understand statistical significance. The metrics display a green or yellow difference when the experiment has reached at least 80% of estimated required sessions.\n\nThere are three types of indicators:\n\n*   Gray indicators mean your experiment hasn’t accrued enough sessions to reliably determine statistical significance.\n*   Green indicators demonstrate a statistically significant increase between the treatment and control groups.\n*   Yellow indicators demonstrate a statistically significant decrease between the treatment and control groups.\n\n![A gray badge indicating there isn't statistical significance.](https://b.stripecdn.com/docs-statics-srv/assets/gray-indicator.5480d1fb0eab4d6a046c1bd10b5de350.png)\n\nBefore reaching statistical significance\n\n![A green badge indicating statistical significance.](https://b.stripecdn.com/docs-statics-srv/assets/green-indicator.2c1094ab3416c65174f86d0c24b27089.png)\n\nAfter reaching statistical significance\n\n### Conduct additional analysis ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can download raw data from the reporting page to further analyze your experiment results.\n\n#### Note\n\nWe recommend grouping by `experiment_session_id` to avoid double counting sessions for instances such as a page refresh. This is consistent with how the A/B test report calculates average revenue per session, conversion rate, and average order value.\n\n| Dimension | Description |\n| --- | --- |\n| occurred\\_at\\_day | The day (‘yyyyMMdd’) of the session. |\n| experiment\\_session\\_id | A unique, Stripe-generated ID for each experiment session. A session is based on the UserAgent, IP address, and date. |\n| is\\_treatment | A Boolean indicating whether outcome was assigned as treatment (1) or control (0). |\n| converted | A Boolean indicating whether this session converted (1) or not (0). |\n| payment\\_method | The actual payment method used for the purchase. |\n| converted\\_transaction\\_count | The number of individual transaction-level conversions in the user session. Usually this value is either 1 or 0, however, multiple conversions can occur within the same session if the same buyer makes multiple purchases within the same day. |\n| rendered\\_transaction\\_count | The number of individual transaction-level renders in the user session. This can be a number >1 if a buyer visits the purchase page multiple times (for example, reloads or comes back later in the day). |\n| amount\\_capturable | The total transaction amount. |\n| currency | The currency type used in this transaction (for example, USD, GBP, EUR). |\n| is\\_eligible\\_session | A Boolean indicating whether this session was eligible (1) or ineligible (0) for A/B testing. If this field returns a 0 (for example, no treatment payment methods were eligible), then this session isn’t included in any reported metrics like Average Order Value or Conversion Rate. |\n| buyer\\_countries | The country/countries associated with the user session. In most cases this is a single country, but there could be multiple if the buyer is traveling or changes their browser’s location settings. |\n| control\\_payment\\_method\\_types | The list of control payment methods that were eligible to be shown in this session. |\n| treatment\\_payment\\_method\\_types | The list of treatment payment methods that were eligible to be shown in this session. |\n| rendered\\_payment\\_methods | The list of payment methods that were available in the user session, including those hidden behind an overflow ‘show more’ selector. |\n| visible\\_payment\\_methods | The list of payment methods that were visible in the user session (not hidden behind an overflow, such as ‘show more’). |\n\n### Experiment methodology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA/B testing measures the [average treatment effect](https://en.wikipedia.org/wiki/Average_treatment_effect) (ATE) by comparing treatment and control outcomes. We consider an experiment statistically significant when there’s less than a 5% probability that the result is due to a random chance. In statistical terms, we use a [z-test](https://en.wikipedia.org/wiki/Z-test) to calculate differences between the treatment and control group at the 5% level, which is mechanically the same as checking whether the 95% confidence interval for the difference includes 0. To determine how many sessions are required to detect an impact, we run a power calculation based on your selected treatment and control percentage split. This power calculation returns the number of sessions required to have 80% power to detect a 1% difference between treatment and control at a 5% significance level.",
    "title": "A/B testing a payment method | Stripe Documentation",
    "description": "Launch an A/B test for a new payment method in Dashboard—no code required.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/docs/payments/payment-methods/overview",
    "markdown": "# Learn about payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Accepting more payment methods helps your business expand its global reach and improve checkout conversion.\n\nWe categorize payment methods into eight families:\n\n*   [Cards](#cards)\n*   [Bank debits](#bank-debits)\n*   [Bank redirects](#bank-redirects)\n*   [Bank transfers](#bank-transfers)\n*   [Buy now, pay later](#buy-now-pay-later)\n*   [Real-time payments](#real-time-payments)\n*   [Vouchers](#vouchers)\n*   [Wallets](#wallets)\n\nEach family has similar features, a single integration, and common checkout experiences. After you’ve integrated one payment method, you can add another within the same family with minimal changes to your integration.\n\nTo learn more about which payment methods are right for your business, see our [payment method guide](https://stripe.com/payments/payment-methods-guide).\n\n## Cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards are a common way for consumers and businesses to pay online or in person. Stripe supports global and local card networks. See the [card brands](https://docs.stripe.com/payments/cards#supported-card-brands) that Stripe supports.\n\n## Bank debits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank debits are commonly used for business-to-business and high-value consumer payments. Your business debits the customer’s bank account directly, with their permission. See [bank debits](https://docs.stripe.com/payments/bank-debits) to learn more.\n\n## Bank redirects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank redirects let customers pay online using their bank account, using a secure, intuitive checkout flow. They’re popular among European and Asian consumers and can improve conversion and reduce fraud. See [bank redirects](https://docs.stripe.com/payments/bank-redirects) to learn more.\n\nTo request access to one of our invite only payment methods, [contact us](https://support.stripe.com/contact).\n\n## Bank transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers or other businesses can use bank transfers to send money directly to your bank account and are common for accepting large payments from other businesses. In some countries, bank transfers are popular for consumer payments as well. See [bank transfers](https://docs.stripe.com/payments/bank-transfers) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Buy now, pay later ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBuy now, pay later payment methods help retailers reach customers that want to pay in installments. Your business is paid immediately and in full, and your customer pays nothing or a portion of the total cost at checkout. See [buy now, pay later](https://docs.stripe.com/payments/buy-now-pay-later) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Real-time payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReal-time payments let customers send money directly from their bank account or other funding source using an intermediary to authenticate, such as a phone number or other account. They’re a common payment type in Asia and Latin America. See [real-time payments](https://docs.stripe.com/payments/real-time) to learn more.\n\n## Vouchers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVouchers are a popular way for customers in Asia and Latin America to complete online purchases in-person. At checkout, customers receive a digital voucher with pending transaction details and then complete the payment at local stores. See [vouchers](https://docs.stripe.com/payments/vouchers) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Wallets ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWallets provide a fast and secure way for consumers to pay with a saved card or a stored balance. Wallets improve conversion and reduce fraud, especially on mobile. See [wallets](https://docs.stripe.com/payments/wallets) to learn more.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Guide to Payment Methods](https://stripe.com/payments/payment-methods-guide)\n*   [Supported card brands](https://docs.stripe.com/payments/cards#supported-card-brands)\n*   [Faster checkout with Link](https://docs.stripe.com/payments/link)\n*   [Wallets](https://docs.stripe.com/payments/wallets)\n*   [Vouchers](https://docs.stripe.com/payments/vouchers)",
    "title": "Learn about payment methods | Stripe Documentation",
    "description": "Accepting more payment methods helps your business expand its global reach and improve checkout conversion.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment",
    "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#redirect-customers)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create).\n\n`<html>   <head>     <title>Buy cool new product</title>   </head>   <body>     <!-- Use action=\"/create-checkout-session.php\" if your server is PHP based. -->     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nA Checkout Session is the programmatic representation of what your customer sees when they’re redirected to the payment form. You can configure it with options such as:\n\n*   [Line items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) to charge\n*   Currencies to use\n\nYou must populate `success_url` with the URL value of a page on your website that Checkout returns your customer to after they complete the payment. You can optionally also provide a `cancel_url` value of a page on your website that Checkout returns your customer to if they terminate the payment process before completion.\n\n#### Note\n\nCheckout Sessions expire 24 hours after creation.\n\nAfter creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`# This example sets up an endpoint using the Sinatra framework. # Watch this video to get started: [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc)  require 'json' require 'sinatra' require 'stripe'  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-checkout-session' do   session = Stripe::Checkout::Session.create({     line_items: [{       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,     }],     mode: 'payment',     # These placeholder URLs will be replaced in a following step.     success_url: '[https://example.com/success](https://example.com/success)',     cancel_url: '[https://example.com/cancel](https://example.com/cancel)',   })    redirect session.url, 303 end`\n\n#### Note\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers. You can turn payment methods on or off in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe evaluates the currency, payment method restrictions, then dynamically shows the set of supported payment methods in Checkout.\n\nConfirm your endpoint is accessible by starting your web server (for example, `localhost:4242`) and running the following command:\n\n`curl -X POST -is \"http://localhost:4242/create-checkout-session\" -d \"\"`\n\nYou should see a response in your terminal that looks like this:\n\n### Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou should now have a working checkout button that redirects your customer to Stripe Checkout.\n\n1.  Click the checkout button.\n2.  You’re redirected to the Stripe Checkout payment form.\n\nIf your integration isn’t working:\n\n1.  Open the Network tab in your browser’s developer tools.\n2.  Click the checkout button and confirm it sent an XHR request to your server-side endpoint (`POST /create-checkout-session`).\n3.  Verify the request is returning a 200 status.\n4.  Use `console.log(session)` inside your button click listener to confirm the correct data returned.\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#success-page)\n\nIt’s important for your customer to see a success page after they successfully submit the payment form. Host this success page on your site.\n\nCreate a minimal success page:\n\n`<html>   <head><title>Thanks for your order!</title></head>   <body>     <h1>Thanks for your order!</h1>     <p>       We appreciate your business!       If you have any questions, please email       <a href=\"mailto:orders@example.com\">orders@example.com</a>.     </p>   </body> </html>`\n\nNext, update the Checkout Session creation endpoint to use this new page:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[http://localhost:4242/success.html](http://localhost:4242/success.html)\" \\   --data-urlencode cancel_url=\"[http://localhost:4242/cancel.html](http://localhost:4242/cancel.html)\"`\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Click your checkout button.\n2.  Fill out the payment details with the test card information:\n    *   Enter `4242 4242 4242 4242` as the card number.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**.\n4.  You’re redirected to your new success page.\n\nNext, find the new payment in the Stripe Dashboard. Successful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment details page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n[](#additional-testing-resources)\n\nTo test your Stripe-hosted payment form integration:\n\n1.  Create a Checkout Session.\n2.  Fill out the payment details with a method from the following table.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**. You’re redirected to your `success_url`.\n4.  Go to the Dashboard and look for the payment on the [Payments page](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If your payment succeeded, you’ll see it in that list.\n5.  Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.\n\nLearn more about [testing your integration](https://docs.stripe.com/testing).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n### Test cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires 3D Secure 2 authentication for a successful payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\n### Apple Pay and Google Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can enable Apple Pay and Google Pay in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods). Apple Pay is enabled by default.\n\nCheckout’s Stripe-hosted pages don’t need integration changes to enable Apple Pay or Google Pay. Stripe handles these payments the same way as other card payments.\n\nNow that you have your basic integration working, learn how to [programmatically get a notification](https://docs.stripe.com/checkout/fulfillment) whenever a customer pays.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)\n*   [Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page)",
    "title": "Accept a payment | Stripe Documentation",
    "description": "Securely accept payments online.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bank-debits",
    "markdown": "# Bank Debits | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept bank debits with Stripe.\n\nWith bank debits, you can pull funds directly from your customer’s bank account for both one-time and recurring purchases. Bank debits are often used by:\n\n*   Businesses collecting recurring payments from other businesses.\n*   Retail and services businesses that want a low-cost alternative to cards for large consumer payments, like rent or tuition.\n\nBank debits might not be a good fit for your business if:\n\n*   You deliver goods immediately after checkout because payment confirmation takes 3-7 days.\n*   Your business is sensitive to disputes—consider other payment methods because some bank debit methods favor the customer during disputes.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initiate a bank debit, a customer enters their bank account details during checkout and gives you permission to debit the account. This permission is called a mandate.\n\n![Flow chart of the three step process the customer experiences. First, they select bank debit at checkout. Next the customer provides banking details and authorizes mandate. Finally, the customer gets notification that the payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.e4fcc05342cae882b39c41b497e5a24d.svg)\n\nTo reduce fraud with some bank debits, verify the bank account before the payment by confirming microdeposits or bank login. Verifying bank login can improve the user experience because customers pay by logging into their bank rather than entering bank account details.\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use a single integration for all bank debits that works across Stripe products. With [Stripe Checkout](https://docs.stripe.com/payments/checkout), [Payment Element](https://docs.stripe.com/payments/payment-element), and [Payment Links](https://docs.stripe.com/payment-links), you can enable bank debits right from the Dashboard with no integration work.\n\n1 Subscription mode isn’t supported.\n\n[Contact us](https://support.stripe.com/contact) to request a new bank debit method.\n\n## Migrating from the Sources, Tokens, or Charges APIs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your current bank debit integration uses the Sources, Tokens, or Bank Accounts API, we recommend following the appropriate migration guide to transition to [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"):\n\n*   [ACH migration guide](https://docs.stripe.com/payments/ach-debit/migrating-from-charges)\n*   For all other bank debit payment methods, follow the general [migration guide](https://docs.stripe.com/payments/payment-intents/migration)",
    "title": "Bank Debits | Stripe Documentation",
    "description": "Learn how to accept bank debits with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bank-redirects",
    "markdown": "# Bank redirects | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank redirects with Stripe.\n\nBank redirects let customers pay online using their bank account. They drive more than half of online commerce in Germany, the Netherlands, and Malaysia. Bank redirects are often used by:\n\n*   Retailers that want to improve conversion and reduce fraud with consumers in Europe and Asia Pacific.\n*   Software or service businesses collecting one-time payments from other businesses.\n\nBank redirects might not be a good fit for your business if you sell [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). Some bank redirects don’t support recurring payments.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, the customer is redirected to their online banking portal, logs in with their bank credentials, approves the transaction, and then returns to your site. Some bank redirects verify the user through SMS or other two-factor authentication for additional security.\n\n![Supported](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.d6b9be158ecbb4b70a85d2497da2e405.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve created a single integration for all bank redirects that works across Stripe products. With Stripe Checkout, you can add any bank redirect by changing one line of code.\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Subscriptions | Payment Element | Payment Links | Mobile Payment Element |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Bancontact](https://docs.stripe.com/payments/bancontact) | Belgium |     |     |     | Invite only |     |     |     |     |\n| [BLIK](https://docs.stripe.com/payments/blik) | Poland |     |     |     |     |     |     |     |     |\n| [EPS](https://docs.stripe.com/payments/eps) | Austria |     |     |     | Invite only |     |     |     |     |\n| [FPX](https://docs.stripe.com/payments/fpx) | Malaysia |     |     |     |     |     |     |     |     |\n| [giropay](https://docs.stripe.com/payments/giropay) | Germany |     |     |     |     |     |     |     |     |\n| [iDEAL](https://docs.stripe.com/payments/ideal) | Netherlands |     |     |     |     |     |     |     |     |\n| [P24](https://docs.stripe.com/payments/p24) | Poland |     |     |     | Invite only |     |     |     |     |\n| [Sofort](https://docs.stripe.com/payments/sofort) | Austria, Belgium, Germany, Italy, Netherlands, Spain, Switzerland |     |     |     | Invite only |     |     |     |     |\n| [TWINT](https://docs.stripe.com/payments/twint) | Switzerland |     |     |     |     |     |     |     |     |\n\n\\* Invoices and Subscriptions with PayNow only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n[Contact us](https://support.stripe.com/contact) to request a new bank redirect payment method.\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you currently use the Sources or Tokens API, see [migrating to PaymentIntents](https://docs.stripe.com/payments/payment-intents/migration) to use the latest integrations.",
    "title": "Bank redirects | Stripe Documentation",
    "description": "Learn about bank redirects with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bank-transfers",
    "markdown": "# Bank transfer payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank transfers and managing payments with the customer balance.\n\nBank transfers provide a safe way for customers to send money over bank rails. When accepting bank transfers with Stripe, you provide customers with a virtual bank account number that they can push money to from their own online bank interface or in-person bank branch. Stripe uses this virtual account number to automate reconciliation and prevent exposing your real account details to customers.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bank Transfers and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bank Transfers. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bank Transfers from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods, or want to learn more about how bank transfers work with invoicing and subscriptions, see the following guides:\n\n*   [Accept a bank transfer payment](https://docs.stripe.com/payments/bank-transfers/accept-a-payment)\n*   [Send an invoice with bank transfer instructions](https://docs.stripe.com/invoicing/bank-transfer)\n*   [Set up a subscription with bank transfers as a payment method](https://docs.stripe.com/billing/subscriptions/bank-transfer)\n\n## Customer balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnlike most payment methods, bank transfers don’t allow you to control the amount a customer sends to you, which means that customers might send too much or too little money by accident. To manage common overpayment and underpayment issues, Stripe holds your customer’s bank transfers in a [customer balance](https://docs.stripe.com/payments/customer-balance) that you can reconcile payments from. This allows you to track how much your customers owe, regardless of how much or how often they send funds. If funds are held in the customer balance for more than 75 days, Stripe automatically attempts to return the funds to the customer’s bank account. For further information on what happens when funds remain unreconciled, see the [reconciliation documentation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-unreconciled-funds).\n\n## International payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank transfers users in the United States can accept international wire transfers (SWIFT). International wire transfers may incur fees on the way to Stripe, which can result in an amount received that’s less than what the customer originally sent. Stripe-incurred fees appear on the balances page in the Dashboard, alongside other relevant Stripe fees. The amount shown in the cash balance is the amount that Stripe received from the customer.\n\nInternational transfers can take a longer period of time to settle into the customer balance.\n\nStripe doesn’t support refunds for international wires. You’re responsible for executing any refunds related to these payments.\n\n#### Note on currencies\n\nThe accounts that support international payments only support their own currency. For example, US accounts support SWIFT transfers in USD only.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund customer balance payments:\n\n*   Directly to the customer’s bank account\n*   Back to the customer’s cash balance, where the refund can be used towards another customer balance payment\n\nTo refund to the customer’s bank account, Stripe requires the customer’s bank account details. In some cases, Stripe receives these details when the customer transfers funds. When these details aren’t available, Stripe sends an email to the customer to collect bank account details and initiate a transfer when we receive those details.\n\nIf your customer has excess funds in their customer balance, you can initiate a return of funds through the Dashboard or the API. For more information, see [Refund bank transfer payments](https://docs.stripe.com/payments/customer-balance/refunding).\n\n## Funding instructions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to show bank account details to your customer before they make their first payment (for example, when they create their account), you can use the [Funding Instructions API](https://docs.stripe.com/payments/customer-balance/funding-instructions).\n\n## Sender information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can determine the sender details of an incoming bank transfer through either the Dashboard or the API. Those details can include the name of the sender, the reference, and the network through which the transfer arrived.\n\n1.  In the [Dashboard](https://dashboard.stripe.com/customers), navigate to the customer’s page.\n2.  Under **Payment Methods**, expand the cash balance tab.\n3.  Open the Cash Balance page by clicking **View balance details**.\n\n![Payment methods section](https://b.stripecdn.com/docs-statics-srv/assets/payment-methods-section.98d98636d90fbf8ea6e5834dcdde1133.png)\n\nPayment methods section\n\nOn the cash balance page, the **Transactions** section displays a list of the customer’s incoming and outgoing cash balance transactions.\n\n![List of all customer cash balance transactions](https://b.stripecdn.com/docs-statics-srv/assets/transactions-list.f8e2bee93047bd6c85021cfb3db52348.png)\n\nList of all customer cash balance transactions\n\nIncoming transfers have type **Funding**. Find the transfer you’re interested in and open its details page by clicking its description.\n\n![Funding details sender information](https://b.stripecdn.com/docs-statics-srv/assets/funding-details-sender-info.b78a278b7f04e003480c0d4308af206b.png)\n\nFunding details sender information\n\n## Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Stripe Connect](https://docs.stripe.com/connect/overview) can be used with bank transfers to process payments on behalf of connected accounts. [Connect](https://docs.stripe.com/connect \"Connect\") platforms can use bank transfers with [any type of charges](https://docs.stripe.com/connect/charges#types).\n\nThe [on\\_behalf\\_of attribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) isn’t supported.\n\n### Accepting bank transfer payments as the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Direct charges](https://docs.stripe.com/connect/direct-charges) require the connected account itself (not the platform) to have activated the bank transfers payment method—Connect platforms can use the [relevant bank transfers capability](https://docs.stripe.com/connect/account-capabilities#payment-methods) to determine whether this is the case for a connected account. [Standard Connect accounts](https://docs.stripe.com/connect/standard-accounts) can request the relevant capability from their Stripe Dashboard.\n\n### Activation process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe process varies by country, but in general for bank transfer payments, the [required information](https://docs.stripe.com/connect/required-verification-information) is the same as what’s necessary to activate a Stripe account for payments. If the account doesn’t fulfill all the required information, the capability remains `inactive` with any issues highlighted on the [capability object](https://docs.stripe.com/api/capabilities/object) in the `requirements.currently_due` and `requirements.disabled_reason` fields until these issues have been addressed. After all the highlighted issues are resolved, the capability’s `status` changes to `active`, unless there are issues activating the account in general, in which case Stripe sends the Connect platform owner an email.\n\n## Unsupported businesses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can’t accept payments for certain types of businesses. In addition to the [Restricted Business list](https://stripe.com/restricted-businesses), Stripe doesn’t support bank transfers if your business falls into any of the following categories:\n\n*   Automated Cash Disburse\n*   Manual Cash Disburse\n*   Miscellaneous and Specialty Retail Stores\n\n## Unsupported products and features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank transfers don’t support Payment Links.",
    "title": "Bank transfer payments | Stripe Documentation",
    "description": "Learn about bank transfers and managing payments with the customer balance.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/buy-now-pay-later",
    "markdown": "# Buy now, pay later | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about buy now, pay later methods with Stripe.\n\nBuy now, pay later methods let customers pay in installments over time. You’re paid immediately and in full and your customers pay nothing or a portion of the total at purchase time. Buy now, pay later methods are often used by:\n\n*   Retailers selling high value goods and services like luxury items or travel fares that want to boost conversion.\n*   Retailers selling low value goods and services that want to increase average cart size and reach new customers who might not have credit cards.\n*   Regional banks that allow consumers to split credit card payments over multiple billing cycles.\n\nBuy now, pay later methods might **not** be a good fit for your business if:\n\n*   Your customers are businesses. Buy now, pay later methods offered on Stripe are only supported for consumers.\n*   Your business relies on subscriptions or recurring purchases. Buy now, pay later methods don’t currently support [Invoicing](https://docs.stripe.com/invoicing) or [Subscriptions](https://docs.stripe.com/billing).\n\nRead our [Buy Now, Pay Later Guide](https://stripe.com/guides/buy-now-pay-later) for more information.\n\n## Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, the customer chooses to pay with a buy now, pay later service. Then the customer creates or logs into an account with the buy now, pay later provider. Next, the customer accepts or declines the terms of the repayment plan, and then returns to the business’ site.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.09ed159dfe639622d54b186cc7973db6.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Payment method | Customer country | Repayment options | Transaction limit | Payment Intents | Checkout | Connect | Payment Element | Payment Links | Mobile Payment Element | Invoicing | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Affirm](https://docs.stripe.com/payments/affirm) | Canada, United States | *   Pay in 4 interest-free installments<br>*   Monthly payments for up to 36 months | 50 USD minimum; 30,000 USD maximum or local equivalent\\* |     |     |     |     |     |     |     |     |\n| [Afterpay/Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) | Australia, Canada, New Zealand, United Kingdom, United States | *   Pay in 4 interest-free installments<br>*   Monthly USD payments for up to 12 months | 1 USD minimum; 4,000 USD maximum or local equivalent |     |     |     |     |     |     |     |     |\n| [Klarna](https://docs.stripe.com/payments/klarna) | Australia, Austria, Belgium, Canada, Czechia, Denmark, Finland, France, Germany, Greece, Ireland, Italy, Netherlands, New Zealand, Norway, Poland, Portugal, Spain, Sweden, Switzerland, United Kingdom, United States | *   Pay in 3 or 4 interest-free installments<br>*   Pay in 30 days<br>*   Pay now with stored payment details<br>*   Monthly payments for up to 36 months | 10 USD minimum or local equivalent. (5,000 USD+ for financing possible; maximum varies by customer) |     |     |     |     |     |     |     | [Beta](#) |\n| [Meses sin intereses](https://docs.stripe.com/payments/mx-installments) | Mexico | Extend payments over 3 to 24 months of billing cycles | [Minimum transaction](https://docs.stripe.com/payments/mx-installments#fees) amount of 100 MXN per month of extension |     |     |     |     |     |     |     |     |\n| [Zip](https://docs.stripe.com/payments/zip) | Australia, United States (Invite Only) | *   Zip Pay: Pay using a 1,000 AUD credit, repay in your own time<br>*   Zip Money: Pay in a minimum of 3 monthly interest-free installments<br>*   Pay in 4 installments | 0.01 AUD minimum. 50,000 AUD maximum for Australia or 35 USD minimum and 1,500 USD maximum for United States\\*\\* |     |     |     |     |     |     |     |     |\n\n## Adding on site messaging to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLet your customers know you accept one or more of these payment methods by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages.",
    "title": "Buy now, pay later | Stripe Documentation",
    "description": "Learn about buy now, pay later methods with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication",
    "markdown": "# Strong Customer Authentication readiness | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how the Strong Customer Authentication regulation affects your business and how to update your integration to support it.\n\n[Strong Customer Authentication (SCA)](https://stripe.com/guides/strong-customer-authentication), a rule in effect as of September 14, 2019, as part of PSD2 regulation in Europe, requires changes to how your European customers authenticate online payments. Card payments require a different user experience, namely [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), in order to meet SCA requirements. Transactions that don’t follow the new authentication guidelines may be declined by your customers’ banks.\n\nTo support SCA, you should:\n\n1.  Determine if your business is impacted\n2.  Decide which one of the SCA-ready products is right for your business\n3.  Make changes now to avoid declined payments\n\n#### Caution\n\nIf you use a third-party plugin, platform, or extension partner from the [Partners gallery](https://stripe.partners/), contact your Stripe partner to see what (if any) work you need to do to support SCA. Please [reach out](https://support.stripe.com/contact) if you have any questions. You can also see the [frequently asked questions](https://docs.stripe.com/strong-customer-authentication/sca-enforcement) for information on SCA enforcement.\n\n## Impacted businesses and payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpdate your Stripe integration for SCA if all of the following apply:\n\n*   Your business is based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") or you [create payments on behalf of connected accounts based in the EEA](https://docs.stripe.com/strong-customer-authentication/connect-platforms)\n*   You serve customers in the EEA\n*   You accept cards (credit or debit)\n\nWhile some low-risk transactions (based on the volume of fraud rates associated with the payment provider or bank) do not require authentication, banks can choose to not honor these exemptions and request that the customer complete authentication. Even if you’re primarily processing low-risk transactions, update your integration so your customers can complete authentication when requested by the bank. Stripe’s [new products and APIs](#preparing) help you claim these exemptions and maximize conversion by only requesting authentication when absolutely necessary. Learn more about [SCA exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\").\n\n## SCA-ready products and APIs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides prebuilt and customizable solutions to help you meet SCA requirements. Integrations that aren’t SCA-ready, like those using the legacy [Charges API](https://docs.stripe.com/payments/charges-api), will see high rates of declines as banks begin enforcing SCA.\n\nWhether you collect one-time payments or save cards for later reuse, Stripe has SCA-ready products that let us update your integration for future regulations, with minimal changes required by you.\n\n### One-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept card payments with the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") and Stripe’s new version of Checkout—a prebuilt, Stripe-hosted checkout flow that automatically handles SCA requirements for you. Checkout is customizable and lets you accept payments for one-time purchases and [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") on your website.\n\n*   [Use a prebuilt checkout page](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\n*   [Build a custom payment flow](https://docs.stripe.com/payments/accept-a-payment?integration=elements)\n\n### Reusing cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSave a card for later reuse with Stripe’s new Payment Intents and [Setup Intents APIs](https://docs.stripe.com/api/setup_intents \"Setup Intents API\"). You can also use Checkout—a prebuilt, Stripe-hosted checkout flow—to automatically handle SCA requirements, or use Stripe Billing to handle SCA for subscription models.\n\n*   [Use a prebuilt checkout page](https://docs.stripe.com/payments/save-and-reuse?platform=checkout)\n*   [Build a custom flow to save card details](https://docs.stripe.com/payments/save-and-reuse)\n*   [Use Billing for subscription models](https://docs.stripe.com/billing/migration/strong-customer-authentication)\n\n## SCA Migration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead the [SCA migration](https://docs.stripe.com/strong-customer-authentication/migration) guide to learn more about which products are best suited for you. For specific product recommendations based on common business scenarios, check out the [SCA payment flows](https://stripe.com/guides/sca-payment-flows) guide.",
    "title": "Strong Customer Authentication readiness | Stripe Documentation",
    "description": "Learn how the Strong Customer Authentication regulation affects your business and how to update your integration to support it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/wallets",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Wallets\n\n## Learn about wallet payments with Stripe.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can use wallets to pay online with a saved card or a digital wallet balance. Retailers often use wallets to:\n\n*   Reduce fraud and increase conversion on mobile\n*   Reach buyers in China, where wallets are the most popular way to pay\n\nWallets might not be a good fit for your business if you sell [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). Some wallets don’t support recurring payments.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers confirm the transaction by authenticating their wallet credentials at checkout. If using mobile, they can authenticate with fingerprint or face recognition, their mobile passcode, or by logging into their wallet app. On the web, they can also scan a QR code with their mobile phone to complete the transaction.\n\n### Customer-facing mobile flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-select-wallet.ae8fc72d300f1439a3a7a71fb2bf5044.svg)\n\nSelects wallet at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-authenticate.153e1ddb6c375274e7c82ee4bd2aeaf8.svg)\n\nEnters wallet credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-success.162cdd6fd7119df7cb8f7329741e1e4d.svg)\n\nGets notification that payment is complete\n\n### Customer-facing web flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects wallet at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-redirect.043807104eb6fd382652e3ea987daf95.svg)\n\nUses mobile to confirm payment\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nGets notification that payment is complete\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve created a single integration for all wallets that works across Stripe products, where Stripe Checkout, Link, Apple Pay, and Google Pay are automatically enabled.\n\n\\* Invoices and Subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your current integration uses the Sources or Tokens API, we recommend following the [migration guide](https://docs.stripe.com/payments/payment-intents/migration) to transition to Payment Intents and Payment Methods.",
    "title": "Wallets | Stripe Documentation",
    "description": "Learn about wallet payments with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/responding",
    "markdown": "# Responding to disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to effectively respond to disputes.\n\nWhen an account owner files a dispute against a payment, their bank alerts Stripe and Stripe notifies you through the following channels:\n\n*   Email\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks \"webhook\"))\n*   Push notification (if you’ve subscribed)\n\nEach of the dispute notification channels provides a link to the dispute’s details page in your Dashboard, where you can learn more about the reason for the dispute and take appropriate action.\n\nYou can see a detailed list of all disputed payments on the [Disputes tab of the Payments page](https://dashboard.stripe.com/disputes) in your Dashboard. To review or respond to a dispute, open its details page by selecting it in the list.\n\nYou can also use [Fraud Stripe Apps](https://marketplace.stripe.com/categories/fraud) to automate dispute management and handle chargebacks.\n\n#### Note\n\nWhen you receive a dispute notification, take action to resolve it before the deadline. If you don’t respond, you automatically lose the dispute and can’t retrieve the disputed funds.\n\n[](#review-reasons)\n\nWhen you get a dispute, the corresponding category or reason appears in your [Dashboard](https://dashboard.stripe.com/disputes) and as the value for the `reason` attribute of the [dispute](https://docs.stripe.com/api#dispute_object-reason) object.\n\nEach dispute category specifies different response requirements and recommendations to make it effective in addressing the root claim from the cardholder, so your first step is to review our response guidelines for the [category](https://docs.stripe.com/disputes/categories#dispute-category-types) of your dispute so you can collect the best set of evidence to counter the dispute claim.\n\n### Inquiries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInquiries appear as disputed payments in the Dashboard, but they actually represent a pre-dispute stage that’s typically issued when an account owner doesn’t recognize a transaction on their account. Respond in this stage to resolve any questions and prevent a formal dispute escalation, which saves you time, fees, and your rating with the card networks. For more information, see [Inquiries](https://docs.stripe.com/disputes/how-disputes-work#inquiries).\n\n#### Note\n\nIf an inquiry escalates to a chargeback, you must submit another response for the dispute.\n\n### Fraudulent Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Visa CE 3.0 Eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor fraudulent disputes with the Visa 10.4 (Card absent fraud) code, Stripe automatically evaluates your transaction history to determine eligibility with [Visa Compelling Evidence 3.0](https://docs.stripe.com/disputes/categories#visa-ce-30). If your dispute is eligible, we notify you in the Dashboard and in the dispute email. In these cases, we encourage [submitting evidence](#respond) because this eligibility typically translates to a significantly higher likelihood of overturning the dispute in your favor.\n\n#### Liability Shift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor fraudulent disputes that might be covered by the [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) rule, Stripe automatically provides most of the evidence, such as the Electronic Commerce Indicator (ECI) from [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n\n[\n\n## Understand the complaint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#understand)\n\nWhen possible, the Dispute details page provides you with a copy of the bank’s submission to Stripe based on the account owner’s claim. These are actual documents attached by card networks and can provide additional information about the disputed transaction, such as a text description from the account owner describing the specific complaint. When responding to the dispute, make sure to properly address the issue described in these files.\n\nIf the dispute is still open and the bank has provided these files, select **Review the claim details** under Step 1 of the checklist modal in the Dashboard to view them.\n\nThe Dispute details page might also provide you with a way to email the account owner. We recommend contacting them, as it might give you insight to better understand the complaint and help you decide how to proceed. Be sure to keep a record of all communication with your customer during this process, as it provides evidence to submit with your response.\n\n[](#decide)\n\nWhen you have a clear picture of the dispute details, decide whether to accept or challenge the dispute. Consider the following questions in your determination:\n\n*   Is the account owner’s claim valid?\n*   If not, do I have the evidence required to disprove the claim?\n*   Can I convince the account owner to withdraw their dispute if I resolve their complaint amicably, for example, by offering a store credit or a replacement item?\n*   Is the dispute [CE 3.0 Eligible](#visa-ce-30-eligibility)? If so, consider responding because Stripe provides most of the required evidence from your transaction history.\n*   Might the dispute be covered by the [liability shift](#liability-shift) rule? If so, consider responding with evidence on top of what Stripe automatically provides, such as the [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") outcome.\n\nWhen you’ve decided how to respond, select the corresponding button on the Dispute details page in your Dashboard:\n\n*   **Accept dispute** submits a response to the issuing bank affirming that you aren’t contesting the refunded amount.\n*   **Counter dispute** opens a form that guides you through the submission process, prompts you for evidence that is relevant to the dispute type and your response type, and allows you to easily upload supporting files.\n\nSee [Responding to disputes using the API](https://docs.stripe.com/disputes/api) if you prefer to handle disputes programmatically.\n\n[](#respond)\n\n#### Prepare your response carefully\n\nYou have only one opportunity to submit your response. Stripe immediately forwards your response and all supporting files to the issuing bank. You can’t edit the response or submit additional files, so make sure you’ve assembled all your evidence before you submit.\n\n1.  **Open the dispute response form**: Click **Counter dispute** to open Stripe’s dispute response form.\n    \n2.  **Tell us about the dispute**: In the first page of the form, tell us why you believe the dispute is in error and the product type of the original purchase. This information along with the dispute category helps Stripe recommend the most relevant evidence to support your challenge on the next page of the form. For example, if your counter to a customer’s claim that they canceled a subscription for an online service is that the customer agreed to a minimum term, it doesn’t make sense to ask you for shipping and tracking details. When your integration supports it, Stripe automatically captures the product type based on the original payment.\n    \n3.  **Assemble your evidence**: The second page of the form has a dynamic set of sections representing the most relevant details you can provide for your individual case.\n    \n    In the **Supporting Files**: section, use the File Upload tool to attach evidence that matches the checklist of evidence types relevant to your dispute type and counter argument. For each uploaded file, specify which type of evidence it satisfies. You can only submit one file per type of evidence, so if you have several files representing one type of evidence, combine them into a single, multi-page file.\n    \n    Consider the following guidelines to make sure your supporting files are effective:\n    \n    *   Consult the evidence recommendations for your specific [dispute category](https://docs.stripe.com/disputes/categories#dispute-category-types).\n        \n    *   For fraudulent disputes in particular, if your dispute is [Visa CE 3.0 eligible](#visa-ce-30-eligibility), look for the Required for CE 3.0 badge throughout the response form. In most cases, Stripe pre-populates these fields with the required data from your transaction history.\n        \n        *   If the field is pre-populated, don’t edit it because you might affect eligibility\n        *   If the field is empty, add the requested information, such as the product description\n        \n        If your dispute may be covered by the [liability shift](#liability-shift) rule, we populate [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") information such as the Electronic Commerce Indicator (ECI) automatically for you.\n        \n    *   Organize each piece of evidence according to the evidence type it satisfies - be as succinct as possible.\n        \n    *   Combine items of the same evidence type into a single file.\n        \n    *   Limit your evidence file size to the combined maximum of 4.5 MB.\n        \n    *   Limit your Mastercard evidence file length to the combined maximum of 19 pages.\n        \n    *   Banks evaluating the dispute won’t review any external content, so don’t include:\n        \n        *   Audio or video files\n        *   Requests to call or email for more information\n        *   Links to click for further information (for example, file downloads or links to tracking information)\n4.  **Background evidence**: The other sections of the second page vary depending on the dispute type and your answers in the first page. When your integration supports it, Stripe automatically captures the data for these sections and pre-populates both the API evidence object attributes and the form fields in the Dashboard. But if any of these fields aren’t pre-populated, include as much information as you can before you submit your response. These sections can include:\n    \n    *   Shipping details\n    *   Refund policy details\n    *   Customer details\n    *   Product details\n    \n    The more information your integration [collects and passes to Stripe](https://docs.stripe.com/disputes/prevention/best-practices#collect-information) when your customer makes a payment, the better your ability to prevent disputes and fraud from occurring, and challenge them effectively when they do.\n    \n5.  **Submit evidence**: Click the checkbox to acknowledge your understanding that your response is final. After you submit it, Stripe automatically puts the evidence you provide into a format accepted by the issuing bank and submits it for consideration. At this point, you can’t amend what you’ve submitted or provide any additional information, so make sure to include every relevant detail.\n    \n\n#### Note\n\nIn some cases, you might have multiple disputes associated with a single payment. If this occurs, consider responding to each dispute individually.\n\n[](#status)\n\nAfter you submit a response, the status of the dispute changes to `under_review`. When the issuer informs Stripe of its decision, we inform you of the outcome by email, in the `charge.dispute.closed` webhook event, and by updating the dispute status in the Dashboard and the `Dispute` API object to one of the following:\n\n*   `won` indicates that the bank decided in your favor and overturned the dispute. In this case, the issuing bank returns the debited chargeback amount to Stripe, and Stripe passes this amount back to you. For businesses in Mexico, the dispute fee might also be returned. Otherwise, the dispute fee isn’t returned.\n    \n*   `lost` indicates that the bank decided in the account owner’s favor and upheld the dispute. In this case, the refund is permanent and the dispute fee isn’t returned.\n    \n    In some cases, the bank provides additional details about the dispute decision. Select **View issuing bank response** under **Relevant documents** in the Dispute details to view them.\n    \n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Preventing disputes and fraud](https://docs.stripe.com/disputes/prevention)\n*   [Dispute monitoring programs](https://docs.stripe.com/disputes/monitoring-programs)\n*   [Calculating dispute rates](https://docs.stripe.com/disputes/measuring)",
    "title": "Responding to disputes | Stripe Documentation",
    "description": "Understand how to evaluate the aspects of a dispute that influence how you should respond. Then review the steps for how to submit the best response with the most convincing evidence.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/3d-secure",
    "markdown": "# 3D Secure authentication | Stripe DocumentationThe Stripe Docs logo\n\n## Reduce fraud and meet regulatory requirements through 3D Secure (3DS) authentication.\n\n[3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS) is an authentication method that provides an additional layer of authentication for credit card transactions, protecting against fraudulent actors. 3DS asks your customers to verify their identity with the card issuer during payment. In most scenarios, you direct your customer to a verification page on their bank’s site where they type in a password linked to the card or a code sent to their phone. Customers might recognize this method through the card networks’ brand names, like Visa Secure and Mastercard Identity Check.\n\nThe [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") regulation, as part of PSD2 in Europe and similar regulations in the UK, India and Australia, might require using 3DS for card payments. 3DS is optional in other regions but you can still use it as a tool to reduce fraud.",
    "title": "3D Secure authentication | Stripe Documentation",
    "description": "Reduce fraud and meet regulatory requirements through 3D Secure (3DS) authentication.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/setup-intents",
    "markdown": "# The Setup Intents API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the Setup Intents API for saving payment methods.\n\nUse the [Setup Intents API](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") to set up a payment method for future payments. It’s similar to a payment, but no charge is created. [Set up a payment method for future payments now](https://docs.stripe.com/payments/save-and-reuse).\n\nThe goal is to have payment credentials saved and optimized for future payments, meaning the payment method is configured correctly for any scenario. When setting up a card, for example, it may be necessary to authenticate the customer or check the card’s validity with the customer’s bank. Stripe updates the `SetupIntent` object throughout that process.\n\n![UI that collects card details but does not charge the card](https://b.stripecdn.com/docs-statics-srv/assets/reuse-si.2499c9ffdcfc8bd5d430e9a1809890bf.svg)\n\n## Saving and reusing payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Setup Intents API is useful for businesses that onboard customers but don’t charge them right away:\n\n*   A car rental company that collects payment method details before the customer rents the car and charges the card after the rental period ends\n*   A crowdfunding website that collects card details to be charged later, only if the campaign reaches a certain amount\n*   A utility company that charges a different amount each month based on usage but collects SEPA payment details before the first month’s payment\n\n#### Note\n\nYou can set up payment methods for future use with [Checkout](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) too.\n\n#### Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Save cards without making an initial payment](https://docs.stripe.com/payments/save-and-reuse)\n*   [Save bank details for SEPA Direct Debit payments](https://docs.stripe.com/payments/sepa-debit/set-up-payment)\n*   [Save bank details for BECS Direct Debit payments](https://docs.stripe.com/payments/au-becs-debit/set-up-payment)\n\n## Getting permission to save a payment method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. If you set up a payment method for future on-session payments, such as displaying the payment method on a future checkout page, make sure that you explicitly collect consent from the customer for this specific use. For example, include a “Save my payment method for future use” checkbox to collect consent. If you need to differentiate between payment methods saved only for offline usages and payment methods you can present to your customer for future on-session purchases, you can utilize the [allow\\_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) parameter on the PaymentMethod object.\n\nIf you set up a payment method for future off-session payments, you need permission. Creating an agreement (sometimes called a _mandate_) up front allows you to charge the customer when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to process payments, and let customers opt in. At a minimum, ensure that your terms cover the following:\n\n*   The customer’s permission to your initiating a payment or a series of payments on their behalf\n*   The anticipated frequency of payments (that is, one-time or recurring)\n*   How the payment amount will be determined\n\nSee recommended mandate text for [saving cards](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#collect-payment-details) or [saving SEPA bank details](https://docs.stripe.com/payments/sepa-debit/set-up-payment).\n\nFor users impacted by [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"), this agreement helps payments succeed without interruption. When you set up your integration to properly save a card, Stripe marks any subsequent off-session payment as a [merchant-initiated transaction](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") (MIT) so that your customers don’t have to come back online and authenticate. Merchant-initiated transactions require an agreement between you and your customer.\n\n## Increasing success rate by specifying usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) parameter tells Stripe how you plan to use payment method details later. For some payment methods, Stripe can use your `usage` setting to pick the most frictionless flow for the customer. This optimization is designed to increase the number of successful payments.\n\nFor example, credit and debit cards under European [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") regulation may require the customer to authenticate the card during the saving process. Setting `usage` to `off_session` properly authenticates a credit or debit card for off-session payments so that your customer doesn’t have to come back online and re-authenticate. So although it creates initial friction in the setup flow, setting `usage` to `off_session` can reduce customer intervention in later off-session payments.\n\nHowever, if you only plan to use the card when the customer is checking out, set `usage` to `on_session`. This lets the bank know you plan to use the card when the customer is available to authenticate, so you can postpone authenticating the card details until then and avoid upfront friction.\n\n| How you intend to use the card | usage enum value to use |\n| --- | --- |\n| On-session payments only | `on_session` |\n| Off-session payments only | `off_session` (default) |\n| Both on and off-session payments | `off_session` (default) |\n\nNote that `usage` is an optimization. A card set up for on-session payments can still be used to make off-session payments, but the bank is more likely to reject the off-session payment and require authentication from the customer. In either case, later authentication may still be required, so build a recovery process in your app. When an off-session card payment requires authentication, bring your customer back online to complete the payment.\n\nIf not specified, `usage` defaults to `off_session`. See how to create a SetupIntent on your server and specify the `usage`:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d usage=on_session`\n\n#### Note\n\nFollow the guidance on this page to ensure your integration handles cards that require [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). Correctly flagging transactions allows Stripe to claim correct SCA exemptions on your behalf to minimize the need for authentication with each payment.",
    "title": "The Setup Intents API | Stripe Documentation",
    "description": "Learn more about the Setup Intents API for saving payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods",
    "markdown": "# Payment Methods API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the API that powers a range of global payment methods.\n\nThe Payment Methods API allows you to accept a variety of payment methods through a single API. A [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) object contains the payment method details to create payments. With the Payment Methods API, you can combine a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"):\n\n*   With a [PaymentIntent](https://docs.stripe.com/api/payment_intents) to accept a payment\n*   With a [SetupIntent](https://docs.stripe.com/api/setup_intents) and a [Customer](https://docs.stripe.com/api/customers \"Customers\") to save payment details for later\n\n## Supported payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine which payment methods to use for specific locales, see the [guide to payment methods](https://stripe.com/payments/payment-methods-guide).\n\nThe guide includes available payment methods for different regions, a detailed description of each payment method’s characteristics, and the [geographic regions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets) where they are most relevant. You can enable any payment methods available to you in the [Dashboard](https://dashboard.stripe.com/). Activation is generally instantaneous and does not require additional contracts.\n\n## Customer actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n​​Some payment methods require your customer to take additional steps to complete the payment. The PaymentIntent object’s `next_action` parameter specifies the type of customer action.\n\nSome common actions that customers need to perform are:\n\n*   ​​Redirect to their bank’s online service to authenticate and approve the payment.\n*   Verify ownership of their account by providing a one-time code that you post to the Stripe API (for example, microdeposits).\n*   Push funds (for example, in the case for bank transfers) through their bank’s online service.\n\nNot all payment methods require additional customer actions. For example, card payments (excluding 3D Secure) require no additional authentication beyond collecting card details.\n\n#### Note\n\nFor payment methods that require customer action, listen to [webhooks](#webhooks) for notifications on whether a payment has succeeded or not.\n\n## Immediate or delayed notification of payment success ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods immediately return payment status when a transaction is attempted (for example, card payments) but other methods have a delay such as ACH debits. For those that immediately return payment status, the PaymentIntent status either changes to `succeeded` or `requires_payment_method`. A status of `succeeded` guarantees that you will receive the funds from your customers.\n\nPayment methods with delayed notification can’t guarantee payment during the delay. The status of the PaymentIntent object will be `processing` until the payment status is either successful or failed. It’s common for businesses to hold an order in a _pending_ state during this time, not fulfilling the order until the payment is successful.\n\n#### Note\n\n​​For payment methods with delayed notification, listen to [webhooks](#webhooks) for notifications on whether a payment has succeeded or not.\n\n## Single-use or reusable ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can reuse certain payment methods (for example, cards or bank debits) for additional payments without authorizing and collecting payment details again.\n\nYou should always set up reusable payment methods for future use to reduce the chance of future declines and payment friction (such as [authentication being required](https://docs.stripe.com/strong-customer-authentication)). Reusable payment methods can be [set up for future use when accepting a payment](https://docs.stripe.com/payments/save-during-payment) or [set up for future use without taking a payment](https://docs.stripe.com/payments/save-and-reuse).\n\nSingle-use payment methods (for example, some kinds of bank transfers) can’t be attached to customers because they’re consumed after a payment attempt.\n\n## Use webhooks to track payment status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [webhooks](https://docs.stripe.com/webhooks \"webhook\") for payment methods that either require customer action or when payment notification is delayed. Stripe sends the following events when the `PaymentIntent` status is updated:\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.processing` | The customer’s payment was submitted to Stripe successfully. Only applicable to payment methods with [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification). | Wait for the initiated payment to succeed or fail. |\n| `payment_intent.succeeded` | The payment succeeded. | Fulfill the purchased goods or services. |\n| `payment_intent.payment_failed` | The payment failed. | Send an email or push notification to request another payment method. |\n\n​​You can also use the following options instead of building a webhook handler to listen to events:\n\n*   Manually track the status of payments in the Stripe Dashboard, if your business accepts a low volume of orders from payment methods with delayed notification. The Dashboard allows you to [view all your Stripe payments](https://dashboard.stripe.com/test/payments), send email receipts, handle payouts, or retry failed payments.\n*   Use polling (for example, repeatedly retrieving a PaymentIntent so that you can check its status). Note that polling is significantly less reliable and may not work at scale. Stripe enforces rate limiting on API requests, so exercise caution if you use polling.\n*   Use a partner application to handle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n## The PaymentMethod object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA PaymentMethod contains reusable payment method details for creating payments (for example, card expiration date or billing address), it doesn’t include transaction-specific information (for example, amount, currency). A PaymentMethod is attached to a PaymentIntent to represent the [states of a payment lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle). Each PaymentMethod has a [type attribute](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) (for example, `\"type\": \"sepa_debit\"` ) and an additional hash whose name matches the type and contains information specific to the PaymentMethod type (for example, `\"sepa_debit\":{}`). Example of a `sepa_debit` PaymentMethod object:\n\n`{   \"id\": \"pm_123456789\",   \"object\": \"payment_method\",   \"billing_details\": {     \"address\": {...},     \"email\": \"jenny@example.com\",     \"name\": \"Jenny Rosen\",     \"phone\": \"+335555555555\"   },   \"sepa_debit\": {     \"bank_code\": \"37040044\",     \"branch_code\": \"94832\",     \"country\": \"FR\",     \"fingerprint\": \"ygEJfUjzWMGyWnZg\",     \"last4\": \"3000\"   },   \"type\": \"sepa_debit\",   (...) }`\n\n#### Note\n\nTo safely handle sensitive payment information and automatically handle customer actions, Stripe recommends that you create payment methods using [Stripe.js](https://docs.stripe.com/js#stripe-create-payment-method).",
    "title": "Payment Methods API | Stripe Documentation",
    "description": "Learn more about the API that powers a range of global payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/older-apis",
    "markdown": "# Older payment APIs | Stripe DocumentationThe Stripe Docs logo\n\n## Information about our older APIs and the newer APIs that replace them.\n\nWe’ve replaced some of our older APIs and no longer update their documentation.\n\n## Migrate to current APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe older APIs are limited. To get the latest Stripe features, migrate to the [Payment Intents](https://docs.stripe.com/payments/payment-intents), [Setup Intents](https://docs.stripe.com/payments/setup-intents), and [Payment Methods](https://docs.stripe.com/payments/payment-methods) APIs. See each individual API’s docs for specifics on migrating.\n\n## Deprecation of the Sources API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve deprecated support for local payment methods in the [Sources API](https://docs.stripe.com/sources) and plan to turn it off. If you currently handle any local payment methods using the Sources API, you must [migrate them to the current APIs](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll communicate more information about this end of support via email.\n\nWe’ve also deprecated support for card payments in the Sources API, but don’t currently plan to turn it off.\n\n## Older APIs that remain available![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough unsupported, these APIs aren’t going away. Until you upgrade your integration, you can still use these APIs:\n\n*   [Charges](https://docs.stripe.com/payments/charges-api)\n*   [ACH](https://docs.stripe.com/ach-deprecated)\n\n## Comparing the APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Older payment APIs | Stripe Documentation",
    "description": "Information about our older APIs and the newer APIs that replace them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/more-payment-scenarios",
    "markdown": "# More payment scenarios | Stripe DocumentationThe Stripe Docs logo\n\n## Find a payments integration to support your use case.\n\nThe [Payment Intents](https://docs.stripe.com/api/payment_intents/create) and [Setup Intents](https://docs.stripe.com/api/setup_intents/create) APIs handle any changing regulations and bank behaviors for you. Tell Stripe how you intend to use a payment method and we’ll route payments behind the scenes to improve your business’s payment acceptance rates.\n\n[](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Charge-later.28228850e63d988f4fd682d2e49ddb4d.svg)](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\nSecurely save payment details, charge them later.\n\n[](https://docs.stripe.com/payments/3d-secure \"3D Secure authentication\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Handle-authentication.214b18ba6fec04b5e60db52f98b49385.svg)](https://docs.stripe.com/payments/3d-secure \"3D Secure authentication\")\n\nLearn about 3D Secure and how to support it.\n\n[](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Accept-payment.d5a983eea468e3ce2bb8532a350bfcf9.svg)](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\n[Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\nBuild an integration where you can collect payment details on the client and confirm payments from the server.",
    "title": "More payment scenarios | Stripe Documentation",
    "description": "Find a payments integration to support your use case.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/integration-guides/b2b-payments",
    "markdown": "# B2B Payments integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build a B2B Payments integration with Issuing.\n\nBuild a US B2B Payments integration by using Stripe [Issuing](https://docs.stripe.com/issuing/how-issuing-works) to create cards for your business, employees, or contractors to make purchases on your behalf.\n\nBy the end of this guide, you’ll know how to:\n\n*   Fund your Issuing Balance\n*   Create virtual cards for your own business\n*   Use these cards to spend funds from your Issuing Balance\n\n[](#add-funds)\n\nTo spend money using cards, add funds to the Issuing balance on your account. This balance represents funds reserved for Issuing and is safely separated from your earnings, payouts, and funds from other Stripe products.\n\nYou can add funds from your [Dashboard](https://dashboard.stripe.com/balance/overview#issuing-summary) or using the [create top-up](https://docs.stripe.com/api/topups/create) endpoint.\n\n`curl https://api.stripe.com/v1/topups \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d destination_balance=issuing \\   -d amount=2000 \\   -d currency=usd \\   -d description=\"Top-up for Issuing, July 12, 2024\" \\   -d statement_descriptor=Top-up`\n\n[](#create-cardholders-cards)\n\n### Create a cardholder ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Cardholder](https://docs.stripe.com/api/#issuing_cardholder_object) is the company or business entity that’s authorized to use card funding by the Issuing balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address.\n\nThe following API call creates a new `Cardholder`:\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Company Card\" \\   --data-urlencode email=\"company@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d type=company \\  -d \"billing[address][line1]\"=\"123 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nStripe returns a `Cardholder` object that contains the information you provided and sends the `issuing_cardholder.created` webhook event.\n\n### Create a card ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a card and attach it to the `Cardholder` that you want to make the authorized user of the card.\n\nIn the following examples, we show you how to create a [virtual card](https://docs.stripe.com/issuing/cards/virtual). You can, however, create [physical cards](https://docs.stripe.com/issuing/cards/physical) and ship them to cardholders in live mode.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d type=virtual \\  -d cardholder=  {{CARDHOLDER_ID}}    `\n\nStripe returns a `Card` object on creation, and sends the `issuing_card.created` webhook event:\n\n`{   \"id\": \"ic_1NvPjF2SSJdH5vn2OVbE7r0b\",   \"object\": \"issuing.card\",   \"brand\": \"Visa\",   ...   \"status\": \"inactive\",   \"type\": \"virtual\" }`\n\nYou need to activate the card before a user can use it. While you can activate virtual cards in the same API call you used to create it, physical cards must be activated separately. When ready, activate the card by marking the `status` as `active`:\n\n`curl https://api.stripe.com/v1/issuing/cards/ic_1NvPjF2SSJdH5vn2OVbE7r0b \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d status=active`\n\nAt this point, there’s now an active card attached to a cardholder. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) to view the card and cardholder information.\n\n`{   \"id\": \"ic_1NvPjF2SSJdH5vn2OVbE7r0b\",   \"object\": \"issuing.card\",   \"brand\": \"Visa\",   ...   \"status\": \"active\",   \"type\": \"virtual\", }`\n\nTo learn more, see:\n\n*   [Read more about virtual cards](https://docs.stripe.com/issuing/cards/virtual).\n*   [Read more about physical cards](https://docs.stripe.com/issuing/cards/physical).\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nTo observe the impact of card activity on the associated balance, generate a test authorization. You can do this in the **Issuing page** of the Dashboard for the connected account, or with the following call to the [Authorization API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000 \\  -d authorization_method=chip \\  -d \"merchant_data[category]\"=taxicabs_limousines \\  -d \"merchant_data[city]\"=\"San Francisco\" \\  -d \"merchant_data[country]\"=US \\  -d \"merchant_data[name]\"=\"Rocket Rides\" \\  -d \"merchant_data[network_id]\"=1234567890 \\  -d \"merchant_data[postal_code]\"=94107 \\  -d \"merchant_data[state]\"=CA`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions). Note the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCapture the funds using the following code:\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
    "title": "B2B Payments integration guide | Stripe Documentation",
    "description": "Build a B2B Payments integration with Issuing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components",
    "markdown": "# Supported Connect embedded components | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about current and upcoming embedded components.\n\nAdd Connect embedded components to your page as HTML elements or as [React components](https://github.com/stripe/react-connect-js).\n\n## Available components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/supported-embedded-components/account-management \"Account management\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/account-management.d93cc532baac7ecd3cd6643d3eaeee55.png)](https://docs.stripe.com/connect/supported-embedded-components/account-management \"Account management\")\n\nShow account details and allow them to be edited.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding \"Account onboarding\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/account-onboarding.95f17633afced6796cc6759330f3ac06.png)](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding \"Account onboarding\")\n\nShow a localized onboarding form that validates data.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/balances \"Balances\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/balances.2ebd5dfb88dc3e4fadb490e726100256.png)](https://docs.stripe.com/connect/supported-embedded-components/balances \"Balances\")\n\nShow balance information and allow your connected accounts to perform payouts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/documents \"Documents\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/documents.d1d6714ebcd79d26c9729e618ce2e905.png)](https://docs.stripe.com/connect/supported-embedded-components/documents \"Documents\")\n\nShow a list of documents available for download.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/notification-banner \"Notification banner\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/notifications-banner.fd29bec4a8862dabbfab3d83106c2423.png)](https://docs.stripe.com/connect/supported-embedded-components/notification-banner \"Notification banner\")\n\nShow a banner that lists required actions for risk interventions and onboarding requirements.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payments \"Payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payments.ad0a2d5c6a2387f1ff595c6fcca96662.png)](https://docs.stripe.com/connect/supported-embedded-components/payments \"Payments\")\n\nShow a list of payments with export, refund, and dispute capabilities.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payment-details \"Payment details\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payment-details.c42997150069204957d8d1172849d66b.png)](https://docs.stripe.com/connect/supported-embedded-components/payment-details \"Payment details\")\n\nShow details of a given payment and allow users to manage disputes and perform refunds.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payouts \"Payouts\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payouts.2c5188c3132085b58dfc7fb661703d6f.png)](https://docs.stripe.com/connect/supported-embedded-components/payouts \"Payouts\")\n\nShow payout information and allow your users to perform payouts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payouts-list \"Payouts list\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payouts-list.36eb022bd4c62d9d6b6b6a4fde0714aa.png)](https://docs.stripe.com/connect/supported-embedded-components/payouts-list \"Payouts list\")\n\nShow a filterable list of payouts.\n\n## Beta components Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using private beta components, use beta versions of the Stripe SDK, as well as beta versions of the [@stripe/connect-js](https://github.com/stripe/connect-js) and [@stripe/react-connect-js](https://github.com/stripe/react-connect-js) SDKs.\n\nTo create an account session with private beta components, use the Stripe beta SDKs:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the client-side libraries for rendering the private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\n### Available beta components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/supported-embedded-components/app-install \"App install\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/app-install.fccc72ed33b532bf2fd402d98b65e214.png)](https://docs.stripe.com/connect/supported-embedded-components/app-install \"App install\")\n\nShow a button to install an App.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/app-viewport \"App viewport\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/app-viewport.21e004d1d15b4e4f5f9f68e41885b2fa.png)](https://docs.stripe.com/connect/supported-embedded-components/app-viewport \"App viewport\")\n\nShow a view from an installed App.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/financial-account \"Financial account\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/financial-account.31638aec874b6e0d0f9e11018c6027b9.png)](https://docs.stripe.com/connect/supported-embedded-components/financial-account \"Financial account\")\n\nShow details of a financial account.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/issuing-card \"Issuing card\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-card.b5f53c96f0cb56ed7febd28e1e215c1c.png)](https://docs.stripe.com/connect/supported-embedded-components/issuing-card \"Issuing card\")\n\nShow an individual issued card.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list \"Issuing cards list\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-cards-list.a28b1c42c54a8fe797ca1021c41a7efc.png)](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list \"Issuing cards list\")\n\nShow a table of all issued cards.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings \"Payment method settings\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-settings.77728dd382b9c523faadaad4cb562107.png)](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings \"Payment method settings\")\n\nShow a list of payment methods that connected accounts can manage and accept.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations \"Tax registrations\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/tax-registrations.e5aabe4b2c87144c5ee6ca4e548d162c.png)](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations \"Tax registrations\")\n\nShow and manage tax registrations from connected accounts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/tax-settings \"Tax settings\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/tax-settings.eacea24c508ca45de63cf8f5978965ff.png)](https://docs.stripe.com/connect/supported-embedded-components/tax-settings \"Tax settings\")\n\nAllow connected accounts to set up Stripe Tax.\n\n## Integration guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/stripe-apps/accounting-software-integrations \"Accounting integrations\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/accounting-integrations.609dfd768f506c87c8ef2e8012bfef77.png)](https://docs.stripe.com/stripe-apps/accounting-software-integrations \"Accounting integrations\")\n\nShow third-party accounting software integrations.\n\n[](https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance?integration=embedded \"Embedded finance\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Embedded_Finance.e4212392e3badc2f6de549998eb28f05.svg)](https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance?integration=embedded \"Embedded finance\")\n\nUse prebuilt UI components to embed Issuing and Treasury into your website.\n\n[](#migrating-v1-to-v2-beta)\n\n1.  Update your client library.\n    *   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n    *   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n    *   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n    *   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n    *   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n    *   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n    *   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n2.  Update the beta header used from `embedded_connect_beta=v1` to `embedded_connect_beta=v2`.\n3.  Specify the list of `components` to enable as a parameter when creating an [Account Session](https://docs.stripe.com/api/account_sessions/create).\n\n[](#migrating-v2-beta-to-ga)\n\nIf you’re using a beta component that’s now generally available, follow these steps:\n\n1.  Update your client library.\n    *   [Ruby](https://github.com/stripe/stripe-ruby) `>=11.1.0`\n    *   [Python](https://github.com/stripe/stripe-python) `>=9.2.0`\n    *   [PHP](https://github.com/stripe/stripe-php) `>=14.2.0`\n    *   [Node](https://github.com/stripe/stripe-node) `>=15.2.0`\n    *   [.NET](https://github.com/stripe/stripe-dotnet) `>=44.2.0`\n    *   [Java](https://github.com/stripe/stripe-java) `>=25.2.0`\n    *   [Go](https://github.com/stripe/stripe-go) `>=78.2.0`\n2.  Remove the `embedded_connect_beta` header.\n3.  Use the GA releases of the `@stripe/connect-js` and `@stripe/react-connect-js` npm packages.",
    "title": "Supported Connect embedded components | Stripe Documentation",
    "description": "Learn about current and upcoming embedded components.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-vscode",
    "markdown": "# Stripe for Visual Studio Code\n\n## Build, test, and use Stripe inside your editor.\n\nStripe’s [extension](https://marketplace.visualstudio.com/items?itemName=Stripe.vscode-stripe) for [Visual Studio Code](https://code.visualstudio.com/) lets you generate sample code, view API request logs, forward events to your application, and use Stripe within your editor.\n\nA new Stripe panel in the activity bar provides access to code snippets for several languages, adds [debug configurations](https://code.visualstudio.com/docs/editor/debugging#_redirect-inputoutput-tofrom-the-debug-target), and extends the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette) with common developer workflows.\n\nWith Stripe for VS Code, you can:\n\n*   [Get started quickly with a Stripe Sample.](#samples)\n*   [Forward Stripe webhook events to your local application.](#webhooks)\n*   [Stream request logs in real-time.](#monitor-logs)\n*   [Trigger new events while testing.](#webhooks)\n*   [Generate snippets for common scenarios.](#snippets)\n*   [Verify your source code doesn’t expose API keys.](#linter)\n*   [Quickly jump to the API reference.](#api-reference)\n*   [Easily access the Stripe Dashboard.](#dashboard-access)\n\n## Install Stripe for VS Code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nAs a prerequisite, ensure you have the [Stripe CLI](https://docs.stripe.com/stripe-cli#install) installed.\n\nYou can find the Stripe VS Code extension in the [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=Stripe.vscode-stripe). Click **Install** to add the extension to your editor.\n\n## Features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Get started quickly with a Stripe Sample ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Stripe Samples](https://github.com/stripe-samples) are built by Stripe, and provide all of the client and server code you need for common integration scenarios, such as creating a subscription with Stripe Billing.\n\nThe **Start with a Stripe Sample** button allows you to browse through the catalog and select the right language for your integration. The extension clones and opens the Sample in a new workspace, automatically populating your API keys in the .env file of the Sample.\n\n### Trigger and forward webhook events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can listen for incoming webhook events and forward them to your to your local machine in one of two ways:\n\n*   Click **Forward webhook events to your local machine** in the **Events** section.\n*   Run the command `Stripe: Forward webhook events to your local machine` from the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).\n\nThen, enter the localhost URL that you want to forward events to. If you’re using Connect, you can set a different URL for events from your Connect applications. If your localhost URLs use HTTPS, you can skip SSL certificate verification.\n\nYou can use the **Trigger new event** button to test your webhook integration with events from the Stripe API.\n\n#### Caution\n\nYou can only trigger events in test mode.\n\nYou can stream events created by members of your account in real time with the **Start streaming events** button. Clicking on an event entry under **Recent events** opens event details directly inside your editor.\n\n#### Note\n\nIf you’d like to resend an event, you can right click an event entry under **Recent events** or run a [Stripe CLI](https://docs.stripe.com/cli/events/resend) command: `stripe events resend <event>`.\n\n#### Stripe debug configuration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen forwarding events to your local machine, you may find yourself entering the same URLs over and over. To fix this, you can create a [debug configuration](https://code.visualstudio.com/docs/editor/debugging#_redirect-inputoutput-tofrom-the-debug-target) to save your forwarding setup, allowing you to start forwarding to your URLs with a single button.\n\nPlace the following configuration in a [launch.json](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) file, which VS Code uses to track debugging setup details. Then, select the configuration in the Run view. After selecting your configuration, press `F5` to quickly start forwarding events.\n\n`{   \"version\": \"0.2.0\",   \"configurations\": [     {       \"name\": \"Stripe: Webhooks listen\",       \"type\": \"stripe\",       \"request\": \"launch\",       \"command\": \"listen\",       \"forwardTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"forwardConnectTo\": \"[http://localhost:3000](http://localhost:3000/)\",`\n      \n\n`\"events\"`\n\n`: [\"payment_intent.succeeded\", \"payment_intent.canceled\"],         \"skipVerify\"  : true     }   ] }`\n\nYou can specify the `forwardTo` and `forwardConnectTo` parameters; these are the URLs on your local machine that you want to receive your account’s events and Connect events, respectively. The `events` parameter accepts an optional list to specify which events to receive. If you’re using HTTPS URLs, the `skipVerify` parameter accepts a Boolean to skip verifying SSL certificates.\n\n#### Compound configurations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can launch your local application and forward webhook events simultaneously using a [compound configuration](https://code.visualstudio.com/docs/editor/debugging#_compound-launch-configurations).\n\n`{   \"version\": \"0.2.0\",   \"configurations\": [     {       \"name\": \"Stripe: Webhooks listen\",       \"type\": \"stripe\",       \"request\": \"launch\",       \"command\": \"listen\",       \"forwardTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"forwardConnectTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"events\": [\"payment_intent.succeeded\", \"payment_intent.canceled\"],       \"skipVerify\": true     },     {       \"type\": \"node\",       \"request\": \"launch\",       \"name\": \"Node: Launch Program\",       \"program\": \"${workspaceFolder}/examples/standalone.js\",       \"skipFiles\": [\"<node_internals>/**\"]     }   ],   \"compounds\": [     {       \"name\": \"Launch: Stripe + API\",       \"configurations\": [\"Node: Launch Program\", \"Stripe: Webhooks listen\"]     }   ] }`\n\n### Monitor API request logs in real-time ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can stream API request logs created by members of your account in real time with the **Start streaming API logs** button. Clicking on a log entry under **Recent logs** opens log details directly inside your editor. From there, you can hover over the request ID to open the log in your Dashboard.\n\n#### Caution\n\nThe extension only delivers logs for requests made in test mode.\n\n### Code snippets for common Stripe scenarios ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can quickly generate code snippets for common scenarios (for example, creating a Checkout Session and redirecting the user to the browser) or basic API requests. After generating a snippet, you can tab through it to fill in your values.\n\n### Verify your source code doesn’t expose API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe built-in Stripe linter checks for [API keys](https://docs.stripe.com/keys) in your source code and marks them as problems if you unsafely expose them.\n\n#### Note\n\nThe linter treats unsafe use of test-mode keys as warnings and live-mode keys as errors.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/api_key_linter.99d5ec681ed1835e12ec8ff43a31df42.png)\n\n### Access the Stripe API reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can hover over a resource method to reveal a link to the [Stripe API reference](https://docs.stripe.com/api). This is useful for identifying parameters for an API request or the shape of an API response.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/api_reference_hover.7faf7deee997b0f54656ed4a4f842e14.png)\n\n### Access the Stripe Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Quick Links** section includes links to quickly jump to the Dashboard to manage API keys, webhooks, and other resources.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/quick_links_view.dd5362166ad40a383ca540bc62e71ed6.png)\n\n## Settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following configurations can be set in your [VS Code settings](https://code.visualstudio.com/docs/getstarted/settings):\n\n| Setting name | Description |\n| --- | --- |\n| `stripe.cliInstallPath` | Specifies the absolute install path for the Stripe CLI executable. Default: the default install path for the Stripe CLI |\n| `stripe.projectName` | Specifies the project name to read from for the Stripe CLI configuration. You can define a unique configuration for individual projects, or use the global configuration by default. See the [Stripe CLI reference](https://docs.stripe.com/cli/login) for more details. Default: `default` |\n| `stripe.telemetry.enabled` | Specifies whether to enable Stripe telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting). Default: `true` |\n\n## Commands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe extension supports various commands to access features through the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette). To see the full list of supported commands, open the command palette and type `Stripe`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/command_palette.ee0cb66b2fbbc0c2e981e1340815e57e.png)\n\n## Contributing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe VS Code is an open-source project under the MIT License. Contributions to the project are welcome. For details on how to contribute to the project, check out the [vscode-stripe](https://github.com/stripe/vscode-stripe) project on GitHub.\n\n## Feedback ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFeel free to provide feedback or submit feature requests through the project’s [issue tracker](https://github.com/stripe/vscode-stripe/issues/new).",
    "title": "Stripe for Visual Studio Code | Stripe Documentation",
    "description": "Build, test, and use Stripe inside your editor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/file-upload",
    "markdown": "# File upload guide | Stripe DocumentationThe Stripe Docs logo\n\n## Use the File Upload API to securely send dispute evidence, identification documents, and more to Stripe.\n\nWhen you upload a file to Stripe using the API, a file token and other information about the file is returned. The token can then be used in other API calls. This guide provides a detailed walk-through of this process.\n\n## Uploading a file![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upload a file, send a `multipart/form-data` request to **https://files.stripe.com/v1/files**. Note that the subdomain **files.stripe.com** is different than most of Stripe’s API endpoints. The request should specify a `purpose` and a `file`. The following example uploads a file located at **/path/to/a/file.jpg** on your local file system with the purpose `dispute_evidence`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -F \"file\"=\"@/path/to/a/file.jpg\" \\   -F \"purpose\"=\"dispute_evidence\"`\n\nThe following example uploads a file using our Android SDK with the purpose `dispute_evidence`:\n\n`class CheckoutActivity : AppCompatActivity() {     private val stripe: Stripe by lazy {         Stripe(this,` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`)     }      private fun uploadFile(file: File) {         stripe.createFile(             StripeFileParams(                 file,                 StripeFilePurpose.DisputeEvidence             ),             callback = object : ApiResultCallback<StripeFile> {                 override fun onSuccess(result: StripeFile) {                     // File upload succeeded                 }                  override fun onError(e: Exception) {                     // File upload failed                 }              }         )     } }`\n\nThere are [several valid purpose](https://docs.stripe.com/api#create_file-purpose) values, each with file format and size requirements.\n\n| Purpose | Description | Supported mimetypes | Max size | Expiry | Downloadable |\n| --- | --- | --- | --- | --- | --- |\n| `account_requirement` | Additional documentation requirements that can be requested for an account. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `business_icon` | A business icon. | JPEG  <br>PNG  <br>GIF | 512KB | NEVER | true |\n| `business_logo` | A business logo. | JPEG  <br>PNG  <br>GIF | 512KB | NEVER | true |\n| `customer_signature` | Customer signature image. | JPEG  <br>PNG  <br>SVG | 4MB | 7 days | true |\n| `dispute_evidence` | Evidence to submit with a dispute response. | PDF  <br>JPEG  <br>PNG | 5MB | 9 months | true |\n| `identity_document` | A document to verify the identity of an account owner during account provisioning. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `pci_document` | A self-assessment PCI questionnaire. | PDF | 16MB | NEVER | true |\n| `tax_document_user_upload` | A user-uploaded tax document. | PDF  <br>CSV  <br>JPEG  <br>PNG  <br>XLSX  <br>DOCX | 16MB | NEVER | true |\n| `additional_verification` | Additional verification for custom accounts. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `terminal_reader_splashscreen` | Splashscreen to be displayed on Terminal readers. | PNG  <br>JPEG  <br>GIF | 4.194304MB | 1 year | true |\n\n#### Caution\n\n`identity_document` images also need to be smaller than 8,000px by 8,000px.\n\nThe MIME type of the file you wish to upload must correspond to its file format.\n\n| File format | MIME type |\n| --- | --- |\n| APK | **application/vnd.android.package-archive** |\n| CSV | **text/csv** |\n| DOCX | **application/vnd.openxmlformats-officedocument.wordprocessingml.document** |\n| GIF | **image/gif** |\n| HTML | **text/html** |\n| JPEG | **image/jpeg** |\n| JSON | **application/json** |\n| JSONL | **application/jsonl** |\n| MARKDOWN | **text/markdown** |\n| PDF | **application/pdf** |\n| PEM | **application/x-pem-file** |\n| PNG | **image/png** |\n| SVG | **image/svg+xml** |\n| TIFF | **image/tiff** |\n| TSV | **text/tab-separated-values** |\n| TXT | **text/plain** |\n| WEBP | **image/webp** |\n| XLS | **application/vnd.ms-excel** |\n| XLSM | **application/vnd.ms-excel.sheet.macroEnabled.12** |\n| XLSX | **application/vnd.openxmlformats-officedocument.spreadsheetml.sheet** |\n| XML | **application/xml** |\n| ZIP | **application/zip** |\n\n#### Caution\n\nAny Microsoft Office documents containing VBA macros will be rejected due to security concerns.\n\nA successful request returns a [file](https://docs.stripe.com/api/files/object) object.\n\n## Retrieving a File API resource![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve the API resource for a File, make a GET request to the **/v1/files** endpoint of the **files.stripe.com** subdomain providing the file upload ID:\n\n`curl https://files.stripe.com/v1/files/`\n\n`{{FILE_ID}}`\n\n `\\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n## Downloading File Contents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the file purpose allows downloading the file contents, then the [file](https://docs.stripe.com/api/files/object) includes a non-null `url` field indicating how to access the contents. This url requires authentication with your Stripe API keys.\n\n`curl https://files.stripe.com/v1/files/`\n\n`{{FILE_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\nIf you want unauthenticated access to a file whose purpose allows downloading, then you can produce anonymous download links by creating a [file\\_link](https://docs.stripe.com/api#file_links).\n\n`curl https://api.stripe.com/v1/file_links \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n  `-d file=  {{FILE_ID}}`\n\nThe file\\_link resource has a `url` field that will allow unauthenticated access to the contents of the file.\n\n## Using a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a file is uploaded, the file upload ID can be used in other API requests. For example, to attach an uploaded file to a particular dispute as evidence:\n\n`curl https://api.stripe.com/v1/disputes/`\n\n`{{DISPUTE_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc -d \"evidence[receipt]\"=  {{FILE_ID}}`\n\nNote that you can only use an uploaded file in a single API request.\n\n## Handling Upload Errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you use the File API to upload a PDF document, we run it through a series of checks to validate that it is correctly formatted and meets PDF specifications. We return an error for uploads that fail any of our checks.\n\nTry the following to fix errors that we detect:\n\n*   Remove annotations or additional media you added to the document.\n*   If you cannot remove your annotations or media, or if you combined several PDFs into one, try using your computer’s Print to PDF function to create a fresh document.\n    *   [Print to PDF with macOS](https://support.apple.com/guide/mac-help/save-a-document-as-a-pdf-on-mac-mchlp1531/mac)\n    *   [Print to PDF with Adobe Acrobat](https://helpx.adobe.com/acrobat/using/print-to-pdf.html)",
    "title": "File upload guide | Stripe Documentation",
    "description": "Use the File Upload API to securely send dispute evidence, identification documents, and more to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/dev-tools-csat",
    "markdown": "# Feedback on your developer experience\n\n## Tell us about your experience with Stripe developer tools.\n\nSelect the developer tool you would like to provide feedback on\n\nRate your experience with this developer tool\n\nExtremely dissatisfied\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\nExtremely satisfied\n\nTell us why you chose this rating\n\nMay we contact you for questions? If so, please provide your name and email\n\nFull name\n\nEmail",
    "title": "Feedback on your developer experience | Stripe Documentation",
    "description": "Tell us about your experience with Stripe developer tools.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/partners/training-and-certification",
    "markdown": "# Stripe certification for partners | Stripe DocumentationThe Stripe Docs logo\n\n## Become a Stripe-certified architect or developer.\n\nWe offer two types of Stripe certifications that to partners: architect and developer. Partners can achieve associate or professional-level certifications for each type. Stripe certifications let partners gain Stripe expertise and leverage their knowledge with in-depth training. After completing the [additional requirements](https://docs.stripe.com/partners#requirements), these certifications can also help you become a [Stripe verified partner](https://docs.stripe.com/partners#verified-partners). Regardless of the [partner track](https://docs.stripe.com/partners#partner-tracks), all partners can complete certifications.\n\nTo become a verified services partner, partners need two certifications, one of which must be a professional-level certification (the other can be associate or professional-level).\n\nWith our [Fundamentals](https://www.stripe.training/page/sales) course, Stripe also offers optional training for sales teams to learn the fundamentals of online payments, how Stripe products address business needs, and how to go to market with Stripe.\n\n## Associate architect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Associate Architect Certification](https://www.stripe.training/study-guide-associate-architect-certification/1569115) is for professionals with 1 year of experience or more designing Stripe implementations. Associate architects have expertise in online payments, regulatory compliance, fraud, and API fundamentals. They also have a good understanding of Stripe Payments, Radar, Connect, and Billing. The certification covers best practices and recommended implementation methods to solve common business problems.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 90 minutes\n    \n*   **Format:** 45-50 multiple choice questions\n    \n*   **Optional certification prep time:** 16 hours (Stripe Fundamentals course) plus 6 hours (implementation training)\n    \n*   **Languages:** English and Japanese\n    \n\nFor architects experienced in Stripe implementations, we recommend the training (but it’s not required).\n\n## Professional implementation architect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Professional Implementation Architect Certification](https://www.stripe.training/page/architect) is for professionals with 2 or more years of experience designing and managing Stripe implementations, with knowledge of account structures, funds flows, third-party integrations, and data migration. Professional-level architects can apply business solutions and lead Stripe implementations.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 90 minutes\n    \n*   **Format:** 45-50 multiple choice questions\n    \n*   **Optional certification prep time:** 16 hours (Stripe Fundamentals) plus 7.5 hours (implementation training)\n    \n\nFor architects experienced in Stripe implementations, we recommend the training (but it’s not required).\n\n## Associate developer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Associate Developer Certification](https://www.stripe.training/associate-developer) is for full-stack developers new to Stripe. It validates a developer’s ability to use no-code and low-code Stripe tools to address use cases in a hands-on coding environment. Associate developers practice integrating Stripe’s low-code solutions, such as [Payment Links](https://docs.stripe.com/payment-links).\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 6-8 hours (exam must be completed within 30 days of starting)\n    \n*   **Format:** [Coding challenge](https://www.stripe.training/associate-developer)\n    \n*   **Available languages:** React or HTML (front-end) and Node.js, Python, PHP, or Java (back-end)\n    \n*   **Optional certification prep time:** 16 hours\n    \n\nFor developers experienced in creating Stripe integrations, we recommend the training (but it’s not required).\n\n## Professional developer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Professional Developer Certification](https://www.stripe.training/stripe-certified-professional-developer) is for experienced full-stack developers who have previously used Stripe. It validates your ability to implement more complex payments solutions using Stripe products. Professional developers can use Stripe’s flexible [Payment Element](https://docs.stripe.com/payments/payment-element) and core payment APIs to build integrations for a variety of common business flows.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 15-20 hours (exam must be completed within 30 days of starting)\n    \n*   **Format:** [Coding challenge](https://www.stripe.training/stripe-certified-professional-developer)\n    \n*   **Available languages:** React or HTML (front-end) and Node.js, Python, PHP, Ruby, or Java (back-end)\n    \n*   **Optional certification prep time:** 16 hours\n    \n\nFor developers experienced in creating Stripe integrations, we recommend the training (but it’s not required).",
    "title": "Stripe certification for partners | Stripe Documentation",
    "description": "Become a Stripe-certified architect or developer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/partners",
    "markdown": "# Stripe Partner Ecosystem | Stripe DocumentationThe Stripe Docs logo\n\nDig deeper into each program benefit.\n\n### Build ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDevelop solutions and services with Stripe.\n\n#### Technical training and certification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides training, instructor-led online events, and workshops for Stripe partners to gain architect and developer certifications. Partners signal their expertise within the Stripe Partner Ecosystem by being certified. Learn more about [Stripe certification for partners](https://docs.stripe.com/partners/training-and-certification).\n\n#### Roundtables with product management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe regularly hosts a series of invite only roundtables and delivers online events with a select number of eligible partners to discuss the product roadmap. During these roundtables, partners can gain visibility into product plans, uncover industry trends, and understand Stripe’s go-to-market priorities.\n\n#### Solution blueprints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can draw from Stripe’s library of prebuilt solution blueprints that visually document and capture business requirements and map the end-state to different Stripe solutions. Stripe segments these blueprints across business models such as marketplaces, e-commerce and DTC, B2B SaaS, and embedded payments. Additionally, Stripe can provide blueprints for common third-party integrations such as CRM, ERP, and e-commerce platforms.\n\nThese assets can help partners present complex topics like money movement in multiple currencies across countries and provide clarity and value to your users.\n\n#### Investment funding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAvailable to partners with an assigned Stripe partner development manager, you can use this fund to build solutions and support repeatable business cases. The investment fund has four general categories of business cases: competitive migrations, API modernization, pre-sales workshops, and proof of concepts.\n\nIf partners have unique ideas beyond these four business cases, they can reach out to their partner development manager to see if their concept qualifies for our investment fund.\n\n#### GitHub access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track have access to the [Stripe Apps GitHub](https://github.com/stripe/stripe-apps) to submit tickets, track request progress, and engage with the apps technical teams.\n\n#### Discord channel access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track can engage with Stripe and other app developers in our [Discord channel](https://discord.com/invite/stripe). Search `Stripe Apps` to engage with our community.\n\n#### Apps product roadmap preview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track might be eligible to access Stripe Apps platform roadmap previews. Product roadmap reviews occur regularly and might cover new features, how to gain early access to new APIs, and extensibility opportunities.\n\n### Market ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccelerate your marketing campaigns with prebuilt campaigns, customizable assets, and co-marketing funds.\n\n#### Marketing content, campaign assets, how-to guides, and templates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMarket with Stripe using our “campaigns in a box” and solution toolkits. Stripe provides resources for partners such as messaging frameworks, templated blogs, emails, and social content that you can customize to launch integrated campaigns that drive demand.\n\n#### Stripe verified partner badge and co-branding guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can download the Stripe Verified Partner badge (used externally to promote our partnership) from the partner portal. The Stripe Verified Partner badge unlocks co-marketing benefits and amplification of partner services and offerings in the partner directory. Stripe provides partners with complete guidelines on co-branding with Stripe.\n\nStripe verified partners are eligible to be featured across Stripe’s social media channels, including our LinkedIn page, and have their message amplified to Stripe’s customers and community.\n\n#### Marketing advisory workshops and funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the embedded payments track are eligible to receive one-on-one consultations with the Stripe marketing team to discuss insights, best practices, and receive recommendations about how to improve acquisition, activation, and lifecycle marketing strategies. By participating in a workshop, partners agree to staff a dedicated marketing resource with the capacity to execute a marketing plan within 90 days. Partners can request marketing advisory funds (MAF) to cover the cost of marketing activities recommended from the workshop.\n\n#### Market development funds (MDF) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can request MDF to help fund 50% of the cost of co-marketing activities that generate demand for their app, solution, or service. Examples of eligible activities include integrated marketing campaigns, paid media, and digital and in-person customer-facing events. To be eligible to request MDF, partners must be verified in the technology or services track and have an assigned Stripe partner development manager, or have achieved the growth milestone in the apps track.\n\n#### Joint customer case studies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe might invite Stripe partners to participate in a joint case study to showcase how we worked together to solve a customer’s business challenge. Reach out to your partner development manager if you have a story you’d like to nominate for consideration.\n\n#### Amplify your company and solution with a directory listing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe partner directory listing provides Stripe verified partners with the opportunity to promote their company and relationship with Stripe. For Stripe verified partners, their company details page can help drive leads and build awareness of their solutions or services.\n\n#### App Marketplace listing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe App Marketplace listings help businesses find partners in the apps track and understand how their product can help them run their business. Learn more about [Stripe App Marketplace listings](https://docs.stripe.com/stripe-apps/review-requirements).\n\n#### App Marketplace and Stripe Dashboard promotion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track are eligible to receive promotion of their Stripe App in the [Stripe App Marketplace](https://marketplace.stripe.com/) and in the app drawer in the Stripe Dashboard.\n\n#### Stripe Apps marketing events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track are eligible to join marketing virtual events to learn more about Stripe’s planned marketing activities and best practices on how to use our marketing templates to drive usage of your app. Partners can learn more about scheduled marketing virtual events in Stripe’s partner newsletters.\n\n### Sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubmit co-selling opportunities to help close deals faster.\n\n#### Deal registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Go-to-Market Partner team works with Stripe partners to grow our businesses together. Stripe partners can submit a referral to Stripe or they can co-sell with Stripe to close opportunities. You can use three channels for deal registration: submit referrals through the partner portal, bulk upload files with up to 50 leads, or register deals through an ungated lead form.\n\nPartners can also track the progress of a deal through the partner portal.\n\n#### Sales enablement and payments education ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe partners and Stripe verified partners can access self-service and guided training courses on how to sell Stripe solutions. The Business Foundations course helps our partners understand the basics of positioning Stripe solutions and identifying opportunities. The Stripe Fast Start series covers a number of topics, including a Stripe overview and how to sell to different segments of the market. Stripe partners also have access to sales materials, including pitch decks and discovery guides to drive engagement with their users.\n\n#### Crossbeam account mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses the Crossbeam platform to help with account mapping between eligible partners and Stripe’s sales team. After completing onboarding, partners can accelerate co-selling with Stripe by discovering overlapping customers and prospects in an automated and secure manner. To learn more about this benefit and how to onboard, contact your partner development manager or submit a case through the partner portal.\n\n#### Referral incentive ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Partner Ecosystem Referral Incentive is a program that rewards apps, technology, and services track partners for submitting and closing eligible new opportunities with Stripe with a payout that’s time-bound and based on the deal size of new referrals. Stripe partners can take advantage of this incentive by referring new customers who’ve never processed payments with Stripe or by referring existing customers who want to increase their business on Stripe.\n\nPartners in the embedded payments track using Stripe Connect might be eligible for the revenue share program, which enables your company to grow as your customers expand with Stripe.\n\n#### Drive ecosystem revenue through PartnerStack ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe partners can work with PartnerStack to launch, scale, and grow their indirect channels and drive revenue to their business. PartnerStack provides an exclusive discount for members of the Stripe Partner Ecosystem. To learn more about this tool and how to build a partner program, submit a case through the partner portal.\n\n### Engage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStay close to our product roadmap and leadership teams as you build a partnership with us.\n\n#### Partner portal and partner program support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Stripe partner portal to access partner resources. You can submit and track leads and opportunities, complete training and certifications, download marketing materials, request market development funds, and find support for all other needs.\n\n#### Eligible for partner management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelect verified partners are eligible for one-on-one support with a dedicated partner development manager. As the partner’s main point of contact, the partner development manager can assist with go-to-market strategies, help close deals with Stripe sellers, and coordinate enablement sessions.\n\n#### Partner awards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur partner awards recognize select Stripe partners who lead the way with customer solutions through Stripe and showcase their Stripe expertise.\n\nWe might invite select verified partners to participate in speaking opportunities at Stripe events to increase their visibility among Stripe sellers and customers.",
    "title": "Stripe Partner Ecosystem | Stripe Documentation",
    "description": "Learn about the Stripe Partner Ecosystem.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries",
    "markdown": "# Stripe SDKs | Stripe DocumentationThe Stripe Docs logo\n\n## Libraries and tools for interacting with your Stripe integration.\n\n## Server-side SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s server-side helper libraries (also known as server-side SDKs) reduce the amount of work required to use Stripe’s REST APIs, starting with reducing the boilerplate code you have to write. Below are the installation instructions for these libraries in a variety of popular server-side programming languages.\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nYou can access certain Stripe products and features in the beta stage with beta SDKs. The versions of these beta SDKs have the `beta` or `b` suffix, for example, 5.1.0b3 in Python and 5.1.0-beta.3 in other language SDKs. Try these beta SDKs and share feedback with us before the features reach the stable phase. To learn more about how to use the beta SDKs, read the readme file in the GitHub repository of the individual language SDKs.\n\n## Web SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides the following web client SDKs to enable integrations with [Stripe Elements](https://docs.stripe.com/payments/elements), our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data.\n\n## Mobile device SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur mobile device helper libraries (also known as Mobile device SDKs) help you create native applications for Apple’s and Android’s devices and platforms. The React Native SDK helps you integrate Stripe into iOS and Android applications built with React Native.\n\nThe following is a list of community-supported libraries that we know about—these libraries aren’t supported by Stripe, and we can’t speak to their accuracy or completeness. But these are open source, so feel free to fork and hack as much as you like.\n\n## Stripe OpenAPI Specification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s OpenAPI specification empowers you with a broad set of developer tooling, starting with Postman collections.\n\n## Stripe versioning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe server-side SDKs use Semantic Versioning, whereas Stripe APIs are versioned by the release date. A breaking API change results in an increment in the major version number of the SDK.",
    "title": "Stripe SDKs | Stripe Documentation",
    "description": "Use our server-side libraries to work with Stripe from Ruby, Python, PHP, Java, Node, Go and .NET or our Web SDKs to work with HTML and JavaScript (including React). We also provide Mobile SDKs for iOS, Android and React Native.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/vouchers",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Vouchers\n\n## Learn about voucher payment methods with Stripe.\n\nWith vouchers, customers complete online purchases in-person at authorized locations like convenience stores. Vouchers are often used by:\n\n*   Businesses with customers that don’t have cards or bank accounts.\n*   Retailers with consumers in countries like Mexico, where card authorizations rates are low and offering a backup payment option improves conversion.\n\nVouchers might not be a good fit for your business if:\n\n*   You deliver goods immediately after checkout. Some customers may not complete payment and it can take one business day to receive a payment confirmation.\n*   You need to send refunds. Not all vouchers support refunds. Some businesses create separate processes to credit customers who ask for a refund directly.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer chooses a voucher method for payment, they receive a digital voucher through email or in an app with a transaction summary and a voucher code. The customer scans the voucher code at an authorized location like a convenience store and pays in-person, often with cash.\n\n![Figure describing the four step voucher payment flow. First, customer selects voucher payment at checkout. Next, they receive a voucher with transaction reference. Then, they provide voucher and cash at a store, ATM, or bank. Finally, receive notification that payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.7acf8f7f09d6fa1883720435f7c2589b.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll voucher methods work on PaymentIntents. We build hosted voucher experiences for you to simplify your integration. [Contact us](https://support.stripe.com/contact) to request a new voucher method.\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Payment Element | Payment Links | Mobile Payment Element | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Boleto](https://docs.stripe.com/payments/boleto) | Brazil |     |     |     |     |     |     |     |     |\n| [Konbini](https://docs.stripe.com/payments/konbini) | Japan |     |     | \\*  | \\*\\* |     |     |     | \\*\\* |\n| [Multibanco](https://docs.stripe.com/payments/multibanco) | Portugal |     |     |     |     |     |     |     |     |\n| [OXXO](https://docs.stripe.com/payments/oxxo) | Mexico |     |     |     |     |     |     |     |     |\n\n\\*\\* Invoices and Subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you currently use the Sources or Tokens API, see [migrating to PaymentIntents](https://docs.stripe.com/payments/payment-intents/migration) to use the latest integrations.",
    "title": "Vouchers | Stripe Documentation",
    "description": "Learn about voucher payment methods with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/keys",
    "markdown": "# API keys | Stripe DocumentationThe Stripe Docs logo\n\n## Use API keys to authenticate API requests.\n\nStripe authenticates your API requests using your account’s API keys. If a request doesn’t include a valid key, Stripe returns an [invalid request error](https://docs.stripe.com/error-handling#invalid-request-errors). If a request includes a deleted or expired key, Stripe returns an [authentication error](https://docs.stripe.com/error-handling#authentication-errors).\n\nUse the [Developers Dashboard](https://dashboard.stripe.com/test/apikeys) to create, reveal, delete, and roll API keys. To access your v1 API keys, select the **API Keys** tab in your Dashboard.\n\n## Test mode versus live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll Stripe API requests occur in either [test mode](https://docs.stripe.com/test-mode \"test mode\") or live mode. Use test mode to access test data, and live mode to access actual account data. Each mode has its own set of API keys. Objects in one mode aren’t accessible to the other. For instance, a test-mode [product object](https://docs.stripe.com/api/products/object) can’t be part of a live-mode payment.\n\n#### Live mode key access\n\nYou can only reveal a live mode secret or restricted API key one time. If you lose it, you can’t retrieve it from the Dashboard. In that case, roll it or delete it and create a new one.\n\n| Type | When to use | Objects | How to use | Considerations |\n| --- | --- | --- | --- | --- |\n| test mode | Use test mode, and its associated test API keys, as you build your integration. In test mode, card networks and payment providers don’t process payments. | API calls return simulated objects. For example, you can retrieve and use test `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Use [test credit cards and accounts](https://docs.stripe.com/testing#cards). You can’t accept real payment methods or work with real accounts. | [Identity](https://docs.stripe.com/identity) doesn’t perform any verification checks. Also, Connect [account objects](https://docs.stripe.com/api/accounts/object) don’t return sensitive fields. |\n| live mode | Use live mode, and its associated live API keys, when you’re ready to launch your integration and accept real money. In live mode, card networks and payment providers do process payments. | API calls return real objects. For example, you can retrieve and use real `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Accept real credit cards and work with customer accounts. You can accept actual payment authorizations, charges, and captures for credit cards and accounts. | Disputes have a more nuanced flow and a simpler [testing process](https://docs.stripe.com/testing#disputes). Also, some [payment methods](https://docs.stripe.com/payments/payment-methods) have a more nuanced flow and require more steps. |\n\n## Secret and publishable keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll accounts have a total of four API keys by default—two for test mode and two for live mode:\n\n*   **Test mode secret key**: Use this key to authenticate requests on your server when in test mode. By default, you can use this key to perform any API request without restriction.\n*   **Test mode publishable key**: Use this key for testing purposes in your web or mobile app’s client-side code.\n*   **Live mode secret key**: Use this key to authenticate requests on your server when in live mode. By default, you can use this key to perform any API request without restriction.\n*   **Live mode publishable key**: Use this key, when you’re ready to launch your app, in your web or mobile app’s client-side code.\n\n#### Testing and development\n\nUse only your test API keys for testing and development. This ensures that you don’t accidentally modify your live customers or charges.\n\nYou can find your secret and publishable keys in [API keys](https://dashboard.stripe.com/test/apikeys). When you’re logged in, Stripe’s documentation automatically populates code examples with your test mode API keys (only you can see these values). If you’re not logged in, our code examples include randomly generated API keys. You can replace them with your own test keys or [log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fkeys) to see the code examples populated with your test API keys. If you can’t view your API keys, ask the owner of your Stripe account to add you to their [team](https://docs.stripe.com/get-started/account/teams), with the proper permissions.\n\nThe following table shows randomly generated examples of secret and publishable test API keys:\n\n#### Restricted API keys\n\nThe Dashboard can also generate restricted API keys, enabling customizable and limited access to the API. However, Stripe doesn’t offer any restricted keys by default.\n\n| Type | Value | When to use |\n| --- | --- | --- |\n| Secret | `sk_test_4eC39HqLyjWDarjtT1zdp7dc` | **On the server side**: Must be secret and stored securely in your web or mobile app’s server-side code (such as in an environment variable or credential management system) to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n| Publishable | `pk_test_TYooMQauvdEDq54NiTphI7jx` | **On the client side**: Can be publicly accessible in your web or mobile app’s client-side code (such as checkout.js) to securely collect payment information, such as with [Stripe Elements](https://docs.stripe.com/payments/elements). By default, [Stripe Checkout](https://docs.stripe.com/payments/checkout) securely collects payment information. |\n| Restricted | A string that starts with `rk_test_` | **In microservices**: Must be secret and stored securely in your microservice code to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n\n### Keep your keys safe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAnyone can use your live mode secret API key to make any API call on behalf of your account, such as creating a charge or performing a refund. Keep your keys safe by following the [secret API keys best practices](https://docs.stripe.com/keys-best-practices).\n\n#### Customize API access with restricted API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide limited access to the API, [create restricted API keys](https://dashboard.stripe.com/test/apikeys/create). You can configure a restricted API key to allow read or write access to specific API resources. When using microservices that interact with the API on your behalf, define restricted keys that allow only the minimum access those microservices require. For example, if you use a dispute monitoring service, create a restricted key that only provides read access to dispute-related resources. That key allows the service to get the data it needs, but doesn’t allow it to make any changes or access any other data.\n\nRestricted keys can’t interact with many parts of Stripe’s API because they’re only intended to reduce risk when using or building microservices. Don’t use restricted keys as an alternative to your account’s secret or publishable API keys during development of your Stripe integration.\n\n#### Permission errors\n\nIf you use a restricted API key in a call it doesn’t have access to, Stripe raises a [permission error](https://docs.stripe.com/error-handling#permission-errors).\n\n#### Limit the IP addresses that can send API requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can increase the security of a secret or restricted key by limiting the IP addresses that can use it to send API requests. Additionally, you can [restrict a key to one or more IP addresses or to a range of IP addresses](#limit-api-secret-keys-ip-address).\n\n## Reveal a secret API key for test mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn test mode, you can reveal a secret API key as many times as you want.\n\nTo reveal a secret key in test mode:\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/test/apikeys) tab.\n2.  In the **Standard keys** list, in the **Secret key** row, click **Reveal test key**.\n3.  Copy the key value by clicking it.\n4.  Save the key value.\n5.  Click **Hide test key**.\n\n## Reveal a secret or restricted API key for live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor security, in live mode Stripe only shows you a secret or restricted API key one time. Store the key in a safe place where you won’t lose it. To help yourself remember where you stored it, you can leave a note on the key in the Dashboard. If you lose the key, you can roll it or delete it and create another.\n\n#### You can't reveal a live mode secret key that you created\n\nAfter you create a secret or restricted API key in live mode, we display the value before you save it. You must copy the value before saving it because you can’t reveal it later. You can only reveal a default secret key or a key generated by a scheduled roll.\n\nTo reveal a secret or restricted key in live mode and attach a note:\n\n#### Note\n\nThe `API keys` link here opens in live mode.\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/apikeys) tab.\n2.  In the **Standard keys** list or **Restricted keys** list, in the row for the key you want to reveal, click **Reveal live key**.\n3.  Copy the key value by clicking it.\n4.  Save the key value.\n5.  Click **Hide test key**.\n6.  Click the overflow menu () next to the key, then select **Edit key…**.\n7.  In the **Note** field, enter the location where you saved the key, then click **Save**.\n8.  If you created the key before Stripe introduced this feature, click **Hide live key**.\n\n#### Note\n\nKeys that you created before Stripe introduced this feature aren’t automatically hidden when they’re revealed. You must manually hide them.\n\n## Roll an API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRolling a key revokes it and generates a replacement key. You can roll a key immediately or schedule a key to roll after a certain time. Roll a key in scenarios such as the following examples:\n\n*   If you’re in live mode and you lose a secret key or restricted key, you can’t recover it from the Dashboard and must replace it.\n*   If a secret or restricted key is compromised, you need to revoke it to block any potentially malicious API requests that might use it.\n*   Your policy requires rotating keys at certain intervals.\n\nTo roll an API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the row for the key you want to roll, click the overflow menu (), then select **Roll key…**.\n3.  Choose an expiration date from the **Expiration** dropdown.\n4.  Click **Roll API key**.\n5.  The dialog displays the new key value. Copy it by clicking it.\n6.  Save the key value. You can’t retrieve it later.\n7.  In the **Add a note** field, enter the location where you saved the key and click **Done** or **Save**.\n\nIf you chose **Now** for the **Expiration**, we delete the old key. If you selected a different time, you can see the time remaining until the key expires below its name.\n\nRegardless of the old key’s expiration time, the new key is ready to use immediately.\n\nWhen you roll a publishable key, the replacement key’s name is always `Publishable key`. When you roll a secret key, the replacement key’s name is always `Secret key`. When you roll a restricted key, the replacement key’s name is the same as the rolled key. You can rename a secret or restricted key by clicking its overflow menu and selecting **Edit key…**.\n\n## Delete a secret or restricted API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you delete a key, any code that uses that key can no longer make API calls. Create a new key and update the code to use it.\n\n#### Note\n\nYou can’t delete a publishable key.\n\nTo delete a key:\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/test/apikeys) tab.\n2.  Locate the key you want to delete in either the **Standard keys** or **Restricted keys** list. Click the overflow menu icon () in the row of that key, then select **Delete key…**.\n3.  In the Delete API key dialog, if you’re sure that you want to delete the key, click **Delete key**. Otherwise, click **Cancel**.\n\n## Create a secret API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a secret API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  Click **Create secret key**.\n3.  Stripe sends a verification code to your email address or in a text message. (As with any email or text message, it might not arrive immediately.) Enter the code in the dialog. If the dialog doesn’t continue automatically, click **Continue**.\n4.  Enter a name in the **Key name** field.\n5.  Click **Create**.\n6.  The dialog displays the new key value. Copy it by clicking it.\n7.  Save the key value. You can’t retrieve it later.\n8.  In the **Add a note** field, enter the location where you saved the key and click **Done**.\n\n## Create a restricted API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA [restricted API key](https://docs.stripe.com/keys#limit-access) only allows the level of access that you specify.\n\nTo create a restricted API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  You can create a restricted key from scratch or start by cloning an existing restricted key.\n    *   To create a restricted key from scratch, click **Create restricted key**. In this case, the default value for all permissions is **None**.\n    *   To clone an existing key, in the row for the key you want to clone, click the overflow menu (), then select **Duplicate key…**. In this case, the default value for each permission is its value in the cloned key.\n3.  In the **Key name** field, enter a name. If you cloned an existing key, the default name is the cloned key’s name.\n4.  For each resource you want the new key to access, select the permission for this key to allow. If you use Connect, you can also select the permission for this key to allow when accessing connected accounts. Available permissions are **None**, **Read**, or **Write**.\n5.  Click **Create key**.\n6.  Stripe sends a verification code to your email address or in a text message. (As with any email or text message, it might not arrive immediately.) Enter the code in the dialog. If the dialog doesn’t continue automatically, click **Continue**.\n7.  The dialog displays the new key value. Copy it by clicking it.\n8.  Save the key value. You can’t retrieve it later.\n9.  In the **Add a note** field, enter the location where you saved the key and click **Done**.\n\n## Limit secret or restricted keys to a list or range of IP addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo limit API requests using a key to one or more specific IP addresses or to a range of IP addresses:\n\n#### Valid IP address ranges\n\nYou can specify any valid CIDR range. For example, a valid range could be `100.10.38.0 - 100.10.38.255`, specified as `100.10.38.0/24`. All addresses in the range must start with `100.10.38`.\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the **Standard keys** list or **Restricted keys** list, in the row for the key you want to reveal, click the overflow menu (), then select **Manage IP restrictions…**.\n3.  Click **Limit use to a set of IP addresses**.\n4.  Enter an IP address or range of IP addresses:\n    *   For an individual IP address, enter it in the **IP address** field.\n    *   For a range of IP addresses, enter the range in Classless Inter-Domain Routing (CIDR) notation. In the **IP Address** field, enter the first address in the range. In the **CIDR** field, enter the network prefix size.\n    *   You can also select the **Bulk manage** tab and enter individual IP addresses and ranges, separated by spaces. Changes you make in one tab appear in the other tab.\n5.  To add another address or range, click **\\+ Add**.\n6.  Click **Save**.\n\n## Change a secret or restricted API key’s name or note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo change the name or note text of a secret or restricted key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the row for the key you want to change, click the overflow menu (), then select **Edit key…**.\n3.  If you want to change the name, in **Key name**, enter the new name.\n4.  If you want to change the note text, in **Note**, enter the new note text.\n5.  Click **Save**.\n\n## View the API request logs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [open the API request logs](https://docs.stripe.com/development/dashboard/request-logs), click the overflow menu () for any key, then select **View request logs**. Opening the logs redirects you to the main Stripe Dashboard.",
    "title": "API keys | Stripe Documentation",
    "description": "Use API keys to authenticate API requests.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/event-destinations",
    "markdown": "# Event Destinations | Stripe DocumentationThe Stripe Docs logo\n\n## Event DestinationsBeta\n\n## Send events from Stripe to webhook endpoints and cloud services.\n\n#### Beta\n\nSet up an event destination to receive events from Stripe across multiple destination types, including webhook endpoints, and [Amazon Eventbridge](https://docs.stripe.com/event-destinations/eventbridge).\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen building Stripe integrations, you might want your applications to receive events in real time from your Stripe accounts, enabling your backend systems to respond and perform actions accordingly.\n\nWith an event destination, Stripe pushes real-time event data from your account, enabling you to run back-end actions, such as:\n\n*   Sending users a notification when a customer confirms a payment\n*   Initating an internal claims reconciliation process when a customer disputes a charge\n*   Granting access to your user when they make successful recurring subscription payments\n\n## Events overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe generates event data to keep you informed about the activity in your account.\n\nWhen an event occurs, Stripe generates a new [Event](https://docs.stripe.com/api/v1/events) object. After your destination receives the [event](https://docs.stripe.com/api/v1/events), your app can run back-end actions (for example, calling your shipping provider’s APIs to schedule a shipment after you receive a `payment_intent.succeded` event).\n\nThe [event](https://docs.stripe.com/api/v1/events) we send to your event destination provides a snapshot of the object that changed. It might include a `previous_attributes` property that indicates the change when applicable.\n\nSee the [full list of event types](https://docs.stripe.com/api/events/types) that we send to your event destination.\n\nA single API request might result in the creation of multiple events. For example, creating a new subscription for a customer might result in `customer.subscription.created` and `payment_intent.succeeded` events. Select the events you want to subscribe to for each event destination.\n\n### Sample event payload![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following payload is an example `invoice.created` event that occurs when you create a new subscription.\n\n`{   \"object\": {     \"id\": \"in_1KnN0G589O8KAxCGfVSpD0Pj\",     \"object\": \"invoice\",     \"account_country\": \"US\",`\n\n## Event permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view an event in the Dashboard, assign the [Admin or Developer role](https://docs.stripe.com/get-started/account/teams/roles) to your user account. To retrieve an event using the API, use either a [secret API key](https://docs.stripe.com/keys#create-api-secret-key), which allows you to view all event types by default, or a [restricted API key](https://docs.stripe.com/keys#create-restricted-api-secret-key) with `Read` access enabled for the specific event type’s resource. For example, you can grant `Read` access to `payment_intent` resources on your restricted API key to programmatically retrieve `payment_intent.succeeded events`.\n\n## Disable an event destination![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can disable an event destination. After you disable it, Stripe stops sending any events to that destination. After you re-enabled a destination, Stripe resumes sending events to the destination.",
    "title": "Event Destinations | Stripe Documentation",
    "description": "Send events from Stripe to webhook endpoints and cloud services.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/overview",
    "markdown": "# Stripe CLI | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your Stripe resources in test mode directly from the command line.\n\nThe Stripe CLI is a developer tool to help you build, test, and manage your integration with Stripe directly from the command line. With the Stripe CLI, it’s easy to perform many common tasks like calling Stripe APIs, testing your webhooks integration, and creating an application.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Log into Stripe to authenticate requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLog in and authenticate your [Stripe user account](https://docs.stripe.com/get-started/account/activate) to generate a set of _restricted keys_. To learn more, see [Stripe CLI keys and permissions](https://docs.stripe.com/stripe-cli/keys).\n\nPress the **Enter** key on your keyboard to complete the authentication process in your browser.\n\n## Specify an API version while running requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you call Stripe APIs in the CLI, it uses your default API version in all requests. To find your default version in the Developers Dashboard, see the [API keys](https://dashboard.stripe.com/test/apikeys) page. To try out different API versions in the CLI, use the following flags:\n\n| Flag | Description | Example |\n| --- | --- | --- |\n| `–stripe-version 2024-06-20` | Use the `--stripe-version` flag in any CLI request to specify an API version. | `stripe products create --name=“My Product” --stripe-version 2024-06-20` |\n| `--latest` | Use the `--latest` flag in any CLI request to specify the latest API version. | `stripe products create --name=\"My Product\" --latest` |\n\nYou can also [view a list of API versions](https://docs.stripe.com/upgrades#api-versions).\n\n## Stream request logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `stripe logs tail` command to stream API request logs. Keep this window open. If you have an error in your API calls, this terminal returns the API error message and a reason for the error.\n\n## Forward events to your local webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `--forward-to` flag to send all [Stripe events](https://docs.stripe.com/cli/trigger#trigger-event) in **test mode** to your local webhook endpoint. To disable HTTPS certificate verification, use the `--skip-verify` flag.\n\n`stripe listen --forward-to localhost:4242/stripe_webhooks`\n\n`Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nTo forward specific events in a comma separated list, use the `--events` flag.\n\n`stripe listen --events payment_intent.created,customer.created,payment_intent.succeeded,charge.succeeded,checkout.session.completed,charge.failed \\   --forward-to localhost:4242/webhook`\n\nIf you’ve already [registered your endpoint in Stripe](https://docs.stripe.com/webhooks#register-webhook), you can use the `--load-from-webhooks-api` and `--forward-to` flags.\n\n`stripe listen --load-from-webhooks-api --forward-to localhost:5000`\n\nThis command forwards events sent to your Stripe-registered **public** webhook endpoint to your **local** webhook endpoint. It loads your registered endpoint, parses the path and its registered events, then appends the path to your local webhook endpoint in the `--forward-to` path. If you’re checking webhook signatures, use the `{{WEBHOOK_SIGNING_SECRET}}` from the initial output of the `listen` command.\n\n## List all available events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [`--help`](https://docs.stripe.com/cli/help) flag to list all possible events that can occur for an event category. For example, to list all possible events for the [prebuilt checkout page](https://docs.stripe.com/checkout/quickstart) for [Stripe Checkout](https://docs.stripe.com/payments/checkout):\n\n`stripe trigger checkout --help`\n\n## Create a one-time product and price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Make a single API request to [Create a product](https://docs.stripe.com/api/products/create).\n\n`stripe products create \\ --name=\"My First Product\" \\ --description=\"Created with the Stripe CLI\"`\n\n1.  Look for the product identifier (in `id`) in the response object. Save it for the next step.\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"prod_LTenIrmp8Q67sa\"`\n\n`,   \"object\": \"product\",`\n\n1.  Call [Create a price](https://docs.stripe.com/api/prices/create) to attach a price of 30 USD. Swap the placeholder in `product` with your product identifier (for example, `prod_LTenIrmp8Q67sa`).\n\n`stripe prices create \\   --unit-amount=3000 \\   --currency=usd \\   --product=`\n\n`{{PRODUCT_ID}}`\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"price_1KzlAMJJDeE9fu01WMJJr79o\"`\n\n`,   \"object\": \"price\",`\n\n## Trigger a webhook event while testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger the `checkout.session.completed` event to create the API objects that result from a checkout session successfully completing.\n\n`stripe trigger checkout.session.completed`\n\nYour `stripe listen` terminal displays the following output:\n\n`Setting up fixture for: checkout_session Running fixture for: checkout_session Setting up fixture for: payment_page Running fixture for: payment_page Setting up fixture for: payment_method Running fixture for: payment_method Setting up fixture for: payment_page_confirm Running fixture for: payment_page_confirm Trigger succeeded!`\n\nTo learn more about triggers, read our [guide](https://docs.stripe.com/stripe-cli/triggers).",
    "title": "Stripe CLI | Stripe Documentation",
    "description": "Manage your Stripe resources in test mode directly from the command line.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/webhooks",
    "markdown": "# Receive Stripe events in your webhook endpoint\n\n## Listen to events in your Stripe account on your webhook endpoint so your integration can automatically trigger reactions.\n\n#### Send events to your AWS account\n\n## Why use webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen building Stripe integrations, you might want your applications to receive events as they occur in your Stripe accounts, so that your backend systems can execute actions accordingly.\n\nTo enable webhook events, you need to register webhook endpoints. After you register them, Stripe can push real-time event data to your application’s webhook endpoint when [events](https://docs.stripe.com/webhooks#events-overview) happen in your Stripe account. Stripe uses HTTPS to send webhook events to your app as a JSON payload that includes an [Event object](https://docs.stripe.com/api/events).\n\nReceiving webhook events is particularly useful for listening to asynchronous events such as when a customer’s bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments.\n\n## Event overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe generates event data that we can send you to inform you of activity in your account.\n\nWhen an event occurs, Stripe generates a new [Event object](https://docs.stripe.com/api/events). A single API request might result in the creation of multiple events. For example, if you create a new subscription for a customer, you receive `customer.subscription.created` and `payment_intent.succeeded` events.\n\nBy registering webhook endpoints in your Stripe account, you enable Stripe to automatically send [Event objects](https://docs.stripe.com/api/events) as part of POST requests to the registered webhook endpoint hosted by your application. After your webhook endpoint receives the [Event](https://docs.stripe.com/api/events), your app can run backend actions (for example, calling your shipping provider’s APIs to schedule a shipment after you receive a `payment_intent.succeeded` event).\n\n### Event object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Event object](https://docs.stripe.com/api/events) we send to your webhook endpoint provides a snapshot of the object that changed. They might include a `previous_attributes` property that indicates the change, when applicable.\n\nSee the [full list of event types](https://docs.stripe.com/api/events/types) that we send to your webhook.\n\n### Example event payload![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following event shows a subscription update at the end of a trial.\n\n`{   \"id\": \"evt_1MqqbKLt4dXK03v5qaIbiNCC\",   \"object\": \"event\",   \"api_version\": \"2024-06-20\",   \"created\": 1680064028,`\n\n### Event object structure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReview the event object structure to better understand events and the underlying information they provide.\n\n#### Event type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou receive events for all of the [event types](https://docs.stripe.com/api/events/types) your webhook endpoint is listening for in your configuration. Use the received event `type` to determine what processing your application needs to perform. The `data.object` corresponding to each event `type` varies.\n\n#### Live and test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might receive both live and test mode event delivery requests to your endpoints. This can happen if you use a single endpoint for both live and test mode or if you’re a Connect platform making test mode requests for live Standard connected accounts. Use the `livemode` attribute to check whether the object exists in live or test mode, and determine the correct handling for the event.\n\n#### API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `api_version` indicates the API version of the event and [dictates the structure of the included data.object](https://docs.stripe.com/webhooks#api-versions). Your endpoint receives events using the configured API version, which can differ from your account’s default API version or the API version of any requests related to the event. This attribute is determined by the destination endpoint, which indicates that the same event might be delivered to multiple endpoints using different API versions. If you use our Java, .NET or Go client libraries, make sure that you configure the endpoint API version to use the same API version pinned in the client. Otherwise, you might be unable to de-serialize the event objects.\n\nWhen retrieving Event objects from the API, you can’t control the API version of the `data.object` structure. Instead, retrieve that object from the appropriate API endpoint and use the `Stripe-Version` header to [specify an API version](https://docs.stripe.com/api/versioning).\n\n#### API request events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an event is generated as a result of an API request, that request shows up as the `request.id`. If you use an [`idempotency_key`](https://docs.stripe.com/api/idempotent_requests) when making the request, it’s included as the `request.idempotency_key`. Check this `request` hash when you investigate what causes an event.\n\n#### Data object and previous attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor `*.updated` events, the event payload includes `data.previous_attributes` that allow you to inspect what’s changed about the Stripe object. The `previous_ attributes` in the example `customer.subscription.updated` event above indicates that the subscription has a previous value of `status: trialing`, among other changes. The `data.object` indicates the status as `active` which indicates that the subscription transitioned out of a trial period.\n\n#### Pending deliveries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `pending_webhooks` to determine how many endpoints configured for this event haven’t responded successfully to delivery. During initial delivery, this value is 1 or higher because your endpoint hasn’t responded successfully. If you retrieve this event later, `pending_webhooks` decrease to a minimum of 0 as each endpoint responds successfully. This is important for `invoice.created` events because unsuccessful deliveries [can delay invoice finalization](https://docs.stripe.com/billing/subscriptions/webhooks#successful-invoice-finalization).\n\n#### Connected account events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvents from connected accounts delivered to a [Connect endpoint](https://docs.stripe.com/connect/webhooks#connect-webhooks) include the `account`. Use `account` to track which connected account the object belongs to make sure that your platform can process the event data appropriately.\n\n### Why event objects get generated ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis table describes different scenarios that trigger generating [Event objects](https://docs.stripe.com/api/events).\n\n| Source | Trigger |\n| --- | --- |\n| Dashboard | When you call an API by modifying your Stripe resources in the Stripe Dashboard. |\n| API | When a user action in your app or website results in an API call. |\n| API | When you manually trigger an event with the Stripe CLI. |\n| API | When you call an API directly with the Stripe CLI. |\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo start receiving webhook events in your app, create and register a webhook endpoint:\n\n1.  Create a webhook endpoint handler to receive event data POST requests.\n2.  Test your webhook endpoint handler locally using the Stripe CLI.\n3.  Register your endpoint within Stripe using the **Dashboard** or the API.\n4.  Secure your webhook endpoint.\n\nYou can register and create one endpoint to handle several different event types at the same time, or set up individual endpoints for specific events.\n\n[](#webhook-endpoint-def)\n\nSet up an HTTP or HTTPS endpoint function that can accept webhook requests with a POST method. If you’re still developing your endpoint function on your local machine, it can use HTTP. After it’s publicly accessible, your webhook endpoint function must use HTTPS.\n\nSet up your endpoint function so that it:\n\n1.  Handles POST requests with a JSON payload consisting of an [event object](https://docs.stripe.com/api/events/object).\n2.  Quickly returns a successful status code (`2xx`) prior to any complex logic that could cause a timeout. For example, you must return a `200` response before updating a customer’s invoice as paid in your accounting system.\n\n#### Note\n\n#### Example endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code snippet is a webhook function configured to check that the event type was received, to handle the event, and return a 200 response.\n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)     )   rescue JSON::ParserError => e     # Invalid payload     status 400     return   end    # Handle the event   case event.type   when 'payment_intent.succeeded'     payment_intent = event.data.object # contains a Stripe::PaymentIntent     # Then define and call a method to handle the successful payment intent.     # handle_payment_intent_succeeded(payment_intent)   when 'payment_method.attached'     payment_method = event.data.object # contains a Stripe::PaymentMethod     # Then define and call a method to handle the successful attachment of a PaymentMethod.     # handle_payment_method_attached(payment_method)   # ... handle other event types   else     puts \"Unhandled event type: #{event.type}\"   end    status 200 end`\n\n[](#test-webhook)\n\nBefore you go-live with your webhook endpoint function, we recommend that you test your application integration. You can do so by configuring a local listener to send events to your local machine, and sending test events. You need to use the [CLI](https://docs.stripe.com/stripe-cli) to test.\n\n#### Forward events to a local endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo forward events to your local endpoint, run the following command with the [CLI](https://docs.stripe.com/stripe-cli) to set up a local listener. The `--forward-to` flag sends all [Stripe events](https://docs.stripe.com/cli/trigger#trigger-event) in **test mode** to your local webhook endpoint.\n\n`stripe listen --forward-to localhost:4242/stripe_webhooks`\n\n#### Note\n\nYou can also run the stripe listen command on the [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) to see events through the Stripe shell terminal, although you won’t be able to forward events from the shell to your local endpoint.\n\nUseful configurations to help you test with your local listener include the following:\n\n*   To disable HTTPS certificate verification, use the `--skip-verify` optional flag.\n*   To forward only specific events, use the `--events` optional flag and pass in a comma separated list of events.\n\n`stripe listen --events payment_intent.created,customer.created,payment_intent.succeeded,checkout.session.completed,payment_intent.payment_failed \\   --forward-to localhost:4242/webhook`\n\n*   To forward events to your local webhook endpoint from the public webhook endpoint that you already registered on Stripe, use the `--load-from-webhooks-api` optional flag. It loads your registered endpoint, parses the path and its registered events, then appends the path to your local webhook endpoint in the `--forward-to path`.\n\n`stripe listen --load-from-webhooks-api --forward-to localhost:5000`\n\n*   To check webhook signatures, use the `{{WEBHOOK_SIGNING_SECRET}}` from the initial output of the listen command.\n\n`Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\n#### Triggering test events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send test events, trigger an event type that your webhook is subscribed to by manually creating an object in the Stripe Dashboard. Alternatively, you can use the following command in either [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) or [Stripe CLI](https://docs.stripe.com/stripe-cli).\n\nThis example triggers a `payment_intent.succeeded` event:\n\n`stripe trigger payment_intent.succeeded Running fixture for: payment_intent Trigger succeeded! Check dashboard for event details.`\n\nLearn how to trigger events with [Stripe for VS Code](https://docs.stripe.com/stripe-vscode).\n\n[](#register-webhook)\n\nAfter testing your webhook endpoint function, register the webhook endpoint’s accessible URL using the [Webhooks section](https://dashboard.stripe.com/webhooks) in the Developer Dashboard or the API so Stripe knows where to deliver events. You can register up to 16 webhook endpoints with Stripe. Registered webhook endpoints must be publicly accessible **HTTPS** URLs.\n\n#### Webhook URL format ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe URL format to register a webhook endpoint is:\n\n`https://<your-website>/<your-webhook-endpoint>`\n\nFor example, if your domain is `https://mycompanysite.com` and the route to your webhook endpoint is `@app.route('/stripe_webhooks', methods=['POST'])`, specify `https://mycompanysite.com/stripe_webhooks` as the **Endpoint URL**.\n\n### Add a webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nStripe supports two endpoint types: Account and [Connect](https://docs.stripe.com/connect \"Connect\"). Create an endpoint for _Account_ unless you’ve created a [Connect application](https://docs.stripe.com/connect). Use the following steps to register a webhook endpoint in the Developers Dashboard. You can register up to 16 webhook endpoints on each Stripe account.\n\n1.  Navigate to the [Webhooks](https://dashboard.stripe.com/webhooks) page.\n2.  Click **Add endpoint**.\n3.  Add your webhook endpoint’s HTTPS URL in **Endpoint URL**.\n4.  If you have a _Stripe Connect_ account, enter a description, then click **Listen to events on Connected accounts**.\n5.  Select the [event types](https://docs.stripe.com/api#event_types) you’re currently receiving in your local webhook endpoint in **Select events**.\n6.  Click **Add endpoint**.\n\n#### Register a webhook endpoint with the Stripe API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also programmatically [create webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/create).\n\nTo receive events from connected accounts, use the [connect parameter](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-connect).\n\nThe following example creates an endpoint that notifies you when charges succeed or fail.\n\n`curl https://api.stripe.com/v1/webhook_endpoints \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"url\"=\"[https://example.com/my/webhook/endpoint](https://example.com/my/webhook/endpoint)\" \\   -d \"enabled_events[]\"=\"payment_intent.payment_failed\" \\   -d \"enabled_events[]\"=\"payment_intent.succeeded\"`\n\n[](#verify-official-libraries)\n\nYou need to secure your integration by making sure your handler verifies that all webhook requests are generated by Stripe. You can verify webhook signatures using our official libraries or verify them manually.\n\n### Verify webhook signatures with official libraries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend using our official libraries to verify signatures. You perform the verification by providing the event payload, the `Stripe-Signature` header, and the endpoint’s secret. If verification fails, you get an error.\n\nIf you get a signature verification error, read our guide about [troubleshooting it](https://docs.stripe.com/webhooks/signature).\n\n#### Warning\n\nStripe requires the raw body of the request to perform signature verification. If you’re using a framework, make sure it doesn’t manipulate the raw body. Any manipulation to the raw body of the request causes the verification to fail.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``require 'stripe' require 'sinatra'  # If you are testing your webhook locally with the Stripe CLI you # can find the endpoint's secret by running `stripe listen` # Otherwise, find your endpoint's secret in your webhook settings in # the Developer Dashboard endpoint_secret = 'whsec_...'  # Using the Sinatra framework set :port, 4242  post '/my/webhook/url' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   event = nil    begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload     puts \"Error parsing payload: #{e.message}\"     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature     puts \"Error verifying webhook signature: #{e.message}\"     status 400     return   end    # Handle the event   case event.type   when 'payment_intent.succeeded'     payment_intent = event.data.object # contains a Stripe::PaymentIntent     puts 'PaymentIntent was successful!'   when 'payment_method.attached'     payment_method = event.data.object # contains a Stripe::PaymentMethod     puts 'PaymentMethod was attached to a Customer!'   # ... handle other event types   else     puts \"Unhandled event type: #{event.type}\"   end    status 200 end``\n\n## Debug webhook integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMultiple types of issues can occur when delivering events to your webhook endpoint:\n\n*   Stripe might not be able to deliver an event to your webhook endpoint.\n*   Your webhook endpoint might have an SSL issue.\n*   Your network connectivity is intermittent.\n*   Your webhook endpoint isn’t receiving events that you expect to receive.\n\n### View event deliveries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nTo view event deliveries for a specific endpoint, select the webhook endpoint in the [Webhooks](https://dashboard.stripe.com/webhooks) tab.\n\nTo view all events that were triggered in your account, view the [Events](https://dashboard.stripe.com/events) tab.\n\n### Fix HTTP status codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an event displays a status code of `200`, it indicates successful delivery to the webhook endpoint. You might also receive a status code other than `200`. View the table below for a list of common HTTP status codes and recommended solutions.\n\n| Pending webhook status | Description | Fix |\n| --- | --- | --- |\n| (Unable to connect) ERR | We’re unable to establish a connection to the destination server. | Make sure that your host domain is publicly accessible to the internet. |\n| (`302`) ERR (or other `3xx` status) | The destination server attempted to redirect the request to another location. We consider redirect responses to webhook requests as failures. | Set the webhook endpoint destination to the URL resolved by the redirect. |\n| (`400`) ERR (or other `4xx` status) | The destination server can’t or won’t process the request. This might occur when the server detects an error (`400`), when the destination URL has access restrictions, (`401`, `403`), or when the destination URL doesn’t exist (`404`). | *   Make sure that your endpoint is publicly accessible to the internet.<br>*   Make sure that your endpoint accepts a POST HTTP method. |\n| (`500`) ERR (or other `5xx` status) | The destination server encountered an error while processing the request. | Review your application’s logs to understand why it’s returning a `500` error. |\n| (TLS error) ERR | We couldn’t establish a secure connection to the destination server. Issues with the SSL/TLS certificate or an intermediate certificate in the destination server’s certificate chain usually cause these errors. Stripe requires [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") version v1.2 or higher. | Perform an [SSL server test](https://www.ssllabs.com/ssltest/) to find issues that might cause this error. |\n| (Timed out) ERR | The destination server took too long to respond to the webhook request. | Make sure you defer complex logic and return a successful response immediately in your webhook handling code. |\n\n## Event delivery behaviors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis section helps you understand different behaviors to expect regarding how Stripe sends events to your webhook endpoint.\n\n### Retry behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn live mode, Stripe attempts to deliver a given event to your webhook endpoint for up to 3 days with an exponential back off. In the [Events](https://dashboard.stripe.com/events) section of the Dashboard, you can view when the next retry will occur.\n\nIn test mode, Stripe retries three times over a few hours. You can manually retry transmitting individual events to your webhook endpoint after this time using the [Events](https://dashboard.stripe.com/events) section of the Dashboard. You can also [query for missed events](https://docs.stripe.com/api/events/list) to reconcile the data over any time period.\n\nThe automatic retries still continue, even if you manually retry transmitting individual webhook events to a given endpoint and the attempt is successful.\n\nIf your endpoint has been disabled or deleted when Stripe attempts a retry, future retries of that event are prevented. However, if you disable and then re-enable a webhook endpoint before Stripe can retry, you can still expect to see future retry attempts.\n\n### Disable behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn live and test mode, Stripe attempts to notify you of a misconfigured endpoint by email if the endpoint hasn’t responded with a `2xx` HTTP status code for multiple days in a row. The email also states when the endpoint will be automatically disabled.\n\n### API versioning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe API version in your account settings when the event occurs dictates the API version, and therefore the structure of an `Event` object sent in a webhook. For example, if your account is set to an older API version, such as **2015-02-16**, and you change the API version for a specific request with [versioning](https://docs.stripe.com/api#versioning), the `Event` object generated and sent to your endpoint is still based on the **2015-02-16** API version.\n\nYou can’t change `Event` objects after creation. For example, if you update a charge, the original charge event remains unchanged. This means that subsequent updates to your account’s API version don’t retroactively alter existing `Event` objects. Fetching older events by calling `/v1/events` using a newer API version also has no impact on the structure of the received events.\n\nYou can set test webhook endpoints to either your default API version or the latest API version. The `Event` sent to the webhook URL is structured for the endpoint’s specified version. You can also programmatically create endpoints with a specific [api\\_version](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-api_version).\n\n### Event ordering ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t guarantee delivery of events in the order in which they’re generated. For example, creating a subscription might generate the following events:\n\n*   `customer.subscription.created`\n*   `invoice.created`\n*   `invoice.paid`\n*   `charge.created` (if there’s a charge)\n\nYour endpoint shouldn’t expect delivery of these events in this order, and needs to handle delivery accordingly. You can also use the API to fetch any missing objects (for example, you can fetch the [invoice](https://docs.stripe.com/api/invoices \"invoices\"), charge, and subscription objects using the information from `invoice.paid` if you happen to receive this event first).\n\n## Best practices for using webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReview these best practices to make sure your webhooks remain secure and function well with your integration.\n\n### Handle duplicate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWebhook endpoints might occasionally receive the same event more than once. You can guard against duplicated event receipts by logging the [event IDs](https://docs.stripe.com/api/events/object#event_object-id) you’ve processed, and then not processing already-logged events.\n\n### Only listen to event types your integration requires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your webhook endpoints to receive only the types of events required by your integration. Listening for extra events (or all events) puts undue strain on your server and we don’t recommend it.\n\nYou can [change the events](https://docs.stripe.com/api/webhook_endpoints/update#update_webhook_endpoint-enabled_events) that a webhook endpoint receives in the Dashboard or with the API.\n\n### Handle events asynchronously![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your handler to process incoming events with an asynchronous queue. You might encounter scalability issues if you choose to process events synchronously. Any large spike in webhook deliveries (for example, during the beginning of the month when all subscriptions renew) might overwhelm your endpoint hosts.\n\nAsynchronous queues allow you to process the concurrent events at a rate your system can support.\n\n### Exempt webhook route from CSRF protection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re using Rails, Django, or another web framework, your site might automatically check that every POST request contains a _CSRF token_. This is an important security feature that helps protect you and your users from [cross-site request forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)) attempts. However, this security measure might also prevent your site from processing legitimate events. If so, you might need to exempt the webhooks route from CSRF protection.\n\n``class StripeController < ApplicationController   # If your controller accepts requests other than Stripe webhooks,   # you'll probably want to use `protect_from_forgery` to add CSRF   # protection for your application. But don't forget to exempt   # your webhook route!   protect_from_forgery except: :webhook    def webhook     # Process webhook data in `params`   end end``\n\n### Receive events with an HTTPS server![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use an HTTPS URL for your webhook endpoint (required in live mode), Stripe validates that the connection to your server is secure before sending your webhook data. For this to work, your server must be correctly configured to support HTTPS with a valid server certificate. Stripe webhooks support only [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") versions v1.2 and v1.3.\n\n### Roll endpoint signing secrets periodically ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe secret used for verifying that events come from Stripe is modifiable in the [Webhooks section](https://dashboard.stripe.com/webhooks) of the Dashboard. For each endpoint, click **Roll secret**. You can choose to immediately expire the current secret or delay its expiration for up to 24 hours to allow yourself time to update the verification code on your server. During this time, multiple secrets are active for the endpoint. Stripe generates one signature per secret until expiration. To keep them safe, we recommend that you roll secrets periodically, or when you suspect a compromised secret.\n\n### Verify events are sent from Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends webhook events from a set list of IP addresses. Only trust events coming from these [IP addresses](https://docs.stripe.com/ips).\n\nAdditionally, verify webhook signatures to confirm that received events are sent from Stripe. Stripe signs webhook events it sends to your endpoints by including a signature in each event’s `Stripe-Signature` header. This allows you to verify that the events were sent by Stripe, not by a third party. You can verify signatures either using our [official libraries](#verify-official-libraries), or [verify manually](#verify-manually) using your own solution.\n\nThe following section describes how to verify webhook signatures:\n\n1.  Retrieve your endpoint’s secret.\n2.  Verify the signature.\n\n#### Retrieving your endpoint’s secret ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Webhooks](https://dashboard.stripe.com/webhooks) section of the Dashboard. Select an endpoint that you want to obtain the secret for, and find the secret on the top right of the page.\n\nStripe generates a unique secret key for each endpoint. If you use the same endpoint for both [test and live API keys](https://docs.stripe.com/keys#test-live-modes), the secret is different for each one. Additionally, if you use multiple endpoints, you must obtain a secret for each one you want to verify signatures on, and Stripe starts to sign each webhook it sends to the endpoint.\n\n### Preventing replay attacks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA [replay attack](https://en.wikipedia.org/wiki/Replay_attack) is when an attacker intercepts a valid payload and its signature, then re-transmits them. To mitigate such attacks, Stripe includes a timestamp in the `Stripe-Signature` header. Because this timestamp is part of the signed payload, it’s also verified by the signature, so an attacker can’t change the timestamp without invalidating the signature. If the signature is valid but the timestamp is too old, you can have your application reject the payload.\n\nOur libraries have a default tolerance of 5 minutes between the timestamp and the current time. You can change this tolerance by providing an additional parameter when verifying signatures. Use Network Time Protocol ([NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol)) to make sure that your server’s clock is accurate and synchronizes with the time on Stripe’s servers.\n\nStripe generates the timestamp and signature each time we send an event to your endpoint. If Stripe retries an event (for example, your endpoint previously replied with a non-`2xx` status code), then we generate a new signature and timestamp for the new delivery attempt.\n\n### Quickly return a 2xx response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour [endpoint](https://docs.stripe.com/webhooks#example-endpoint) must quickly return a successful status code (`2xx`) prior to any complex logic that could cause a timeout. For example, you must return a `200` response before updating a customer’s invoice as paid in your accounting system.",
    "title": "Receive Stripe events in your webhook endpoint | Stripe Documentation",
    "description": "Listen to events in your Stripe account on your webhook endpoint so your integration can automatically trigger reactions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-shell/overview",
    "markdown": "# Stripe Shell | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your Stripe resources in test mode from the Stripe docs site.\n\nStripe Shell is an interactive, authenticated, browser-based shell for managing your Stripe resources in test mode. It securely authenticates access anywhere within the Stripe docs site. Just login to the Stripe docs site and launch the Stripe Shell with a keyboard shortcut.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Key features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Use your favorite pre-installed tools![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManage your Stripe resources with the Stripe CLI pre-loaded with autocomplete. No more hunting around for commands—start typing _stripe_ and hit the space bar on your keyboard then click a supported command.\n\n### Use the Stripe Shell to learn new products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLaunch the Stripe Shell from the Stripe docs site to easily try out different combinations of Stripe API requests before writing a line of code.\n\n### Execute Stripe CLI snippets directly in Stripe docs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRun any supported Stripe CLI command directly within the Stripe docs site. When you click the green _play_ button next to any supported CLI command, the Stripe Shell runs the request and returns an immediate response in the terminal window.\n\n### Use the Stripe CLI for local development![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile the Stripe Shell can’t test a webhooks integration on your local server, it’s still possible to use the Stripe CLI to forward and trigger webhook events locally. To learn more, see [Test a webhooks integration with the Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).",
    "title": "Stripe Shell | Stripe Documentation",
    "description": "Manage your Stripe resources in test mode from the Stripe docs site.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/development/dashboard",
    "markdown": "# Developers Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Developers Dashboard to view API request and event activity.\n\nThe Developers Dashboard collects information about each request in your account—use the Dashboard to view common integration errors, requests that failed, webhook events, and so on.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Key features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Determine the reason a request failed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManage your Stripe integration from the Developers Dashboard. Find your default API version and all versions used by your account, or filter API request logs and view log entries.\n\n### Setup local webhook event listeners![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvents are our way of letting you know when something interesting happens in your account. Use the Developers Dashboard and the Stripe CLI to setup a webhooks listener on your local machine, then trigger events to test your setup.\n\n### Manage access to your application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll accounts have a total of four keys: a _publishable_ and _secret_ key pair for [test mode](https://docs.stripe.com/test-mode \"test mode\") and live mode. Use the Developers Dashboard to expire an existing key, restrict traffic to an IP address, or create a restricted API key for microservices used by your application.\n\n### Monitor a webhooks integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you send an API request, we log one or more events for your account. Use the Developers Dashboard to view events triggered by your account so you know which events to monitor in your webhooks integration.",
    "title": "Developers Dashboard | Stripe Documentation",
    "description": "Use the Developers Dashboard to view API request and event activity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/workbench",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## WorkbenchBeta\n\n## Use Workbench to build, manage, and debug your Stripe integration.\n\n#### Beta\n\nTo enable or disable Workbench, configure the setting for your user login from the [Early access features](https://dashboard.stripe.com/settings/early_access) in the Dashboard.\n\nWorkbench provides developer tools to help you build, manage, and debug your Stripe integration from your browser, anywhere in the Dashboard. For example, using Workbench you can:\n\n*   Review a summary of recent integration errors\n*   Inspect API objects, request logs, events, and webhook deliveries\n*   Run API requests using the built-in command-line environment, or build them with the API Explorer\n*   Create and manage your webhook endpoint configuration\n\n**Share your ideas:** improve Workbench by clicking **Share feedback** at the top of the tool with feature requests, bug reports, and feedback.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use Workbench, you [need a Stripe account](https://dashboard.stripe.com/register) and to enable the beta from [Early access features](https://dashboard.stripe.com/settings/early_access) in the Dashboard. Only users with the **Administrator** or **Developer** role have full access to all Workbench tools.\n\n1.  Sign in to the [Dashboard](https://dashboard.stripe.com/). From the **Developers** menu, click **Workbench**.\n2.  You can drag the top handle of the Workbench pane to resize it, or you can click the maximize icon () to leave or enter full-screen mode.\n3.  Click the minimize icon () to collapse Workbench to a taskbar at the bottom of the page, or the expand icon () to reopen the pane. The taskbar lets you quickly inspect API objects and includes a notification tray that alerts you to critical API errors and event activity.\n4.  To hide the Workbench taskbar, click the collapse icon () to minimize the taskbar to an icon on the right of the Dashboard. Hover over the icon to display the notification tray. Click the icon to reopen the full Workbench pane.\n\nWorkbench includes multiple tools in each tab. Learn more about the functionality of each tab and how to use it below.\n\n#### Note\n\nTo open or minimize Workbench from anywhere in the Dashboard, press the tilde key (**~**) on your keyboard.\n\n### Use Workbench tools![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile using Workbench, keep these tools in mind:\n\n*   Click **Copy link** to generate a shareable URL of the current Workbench view.\n*   Click **Send feedback** to share ideas or questions with the core development team.\n\n## Overview of your Stripe integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee an overview of your account’s API activity in the **Overview** tab.\n\n*   The **Integration status** widget displays any known service degradations in Stripe’s infrastructure.\n*   The **API keys** widget displays a list of standard and restricted keys on your account. Click **Manage** to create or update your API keys.\n*   The **API versions** widget displays a breakdown of the API versions that recent API requests to your account used. Click **Upgrade available** to [upgrade the default API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api) of your Stripe account.\n*   The **API requests** and **Webhooks** graphs visualize recent API activity on your account.\n*   **Integration insights** displays actionable improvements you can make to your Stripe account to resolve errors, improve performance, or better use Stripe APIs.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-overview.82e64e4151ee0da510e97050956b1a96.png)\n\nThe Overview tab shows a quick snapshot of your account’s API activity.\n\n## View recent errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Errors** tab summarizes recent errors for your Stripe account. You can learn more about how to resolve each type of API error, and review recent API request logs for each error.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-errors.f9bc5a18ecacc6f161ebc9cd2a8d9f0a.png)\n\nThe Errors tab summarizes recent API errors and highlights related request logs.\n\n## Use the Inspector to learn about API objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the **Inspector** to explore a JSON view of API objects on your Stripe account. To inspect an object, you can:\n\n*   Enter an object ID from the **Inspector** tab.\n*   Enter an object ID from the Workbench taskbar.\n*   Visit a Dashboard page for any object (for example, a `Payment`, `Customer`, or `Subscription`) and open the **Inspector** tab.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-inspector.132a139ddb20906e606a39d4eaf51af5.png)\n\nThe Inspector shows a JSON view of the API object, and any related request logs and events.\n\nThe **Inspector** tab displays all related API objects on the left, and a JSON view in the **Overview** tab. The **Logs** and **Events** tabs show related API activity to this object.\n\n## View API request logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Logs** tab includes a list of recent API requests and responses for your Stripe account. Workbench highlights recent errors with suggestions on how to resolve them. You can filter API requests by:\n\n*   Date of the request\n*   HTTP status (for example, `200`)\n*   HTTP method (for example, `POST` or `DELETE`)\n*   API endpoint (for example, `/v1/checkout/sessions`)\n*   IP address that created the request\n*   Source (direct API requests or Dashboard)\n*   Account (or specifically when using Connect, the platform or connected accounts)\n*   API version (for example, `2020-08-27`)\n*   Error code (for example, `resource_missing`)\n*   Error type (for example, `invalid_request_error`)\n*   Error parameter (for example, `line_items[*][price]`)\n\nWorkbench doesn’t automatically refresh this tab in real-time as your account receives new API requests. Click **Refresh logs** to fetch the latest request logs from your Stripe account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-logs.eca1ad610d58aa7493eff9d064a659d9.png)\n\nThe Logs tool presents a timeline of API activity, with filters for time endpoint, response code, and other properties.\n\n## Review recent events on your Stripe account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Events** tab includes a list of recent events on your Stripe account. Click **Refresh events** to fetch the latest events from your Stripe account. You can filter events by:\n\n*   Date of the event\n*   Delivery status (delivered or failed)\n*   Event type (for example, `customer.subscription.created`; you can also use wildcards (for example, `customer.*`)\n*   API resource (for example, `cus_123`)\n\nClick an event in the list on the left to review the event’s details, payload, and attempted deliveries on the right. Learn more about [setting up webhook endpoints](https://docs.stripe.com/workbench/webhooks) with Workbench.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-events.45cfc616e1e6b03ac93673581b47b8ba.png)\n\nThe Events tab shows recent activity on your Stripe account. Events can be delivered to webhook endpoints.\n\nThe **Delivery attempts** section lists attempted deliveries of the event (for example, to a webhook endpoint). Workbench might list multiple delivery attempts if the initial attempts failed. Stripe [automatically retries](https://docs.stripe.com/webhooks#behaviors) delivery in live mode several times. Click **Retry now** to manually attempt to redeliver the event.\n\n## Set up a webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Webhooks** tab allows you to create a new webhook endpoint for Stripe to deliver events to:\n\n*   URL endpoints using webhooks\n*   Your local machine using the [Stripe CLI](https://docs.stripe.com/stripe-cli)\n\nClick **Create new endpoint** to configure a new webhook endpoint that Stripe sends events to. Select the API version that Stripe uses to generate webhook events and the event types to listen for, and specify an HTTPS URL where your server hosts the webhook endpoint.\n\nOn the left, Workbench lists any configured webhook endpoints. The **Overview** summarizes the activity on that configured endpoint, and **Event deliveries** provides a complete list of attempts by Stripe to deliver events to that endpoint. Click **Retry now** next to any delivery attempt so Stripe can redeliver the event to that endpoint.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/main.a385ccd665e5fbafa035600ecee9021a.png)\n\nSet up a new webhook endpoint or route events to your local development machine.\n\n## Run API commands using Shell and Explorer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Shell** provides a command-line interface to manage your Stripe resources within Workbench, similar to the [Stripe CLI](https://docs.stripe.com/stripe-cli). See [Shell and API Explorer](https://docs.stripe.com/workbench/shell) for the full list of available commands.\n\n#### Note\n\nShell is read-only in live mode. Switch to [test mode](https://docs.stripe.com/test-mode) to run API requests that create, modify, or delete API objects.\n\nWhen using Workbench, a minimal Shell is always available in the pane, or you can use the **Shell** tab to launch a full-screen session. From the **Shell** tab, click **New pane** to split the pane into multiple shell sessions.\n\nClick **API Explorer** to reveal the interactive command builder on the right. Choose the API resource and HTTP method to show the required and optional parameters for that request. The **Headers** tab allows setting some HTTP headers, such as the [`Stripe-Account` header](https://docs.stripe.com/connect/authentication#stripe-account-header) which allows making API requests to a connected account. Click **Run** to execute the API request.\n\nFilling in parameters in the API Explorer automatically constructs the corresponding Shell command. Select a programming language, then click **Print SDK request** to see the corresponding SDK code for the API request.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-shell.bda499755fff63eadcbcc0c90c7a70f1.png)\n\nShell and the API Explorer help you experiment with Stripe’s API from Workbench.\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up a webhook endpoint](https://docs.stripe.com/workbench/webhooks)\n*   [Try the Shell and API Explorer](https://docs.stripe.com/workbench/shell)\n*   [Keyboard shortcuts in Workbench](https://docs.stripe.com/workbench/keyboard-shortcuts)",
    "title": "Workbench | Stripe Documentation",
    "description": "Use Workbench to build, manage, and debug your Stripe integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance",
    "markdown": "# Embedded Finance integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build an embedded financial services integration with Issuing and Treasury.\n\nBuild a US embedded financial services offering using Stripe [Issuing](https://docs.stripe.com/issuing/how-issuing-works) and [Treasury](https://docs.stripe.com/treasury). Use Issuing to create cards, and Treasury to store balances and fund card spend.\n\nBy the end of this guide, you’ll know how to:\n\n*   Create verified connected accounts representing your business customers with relevant Issuing and Treasury capabilities\n*   Create financial accounts that you can use as a wallet for your business customers and add funds to using an external bank account\n*   Create virtual cards for your business customers and use these cards to spend funds from a wallet\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Sign up for a [Stripe account](https://dashboard.stripe.com/register).\n2.  [Activate Issuing and Treasury in test mode](https://dashboard.stripe.com/setup/treasury/activate?a=1) from the Dashboard. For more information, see [API access to Issuing and Treasury](https://docs.stripe.com/treasury/access).\n3.  Configure your [Connect platform branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) for your business and add an icon.\n\n[](#set-up-connect)\n\n### Create a connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a connected account to represent a business customer of your platform. For example, if your product is a SaaS platform for restaurants, each restaurant would be represented as a connected account.\n\n#### Connect account types\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing. If your existing accounts don’t match this configuration, you must recreate them.\n\nThe following request creates a US-based connected account with the correct configuration and requests the requisite capabilities:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nThe user’s account information appears in the response:\n\n`{     ...     \"id\":   \"{{CONNECTED_ACCOUNT_ID}}\",     \"controller\": {       \"stripe_dashboard\": {         \"type\": \"none\"       },       \"fees\": {         \"payer\": \"application\"       },       \"losses\": {         \"payments\": \"application\"       },       \"is_controller\": true,       \"type\": \"application\",       \"requirement_collection\": \"application\"     },     ... }`\n\nNote the connected account’s `id`. You’ll provide this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nIf a connected account already exists, you can add the requisite capabilities by specifying the connected account `id` in the request:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true`\n\n### Verify the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose one of the following onboarding options:\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of your brand in the Branding section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an `external_account` (which is required for payouts) by enabling it through your [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links API](https://docs.stripe.com/api/account_links/create).\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account={{CONNECTED_ACCOUNT_ID}} \\   --data-urlencode refresh_url=\"https://example.com/reauth\" \\   --data-urlencode return_url=\"https://example.com/return\" \\   -d type=account_onboarding`\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to your connected account. We recommend that you distribute the account link URL from within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for your connected account to onboard to your platform.\n\nAt this point, Stripe has created and verified the connected account with `active` relevant capabilities to use Issuing and Treasury.\n\nTo learn more, see:\n\n*   [Set up an Issuing and Connect integration](https://docs.stripe.com/issuing/connect)\n*   [Stripe hosted onboarding for connected accounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n*   [Creating and using connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Identify verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n\n[](#create-financial-accounts-add-funds)\n\nAfter you enable Treasury on your platform, add [FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts) objects to your [platform architecture](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) to enable the efficient storing, sending, and receiving of funds. Stripe attaches a financial account to your platform account after enablement, and lets you provision an individual financial account for each eligible connected account on your platform.\n\nIn the Stripe API, `FinancialAccount` objects serve as the source and destination of money movement API requests. You request `Features` through the API to assign to `FinancialAccounts` that provide additional functionality for the financial accounts on your platform.\n\nA financial account operates a distinct [balance of funds](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) from the connected account payments balance of the account it’s linked to. For example, the owner of a connected account on your platform might have a 100 USD connected account balance and a 200 USD financial account balance. In this scenario, the connected account owner has a sum of 300 USD spread between their financial account and connected account balances. These two balances remain separate, but the API provides the ability to move money from the connected account balance to the financial account balance.\n\n#### Multiple financial accounts\n\nThe multiple financial account beta feature enables you to open multiple financial accounts for a single connected account. Contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) to access test mode for this feature and join the wait list.\n\n### Create a Financial Account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter Stripe adds the `treasury` capability to an account and it’s marked `active`, you can create a `FinancialAccount` object for the connected account. To do this, call `FinancialAccounts` and request the `Features` you want to provide:\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response, when you request features on financial account creation, indicates their status in the `active_features`, `pending_features`, and `restricted_features` parameters:\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [],   // No FinancialAddress added as the financial_addresses.aba feature is not yet active   \"financial_addresses\": [],   \"livemode\": true,   \"status\": \"open\",   ... }`\n\nActivation might be instantaneous for some features (for example, `card_issuing`). However, other features, like `financial_addresses.aba`, [activate asynchronously](https://tripe.com/docs/treasury/account-management/financial-account-features#webhooks), might stay `pending` for up to 30 minutes while Stripe communicates with external systems. After all of the relevant features are active, you get confirmation on the `treasury.financial_account.features_status_updated` webhook listener. See [Available features](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features) for more information on financial account features.\n\n### Link a bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo let your customers transfer money to and from an external account, create a `SetupIntent` with the required parameters and attach it to `self` to denote that the external account is owned by your customer:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d attach_to_self=true \\  -d \"flow_directions[]\"=inbound \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=company \\  -d \"payment_method_data[billing_details][name]\"=\"Company Corp\" \\  -d confirm=true \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"123.123.123.123\"`\n\nThe API response includes a unique identifier for the `payment_method` that’s used to reference this bank account when making ACH transfers:\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"next_action\": {     \"type\": \"verify_with_microdeposits\",     \"verify_with_microdeposits\": {       \"arrival_date\": 1642579200,       \"hosted_verification_url\": \"https://payments.stripe.com/microdeposit/sacs_test_xxx\",       \"microdeposit_type\": \"amounts\"     }   },   ...   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_types\": [     \"us_bank_account\"   ] }`\n\nBefore you can use a bank account, it must be verified using microdeposits (which we focus on here) or the faster [financial connections](https://docs.stripe.com/financial-connections) option. The `SetupIntent` response from the previous step includes a `hosted_verification_url` which you must present to your customer for them to input the associated descriptor code of the microdeposit. Use the value `SM11AA` to verify the bank account, or test a variety of other cases by using the [test account numbers](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers) Stripe provides.\n\n![Microdeposit verification](https://b.stripecdn.com/docs-statics-srv/assets/microdeposit-verification.a9151fafd6f3582cb8a268bf7b1b306e.png)\n\nMicrodeposit verification\n\n### Add funds to the financial account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the embedded [Financial account component](https://docs.stripe.com/connect/supported-embedded-components/financial-account) in your application, you can enable your Connected Accounts to transfer funds into the Financial account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account component by specifying `financial_account` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account][enabled]\"=true \\  -d \"components[financial_account][features][money_movement]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account component in the frontend:\n\n`// Include this element in your HTML const financialAccount = stripeConnectInstance.create('financial-account'); financialAccount.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccount);`\n\nFrom here, users can click **Move money** to initiate a transfer.\n\nAt this point, the connected account has a `FinancialAccount` that has been loaded with funds received from an `InboundTransfer` that you can spend using cards or `OutboundPayments` like ACH or wires.\n\nTo learn more, see:\n\n*   [Getting permissions for InboundTransfers](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#permissions)\n*   [Working with Treasury financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)\n*   [Using Treasury to move money](https://docs.stripe.com/treasury/examples/moving-money#microdeposits)\n*   [Requesting features on a Financial Account](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features)\n*   [Working with SetupIntents, PaymentMethods, and BankAccounts](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects)\n*   [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers)\n*   [Moving money with Treasury using ReceivedCredit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits)\n\n[](#create-cardholders-cards)\n\nThe [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object) is the individual (that is, employee or contractor) that’s authorized by your business customer to use card funding by the associated balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address of the connected account or your platform.\n\nUse the embedded [Issuing cards list component](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list) to enable your connected accounts to create a [Card](https://docs.stripe.com/api/issuing/cards/object) for a Cardholder and associate it with the Financial Account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\nFrom here, users can click **Create card** to begin creating a new Cardholder and Card. The user can also activate the card during creation, or do so afterwards.\n\nAt this point, there’s an active card attached to a cardholder and financial account. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) for the connected account to view the card and cardholder information.\n\nTo learn more, see:\n\n*   [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n*   [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nTo observe the impact of card activity on the associated balance, generate a test authorization. You can do this in the **Issuing page** of the Dashboard for the connected account, or with the following call to the [Authorization API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000 \\  -d authorization_method=chip \\  -d \"merchant_data[category]\"=taxicabs_limousines \\  -d \"merchant_data[city]\"=\"San Francisco\" \\  -d \"merchant_data[country]\"=US \\  -d \"merchant_data[name]\"=\"Rocket Rides\" \\  -d \"merchant_data[network_id]\"=1234567890 \\  -d \"merchant_data[postal_code]\"=94107 \\  -d \"merchant_data[state]\"=CA`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions). Note the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"status\": \"pending\",   \"transactions\": [], }`\n\nYou can use retrieve the balance details of the financial account and see the impact of the authorization:\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe API response is a `FinancialAccount` object with a `balance` hash that details the funds and their availability:\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     \"cash\": {\"usd\": 19000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   } }`\n\nThe response indicates 190 USD is currently available for use with an additional 10 USD held in `outbound_pending` from the `pending` authorization. You can now simulate capture of the authorization with the API.\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCapture the funds using the following code:\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`, and a `ReceivedDebit` webhook is created with these details. Retrieving the balance details of the financial account again shows the `outbound_pending` is now 0 USD while the available cash is remains 190 USD:\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     \"cash\": {\"usd\": 19000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 0}   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
    "title": "Embedded Finance integration guide | Stripe Documentation",
    "description": "Build an embedded financial services integration with Issuing and Treasury.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps",
    "markdown": "# Stripe Apps | Stripe DocumentationThe Stripe Docs logo\n\n## Extend Stripe with third party services or embed custom user experiences directly in the Stripe Dashboard.\n\nStripe Apps provides the opportunity to become a third-party developer for Stripe. You can develop and privately distribute or publish your Stripe app on the global [Stripe Apps Marketplace](https://marketplace.stripe.com/). As a third-party Stripe Apps developer, you can create apps to:\n\n*   Authenticate users for third-party services using OAuth 2.0 or a restricted API key (RAK).\n*   Use the Stripe API to make calls, listen to events, and automate workflows. For example, you can create an app that automatically initiates a billing flow when a customer signs a contract, to streamline tasks and reducing manual account reconciliation.\n*   Design custom user interfaces that operate directly within the Stripe Dashboard. For example, users can interact with customer records, balance statements, and payment information in their CRM systems.\n\n#### Note\n\nStripe Apps serve as an extension of Stripe. To learn how to accept payments, see [Payments](https://docs.stripe.com/payments). To accept and send multiparty payments, see [Connect](https://docs.stripe.com/connect). To build a lightweight tool you can test, see [Developer tools](https://docs.stripe.com/development).\n\n![The types of Stripe Apps you can build as a developer](https://b.stripecdn.com/docs-statics-srv/assets/overview-v2.7266d8efad9da259a2bfcf634b259f08.png)\n\nThe main types of apps you can develop\n\nAs a Stripe Apps user, you have access to a range of apps on the Stripe Apps Marketplace to help bolster or expand your business on Stripe. You can also integrate Stripe into existing third-party services or platforms to synchronize data fields, trigger external workflows, or use Stripe as a payment processor.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Build an app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Distribute an app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Migrate to Stripe Apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Reference![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Support and troubleshooting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEngage with us on GitHub to:\n\n*   [Receive developer support](https://github.com/stripe/stripe-apps/wiki/Developer-Support)\n*   [View known issues or submit feedback](https://github.com/stripe/stripe-apps/issues)",
    "title": "Stripe Apps | Stripe Documentation",
    "description": "Extend Stripe with third party services or embed custom user experiences directly in the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/security",
    "markdown": "# Security at Stripe | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe handles security.\n\n#### PCI 4.0 released\n\n[PCI DSS v4.0](https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v3-2-1-to-v4-0-Summary-of-Changes-r2.pdf) replaces v3.2.1 effective March 31, 2024. Stripe can help you understand how the requirements for demonstrating your compliance might change. Read our [Guide to PCI compliance](https://stripe.com/ie/guides/pci-compliance) to get started.\n\nOur users trust Stripe with their sensitive data and rely on us to be good custodians of their customers’ data as well. As a payments infrastructure company, our security posture continually evolves to meet the rigorous standards of the global financial industry.\n\n## Standards and regulations compliance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses best-in-class security practices to maintain a high level of security.\n\n### PCI-certified ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA PCI-certified auditor evaluated Stripe and certified us to [PCI Service Provider Level 1](https://usa.visa.com/splisting/splistinglearnmore.html). This is the most stringent level of certification available in the payments industry. This audit includes both Stripe’s Card Data Vault (CDV) and the secure software development of our integration code.\n\nWe provide our users with features to automate some aspects of PCI compliance.\n\n*   We analyze the user’s integration method and dynamically inform them of which PCI validation form to use.\n*   If a user integrates with Stripe Elements, Checkout, Terminal SDKs, or our mobile libraries, we provide assistance in completing their PCI validation form ([Self-Assessment Questionnaire A](https://www.pcisecuritystandards.org/pci_security/completing_self_assessment)) in the Dashboard.\n*   We publish a [PCI Compliance Guide](https://stripe.com/guides/pci-compliance) to help educate our users about PCI compliance and how Stripe can help.\n\n### System and Organization Controls (SOC) reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s systems, processes, and controls are regularly audited as part of our SOC 1 and SOC 2 compliance programs. SOC 1 and SOC 2 Type II reports are produced annually and can be provided upon request.\n\nThe Auditing Standards Board of the American Institute of Certified Public Accountants’ ([AICPA](https://www.aicpa.org/)) Trust Service Criteria (TSC) developed the SOC 3 report. Stripe’s SOC 3 is a public report of internal controls over security, availability, and confidentiality. [View our recent SOC 3 report](https://d37ugbyn3rpeym.cloudfront.net/docs/security/2023-Stripe-Payment-Processing-SOC3.pdf).\n\n### EMVCo standard for card terminals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Terminal is certified to the [EMVCo Level 1 and 2](https://www.emvco.com/approved-products/?search_bar_keywords=bbpos&tax%5Bapproved-products_categories%5D%5B90%5D%5B%5D=94%2C95%2C96%2C97%2C99) standards of EMV® Specifications for card and terminal security and interoperability. Terminal is also certified to the [PCI Payment Application Data Security Standard](https://en.wikipedia.org/wiki/PA-DSS) (PA-DSS)—the global security standard that aims to prevent payment applications developed for third parties from storing prohibited secure data.\n\n### NIST Cybersecurity Framework ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s suite of information security policies and their overarching design are aligned with the [NIST Cybersecurity Framework](https://www.nist.gov/cyberframework/new-framework). Our security practices meet the standards of our enterprise customers who must provide secure products like on-demand cloud computing and storage platforms (for example, DigitalOcean and Slack).\n\n### Privacy and data protection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe continuously implement evolving privacy and data protection processes, procedures, and best practices under all applicable privacy and data protection regimes. For more information, see the following resources:\n\n*   [Privacy policy](https://stripe.com/privacy)\n*   [Privacy center](https://stripe.com/en-ca/legal/privacy-center)\n*   [Data processing Agreement](https://stripe.com/legal/dpa)\n\n## Stripe product securement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSecurity is one of Stripe’s guiding principles for all our product design and infrastructure decisions. We offer a range of features to help our users better protect their Stripe data.\n\n### Sensitive action authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Dashboard supports several forms of [multi-factor authentication](https://support.stripe.com/questions/enable-two-step-authentication) (MFA) including: [SMS](https://support.stripe.com/questions/enable-two-step-authentication-via-text-messaging), [time-based one-time password algorithm](https://support.stripe.com/questions/enable-two-step-authentication-using-a-mobile-app) (TOTP), and universal 2nd factor (U2F). We also support [single sign-on](https://docs.stripe.com/get-started/account/sso) through Security Assertion Markup Language (SAML) 2.0, allowing customers to mandate sign-in requirements, configure access control, and instantly onboard team members through Just-in-Time account provisioning.\n\nSupport requests from users must be authenticated by sending the request from the Dashboard (after login) or by verifying account access before a support response is proffered. By requiring authentication, we minimize the risk of providing any information to non-authorized people.\n\n### Access restriction and auditing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the Dashboard, users can assign different detailed [roles](https://docs.stripe.com/get-started/account/teams) to enable least-privilege access for their employees, and create [restricted access keys](https://docs.stripe.com/keys#limit-access) to reduce the security and reliability risk of API key exposure.\n\nUsers can also view audit logs of important account changes and activity in their [security history](https://dashboard.stripe.com/security_history). These audit logs contain records of sensitive account activity, like logging in or changing bank account information. We monitor logins and note:\n\n*   If they’re from the same or usual devices\n*   If they’re from consistent IP addresses\n*   Failed attempts\n\nUsers can export historical information from the logs. For time-sensitive activities, such as logins from unknown IPs and devices, we send automatic notifications so that logs don’t need to be reviewed manually.\n\n### HTTPS and HSTS for secure connections ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe mandate the use of HTTPS for all services using [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") (SSL), including our public website and the [Dashboard](https://dashboard.stripe.com/dashboard). We regularly audit the details of our implementation, including the certificates we serve, the certificate authorities we use, and the ciphers we support. We use [HSTS](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security) to make sure that browsers interact with Stripe only over HTTPS. Stripe is also on the HSTS preloaded lists for all modern major browsers.\n\nAll server-to-sever communication is encrypted using mutual transport layer security (mTLS) and Stripe has dedicated [PGP keys](https://docs.stripe.com/security/python-client-pgp-key) for users to encrypt communications with Stripe, or verify signed messages they receive from Stripe. Our systems automatically block requests made using older, less secure versions of TLS, [requiring use of at least TLS 1.2](https://stripe.com/blog/completing-tls-upgrade).\n\nThe [stripe.com](https://stripe.com/) domain, including the Dashboard and API subdomains, are on the [top domains](https://chromium-review.googlesource.com/c/chromium/src/+/605062) list for Chrome, providing extra protection against homoglyph attacks. This makes it harder to create fake pages that look like stripe.com in Chrome (for example, [strípe.com](https://xn--strpe-1sa.com/)), which renders as punycode ([xn–strpe-1sa.com](https://xn--strpe-1sa.com/)), in turn making it harder for Stripe credentials to be phished.\n\n### Proactive internet monitoring ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe proactively scan the internet for our merchants’ API keys. If we find a compromised key, we take appropriate action, advising the user to roll their API key. We use the GitHub Token Scanner to alert us when a user’s API keys have been leaked on GitHub. If we find external phishing pages that might catch our users, we work proactively with our vendors to take those down and report them to Google Safe Browsing.\n\n## Infrastructure safeguards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur security teams test our infrastructure regularly by scanning for vulnerabilities and conducting penetration tests and red team exercises. We hire industry-leading security companies to perform third-party scans of our systems, and we immediately address their findings. Our servers are frequently and automatically replaced to maintain server health and discard stale connections or resources. Server operating systems are upgraded well in advance of their security end of life (EOL) date.\n\n### Dedicated card technology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe encrypts sensitive data both in transit and at rest. Stripe’s infrastructure for storing, decrypting, and transmitting primary account numbers (PANs), such as credit card numbers, runs in a separate hosting infrastructure, and doesn’t share any credentials with the rest of our services. A dedicated team manages our CDV in an isolated Amazon Web Services (AWS) environment that’s separate from the rest of Stripe’s infrastructure. Access to this separate environment is restricted to a small number of specially trained engineers and access is reviewed quarterly.\n\nAll card numbers are encrypted at rest with AES-256. Decryption keys are stored on separate machines. We tokenize PANs internally, isolating raw numbers from the rest of our infrastructure. None of Stripe’s internal servers and daemons can obtain plain text card numbers but can request that cards are sent to a service provider on a static allowlist. Stripe’s infrastructure for storing, decrypting, and transmitting card numbers runs in a separate hosting environment, and doesn’t share any credentials with Stripe’s primary services including our API and website. It’s not just PANs that are tokenized this way; we treat other sensitive data, like bank account information, in a similar way.\n\n### Corporate technology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe takes a zero-trust approach to employee access management. Employees are authenticated leveraging SSO, two-factor authentication (2FA) using a hardware-based token, and mTLS through a cryptographic certificate on Stripe-issued machines. After connecting to the network, sensitive internal systems and those outside the scope of the employee’s standard work require additional access permissions.\n\nWe monitor audit logs to detect abnormalities and watch for intrusions and suspicious activity, and also monitor changes to sensitive files in our code base. All of Stripe’s code goes through multiparty review and automated testing. Code changes are recorded in an immutable, tamper-evident log. We constantly collect information about Stripe-issued laptops to monitor for malicious processes, connections to fraudulent domains, and intruder activity. We have a comprehensive process for allowlisting permitted software on employee laptops, preventing the installation of non-approved applications.\n\n## Security posture maintenance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur developers work with security experts early in a project’s life cycle. As part of our Security Review process, security experts develop threat models and trust boundaries that help guide the implementation of the project. Developers use this same process to make changes to sensitive pieces of code.\n\n### Dedicated experts on-call ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe have a number of dedicated security teams that specialize in different areas of security, including infrastructure, operations, privacy, users, and applications. Security experts are available 24/7 through on-call rotations. We’re focused on constantly raising the bar on best practices to minimize cybersecurity risks.\n\n### Security is every Stripe employee’s job ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe require every Stripe employee to complete security education annually, and we provide secure software development training to Stripe engineers. We run internal phishing campaigns to test everyone at Stripe on recognizing phishing attempts and flagging them to the appropriate security team.\n\n### Managing access control ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe have a formal process for granting access to systems and information; we regularly review and automatically remove inactive access. Actions within the most sensitive areas of the infrastructure need a human review. To enable best practices for access control, our security experts build primitives to assist Stripe teams in implementing the principle of least privilege. To minimize our exposure, we have a data retention policy that minimizes the data we keep while complying with regulatory and business requirements.\n\n### Vulnerability disclosure and reward program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe maintain a vulnerability disclosure and reward (“bug bounty”) program that compensates independent security researchers who help us keep our users safe. By submitting a security bug or vulnerability to Stripe through [HackerOne](https://hackerone.com/stripe), you acknowledge that you’ve read and agreed to the [program terms and conditions](https://hackerone.com/stripe). Refer to our policy on HackerOne for more information on how to participate in our bug bounty program.",
    "title": "Security at Stripe | Stripe Documentation",
    "description": "Learn how Stripe handles security.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors",
    "markdown": "# Stripe Connectors | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Use connectors to integrate with Stripe and leverage its products with leading software providers.\n\nSign up for developer updates:",
    "title": "Stripe Connectors | Stripe Documentation",
    "description": "Use connectors to integrate with Stripe and leverage its products with leading software providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/no-code/buy-button",
    "markdown": "# Create an embeddable buy button\n\n## Use Payment Links to create an embeddable buy button for your website.\n\nCreate an embeddable buy button to sell a product, subscription, or accept a payment on your website. Start by selecting an existing link from the [Payment Links list view](https://dashboard.stripe.com/payment-links) or by [creating a new link](https://dashboard.stripe.com/payment-links/create) where you can decide which products to sell and customize the checkout UI. After you create your link, click **Buy button** to configure the buy button design and generate the code that you can copy and paste into your website.\n\n## Customize the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your buy button uses the same branding and call to action configured for your payment link. You can:\n\n*   Choose between a simple button and a card widget.\n*   Set brand colors, shapes, and fonts to match your website.\n*   Set the language of the button and payment page to match your website’s language.\n*   Customize your button’s call to action.\n\n![Customize the buy button](https://b.stripecdn.com/docs-statics-srv/assets/buy-button-card-layout.4003c3e9ffe3ce4378092dbdcd456ed9.png)\n\nCustomize the buy button",
    "title": "Create an embeddable buy button | Stripe Documentation",
    "description": "Use Payment Links to create an embeddable buy button for your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/no-code/quotes",
    "markdown": "# Use quotes | Stripe DocumentationThe Stripe Docs logo\n\nAfter your customer accepts the quote, bill them by converting the quote into an invoice or subscription.\n\nYou can only create one-off invoices if a quote _only_ has one-time prices.\n\nIf a quote has at least one recurring price, you can only convert it to a subscription.\n\n### Convert a quote to an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To mark a quote as accepted and create a draft invoice, go to **Convert to invoice** > **Quotes details**.\n    \n2.  Use the [invoice editor](https://dashboard.stripe.com/test/invoices/create) to modify the draft invoice as needed.\n    \n3.  Email the invoice or automatically charge the customer.\n    \n\n### Convert a quote to a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  In the quote editor, choose a customer and create or select a product with a recurring price.\n    \n2.  Enter the quote details and choose to either **Start the subscription immediately** or **Schedule a subscription start date**.\n    \n3.  Finalize the quote. This marks the quote as **Accepted**.\n    \n4.  Go to **Convert to subscription** > **Quotes details**.\n    \n5.  Enter or modify the subscription details, then click **Create subscription**.\n    \n\nIf you schedule the subscription to start immediately, Stripe creates an active subscription along with a draft invoice for the initial payment. Stripe finalizes the draft invoice automatically in one hour. Otherwise, the subscription begins on the scheduled start date. Depending on the subscription’s payment terms, Stripe collects payment by either charging the customer’s payment method on file or sending them an invoice.",
    "title": "Use quotes | Stripe Documentation",
    "description": "Send a quote and convert it to a payment or subscription.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/payment-methods",
    "markdown": "# Payment methods | Stripe DocumentationThe Stripe Docs logo\n\n[ACH Direct Debit](https://docs.stripe.com/invoicing/ach-debit)Stripe users in the United States can accept ACH Direct Debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha.USDUSNone.[Alipay](https://docs.stripe.com/payments/alipay)Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app.AUD, CAD, CNY, EUR, GBP, HKD, JPY, MYR, NZD, SGD, USDAU, CA, Europe, HK, JP, NZ, SG, USAlipay isn’t currently supported on the Hosted Invoice Page.[Bancontact](https://docs.stripe.com/payments/bancontact)Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Credit transfer (Sources)](https://docs.stripe.com/payments/sources/credit-transfers)Stripe users can receive bank transfers directly from customers using [Sources](https://docs.stripe.com/sources).EUR, JPY, USDEurope (SEPA), JP, USNone.[Bank transfer (Payment Intents)](https://docs.stripe.com/payments/bank-transfers)Stripe users can receive bank transfers directly from customers using [Payment Intents](https://docs.stripe.com/payments/payment-intents).EUR, IDR, JPY, MXN, GBP, USDEurope (SEPA), Indonesia, Japan, Mexico, United Kingdom, United StatesCan only add this payment method to individual invoices. Invoices that use this payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) Stripe users in the United Kingdom can accept Bacs Direct Debit from customers with a UK bank account.GBPUnited KingdomYou must be based in United Kingdom.[BECS Direct Debit in Australia](https://docs.stripe.com/payments/au-becs-debit)Stripe users in Australia can accept BECS Direct Debit payments from customers with an Australian bank account.AUDAUYou must be based in Australia.[Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment)Boleto is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment.BRLBRYou must be based in Brazil.[Cash App Pay](https://docs.stripe.com/payments/cash-app-pay)Cash App Pay is a reusable payment method in the US that requires customers to authenticate their payment.USDUSYou must be based in the United States.[Cards](https://docs.stripe.com/payments/cards/overview)Cards are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process.Most currenciesMost locationsNone.[EPS](https://docs.stripe.com/payments/eps)EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Financial Process Exchange (FPX)](https://docs.stripe.com/payments/fpx)A Malaysia-based payment method that allows customers to complete transactions online using their bank credentials.MYRMYYou must be based in Malaysia.[giropay](https://docs.stripe.com/payments/giropay)A German payment method based on online banking. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[iDEAL](https://docs.stripe.com/payments/ideal)iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Pre-authorized payment method (PAD)](https://docs.stripe.com/payments/acss-debit)Stripe users in Canada and the United States can accept pre-authorized debit payments (PADs) from customers with a Canadian bank account using the Automated Clearing Settlement System (ACSS).CAD, USDCA, USNone.[Konbini](https://docs.stripe.com/payments/konbini)Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash.JPYJPInvoices that use Konbini as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Link](https://docs.stripe.com/payments/link)Link saves and autofills payment and shipping information for your customers so they don’t need to enter payment details manually.Most currenciesMost locationsNone.[PayNow](https://docs.stripe.com/payments/paynow)PayNow is a real-time bank transfer service available to customers of participating banks and Non-Bank Financial Institutions (NFIs) in Singapore. Customers see a QR code when checking out with PayNow. They complete the payment by scanning it using a participating app.SGDSGInvoices that use PayNow as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[PayPal](https://docs.stripe.com/payments/paypal)PayPal is one of the most familiar brands in Europe. Millions of active global PayPal users choose PayPal everyday for one-off and recurring payments.EUR, GBP, USD, CHF, CZK, DKK, NOK, PLN, SEK, AUD, CAD, HKD, NZD, SGDEurope, UK, CHYou must be in Europe, the United Kingdom, or Switzerland.[PromptPay](https://docs.stripe.com/payments/promptpay)PromptPay allows customers in Thailand to make a payment using their preferred app from participating banks.THBTHInvoices that use PromptPay as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Przelewy24](https://docs.stripe.com/payments/p24)A Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Przelewy24 provides a way for customers to pay with over 165 banks.EUR, PLNAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[SEPA direct debit](https://docs.stripe.com/payments/sepa-debit)The Single Euro Payments Area (SEPA) is an initiative of the European Union to simplify payments within and across member countries.EURMost locationsNone.[Sofort](https://docs.stripe.com/payments/sofort)Stripe users in Europe and the United States can use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) to accept Sofort payments from customers in select countries.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[WeChat Pay](https://docs.stripe.com/payments/wechat-pay)As China’s largest internet company, Tencent offers a number of web and mobile products across social networking, communications, media, games, finance, and so on.CNY, AUD, CAD, EUR, GBP, HKD, JPY, SGD, USD, DKK, NOK, SEK, CHF (depending on business location)AU, CA, Europe, HK, JP, SG, UK, USNone.",
    "title": "Payment methods | Stripe Documentation",
    "description": "Learn about the supported payment methods for Invoicing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/no-code/tap-to-pay",
    "markdown": "# Tap to Pay on the Dashboard mobile app\n\n## Use the Stripe Dashboard mobile app to accept in-person, contactless payments.\n\nProcess in-person, contactless payments using only your phone with [Tap to Pay](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay) with Stripe Terminal. You don’t need to buy any hardware or write any code. To get started accepting payments with Tap to Pay, download the Stripe Dashboard mobile app on [iOS](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8) or [Android](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) and log in with your Stripe account.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you start setting up Tap to Pay, make sure that you meet the requirements below and operate in a supported country.\n\nIf you’re new to Stripe, set up and activate your [Stripe account](https://dashboard.stripe.com/register/) before downloading the Stripe Dashboard mobile app.\n\nIf you’re new to Stripe, [set up and activate a new account](https://dashboard.stripe.com/register/) before downloading the Dashboard mobile app.\n\n|     |     |\n| --- | --- |\n| **Good for** | In-person payments without your own app or terminal |\n| **Pricing** | [Pay-as-you-go for Terminal and Tap to Pay](https://stripe.com/pricing) |\n| **Compatible with** | Contactless cards (Visa, MC, Amex, Discover) and NFC mobile wallets (Apple Pay, Google Pay, Samsung Pay) |\n| **Download the app** | The Stripe Dashboard app is available on the App Store and Google Play:<br><br>*   [Download iOS app on the App Store](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8)<br>*   [Download Android app on Google Play](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) |\n| **Requirements** | *   [Stripe account](https://docs.stripe.com/get-started/account)<br>*   Stripe [iOS](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8) or [Android](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) Dashboard app<br>*   Location permissions enabled<br>*   **iOS:** iPhone XS or later with a device passcode set running iOS 16.0 or later<br>*   **Android:** A [supported Android device](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android#supported-devices) |\n| **Supported countries** | The Stripe Dashboard app is available on iOS and Android in the following countries.<br><br>**iOS country availability**<br><br>Australia<br><br>United Kingdom<br><br>United States<br><br>**Android country availability**<br><br>Australia<br><br>Austria<br><br>Belgium<br><br>Canada<br><br>Czech Republic<br><br>Denmark<br><br>Finland<br><br>France<br><br>Germany<br><br>Ireland<br><br>Italy<br><br>Luxembourg<br><br>Malaysia<br><br>Netherlands<br><br>New Zealand<br><br>Norway<br><br>Portugal<br><br>Singapore<br><br>Spain<br><br>Sweden<br><br>Switzerland<br><br>United Kingdom<br><br>United States |\n\n## Accept a Tap to Pay contactless payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Enable NFC\n\nBefore accepting Tap to Pay contactless payments, you must enable NFC on your mobile device.\n\n1.  Open your Stripe Dashboard mobile app.\n2.  Tap the add symbol () from any tab.\n3.  Select **Charge a card or send an invoice**.\n4.  Enter the amount to charge.\n5.  Select **Tap to Pay** as your payment acceptance option.\n6.  When the Tap to Pay symbol appears, prompt your customer to tap their card to the device by following the instructions on screen.\n7.  The payment confirmation page signals successful completion of the transaction.\n\n## Other ways to accept in-person payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re unable to accept a Tap to Pay payment in the Dashboard app, you have other options:\n\n*   **Manually charge a card**: Open the Stripe Dashboard app, click the add symbol () from any tab, and select **Charge a card or send an invoice**. Then, enter your customer’s card information manually.\n*   **iOS only: Generate a QR code**: Create a [payment link](https://docs.stripe.com/no-code/payment-links) and have your customer scan the QR code to pay. You can also [share a payment link](https://docs.stripe.com/payment-links/share) through text, email, and other channels.\n\n#### For developers\n\n## Charge limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMaximum and minimum limits on charge amounts apply when accepting payments. For more information on limits, see [Minimum and maximum charge amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts).",
    "title": "Tap to Pay on the Dashboard mobile app | Stripe Documentation",
    "description": "You only need your phone to let in-person customers pay you with a contactless card or mobile wallet. Download the Stripe Dashboard mobile app for iPhone or Android to use Tap to Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/no-code/payout",
    "markdown": "# Pay out to people | Stripe DocumentationThe Stripe Docs logo\n\n## Add money to your Stripe balance and pay out to sellers or service providers.\n\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n\nWhen adding funds to your balance, best practice is to use a manual [payout](https://docs.stripe.com/payouts \"payout\") schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n#### Note\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#create-connected-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n\n### Customize your signup form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [platform settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), customize your Express signup form by changing the color and logos that users see when they click your [Connect](https://docs.stripe.com/connect \"Connect\") link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-form.4b13fc5edc56abd16004b4ccdff27fb6.png)\n\nDefault Express signup form\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/branding-settings-payouts.20c99c810389a4e7f5c55238e80a9fc8.png)\n\nBranding settings\n\n### Create a connected account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a connected account onboarding link by clicking **+Create** on the [accounts overview page](https://dashboard.stripe.com/connect/accounts/overview), and selecting **Express** for the account type, along with the **transfers** capability. Click **Continue** to generate a link to share with the user you want to onboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-account.474100e68f8c8df37bc4b5fac9e04583.png)\n\nCreate a connected account\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-express-link.40a3af1fdd03417e6560d3327db55961.png)\n\nCreate an onboarding link\n\nThis link directs users to a form where they can provide information in order to connect to your platform. For example, if you have a Q&A platform, you can provide a link for writers to connect with the platform. The link is only for the single connected account you created. After your user completes the onboarding flow, you can view them in your accounts list.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-account-payout.94e15f1be4a11a54d18fc305433e50f4.png)\n\n[](#add-funds)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard. Click **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nSelect **Pay out connected accounts** to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n### Verify your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` as the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n### Add funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce verified, use the [Dashboard](https://dashboard.stripe.com/test/balance/overview) to add funds to your account balance.\n\n1.  In the Dashboard, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section.\n2.  In the **Add to balance** window, enter an amount in USD and select Connect payouts.\n3.  In the resulting modal (shown below), enter an amount in USD.\n4.  Verify the amount and then click **Add funds.**\n5.  The resulting object is called a [top-up](https://docs.stripe.com/api/topups/object) and can be viewed in the [Top-ups](https://dashboard.stripe.com/test/topups) section of the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/topup_modal.5523d356678b312020e4e063e7de8eb4.png)\n\n### View funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID in the format **tu\\_XXXXXX**, which you can see on the detailed view for the top-up.\n\n### Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfers](https://docs.stripe.com/get-started/account/add-funds) and are available in 1-2 business days.\n\n[](#pay-out-to-user)\n\nAfter your user completes [the onboarding process](https://docs.stripe.com/connect/add-and-pay-out-guide#create-connected-account) and you’ve added funds to your balance, you can transfer some of your balance to your connected accounts. In this example, money is transferred from the Q&A platform’s balance to the individual writer.\n\nTo pay your user, go to the **Balance** section of an account’s detail page and click **Add funds**. By default, any funds you transfer to a connected account accumulate in the connected account’s Stripe balance and are paid out on a daily rolling basis. You can change the payout frequency by clicking the right-most button in the **Balance** section and selecting **Edit payout schedule**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/send-funds.5c34a4e2e038c3a5343c7aa165eb3787.png)\n\nSend funds to user\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/edit-payout-schedule.537eca9bac08a738533bd644e9dd2280.png)\n\nEdit payout schedule",
    "title": "Pay out to people | Stripe Documentation",
    "description": "Add money to your Stripe balance and pay out to sellers or service providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/dashboard/manage-invoices",
    "markdown": "# Invoices page | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage your invoices in the Dashboard.\n\nInvoices move through a series of statuses as they’re created and processed. You can track the status of an [invoice](https://docs.stripe.com/api/invoices \"invoices\") on the [Invoices page](https://dashboard.stripe.com/invoices).\n\n#### Note\n\nYou can remove the header on the Invoices page by closing all of the items in the task list. After you remove the header, you can’t make it reappear.\n\nInvoices in `open` status can display a different badge, such as `Past due` or `Retrying`. In some scenarios, you can hover over the badge to view an explanatory tooltip.\n\n#### Note\n\nIf an open non-subscription invoice is waiting for a payment that’s initiated but still pending, it shows the `Pending` badge in the list of invoices. However, its details page shows the `Open` badge.\n\n![Invoices page](https://b.stripecdn.com/docs-statics-srv/assets/invoices-page.e6e97cbab0962e47914e2dd446a046b7.png)\n\nInvoices page\n\n## Filter invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the Invoices page, you can filter the view using the buttons above the list. The **Outstanding** button shows invoices with `open` status. To further refine the list, click **Filter**. You can filter by frequency, status, creation date, due date, and so on.\n\nYou can also configure the information displayed in the **Customer** column. Click the gear icon next to that column’s heading and select the customer description, customer email, list of line items, or a metadata attribute.\n\n![Filter invoices](https://b.stripecdn.com/docs-statics-srv/assets/invoices-page-filter.309be8c81d4f7cb9e551923804fe941f.png)\n\nFilter invoices\n\n## Invoice actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou see a **Download PDF** button when you hover over the overflow menu (). Depending on the invoice status, clicking the button downloads either a PDF of the invoice or a receipt. If the customer has paid the invoice, Stripe generates a PDF of the receipt. For all other statuses, Stripe generates a PDF of the invoice. The overflow menu also provides additional actions, which allow you to duplicate an invoice, delete a draft, or view the customer details associated with an invoice.\n\n#### Note\n\nIf you need the original invoice for a paid invoice, click through to the [Invoice details page](#invoice-details-page).\n\n## Export invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can export all of your invoices, or a subset of them (as a CSV file) by using the **Export** feature.\n\n![Export invoices](https://b.stripecdn.com/docs-statics-srv/assets/export-invoices.222e5d15d14c8527fa040da14ee2b510.png)\n\nExport invoices\n\n## Invoice details page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you click an invoice on the Invoices page, its details page opens. If the invoice is in `draft` status and isn’t associated with a subscription, the edit invoice form opens automatically. You can perform a variety of actions on the details page, such as editing it, adding a note, resending it, or downloading a receipt. The available actions depend on the status of the invoice.\n\n#### Note\n\nAfter Stripe finalizes an invoice, you can’t change its due date. If you need to change the due date, you must [void](https://docs.stripe.com/invoicing/overview#void) (cancel) the original invoice and send a new one.\n\n![Invoice details page](https://b.stripecdn.com/docs-statics-srv/assets/invoice-details-page.b44b9476aee88475ad7b18558e1d03a8.png)\n\nInvoice details page\n\n## Pending invoice items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can see a customer’s pending invoice items by navigating to the [Customers page](https://dashboard.stripe.com/customers), and clicking on their name. If the customer has a pending invoice item, it appears under **Pending invoice items**. An invoice item appears as pending if it’s not attached to any invoice.\n\nUnder **Pending invoice items**, you can also choose to create a new invoice item, or instantly invoice everything listed. When you click **Invoice now**, a dialog appears that lets you select whether to charge the default source or email the invoice to the customer. Additionally, the dialog gives you the option to calculate tax automatically. To learn about how invoice items fit within a subscription, see [Add invoice items to a draft subscription invoice](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).",
    "title": "Invoices page | Stripe Documentation",
    "description": "Learn how to manage your invoices in the Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/automatic-charging",
    "markdown": "# Automatic charging | Stripe DocumentationThe Stripe Docs logo\n\n## Have Stripe automatically charge a customer's stored payment method.\n\nStripe can automatically attempt to pay an [invoice](https://docs.stripe.com/api/invoices \"invoices\") if the customer has a payment method on file. You can automatically charge a customer when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) or through the [API](https://docs.stripe.com/api/invoices). When you automatically charge a payment method on file, Stripe doesn’t notify the customer about the invoice. However, if you want to send an email receipt, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you’ve added your customer’s email address.\n\n## Add a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a payment method, go to the [Customers page](https://dashboard.stripe.com/customers) and select a customer. Select **Add** in the **Payment methods** section to add a card or an ACH debit bank account. You can also add a payment method during invoice creation. If your customer uses multiple payment methods, click the overflow menu () next to the card to make it the default.",
    "title": "Automatic charging | Stripe Documentation",
    "description": "Have Stripe automatically charge a customer's stored payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/automatic-reconciliation",
    "markdown": "# Automatic reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Let Stripe handle the cash reconciliation for credit transfer payment methods.\n\n#### Warning\n\nThis page covers the Sources-based implementation of credit transfers. We deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Credit Transfers, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\n​​Businesses often use credit transfer payments for large deals or new business relationships. Credit transfer payments can generate a lot of manual work for your team. Stripe facilitates this process by accepting transfers that pay open invoices.\n\nFor each of your customers, Stripe auto-generates a US virtual bank account number that can be paid in USD with ACH credit or wires. When your customer sees an invoice with this virtual bank account, they can send payment to it. ​​Stripe automatically reconciles the payment with the virtual bank account and the invoice. Stripe then marks the invoice as paid.\n\n### Transfers versus debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing automatic reconciliation means that you don’t need to expose your sensitive bank account details to users or manually reconcile open invoices with your bank. With auto-reconciliation for invoices, Stripe can:\n\n*   Match incoming payments with invoice amounts.\n*   Manage overpayment or underpayment, when the amount paid doesn’t match the invoice.\n*   Reduce the number of API calls required to transfer funds into Stripe.\n*   Manage payment retries on open invoices.\n\n## Pay an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer doesn’t have an [ach\\_credit\\_transfer](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-ach_credit_transfer) subhash, Stripe creates one for every invoice. All invoices include instructions on where to send payment. Also, each customer has a unique payment address that’s shared across their invoices. With the `ach_credit_transfer` subhash, customers can transfer funds through either the US ACH system or domestic wire, and include an invoice number in the memo field.\n\n#### Note\n\n​​ACH credit transfers only support USD.\n\nAs soon as a customer makes a transfer, Stripe matches the payment to an invoice by checking for an invoice number in the memo field of the transfer. We fulfill any invoices that we find a match for. If we can’t find a match, we fulfill the oldest outstanding invoice of the same amount. If we can’t find any outstanding invoice that has the same amount, then we’ll fulfill as many outstanding invoices that can be fulfilled with the transfer amount, starting with the oldest payable invoice. When an invoice is fulfilled, an `invoice.paid` event occurs (you can receive this event by using [webhooks](https://docs.stripe.com/invoicing/integration/workflow-transitions)).\n\nYou can inspect the status of any ACH credit transfer by viewing the list of payment methods for the customer in the [Dashboard](https://dashboard.stripe.com/customers). You can also see the status by viewing a customer’s sources in the API:\n\n`curl https://api.stripe.com/v1/customers/cus_9jWC3097MQwYwF/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nStripe returns a list of sources attached to that customer. The source `type` for an ACH credit transfer has a value of `ach_credit_transfer`. In the following response example, the ACH credit transfer receiver is awaiting payment from the customer:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"src_19Q3AILlRB0eXbMt81RVDnM9\",       \"object\": \"source\",       \"amount\": null,       \"client_secret\": \"src_client_secret_Z0zPIgnR0BVafiMLaJcxI3HS\",       \"created\": 1481585102,       \"currency\": \"usd\",       \"customer\": \"cus_9jWC3097MQwYwF\",       \"flow\": \"receiver\",       \"livemode\": false,       \"metadata\": {},       \"owner\": {         \"address\": null,         \"email\": \"jenny.rosen@example.com\",         \"name\": null,         \"phone\": null,         \"verified_address\": null,`\n\nOccasionally, customers might want to use payment methods outside of Stripe, such as paper checks. In these situations, Stripe allows you to keep track of your invoice’s payment status. After you receive an invoice payment from a customer outside of Stripe, you can manually mark their invoice as paid:\n\n`curl https://api.stripe.com/v1/invoices/in_18jwqyLlRB0eXbMtrUQ97YBw/pay \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d paid_out_of_band=true`\n\n## Handle exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your customer pays an amount that doesn’t match an invoice amount, the funds aren’t charged and remain in the `Source​` object. If you want to use these funds to fulfill your invoice, you have a few options:\n\n*   **Overpayment**—If a user sends more funds than the invoice requests, Stripe automatically marks the invoice as paid, using the funds that match the open invoice. The remaining funds stay in the `Source` receiver. You can manually apply these funds to an invoice. If you have multiple matching open invoices, Stripe applies the funds to the oldest invoice.\n*   **Underpayment**—In your [Subscription and emails settings](https://dashboard.stripe.com/settings/billing/automatic), you can specify rules around underpayment in the **Partial payments** section. You can specify that within a certain margin of error, Stripe auto-reconciles invoices and credits the difference.\n\nA typical scenario for underpayment might be that a customer’s bank takes funds from the total amount sent. For example, ​​if the customer sends 100 USD to pay their 100 USD invoice, the customer’s bank might take 20 USD, which leaves you with 80 USD. If this difference (which is usually within 20 USD) is acceptable, you can ​​minimize manual effort by specifying this margin ahead of time.\n\nFor any other exceptions:\n\n*   ​If the receiver has enough money to pay your invoice, you can claim those funds in the Dashboard by clicking the **Charge customer** button on the invoice, or by calling the [Pay invoice](https://docs.stripe.com/api#pay_invoice) endpoint and specifying the ACH credit transfer object as the source.\n*   ​​If the funds to pay the invoice are insufficient and you don’t forgive the difference, you can ask your customer to send the remaining amount. You can also void the old invoice, open a new one for the lesser amount, and immediately click **Charge customer** on it.\n\nIf your customer has an ACH credit transfer source with sufficient funds, or a credit card or bank account on file, you can use those sources to pay the invoice by calling the [Pay invoice](https://docs.stripe.com/api#pay_invoice) endpoint with the source you want to use.\n\n## Refund payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund ACH credit transfer and check payments through either the [Dashboard](https://dashboard.stripe.com/payments) or the [API](https://docs.stripe.com/api#create_refund). However, the customer must specify the account to return the funds to. Stripe automatically contacts the customer at the email address provided. As soon as the customer provides us with their account information, we process the refund automatically.\n\nThe initial status of the refund is `pending`. If the refund fails, ​​you’ll receive the `charge.refund.updated​` event, and the status of the refund transitions to `failed`. This means that ​​we couldn’t process the refund, and you must return the funds to your customer outside of Stripe. This is a rare occurrence, which can happen if the refund is sent to an account that has been frozen. Refunds that have been completed have a `succeeded` status.\n\n## Test payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf ​​you’re in test mode, you can simulate transferring money into the receiver by updating the owner email on the source to `amount_XXXX@any_domain.com`, where `XXXX` is the amount of money you want to simulate transferring. ​​The payment won’t be associated with the invoice unless Stripe has frozen the invoice from editing. This happens either one hour after [webhooks](https://docs.stripe.com/webhooks \"webhook\") have been delivered, or when you’ve sent the customer an email for the invoice. In the Dashboard, you can immediately send an email by clicking the invoice’s **Send invoice** button.\n\n`curl https://api.stripe.com/v1/sources/src_19Q3AILlRB0eXbMt81RVDnM9 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode \"owner[email]\"=\"amount_1000@example.com\"`\n\nA few moments after the update request, you can retrieve the `receiver` parameter:\n\n`curl https://api.stripe.com/v1/sources/src_19Q3AILlRB0eXbMt81RVDnM9 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf the update request succeeded, the `receiver` attribute shows the funds:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"src_19Q3AILlRB0eXbMt81RVDnM9\",       \"object\": \"source\",       \"amount\": null,       \"client_secret\": \"src_client_secret_Z0zPIgnR0BVafiMLaJcxI3HS\",       \"created\": 1481585102,       \"currency\": \"usd\",       \"customer\": \"cus_4fdAW5ftNQow1a\",       \"flow\": \"receiver\",       \"livemode\": false,       \"metadata\": {},       \"owner\": {         \"address\": null,         \"email\": \"amount_1000@test.com\",         \"name\": null,         \"phone\": null,         \"verified_address\": null,`\n\nIn this instance, the customer’s open invoice (of the same amount) transitions to paid. It has a corresponding payment object that displays the details of the payment.",
    "title": "Automatic reconciliation | Stripe Documentation",
    "description": "Let Stripe handle the cash reconciliation for credit transfer payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/no-code/cart-recovery-emails",
    "markdown": "# Cart Recovery Emails | Stripe DocumentationThe Stripe Docs logo\n\n## Cart Recovery EmailsBeta\n\n## Automatically send emails to remind customers to complete their purchase.\n\nCustomers might leave a Payment Link or Checkout session before completing their purchase—also known as [cart abandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails). Enable no-code automated cart recovery emails, directly from the Dashboard, to email customers to complete their purchase and boost your revenue and conversion.\n\nCart Recovery Emails is currently in invite only beta for US businesses. To request early access for your Stripe account, sign up [here](https://forms.gle/wNkyKBSirJj6GFXv6).\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t have a Stripe account, [sign up now](https://dashboard.stripe.com/register/payment_links).\n\nStripe sends Cart Recovery Emails from the marketing email domain (marketing@marketing.stripe.com) but we encourage you to onboard your own [Custom Email Domain](https://dashboard.stripe.com/settings/emails). This allows customers to receive these emails from your own domain resulting in better deliverability and conversion rates.\n\n![sample email](https://b.stripecdn.com/docs-statics-srv/assets/cart-recovery-email.fad5422a229cebffff9984b45ca62974.png)\n\nSample cart recovery email\n\n1.  Go to your Stripe Dashboard.\n2.  Navigate to Settings and click [Checkout and Payment Links](https://dashboard.stripe.com/settings/checkout#cart-recovery-emails). You can see and send a preview of the cart recovery email there and customize it if necessary.\n    \n    ![cart recovery email settings](https://b.stripecdn.com/docs-statics-srv/assets/checkout-settings-cart-recovery.2d64419f339e7c71d5f115b1d747279b.png)\n    \n3.  Review and, if acceptable, accept the Cart Recovery Emails terms and conditions.\n4.  (Optional) Configure a custom reply-to address; this allows you to receive replies from customers. The default address is no-reply@stripe.com, and customer replies aren’t sent to you.\n\nTo send cart recovery emails, you need to [collect consent from customers](https://docs.stripe.com/payments/checkout/promotional-emails-consent). Depending on how you create your Payment Link or Checkout session, you might need to take additional actions.\n\n|     | Additional actions |\n| --- | --- |\n| Payment Link created in the Dashboard (No-code) | No additional action is required. `consent_collection` is automatically set and your customers receive recovery emails. You’ll also receive events if you’ve configured a webhook endpoint. |\n| Payment Link created with the API | Pass [“consent\\_collection\\[promotions\\]”=auto](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-consent_collection-promotions) when you create the Payment Link. |\n| Checkout created with the API | Pass [“consent\\_collection\\[promotions\\]”=auto](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-consent_collection-promotions) when you create the Checkout session. |\n\nAfter `consent_collection` is set, the customer sees a checkbox below the email address field on the checkout page asking them to consent to receiving promotional emails.\n\n## Sending Cart Recovery Emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmails are automatically sent on your behalf to the customer when the checkout session expires (defaults to 24 hours). Checkout sessions created with the API can change this using the `expires_at` field. The following requirements must also be satisfied:\n\n*   The checkout session isn’t testmode.\n*   The customer consented to receiving promotional emails on the checkout page and provided a complete email address.\n*   The customer doesn’t have a later checkout session with you. For example, if the customer created checkout sessions A and B (in that order) and both expire, only B will have a recovery email sent. If B had been completed successfully, no emails would be sent.\n\n## Finding recovered payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe display a `Recovered` badge on the [Payment](https://dashboard.stripe.com/payments) details page in the Dashboard if the payment is recovered using a cart recovery email.\n\n![recovered payment](https://b.stripecdn.com/docs-statics-srv/assets/checkout-recovered-badge.d768294772fece45b5015a50cee45245.png)\n\n## Recover abandoned carts using the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re a developer and want to further customize your cart recovery emails, consider [recovering abandoned carts using the API](https://docs.stripe.com/payments/checkout/abandoned-carts).\n\nBecause your business might use various platforms to send promotional emails, make sure that you synchronize these emails across all systems when customers subscribe or unsubscribe to them.\n\nIn the Stripe Dashboard, you can synchronize recipient promotional subscriptions with other systems:\n\n*   Download a CSV file containing the promotional email subscriptions for each email address that Stripe has ever collected promotional consent from.\n*   Upload CSV files containing updated promotional subscription data per email address, which updates the subscription statuses that Stripe has on record for each recipient.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sync-subscriptions-settings.fb75370f685c42b1197be4dd4b320e24.png)\n\nSync subscriptions settings section\n\n### Download recipient promotional email subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo download the subscriptions, go to the [Email settings page](https://dashboard.stripe.com/settings/emails) in the Dashboard and click **Download customer marketing email subscriptions**.\n\nThis initiates a download of a CSV file containing the promotional email subscription statuses of all email addresses Stripe has a subscription status for. It also includes the date when that change was made.\n\n*   Email address\n*   Subscription status\n    *   Either `Subscribed` or `Unsubscribed`\n*   Updated at\n    *   A date and time, in UTC, which conveys when the update time\n\n#### Sample CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Email address | Subscription status | Updated at |\n| --- | --- | --- |\n| example@gmail.com | Subscribed | 2023-10-23T20:58:02+00:00 |\n| jonathan@hotmail.com | Unsubscribed | 2023-10-23T20:58:02+00:00 |\n\n### Upload promotional email subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo synchronize Stripe’s subscription status with other systems, you can upload subscription statuses per email address.\n\nIn the [Email settings page](https://dashboard.stripe.com/settings/emails) in the Dashboard, you can upload a CSV file containing subscription statuses per email address. You can also include a date field for the **updated at** status to Stripe’s system. If a date field isn’t specified, the system defaults to the uploaded status.\n\n*   Email address\n*   Subscription status\n    *   Either `Subscribed` or `Unsubscribed`\n*   Updated at (optional)\n    *   Date and time in ISO 8601 format or Unix timestamp.\n\n#### Sample CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Email address | Subscription status | Updated at |\n| --- | --- | --- |\n| adrian@gmail.com | Subscribed | 2023-10-23T20:58:02+00:00 |\n| jonathan@hotmail.com | Unsubscribed |     |\n| example@gmail.com | Subscribed | 1698094682 |\n\n## View marketing email subscription for a customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view the marketing subscription for a customer on the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customer-detail-page-marketing-prefs.030fda62a655721b1a5371bbc450876e.png)\n\nMarketing email preferences in customer details page\n\nThis table describes the customer’s overall subscription, as well as their granular marketing email preferences.",
    "title": "Cart Recovery Emails | Stripe Documentation",
    "description": "Automatically send emails to remind customers to complete their purchase.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/billing-cycle",
    "markdown": "# Setting the subscription billing cycle date\n\n## Learn how to set the billing date for subscriptions.\n\nA subscription’s billing cycle depends on two factors:\n\n*   The recurring interval of its [price](https://docs.stripe.com/products-prices/overview) or prices, such as monthly, yearly, weekly, and so on.\n*   The [billing cycle anchor](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_cycle_anchor) is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The default value is either the subscription creation date or the trial end date (if you’re using a trial period). You can also explicitly set this value at the time you create the subscription.\n\n#### Note\n\nBilling cycle anchors are UNIX timestamps in seconds from the current epoch.\n\n### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A monthly subscription with a billing cycle anchor date of September 2 always bills on the 2nd day of the month.\n*   A monthly subscription with a billing cycle anchor date of January 31 bills the last day of the month closest to the anchor date, so February 28 (or February 29 in a leap year), then March 31, April 30, and so on.\n*   A weekly subscription with a billing cycle anchor date of Friday, June 3 bills every Friday thereafter.\n\nFull billing periods start on the first full [invoice](https://docs.stripe.com/api/invoices \"invoices\") date, which is often the same as the billing cycle anchor and is always interval-aligned with it.\n\n## Specify the billing cycle anchor for new subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are two ways to set the billing cycle anchor on new subscriptions:\n\n*   Use `billing_cycle_anchor_config` to calculate the timestamp for you (monthly or yearly subscriptions only).\n*   Use `billing_cycle_anchor` to accept the timestamp directly.\n\nIf you’re creating a monthly or yearly subscription, we recommend using the `billing_cycle_anchor_config` parameter because it automatically factors in short months and leap years for you. If you’re creating a daily or weekly subscription, or if you prefer to set the cycle date of your subscription using a timestamp, use the `billing_cycle_anchor` parameter directly.\n\n### Use `billing_cycle_anchor_config`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create an integration with monthly and yearly subscriptions, use `billing_cycle_anchor_config` on [create subscription](https://docs.stripe.com/api#create_subscription) to specify the day of the month on which to anchor.\n\nSet `day_of_month` to `31` to create a monthly subscription that cycles at the end of the month, even in months with less than 31 days. If a month has less than 31 days, the subscription cycles on the last day of that month.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[day_of_month]\"=31`\n\nYou can also specify `month` to control the month of year for the anchor on multi-month and yearly subscriptions.\n\nTo cycle your yearly subscriptions on the first of July, create a yearly subscription with a `month` of `7` and `day_of_month` of `1`.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[month]\"=7 \\  -d \"billing_cycle_anchor_config[day_of_month]\"=1`\n\nTo precisely align billing periods with another subscription, provide the same `day_of_month` as the original as well as the same `hour`, `minute`, and `second`. If you omit the `hour`, `minute`, and `second` parameters, the values derive from the time of subscription creation.\n\nFor example, if you have an existing monthly subscription with a `billing_cycle_anchor` timestamp that contains the day of the month, hour, minute, and second of 15, 12, 30, and 0, you can align a new monthly subscription with it. To do this, set `day_of_month`, `hour`, `minute`, and `second` to match those same values, respectively.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[day_of_month]\"=15 \\  -d \"billing_cycle_anchor_config[hour]\"=12 \\  -d \"billing_cycle_anchor_config[minute]\"=30 \\  -d \"billing_cycle_anchor_config[second]\"=0`\n\nIf you use `billing_cycle_anchor_config`, it might result in a `billing_cycle_anchor` that’s more than one billing period in the future. However, the date for the first full invoice always falls within one billing period from the creation of the subscription or the ending of a free trial.\n\nFor example, assume that you create a two-month interval subscription in February and you cycle it at the end of every month by setting `day_of_month` to `31`. The next month that has 31 days on two-month intervals from February is August, which results in a billing cycle anchor on August 31. However, the first full invoice date for this subscription still occurs in February. There’s an initial, prorated period from subscription creation until February 28 (or 29 during a leap year), followed by a full two-month billing period.\n\n### Use `billing_cycle_anchor` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a subscription with an explicit billing cycle anchor using the Subscriptions API or Checkout.\n\nCall [create subscription](https://docs.stripe.com/api#create_subscription), setting a timestamp for `billing_cycle_anchor`.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d billing_cycle_anchor=1611008505`\n\n### Configure proration behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegardless of which API parameter you use, Stripe automatically creates a prorated invoice to bill for the period between the subscription creation date and the first full invoice date.\n\nIf you don’t want to immediately charge a customer for the period between the subscription creation and the first full invoice date, either:\n\n*   [Disable the proration](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations) by setting `proration_behavior` to `none`, making the initial period up to the first full invoice date free. This action doesn’t generate an invoice at all until the first billing cycle.\n*   [Combine a trial with the billing\\_cycle\\_anchor](https://docs.stripe.com/billing/subscriptions/trials#combine-trial-anchor) by setting `trial_end` to a timestamp representing the date when the free trial ends. Depending on the duration of the free trial and the number of days until the first full invoice date, this option might result in a prorated invoice following the trial period. For example, a free trial is 7 days and the billing cycle is monthly on the 1st. If the customer subscribes on the 15th, we generate a prorated invoice on the 22nd for the period between the 22nd and the 1st, then invoice for the full amount on the 1st of each month thereafter. If a customer subscribes on the 28th, the free trial extends past the 1st, generating a prorated invoice until the next month.\n\n## Change the billing cycle on pre-existing subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Subscriptions API](https://docs.stripe.com/api/subscriptions/update) or [Dashboard](https://dashboard.stripe.com/subscriptions) to change the billing date of an existing subscription through one of the following options:\n\n*   Reset the billing cycle anchor to the current time.\n*   Add a [free trial](https://docs.stripe.com/billing/subscriptions/trials) to automatically set the anchor date to the end of the trial. Trials typically start when you create a subscription, but you can also apply them to existing subscriptions, allowing you to credit the customer for the days left in the previous cycle that they already paid.\n*   If all the prices are zero-amount, adding one or more paid prices immediately resets the billing period. See the [upgrade and downgrade guide](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#handling-zero-amount-prices-and-quantities) for more details on this scenario.\n\n### Reset the billing cycle to the current time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you reset the billing cycle, Stripe immediately sends an invoice. Enable proration to credit the customer for any days already paid in the previous period. Disabling proration might result in overcharging your customer.\n\nCall [update the subscription](https://docs.stripe.com/api#update_subscription), setting `billing_cycle_anchor` to `now` and `proration_behavior` to `create_prorations` to prevent overcharging the customer for any days they already paid in the previous cycle.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d billing_cycle_anchor=now \\  -d proration_behavior=create_prorations`\n\n### Add a trial to change the billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdding a non-prorated trial period to an existing subscription allows you to configure the billing cycle to be any date.\n\nTypically, if you’re using the trial period to change the billing cycle without issuing a prorated invoice, you disable proration because the length of the trial period accounts for the portion already paid from the previous billing cycle.\n\nFor example, if a customer has an active subscription set to bill next on July 23, and you introduce a trial period until August 1:\n\n*   The customer receives a 0 USD invoice on July 15.\n*   The customer isn’t billed on July 23.\n*   The customer is billed next on August 1, then on September 1, and so on.\n*   The customer already paid through July 23 in the previous cycle, so that “free” period isn’t actually free.\n*   The period between July 23 and July 31 isn’t charged.\n*   The new cycle billed on August 1 is a full cycle at the normal rate.\n\nCall [update subscription](https://docs.stripe.com/api#update_subscription), setting `trial_end` to a Unix timestamp representing the end date for the trial (also the new billing cycle anchor) and `proration_behavior` to `none`.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d trial_end=1611008505 \\  -d proration_behavior=none`\n\n## Metered billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith [metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), the price paid by the customer varies based on consumption during the billing cycle. When changing the billing cycle results in ending a subscription interval early, you charge the customer for the usage accrued during the shortened billing cycle.\n\n### Thresholds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the regular cycle, you can configure subscriptions to bill whenever the amount due reaches a [threshold](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#billing-thresholds).\n\nIf you have a subscription configured to invoice this way, you can set it up to reset the subscription cycle when it hits the threshold.\n\nSee [billing thresholds](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#billing-thresholds) for more details.",
    "title": "Setting the subscription billing cycle date | Stripe Documentation",
    "description": "Learn how to set the billing date for subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices",
    "markdown": "# Invoices | Stripe API Reference\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [The Invoice object](https://docs.stripe.com/api/invoices/object)\n\n### Attributes\n\n*   Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.\n    \n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the latest charge generated for this invoice, if any.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically`<br><br>Attempt payment using the default source attached to the customer. |\n    | `send_invoice`<br><br>Email payment instructions to the customer. |\n    \n\n*   The ID of the customer who will be billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   #### \n    \n    hosted\\_invoice\\_urlnullable string\n    \n    The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.\n    \n*   The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.\n    \n*   End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    The subscription that this invoice was prepared for, if any.\n    \n*   Total after discounts and taxes.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_countrynullable string\n    \n*   #### \n    \n    account\\_namenullable string\n    \n*   #### \n    \n    account\\_tax\\_idsnullable array of stringsExpandable\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    billing\\_reasonnullable enum\n    \n\n*   #### \n    \n    custom\\_fieldsnullable array of objects\n    \n*   #### \n    \n    customer\\_addressnullable object\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n*   #### \n    \n    customer\\_namenullable string\n    \n*   #### \n    \n    customer\\_phonenullable string\n    \n*   #### \n    \n    customer\\_shippingnullable object\n    \n*   #### \n    \n    customer\\_tax\\_exemptnullable enum\n    \n*   #### \n    \n    customer\\_tax\\_idsnullable array of objects\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    due\\_datenullable timestamp\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n*   #### \n    \n    ending\\_balancenullable integer\n    \n\n*   #### \n    \n    from\\_invoicenullable object\n    \n*   #### \n    \n    invoice\\_pdfnullable string\n    \n\n*   #### \n    \n    last\\_finalization\\_errornullable object\n    \n*   #### \n    \n    latest\\_revisionnullable stringExpandable\n    \n\n*   #### \n    \n    next\\_payment\\_attemptnullable timestamp\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    post\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    pre\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    quotenullable stringExpandable\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n\n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n\n*   #### \n    \n    statement\\_descriptornullable string\n    \n\n*   #### \n    \n    subscription\\_detailsnullable object\n    \n*   #### \n    \n    subscription\\_proration\\_datenullable integer\n    \n\n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    threshold\\_reasonnullable object\n    \n*   #### \n    \n    total\\_discount\\_amountsnullable array of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    webhooks\\_delivered\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
    "title": "Invoices | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/dashboard/credit-notes",
    "markdown": "# Issue credit notes | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Dashboard to adjust or refund finalized invoices with credit notes.\n\nCredit notes are documents that decrease the amount of an `open` or `paid` [invoice](https://docs.stripe.com/api/invoices \"invoices\"). The difference between issuing a credit note and adjusting the amount of an invoice by [revising it](https://docs.stripe.com/invoicing/invoice-edits) is that a credit note doesn’t void and replace the original invoice. Some example scenarios where you might use credit notes include:\n\n*   **You accidentally overbilled a customer**—You accidentally charged your customer 110 USD instead of 100 USD because of a data entry mistake. Use a credit note to give your customer a 10 USD credit for the overcharge.\n*   **You’re short on inventory**—You billed your customer for five items, but when it’s time to ship them you realize you only have three items left in stock. Use a credit note to refund your customer for the two items they didn’t receive.\n*   **Discounts**—You and your customer negotiate a discount on an invoice. Instead of voiding the invoice and issuing a new one, you can use a credit note to adjust the amount owed on the existing invoice.\n\nA credit note reduces the amount due without recording any payment. However, if a credit note reduces the balance of an `open` invoice to 0, the invoice status changes to `paid`. For information on invoice statuses, see the [Invoicing overview](https://docs.stripe.com/invoicing/overview#invoice-statuses).\n\n#### Note\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you issue a credit note for an `open` invoice, it decreases the amount due on the invoice. When you issue a credit note for a `paid` invoice, you credit the customer’s account balance or give them a refund outside of Stripe.\n\nThe sum of all credit notes issued for an invoice can’t exceed the ​​total amount of the invoice. For a `paid` invoice, the sum of the refund, credit, and out-of-band payment amounts must equal the credit note total.\n\nWhen you create a credit note, you can apply credit amounts in three ways:\n\n*   Discount a fixed amount from an invoice line item.\n*   Discount a quantity from an invoice line item. The total discount is the discount quantity times the unit price of that line item.\n*   Apply a discount to the total invoice amount by adding a custom discount line item with a description, quantity, and unit price. The total discount is the quantity times the unit price.\n\nWe recommend discounting invoice line items when possible, since it associates each credit with a line item. Adding a custom discount line item can make reporting and tracking difficult, because the credit isn’t associated with a real invoice line item.\n\n#### Note\n\nYou can’t combine discount types on an invoice line item. For example, if you discount a line item quantity, then a future credit note can only discount that line item by quantity, not by amount. If you discount a line item amount, then a future credit note can only discount that line item by amount, not by quantity.\n\n## Create a credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create credit notes for open or paid invoices.\n\n1.  Open the [Invoices page](https://dashboard.stripe.com/test/invoices) in the Dashboard.\n    \n2.  Select the open or paid invoice you want to add a credit note to.\n    \n3.  Click **More** and select **Issue a credit note**.\n    \n4.  Select a reason for the credit note.\n    \n5.  (_Optional_) Perform the following actions:\n    \n    *   Edit line item credit quantities or amounts.\n        \n    *   Click **Add item** to add a custom line item.\n        \n    *   Click **Set item tax** to select a tax rate to use for credit purposes.\n        \n6.  If the invoice is `paid`, choose whether to refund the customer’s card, credit their balance, or refund the amount outside of Stripe (for example, cash).\n    \n7.  Click **Issue credit note** to submit the credit note.\n    \n\n#### Note\n\nOpen invoices can’t have a credit note with a pending [payment\\_intent](https://docs.stripe.com/api/invoices/object#invoice_object-payment_intent).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/credit-note-dashboard.d9f67171b43e5ad618bc6d153b86286a.png)\n\nIssue a credit note in the Dashboard\n\n## Credit balances and discounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you issue a credit note on an invoice with an applied [customer credit balance](https://docs.stripe.com/invoicing/customer/balance), funds are sometimes credited to the credit balance instead of the initial payment method. For example, if a credit balance of 150 USD is applied to an invoice for 200 USD, then the finalized invoice is for 50 USD. If you issue a credit note for 50 USD or less, the funds are refunded to the customer’s payment method. Anything above 50 USD is added to the customer’s credit balance and is applied to the next invoice.\n\n[Discounts](https://docs.stripe.com/billing/taxes/tax-rates#discounts) apply proportionally to all of the line items on an invoice. For example, applying a 50% discount to an invoice with 10 line items at 10 USD each changes the amount of each line item to 5 USD. If you then apply a credit note for one line item, it reduces the invoice amount by 5 USD.\n\nFixed-amount discounts work the same way. If you apply a 10 USD discount to an invoice with 10 line items at 10 USD, each line item is 10% of the sum amount and is discounted by 10% \\* 10 USD = 1 USD. The amount of each line item becomes 9 USD. If you then apply a credit note for one line item, it reduces the invoice amount by 9 USD.\n\nIf you want to credit the original line item amount, you can make up the difference by adding a custom discount line item to the credit note. For example, if a discount reduced a line item’s credit amount from 10 USD to 9 USD, you can add a custom discount line item for 1 USD.\n\n## Voiding credit notes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can void a credit note only if it’s on an open invoice. Voiding a credit note reverses its adjustment, increasing the amount due on the invoice by the amount of the credit note.\n\nTo void a credit note in the Dashboard, click the overflow menu () at the top right of the credit note, then select **Void credit note**.\n\n## Crediting negative line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also credit negative invoice line items.\n\nThe following restrictions apply:\n\n*   The total amount of the credit note must remain positive.\n*   The total amount credited to a negative line item must be negative.\n*   The total amount credited to a negative line item can’t be less than the line item amount.\n\nYou also can’t credit a negative amount on a custom credit note line item. We only support negative amounts on credit note line items that are tied to invoice line items.",
    "title": "Issue credit notes | Stripe Documentation",
    "description": "Use the Dashboard to adjust or refund finalized invoices with credit notes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/keys",
    "markdown": "# Stripe CLI keys and permissions\n\n## Learn about default Stripe CLI keys generated when you run \"stripe login\" and their permissions.\n\nBy default, you can use your account’s _secret keys_ to perform any API request without restriction. When you run the `stripe login` command to authenticate to the Stripe CLI, the CLI generates a set of _restricted keys_ for your account (one test mode, one live mode) that’re valid for 90 days.\n\n## About restricted keys![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnlike an API secret key, a _restricted_ key generated by the Stripe CLI has restrictions on the API requests that it can perform. You can create new restricted keys in the Dashboard with different restrictions, or specify any API key using the `--api-key` flag.\n\n### Where keys are stored![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CLI stores the keys in the **Restricted keys** section on the [API Keys](https://dashboard.stripe.com/apikeys) page and your local machine in `~/.config/stripe/config.toml`.\n\n### Where to find permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these steps to view the permissions associated with your restricted key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/apikeys) page.\n2.  Scroll down to the **Restricted keys** section.\n3.  Hover over the _info_ () icon next to your **CLI key** name to view permissions.\n\n## Specify an API key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Use the `--api-key` flag to specify your API secret key inline each time you send a request.\n\n`stripe login --api-key` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`",
    "title": "Stripe CLI keys and permissions | Stripe Documentation",
    "description": "Learn about default Stripe CLI keys generated when you run \"stripe login\" and their permissions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/update-payment-method",
    "markdown": "# Allow customers to update their subscription payment methods\n\n## Give your customers links they can use to update subscription payment details.\n\nThe Dashboard provides sharable links that allow customers to update their payment method for an automatically billed subscription.\n\nTo share a link, either:\n\n1.  Go to the **Subscription details** page for the customer’s subscription.\n2.  Click the **Actions** menu.\n3.  Select **Share payment update link**.\n\nOr:\n\n1.  Find the subscription on [**Dashboard** > **Customers**](https://dashboard.stripe.com/customers) > **Customer details** or [**Dashboard** > **Billing** > **Subscriptions**](https://dashboard.stripe.com/subscriptions).\n2.  Click the overflow menu ().\n3.  Select **Share payment update link**.\n\nA modal opens that allows you to:\n\n*   Email a link\n*   Copy a link to directly share with a customer\n*   Deactivate all existing links for this subscription\n\nThese links allow a customer to update their payment method for only the applicable subscription. The links don’t update other subscriptions or the customer’s default payment method.\n\n## Restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The subscription’s status must be `active`, `past_due`, or `trialing`. It cannot be `unpaid`.\n*   The subscription’s billing must be `auto` and charge a payment method. It cannot be `send`.\n*   This feature only supports updating card payment methods.\n*   Each link only allows a customer to update their payment details one time.\n*   If unused, a link expires after 30 days.",
    "title": "Allow customers to update their subscription payment methods | Stripe Documentation",
    "description": "Give your customers links they can use to update subscription payment details.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/checklist/go-live",
    "markdown": "# Go-live checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Use this checklist to ensure a smooth transition when taking your integration live.\n\nStripe has designed its live and test modes to function as [similarly as possible](https://docs.stripe.com/keys#test-live-modes). Flipping the switch is mostly a matter of swapping your [API keys](https://docs.stripe.com/keys).\n\nIf you are a developer, or had a developer perform an integration for you, you should also consider the following items before going live. If you’re using Stripe through a connected website or a plug-in, most won’t apply.\n\n*   #### Warning\n    \n    All requests use your account API settings, unless you override the API version. The [changelog](https://docs.stripe.com/upgrades#api-versions) lists every available version. Note that by default webhook events are structured according to your account API version, unless you set an API version during [endpoint creation](https://docs.stripe.com/api/webhook_endpoints/create).\n    \n    If you’re using a strongly typed language (Go, Java, TypeScript, .NET), the server-side library pins the API version based on the library version being used. If you’re not familiar with how Stripe manages versioning, please see the [versioning docs](https://docs.stripe.com/libraries#server-side-libraries).\n    \n    To make sure everything is in sync:\n    \n    *   Upgrade to the latest API version in your [Stripe Dashboard](https://dashboard.stripe.com/developers)\n    *   For dynamic languages (Node.js, PHP, Python, Ruby): [set the API version](https://docs.stripe.com/libraries#server-side-libraries) in the server-side library\n    *   For strongly typed languages (Go, Java, TypeScript, .NET): [upgrade to the latest version](https://docs.stripe.com/libraries#server-side-libraries) of your chosen library\n*   We’ve created several [test values](https://docs.stripe.com/testing) you can use to replicate various states and responses. Beyond these options, perform your due diligence, testing your integration with:\n    \n    *   Incomplete data\n    *   Invalid data\n    *   Duplicate data (for example, retry the same request to see what happens) We also recommend you have someone else test your integration, especially if that other person isn’t a developer themselves.\n*   Review your API error handling\n    \n    Once you’ve gone live is an unfortunate time to discover you’ve not properly written your code to handle every possible [error type](https://docs.stripe.com/api#errors), including those that should “never” happen. Be certain your code is defensive, handling not just the common errors, but all possibilities.\n    \n    When testing your error handling, pay close attention to what information is shown to your users. A card being declined (that is, a `card_error`) is a different concern than an error on your backend (for example, an `invalid_request_error`).\n    \n*   Stripe logs every request made with your API keys, with these records being viewable in the [Dashboard](https://dashboard.stripe.com/logs). We recommend that you log all important data on your end, too, despite the apparent redundancy. Your own logs will be a life-saver if your server has a problem contacting Stripe or there’s an issue with your API keys—both cases would prevent us from logging your request.\n    \n    Regularly examine your logs to ensure they’re storing only the information you need and not anything of a sensitive nature (for example, credit card details or personally identifiable information).\n    \n*   Ensure you're not relying on test mode objects\n    \n    Stripe objects created in test mode—such as plans, coupons, products, and SKUs—are not usable in live mode. This prevents your test data from being inadvertently used in your production code. When recreating necessary objects in live mode, be certain to use the same ID values (for example, the same plan _ID_, not the same _name_) to guarantee your code will continue to work without issue.\n    \n*   Ensure you've registered your production webhooks\n    \n    Your Stripe account can have both test and live [webhook endpoints](https://docs.stripe.com/webhooks). If you’re using webhooks, make sure you’ve defined live endpoints in your Stripe account. Then confirm that the live endpoint functions exactly the same as your test endpoint.\n    \n    While examining your webhooks status, also take a moment to check that your production endpoint:\n    \n    *   Gracefully handles delayed webhook notifications\n    *   Gracefully handles duplicate webhook notifications\n    *   Does not require event notifications to occur in a specific order\n*   Subscribe to the API announcements mailing list\n    \n    We recommend all developers subscribe to our [API updates mailing list](https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce) to keep up with new features as we release them.\n    \n*   Change and secure your API keys\n    \n    As a security measure, we recommend [rolling your API keys](https://docs.stripe.com/keys#safe-keys) on a regular basis, and also just before going live. This is in case they have been saved somewhere outside of your codebase during development. Make sure your workflow doesn’t result in your API keys being represented or stored in multiple places—this leads to bugs—or even ending up in your version control software.",
    "title": "Go-live checklist | Stripe Documentation",
    "description": "Use this checklist to ensure a smooth transition when taking your integration live.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/api-request",
    "markdown": "# Send your first Stripe API request\n\nAll accounts have a total of four API keys by default—two for test mode and two for live mode:\n\n*   **Test mode secret key**: Use this key to authenticate requests on your server when in test mode. By default, you can use this key to perform any API request without restriction.\n*   **Test mode publishable key**: Use this key for testing purposes in your web or mobile app’s client-side code.\n*   **Live mode secret key**: Use this key to authenticate requests on your server when in live mode. By default, you can use this key to perform any API request without restriction.\n*   **Live mode publishable key**: Use this key, when you’re ready to launch your app, in your web or mobile app’s client-side code.\n\n#### Testing and development\n\nUse only your test API keys for testing and development. This ensures that you don’t accidentally modify your live customers or charges.\n\nYou can find your secret and publishable keys in [API keys](https://dashboard.stripe.com/test/apikeys). When you’re logged in, Stripe’s documentation automatically populates code examples with your test mode API keys (only you can see these values). If you’re not logged in, our code examples include randomly generated API keys. You can replace them with your own test keys or [log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fget-started%2Fapi-request) to see the code examples populated with your test API keys. If you can’t view your API keys, ask the owner of your Stripe account to add you to their [team](https://docs.stripe.com/get-started/account/teams), with the proper permissions.\n\nThe following table shows randomly generated examples of secret and publishable test API keys:\n\n#### Restricted API keys\n\nThe Dashboard can also generate restricted API keys, enabling customizable and limited access to the API. However, Stripe doesn’t offer any restricted keys by default.\n\n| Type | Value | When to use |\n| --- | --- | --- |\n| Secret | `sk_test_4eC39HqLyjWDarjtT1zdp7dc` | **On the server side**: Must be secret and stored securely in your web or mobile app’s server-side code (such as in an environment variable or credential management system) to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n| Publishable | `pk_test_TYooMQauvdEDq54NiTphI7jx` | **On the client side**: Can be publicly accessible in your web or mobile app’s client-side code (such as checkout.js) to securely collect payment information, such as with [Stripe Elements](https://docs.stripe.com/payments/elements). By default, [Stripe Checkout](https://docs.stripe.com/payments/checkout) securely collects payment information. |\n| Restricted | A string that starts with `rk_test_` | **In microservices**: Must be secret and stored securely in your microservice code to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |",
    "title": "Send your first Stripe API request | Stripe Documentation",
    "description": "Get started with the Stripe API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/create",
    "markdown": "# Create a product | Stripe API Reference\n\nCreates a new product object.\n\n### Parameters\n\n*   The product’s name, meant to be displayable to the customer.\n    \n*   Whether the product is currently available for purchase. Defaults to `true`.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns a product object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Update a product](https://docs.stripe.com/api/products/update)\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a product](https://docs.stripe.com/api/products/delete)\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```",
    "title": "Create a product | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/prices/create",
    "markdown": "# Create a price | Stripe API Reference\n\nCreates a new price for an existing product. The price can be recurring or one-time.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   #### \n    \n    productstringRequired unless product\\_data is provided\n    \n    The ID of the product that this price will belong to.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   #### \n    \n    unit\\_amountintegerRequired conditionally\n    \n    A positive integer in cents (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.\n    \n\n### More parameters\n\n*   #### \n    \n    custom\\_unit\\_amountobjectRequired unless unit\\_amount is provided\n    \n\n*   #### \n    \n    product\\_dataobjectRequired unless product is provided\n    \n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe newly created `Price` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d \"recurring[interval]\"=month \\  -d \"product_data[name]\"=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Update a price](https://docs.stripe.com/api/prices/update)\n\nUpdates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n### Returns\n\nThe updated price object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Retrieve a price](https://docs.stripe.com/api/prices/retrieve)\n\nRetrieves the price with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a price if a valid price or plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [List all prices](https://docs.stripe.com/api/prices/list)\n\nReturns a list of your active prices, excluding [inline prices](https://docs.stripe.com/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set `active` to false.\n\n### Parameters\n\n*   Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).\n    \n*   Only return prices for the given currency.\n    \n*   Only return prices for the given product.\n    \n*   Only return prices of type `recurring` or `one_time`.\n    \n\n### More parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` prices, starting after prices `starting_after`. Each entry in the array is a separate price object. If no more prices are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/prices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",      \"object\": \"price\",      \"active\": true,      \"billing_scheme\": \"per_unit\",      \"created\": 1679431181,      \"currency\": \"usd\",      \"custom_unit_amount\": null,      \"livemode\": false,      \"lookup_key\": null,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NZKdYqrwEYx6iK\",      \"recurring\": {        \"aggregate_usage\": null,        \"interval\": \"month\",        \"interval_count\": 1,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"tax_behavior\": \"unspecified\",      \"tiers_mode\": null,      \"transform_quantity\": null,      \"type\": \"recurring\",      \"unit_amount\": 1000,      \"unit_amount_decimal\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [Search prices](https://docs.stripe.com/api/prices/search)\n\nSearch for prices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` prices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/prices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/prices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",      \"object\": \"price\",      \"active\": true,      \"billing_scheme\": \"per_unit\",      \"created\": 1679431181,      \"currency\": \"usd\",      \"custom_unit_amount\": null,      \"livemode\": false,      \"lookup_key\": null,      \"metadata\": {        \"order_id\": \"6735\"      },      \"nickname\": null,      \"product\": \"prod_NZKdYqrwEYx6iK\",      \"recurring\": {        \"aggregate_usage\": null,        \"interval\": \"month\",        \"interval_count\": 1,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"tax_behavior\": \"unspecified\",      \"tiers_mode\": null,      \"transform_quantity\": null,      \"type\": \"recurring\",      \"unit_amount\": 1000,      \"unit_amount_decimal\": \"1000\"    }    {...}    {...}  ],}\n```",
    "title": "Create a price | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tokens",
    "markdown": "# Tokens | Stripe API Reference\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [The Token object](https://docs.stripe.com/api/tokens/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Hash describing the card used to make the charge.\n    \n\n### More attributes\n\n*   #### \n    \n    bank\\_accountnullable object\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"card\": {    \"id\": \"card_1N3T00LkdIwHu7ixRdxpVI1Q\",    \"object\": \"card\",    \"address_city\": null,    \"address_country\": null,    \"address_line1\": null,    \"address_line1_check\": null,    \"address_line2\": null,    \"address_state\": null,    \"address_zip\": null,    \"address_zip_check\": null,    \"brand\": \"Visa\",    \"country\": \"US\",    \"cvc_check\": \"unchecked\",    \"dynamic_last4\": null,    \"exp_month\": 5,    \"exp_year\": 2024,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"last4\": \"4242\",    \"metadata\": {},    \"name\": null,    \"tokenization_method\": null,    \"wallet\": null  },  \"client_ip\": \"52.35.78.6\",  \"created\": 1683071568,  \"livemode\": false,  \"type\": \"card\",  \"used\": false}\n```\n\n## [Create an account token](https://docs.stripe.com/api/tokens/create_account)\n\nCreates a single-use token that wraps a user’s legal entity information. Use this when creating or updating a Connect account. Learn more about [account tokens](https://docs.stripe.com/connect/account-tokens).\n\nIn live mode, you can only create account tokens with your application’s publishable key. In test mode, you can only create account tokens with your secret key or publishable key.\n\n### Parameters\n\n*   Information for the account this token represents.\n    \n\n### Returns\n\nReturns the created account token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account[individual][first_name]\"=Jane \\  -d \"account[individual][last_name]\"=Doe \\  -d \"account[tos_shown_and_accepted]\"=true\n```\n\n```\n{  \"id\": \"ct_1BZ6xr2eZvKYlo2CsSOhuTfi\",  \"object\": \"token\",  \"client_ip\": \"104.198.25.169\",  \"created\": 1513297331,  \"livemode\": false,  \"redaction\": null,  \"type\": \"account\",  \"used\": false}\n```\n\n## [Create a bank account token](https://docs.stripe.com/api/tokens/create_bank_account)\n\nCreates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a [connected account](#accounts) where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n\n### Parameters\n\n*   The bank account this token will represent.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringConnect only\n    \n\n### Returns\n\nReturns the created bank account token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bank_account[country]\"=US \\  -d \"bank_account[currency]\"=usd \\  -d \"bank_account[account_holder_name]\"=\"Jenny Rosen\" \\  -d \"bank_account[account_holder_type]\"=individual \\  -d \"bank_account[routing_number]\"=110000000 \\  -d \"bank_account[account_number]\"=000123456789\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"bank_account\": {    \"id\": \"ba_1NWScr2eZvKYlo2C8MgV5Cwn\",    \"object\": \"bank_account\",    \"account_holder_name\": \"Jenny Rosen\",    \"account_holder_type\": \"individual\",    \"account_type\": null,    \"bank_name\": \"STRIPE TEST BANK\",    \"country\": \"US\",    \"currency\": \"usd\",    \"fingerprint\": \"1JWtPxqbdX5Gamtz\",    \"last4\": \"6789\",    \"routing_number\": \"110000000\",    \"status\": \"new\"  },  \"client_ip\": null,  \"created\": 1689981645,  \"livemode\": false,  \"redaction\": null,  \"type\": \"bank_account\",  \"used\": false}\n```\n\n## [Create a card token](https://docs.stripe.com/api/tokens/create_card)\n\nCreates a single-use token that represents a credit card’s details. You can use this token in place of a credit card dictionary with any API method. You can only use these tokens once by [creating a new Charge object](#create_charge) or by attaching them to a [Customer object](#create_customer).\n\nIn most cases, you can use our recommended [payments integrations](https://docs.stripe.com/payments) instead of using the API.\n\n### Parameters\n\n*   The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass in a customer, this is a dictionary containing a user’s credit card details, with the options described below.\n    \n\n### Returns\n\nReturns the created card token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=5 \\  -d \"card[exp_year]\"=2024 \\  -d \"card[cvc]\"=314\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"card\": {    \"id\": \"card_1N3T00LkdIwHu7ixRdxpVI1Q\",    \"object\": \"card\",    \"address_city\": null,    \"address_country\": null,    \"address_line1\": null,    \"address_line1_check\": null,    \"address_line2\": null,    \"address_state\": null,    \"address_zip\": null,    \"address_zip_check\": null,    \"brand\": \"Visa\",    \"country\": \"US\",    \"cvc_check\": \"unchecked\",    \"dynamic_last4\": null,    \"exp_month\": 5,    \"exp_year\": 2024,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"last4\": \"4242\",    \"metadata\": {},    \"name\": null,    \"tokenization_method\": null,    \"wallet\": null  },  \"client_ip\": \"52.35.78.6\",  \"created\": 1683071568,  \"livemode\": false,  \"type\": \"card\",  \"used\": false}\n```",
    "title": "Tokens | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/no-code",
    "markdown": "# No-code options for using Stripe\n\n## Get started quickly, without writing any code.\n\nUse Stripe without writing code\n\nLearn which Stripe features are best for your business, then read instructions for getting started. No code required.\n\n[](https://docs.stripe.com/no-code/get-started)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code.83d695b276c7a0549aeae2c8d16e14c9.png)\n\n## Accept payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Host your customer experience on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## More resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Developer resources](https://docs.stripe.com/development)Sign up for the newsletter, follow Stripe on X, or chat with the community on the official Discord.\n*   [Support site](https://support.stripe.com/)Learn the answers to common account questions and get troubleshooting tips and tricks.",
    "title": "No-code options for using Stripe | Stripe Documentation",
    "description": "Get started quickly, without writing any code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/authentication",
    "markdown": "# Making API calls for connected accounts\n\n## Learn how to add the right information to your API calls so you can make calls for your connected accounts.\n\nYou can make API calls for your connected accounts:\n\n*   Server-side with the [Stripe-Account header](#stripe-account-header) and the connected account ID, per request\n*   Client-side by passing the connected account ID as an argument to the client library\n\nTo optimize performance and reliability, Stripe has established [rate limits and allocations](https://docs.stripe.com/rate-limits) for API endpoints.\n\nFor server-side API calls, you can make requests as connected accounts using the special header `Stripe-Account` with the Stripe account identifier (it starts with the prefix `acct_`) of your platform user. Here’s an example that shows how to [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create) with your platform’s [API secret key](https://docs.stripe.com/keys) and your user’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nThe `Stripe-Account` header approach is implied in any API request that includes the Stripe account ID in the URL. Here’s an example that shows how to [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve) with your user’s [Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAll of Stripe’s server-side libraries support this approach on a per-request basis:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\   --data-urlencode email=\"person@example.com\"`\n\n## Adding the connected account ID to a client-side application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClient-side libraries set the connected account ID as an argument to the client application:\n\nThe JavaScript code for passing the connected account ID client-side is the same for plain JS and for ESNext.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   stripeAccount:   {{CONNECTED_ACCOUNT_ID}}  , });`",
    "title": "Making API calls for connected accounts | Stripe Documentation",
    "description": "Learn how to add the right information to your API calls so you can make calls for your connected accounts.",
    "languageCode": "en-US"
  }
]