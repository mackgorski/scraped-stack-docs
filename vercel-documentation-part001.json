[
  {
    "url": "https://vercel.com/docs/build-output-api/v3/configuration",
    "markdown": "# Build Output Configuration\n\n`.vercel/output/config.json`\n\nSchema (as TypeScript):\n\n```\ntype Config = {\n  version: 3;\n  routes?: Route[];\n  images?: ImagesConfig;\n  wildcard?: WildcardConfig;\n  overrides?: OverrideConfig;\n  cache?: string[];\n  crons?: CronsConfig;\n};\n```\n\nConfig Types:\n\n*   [Route](#routes)\n*   [ImagesConfig](#images)\n*   [WildcardConfig](#wildcard)\n*   [OverrideConfig](#overrides)\n*   [CronsConfig](#crons)\n\nThe `config.json` file contains configuration information and metadata for a Deployment. The individual properties are described in greater detail in the sub-sections below.\n\nAt a minimum, a `config.json` file with a `\"version\"` property is _required_.\n\n`.vercel/output/config.json`\n\nThe `version` property indicates which version of the Build Output API has been implemented. The version described in this document is version `3`.\n\n`.vercel/output/config.json`\n\nThe `routes` property describes the routing rules that will be applied to the Deployment. It uses the same syntax as the [`routes` property of the `vercel.json` file](https://vercel.com/docs/projects/project-configuration#routes).\n\nRoutes may be used to point certain URL paths to others on your Deployment, attach response headers to paths, and various other routing-related use-cases.\n\n```\ntype Route = Source | Handler;\n```\n\n```\ntype Source = {\n  src: string;\n  dest?: string;\n  headers?: Record<string, string>;\n  methods?: string[];\n  continue?: boolean;\n  caseSensitive?: boolean;\n  check?: boolean;\n  status?: number;\n  has?: Array<HostHasField | HeaderHasField | CookieHasField | QueryHasField>;\n  missing?: Array<\n    HostHasField | HeaderHasField | CookieHasField | QueryHasField\n  >;\n  locale?: Locale;\n  middlewareRawSrc?: string[];\n  middlewarePath?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| src | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A PCRE-compatible regular expression that matches each incoming pathname (excluding querystring). |\n| dest | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A destination pathname or full URL, including querystring, with the ability to embed capture groups as $1, $2, or named capture value $name. |\n| headers | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A set of headers to apply for responses. |\n| methods | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A set of HTTP method types. If no method is provided, requests with any HTTP method will be a candidate for the route. |\n| continue | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A boolean to change matching behavior. If true, routing will continue even when the src is matched. |\n| caseSensitive | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Specifies whether or not the route `src` should match with case sensitivity. |\n| check | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | If `true`, the route triggers `handle: 'filesystem'` and `handle: 'rewrite'` |\n| status | [Number](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A status code to respond with. Can be used in tandem with Location: header to implement redirects. |\n| has | Array<HostHasField \\| HeaderHasField \\| CookieHasField \\| QueryHasField> | No  | Conditions of the HTTP request that must exist to apply the route. |\n| missing | Array<HostHasField \\| HeaderHasField \\| CookieHasField \\| QueryHasField> | No  | Conditions of the HTTP request that must NOT exist to match the route. |\n| locale | Locale | No  | Conditions of the Locale of the requester that will redirect the browser to different routes. |\n| middlewareRawSrc | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list containing the original routes used to generate the `middlewarePath`. |\n| middlewarePath | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Path to an Edge Runtime function that should be invoked as middleware. |\n\n###### Source Route: Locale\n\n```\ntype Locale = {\n  redirect?: Record<string, string>;\n  cookie?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| redirect | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | An object of keys that represent locales to check for (`en`, `fr`, etc.) that map to routes to redirect to (`/`, `/fr`, etc.). |\n| cookie | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Cookie name that can override the Accept-Language header for determing the current locale. |\n\n###### Source Route: HostHasField\n\n```\ntype HostHasField = {\n  type: 'host';\n  value: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| type | \"host\" | Yes | Determines the HasField type. |\n| value | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Host name that must match the request URL's host to cause this route to match. |\n\n###### Source Route: HeaderHasField\n\n```\ntype HeaderHasField = {\n  type: 'header';\n  key: string;\n  value?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| type | \"header\" | Yes | Determines the HasField type. |\n| key | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Header name that must exist on the request for this route to match. |\n| value | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Header value (or regex) that must match for this route to match. |\n\n###### Source Route: CookieHasField\n\n```\ntype CookieHasField = {\n  type: 'cookie';\n  key: string;\n  value?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| type | \"cookie\" | Yes | Determines the HasField type. |\n| key | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Cookie name that must exist on the request for this route to match. |\n| value | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Cookie value (or regex) that must match for this route to match. |\n\n###### Source Route: QueryHasField\n\n```\ntype QueryHasField = {\n  type: 'query';\n  key: string;\n  value?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| type | \"query\" | Yes | Determines the HasField type. |\n| key | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Querystring key to look for. |\n| value | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Querystring value (or regex) that must match for this route to match. |\n\nThe routing system has multiple phases. The `handle` value indicates the start of a phase. All following routes are only checked in that phase.\n\n```\ntype HandleValue =\n  | 'rewrite'\n  | 'filesystem' // check matches after the filesystem misses\n  | 'resource'\n  | 'miss' // check matches after every filesystem miss\n  | 'hit'\n  | 'error'; //  check matches after error (500, 404, etc.)\n \ntype Handler = {\n  handle: HandleValue;\n  src?: string;\n  dest?: string;\n  status?: number;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| handle | HandleValue | Yes | The phase of routing when all subsequent routes should apply. |\n| src | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A PCRE-compatible regular expression that matches each incoming pathname (excluding querystring). |\n| dest | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A destination pathname or full URL, including querystring, with the ability to embed capture groups as $1, $2. |\n| status | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A status code to respond with. Can be used in tandem with `Location:` header to implement redirects. |\n\nThe following example shows a routing rule that will cause the `/redirect` path to perform an HTTP redirect to an external URL:\n\n```\n  \"routes\": [\n    {\n      \"src\": \"/redirect\",\n      \"status\": 308,\n      \"headers\": { \"Location\": \"https://example.com/\" }\n    }\n  ]\n```\n\n`.vercel/output/config.json`\n\nThe `images` property defines the behavior of Vercel's native [Image Optimization API](https://vercel.com/docs/image-optimization), which allows on-demand optimization of images at runtime.\n\n```\ntype ImageFormat = 'image/avif' | 'image/webp';\n \ntype RemotePattern = {\n  protocol?: 'http' | 'https';\n  hostname: string;\n  port?: string;\n  pathname?: string;\n};\n \ntype ImagesConfig = {\n  sizes: number[];\n  domains: string[];\n  remotePatterns?: RemotePattern[];\n  minimumCacheTTL?: number; // seconds\n  formats?: ImageFormat[];\n  dangerouslyAllowSVG?: boolean;\n  contentSecurityPolicy?: string;\n  contentDispositionType?: string;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| sizes | [Number\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Supported image widths. |\n| domains | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Allowed external domains that can use Image Optimization. Leave empty for only allowing the deployment domain to use Image Optimization. |\n| remotePatterns | RemotePattern\\[\\] | No  | Allowed external patterns that can use Image Optimization. Similar to `domains` but provides more control with RegExp. |\n| minimumCacheTTL | [Number](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Cache duration (in seconds) for the optimized images. |\n| formats | ImageFormat\\[\\] | No  | Supported output image formats |\n| dangerouslyAllowSVG | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Allow SVG input image URLs. This is disabled by default for security purposes. |\n| contentSecurityPolicy | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Change the [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP) of the optimized images. |\n| contentDispositionType | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Specifies the value of the `\"Content-Disposition\"` response header. |\n\nThe following example shows an image optimization configuration that specifies allowed image size dimensions, external domains, caching lifetime and file formats:\n\n```\n  \"images\": {\n    \"sizes\": [640, 750, 828, 1080, 1200],\n    \"domains\": [],\n    \"minimumCacheTTL\": 60,\n    \"formats\": [\"image/avif\", \"image/webp\"],\n    \"remotePatterns\": [{\n      \"protocol\": \"https\",\n      \"hostname\": \"^via\\\\.placeholder\\\\.com$\",\n      \"pathname\": \"^/1280x640/.*$\"\n    }]\n  }\n```\n\nWhen the `images` property is defined, the Image Optimization API will be available by visiting the `/_vercel/image` path. When the `images` property is undefined, visiting the `/_vercel/image` path will respond with 404 Not Found.\n\nThe API accepts the following query string parameters:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Example | Description |\n| --- | --- | --- | --- | --- |\n| url | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | `/assets/me.png` | The URL of the source image that should be optimized. Absolute URLs must match a pattern defined in the `remotePatterns` configuration. |\n| w   | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | `200` | The width (in pixels) that the source image should be resized to. Must match a value defined in the `sizes` configuration. |\n| q   | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | `75` | The quality that the source image should be reduced to. Must be between 1 (lowest quality) to 100 (highest quality). |\n\n`.vercel/output/config.json`\n\nThe `wildcard` property relates to Vercel's Internationalization feature. The way it works is the domain names listed in this array are mapped to the `$wildcard` routing variable, which can be referenced by the [`routes` configuration](#routes).\n\nEach of the domain names specified in the `wildcard` configuration will need to be assigned as [Production Domains in the Project Settings](https://vercel.com/docs/projects/domains).\n\n```\ntype WildCard = {\n  domain: string;\n  value: string;\n};\n \ntype WildcardConfig = Array<WildCard>;\n```\n\nObjects contained within the `wildcard` configuration support the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| domain | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The domain name to match for this wildcard configuration. |\n| value | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The value of the `$wildcard` match that will be available for `routes` to utilize. |\n\nThe following example shows a wildcard configuration where the matching domain name will be served the localized version of the blog post HTML file:\n\n```\n  \"wildcard\": [\n    {\n      \"domain\": \"example.com\",\n      \"value\": \"en-US\"\n    },\n    {\n      \"domain\": \"example.nl\",\n      \"value\": \"nl-NL\"\n    },\n    {\n      \"domain\": \"example.fr\",\n      \"value\": \"fr\"\n    }\n  ],\n  \"routes\": [\n    { \"src\": \"/blog\", \"dest\": \"/blog.$wildcard.html\" }\n  ]\n```\n\n`.vercel/output/config.json`\n\nThe `overrides` property allows for overriding the output of one or more [static files](https://vercel.com/docs/build-output-api/v3/primitives#static-files) contained within the `.vercel/output/static` directory.\n\nThe main use-cases are to override the `Content-Type` header that will be served for a static file, and/or to serve a static file in the Vercel Deployment from a different URL path than how it is stored on the file system.\n\n```\ntype Override = {\n  path?: string;\n  contentType?: string;\n};\n \ntype OverrideConfig = Record<string, Override>;\n```\n\nObjects contained within the `overrides` configuration support the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| path | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The URL path where the static file will be accessible from. |\n| contentType | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The value of the `Content-Type` HTTP response header that will be served with the static file. |\n\nThe following example shows an override configuration where an HTML file can be accessed without the `.html` file extension:\n\n```\n  \"overrides\": {\n    \"blog.html\": {\n      \"path\": \"blog\"\n    }\n  }\n```\n\n`.vercel/output/config.json`\n\nThe `cache` property is an array of file paths and/or glob patterns that should be re-populated within the build sandbox upon subsequent Deployments.\n\nNote that this property is only relevant when Vercel is building a Project from source code, meaning it is not relevant when building locally or when creating a Deployment from \"prebuilt\" build artifacts.\n\n```\n  \"cache\": [\n    \".cache/**\",\n    \"node_modules/**\"\n  ]\n```\n\n`.vercel/output/config.json`\n\nThe optional `framework` property is an object describing the framework of the built outputs.\n\nThis value is used for display purposes only.\n\n```\ntype Framework = {\n  version: string;\n};\n```\n\n```\n  \"framework\": {\n    \"version\": \"1.2.3\"\n  }\n```\n\n`.vercel/output/config.json`\n\nThe optional `crons` property is an object describing the [cron jobs](https://vercel.com/docs/cron-jobs) for the production deployment of a project.\n\n```\ntype Cron = {\n  path: string;\n  schedule: string;\n};\n \ntype CronsConfig = Cron[];\n```\n\n```\n  \"crons\": [{\n    \"path\": \"/api/cron\",\n    \"schedule\": \"0 0 * * *\"\n  }]\n```\n\n```\n{\n  \"version\": 3,\n  \"routes\": [\n    {\n      \"src\": \"/redirect\",\n      \"status\": 308,\n      \"headers\": { \"Location\": \"https://example.com/\" }\n    },\n    {\n      \"src\": \"/blog\",\n      \"dest\": \"/blog.$wildcard.html\"\n    }\n  ],\n  \"images\": {\n    \"sizes\": [640, 750, 828, 1080, 1200],\n    \"domains\": [],\n    \"minimumCacheTTL\": 60,\n    \"formats\": [\"image/avif\", \"image/webp\"],\n    \"remotePatterns\": [\n      {\n        \"protocol\": \"https\",\n        \"hostname\": \"^via\\\\.placeholder\\\\.com$\",\n        \"pathname\": \"^/1280x640/.*$\"\n      }\n    ]\n  },\n  \"wildcard\": [\n    {\n      \"domain\": \"example.com\",\n      \"value\": \"en-US\"\n    },\n    {\n      \"domain\": \"example.nl\",\n      \"value\": \"nl-NL\"\n    },\n    {\n      \"domain\": \"example.fr\",\n      \"value\": \"fr\"\n    }\n  ],\n  \"overrides\": {\n    \"blog.html\": {\n      \"path\": \"blog\"\n    }\n  },\n  \"cache\": [\".cache/**\", \"node_modules/**\"],\n  \"framework\": {\n    \"version\": \"1.2.3\"\n  },\n  \"crons\": [\n    {\n      \"path\": \"/api/cron\",\n      \"schedule\": \"* * * * *\"\n    }\n  ]\n}\n```",
    "title": "Build Output Configuration",
    "description": "Learn about the Build Output Configuration file, which is used to configure the behavior of a Deployment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/build-output-api/v3/primitives",
    "markdown": "# Vercel Primitives\n\nThe following directories, code files, and configuration files represent all Vercel platform primitives. These primitives are the \"building blocks\" that make up a Vercel Deployment.\n\nFiles outside of these directories are ignored and will not be served to visitors.\n\n`.vercel/output/static`\n\nStatic files that are _publicly accessible_ from the Deployment URL should be placed in the `.vercel/output/static` directory.\n\nThese files are served with the [Vercel Edge Network](https://vercel.com/docs/edge-network/overview).\n\nFiles placed within this directory will be made available at the root (`/`) of the Deployment URL and neither their contents, nor their file name or extension will be modified in any way. Sub directories within `static` are also retained in the URL, and are appended before the file name.\n\nThere is no standalone configuration file that relates to static files.\n\nHowever, certain properties of static files (such as the `Content-Type` response header) can be modified by utilizing the [`overrides` property of the `config.json` file](https://vercel.com/docs/build-output-api/v3/configuration#overrides).\n\nThe following example shows static files placed into the `.vercel/output/static` directory:\n\n*   .vercel\n    *   output\n        *   static\n            *   images\n                *   avatar.png\n            *   favicon.png\n            *   client-side-bundle.js\n            *   robots.txt\n\n`.vercel/output/functions`\n\nA [Serverless Function](https://vercel.com/docs/functions/serverless-functions) is represented on the file system as a directory with a `.func` suffix on the name, contained within the `.vercel/output/functions` directory.\n\nConceptually, you can think of this `.func` directory as a filesystem mount for a Serverless Function: the files below the `.func` directory are included (recursively) and files above the `.func` directory are not included. Private files may safely be placed within this directory because they will not be directly accessible to end-users. However, they can be referenced by code that will be executed by the Serverless Function.\n\nA `.func` directory may be a symlink to another `.func` directory in cases where you want to have more than one path point to the same underlying Serverless Function.\n\nA configuration file named `.vc-config.json` must be included within the `.func` directory, which contains information about how Vercel should construct the Serverless Function.\n\nThe `.func` suffix on the directory name is _not included_ as part of the URL path of Serverless Function on the Deployment. For example, a directory located at `.vercel/output/functions/api/posts.func` will be accessible at the URL path `/api/posts` of the Deployment.\n\n`.vercel/output/functions/<name>.func/.vc-config.json`\n\nThe `.vc-config.json` configuration file contains information related to how the Serverless Function will be created by Vercel.\n\n```\ntype ServerlessFunctionConfig = {\n  handler: string;\n  runtime: string;\n  memory?: number;\n  maxDuration?: number;\n  environment: Record<string, string>[];\n  regions?: string[];\n  supportsWrapper?: boolean;\n  supportsResponseStreaming?: boolean;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| runtime | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Specifies which \"runtime\" will be used to execute the Serverless Function. See [Runtimes](https://vercel.com/docs/functions/serverless-functions/runtimes) for more information. |\n| handler | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Indicates the initial file where code will be executed for the Serverless Function. |\n| memory | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Amount of memory (RAM in MB) that will be allocated to the Serverless Function. See [size limits](https://vercel.com/docs/functions/serverless-functions/runtimes#size-limits) for more information. |\n| architecture | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Specifies the instruction set \"architecture\" the Serverless Function supports. Either `x86_64` or `arm64`. The default value is `x86_64`. |\n| maxDuration | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Maximum duration (in seconds) that will be allowed for the Serverless Function. See [size limits](https://vercel.com/docs/functions/serverless-functions/runtimes#size-limits) for more information. |\n| environment | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Map of additional environment variables that will be available to the Serverless Function, in addition to the env vars specified in the Project Settings. |\n| regions | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | List of Vercel Regions where the Serverless Function will be deployed to. |\n| supportsWrapper | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | True if a custom runtime has support for Lambda runtime wrappers. |\n| supportsResponseStreaming | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | When true, the Serverless Function will stream the response to the client. |\n\nThis extends the [Base Config](#base-config) for Node.js Serverless Functions.\n\n```\ntype NodejsServerlessFunctionConfig = ServerlessFunctionConfig & {\n  launcherType: 'Nodejs';\n  shouldAddHelpers?: boolean; // default: false\n  shouldAddSourceMapSupport?: boolean; // default: false\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| launcherType | \"Nodejs\" | Yes | Specifies which launcher to use. Currently only \"Nodejs\" is supported. |\n| shouldAddHelpers | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Enables request and response helpers methods. |\n| shouldAddSourcemapSupport | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Enables source map generation. |\n| awsLambdaHandler | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | [AWS Handler Value](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html) for when the serverless function uses AWS Lambda syntax. |\n\nThis is what the `.vc-config.json` configuration file could look like in a real scenario:\n\n```\n{\n  \"runtime\": \"nodejs16.x\",\n  \"handler\": \"serve.js\",\n  \"maxDuration\": 3,\n  \"launcherType\": \"Nodejs\",\n  \"shouldAddHelpers\": true,\n  \"shouldAddSourcemapSupport\": true\n}\n```\n\nThe following example shows a directory structure where the Serverless Function will be accessible at the `/serverless` URL path of the Deployment:\n\n*   .vercel\n    *   output\n        *   functions\n            *   serverless.func\n                *   node\\_modules\n                    *   ...\n                *   .vc-config.json\n                *   serve.js\n                *   data.sqlite\n\n`.vercel/output/functions`\n\nAn [Edge Function](https://vercel.com/docs/functions/edge-functions) is represented on the file system as a directory with a `.func` suffix on the name, contained within the `.vercel/output/functions` directory.\n\nThe `.func` directory requires at least one JavaScript or TypeScript source file which will serve as the `entrypoint` of the function. Additional source files may also be included in the `.func` directory. All imported source files will be _bundled_ at build time.\n\nWebAssembly (Wasm) files may also be placed in this directory for an Edge Function to import. See [Using a WebAssembly file](https://vercel.com/docs/functions/edge-functions/wasm) for more information.\n\nA configuration file named `.vc-config.json` must be included within the `.func` directory, which contains information about how Vercel should configure the Edge Function.\n\nThe `.func` suffix is _not included_ in the URL path. For example, a directory located at `.vercel/output/functions/api/edge.func` will be accessible at the URL path `/api/edge` of the Deployment.\n\nEdge Functions will bundle an `entrypoint` and all supported source files that are imported by that `entrypoint`. The following list includes all supported content types by their common file extensions.\n\n*   `.js`\n*   `.json`\n*   `.wasm`\n\n`.vercel/output/functions/<name>.func/.vc-config.json`\n\nThe `.vc-config.json` configuration file contains information related to how the Edge Function will be created by Vercel.\n\n```\ntype EdgeFunctionConfig = {\n  runtime: 'edge';\n  entrypoint: string;\n  envVarsInUse?: string[];\n  regions?: 'all' | string | string[];\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| runtime | [\"edge\"](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The `runtime: \"edge\"` property is required to indicate that this directory represents an Edge Function. |\n| entrypoint | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Indicates the initial file where code will be executed for the Edge Function. |\n| envVarsInUse | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | List of environment variable names that will be available for the Edge Function to utilize. |\n| regions | [String\\[\\]](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | List of regions or a specific region that the edge function will be available in, defaults to `all`. [View available regions](https://vercel.com/docs/edge-network/regions#region-list). |\n\nThis is what the `.vc-config.json` configuration file could look like in a real scenario:\n\n```\n{\n  \"runtime\": \"edge\",\n  \"entrypoint\": \"index.js\",\n  \"envVarsInUse\": [\"DATABASE_API_KEY\"]\n}\n```\n\nThe following example shows a directory structure where the Edge Function will be accessible at the `/edge` URL path of the Deployment:\n\n*   .vercel\n    *   output\n        *   functions\n            *   edge.func\n                *   .vc-config.json\n                *   index.js\n\n`.vercel/output/functions`\n\nA Prerender asset is a Serverless Function that will be cached by the Vercel Edge Network in the same way as a static file. This concept is also known as [Incremental Static Regeneration](https://vercel.com/docs/incremental-static-regeneration).\n\nOn the file system, a Prerender is represented in the same way as a Serverless Function, with an additional configuration file that describes the cache invalidation rules for the Prerender asset.\n\nAn optional \"fallback\" static file can also be specified, which will be served when there is no cached version available.\n\n`.vercel/output/functions/<name>.prerender-config.json`\n\nThe `<name>.prerender-config.json` configuration file contains information related to how the Edge Function will be created by Vercel.\n\n```\ntype PrerenderFunctionConfig = {\n  expiration: number | false;\n  group?: number;\n  bypassToken?: string;\n  fallback?: string;\n  allowQuery?: string[];\n  passQuery?: boolean;\n};\n```\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| expiration | [Integer \\| false](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function. Setting the value to `false` means it will never expire. |\n| group | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Option group number of the asset. Prerender assets with the same group number will all be re-validated at the same time. |\n| bypassToken | [String](https://vercel.com/docs/workflow-collaboration/draft-mode) | No  | Random token assigned to the `__prerender_bypass` cookie when [Draft Mode](https://vercel.com/docs/workflow-collaboration/draft-mode) is enabled, in order to safely bypass the Edge Network cache |\n| fallback | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Name of the optional fallback file relative to the configuration file. |\n| allowQuery | [String\\[\\] \\| undefined](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | List of query string parameter names that will be cached independently. If an empty array, query values are not considered for caching. If undefined each unique query value is cached independently |\n| passQuery | [Boolean \\| undefined](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | When true, the query string will be present on the `request` argument passed to the invoked function. The `allowQuery` filter still applies. |\n\n`.vercel/output/functions/<name>.prerender-fallback.<ext>`\n\nA Prerender asset may also include a static \"fallback\" version that is generated at build-time. The fallback file will be served by Vercel while there is not yet a cached version that was generated during runtime.\n\nWhen the fallback file is served, the Serverless Function will also be invoked \"out-of-band\" to re-generate a new version of the asset that will be cached and served for future HTTP requests.\n\nThis is what an `example.prerender-config.json` file could look like in a real scenario:\n\n```\n{\n  \"expiration\": 60,\n  \"group\": 1,\n  \"bypassToken\": \"03326da8bea31b919fa3a31c85747ddc\",\n  \"fallback\": \"example.prerender-fallback.html\",\n  \"allowQuery\": [\"id\"]\n}\n```\n\nThe following example shows a directory structure where the Prerender will be accessible at the `/blog` URL path of the Deployment:\n\n*   .vercel\n    *   output\n        *   functions\n            *   blog.func\n                *   .vc-config.json\n                *   index.js\n            *   blog.prerender-config.json\n            *   blog.prerender-fallback.html",
    "title": "Vercel Primitives",
    "description": "Learn about the Vercel platform primitives and how they work together to create a Vercel Deployment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/build-image",
    "markdown": "# Build image\n\nWhen you initiate a deployment, Vercel will [build your project](https://vercel.com/docs/deployments/builds) within a container that has a predefined image. This build image is determined by the Node.js version selected in the [project settings](https://vercel.com/docs/functions/runtimes/node-js#setting-the-node.js-version-in-project-settings).\n\nVercel supports [multiple runtimes](https://vercel.com/docs/functions/runtimes), but different runtime versions are available depending on the selected build image. See the table below to learn about which runtime versions are supported by each image:",
    "title": "Build image",
    "description": "Learn about the container image used for Vercel builds.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/file-system-api/v1",
    "markdown": "# File System API (v1)\n\nDeprecated:\n\nThis version (v1) of the File System API is deprecated. It should not be used for new projects.  \nIf you have issues or concerns with File System API (v1 or v2), see our [File System API (v1/v2) Feedback](https://github.com/vercel/community/discussions/530) discussion.\n\nNode.js Support:\n\nThis version (v1) of the File System API will only work with `Node.js <= 14.x`.\n\nThis page describes how you can ensure that your framework works perfectly on Vercel. The platform provides APIs and configurations that help authors to support features they need for their framework, or to automatically detect if their framework is being used.\n\nA subset of frameworks that is supported and can be automatically detected can be found in the [`@vercel/frameworks`](https://github.com/vercel/vercel/tree/main/packages/frameworks) package. More information about this can be found in the [Framework Detection](https://vercel.com/docs/build-output-api#framework-detection) section.\n\nThe file system API allows the framework to place its build outputs inside of specific directories during the build step. The files will then be used depending on which directory they have been put in.\n\nIt's always possible to check the Output tab on the Dashboard for a deployment to see all created resources.\n\nAs shown in the sections below, a number of features are supported.\n\nFiles placed in `.vercel_build_output/static` will be served as static files. All other output directories for static files will be ignored if this directory is present and contains files inside of it.\n\nFiles that match the path `.vercel_build_output/functions/<language>/<name>/index.<extension>` will become [Serverless Functions](https://vercel.com/docs/functions). The `language` part is the programming language used for the Serverless Function, the `extension` part would be the file extension for that language. At the moment only `node` is supported as `language` and `js` as `extension`. The `name` is the name of the Serverless Function under which it'll be available.\n\nThe `index` file inside of the `name` directory will be the entrypoint of the Serverless Function. All other files in that directory and subdirectories will be bundled with the Serverless Function, so they'll be available at runtime. As a result, it's not possible to use a `name` that's more than one path segment, meaning `my-function` is valid, but `my/function` would not be.\n\nThe Serverless Functions will be accessible at `/.vercel/functions/<name>` on the deployment. Routes can then be used to create rewrites for those Serverless Functions.\n\nUnlike Static Files, it's expected that Serverless Functions can only be mounted to `/.vercel/functions/` in the URL. It is common that one Serverless Function has multiple purposes and can handle different paths. [Routes](https://vercel.com/docs/build-output-api#configuration/routes) can be used to make Functions available on different URL paths.\n\nThe file `.vercel_build_output/config/routes.json` can be used to create [Routes](https://vercel.com/docs/cli#project-configuration/routes) for the deployment.\n\nA common use case would be to add a catch-all route that acts as a rewrite to a Serverless Function – and serving a few static assets.\n\nThe `routes.json` file could then look like this:\n\n```\n[\n  { \"handle\": \"filesystem\" },\n  {\n    \"src\": \"/(.*)\",\n    \"dest\": \"/.vercel/functions/renderer\"\n  }\n]\n```\n\nThe `\"handle\": \"filesystem\"` part is required in this case, as the catch-all route would otherwise rewrite all requests for the static assets to the `renderer` Serverless Function.\n\nAll Serverless Functions can be configured through a single JSON file located at `.vercel_build_output/config/functions.json`.\n\nThe file must contain an object where each key matches the `name` of a Serverless Function in `.vercel_build_output/functions/node/<name>/index.<extension>`.\n\nEach Serverless Function can then be configured with the following properties:\n\n*   `memory` (optional): An integer defining the memory in MB for your Serverless Function (between `128` and `3009`).\n*   `maxDuration` (optional): An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between `1` and the [maximum limit of your plan](https://vercel.com/docs/functions/configuring-functions/duration#duration-limits)).\n\nIf no configuration was provided, the following defaults will be used:\n\n*   Memory: 1024 MB (1 GB)\n*   Execution Duration: 10 seconds (Hobby), 15 seconds (Pro), 15 seconds (Enterprise)\n\nAs an example, if the Serverless Function `.vercel_build_output/functions/node/my-function/index.js` requires more than the default `1024` MB of memory, then it can be increased to `3009` MB by creating the file `.vercel_build_output/config/functions.json` with the following content:\n\n```\n{\n  \"my-function\": {\n    \"memory\": 3009\n  }\n}\n```\n\nThe file `.vercel_build_output/config/images.json` can be used to enable [Image Optimization](https://vercel.com/docs/image-optimization) for the deployment.\n\nOnce enabled, you can optimize an image by visiting `/_vercel/image` with the following query string paramaeters:\n\n*   `url` (required): The path or URL of the source image. This can be a local image URL like `/logo.png` or an external image URL like `https://assets.example.com/logo.png`.\n*   `w` (required): The desired width of the image. The aspect ratio is maintained so the height will scale proportionally to the width.\n*   `q` (required): The desired quality of the image. This is an integer between 1 and 100 where 1 is the lowest quality and 100 is the highest quality.\n\nFor example, visiting `/_vercel/image?url=%2Flogo.png&w=640&q=75` will resize the logo.png file to 640px width at 75% quality.\n\nBelow is an example `images.json` file:\n\n```\n{\n  \"domains\": [\"assets.example.com\"],\n  \"sizes\": [640, 750, 828, 1080, 1200, 1920]\n}\n```\n\n*   `domains` (optional): A list of hostnames. This is necessary in order to enable external images using the `url` parameter.\n*   `sizes` (required): A list of image widths. This is necessary in order to enable resizing an image to a given width using the `w` parameter.\n\nYou can add support for framework detection and define default values on Vercel by adding it to the `@vercel/frameworks` package:\n\n1.  Fork the [`vercel/vercel`](https://github.com/vercel/vercel) repository on GitHub.\n2.  Add your framework to the `@vercel/frameworks` package by editing the file [`./packages/frameworks/src/frameworks.ts`](https://github.com/vercel/vercel/blob/master/packages/frameworks/src/frameworks.ts).\n3.  Copy the structure of an existing framework and adjust the fields for the new framework.\n4.  You can add default routes that will always be applied to Projects that use this framework or specify some paths that will be cached to speed up the build process (note that this step can be ignored if the framework makes use of the file system API).\n5.  The `settings` property either contains a `value` _or_ a `placeholder`. If the setting should allow the user to override it, use `placeholder`. To prevent the user from overriding, use `value`. For example, the Output Directory for Hugo is `public` by default, but can be changed through its config file, so we use `placeholder` with an explanation of what can be used.\n6.  Add a template to the [`examples`](https://github.com/vercel/vercel/tree/main/examples) directory: The name of the directory should match the `slug` of the framework used in `@vercel/frameworks`. The `/.github/EXAMPLE_README_TEMPLATE.md` file is a template for creating a `README.md` file for the template.\n7.  Create a Pull Request! After your Pull Request has been merged, someone from Vercel will enable the framework in the API so that anyone can select the framework on the Vercel dashboard and deploy it.",
    "title": "File System API (v1)",
    "description": "The File System API allows you to interact with the file system in a Node.js environment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/file-system-api/v2",
    "markdown": "# File System API (v2)\n\nDeprecated:\n\nThis version (v2) of the File System API is deprecated. It should not be used for new projects.\n\nIf you have issues or concerns with File System API (v1 or v2), see our [File System API (v1/v2) Feedback](https://github.com/vercel/community/discussions/530) discussion.\n\nNode.js Support:\n\nThis version (v2) of the File System API will only work with `Node.js <= 14.x`.\n\nA reference of the `.output` directory consumed by Vercel's [Build Step](https://vercel.com/docs/deployments/configure-a-build) with every [Deployment](https://vercel.com/docs/deployments/overview), which is expected to contain your app's compiled code and instructions for how to serve it to visitors.\n\nWhenever a new Deployment is created on Vercel, its source files will be retrieved from their origin location (a Git repository, for example) and processed within the [Build Step](https://vercel.com/docs/deployments/configure-a-build), after which they are made available on the [Edge Network](https://vercel.com/docs/edge-network/overview).\n\nInside of this Build Step, the `vercel build` command provided by [Vercel CLI](https://vercel.com/docs/cli/login) is automatically invoked, which will retrieve the Project Settings and invoke the [Build Command](https://vercel.com/docs/deployments/configure-a-build#build-command) specified for the Project. This will make the respective Framework transform the source code and prepare it for delivery.\n\nAfterwards, `vercel build` will handle features natively provided by Vercel (such as Node.js Serverless Functions in the `api` directory or `_middleware.js`) and produce several files that it combines with the files produced by the Project's Build Command.\n\nThe outcome of this process is a `.output` directory that is passed on to the File System API at the end of the Build Step, containing instructions of which files to deliver to visitors and their respective configuration manifests.\n\nMost commonly, the File System API is not something you need to worry about.\n\nFrameworks that support Vercel without any additional configuration (like [Next.js](https://nextjs.org/), [Nuxt](https://nuxt.com/), or [SvelteKit](https://kit.svelte.dev/)) are automatically producing a `.output` directory that instructs the platform how to behave. They pass on all of the resources created within your source code (such as [Pages](#resources/pages) or [API Routes](#resources/api-routes)).\n\nIf you are a framework author looking to integrate with Vercel, you can use this reference as a way to understand which files you would want to create within the `.output` directory, for the platform to understand them.\n\nAdditionally, if you are not using a framework and would like to still take advantage of any of the features that those frameworks provide, you can create the directory yourself, using a custom command-line interface or by including it in your source files.\n\n**Relevant Directories**:  \n\n  \n`.output/server/pages`  \n`.output/server/pages/api`  \n`.output/static`\n\nIf you'd like to expose resources to your visitors once the Deployment has finished, it is required to place them inside one of the directories mentioned below. Files outside of these directories are ignored and will not be served to visitors.\n\n**Directory**: `.output/server/pages`\n\nRegardless of whether the Pages you'd like to serve to your visitors are generated on-demand (whenever a request arrives) or statically generated ahead of time, including them as part of your Deployment can be done by creating a single file for every page, and Vercel will handle the rest for you.\n\nMore specifically, you can place the source of Pages that you have statically generated ahead of time in the form of HTML files in the directory shown above and they will automatically be served at the root of the URL of your Deployment.\n\nThe same is the case for Pages that you would like to generate on-demand using Server-Side Rendering: Place a [Serverless Function](https://vercel.com/docs/functions/serverless-functions) in the directory and it will be invoked whenever a request arrives for the path defined in its file name.\n\nIn favor of performance, it is recommended to statically generate Pages ahead of time as much as possible. If the need for dynamism arises, feel free to switch to Page Functions and ideally even enable [Pre-Rendering](#configuration/pre-rendering), to retain as much performance as possible.\n\nAll files within the `pages` directory are considered files that should be mounted to the URL of the Deployment. If your Functions depend on other files, they have to be included through the [Bundling Configuration](#configuration/bundling) and placed outside of `pages` (in a different arbitrary directory at the root of `.output`, for example).\n\nIt is recommended to leave the bundling of files to Vercel if a file is used by multiple Functions. If a file is only used by a single Function, you may combine those files into a single Function based on your own choosing.\n\nThe extensions of the files within the `pages` directory are automatically stripped before the Pages are made available in the URL of the Deployment, under the same name that was used for the file. This happens regardless of which extension was used.\n\nIf files are placed in sub directories within `pages`, those will become part of the URL too, and be included before the page name.\n\nBy default, only files with the extensions `.html` (statically generated ahead of time) and `.js` (Node.js Function, so generated on-demand with every incoming request) may be placed inside of the `pages` directory.\n\nIf you would like to provide Page Functions that use a different runtime than Node.js, you can do so using the [Function Configuration](#configuration/functions), which also includes other options.\n\nIf you were to add file named `about.html` inside of the `pages` directory, it will be served at `/about` in the URLs assigned to your Deployment.\n\nRespectively, if you were to place a file named `blog.js` inside of the directory, it will be served at `/blog` and the Function contained inside of the file will be invoked whenever a request arrives for that URL path.\n\nPlacing a file in `test/about.html` would mount it to `/test/about` in the URL.\n\nThis is what the directory could look like in a real scenario (you can learn more about the purpose of the `.nft.json` file in [Exposed Files](#resources/pages/exposed-files) above):\n\n*   .output\n    *   server\n        *   pages\n            *   about.html\n            *   blog.js\n            *   blog.js.nft.json\n\n**Directory**: `.output/static`\n\nIf you would like to provide static files that should be served without any transformation as part of your Deployment, you can do so by including them in this directory.\n\nThe files will be made available at the root (`/`) of the Deployment's URL and neither their contents, nor their file name or extension will be mutated in any way. Sub directories within `static` are also retained in the URL, and are appended before the file name.\n\nIf a [Page](#resources/pages) or [API Route](#resources/api-routes) with the same name in the final URL exists, they will be overwritten by the Static File and therefore won't be accessible through the URL anymore.\n\nIt is therefore recommended to use this directory for files that are not directly accessed by visitors, but instead loaded on [Pages](#resources/pages) (like client-side JavaScript bundles) or accessed by machines (like `robots.txt`). Files that are directly accessed by visitors are considered [Pages](#resources/pages) and shouldn't be placed here.\n\nSince all of the files in this directory are exposed as part of the Deployment's URL, you also shouldn't use it for files that your [Page](#resources/pages) or [API Route](#resources/api-routes) Functions might depend on for execution. Those can be included through [Bundling Configuration](#configuration/bundling) instead.\n\nThis is what the directory could look like in a real scenario:\n\n*   .output\n    *   static\n        *   favicon.png\n        *   client-side-bundle.js\n        *   robots.txt\n\n**Directory**: `.output/server/pages/api`\n\nIf one of your [Pages](#resources/pages) relies on data that should be delivered from, or to the client-side (the browser), you can use this directory to include API Routes as part of your Deployment that will send and accept this data.\n\nThey can also be helpful in scenarios where third-parties or other types of clients (like native mobile apps) wish to access this data, or any other types of actions that have to be performed that were triggered by a visitor.\n\nAPI Routes are designed to be accessed by [Pages](#resources/pages) or machines, but not by humans. If you'd like to display something to visitors, create a [Page](#resources/pages) instead.\n\nUnder the hood, like on-demand Pages, API Routes are powered by [Serverless Functions](https://vercel.com/docs/functions/serverless-functions).\n\nWhen it comes to [the files](#resources/pages/exposed-files) in the directory that are exposed in the Deployment's URL and [custom runtimes](#resources/pages/custom-runtimes), API Routes behave like Pages. Otherwise, they are completely separate concepts and should be separated distinctively.\n\nThis is what the directory could look like in a real scenario:\n\n*   .output\n    *   server\n        *   pages\n            *   api\n                *   user.js\n                *   team.js\n\n**Directory**: `.output/server/pages`\n\nGenerating Pages on-demand using [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) bears a significant performance drawback, because their HTML markup has to be generated again for every incoming request, which is slower than delivering HTML that was statically generated ahead of time.\n\nEven if your Page returns the [Cache-Control header](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control) and its responses are cached on Vercel's [Edge Network](https://vercel.com/docs/edge-network/overview), the first request per [region](https://vercel.com/docs/edge-network/regions) would still be slow, which means that the first visitor in a certain region would see a slower response.\n\nThankfully, however, Vercel offers two different types of Functions: [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) and [Edge Functions](https://vercel.com/docs/functions/edge-functions). The former are the traditional kind powered by [Lambdas](https://aws.amazon.com/de/lambda/), whereas the latter runs directly on the Edge Network and can respond much quicker.\n\nYou can place Middleware in `.output/server/pages`, and it sits between the client (the browser), and a [Page](#resources/pages) or [API Route](#resources/api-routes). This means you can statically generate those ahead of time or cache their responses on the Edge Network, while still executing code on every request.\n\nBecause Middleware has almost no noticeable impact on performance, it is run on every request and can perform lightweight operations such as forwarding visitors to a different URL, resolving to a different URL, or performing any sort of validation.\n\nUnlike all other [Resources](#resources), Middleware requires [Function Configuration](#configuration/functions) to work, as it determines the URL paths that the Middleware should be responsible for. For the other Resources, this is inferred based on the location and name of the files.\n\nMiddleware files are never directly exposed as part of the Deployment's URL. Instead, based on their configuration, they are made available on existing URL paths that resolve to Pages or API Routes, which is the part that makes them the \"middle-ware\".\n\nCurrently, only JavaScript (invoked by [V8](https://v8.dev/)) is supported as a runtime for Middleware.\n\nThis is what the directory could look like in a real scenario:\n\n*   .output\n    *   server\n        *   pages\n            *   index.html\n            *   \\_middleware.js\n    *   functions-manifest.json\n\nFor the above example, you could place the following in `functions-manifest.json`:\n\n```\n{\n  \"version\": 1,\n  \"pages\": {\n    \"_middleware.js\": {\n      \"runtime\": \"web\",\n      \"env\": [],\n      \"files\": [\"server/pages/_middleware.js\"],\n      \"name\": \"pages/_middleware\",\n      \"page\": \"/\",\n      \"regexp\": \"^/.*$\",\n      \"sortingIndex\": 1\n    }\n  }\n}\n```\n\nAdditionally, this is what you could place in `_middleware.js`:\n\n```\nconst getResult = (body, options) => ({\n  promise: Promise.resolve(),\n  waitUntil: Promise.resolve(),\n  response: new Response(body, options),\n});\n \n_ENTRIES = typeof _ENTRIES === 'undefined' ? {} : _ENTRIES;\n \n_ENTRIES['middleware_pages/_middleware'] = {\n  default: async function ({ request }) {\n    // Body\n    if (request.url.endsWith('/middleware-body')) {\n      return getResult('hi from the edge', {});\n    }\n \n    // Rewrite\n    if (request.url.endsWith('/middleware-rewrite')) {\n      return getResult(null, {\n        headers: {\n          'x-middleware-rewrite': '/blog',\n        },\n      });\n    }\n \n    // Redirect\n    if (request.url.endsWith('/middleware-redirect')) {\n      return getResult(null, {\n        status: 308,\n        headers: {\n          Location: '/blog',\n          'x-middleware-redirect': '/blog',\n        },\n      });\n    }\n \n    // Don't do anything\n    return getResult(null, {\n      headers: {\n        'x-middleware-next': '1',\n      },\n    });\n  },\n};\n```\n\n**File Names**:  \n\n  \n`.output/routes-manifest.json`  \n`.output/functions-manifest.json`  \n`.output/server/pages/**/[function].nft.json`  \n`.output/images-manifest.json`  \n`.output/prerender-manifest.json`  \n`.output/build-manifest.json`\n\nIf you would like to customize the behavior of any of the [Resources](#resources) you have provided with your Deployment, or control Vercel's behavior in general, you can provide several optional configuration files within the `.output` directory.\n\n**File Name**: `.output/routes-manifest.json`\n\nIf you'd like to point certain URL paths to others on your Deployment or attach headers to some of them, you can do so using this configuration file.\n\nYou can forward visitors to different URLs (if you've changed the URL of a blog post, for example), change the URL that is displayed for them (if you'd like multiple URLs to resolve to a single one, for example), or customize the behavior of the client that sent the request through headers.\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `3`. |\n| basePath | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A path that is prepended to all [Routes](#configuration/routes) and [Routes](#resources). For example, you might want to mount your entire application to `/something`. |\n| pages404 | [Boolean](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Whether or not a [Page](#resources/pages) named `404` (can be HTML or a Function) should be served if a path isn't found for an incoming request. |\n| redirects | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) for forwarding requests from one URL path to another, whose properties are described below. |\n| headers | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) for returning headers for certain URL paths, whose properties are described below. |\n| rewrites | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) for ensuring that certain URL paths resolve to other URLs, whose properties are described below. |\n| dynamicRoutes | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) that describe [Pages](#resources/pages) or [API Routes](#resources/api-routes) that include path segments (like `blog/[slug]`) and therefore result in rewrites, whose properties are described below. |\n\nWithin `redirects`, every [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) can contain the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| source | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL path on which the redirect will be made available. |\n| destination | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL path to which the visitor should be redirected. |\n| statusCode | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The [HTTP status code](https://developer.mozilla.org/docs/Web/HTTP/Status) that should be returned as part of the response for redirecting the visitor. Possible values are either `301`, `302`, `307`, or `308`. The last two are recommended, while the first two should ideally only be used for backwards-compatibility with legacy clients (e.g. browsers). |\n| regex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path on which the redirect should be served. While `source` is only a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) representation of the path, `regex` is the value that is used for actually validating whether the redirect should apply to an incoming request, or not. |\n\nWithin `headers`, every [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) can contain the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| source | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL path on which the headers will be made available. |\n| headers | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing headers that should be returned from URL paths that match `regex`, where `key` is a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the name of the header, and `value` is a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing its respective value. |\n| regex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path on which the headers should be served. While `source` is only a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) representation of the path, `regex` is the value that is used for actually validating whether the headers should apply to an incoming request, or not. |\n\nWithin `rewrites`, every [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) can contain the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| source | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL path on which the rewrite will be made available. |\n| has | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing rules that the incoming request has to match before the rewrite applies. Within them, `type` is an [Enum](https://vercel.com/docs/rest-api#introduction/api-basics/types) with `header`, `cookie`, `host` or `query` as the value, `key` is a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the respective key that should be asserted, and `value` is the same, but for the value that should be asserted. |\n| destination | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL path that should be served to the visitor when a URL path that matches `regex` is accessed. |\n| regex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path on which the rewrite should be served. While `source` is only a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) representation of the path, `regex` is the value that is used for actually validating whether the rewrite should apply to an incoming request, or not. |\n\nWithin `dynamicRoutes`, every [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) can contain the following properties:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| page | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The name (in the same format as used in [Function Configuration](#configuration/functions)) of the [Page](#resources/pages) or [API Route](#resources/api-routes) that should receive the incoming request if its URL matches the pattern provided in `regex`. |\n| regex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path on which the [Page](#resources/pages) or [API Route](#resources/api-routes) should be served. |\n| routeKeys | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | Query string parameters that should be passed to the destination [Page](#resources/pages) or [API Route](#resources/api-routes), where every key is the segment in `namedRegex` that should be captured and every value is the name of the query string parameter that should receive its value. |\n| namedRegex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path on which the [Page](#resources/pages) or [API Route](#resources/api-routes) should be served. The difference to `regex` is that this property can contain path segments (like `<post>`) that will automatically be transformed into query string parameters using `routeKeys`. |\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 3,\n  \"basePath\": \"\",\n  \"pages404\": true,\n  \"redirects\": [\n    {\n      \"source\": \"/nice/\",\n      \"destination\": \"/stuff\",\n      \"statusCode\": 308,\n      \"regex\": \"^/nice.*$\"\n    }\n  ],\n  \"headers\": [\n    {\n      \"source\": \"/\",\n      \"headers\": [\n        {\n          \"key\": \"x-custom-header\",\n          \"value\": \"my custom header value\"\n        }\n      ],\n      \"regex\": \"^.*$\"\n    }\n  ],\n  \"rewrites\": [\n    {\n      \"source\": \"/admin\",\n      \"has\": [\n        {\n          \"type\": \"cookie\",\n          \"key\": \"authorized\",\n          \"value\": \"true\"\n        }\n      ],\n      \"destination\": \"/secret\",\n      \"regex\": \"^/admin.*$\"\n    }\n  ],\n  \"dynamicRoutes\": [\n    {\n      \"page\": \"/blog/[post]\",\n      \"regex\": \"^/blog/([^/]+?)(?:/)?$\",\n      \"routeKeys\": {\n        \"post\": \"post\"\n      },\n      \"namedRegex\": \"^/blog/(?<post>[^/]+?)(?:/)?$\"\n    }\n  ]\n}\n```\n\n**File Name**: `.output/functions-manifest.json`\n\nIf you have provided on-demand [Pages](#resources/pages) or [API Routes](#resources/api-routes) as part of your Deployment, you might find yourself needing to customize their behavior on Vercel.\n\nWith this configuration file, you can customize the memory size of their underlying Functions, which [region on the Edge Network](https://vercel.com/docs/edge-network/regions) they are deployed to, and how long they should be able to run.\n\nAdditionally, it allows for customizing which runtime should be used for those Functions in cases where you would like to run your code in a non-Node.js Environment. This means that on-demand [Pages](#resources/pages) and [API Routes](#resources/api-routes) can be written in any language.\n\nBefore configuring the Functions created in your Deployment, it is recommended to first learn about the conceptual models for [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) and [Edge Functions](https://vercel.com/docs/functions/edge-functions) (depending on which ones you'd like to use), as it will help you make the right decisions while customizing their default behavior along the way.\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `1`. |\n| pages | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A map of on-demand [Pages](#resources/pages) (Functions), [API Routes](#resources/api-routes) or [Middlewares](#resources/middleware) and the respective configuration properties for each one. The keys are [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the names of the Functions, without their extensions. The values are [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types), whose properties are described below. |\n\nWithin `pages`, every key can have the following [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) as its value:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| memory | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | How much memory (in MB) should be made available to the Function. Only [Integers](https://vercel.com/docs/rest-api#introduction/api-basics/types) between `128` and `3009` are allowed. The CPU configuration will scale linearly in proportion to the memory configuration (at `1769` MB memory, for example, a Function has the equivalent of one full vCPU). |\n| maxDuration | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | How long the Function should be allowed to run for every request in seconds. Only [Integers](https://vercel.com/docs/rest-api#introduction/api-basics/types) between `1` and the [Serverless Function Execution Timeout](https://vercel.com/docs/limits/overview) limit of your plan are allowed. It is recommended to use a small value, as larger values will keep visitors waiting for longer. |\n| regions | [Enum](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The [regions](https://vercel.com/docs/edge-network/regions) on our Edge Network that the Function should be deployed to. It is recommended to keep your Functions close to your visitors, but also close to your data source, to keep latency for both at a minimum. |\n| runtime | [Enum](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The identifier of the [Lambda runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that you'd like to use for your Function. Defaults to the [Node.js Version](https://vercel.com/docs/functions/serverless-functions/runtimes/node-js#node.js-version) configured in the Project Settings. If this property is used, `handler` is required alongside it. It can also be `web` if you'd like to deploy an [Edge Function](https://vercel.com/docs/functions/edge-functions) (does not require `handler`). |\n| handler | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The name of the file that should be invoked by the Lambda runtime defined above whenever a request arrives. |\n\nAdditionally, the [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) mentioned above should contain the following properties if `runtime` is `web` and the respective Function is used as [Middleware](#resources/middleware) (if it's not used as Middleware and `runtime` is still `web`, the properties are optional):\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| env | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) that represent the names of [Environment Variables](https://vercel.com/docs/projects/environment-variables) that should be retrieved from the Project Settings and made available to the code at execution time with their values. |\n| files | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) that represent source files that are relevant for the Middleware. It has to contain at least one item that matches the `name` property. Any additional entry will be concatenated (learn more about [Edge Function Bundling](#configuration/bundling/edge-functions)) together with the contents of the file present at this path. All paths have to begin with `server/`. |\n| name | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The path of the respective [Middleware](#resources/middleware) file that the configuration [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) is responsible for. It is required to begin with `pages/` and end in `_middleware`. |\n| page | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The path in the URL for which the respective [Middleware](#resources/middleware) file is responsible. If it's responsible for multiple sub paths, you don't need to consider those here – only their parent path. |\n| regexp | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path for which the respective [Middleware](#resources/middleware) file is responsible. This value is considered every time a request arrives, to determine whether to execute the Middleware, or not. |\n| sortingIndex | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | If multiple [Middlewares](#resources/middleware) were defined for the same path, this value defines in which order they should be executed. |\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 1,\n  \"pages\": {\n    \"my-page.js\": {\n      \"memory\": 128,\n      \"maxDuration\": 3,\n      \"regions\": [\"hkg1\"]\n    },\n    \"api/date.go\": {\n      \"runtime\": \"go1.x\",\n      \"handler\": \"my-go-api.bin\"\n    },\n    \"api/hello.js\": {\n      \"runtime\": \"web\"\n    },\n    \"_middleware.js\": {\n      \"runtime\": \"web\",\n      \"env\": [],\n      \"files\": [\"server/pages/_middleware.js\"],\n      \"name\": \"pages/_middleware\",\n      \"page\": \"/\",\n      \"regexp\": \"^/.*$\",\n      \"sortingIndex\": 1\n    }\n  }\n}\n```\n\n**File Name**: `.output/server/pages/**/[function].nft.json`\n\nIf you are expecting scenarios in which multiple [Pages](#resources/pages) or [API Routes](#resources/api-routes) are making use of the same code for their Functions (which might apply for utility files), you can inform Vercel about those files, so that it can automatically determine the most efficient way to make the files available where needed.\n\nInstead of having to ensure that every [Page](#resources/pages) and [API Route](#resources/api-routes) Function includes all of the code it requires for being able to run, you can inform the platform which Functions depend on which files, instead of copying code into multiple places (which increases disk usage in the final Function). Vercel can then automatically figure out the most efficient placement for these files.\n\nThe configuration file can be placed alongside [Pages](#resources/pages) and [API Routes](#resources/api-routes) on any level within `pages`, and `[path]` in the configuration file name (see the \"File Name\" example above) has to match them. The dependency files of your Functions can be placed inside of the `.output/inputs` directory.\n\nIn the case that the `runtime` property of a Function is set to `web` using [Function Configuration](#configuration/functions), it is considered an [Edge Function](https://vercel.com/docs/functions/edge-functions) and will not be able to make use of the `.nft.json` configuration standard for bundling files.\n\nInstead, the `files` property in the respective Function Configuration entry can be used to inform the platform which files the Edge Function might depend on, so that multiple Edge Functions can make use of the same shared source code files, if needed.\n\nAs mentioned in [Function Configuration](#configuration/functions), the first entry of `files` is required to be the Edge Function's entrypoint file, but all other items in the [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) will have their file contents appended to the entrypoint file.\n\nNote that the `_ENTRIES` property within the entrypoint file will not receive additional properties. Instead, the entrypoint file and the other files are joined together as strings and create a new entrypoint file.\n\nIf multiple Edge Functions are making use of the same source code, use this property to help Vercel understand which Edge Function depends on which files, so that it can apply smart and efficient bundling, just like for Serverless Functions.\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `1`. |\n| files | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) representing the paths that a [Page](#resources/pages) and [API Route](#resources/api-routes) Function might depend on, relative to their location. If a list of [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) is used instead, this is reflected in their `input` properties, and their `output` properties would be the paths within the final [Lambda](https://aws.amazon.com/lambda/) to which the files should be mounted (relative to the root). Only use [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types) if necessary. |\n\nIf a [Page](#resources/pages) were to be located at `pages/about.js`, its respective configuration file for bundling would be located at `pages/about.nft.json`.\n\nIf your application contains dependencies within a `node_modules` directory which multiple Functions need to access, you don't need to copy those dependencies into multiple places. Instead, Vercel will automatically bundle the files in a smart way, so that disk usage of the final Functions is kept to a minimum.\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 1,\n  \"files\": [\n    {\n      \"input\": \"../../../data.txt\",\n      \"output\": \"my-folder/data.txt\"\n    }\n  ]\n}\n```\n\n**File Name**: `.output/images-manifest.json`\n\nIf you would like to provide images as part of your Deployment ahead of time, you can include them as [Static Files](#resources/static-files). Those images will be made available without modifications on your Deployment's URL, so you can load them from anywhere (like your frontend).\n\nFor optimal performance, however, it is recommended to load your images through Vercel's native [Image Optimization](https://vercel.com/docs/image-optimization) endpoint, which automatically adjusts the size and quality of your images, to make sure they are served to your visitors as quickly as possible.\n\nThe endpoint is available at the `/_vercel/image` path of the respective Deployment and accepts the following query string parameters:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| url | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The URL of the image that should be optimized (like `/static/image.png`). If it's an external URL, its domain must be included as part of `domains` in the configuration file. |\n| w   | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The width that the image should be resized to (like `200`). Only the [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) passed through `sizes` in the `images` configuration property are allowed as the value. |\n| q   | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The quality level that the image should be reduced to (like `70`). Any [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) between `100` (maximum quality) and `1` (lowest quality) is allowed as the value. |\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `1`. |\n| images | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A map of configuration properties (described below) that are considered every time an image is optimized. |\n\nWithin `images`, the following [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) has to be replaced:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| sizes | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Integers](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the allowed widths for when images are resized. |\n| domains | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the domains to be allowed as part of the URL when optimizing images. |\n| minimumCacheTTL | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | The amount of time (in seconds) that should pass before an image is marked as stale. If an image is marked as stale, the next time a new request for it comes in, it will asynchronously be optimized again in the background. |\n| formats | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) that represent potential values of the `Accept` header of an incoming request (defaults to `image/webp`, but allows `image/avif` as an additional entry). If an incoming request has a matching `Accept` header, the image will be transformed into this format. If no matching header is found, the image's original format remains unchanged. |\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 1,\n  \"images\": {\n    \"sizes\": [256, 384],\n    \"domains\": [\"external-site.com\"],\n    \"minimumCacheTTL\": 60,\n    \"formats\": [\"image/avif\", \"image/webp\"]\n  }\n}\n```\n\n**File Name**: `.output/prerender-manifest.json`\n\nWhen providing [Pages](#resources/pages) for your Deployment, you can choose between statically generating them ahead of time (and supplying Vercel with HTML files), or generating them on-demand, every time a request comes in.\n\nIt is generally recommended to opt for providing HTML files to the platform. This provides significant performance advantages because the Pages don't have to be rendered on-demand.\n\nIf you are dealing with a large amount of Pages, statically generating them all ahead of time can be slow. To solve this, you can provide Pre-Rendering configuration, which allows you to generate some of the Pages (for example, the ones that are commonly visited) ahead of time, while automatically generating the rest on-demand.\n\nFurthermore, it allows you to easily keep statically generated Pages up-to-date, without having to deploy every update again.\n\nIncremental Static Regeneration is a pre-rendering technique that enables you to update statically-generated pages on an interval, and generate missing pages on-demand. See [our ISR docs](https://vercel.com/docs/incremental-static-regeneration/overview) to learn more.\n\n[Draft Mode](https://vercel.com/docs/workflow-collaboration/draft-mode) allows you to set specific pages to bypass ISR caching and render at request time. This is useful for viewing draft content from a headless CMS without manually triggering page revalidation or waiting for the revalidation interval to pass.\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `3`. |\n| routes | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A map of statically generated [Pages](#resources/pages) (HTML files) that should be kept up-to-date and configuration properties for each one. The keys are [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the names of the HTML files, without their extensions. The values are [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types), whose properties are described below. |\n| dynamicRoutes | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A map of on-demand [Pages](#resources/pages) (Functions) that should be used for statically generating missing Pages and configuration properties for each one. The keys are [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing the names of the Functions, without their extensions. The values are [Maps](https://vercel.com/docs/rest-api#introduction/api-basics/types), whose properties are described below. |\n| preview | [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A map containing a single property named `previewModeId`, which is either `null` or a [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing any arbitrary characters. In the latter case, passing a cookie named `__prerender_bypass` with this value will bypass the ISR caches and force the Pages to be generated fresh on-demand. |\n\nUsed for associating statically generated Pages (HTML) with on-demand Pages (Functions). The statically generated Pages can be served to visitors, and their respective on-demand Page match is used for updating the HTML asynchronously in the background.\n\nThis means visitors never receive a slow response, and the HTML is kept up-to-date.\n\nWithin `routes`, every key can have the following [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) as its value:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| initialRevalidateSeconds | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The amount of seconds that a Page is allowed to be delivered before the Function for updating its contents is invoked in the background. |\n| srcRoute | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The name of a on-demand [Page](#resources/pages) (Function) without its extension, which is used for updating the HTML of the statically generated Page. |\n| dataRoute | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The name of a on-demand [Page](#resources/pages) (Function) without its extension, which is used for updating the JSON of the statically generated Page. Can be used for client-side transitions, but can also be left as an empty [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) if not needed. |\n\nCan be used in combination with `routes`, but also standalone.\n\nIts purpose is to capture URL path segments and point them to on-demand Pages (Functions), which will then produce statically generated Pages (HTML) for the respective path. Before the on-demand Pages are invoked, you can also make the platform first consider Pages that were already generated ahead of time (HTML) through `fallback`, which is recommended for optimal performance.\n\nOverall, this means that incoming requests would first result in the platform trying to find a matching Page that was statically generated ahead of time, after which the respective on-demand Page (Function) is invoked if no match was found.\n\nWithin `dynamicRoutes`, every key can have the following [Map](https://vercel.com/docs/rest-api#introduction/api-basics/types) as its value:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| routeRegex | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path under which a Page with [Incremental Static Regeneration](#configuration/pre-rendering/incremental-static-regeneration) should be attached. |\n| fallback | `null` or [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | Describes whether the route captured above is only used for statically generating new Pages on-demand if they're missing (`null`), or if the platform should first consider Pages that were statically generated ahead of time before generating new ones ([String](https://vercel.com/docs/rest-api#introduction/api-basics/types) referencing the Page without the HTML extension). |\n| dataRoute | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The same as the `dataRoute` property for `routes`, but for updating the JSON of the Page that was statically generated on-demand. |\n| dataRouteRegex | [String](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | A [regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) describing the URL path under which the JSON for the `dataRoute` property above should be served. |\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 3,\n  \"routes\": {\n    \"/my-isr-page\": {\n      \"initialRevalidateSeconds\": 30,\n      \"srcRoute\": \"/my-isr-page\",\n      \"dataRoute\": \"\"\n    }\n  },\n  \"dynamicRoutes\": {\n    \"/my-isr-page\": {\n      \"routeRegex\": \"^/my-isr-page$\",\n      \"dataRoute\": \"\",\n      \"fallback\": null,\n      \"dataRouteRegex\": \"\"\n    }\n  },\n  \"preview\": {\n    \"previewModeId\": null\n  }\n}\n```\n\n**File Name**: `.output/build-manifest.json`\n\nIf you'd like to configure the behavior of your Deployment's [Build Step](https://vercel.com/docs/deployments/configure-a-build), you can do so by providing the file mentioned above.\n\nThe following configuration properties are allowed within the configuration file:\n\n| Key | [Type](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Required | Description |\n| --- | --- | --- | --- |\n| version | [Integer](https://vercel.com/docs/rest-api#introduction/api-basics/types) | Yes | The version of the configuration that should be used. The most recent one for this file is currently `1`. |\n| cache | [List](https://vercel.com/docs/rest-api#introduction/api-basics/types) | No  | A list of [Strings](https://vercel.com/docs/rest-api#introduction/api-basics/types) containing [globs](https://github.com/isaacs/node-glob), where each one represents paths that should be [cached](https://vercel.com/docs/deployments/configure-a-build#caching). |\n\nThis is what the configuration file could look like in a real scenario:\n\n```\n{\n  \"version\": 1,\n  \"cache\": [\"build/**/*\"]\n}\n```\n\nYou can add support for framework detection and define default values on Vercel by adding it to the `@vercel/frameworks` package:\n\n1.  Fork the [`vercel/vercel`](https://github.com/vercel/vercel) repository on GitHub.\n2.  Add your framework to the `@vercel/frameworks` package by editing the file [`./packages/frameworks/src/frameworks.ts`](https://github.com/vercel/vercel/blob/master/packages/frameworks/src/frameworks.ts).\n3.  Copy the structure of an existing framework and adjust the fields for the new framework.\n4.  You can add default routes that will always be applied to Projects that use this framework or specify some paths that will be cached to speed up the build process (note that this step can be ignored if the framework makes use of the file system API).\n5.  The `settings` property either contains a `value` _or_ a `placeholder`. If the setting should allow the user to override it, use `placeholder`. To prevent the user from overriding, use `value`. For example, the Output Directory for Hugo is `public` by default, but can be changed through its config file, so we use `placeholder` with an explanation of what can be used.\n6.  Add a template to the [`examples`](https://github.com/vercel/vercel/tree/main/examples) directory: The name of the directory should match the `slug` of the framework used in `@vercel/frameworks`. The `/.github/EXAMPLE_README_TEMPLATE.md` file is a template for creating a `README.md` file for the template.\n7.  Create a Pull Request! After your Pull Request has been merged, someone from Vercel will enable the framework in the API so that anyone can select the framework on the Vercel dashboard and deploy it.",
    "title": "File System API (v2)",
    "description": "The File System API allows you to interact with the file system in a Node.js environment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/project-dashboard",
    "markdown": "# Project Dashboard\n\nEach Vercel project has a separate dashboard to configure settings, view deployments and more.\n\nThis page will teach you about the functionality of the dashboard at a high level, and provide links to resources if you want to learn more in depth.\n\nTo get started with a project on Vercel, see [our project docs](https://vercel.com/docs/projects/overview). You can also [create a new project with one of our templates](https://vercel.com/new/templates).\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fproject-tab-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fproject-tab-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Project tab.\n\nThe Project Overview tab provides an overview of your production deployment, including its [active Git branches](#active-branches), [build logs](https://vercel.com/docs/deployments/logs), [runtime logs](https://vercel.com/docs/observability/runtime-logs), [associated domains](https://vercel.com/docs/projects/domains), and more.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Factive-branches-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Factive-branches-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Active Branches section of the Project Overview tab.\n\nThe Project Overview's Active Branches gives you a quick view of your project's branches that are being actively committed to. The metadata we surface on these active branches further enables you to determine whether there's feedback to resolve or a deployment that needs your immediate attention.\n\nIf your project isn't connected to [a Git provider](https://vercel.com/docs/deployments/git), you'll see a **Preview Deployments** section where **Active Branches** should be.\n\nYou can filter the list of active branches by a search term, and see the status of each branch's deployment at a glance with the colored circle icon to the left of the branch name.\n\nFrom the Active Branches section, you can:\n\n*   Redeploy a branch, if you have [the appropriate permissions](https://vercel.com/docs/accounts/team-members-and-roles/access-roles/team-level-roles)\n*   View build logs for a branch's deployment\n*   View a branch's corresponding pull request in your chosen Git provider\n*   Copy a branch's deployment URL for sharing and viewing amongst members of your team. To share the preview with members outside of your team, see [our docs on sharing preview URLs](https://vercel.com/docs/deployments/preview-deployments#sharing-previews).\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fdeployments-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fdeployments-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Deployments tab.\n\nThe project dashboard lets you manage all your current and previous deployments associated with your project. To manage a deployment, select the project in the dashboard. Then click the Deployments tab from the top navigation.\n\nYou can sort your deployments by branch, or by status. You can also interact with your deployment by redeploying it, inspecting it, assigning it a domain, and more.\n\nSee [our docs on managing deployments](https://vercel.com/docs/deployments/managing-deployments) to learn more.\n\n![A snapshot of the Speed Insights tab from the project view.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fres-chart-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A snapshot of the Speed Insights tab from the project view.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fres-chart-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA snapshot of the Speed Insights tab from the project view.\n\nYou can learn how users interact with your website by using the [Speed Insights](https://vercel.com/docs/speed-insights) tab. Through [Web Analytics](https://vercel.com/docs/analytics), Vercel exposes data about your audience, such as the top pages, top referrers, and visitor demographics. You can learn about your site's performance with [Speed Insights](https://vercel.com/docs/speed-insights).\n\nTo learn more, see the following docs:\n\n![Layout to visualize the runtime logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686704452%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fruntime-logs-ui-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Layout to visualize the runtime logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1686704452%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fruntime-logs-ui-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nLayout to visualize the runtime logs.\n\nThe Logs tab inside your project dashboard allows you to view, search, inspect, and share your runtime logs without any third-party integration. You can filter and group your runtime logs based on the relevant [fields](https://vercel.com/docs/observability/runtime-logs#log-filters).\n\nLearn more in the [runtime logs docs](https://vercel.com/docs/observability/runtime-logs).\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fstorage-tab-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fstorage-tab-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Storage tab.\n\nThe Storage tab lets you manage storage products connected to your project, including:\n\nLearn more in [our storage docs](https://vercel.com/docs/storage).\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fproject-settings-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fproject-dashboard%2Fproject-settings-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Settings tab.\n\nThe Settings tab lets you configure your project. You can change the project's name, specify its root directory, configure environment variables and more directly in the dashboard.\n\nLearn more in [our project settings docs](https://vercel.com/docs/projects/overview#project-settings).",
    "title": "Project Dashboard",
    "description": "Learn about the features available for managing projects with the Project Dashboard on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/monorepos",
    "markdown": "# Using Monorepos\n\nMonorepos allow you to manage multiple projects in a single directory. They are a great way to organize your projects and make them easier to work with.\n\nGet started with monorepos on Vercel in a few minutes by using one of our monorepo quickstart templates.\n\nUse the New Project button to import your monorepo Project from within your Personal or Team Account.\n\nIf you'd like to deploy multiple different directories within the same Git repository, you can do so by creating a separate [Project](https://vercel.com/docs/projects/overview) for each directory and configuring the [Root Directory setting](https://vercel.com/docs/deployments/configure-a-build#root-directory) for it.\n\nTo achieve this, [import your Git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository) multiple times, edit the Root Directory in the Project Configuration for each import, and choose the corresponding Project. This will configure the Root Directory of each Project to its relevant directory in the repository.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fcommon%2Fmonorepo-import.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSelecting a Root Directory for one of your new Projects.\n\nOnce you've created a separate Project for each of the directories within your Git repository, every commit will issue a Deployment for all connected Projects and display the resulting URLs on your pull requests and commits:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Fgithub-comment.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn example of Deployment URLs provided for a Deployment through Git.\n\nThe number of Vercel Projects connected with the same Git repository is [limited depending on your plan](https://vercel.com/docs/limits/overview#general-limits).\n\nVercel CLI should always be invoked from the monorepo root, not the subdirectory. You should use [Vercel CLI 20.1.0](https://vercel.com/docs/cli#updating-vercel-cli) or newer.\n\nFirst, run `vercel link` to select the Vercel Project. You'll need to select one at a time.\n\nIf you're working in a monorepo using the Git Integration, you can link multiple projects at once using `vc link --repo`. [Visit CLI docs to learn more](https://vercel.com/docs/cli/link#repo-alpha).\n\nOnce linked, subsequent commands such as `vercel dev` will use the selected Vercel Project. To switch to a different Project in the same monorepo, run `vercel link` again and select the new Project.\n\nAlternatively, you can use `git clone` to create multiple copies of your monorepo in different directories and link each one to a different Vercel Project.\n\nSee this [example](https://github.com/vercel-support/yarn-ws-monorepo) of a monorepo with Yarn Workspaces.\n\nPushing a commit to your monorepo will create a Deployment for each of the connected Vercel projects.\n\nIf you want to cancel the Build Step for certain projects if their files didn't change, you can do so with the [Ignored Build Step](https://vercel.com/docs/projects/overview#ignored-build-step) project setting.\n\nIf you have created a script to ignore the build step, you can skip the [the script](https://vercel.com/guides/how-do-i-use-the-ignored-build-step-field-on-vercel) when redeploying or promoting your app to production. This can be done through the dashboard when you click on the **Redeploy** button, and unchecking the **Use project's Ignore Build Step** checkbox.\n\nWhen you use [Turborepo](https://vercel.com/docs/monorepos/turborepo), you can intelligently cancel builds using [turbo-ignore](https://vercel.com/docs/monorepos/turborepo#using-turbo-ignore).\n\nWhether or not your deployments are queued depends on the amount of Concurrent Builds you have available. Hobby plans are limited to 1 Concurrent Build, while Pro or Enterprise plans can customize the amount on the \"Billing\" page in the team settings.\n\nLearn more about [Concurrent Builds](https://vercel.com/docs/deployments/concurrent-builds).\n\nAfter having set up your monorepo as described above, each of the directories will be a separate Vercel project, and therefore be available on a separate domain.\n\nIf you'd like to host multiple projects under a single domain, you can create a new project, assign the domain in the project settings, and proxy requests to the other upstream projects. The proxy can be implemented using a `vercel.json` file with the [rewrites](https://vercel.com/docs/projects/project-configuration#rewrites) property, where each `source` is the path under the main domain and each `destination` is the upstream project domain.\n\nPushing a commit to a Git repository that is connected with multiple Vercel projects will result in multiple deployments being created and built in parallel for each.\n\nTo access source files outside the Root Directory, enable the Include source files outside of the Root Directory in the Build Step option in the Root Directory section within the project settings.\n\nFor information on using Yarn workspaces, see [Deploying a Monorepo Using Yarn Workspaces to Vercel](https://vercel.com/guides/deploying-yarn-monorepos-to-vercel).\n\nVercel projects created after August 27th 2020 23:50 UTC have this option enabled by default. If you're using Vercel CLI, at least version 20.1.0 is required.\n\nVercel CLI will accept Environment Variables instead of Project Linking, which can be useful for deployments from CI providers. For example:\n\n```\nVERCEL_ORG_ID=team_123 VERCEL_PROJECT_ID=prj_456 vercel\n```\n\nLearn more about [Vercel CLI for custom workflows](https://vercel.com/guides/using-vercel-cli-for-custom-workflows).\n\nYes. Turborepo is available on all plans.\n\nWhen using [Nx](https://nx.dev/getting-started/intro) on Vercel with [environment variables](https://vercel.com/docs/projects/environment-variables), you may encounter an issue where some of your environment variables are not being assigned the correct value in a specific deployment.\n\nThis can happen if the environment variable is not initialized or defined in that deployment. If that's the case, the system will look for a value in an existing cache which may or may not be the value you would like to use. It is a recommended practice to define all environment variables in each deployment for all monorepos.\n\nWith Nx, you also have the ability to prevent the environment variable from using a cached value. You can do that by using [Runtime Hash Inputs](https://nx.dev/using-nx/caching#runtime-hash-inputs) . For example, if you have an environment variable `MY_VERCEL_ENV` in your project, you will add the following line to your `nx.json` configuration file:\n\n```\n\"runtimeCacheInputs\": [\"echo $MY_VERCEL_ENV\"]\n```",
    "title": "Using Monorepos",
    "description": "Monorepos allow you to manage and organize multiple projects in a single directory so they are easier to work with. Learn how to deploy a monorepo here.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/build-output-api/v3/features",
    "markdown": "# Features\n\nThis section describes how to implement common Vercel platform features through the Build Output API through a combination of platform primitives, configuration and helper functions.\n\nThe `vercel.json` file supports an [easier-to-use syntax for routing through properties like `rewrites`, `headers`, etc](https://vercel.com/docs/projects/project-configuration). However, the [`config.json` \"routes\" property](https://vercel.com/docs/build-output-api/v3/configuration#routes) supports a lower-level syntax.\n\nThe `getTransformedRoutes()` function from the [`@vercel/routing-utils` npm package](https://www.npmjs.com/package/@vercel/routing-utils) can be used to convert this higher-level syntax into the lower-level format that is supported by the Build Output API. For example:\n\n```\nimport { writeFileSync } from 'fs';\nimport { getTransformedRoutes } from '@vercel/routing-utils';\n \nconst { routes } = getTransformedRoutes({\n  trailingSlash: false,\n  redirects: [\n    { source: '/me', destination: '/profile.html' },\n    { source: '/view-source', destination: 'https://github.com/vercel/vercel' },\n  ],\n});\n \nconst config = {\n  version: 3,\n  routes,\n};\nwriteFileSync('.vercel/output/config.json', JSON.stringify(config));\n```\n\nThe [`cleanUrls: true` routing feature](https://vercel.com/docs/projects/project-configuration#cleanurls) is a special case because, in addition to the routes generated with the helper function above, it _also_ requires that the static HTML files have their `.html` suffix removed.\n\nThis can be achieved by utilizing the [`\"overrides\"` property in the `config.json` file](https://vercel.com/docs/build-output-api/v3/configuration#overrides):\n\n```\nimport { writeFileSync } from 'fs';\nimport { getTransformedRoutes } from '@vercel/routing-utils';\n \nconst { routes } = getTransformedRoutes({\n  cleanUrls: true,\n});\n \nconst config = {\n  version: 3,\n  routes,\n  overrides: {\n    'blog.html': {\n      path: 'blog',\n    },\n  },\n};\nwriteFileSync('.vercel/output/config.json', JSON.stringify(config));\n```\n\nAn Edge Runtime function can act as a \"middleware\" in the HTTP request lifecycle for a Deployment. Middleware is useful for implementing functionality that may be shared by many URL paths in a Project (e.g. authentication), before passing the request through to the underlying resource (such as a page or asset) at that path.\n\nAn Edge Middleware is represented on the file system in the same format as an [Edge Function](https://vercel.com/docs/build-output-api/v3#vercel-primitives/edge-functions). To use the middleware, add additional rules in the [`routes` configuration](https://vercel.com/docs/build-output-api/v3/configuration#routes) mapping URLs (using the `src` property) to the middleware (using the `middlewarePath` property).\n\nThe following example adds a rule that calls the `auth` middleware for any URL that starts with `/api`, before continuing to the underlying resource:\n\n```\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"middlewareRawSrc\": [\"/api\"],\n      \"middlewarePath\": \"auth\",\n      \"continue\": true\n    }\n  ]\n```\n\nWhen using [Prerender Functions](https://vercel.com/docs/build-output-api/v3/primitives#prerender-functions), you may want to implement \"Draft Mode\" which would allow you to bypass the caching aspect of prerender functions. For example, while writing draft blog posts before they are ready to be published.\n\nTo implement this, the `bypassToken` of the `<name>.prerender-config.json` file should be set to a randomized string that you generate at build-time. This string should not be exposed to users / the client-side, except under authenticated circumstances.\n\nTo enable \"Draft Mode\", a cookie with the name `__prerender_bypass` needs to be set (i.e. by a Serverless Function) with the value of the `bypassToken`. When the Prerender Function endpoint is accessed while the cookie is set, then \"Draft Mode\" will be activated, bypassing any caching that Vercel would normally provide when not in draft mode.\n\nWhen using [Prerender Functions](https://vercel.com/docs/build-output-api/v3/primitives#prerender-functions), you may want to implement \"On-Demand Incremental Static Regeneration (ISR)\" which would allow you to invalidate the cache at any time.\n\nTo implement this, the `bypassToken` of the `<name>.prerender-config.json` file should be set to a randomized string that you generate at build-time. This string should not be exposed to users / the client-side, except under authenticated circumstances.\n\nTo trigger \"On-Demand Incremental Static Regeneration (ISR)\" and revalidate a path to a Prerender Function, make a `GET` or `HEAD` request to that path with a header of `x-prerender-revalidate: <bypassToken>`. When that Prerender Function endpoint is accessed with this header set, the cache will be revalidated. The next request to that function should return a fresh response.",
    "title": "Features",
    "description": "Learn how to implement common Vercel platform features through the Build Output API.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/og-image-generation",
    "markdown": "# Open Graph (OG) Image Generation\n\nTo assist with generating dynamic [Open Graph (OG)](https://ogp.me/) images, you can use the Vercel `@vercel/og` library to compute and generate social card images using [Vercel Edge Functions](https://vercel.com/docs/functions/edge-functions).\n\n*   Performance: With a small amount of code needed to generate images, [functions](https://vercel.com/docs/functions) can be started almost instantly. This allows the image generation process to be fast and recognized by tools like the [Open Graph Debugger](https://en.rakko.tools/tools/9/)\n*   Ease of use: You can define your images using HTML and CSS and the library will dynamically generate images from the markup\n*   Cost-effectiveness: `@vercel/og` automatically adds the correct headers to cache computed images at the edge, helping reduce cost and recomputation\n\n*   Basic CSS layouts including flexbox and absolute positioning\n*   Custom fonts, text wrapping, centering, and nested images\n*   Ability to download the subset characters of the font from Google Fonts\n*   Compatible with any framework and application deployed on Vercel\n*   View your OG image and other metadata before your deployment goes to production through the [Open Graph](https://vercel.com/docs/deployments/og-preview) tab\n\nVercel OG image generation is supported on both the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-runtime) and [Node.js runtime](https://vercel.com/docs/functions/runtimes/node-js).\n\nIn the Edge runtime, resources like fonts and images are loaded using the `fetch` method. This is effective for accessing local resources using the `import.meta` syntax. See [using a local image](https://vercel.com/docs/functions/edge-functions/og-image-generation/og-image-examples#using-a-local-image) for more information.\n\nFor the Node.js runtime, local resources can be loaded directly using `fs.readFile`. Alternatively, `fetch` can be used to load remote resources.\n\n```\nconst fs = require('fs').promises;\n \nconst loadLocalImage = async () => {\n  const imageData = await fs.readFile('/path/to/image.png');\n  // Process image data\n};\n```\n\nThere are limitations when using `vercel/og` with the Next.js pages router and the Node.js runtime. Specifically, this combination does not support the `return new Response(…)` syntax. The table below provides a breakdown of the supported syntaxes for different configurations.\n\n| Configuration | Supported Syntax | Notes |\n| --- | --- | --- |\n| `pages/` + Edge runtime | `return new Response(…)` | Fully supported. |\n| `app/` + Node.js runtime | `return new Response(…)` | Fully supported. |\n| `app/` + Edge runtime | `return new Response(…)` | Fully supported. |\n| `pages/` + Node.js runtime | Not supported | Does not support `return new Response(…)` syntax with `vercel/og`. |\n\nIt is recommended to use the Edge runtime with `vercel/og` to avoid this caveat.\n\n*   Install Node.js 20 or newer by visiting [nodejs.org](https://nodejs.org/)\n*   Install `@vercel/og` by running the following command inside your project directory:\n\n*   For Next.js implementations, make sure you are using Next.js v12.2.3 or newer\n*   Create API endpoints that you can call from your front-end to generate the images. Since the HTML code for generating the image is included as one of the parameters of the `ImageResponse` function, the use of `.jsx` or `.tsx` files is recommended as they are designed to handle this kind of syntax\n*   It is [recommended](#runtime-caveats) to use the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-runtime) by enabling the `runtime: 'edge'` config flag\n*   To avoid the possibility of social media providers not being able to fetch your image, it is recommended to add your OG image API route(s) to `Allow` inside your `robots.txt` file. For example, if your OG image API route is `/api/og/`, you can add the following line: If you are using Next.js, review [robots.txt](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots#static-robotstxt) to learn how to add or generate a `robots.txt` file.\n\nGet started with an example that generates an image from static text using Next.js by setting up a new app with the following command:\n\nCreate an API endpoint by adding `route.tsx` under the `app/api/og` directory in the root of your project.\n\nThen paste the following code:\n\n```\nimport { ImageResponse } from 'next/og';\n// App router includes @vercel/og.\n// No need to install it.\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 40,\n          color: 'black',\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          padding: '50px 200px',\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        👋 Hello\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 630,\n    },\n  );\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nRun the following command:\n\nThen, browse to `http://localhost:3000/api/og`. You will see the following image:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Fog-image%2Fog-language.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDeploy your project to obtain a publicly accessible path to the OG image API endpoint. You can find an example deployment at [https://og-examples.vercel.sh/api/static](https://og-examples.vercel.sh/api/static).\n\nThen, based on the [Open Graph Protocol](https://ogp.me/#metadata), create the web content for your social media post as follows:\n\n*   Create a `<meta>` tag inside the `<head>` of the webpage\n*   Add the `property` attribute with value `og:image` to the `<meta>` tag\n*   Add the `content` attribute with value as the absolute path of the `/api/og` endpoint to the `<meta>` tag\n\nWith the example deployment at [https://og-examples.vercel.sh/api/static](https://og-examples.vercel.sh/api/static), use the following code:\n\n```\n<head>\n  <title>Hello world</title>\n  <meta\n    property=\"og:image\"\n    content=\"https://og-examples.vercel.sh/api/static\"\n  />\n</head>\n```\n\nEvery time you create a new social media post, you need to update the API endpoint with the new content. However, if you identify which parts of your `ImageResponse` will change for each post, you can then pass those values as parameters of the endpoint so that you can use the same endpoint for all your posts.\n\nIn the examples below, we explore using parameters and including other types of content with `ImageResponse`.\n\n*   Recommended OG image size: 1200x630 pixels\n*   `@vercel/og` uses [Satori](https://github.com/vercel/satori) and Resvg to convert HTML and CSS into PNG\n*   `@vercel/og` [API reference](https://vercel.com/docs/functions/edge-functions/og-image-generation/og-image-api)\n\n*   Only the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-functions-api) is supported. The default Node.js runtime will not work. To use Node.js or any other runtime, you can use [Satori](https://github.com/vercel/satori) directly. However, you will get better performance with `@vercel/og` and the Edge runtime\n*   Only `ttf`, `otf`, and `woff` font formats are supported. To maximize the font parsing speed, `ttf` or `otf` are preferred over `woff`\n*   Only flexbox (`display: flex`) and a subset of CSS properties are supported. Advanced layouts (`display: grid`) will not work. See [Satori](https://github.com/vercel/satori)'s documentation for more details on supported CSS properties\n*   Maximum bundle size of 500KB. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime",
    "title": "Open Graph (OG) Image Generation",
    "description": "Learn how to optimize social media image generation through the Open Graph Protocol and @vercel/og library.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/project-configuration",
    "markdown": "# Configuring Projects with vercel.json\n\nThe `vercel.json` configuration file lets you configure, and override the default behavior of Vercel from within your project. This includes settings for:\n\n*   [buildCommand](#buildcommand)\n*   [cleanUrls](#cleanurls)\n*   [crons](#crons)\n*   [devCommand](#devcommand)\n*   [framework](#framework)\n*   [functions](#functions)\n*   [headers](#headers)\n*   [ignoreCommand](#ignorecommand)\n*   [images](#images)\n*   [installCommand](#installcommand)\n*   [outputDirectory](#outputdirectory)\n*   [public](#public)\n*   [redirects](#redirects)\n*   [regions](#regions)\n*   [functionFailoverRegion](#functionfailoverregions)\n*   [rewrites](#rewrites)\n*   [trailingSlash](#trailingslash)\n\nTo get started, create a `vercel.json` file in your project's root directory.\n\nType: `string | null`\n\nThe `buildCommand` property can be used to override the Build Command in the Project Settings dashboard, and the `build` script from the `package.json` file for a given deployment. For more information on the default behavior of the Build Command, visit the [Configure a Build - Build Command](https://vercel.com/docs/deployments/configure-a-build#build-command) section.\n\n```\n{\n  \"buildCommand\": \"next build\"\n}\n```\n\nThis value overrides the [Build Command](https://vercel.com/docs/deployments/configure-a-build#build-command) in Project Settings.\n\nType: `Boolean`.\n\nDefault Value: `false`.\n\nWhen set to `true`, all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.\n\nFor example, a static file named `about.html` will be served when visiting the `/about` path. Visiting `/about.html` will redirect to `/about`.\n\nSimilarly, a Serverless Function named `api/user.go` will be served when visiting `/api/user`. Visiting `/api/user.go` will redirect to `/api/user`.\n\nIf you are using Next.js and running `vercel dev`, you will get a 404 error when visiting a route configured with `cleanUrls` locally. It does however work fine when deployed to Vercel. In the example above, visiting `/about` locally will give you a 404 with `vercel dev` but `/about` will render correctly on Vercel.\n\nUsed to configure [cron jobs](https://vercel.com/docs/cron-jobs) for the production deployment of a project.\n\nType: `Array` of cron `Object`.\n\nLimits:\n\n*   A maximum of string length of 512 for the `path` value.\n*   A maximum of string length of 256 for the `schedule` value.\n\n*   `path` - Required - The path to invoke when the cron job is triggered. Must start with `/`.\n*   `schedule` - Required - The [cron schedule expression](https://vercel.com/docs/cron-jobs#cron-expressions) to use for the cron job.\n\n```\n{\n  \"crons\": [\n    {\n      \"path\": \"/api/every-minute\",\n      \"schedule\": \"* * * * *\"\n    },\n    {\n      \"path\": \"/api/every-hour\",\n      \"schedule\": \"0 * * * *\"\n    },\n    {\n      \"path\": \"/api/every-day\",\n      \"schedule\": \"0 0 * * *\"\n    }\n  ]\n}\n```\n\nThis value overrides the [Development Command](https://vercel.com/docs/deployments/configure-a-build#development-command) in Project Settings.\n\nType: `string | null`\n\nThe `devCommand` property can be used to override the Development Command in the Project Settings dashboard. For more information on the default behavior of the Development Command, visit the [Configure a Build - Development Command](https://vercel.com/docs/deployments/configure-a-build#development-command) section.\n\n```\n{\n  \"devCommand\": \"next dev\"\n}\n```\n\nThis value overrides the [Framework](https://vercel.com/docs/deployments/configure-a-build#framework-preset) in Project Settings.\n\nType: `string | null`\n\nAvailable framework slugs:\n\nThe `framework` property can be used to override the Framework Preset in the Project Settings dashboard. The value must be a valid framework slug. For more information on the default behavior of the Framework Preset, visit the [Configure a Build - Framework Preset](https://vercel.com/docs/deployments/configure-a-build#framework-preset) section.\n\nTo select \"Other\" as the Framework Preset, use `null`.\n\n```\n{\n  \"framework\": \"nextjs\"\n}\n```\n\nType: `Object` of key `String` and value `Object`.\n\nA [glob](https://github.com/isaacs/node-glob#glob-primer) pattern that matches the paths of the Serverless Functions you would like to customize:\n\n*   `api/*.js` (matches one level e.g. `api/hello.js` but not `api/hello/world.js`)\n*   `api/**/*.ts` (matches all levels `api/hello.ts` and `api/hello/world.ts`)\n*   `src/pages/**/*` (matches all functions from `src/pages`)\n*   `api/test.js`\n\n*   `runtime` (optional): The npm package name of a [Runtime](https://vercel.com/docs/functions/serverless-functions/runtimes), including its version.\n*   `memory` (optional): An integer defining the memory in MB for your Serverless Function (between `128` and `3009`).\n*   `maxDuration` (optional): An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between `1` and the maximum limit of your plan, as mentioned below).\n*   `includeFiles` (optional): A [glob](https://github.com/isaacs/node-glob#glob-primer) pattern to match files that should be included in your Serverless Function. If you’re using a Community Runtime, the behavior might vary. Please consult its documentation for more details. (Not supported in Next.js, instead use [`outputFileTracingIncludes`](https://nextjs.org/docs/app/api-reference/next-config-js/output) in `next.config.js` )\n*   `excludeFiles` (optional): A [glob](https://github.com/isaacs/node-glob#glob-primer) pattern to match files that should be excluded from your Serverless Function. If you’re using a Community Runtime, the behavior might vary. Please consult its documentation for more details. (Not supported in Next.js, instead use [`outputFileTracingIncludes`](https://nextjs.org/docs/app/api-reference/next-config-js/output) in `next.config.js` )\n\nBy default, no configuration is needed to deploy Serverless Functions to Vercel.\n\nFor all [officially supported runtimes](https://vercel.com/docs/functions/serverless-functions/runtimes), the only requirement is to create an `api` directory at the root of your project directory, placing your Serverless Functions inside.\n\nThe `functions` property cannot be used in combination with `builds`. Since the latter is a legacy configuration property, we recommend dropping it in favor of the new one.\n\nBecause [Incremental Static Regeneration (ISR)](https://vercel.com/docs/incremental-static-regeneration) uses Serverless Functions, the same configurations apply. The ISR route can be defined using a glob pattern, and accepts the same properties as when using Serverless Functions.\n\nWhen deployed, each Serverless Function receives the following properties:\n\n*   Memory: 1024 MB (1 GB) - (Optional)\n*   Maximum Duration: 10s default - 60s (Hobby), 15s default - 300s (Pro), or 15s default - 900s (Enterprise). This [can be configured](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) up to the respective plan limit) - (Optional)\n\nTo configure them, you can add the `functions` property.\n\n```\n{\n  \"functions\": {\n    \"api/test.js\": {\n      \"memory\": 3009,\n      \"maxDuration\": 30\n    },\n    \"api/*.js\": {\n      \"memory\": 3009,\n      \"maxDuration\": 30\n    }\n  }\n}\n```\n\n```\n{\n  \"functions\": {\n    \"pages/blog/[hello].tsx\": {\n      \"memory\": 1024\n    },\n    \"src/pages/isr/**/*\": {\n      \"maxDuration\": 10\n    }\n  }\n}\n```\n\nIn order to use a runtime that is not [officially supported](https://vercel.com/docs/functions/serverless-functions/runtimes), you can add a `runtime` property to the definition:\n\n```\n{\n  \"functions\": {\n    \"api/test.php\": {\n      \"runtime\": \"vercel-php@0.5.2\"\n    }\n  }\n}\n```\n\nIn the example above, the `api/test.php` Serverless Function does not use one of the [officially supported runtimes](https://vercel.com/docs/functions/serverless-functions/runtimes). In turn, a `runtime` property was added in order to invoke the [vercel-php](https://www.npmjs.com/package/vercel-php) community runtime.\n\nFor more information on Runtimes, see the [Runtimes documentation](https://vercel.com/docs/functions/serverless-functions/runtimes):\n\nType: `Array` of header `Object`.\n\nValid values: a list of header definitions.\n\n```\n{\n  \"headers\": [\n    {\n      \"source\": \"/service-worker.js\",\n      \"headers\": [\n        {\n          \"key\": \"Cache-Control\",\n          \"value\": \"public, max-age=0, must-revalidate\"\n        }\n      ]\n    },\n    {\n      \"source\": \"/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"X-Content-Type-Options\",\n          \"value\": \"nosniff\"\n        },\n        {\n          \"key\": \"X-Frame-Options\",\n          \"value\": \"DENY\"\n        },\n        {\n          \"key\": \"X-XSS-Protection\",\n          \"value\": \"1; mode=block\"\n        }\n      ]\n    },\n    {\n      \"source\": \"/:path*\",\n      \"has\": [\n        {\n          \"type\": \"query\",\n          \"key\": \"authorized\"\n        }\n      ],\n      \"headers\": [\n        {\n          \"key\": \"x-authorized\",\n          \"value\": \"true\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThis example configures custom response headers for static files, [Serverless Functions](https://vercel.com/docs/functions/serverless-functions), and a wildcard that matches all routes.\n\n| Property | Description |\n| --- | --- |\n| `source` | A pattern that matches each incoming pathname (excluding querystring). |\n| `headers` | A non-empty array of key/value pairs representing each response header. |\n| `has` | An optional array of `has` objects with the `type`, `key` and `value` properties. Used for conditional path matching based on the presence of specified properties. |\n| `missing` | An optional array of `missing` objects with the `type`, `key` and `value` properties. Used for conditional path matching based on the absence of specified properties. |\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `type` | `String` | Must be either `header`, `cookie`, `host`, or `query`. The `type` property only applies to request headers sent by clients, not response headers sent by your functions or backends. |\n| `key` | `String` | The key from the selected type to match against. |\n| `value` | `String` or not defined | The value to check for, if `undefined` any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`. |\n\nLearn more about [rewrites](https://vercel.com/docs/edge-network/headers) on Vercel and see [limitations](https://vercel.com/docs/edge-network/caching#limits).\n\nThis value overrides the [Ignored Build Step](https://vercel.com/docs/projects/overview#ignored-build-step) in Project Settings.\n\nType: `string | null`\n\nThis `ignoreCommand` property will override the Command for Ignoring the Build Step for a given deployment. When the command exits with code 1, the build will continue. When the command exits with 0, the build is ignored. For more information on the default behavior of the Ignore Command, visit the [Ignored Build Step](https://vercel.com/docs/projects/overview#ignored-build-step) section.\n\n```\n{\n  \"ignoreCommand\": \"git diff --quiet HEAD^ HEAD ./\"\n}\n```\n\nThis value overrides the [Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) in Project Settings.\n\nType: `string | null`\n\nThe `installCommand` property can be used to override the Install Command in the Project Settings dashboard for a given deployment. This setting is useful for trying out a new package manager for the Project. An empty string value will cause the Install Command to be skipped. For more information on the default behavior of the install command visit the [Configure a Build - Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) section.\n\n```\n{\n  \"installCommand\": \"npm install\"\n}\n```\n\nThe `images` property defines the behavior of [Vercel's native Image Optimization API](https://vercel.com/docs/image-optimization), which allows on-demand optimization of images at runtime.\n\nType: `Object`\n\n*   `sizes` - Required - Array of allowed image widths. The Image Optimization API will return an error if an image width is requested that is not defined in this list.\n*   `remotePatterns` - Required - Allow-list of external domains which can be used with the Image Optimization API.\n*   `minimumCacheTTL` - Cache duration (in seconds) for the optimized images.\n*   `formats` - Supported output image formats. Allowed values are either `\"image/avif\"` and/or `\"image/webp\"`.\n*   `dangerouslyAllowSVG` - Allow SVG input image URLs. This is disabled by default for security purposes.\n*   `contentSecurityPolicy` - Specifies the [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP) of the optimized images.\n*   `contentDispositionType` - Specifies the value of the `\"Content-Disposition\"` response header. Allowed values are `\"inline\"` or `\"attachment\"`.\n\n```\n{\n  \"images\": {\n    \"sizes\": [256, 640, 1080, 2048, 3840],\n    \"remotePatterns\": [\n      {\n        \"protocol\": \"https\",\n        \"hostname\": \"example.com\",\n        \"port\": \"\",\n        \"pathname\": \"/account123/**\"\n      }\n    ],\n    \"minimumCacheTTL\": 60,\n    \"formats\": [\"image/webp\"],\n    \"dangerouslyAllowSVG\": false,\n    \"contentSecurityPolicy\": \"script-src 'none'; frame-src 'none'; sandbox;\",\n    \"contentDispositionType\": \"inline\"\n  }\n}\n```\n\nThis value overrides the [Output Directory](https://vercel.com/docs/deployments/configure-a-build#output-directory) in Project Settings.\n\nType: `string | null`\n\nThe `outputDirectory` property can be used to override the Output Directory in the Project Settings dashboard for a given deployment.\n\nIn the following example, the deployment will look for the `build` directory rather than the default `public` or `.` root directory. For more information on the default behavior of the Output Directory see the [Configure a Build - Output Directory](https://vercel.com/docs/deployments/configure-a-build#output-directory) section. The following example is a `vercel.json` file that overrides the `outputDirectory` to `build`:\n\n```\n{\n  \"outputDirectory\": \"build\"\n}\n```\n\nType: `Boolean`.\n\nDefault Value: `false`.\n\nWhen set to `true`, both the [source view](https://vercel.com/docs/deployments/build-features#source-view) and [logs view](https://vercel.com/docs/deployments/build-features#logs-view) will be publicly accessible.\n\nType: `Array` of redirect `Object`.\n\nValid values: a list of redirect definitions.\n\nThis example redirects requests to the path `/me` from your site's root to the `profile.html` file relative to your site's root with a [307 Temporary Redirect](https://developer.mozilla.org/docs/Web/HTTP/Status/307):\n\n```\n{\n  \"redirects\": [\n    { \"source\": \"/me\", \"destination\": \"/profile.html\", \"permanent\": false }\n  ]\n}\n```\n\nThis example redirects requests to the path `/me` from your site's root to the `profile.html` file relative to your site's root with a [308 Permanent Redirect](https://developer.mozilla.org/docs/Web/HTTP/Status/308):\n\n```\n{\n  \"redirects\": [\n    { \"source\": \"/me\", \"destination\": \"/profile.html\", \"permanent\": true }\n  ]\n}\n```\n\nThis example redirects requests to the path `/user` from your site's root to the api route `/api/user` relative to your site's root with a [301 Moved Permanently](https://developer.mozilla.org/docs/Web/HTTP/Status/301):\n\n```\n{\n  \"redirects\": [\n    { \"source\": \"/user\", \"destination\": \"/api/user\", \"statusCode\": 301 }\n  ]\n}\n```\n\nThis example redirects requests to the path `/view-source` from your site's root to the absolute path `https://github.com/vercel/vercel` of an external site with a redirect status of 308:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/view-source\",\n      \"destination\": \"https://github.com/vercel/vercel\"\n    }\n  ]\n}\n```\n\nThis example redirects requests to all the paths (including all sub-directories and pages) from your site's root to the absolute path `https://vercel.com/docs` of an external site with a redirect status of 308:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/(.*)\",\n      \"destination\": \"https://vercel.com/docs\"\n    }\n  ]\n}\n```\n\nThis example uses wildcard path matching to redirect requests to any path (including subdirectories) under `/blog/` from your site's root to a corresponding path under `/news/` relative to your site's root with a redirect status of 308:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/blog/:path*\",\n      \"destination\": \"/news/:path*\"\n    }\n  ]\n}\n```\n\nThis example uses regex path matching to redirect requests to any path under `/posts/` that only contain numerical digits from your site's root to a corresponding path under `/news/` relative to your site's root with a redirect status of 308:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/post/:path(\\\\d{1,})\",\n      \"destination\": \"/news/:path*\"\n    }\n  ]\n}\n```\n\nThis example redirects requests to any path from your site's root that does not start with `/uk/` and has `x-vercel-ip-country` header value of `GB` to a corresponding path under `/uk/` relative to your site's root with a redirect status of 307:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/:path((?!uk/).*)\",\n      \"has\": [\n        {\n          \"type\": \"header\",\n          \"key\": \"x-vercel-ip-country\",\n          \"value\": \"GB\"\n        }\n      ],\n      \"destination\": \"/uk/:path*\",\n      \"permanent\": false\n    }\n  ]\n}\n```\n\nUsing `has` does not yet work locally while using `vercel dev`, but does work when deployed.\n\n| Property | Description |\n| --- | --- |\n| `source` | A pattern that matches each incoming pathname (excluding querystring). |\n| `destination` | A location destination defined as an absolute pathname or external URL. |\n| `permanent` | An optional boolean to toggle between permanent and temporary redirect (default `true`). When `true`, the status code is [308](https://developer.mozilla.org/docs/Web/HTTP/Status/308). When `false` the status code is [307](https://developer.mozilla.org/docs/Web/HTTP/Status/307). |\n| `statusCode` | An optional integer to define the status code of the redirect. Used when you need a value other than 307/308 from `permanent`, and therefore cannot be used with `permanent` boolean. |\n| `has` | An optional array of `has` objects with the `type`, `key` and `value` properties. Used for conditional redirects based on the presence of specified properties. |\n| `missing` | An optional array of `missing` objects with the `type`, `key` and `value` properties. Used for conditional redirects based on the absence of specified properties. |\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `type` | `String` | Must be either `header`, `cookie`, `host`, or `query`. |\n| `key` | `String` | The key from the selected type to match against. |\n| `value` | `String` or not defined | The value to check for, if `undefined` any value will match. A regex like string can be used to capture a specific part of the value. See example. |\n\nLearn more about [redirects on Vercel](https://vercel.com/docs/edge-network/redirects) and see [limitations](https://vercel.com/docs/edge-network/redirects#limits).\n\nThis value overrides the [Serverless Function Region](https://vercel.com/docs/functions/serverless-functions/regions) in Project Settings.\n\nType: `Array` of region identifier `String`.\n\nValid values: List of [regions](https://vercel.com/docs/edge-network/regions), defaults to `iad1`.\n\nSelect the deployment regions of [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) in your application. Deploying to multiple regions (or `all`) is limited to [Enterprise plans](https://vercel.com/enterprise), but Pro and Hobby plans can select any single region.\n\nFunction responses [can be cached](https://vercel.com/docs/edge-network/caching) in the requested regions. Selecting a Serverless Function region does not impact static files, which are deployed to every region by default.\n\nSet this property to specify the [region](https://vercel.com/docs/functions/serverless-functions/regions) to which a Serverless Function should fallback when the default region(s) are unavailable.\n\nType: `Array` of region identifier `String`.\n\nValid values: List of [regions](https://vercel.com/docs/edge-network/regions).\n\n```\n{\n  \"functionFailoverRegions\": [\"iad1\", \"sfo1\"]\n}\n```\n\nThese regions serve as a fallback to any regions specified in the [`regions` configuration](https://vercel.com/docs/projects/project-configuration#regions). The region Vercel selects to invoke your function depends on availability and ingress. For instance:\n\n*   Vercel always attempts to invoke the function in the primary region. If you specify more than one primary region in the `regions` property, Vercel selects the region geographically closest to the request\n*   If all primary regions are unavailable, Vercel automatically fails over to the regions specified in `functionFailoverRegions`, selecting the region geographically closest to the request\n*   The order of the regions in `functionFailoverRegions` does not matter as Vercel automatically selects the region geographically closest to the request\n\nTo learn more about automatic failover for Serverless Functions, see [Automatic failover](https://vercel.com/docs/functions/configuring-functions/region#serverless-functions-failover). Edge Functions will [automatically failover](https://vercel.com/docs/functions/configuring-functions/region#edge-functions-failover) with no configuration required.\n\nRegion failover is supported with Secure Compute, see [Region Failover](https://vercel.com/docs/security/secure-compute#region-failover) to learn more.\n\nType: `Array` of rewrite `Object`.\n\nValid values: a list of rewrite definitions.\n\nThis example rewrites requests to the path `/about` from your site's root to the `/about-our-company.html` file relative to your site's root:\n\n```\n{\n  \"rewrites\": [{ \"source\": \"/about\", \"destination\": \"/about-our-company.html\" }]\n}\n```\n\nThis example rewrites requests to the paths under `/resize` that with 2 paths levels (defined as variables `width` and `height` that can be used in the destination value) to the api route `/api/sharp` relative to your site's root:\n\n```\n{\n  \"rewrites\": [\n    { \"source\": \"/resize/:width/:height\", \"destination\": \"/api/sharp\" }\n  ]\n}\n```\n\nThis example uses wildcard path matching to rewrite requests to any path (including subdirectories) under `/proxy/` from your site's root to a corresponding path under the root of an external site `https://example.com/`:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/proxy/:match*\",\n      \"destination\": \"https://example.com/:match*\"\n    }\n  ]\n}\n```\n\nThis example rewrites requests to any path from your site's root that does not start with /uk/ and has x-vercel-ip-country header value of GB to a corresponding path under /uk/ relative to your site's root:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/:path((?!uk/).*)\",\n      \"has\": [\n        {\n          \"type\": \"header\",\n          \"key\": \"x-vercel-ip-country\",\n          \"value\": \"GB\"\n        }\n      ],\n      \"destination\": \"/uk/:path*\"\n    }\n  ]\n}\n```\n\nThis example rewrites requests to the path `/dashboard` from your site's root that does not have a cookie with key `auth_token` to the path `/login` relative to your site's root:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/dashboard\",\n      \"missing\": [\n        {\n          \"type\": \"cookie\",\n          \"key\": \"auth_token\"\n        }\n      ],\n      \"destination\": \"/login\"\n    }\n  ]\n}\n```\n\n| Property | Description |\n| --- | --- |\n| `source` | A pattern that matches each incoming pathname (excluding querystring). |\n| `destination` | A location destination defined as an absolute pathname or external URL. |\n| `permanent` | A boolean to toggle between permanent and temporary redirect (default true). When `true`, the status code is [308](https://developer.mozilla.org/docs/Web/HTTP/Status/308). When `false` the status code is [307](https://developer.mozilla.org/docs/Web/HTTP/Status/307). |\n| `has` | An optional array of `has` objects with the `type`, `key` and `value` properties. Used for conditional rewrites based on the presence of specified properties. |\n| `missing` | An optional array of `missing` objects with the `type`, `key` and `value` properties. Used for conditional rewrites based on the absence of specified properties. |\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `type` | `String` | Must be either `header`, `cookie`, `host`, or `query`. |\n| `key` | `String` | The key from the selected type to match against. |\n| `value` | `String` or not defined | The value to check for, if `undefined` any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`. |\n\nThe `source` property should NOT be a file because precedence is given to the filesystem prior to rewrites being applied. Instead, you should rename your static file or Serverless Function.\n\nUsing `has` does not yet work locally while using `vercel dev`, but does work when deployed.\n\nLearn more about [rewrites](https://vercel.com/docs/edge-network/rewrites) on Vercel.\n\nType: `Boolean`.\n\nDefault Value: `undefined`.\n\nWhen `trailingSlash: false`, visiting a path that ends with a forward slash will respond with a 308 status code and redirect to the path without the trailing slash.\n\nFor example, the `/about/` path will redirect to `/about`.\n\n```\n{\n  \"trailingSlash\": false\n}\n```\n\nWhen `trailingSlash: true`, visiting a path that does not end with a forward slash will respond with a 308 status code and redirect to the path with a trailing slash.\n\nFor example, the `/about` path will redirect to `/about/`.\n\nHowever, paths with a file extension will not redirect to a trailing slash.\n\nFor example, the `/about/styles.css` path will not redirect, but the `/about/styles` path will redirect to `/about/styles/`.\n\n```\n{\n  \"trailingSlash\": true\n}\n```\n\nWhen `trailingSlash: undefined`, visiting a path with or without a trailing slash will not redirect.\n\nFor example, both `/about` and `/about/` will serve the same content without redirecting.\n\nThis is not recommended because it could lead to search engines indexing two different pages with duplicate content.\n\nLegacy properties are still supported for backwards compatibility, but are deprecated.\n\nThe `name` property has been deprecated in favor of [Project Linking](https://vercel.com/docs/cli/project-linking), which allows you to link a Vercel Project to your local codebase when you run `vercel`.\n\nType: `String`.\n\nValid values: string name for the deployment.\n\nLimits:\n\n*   A maximum length of 52 characters\n*   Only lower case alphanumeric characters or hyphens are allowed\n*   Cannot begin or end with a hyphen, or contain multiple consecutive hyphens\n\nThe prefix for all new deployment instances. Vercel CLI usually generates this field automatically based on the name of the directory. But if you'd like to define it explicitly, this is the way to go.\n\nThe defined name is also used to organize the deployment into [a project](https://vercel.com/docs/projects/overview).\n\n```\n{\n  \"name\": \"example-app\"\n}\n```\n\nThe `version` property should not be used anymore.\n\nType: `Number`.\n\nValid values: `1`, `2`.\n\nSpecifies the Vercel Platform version the deployment should use.\n\nThe `alias` property should not be used anymore. To assign a custom Domain to your Project, please [define it in the Project Settings](https://vercel.com/docs/projects/domains/add-a-domain) instead. Once your domains are, they will take precedence over the configuration property.\n\nType: `Array` or `String`.\n\nValid values: [domain names](https://vercel.com/docs/projects/domains/add-a-domain) (optionally including subdomains) added to the account, or a string for a suffixed URL using `.vercel.app` or a Custom Deployment Suffix ([available on the Enterprise plan](https://vercel.com/pricing)).\n\nLimit: A maximum of 64 aliases in the array.\n\nThe alias or aliases are applied automatically using [Vercel for GitHub](https://vercel.com/docs/deployments/git/vercel-for-github), [Vercel for GitLab](https://vercel.com/docs/deployments/git/vercel-for-gitlab), or [Vercel for Bitbucket](https://vercel.com/docs/deployments/git/vercel-for-bitbucket) when merging or pushing to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch).\n\nYou can deploy to the defined aliases using [Vercel CLI](https://vercel.com/docs/cli) by setting the [production deployment environment target](https://vercel.com/docs/projects/domains/deploying-and-redirecting).\n\n```\n{\n  \"alias\": [\"my-domain.com\", \"my-alias\"]\n}\n```\n\nThe `scope` property has been deprecated in favor of [Project Linking](https://vercel.com/docs/cli/project-linking), which allows you to link a Vercel Project to your local codebase when you run `vercel`.\n\nType: `String`.\n\nValid values: For teams, either an ID or slug. For users, either a email address, username, or ID.\n\nThis property determines the scope ([Hobby account](https://vercel.com/docs/accounts/create-an-account#creating-a-hobby-account) or [team](https://vercel.com/docs/accounts/create-a-team)) under which the project will be deployed by [Vercel CLI](https://vercel.com/cli).\n\nIt also affects any other actions that the user takes within the directory that contains this configuration (e.g. listing [Environment Variables](https://vercel.com/docs/projects/environment-variables) using `vercel secrets ls`).\n\nDeployments made through [Git](https://vercel.com/docs/deployments/git) will ignore the `scope` property because the repository is already connected to [project](https://vercel.com/docs/projects/overview).\n\nWe recommend against using this property. To add custom Environment Variables to your Project [define them in the Project Settings](https://vercel.com/docs/projects/environment-variables).\n\nType: `Object` of `String` keys and values.\n\nValid values: environment keys and values.\n\nEnvironment variables passed to the invoked [Serverless Functions](https://vercel.com/docs/functions/serverless-functions).\n\nThis example will pass the `MY_KEY` static env to all [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) and the `SECRET` resolved from the `my-secret-name` [secret](https://vercel.com/docs/projects/environment-variables/reserved-environment-variables) dynamically.\n\n```\n{\n  \"env\": {\n    \"MY_KEY\": \"this is the value\",\n    \"SECRET\": \"@my-secret-name\"\n  }\n}\n```\n\nWe recommend against using this property. To add custom Environment Variables to your Project [define them in the Project Settings](https://vercel.com/docs/projects/environment-variables).\n\nType: `Object` of `String` keys and values inside the `build` `Object`.\n\nValid values: environment keys and values.\n\n[Environment variables](https://vercel.com/docs/projects/environment-variables) passed to the [Build](https://vercel.com/docs/deployments/configure-a-build) processes.\n\nThe following example will pass the `MY_KEY` Environment Variable to all [Builds](https://vercel.com/docs/deployments/configure-a-build) and the `SECRET` resolved from the `my-secret-name` [secret](https://vercel.com/docs/projects/environment-variables/reserved-environment-variables) dynamically.\n\n```\n{\n  \"env\": {\n    \"MY_KEY\": \"this is the value\",\n    \"SECRET\": \"@my-secret-name\"\n  }\n}\n```\n\nWe recommend against using this property. To customize Serverless Functions, please use the [functions](#functions) property instead. If you'd like to deploy a monorepo, see the [Monorepo docs](https://vercel.com/docs/monorepos).\n\nType: `Array` of build `Object`.\n\nValid values: a list of build descriptions whose `src` references valid source files.\n\n*   `src` (`String`): A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include `*` and `**`.\n*   `use` (`String`): An npm module to be installed by the build process. It can include a semver compatible version (e.g.: `@org/proj@1`).\n*   `config` (`Object`): Optionally, an object including arbitrary metadata to be passed to the Builder.\n\nThe following will include all HTML files as-is (to be served statically), and build all Python files and JS files into [Serverless Functions](https://vercel.com/docs/functions/serverless-functions):\n\n```\n{\n  \"builds\": [\n    { \"src\": \"*.html\", \"use\": \"@vercel/static\" },\n    { \"src\": \"*.py\", \"use\": \"@vercel/python\" },\n    { \"src\": \"*.js\", \"use\": \"@vercel/node\" }\n  ]\n}\n```\n\nWhen at least one `builds` item is specified, only the outputs of the build processes will be included in the resulting deployment as a security precaution. This is why we need to allowlist static files explicitly with `@vercel/static`.\n\nWe recommend using [cleanUrls](#cleanurls), [trailingSlash](#trailingslash), [redirects](#redirects), [rewrites](#rewrites), and/or [headers](#headers) instead.\n\nThe `routes` property is only meant to be used for advanced integration purposes, such as the [Build Output API](https://vercel.com/docs/build-output-api/v3), and cannot be used in conjunction with any of the properties mentioned above.\n\nSee the [upgrading routes section](#upgrading-legacy-routes) to learn how to migrate away from this property.\n\nType: `Array` of route `Object`.\n\nValid values: a list of route definitions.\n\n*   `src`: A [PCRE-compatible regular expression](https://www.pcre.org/original/doc/html/pcrepattern.html) that matches each incoming pathname (excluding querystring).\n*   `methods`: A set of HTTP method types. If no method is provided, requests with any HTTP method will be a candidate for the route.\n*   `dest`: A destination pathname or full URL, including querystring, with the ability to embed capture groups as $1, $2…\n*   `headers`: A set of headers to apply for responses.\n*   `status`: A status code to respond with. Can be used in tandem with `Location:` header to implement redirects.\n*   `continue`: A boolean to change matching behavior. If `true`, routing will continue even when the `src` is matched.\n*   `has`: An optional array of `has` objects with the `type`, `key` and `value` properties. Used for conditional path matching based on the presence of specified properties\n*   `missing`: An optional array of `missing` objects with the `type`, `key` and `value` properties. Used for conditional path matching based on the absence of specified properties\n\nRoutes are processed in the order they are defined in the array, so wildcard/catch-all patterns should usually be last.\n\nThis example configures custom routes that map to static files and [Serverless Functions](https://vercel.com/docs/functions/serverless-functions):\n\n```\n{\n  \"routes\": [\n    {\n      \"src\": \"/redirect\",\n      \"status\": 308,\n      \"headers\": { \"Location\": \"https://example.com/\" }\n    },\n    {\n      \"src\": \"/custom-page\",\n      \"headers\": { \"cache-control\": \"s-maxage=1000\" },\n      \"dest\": \"/index.html\"\n    },\n    { \"src\": \"/api\", \"dest\": \"/my-api.js\" },\n    { \"src\": \"/users\", \"methods\": [\"POST\"], \"dest\": \"/users-api.js\" },\n    { \"src\": \"/users/(?<id>[^/]*)\", \"dest\": \"/users-api.js?id=$id\" },\n    { \"src\": \"/legacy\", \"status\": 404 },\n    { \"src\": \"/.*\", \"dest\": \"https://my-old-site.com\" }\n  ]\n}\n```\n\nIn most cases, you can upgrade legacy `routes` usage to the newer [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites), [`redirects`](https://vercel.com/docs/projects/project-configuration#redirects), [`headers`](https://vercel.com/docs/projects/project-configuration#headers), [`cleanUrls`](https://vercel.com/docs/projects/project-configuration#cleanurls) or [`trailingSlash`](https://vercel.com/docs/projects/project-configuration#trailingslash) properties.\n\nHere are some examples that show how to upgrade legacy `routes` to the equivalent new property.\n\nWith `routes`, you use a [PCRE Regex](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) named group to match the ID and then pass that parameter in the query string. The following example matches a URL like `/product/532004` and proxies to `/api/product?id=532004`:\n\n```\n{\n  \"routes\": [{ \"src\": \"/product/(?<id>[^/]+)\", \"dest\": \"/api/product?id=$id\" }]\n}\n```\n\nWith [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites), named parameters are automatically passed in the query string. The following example is equivalent to the legacy `routes` usage above, but uses `rewrites` instead:\n\n```\n{\n  \"rewrites\": [{ \"source\": \"/product/:id\", \"destination\": \"/api/product\" }]\n}\n```\n\nWith `routes`, you specify the status code to use a 307 Temporary Redirect. Also, this redirect needs to be defined before other routes. The following example redirects all paths in the `posts` directory to the `blog` directory, but keeps the path in the new location:\n\n```\n{\n  \"routes\": [\n    {\n      \"src\": \"/posts/(.*)\",\n      \"headers\": { \"Location\": \"/blog/$1\" },\n      \"status\": 307\n    }\n  ]\n}\n```\n\nWith [`redirects`](https://vercel.com/docs/projects/project-configuration#redirects), you disable the `permanent` property to use a 307 Temporary Redirect. Also, `redirects` are always processed before `rewrites`. The following example is equivalent to the legacy `routes` usage above, but uses `redirects` instead:\n\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/posts/:id\",\n      \"destination\": \"/blog/:id\",\n      \"permanent\": false\n    }\n  ]\n}\n```\n\nWith `routes`, you use `\"handle\": \"filesystem\"` to give precedence to the filesystem and exit early if the requested path matched a file. The following example will serve the `index.html` file for all paths that do not match a file in the filesystem:\n\n```\n{\n  \"routes\": [\n    { \"handle\": \"filesystem\" },\n    { \"src\": \"/(.*)\", \"dest\": \"/index.html\" }\n  ]\n}\n```\n\nWith [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites), the filesystem check is the default behavior. If you want to change the name of files at the filesystem level, file renames can be performed during the [Build Step](https://vercel.com/docs/deployments/configure-a-build), but not with `rewrites`. The following example is equivalent to the legacy `routes` usage above, but uses `rewrites` instead:\n\n```\n{\n  \"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/index.html\" }]\n}\n```\n\nWith `routes`, you use `\"continue\": true` to prevent stopping at the first match. The following example adds `Cache-Control` headers to the favicon and other static assets:\n\n```\n{\n  \"routes\": [\n    {\n      \"src\": \"/favicon.ico\",\n      \"headers\": { \"Cache-Control\": \"public, max-age=3600\" },\n      \"continue\": true\n    },\n    {\n      \"src\": \"/assets/(.*)\",\n      \"headers\": { \"Cache-Control\": \"public, max-age=31556952, immutable\" },\n      \"continue\": true\n    }\n  ]\n}\n```\n\nWith [`headers`](https://vercel.com/docs/projects/project-configuration#headers), this is no longer necessary since that is the default behavior. The following example is equivalent to the legacy `routes` usage above, but uses `headers` instead:\n\n```\n{\n  \"headers\": [\n    {\n      \"source\": \"/favicon.ico\",\n      \"headers\": [\n        {\n          \"key\": \"Cache-Control\",\n          \"value\": \"public, max-age=3600\"\n        }\n      ]\n    },\n    {\n      \"source\": \"/assets/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"Cache-Control\",\n          \"value\": \"public, max-age=31556952, immutable\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nWith `routes`, you need to escape a dot with two backslashes, otherwise it would match any character [PCRE Regex](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions). The following example matches the literal `atom.xml` and proxies to `/api/rss` to dynamically generate RSS:\n\n```\n{\n  \"routes\": [{ \"src\": \"/atom\\\\.xml\", \"dest\": \"/api/rss\" }]\n}\n```\n\nWith [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites), the `.` is not a special character so it does not need to be escaped. The following example is equivalent to the legacy `routes` usage above, but instead uses `rewrites`:\n\n```\n{\n  \"rewrites\": [{ \"source\": \"/atom.xml\", \"destination\": \"/api/rss\" }]\n}\n```\n\nWith `routes`, you use [PCRE Regex](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) negative lookahead. The following example proxies all requests to the `/maintenance` page except for `/maintenance` itself to avoid infinite loop:\n\n```\n{\n  \"routes\": [{ \"src\": \"/(?!maintenance)\", \"dest\": \"/maintenance\" }]\n}\n```\n\nWith [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites), the Regex needs to be wrapped. The following example is equivalent to the legacy `routes` usage above, but instead uses `rewrites`:\n\n```\n{\n  \"rewrites\": [\n    { \"source\": \"/((?!maintenance).*)\", \"destination\": \"/maintenance\" }\n  ]\n}\n```\n\nWith `routes`, the `src` property is case-insensitive leading to duplicate content, where multiple request paths with difference cases serve the same page.\n\nWith [`rewrites`](https://vercel.com/docs/projects/project-configuration#rewrites) / [`redirects`](https://vercel.com/docs/projects/project-configuration#redirects) / [`headers`](https://vercel.com/docs/projects/project-configuration#headers), the `source` property is case-sensitive so you don't accidentally create duplicate content.",
    "title": "Configuring Projects with vercel.json",
    "description": "Learn how to use vercel.json to configure and override the default behavior of Vercel from within your project. ",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/add-a-domain",
    "markdown": "# Adding & Configuring a Custom Domain\n\nVercel provides all deployments with a `vercel.app` URL, which enables you to share Deployments with your Team for collaboration. However, to provide greater personalization and flexibility to your project, you can instead add a custom domain. If you don't own a domain yet, you can [purchase it with Vercel](https://vercel.com/domains).\n\nYou can manage all domain settings related to a project in the Domains section of the Settings tab of the project, regardless of whether you are using [apex domains](#apex-domains) or [subdomains](#subdomains) in your project. This document will guide you through both options.\n\nHobby accounts have a limit of 50 custom domains per project.\n\nThe following steps provide an overview of how to add and configure a custom domain in Vercel:\n\n1.  On the [dashboard](https://vercel.com/dashboard), pick the project to which you would like to assign your domain.\n    \n    Once you have selected your project, click on the Settings tab and then select the Domains menu item:\n    \n    ![Selecting the Domains menu item from the Project Settings page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fselect-domains-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Selecting the Domains menu item from the Project Settings page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fselect-domains-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Selecting the Domains menu item from the Project Settings page.\n    \n2.  From the Domains page, enter the domain you wish to add to the project:\n    \n    ![Entering a domain for the project from the Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fenter-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Entering a domain for the project from the Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fenter-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Entering a domain for the project from the Domains page.\n    \n    If you add an apex domain (e.g. `example.com`) to the project, Vercel will prompt you to add the `www` subdomain prefix, the apex domain, and [some basic redirection options](https://vercel.com/docs/projects/domains/deploying-and-redirecting). For more information on which redirect option to choose, see \"[Redirecting `www` domains](https://vercel.com/docs/projects/domains/deploying-and-redirecting#redirecting-www-domains)\".\n    \n    ![Choosing redirect options for your apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwww-modal.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Choosing redirect options for your apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwww-modal-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Choosing redirect options for your apex domain.\n    \n    You can use your custom domain as a wildcard domain by prefixing it with `*.`.\n    \n    If using your **custom domain** as a **wildcard** domain, you **must use the nameservers method for verification**.\n    \n    To add a wildcard domain, use the prefix `*`, for example `*.acme.com`.\n    \n    ![A wildcard domain being deployed.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwildcard-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A wildcard domain being deployed.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwildcard-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    A wildcard domain being deployed.\n    \n3.  Once you have added your custom domain, you will need to configure the DNS records of your domain with your registrar so it can be used with your Project. The dashboard will automatically display different methods for configuring it:\n    \n    *   If the domain is in use by another Vercel account, you will need to [verify access to the domain](#verify-domain-access), with a TXT record\n    *   If you're using an [Apex domain](#apex-domains) (e.g. example.com), you will need to configure it with an A record\n    *   If you're using a [Subdomain](#subdomains) (e.g. docs.example.com), you will need to configure it with a CNAME record\n    \n    Both apex domains and subdomains can also be configured using the [Nameservers](#vercel-nameservers) method.\n    \n    If you are verifying your domain by changing nameservers, you will need to add any DNS records to Vercel that you wish to keep from your previous DNS provider.\n    \n    You can configure apex domains either with a A record or through the Nameservers method.\n    \n    ![Instructions on configuring an apex domain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-apex-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Instructions on configuring an apex domain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-apex-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Instructions on configuring an apex domain from the Project Domains page.\n    \n    You can configure subdomains either with a CNAME record or through the Nameservers method.\n    \n    ![Instructions on configuring a subdomain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-subdomain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Instructions on configuring a subdomain from the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigure-subdomain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Instructions on configuring a subdomain from the Project Domains page.\n    \n    If you choose to use Vercel's nameservers for either [apex domains](#apex-domains) or [subdomains](#subdomains), click on the Enable Vercel DNS button to opt in. Once enabled, you will be provided with the Vercel nameservers to copy and use with your registrar.\n    \n    ![Instructions on opting in to use Vercel Nameservers.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fenable-vercel-dns.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Instructions on opting in to use Vercel Nameservers.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fenable-vercel-dns-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Instructions on opting in to use Vercel Nameservers.\n    \n    If the domain is in use by another Vercel account, you may be prompted to verify access to the domain. Note that this will not move the domain into your account, but will allow you to use it in your project.\n    \n    ![Instructions on verifying a domain by setting a DNS record on the apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fverify-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Instructions on verifying a domain by setting a DNS record on the apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fverify-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Instructions on verifying a domain by setting a DNS record on the apex domain.\n    \n\nOnce the domain has been configured and Vercel has verified it, the status of the domain will be updated within the UI to confirm that it is ready for use.\n\n![A configured domain on the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigured-domain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A configured domain on the Project Domains page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fconfigured-domain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA configured domain on the Project Domains page.\n\nIf a someone visits your domain with or without the \"www\" subdomain prefix, Vercel will attempt to redirect them to your domain. For more robust protection, you should explicitly add this domain and [redirect it](https://vercel.com/docs/projects/domains/deploying-and-redirecting#redirecting-domains) .",
    "title": "Adding & Configuring a Custom Domain",
    "description": "Learn how to add a custom domain to your Vercel project, verify it, and correctly set the DNS or Nameserver values.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/git/vercel-for-gitlab",
    "markdown": "# Deploying GitLab Projects with Vercel\n\n​Vercel for GitLab automatically deploys your GitLab projects with [Vercel](https://vercel.com/), providing [Preview Deployment URLs](https://vercel.com/docs/deployments/preview-deployments#preview-urls), and automatic [Custom Domain](https://vercel.com/docs/projects/domains/working-with-domains) updates.\n\nThe [Deploying a Git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository) guide outlines how to create a new Vercel Project from a GitLab repository, and enable automatic deployments on every branch push.\n\nIf you'd like to connect your Vercel Project to a different GitLab repository or disconnect it, you can do so from the [Git section](https://vercel.com/docs/projects/overview#git) in the Project Settings.\n\nVercel for GitLab will deploy each push by default. This includes pushes and pull requests made to branches. This allows those working within the project to preview the changes made before they are pushed to production.\n\nWith each new push, if Vercel is already building a previous commit on the same branch, the current build will complete and any commit pushed during this time will be queued. Once the first build completes, the most recent commit will begin deployment and the other queued builds will be cancelled. This ensures that you always have the latest changes deployed as quickly as possible.\n\nIf [Custom Domains](https://vercel.com/docs/projects/custom-domains) are set from a project domains dashboard, pushes and merges to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) (commonly \"main\") will be made live to those domains with the latest deployment made with a push.\n\nIf you decide to revert a commit that has already been deployed to production, the previous [Production Deployment](https://vercel.com/docs/deployments/environments#production) from a commit will automatically be made available at the [Custom Domain](https://vercel.com/docs/projects/custom-domains) instantly; providing you with instant rollbacks.\n\nThe latest push to any [merge request](https://docs.gitlab.com/ee/user/project/merge_requests/) will automatically be made available at a unique preview URL based on the project name, branch, and team or username. These URLs will be provided through a comment on each merge request.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fguides%2Fgetting-started-with-vercel-for-gitlab%2Fmerge-request-alias.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA preview URL created from a merge request.\n\nYou may want to use different workflows and APIs based on Git information. To support this, the following [System Environment Variables](https://vercel.com/docs/projects/environment-variables#system-environment-variables) are exposed to your Deployments:\n\n  \n\n| Name | Description | Available at [Build](https://vercel.com/docs/deployments/configure-a-build) and/or [Run](https://vercel.com/docs/functions) Time |\n| --- | --- | --- |\n| `VERCEL_GIT_PROVIDER` | The Git Provider the deployment is triggered from. In the case of GitLab, the value is always `gitlab`. | both |\n| `VERCEL_GIT_REPO_SLUG` | The GitLab name of the deployed project. Example: `my-site`. | both |\n| `VERCEL_GIT_REPO_OWNER` | The GitLab user, group, or sub-group that the project belongs to. Example: `acme`. | both |\n| `VERCEL_GIT_REPO_ID` | The GitLab ID of the deployed project. Example: `13343236`. | both |\n| `VERCEL_GIT_COMMIT_REF` | The GitLab branch that the deployment was triggered by. Example: `improve-about-page`. | both |\n| `VERCEL_GIT_COMMIT_SHA` | The GitLab sha of the commit the deployment was triggered by. Example: `fa1eade47b73733d6312d5abfad33ce9e4068081`. | both |\n| `VERCEL_GIT_COMMIT_MESSAGE` | The message accompanying the GitLab commit that the deployment was triggered by. Example: `Add John Doe to about page`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_LOGIN` | The username belonging to the author of the commit that was deployed on GitLab. Example: `johndoe`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_NAME` | The name belonging to the author of the commit that was deployed on GitLab. Example: `John Doe`. | both |\n| `VERCEL_GIT_PULL_REQUEST_ID` | The GitLab merge request id the deployment was triggered by. If a deployment is created on a branch before a merge request is made, this value will be an empty string. Example: `23`. | both |\n\nWe require some permissions through our Vercel for GitLab integration. Below are listed the permissions required and a description for what they are used for.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `API` | Y   | Y   | Allows us access to the API—including all groups and projects, the container registry, and the package registry—to clone repositories and add comments to pull requests and commits. |\n\nWe use the permissions above in order to provide you with the best possible deployment experience. If you have any questions or concerns about any of the permission scopes, please [contact Vercel Support](https://vercel.com/help#issues).\n\nTo sign up on Vercel with a different GitLab account, sign out of your current GitLab account.\n\nThen, restart the Vercel [signup process](https://vercel.com/signup).\n\nWhen importing or connecting a GitLab repository, we require that you have **Maintainer** access to the corresponding repository, so that we can configure a webhook and automatically deploy pushed commits.\n\nIf a repository is missing when you try to import or connect it, make sure that you have [Maintainer access configured for the repository](https://docs.gitlab.com/ee/user/project/members/).\n\nBy default, comments from the Vercel bot will appear on your pull requests and commits. You can silence these comments in your project's settings:\n\n1.  From the Vercel [dashboard](https://vercel.com/dashboard), select your project\n2.  From the Settings tab, select Git\n3.  Under Connected Git Repository, toggle the switches to your preference\n\nIt is currently not possible to prevent comments for specific branches.\n\nYou can use GitLab Pipelines to build and deploy your Vercel Application.\n\n`vercel build` allows you to build your project inside GitLab Pipelines, without exposing your source code to Vercel. Then, `vercel deploy --prebuilt` skips the build step on Vercel and uploads the previously generated `.vercel/output` folder to Vercel from the GitLab Pipeline.\n\n[Learn more about how to configure GitLab Pipelines and Vercel](https://vercel.com/guides/how-can-i-use-gitlab-pipelines-with-vercel) for custom CI/CD workflows.\n\nIn some cases, your GitLab merge pipeline can fail while your branch pipeline succeeds, allowing your merge requests to [merge with failing tests](https://gitlab.com/gitlab-org/gitlab/-/issues/384927#top) . This is a GitLab issue. To avoid it, we recommend using [Vercel CLI](https://vercel.com/docs/cli/deploying-from-cli) to deploy your projects.",
    "title": "Deploying GitLab Projects with Vercel",
    "description": "​Vercel for GitLab automatically deploys your GitLab projects with Vercel, providing Preview Deployment URLs, and automatic Custom Domain updates.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/git/vercel-for-github",
    "markdown": "# Deploying GitHub Projects with Vercel\n\nVercel for GitHub automatically deploys your GitHub projects with [Vercel](https://vercel.com/), providing [Preview Deployment URLs](https://vercel.com/docs/deployments/preview-deployments#preview-urls), and automatic [Custom Domain](https://vercel.com/docs/projects/domains/working-with-domains) updates.\n\nThe [Deploying a Git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository) guide outlines how to create a new Vercel Project from a GitHub repository, and enable automatic deployments on every branch push.\n\nIf you'd like to connect your Vercel Project to a different GitHub repository or disconnect it, you can do so from the [Git section](https://vercel.com/docs/projects/overview#git) in the Project Settings.\n\nVercel for GitHub will deploy every push by default. This includes pushes and pull requests made to branches. This allows those working within the repository to preview changes made before they are pushed to production.\n\nWith each new push, if Vercel is already building a previous commit on the same branch, the current build will complete and any commit pushed during this time will be queued. Once the first build completes, the most recent commit will begin deployment and the other queued builds will be cancelled. This ensures that you always have the latest changes deployed as quickly as possible.\n\nYou can disable this feature for GitHub by configuring the [github.autoJobCancellation](https://vercel.com/docs/projects/project-configuration/git-configuration#github.autojobcancelation) option in your `vercel.json` file.\n\nIf [Custom Domains](https://vercel.com/docs/projects/custom-domains) are set from a project domains dashboard, pushes and merges to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) (commonly \"main\") will be made live to those domains with the latest deployment made with a push.\n\nIf you decide to revert a commit that has already been deployed to production, the previous [Production Deployment](https://vercel.com/docs/deployments/environments#production) from a commit will automatically be made available at the [Custom Domain](https://vercel.com/docs/projects/custom-domains) instantly; providing you with instant rollbacks.\n\nThe latest push to any pull request will automatically be made available at a unique [preview URL](https://vercel.com/docs/deployments/preview-deployments#preview-urls) based on the project name, branch, and team or username. These URLs will be provided through a comment on each pull request. Vercel also supports Comments on preview deployments made from PRs on GitHub. [Learn more about Comments on preview deployments in GitHub here](https://vercel.com/docs/deployments/preview-deployments#github-integration).\n\nIf you receive a pull request from a fork of your repository that includes a change to the [`vercel.json`](https://vercel.com/docs/cli) file or the Project has [Environment Variables](https://vercel.com/docs/projects/environment-variables), Vercel will require authorization from you or a [Team Member](https://vercel.com/docs/teams-and-accounts/team-members-and-roles) to deploy the pull request.\n\nThis behavior protects you from leaking sensitive Project information.\n\nYou can disable [Git Fork Protection](https://vercel.com/docs/projects/overview#git-fork-protection) in the Security section of your Project Settings.\n\nVercel for GitHub uses the deployment API to bring you an extended user interface both in GitHub, when showing deployments, and Slack, if you have notifications setup using the [Slack GitHub app](https://slack.github.com/).\n\nYou will see all of your deployments, production or preview, from within GitHub on its own page.\n\nDue to using GitHub's Deployments API, you will also be able to integrate with other services through [GitHub's checks](https://help.github.com/en/articles/about-status-checks). Vercel will provide the deployment URL to the checks that require it, for example; to a testing suite such as [Checkly](https://checklyhq.com/docs/cicd/github/).\n\nTo configure the Vercel for GitHub integration, see [the configuration reference for Git](https://vercel.com/docs/projects/project-configuration/git-configuration).\n\nYou may want to use different workflows and APIs based on Git information. To support this, the following [System Environment Variables](https://vercel.com/docs/projects/environment-variables#system-environment-variables) are exposed to your Deployments:\n\n  \n\n| Name | Description | Available at [Build](https://vercel.com/docs/deployments/configure-a-build) and/or [Run](https://vercel.com/docs/functions) Time |\n| --- | --- | --- |\n| `VERCEL_GIT_PROVIDER` | The Git Provider the deployment is triggered from. In the case of GitHub, the value is always `github`. | both |\n| `VERCEL_GIT_REPO_SLUG` | The origin repository of the app on GitHub. Example: `my-site`. | both |\n| `VERCEL_GIT_REPO_OWNER` | The GitHub organization that owns the repository the deployment is triggered from. Example: `acme`. | both |\n| `VERCEL_GIT_REPO_ID` | The ID of the GitHub repository the deployment is triggered from. Example: `117716146`. | both |\n| `VERCEL_GIT_COMMIT_REF` | The GitHub branch that the deployment was made from. Example: `improve-about-page`. | both |\n| `VERCEL_GIT_COMMIT_SHA` | The GitHub [SHA](https://help.github.com/articles/github-glossary/#commit) of the commit the deployment was triggered by. Example: `fa1eade47b73733d6312d5abfad33ce9e4068081`. | both |\n| `VERCEL_GIT_COMMIT_MESSAGE` | The message attached to the GitHub commit the deployment was triggered by. Example: `Update about page`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_LOGIN` | The GitHub username belonging to the author of the commit that the project was deployed by. Example: `johndoe`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_NAME` | The GitHub name belonging to the author of the commit that the project was deployed by. Example: `John Doe`. | both |\n| `VERCEL_GIT_PULL_REQUEST_ID` | The GitHub pull request id the deployment was triggered by. If a deployment is created on a branch before a pull request is made, this value will be an empty string. Example: `23`. | both |\n\nWe require some permissions through our Vercel for GitHub integration. Below are listed the permissions required and a description for what they are used for.\n\nRepository permissions allow us to interact with repositories belonging to or associated with (if permitted) the connected account.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Administration` | Y   | Y   | Allows us to create repositories on the user's behalf. |\n| `Checks` | Y   | Y   | Allows us to add checks against source code on push. |\n| `Contents` | Y   | Y   | Allows us to fetch and write source code for new project templates for the connected user or organization. |\n| `Deployments` | Y   | Y   | Allows us to synchronize deployment status between GitHub and the Vercel infrastructure. |\n| `Pull Requests` | Y   | Y   | Allows us create deployments for each Pull Request (PR) and comment on those PR's with status updates. |\n| `Issues` | Y   | Y   | Allows us to interact with Pull Requests as with the `Pull Requests` permissions due to GitHub requiring both for access. |\n| `Metadata` | Y   | N   | Allows us to read basic repository metadata to provide a detailed dashboard. |\n| `Web Hooks` | Y   | Y   | Allows us to react to various GitHub events. |\n| `Commit Statuses` | Y   | Y   | Allows us to synchronize commit status between GitHub and Vercel. |\n\nOrganization permissions allow us to offer an enhanced experience through information about the connected organization.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Members` | Y   | N   | Allows us to offer a better team onboarding experience. |\n\nUser permissions allow us to offer an enhanced experience through information about the connected user.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Email addresses` | Y   | N   | Allows us to associate an email with a GitHub account. |\n\nWe use the permissions above in order to provide you with the best possible deployment experience. If you have any questions or concerns about any of the permission scopes, please [contact Vercel Support](https://vercel.com/help#issues).\n\nTo sign up on Vercel with a different GitHub account, sign out of your current GitHub account.\n\nThen, restart the Vercel [signup process](https://vercel.com/signup).\n\nWhen importing or connecting a GitHub repository, we require that you have **Collaborator** access to the corresponding repository, so that we can configure a webhook and automatically deploy pushed commits.\n\nIf a repository is missing when you try to import or connect it, make sure that you have **Collaborator** access configured for the repository. For an organization or a team, this [page](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/viewing-people-with-access-to-your-repository) explains how to view the permissions of the members. For personal GitHub accounts, this [page](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories) explains how to manage access.\n\nBy default, comments from the Vercel GitHub bot will appear on your pull requests and commits. You can silence these comments in your project's settings:\n\n1.  From the Vercel [dashboard](https://vercel.com/dashboard), select your project\n2.  From the Settings tab, select Git\n3.  Under Connected Git Repository, toggle the switches to your preference\n\nIf you had previously used the, now deprecated, [`github.silent`](https://vercel.com/docs/projects/project-configuration/git-configuration#github.silent) property in your project configuration, we'll automatically adjust the setting for you.\n\nIt is currently not possible to prevent comments for specific branches.\n\nYou can use GitHub Actions to build and deploy your Vercel Application. This approach is necessary to enable Vercel with GitHub Enterprise Server (GHES) with Vercel, as GHES cannot use Vercel’s built-in Git integration.\n\n1.  Create a GitHub Action to build your project and deploy it to Vercel. Make sure to install the Vercel CLI (`npm install --global vercel@latest`) and pull your environment variables `vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}`\n2.  Use `vercel build` to build your project inside GitHub Actions, without exposing your source code to Vercel\n3.  Then use `vercel deploy --prebuilt` to skip the build step on Vercel and upload the previously generated `.vercel/output` folder from your GitHub Action to Vercel\n\nYou'll need to make GitHub Actions for preview (non-`main` pushes) and production (`main` pushes) deployments. [Learn more about how to configure GitHub Actions and Vercel](https://vercel.com/guides/how-can-i-use-github-actions-with-vercel) for custom CI/CD workflows.",
    "title": "Deploying GitHub Projects with Vercel",
    "description": "​Vercel for GitHub automatically deploys your GitHub projects with Vercel, providing Preview Deployment URLs, and automatic Custom Domain updates.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/git/vercel-for-bitbucket",
    "markdown": "# Deploying Bitbucket Projects with Vercel\n\n​Vercel for Bitbucket automatically deploys your Bitbucket projects with [Vercel](https://vercel.com/), providing [Preview Deployment URLs](https://vercel.com/docs/deployments/preview-deployments#preview-urls), and automatic [Custom Domain](https://vercel.com/docs/projects/domains/add-a-domain) updates.\n\nThe [Deploying a Git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository) guide outlines how to create a new Vercel Project from a Bitbucket repository, and enable automatic deployments on every branch push.\n\nIf you'd like to connect your Vercel Project to a different Bitbucket repository or disconnect it, you can do so from the [Git section](https://vercel.com/docs/projects/overview#git) in the Project Settings.\n\nVercel for Bitbucket will deploy each push by default. This includes pushes and pull requests made to branches. This allows those working within the project to preview the changes made before they are pushed to production.\n\nWith each new push, if Vercel is already building a previous commit on the same branch, the current build will complete and any commit pushed during this time will be queued. Once the first build completes, the most recent commit will begin deployment and the other queued builds will be cancelled. This ensures that you always have the latest changes deployed as quickly as possible.\n\nIf [Custom Domains](https://vercel.com/docs/projects/custom-domains) are set from a project domains dashboard, pushes and merges to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) (commonly \"main\") will be made live to those domains with the latest deployment made with a push.\n\nIf you decide to revert a commit that has already been deployed to production, the previous [Production Deployment](https://vercel.com/docs/deployments/environments#production) from a commit will automatically be made available at the [Custom Domain](https://vercel.com/docs/projects/custom-domains) instantly; providing you with instant rollbacks.\n\nThe latest push to any [pull request](https://www.atlassian.com/git/tutorials/making-a-pull-request) will automatically be made available at a unique preview URL based on the project name, branch, and team or username. These URLs will be given through a comment on each pull request.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Fbitbucket-comment.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA preview URL created from a pull request.\n\nYou may want to use different workflows and APIs based on Git information. To support this, the following [System Environment Variables](https://vercel.com/docs/projects/environment-variables#system-environment-variables) are exposed to your Deployments:\n\n  \n\n| Name | Description | Available at [Build](https://vercel.com/docs/deployments/configure-a-build) and/or [Run](https://vercel.com/docs/functions) Time |\n| --- | --- | --- |\n| `VERCEL_GIT_PROVIDER` | The Git Provider the deployment is triggered from. In the case of Bitbucket, the value is always `bitbucket`. | both |\n| `VERCEL_GIT_REPO_SLUG` | The slug of the Bitbucket repository that was deployed. Example: `my-site`. | both |\n| `VERCEL_GIT_REPO_OWNER` | The Bitbucket user or team that the project belongs to. Example: `acme`. | both |\n| `VERCEL_GIT_REPO_ID` | The ID of the Bitbucket repository the deployment is triggered from. Example: `{9e072df2-521e-4409-a01c-c984569fea20}`. | both |\n| `VERCEL_GIT_COMMIT_REF` | The Bitbucket branch that the deployment was triggered by. Example: `improve-about-page`. | both |\n| `VERCEL_GIT_COMMIT_SHA` | The Bitbucket sha of the commit the deployment was triggered by. Example: `fa1eade47b73733d6312d5abfad33ce9e4068081`. | both |\n| `VERCEL_GIT_COMMIT_MESSAGE` | The message accompanying the Bitbucket commit that was deployed. Example: `Add John Doe to about page`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_LOGIN` | The name of the commit author on Bitbucket. Example: `John Doe`. | both |\n| `VERCEL_GIT_COMMIT_AUTHOR_NAME` | Bitbucket profile URL of the commit author. Example: `https://bitbucket.org/%7B45585b19-b616-401e-89d3-1a47fddb7033%7D/`. | both |\n| `VERCEL_GIT_PULL_REQUEST_ID` | The Bitbucket pull request id the deployment was triggered by. If a deployment is created on a branch before a pull request is made, this value will be an empty string. Example: `23`. | both |\n\nWe require some permissions through our Vercel for Bitbucket integration. Below are listed the permissions required and a description for what they are used for.\n\nRepository permissions allow us to interact with repositories belonging to or associated with (if permitted) the connected account.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Web Hooks` | Y   | N   | Allows us to react to various Bitbucket events. |\n| `Issues` | Y   | Y   | Allows us to interact with Pull Requests as with the `Pull Requests` permissions due to Bitbucket requiring both for access. |\n| `Repository` | N   | N   | Allows us to access admin features of a Bitbucket repository. |\n| `Pull requests` | Y   | Y   | Allows us create deployments for each Pull Request (PR) and comment on those PR's with status updates. |\n\nOrganization permissions allow us to offer an enhanced experience through information about the connected organization.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Team` | Y   | N   | Allows us to offer a better team onboarding experience. |\n\nUser permissions allow us to offer an enhanced experience through information about the connected user.\n\n| Permission | Read | Write | Description |\n| --- | --- | --- | --- |\n| `Account` | Y   | N   | Allows us to associate an email with a Bitbucket account. |\n\nWe use the permissions above in order to provide you with the best possible deployment experience. If you have any questions or concerns about any of the permission scopes, please [contact Vercel Support](https://vercel.com/help#issues).\n\nTo sign up on Vercel with a different Bitbucket account, sign out of your current Bitbucket account. Then, restart the Vercel [signup process](https://vercel.com/signup).\n\nWhen importing or connecting a Bitbucket repository, we require that you have **Admin** access to the corresponding repository, so that we can configure a webhook and automatically deploy pushed commits.\n\nIf a repository is missing when you try to import or connect it, make sure that you have [Admin access configured for the repository](https://support.atlassian.com/bitbucket-cloud/docs/grant-repository-access-to-users-and-groups/).\n\nBy default, comments from the Vercel bot will appear on your pull requests and commits. You can silence these comments in your project's settings:\n\n1.  From the Vercel [dashboard](https://vercel.com/dashboard), select your project\n2.  From the Settings tab, select Git\n3.  Under Connected Git Repository, toggle the switches to your preference\n\nIt is currently not possible to prevent comments for specific branches.\n\nYou can use Bitbucket Pipelines to build and deploy your Vercel Application.\n\n`vercel build` allows you to build your project inside Bitbucket Pipelines, without exposing your source code to Vercel. Then, `vercel deploy --prebuilt` skips the build step on Vercel and uploads the previously generated `.vercel/output` folder to Vercel from the Bitbucket Pipeline.\n\n[Learn more about how to configure Bitbucket Pipelines and Vercel](https://vercel.com/guides/how-can-i-use-bitbucket-pipelines-with-vercel) for custom CI/CD workflows.",
    "title": "Deploying Bitbucket Projects with Vercel",
    "description": "​Vercel for Bitbucket automatically deploys your Bitbucket projects with Vercel, providing Preview Deployment URLs, and automatic Custom Domain updates.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/configure-a-build",
    "markdown": "# Configuring a Build\n\nWhen you make a [deployment](https://vercel.com/docs/deployments/overview), Vercel builds your project. During this time, Vercel performs a \"shallow clone\" on your Git repository using the command `git clone --depth=10 (...)` and fetches ten levels of git commit history. This means that only the latest ten commits are pulled and not the entire repository history.\n\nVercel automatically configures the build settings for many front-end frameworks, but you can also customize the build according to your requirements.\n\nTo configure your Vercel build with customized settings, choose a project from the [dashboard](https://vercel.com/dashboard) and go to its Settings tab.\n\nThe General section of the Settings tab offers the following options to customize your build settings:\n\n*   Build & Development Settings\n*   Root Directory\n\nIf you'd like to override the settings or specify a different framework, you can do so from the Build & Development Settings section.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Fbuild-dev-settings.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Fbuild-dev-settings-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nBuild and Development settings.\n\nYou have a wide range of frameworks to choose from, including, Next.js, Svelte, and Nuxt.js. In several use cases, Vercel automatically detects your project's framework and sets the best settings for you.\n\nInside the Framework Preset settings, use the drop-down menu to select the framework of your choice. This selection will be used for all deployments within your Project. The available frameworks are listed below:\n\nHowever, if no framework is detected, \"Other\" will be selected. In this case, the Override toggle for the Build Command will be enabled by default so that you can enter the build command manually. The remaining deployment process is that for default frameworks.\n\nIf you would like to override Framework Preset for a specific deployment, add [`framework`](https://vercel.com/docs/projects/project-configuration#framework) to your `vercel.json` configuration.\n\nVercel automatically configures the Build Command based on the framework. Depending on the framework, the Build Command can refer to the project’s `package.json` file.\n\nFor example, if [Next.js](https://nextjs.org/) is your framework:\n\n*   Vercel checks for the `build` command in `scripts` and uses this to build the project\n*   If not, the `next build` will be triggered as the default Build Command\n\nIf you'd like to override the Build Command for all deployments in your Project, you can turn on the Override toggle and specify the custom command.\n\nIf you would like to override the Build Command for a specific deployment, add [`buildCommand`](https://vercel.com/docs/projects/project-configuration#buildcommand) to your `vercel.json` configuration.\n\nIf you update the **Override** setting, it will be applied on your next deployment.\n\nAfter building a project, most frameworks output the resulting build in a directory. Only the contents of this Output Directory will be served statically by Vercel.\n\nIf Vercel detects a framework, the output directory will automatically be configured.\n\nIf you update the **Override** setting, it will be applied on your next deployment.\n\nFor projects that [do not require building](https://vercel.com/docs/deployments/configure-a-build#skip-build-step), you might want to serve the files in the root directory. In this case, do the following:\n\n*   Choose \"Other\" as the Framework Preset. This sets the output directory as `public` if it exists or `.` (root directory of the project) otherwise\n*   If your project doesn’t have a `public` directory, it will serve the files from the root directory\n*   Alternatively, you can turn on the Override toggle and leave the field empty (in which case, the build step will be skipped)\n\nIf you would like to override the Output Directory for a specific deployment, add [`outputDirectory`](https://vercel.com/docs/projects/project-configuration#outputdirectory) to your `vercel.json` configuration.\n\nVercel auto-detects the install command during the build step. It installs dependencies from `package.json`, including `devDependencies` ([which can be excluded](https://vercel.com/docs/deployments/troubleshoot-a-build#excluding-development-dependencies)). The install path is set by the [root directory](https://vercel.com/docs/deployments/configure-a-build#root-directory).\n\nThe install command can be managed in two ways: through a project override, or per-deployment. See [manually specifying a package manager](https://vercel.com/deployments/builds/package-managers#manually-specifying-a-package-manager) for more details.\n\nTo learn what package managers are supported on Vercel, see the [package manager support](https://vercel.com/docs/deployments/builds/package-managers) documentation.\n\nCorepack is considered [experimental](https://nodejs.org/docs/latest-v16.x/api/documentation.html#stability-index) and therefore, breaking changes or removal may occur in any future release of Node.js.\n\n[Corepack](https://nodejs.org/docs/latest-v16.x/api/corepack.html) is an experimental tool that allows a Node.js project to pin a specific version of a package manager.\n\nYou can enable Corepack by adding an [environment variable](https://vercel.com/docs/projects/environment-variables) with name `ENABLE_EXPERIMENTAL_COREPACK` and value `1` to your Project.\n\nThen, set the [`packageManager`](https://nodejs.org/docs/latest-v16.x/api/packages.html#packagemanager) property in the `package.json` file in the root of your repository. For example:\n\n```\n{\n  \"packageManager\": \"pnpm@7.5.1\"\n}\n```\n\nA `package.json` file with [pnpm](https://pnpm.io/) version 7.5.1\n\nThe Install Command defined in the Project Settings will be used for front-end frameworks that support Serverless Functions for APIs.\n\nIf you're using [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) defined in the natively supported `api` directory, a different Install Command will be used depending on the language of the Serverless Function. You cannot customize this Install Command.\n\nThis setting is relevant only if you’re using `vercel dev` locally to develop your project. Use `vercel dev` only if you need to use Vercel platform features like [Serverless Functions](https://vercel.com/docs/functions/serverless-functions). Otherwise, it's recommended to use the development command your framework provides (such as `next dev` for Next.js).\n\nThe Development Command settings allow you to customize the behavior of `vercel dev`. If Vercel detects a framework, the development command will automatically be configured.\n\nIf you’d like to use a custom command for `vercel dev`, you can turn on the Override toggle. Please note the following:\n\n*   If you specify a custom command, your command must pass your framework's `$PORT` variable (which contains the port number). For example, in [Next.js](https://nextjs.org/) you should use: `next dev --port $PORT`\n*   If the development command is not specified, `vercel dev` will fail. If you've selected \"Other\" as the framework preset, the default development command will be empty\n*   You must create a deployment and have your local project linked to the project on Vercel (using `vercel`). Otherwise, `vercel dev` will not work correctly\n\nIf you would like to override the Development Command, add [`devCommand`](https://vercel.com/docs/projects/project-configuration#devcommand) to your `vercel.json` configuration.\n\nSome static projects do not require building. For example, a website with only HTML/CSS/JS source files can be served as-is.\n\nIn such cases, you should:\n\n*   Specify \"Other\" as the framework preset\n*   Enable the Override option for the Build Command\n*   Leave the Build Command empty\n\nThis prevents running the build, and your content is served directly.\n\nIn some projects, the top-level directory of the repository may not be the root directory of the app you’d like to build. For example, your repository might have a front-end directory containing a stand-alone [Next.js](https://nextjs.org/) app.\n\nFor such cases, you can specify the project Root Directory. If you do so, please note the following:\n\n*   Your app will not be able to access files outside of that directory. You also cannot use `..` to move up a level\n*   This setting also applies to [Vercel CLI](https://vercel.com/docs/cli). Instead of running `vercel <directory-name>` to deploy, specify `<directory-name>` here so you can just run `vercel`\n\nIf you update the root directory setting, it will be applied on your next deployment.",
    "title": "Configuring a Build",
    "description": "Vercel automatically configures the build settings for many front-end frameworks, but you can also customize the build according to your requirements.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/managing-deployments",
    "markdown": "# Managing Deployments\n\nYou can manage all current and previous deployments regardless of environment, status, or branch from the [dashboard](https://vercel.com/dashboard). To manage a deployment from the dashboard:\n\n1.  Ensure your team is selected from the scope selector\n2.  Select your project\n3.  From the top navigation, select the Deployments tab\n4.  You can then filter, redeploy, or manually promote your deployment to production\n\n[Vercel CLI](https://vercel.com/cli) and [Vercel REST API](https://vercel.com/docs/rest-api) also provide alternative ways to manage your deployments. You can find a full list of the commands available in the [Vercel CLI Reference](https://vercel.com/docs/cli/deploying-from-cli), along with the deployments section of the [Vercel REST API Reference](https://vercel.com/docs/rest-api/endpoints#deployments).\n\nYou can filter your deployments based on branch, status, and deployment environment:\n\n1.  Select your project from the [dashboard](https://vercel.com/dashboard)\n2.  From the top navigation, select the Deployments tab\n3.  Use the dropdowns to search by Branch, Date Range, All Environments, or Status\n    \n    ![The Deployments tab with the status filter dropdown open.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Ffiltering-deployments%2Ffilter-status-light.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Deployments tab with the status filter dropdown open.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Ffiltering-deployments%2Ffilter-status-dark.png&w=1200&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The Deployments tab with the status filter dropdown open.\n    \n\nIf you no longer need a specific deployment of your app, you can delete it from your project with the following steps:\n\n1.  From the Deployments tab, select the name of the deployment you want to delete\n2.  Select the Inspect Deployment option, which directs you to the details of that deployment\n3.  From here, you can Delete the deployment\n\nDeleting a deployment prevents you from using instant rollback on it and might break the links used in integrations, such as the ones in the pull requests of your Git provider.\n\nVercel automatically redeploys your application when you make any commits. However, there can be situations such as bad cached data where you need to Redeploy your application to fix issues manually. To do so:\n\n1.  Ensure your team is selected from the scope selector\n2.  Select your project\n3.  From the top navigation, select the Deployments tab\n4.  Locate the deployment you wish to deploy. You may need to use the [filter](https://vercel.com/docs/deployments/managing-deployments#filter-deployment) options\n5.  Click the ellipsis icon () and select Redeploy\n6.  In the Redeploy to Production window, decide if you want to use the existing [Build Cache](https://vercel.com/docs/deployments/troubleshoot-a-build#understanding-build-cache), and then select Redeploy\n\n![Option to confirm redeploy to production.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fredeploy-model-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Option to confirm redeploy to production.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fredeploy-model-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nOption to confirm redeploy to production.\n\nOther than your custom needs to redeploy, it's always recommended to redeploy your application to Vercel for the following use cases:\n\n*   Enabling the [Analytics](https://vercel.com/docs/analytics/quickstart)\n*   Changing the [Environment Variables](https://vercel.com/docs/projects/environment-variables)\n*   [Outage Resiliency](https://vercel.com/docs/edge-network/regions#outage-resiliency)\n*   Making changes to Build & Development Settings\n*   Redirect or Rewrites from a subdomain to a subpath\n\nBy default, when you merge to or make commits to your production branch (often `main`), Vercel will automatically promote the changes to Production. However, there are a number of ways to manually change which deployment is served to people who visit your production domain:\n\n*   [Instant rollback](#instant-rollback): You can use this as a way to instantly revert to an earlier [deployment](https://vercel.com/docs/deployments/instant-rollback#eligible-deployments) that has served production traffic. It works by assigning your domains to an existing deployment, rather than doing a complete rebuild\n*   [Promote preview to production](#promote-a-deployment-from-preview-to-production): You can use this as a way to promote a preview deployment to production through a complete rebuild\n*   [Promote a staged production build](#staging-and-promoting-a-production-deployment): You can use this option to promote a production deployment which has never served production traffic. To use this option, you must turn off the auto-assignment of domains. This option won't trigger a rebuild\n\nUse this when you want to replace the current production deployment with another deployment that has already been serving as current in the past. Instant Rollback is a faster process since it involves assigning domains to an existing deployment rather than a complete rebuild and is ideal to quickly recover from an incident in production to roll back. However, because it does not do a complete rebuild, items such as environment variables will not be rebuilt.\n\nFor more information on how and when to use it, see the [Instant Rollback docs](https://vercel.com/docs/deployments/instant-rollback).\n\nThere may be times when you need to promote an existing preview deployment to production, such as when you need to temporarily use a branch that isn't set as the [production branch](https://vercel.com/docs/deployments/git#production-branch).\n\nTo promote an existing preview deployment to production on Vercel, do the following:\n\n1.  Go to your project's Deployments tab. This tab lists all the previously deployed builds\n2.  Click the ellipsis (), and from the context menu select Promote to Production\n3.  The popup dialog informs you of which domain(s) will be linked to the build once promoted. To confirm, select Promote to Production\n\n![Option to confirm promote to production.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704367830%2Ffront%2Fdocs%2Fdeployment%2Fpromote-to-prod-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Option to confirm promote to production.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704367830%2Ffront%2Fdocs%2Fdeployment%2Fpromote-to-prod-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nOption to confirm promote to production.\n\nIf you have different [Environment Variables](https://vercel.com/docs/projects/environment-variables#environments) set for preview and production deployments then the variables used will change from preview to those you have linked to the production environment. You cannot use your preview environment variables in a production deployment\n\nIn some cases you may want to create a production-like deployment to use as a staging environment before promoting it to production.\n\nIn this scenario, you can turn off the auto-assignment of domains for your production build, as described below. Turning off the auto-assignment of domains means the deployment won't automatically be served to your production traffic, but also means you must manually promote it to production.\n\nFor steps on using this workflow in the CLI, see [Deploying a staged production build](https://vercel.com/docs/cli/deploying-from-cli#deploying-a-staged-production-build).\n\n1.  On your [dashboard](https://vercel.com/dashboard), select your project\n2.  Select the Settings tab and go to your Git settings\n3.  In the Production Branch section, disable the Auto-assign Custom Production Domains toggle\n4.  When you are ready to promote this staged deployment to production, select the ellipses (…) next to the deployment\n5.  From the menu, select the Promote option\n6.  From the Promote dialog, confirm the deployment, and select the Promote button:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704196273%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpromote-to-prod-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704196273%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpromote-to-prod-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nVercel will instantly promote the deployment; it doesn't require a rebuild. Once promoted, the deployment is marked as [Current](#production-deployment-state).\n\nYour production deployments could be in one of three states:\n\n*   Staged – This means that a commit has been pushed to `main`, but a domain has not been auto-assigned to the deployment. This type of a deployment can be promoted to Current\n*   Promoted – This production deployment has been [promoted](#staging-and-promoting-a-production-deployment) from staging. If a deployment has already been promoted in the past, you can't promote it again. If you want to use a previously promoted deployment, you must do a rollback to it\n*   Current – This is the production deployment that is aliased to your domain and the one that is currently being served to your users",
    "title": "Managing Deployments",
    "description": "Learn how to manage your current and previously deployed projects to Vercel through the dashboard. You can redeploy at any time and even delete a deployment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/serverless-functions/runtimes/node-js",
    "markdown": "# Using the Node.js Runtime with Serverless Functions\n\nThe Node.js runtime, by default, builds and serves Serverless Functions within the `/api` directory of a project, providing the files have a file extension of `.js`, `.mjs`, or `.ts`.\n\nTo declare a Node.js function you must either use the [Web signature](https://vercel.com/docs/functions/functions-api-reference#function-signature) or export a default function handler, for example:\n\n```\nexport default function handler(request, response) {\n  const { name = 'World' } = request.query;\n  return response.send(`Hello ${name}!`);\n}\n```\n\nIf you need more advanced behavior, such as a custom build step or private npm modules, see the [Advanced Node.js Usage section](#advanced-node.js-usage).\n\nServerless Functions using the Node.js runtime support [all Node.js APIs](https://nodejs.org/docs/latest/api/), including standard Web APIs such as the [Request and Response Objects](https://vercel.com/docs/functions/runtimes/node-js#node.js-request-and-response-objects).\n\nTo override the [default](#default-and-available-versions) and set a different Node.js version for all new projects:\n\n1.  From your dashboard, select your project\n2.  Select the Settings tab\n3.  On the General page, navigate to the Node.js Version section\n\n![First, select your Node.js version in Project Settings.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706610426%2Ffront%2Fdocs%2Ffunctions%2Fnode-version-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![First, select your Node.js version in Project Settings.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706610426%2Ffront%2Fdocs%2Ffunctions%2Fnode-version-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFirst, select your Node.js version in Project Settings.\n\nBy default, a new project uses the latest Node.js LTS version available on Vercel.\n\nCurrent available versions are:\n\n*   20.x (default)\n*   18.x (retiring early 2025)\n*   16.x (deprecated, retiring January 31st, 2025)\n\nOnly major versions are available. Vercel automatically rolls out minor and patch updates when needed such as for a security issue fix.\n\nYou can define the major Node.js version in the `engines#node` section of the `package.json` to override the one you have selected in the [Project Settings](#setting-the-node.js-version-in-project-settings):\n\n```\n{\n  \"engines\": {\n    \"node\": \"20.x\"\n  }\n}\n```\n\nFor instance, when you set the Node.js version to 18.x in the Project Settings and you specify a valid [semver range](https://semver.org/) for Node.js 20 (e.g. `20.x`) in `package.json`, your project will be deployed with the latest 20.x version of Node.js.\n\nThe following table lists some example version ranges and the available Node.js version they map to:\n\n| Version in `package.json` | Version deployed |\n| --- | --- |\n| `20.x`  <br>`^20.0.0`  <br>`>=20.0.0`  <br>`>=18.0.0`  <br>`>=16.0.0` | latest 20.x version |\n| `18.x`  <br>`^18.0.0` | latest 18.x version |\n| `16.x`  <br>`^16.0.0` | latest 16.x version |\n\nTo verify the Node.js version your Deployment is using, either run `node -v` in the Build Command or log `process.version`.\n\nFor dependencies listed in a `package.json` file at the root of a project, the following behavior is used:\n\n*   If `pnpm-lock.yaml` is present, `pnpm install` is executed\n    *   If `\"lockfileVersion\": 5.4` is present in the lock file, pnpm 7 is used\n    *   Otherwise, pnpm 6 is used\n*   If `package-lock.json` is present, `npm install` is executed\n    *   If `\"lockfileVersion\": 2` is present in the lock file, npm 8 is used\n    *   Otherwise npm 6 is used\n*   If `bun.lockb` is present, the Install Command is `bun install`\n    *   Bun 1 is used\n*   Otherwise, `yarn install` is executed\n\nIf you need to select a specific version of a package manager, see [corepack](https://vercel.com/docs/deployments/configure-a-build#corepack).\n\nThe Node.js runtime supports files ending with `.ts` inside of the `/api` directory as TypeScript files to compile and serve when deploying.\n\nAn example TypeScript file that exports a default Node.js function and takes in [the standard Node.js Request and Response](#node.js-request-and-response-objects) objects is as follows:\n\n```\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\n \nexport default function (request: VercelRequest, response: VercelResponse) {\n  const { name = 'World' } = request.query;\n  response.send(`Hello ${name}!`);\n}\n```\n\nAn example serverless Node.js function written in TypeScript, using types from the `@vercel/node` module for the helper methods.\n\nThe `VercelRequest` and `VercelResponse` imports in the above example are types that we provide for [the Request and Response objects](#node.js-request-and-response-objects), including the helper methods with Vercel. These types can be installed from npm with the following command:\n\nnpm install @vercel/node --save-dev\n\nInstalling `@vercel/node` for types when using Node.js on Vercel.\n\nYou can also use a `tsconfig.json` file at the root of your project to configure the TypeScript compiler. Most options are supported aside from [\"Path Mappings\"](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping) and [\"Project References\"](https://www.typescriptlang.org/docs/handbook/project-references.html).\n\nEach request to a Node.js Serverless Function gives access to Request and Response objects. These objects are the [standard](https://nodejs.org/api/http.html#http_event_request) HTTP [Request](https://nodejs.org/api/http.html#http_class_http_incomingmessage) and [Response](https://nodejs.org/api/http.html#http_class_http_serverresponse) objects from Node.js.\n\nVercel additionally provides helper methods inside of the Request and Response objects passed to Node.js Serverless Functions. These methods are:\n\n| method | description | object |\n| --- | --- | --- |\n| `request.query` | An object containing the request's [query string](https://en.wikipedia.org/wiki/Query_string), or `{}` if the request does not have a query string. | Request |\n| `request.cookies` | An object containing the cookies sent by the request, or `{}` if the request contains no cookies. | Request |\n| [`request.body`](#node.js-request-and-response-objects) | An object containing the body sent by the request, or `null` if no body is sent. | Request |\n| `response.status(code)` | A function to set the status code sent with the response where `code` must be a valid [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Returns `response` for chaining. | Response |\n| `response.send(body)` | A function to set the content of the response where `body` can be a `string`, an `object` or a `Buffer`. | Response |\n| `response.json(obj)` | A function to send a JSON response where `obj` is the JSON object to send. | Response |\n| `response.redirect(url)` | A function to redirect to the URL derived from the specified path with status code \"307 Temporary Redirect\". | Response |\n| `response.redirect(statusCode, url)` | A function to redirect to the URL derived from the specified path, with specified [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). | Response |\n\nThe following Node.js Serverless Function example showcases the use of `request.query`, `request.cookies` and `request.body` helpers:\n\n```\nmodule.exports = (request, response) => {\n  let who = 'anonymous';\n \n  if (request.body && request.body.who) {\n    who = request.body.who;\n  } else if (request.query.who) {\n    who = request.query.who;\n  } else if (request.cookies.who) {\n    who = request.cookies.who;\n  }\n \n  response.status(200).send(`Hello ${who}!`);\n};\n```\n\nExample Node.js Serverless Function using the `request.query`, `request.cookies`, and `request.body` helpers. It returns greetings for the user specified using `request.send()`.\n\nIf needed, you can opt-out of Vercel providing `helpers` using [advanced configuration](#disabling-helpers-for-node.js) .\n\nWe populate the `request.body` property with a parsed version of the content sent with the request when possible.\n\nWe follow a set of rules on the `Content-type` header sent by the request to do so:\n\n| `Content-Type` header | Value of `request.body` |\n| --- | --- |\n| No header | `undefined` |\n| `application/json` | An object representing the parsed JSON sent by the request. |\n| `application/x-www-form-urlencoded` | An object representing the parsed data sent by with the request. |\n| `text/plain` | A string containing the text sent by the request. |\n| `application/octet-stream` | A [Buffer](https://nodejs.org/api/buffer.html) containing the data sent by the request. |\n\nWith the `request.body` helper, you can build applications without extra dependencies or having to parse the content of the request manually.\n\nThe `request.body` helper is set using a [JavaScript getter](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/get) . In turn, it is only computed when it is accessed.\n\nWhen the request body contains malformed JSON, accessing `request.body` will throw an error. You can catch that error by wrapping `request.body` with [`try...catch`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/try...catch):\n\n```\ntry {\n  request.body;\n} catch (error) {\n  return response.status(400).json({ error: 'My custom 400 error' });\n}\n```\n\nCatching the error thrown by `request.body` with [`try...catch`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/try...catch) .\n\nIn order to use this runtime, no configuration is needed. You only need to create a file inside the `api` directory.\n\nThe entry point for `src` must be a glob matching `.js`, `.mjs`, or `.ts` files that export a default function.\n\nAdd an [Environment Variable](https://vercel.com/docs/projects/environment-variables) with name `NODEJS_HELPERS` and value `0` to disable [helpers](#node.js-helpers).\n\nTo install private npm modules, define `NPM_TOKEN` as an [Environment Variable](https://vercel.com/docs/projects/environment-variables) in your Project.\n\nAlternatively, define `NPM_RC` as an [Environment Variable](https://vercel.com/docs/projects/environment-variables) with the contents of `~/.npmrc`.\n\nIn some cases, you may wish to include build outputs inside your Serverless Function. You can run a build task by adding a `vercel-build` script within your `package.json` file, in the same directory as your Serverless Function or any parent directory. The `package.json` nearest to the Serverless Function will be preferred and used for both Installing and Building.\n\nFor example:\n\n```\n{\n  \"scripts\": {\n    \"vercel-build\": \"node ./build.js\"\n  }\n}\n```\n\nAn example `package.json` file with a `vercel-build` script to execute in the build step.\n\nAlong with build script named `build.js`:\n\n```\nconst fs = require('fs');\nfs.writeFile('built-time.js', `module.exports = '${new Date()}'`, (err) => {\n  if (err) throw err;\n  console.log('Build time file created successfully!');\n});\n```\n\nAn example Node.js file, executed by the above `package.json` build script.\n\nAnd a `.js` file for the built Serverless Functions, `index.js` inside the `/api` directory:\n\n```\nconst BuiltTime = require('./built-time');\nmodule.exports = (request, response) => {\n  response.setHeader('content-type', 'text/plain');\n  response.send(`\n    This Serverless Function was built at ${new Date(BuiltTime)}.\n    The current time is ${new Date()}\n  `);\n};\n```\n\nAn example Node.js Serverless Function, using information from the created file from the build script.\n\nExpress.js is a popular framework used with Node.js. For information on how to use Express with Vercel, see the guide: [Using Express.js with Vercel](https://vercel.com/guides/using-express-with-vercel).",
    "title": "Using the Node.js Runtime with Serverless Functions",
    "description": "Learn how to use the Node.js runtime to compile Node.js Serverless Functions on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/monorepos/turborepo",
    "markdown": "# Deploying Turborepo to Vercel\n\nTurborepo is a high-performance build system for JavaScript and TypeScript codebases with:\n\n*   Fast incremental builds\n*   Content-aware hashing, meaning only the files you changed will be rebuilt\n*   [Remote Caching](https://vercel.com/docs/monorepos/remote-caching) for sharing build caches with your team and CI/CD pipelines\n\nAnd much more! Read the \"[Why Turborepo](https://turbo.build/repo/docs#why-turborepo)\" docs to learn about the benefits of using Turborepo to manage your monorepos. To get started with Turborepo in your monorepo, follow Turborepo's [Quickstart](https://turbo.build/repo/docs) docs.\n\nFollow the steps below to deploy your Turborepo to Vercel:\n\n1.  It's important to ensure you are managing environment variables (and files outside of packages and apps) correctly.\n    \n    If you are deploying the starter Turborepo project, there are no environment variables to worry about.\n    \n    If your project has environment variables, you'll need to create a list of them in your `turbo.json` so Turborepo knows to use different caches for different environments. For example, you can accidentally ship your staging environment to production if you don't tell Turborepo about your environment variables.\n    \n    Frameworks like Next.js inline build-time environment variables (e.g. `NEXT_PUBLIC_XXX`) in bundled outputs as strings. Turborepo will [automatically try to infer these based on the framework](https://turbo.build/repo/docs/core-concepts/caching#automatic-environment-variable-inclusion), but if your build inlines other environment variables or they otherwise affect the build output, you must [declare them in your Turborepo configuration](https://turbo.build/repo/docs/core-concepts/caching#altering-caching-based-on-environment-variables).\n    \n    You can control Turborepo's cache behavior (hashing) based on the values of both environment variables and the contents of files in a few ways. Read the [Caching docs on Turborepo](https://turbo.build/repo/docs/core-concepts/caching) for more information.\n    \n    `env` and `globalEnv` key support is available in Turborepo version 1.5 or later. Please update your Turborepo version if you're using an older version.\n    \n    The following example shows a Turborepo configuration, that handles these suggestions:\n    \n    ```\n    {\n      \"$schema\": \"https://turbo.build/schema.json\",\n      \"pipeline\": {\n        \"build\": {\n          \"dependsOn\": [\"^build\"],\n          \"env\": [\n            // env vars will impact hashes of all \"build\" tasks\n            \"SOME_ENV_VAR\"\n          ],\n          \"outputs\": [\"dist/**\"]\n        },\n        \"web#build\": {\n          // override settings for the \"build\" task for the \"web\" app\n          \"dependsOn\": [\"^build\"],\n          \"env\": [\"SOME_OTHER_ENV_VAR\"],\n          \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n        }\n      },\n      \"globalEnv\": [\n        \"GITHUB_TOKEN\" // env var that will impact the hashes of all tasks,\n      ],\n      \"globalDependencies\": [\n        \"tsconfig.json\" // file contents will impact the hashes of all tasks,\n      ]\n    }\n    ```\n    \n    In most monorepos, environment variables are usually used in applications rather than in shared packages. To get higher cache hit rates, you should only include environment variables in the app-specific tasks where they are used or inlined.\n    \n    Once you've declared your environment variables, commit and push any changes you've made. When you update or add new inlined build-time environment variables, be sure to declare them in your Turborepo configuration.\n    \n2.  If you haven't already connected your monorepo to Turborepo, you can follow the [quickstart](https://turbo.build/repo/docs) on the Turborepo docs to do so.\n    \n    [Create a new Project](https://vercel.com/new) on the Vercel dashboard and [import](https://vercel.com/docs/getting-started-with-vercel/import) your Turborepo project.\n    \n    ![Configuring Project settings during import, with defaults already set.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Fconfig-project-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Configuring Project settings during import, with defaults already set.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Fconfig-project-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Configuring Project settings during import, with defaults already set.\n    \n    Vercel handles all aspects of configuring your monorepo, including setting [build commands](https://vercel.com/docs/deployments/configure-a-build#build-command), the [Output Directory](https://vercel.com/docs/deployments/configure-a-build#output-directory), the [Root Directory](https://vercel.com/docs/deployments/configure-a-build#root-directory), the correct directory for workspaces, and the [Ignored Build Step](https://vercel.com/docs/projects/overview#ignored-build-step).\n    \n    The table below reflects the values that Vercel will set if you'd like to set them manually in your Dashboard or in the `vercel.json` of your application's directory:\n    \n    | Field | Command |\n    | --- | --- |\n    | Framework Preset | [One of 35+ framework presets](https://vercel.com/docs/frameworks/more-frameworks) |\n    | Build Command | `turbo run build` (requires version >=1.8) or `cd ../.. && turbo run build --filter=web` |\n    | Output Directory | Framework default |\n    | Install Command | Automatically detected by Vercel |\n    | Root Directory | App location in repository (e.g. `apps/web`) |\n    | Ignored Build Step | `npx turbo-ignore --fallback=HEAD^1` |\n    \n\nTurborepo is also available globally when deploying on Vercel, which means that you do not have to add `turbo` as a dependency in your application.\n\nThanks to [automatic workspace scoping](https://turbo.build/blog/turbo-1-8-0#automatic-workspace-scoping) and [globally installed turbo](https://turbo.build/blog/turbo-1-7-0#global-turbo), your [build command](https://vercel.com/docs/deployments/configure-a-build#build-command) can be as straightforward as:\n\nThe appropriate [filter](https://turbo.build/repo/docs/core-concepts/monorepos/filtering) will be automatically inferred based on the configured [root directory](https://vercel.com/docs/deployments/configure-a-build#root-directory).\n\nTo override this behavior and use a specific version of Turborepo, install the desired version of `turbo` in your project. [Learn more](https://turbo.build/blog/turbo-1-7-0#global-turbo)\n\nYou likely don't need to build a preview for every application in your monorepo on every commit. To ensure that only applications that have changed are built, use `npx turbo-ignore --fallback=HEAD^1` in your [Ignored Build Step](https://vercel.com/docs/projects/overview#ignored-build-step).\n\nFor more details on `turbo-ignore`, check out the [documentation](https://github.com/vercel/turbo/blob/main/packages/turbo-ignore/README.md).\n\nYou can optionally choose to connect your Turborepo to the [Vercel Remote Cache](https://vercel.com/docs/monorepos/remote-caching) from your local machine, allowing you to share artifacts and completed computations with your team and CI/CD pipelines.\n\nYou do not need to host your project on Vercel to use Vercel Remote Caching. For more information, see the [Remote Caching](https://vercel.com/docs/monorepos/remote-caching) doc.\n\nYou can also use a custom remote cache. For more information, see the [Turborepo documentation](https://turbo.build/repo/docs/core-concepts/remote-caching#custom-remote-caches).\n\n1.  First, authenticate with the Turborepo CLI from the root of your monorepo:\n    \n    Then, use [`turbo link`](https://turbo.build/repo/docs/reference/command-line-reference#turbo-link) to link your Turborepo to your [remote cache](https://vercel.com/docs/monorepos/remote-caching#link-to-the-remote-cache). This command should be run from the root of your monorepo:\n    \n    Next, `cd` into each project in your Turborepo and run `vercel link` to link each directory within the monorepo to your Vercel Project.\n    \n    As a Team owner, you can also [enable caching within the Vercel Dashboard](https://vercel.com/docs/monorepos/remote-caching#enable-and-disable-remote-caching-for-your-team).\n    \n2.  Your project now has the Remote Cache linked. Run `turbo run build` to see the caching in action. Turborepo caches the filesystem output both locally and remote (cloud). To see the cached artifacts open `node_modules/.cache/turbo`.\n    \n    Now try making a change in a file and running `turbo run build` again. The builds speed will have dramatically improved. This is because Turborepo will only rebuild the changed files.\n    \n    To see information about the [Remote Cache usage](https://vercel.com/docs/limits/usage#artifacts), go to the Artifacts section of the Usage tab.\n    \n\nFor Vercel to deploy your application, the outputs need to be present for your [Framework Preset](https://vercel.com/docs/deployments/configure-a-build#framework-preset) after your application builds. If you're getting an error that the outputs from your build don't exist after a cache hit:\n\n*   Confirm that your outputs match [the expected Output Directory for your Framework Preset](https://vercel.com/docs/monorepos/turborepo#import-your-turborepo-to-vercel). Run `turbo build` locally and check for the directory where you expect to see the outputs from your build\n*   Make sure the application outputs defined in the `outputs` key of your `turbo.json` for your build task are aligned with your Framework Preset. A few examples are below:\n\n```\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"pipeline\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\n        // Next.js\n        \".next/**\", \"!.next/cache/**\"\n        // SvelteKit\n        \".svelte-kit/**\", \".vercel/**\",\n        // Build Output API\n        \".vercel/output/**\"\n        // Other frameworks\n        \".nuxt/**\", \"dist/**\" \"other-output-directory/**\"\n      ]\n    }\n  }\n}\n```\n\nVisit [the Turborepo documentation](https://turbo.build/repo/docs/reference/configuration#outputs) to learn more about the `outputs` key.\n\nWhen using Turborepo on Vercel, all information used by `turbo` during the build process is automatically collected to help debug cache misses.\n\nTurborepo Run Summary is only available in Turborepo version `1.9` or later. To upgrade, use `npx @turbo/codemod upgrade`.\n\nTo view the Turborepo Run Summary for a deployment, use the following steps:\n\n*   Go to the Project > Deployments page\n*   Select a Deployment from the list to view the deployment details\n*   Select the Run Summary button to the right of the Building section, under the Deployment Status heading:\n\n![Open Turborepo Run Summary from the Deployment Details page](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fmonorepos%2Fturborepo%2Fturbo-run-summary-cta.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Open Turborepo Run Summary from the Deployment Details page](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fmonorepos%2Fturborepo%2Fturbo-run-summary-cta-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nOpen Turborepo Run Summary from the Deployment Details page\n\nThis opens a view containing a review of the build, including:\n\n*   All [tasks](https://turbo.build/repo/docs/core-concepts/caching) that were executed as part of the build\n*   The execution time and cache status for each task\n*   All data that `turbo` used to construct the cache key (the [task hash](https://turbo.build/repo/docs/core-concepts/caching#hashing))\n\nIf a previous deployment from the same branch is available, the difference between the cache inputs for the current and previous build will be automatically displayed, highlighting the specific changes that caused the cache miss.\n\n![Turborepo Run Summary](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fmonorepos%2Fturborepo%2Fturbo-run-summary.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Turborepo Run Summary](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fmonorepos%2Fturborepo%2Fturbo-run-summary-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nTurborepo Run Summary\n\nThis information can be helpful in identifiying exactly why a cache miss occurred, and can be used to determine if a cache miss is due to a change in the project, or a change in the environment.\n\nTo change the comparison, select a different deployment from the dropdown, or search for a deployment ID. The summary data can also be downloaded for comparison with a local build.\n\nEnvironment variable values are encrypted when displayed in Turborepo Run Summary, and can only be compared with summary files generated locally when viewed by a team member with access to the projects environment variables. [Learn more](https://vercel.com/docs/accounts/team-members-and-roles/access-roles/team-level-roles)",
    "title": "Deploying Turborepo to Vercel",
    "description": "Learn about Turborepo, a build system for monorepos that allows you to have faster incremental builds, content-aware hashing, and Remote Caching.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/regions",
    "markdown": "# Vercel Edge Network Regions\n\nVercel's Edge Network enables you to store content close to your customers and run compute in regions close to your data, reducing latency and improving end-user performance.\n\nAn Edge Network is both a CDN (Content Delivery Network) and a globally distributed platform for running compute. This page outlines the [regions](#region-list) Vercel's Edge Network supports.\n\n|     |     |     |\n| --- | --- | --- |Regions table\n| Region Code | Region Name | Reference Location |\n| --- | --- | --- |\n| arn1 | eu-north-1 | Stockholm, Sweden |\n| bom1 | ap-south-1 | Mumbai, India |\n| cdg1 | eu-west-3 | Paris, France |\n| cle1 | us-east-2 | Cleveland, USA |\n| cpt1 | af-south-1 | Cape Town, South Africa |\n| dub1 | eu-west-1 | Dublin, Ireland |\n| fra1 | eu-central-1 | Frankfurt, Germany |\n| gru1 | sa-east-1 | São Paulo, Brazil |\n| hkg1 | ap-east-1 | Hong Kong |\n| hnd1 | ap-northeast-1 | Tokyo, Japan |\n| iad1 | us-east-1 | Washington, D.C., USA |\n| icn1 | ap-northeast-2 | Seoul, South Korea |\n| kix1 | ap-northeast-3 | Osaka, Japan |\n| lhr1 | eu-west-2 | London, United Kingdom |\n| pdx1 | us-west-2 | Portland, USA |\n| sfo1 | us-west-1 | San Francisco, USA |\n| sin1 | ap-southeast-1 | Singapore |\n| syd1 | ap-southeast-2 | Sydney, Australia |\n\nIn front of these 18 compute-capable regions, Vercel has over 100 _points of presence_ (POPs) distributed across the globe. Traffic to Vercel is first routed to these POPs, and then will transit from the POPs to the nearest [Edge Network region](#region-list) on private, low-latency connections. This means traffic gets to and from the Vercel Edge Network as quickly and efficiently as possible.\n\nMaintaining a smaller number of regions increases the cache hit probability as caches in each region are more likely to hold popular or frequently requested content. Combining this with a higher number of POPs results in a concentrated and efficient caching infrastructure.\n\nWhen you use [the `vercel dev` CLI command to mimic your deployment environment locally](https://vercel.com/docs/cli/dev), the region is assigned `dev1` to mimic the Vercel platform infrastructure.\n\n| Region Code | Reference Location |\n| --- | --- |\n| dev1 | localhost |\n\n*   Serverless Functions default to running in the `iad1` (Washington, D.C., USA) region. Learn more about [changing function regions](https://vercel.com/docs/functions/serverless-functions/regions)\n*   Edge Functions execute in the region nearest to visitors by default. Learn more about [setting a specific Edge Function region](https://vercel.com/docs/functions/configuring-functions/region#setting-regions-in-your-function)\n\nFunctions should be executed in the same region as your database, or as close to it as possible, [for the lowest latency](https://vercel.com/guides/choosing-deployment-regions).\n\nIn the event of regional downtime, application traffic is rerouted to the next closest Edge Network region. This ensures that your application is always available to your users.\n\nTraffic will be rerouted to the next closest region in the following order:\n\n## Regions by priority\n\nSelect region\n\nP0iad1\n\nP1cle1\n\nP2sfo1\n\nP3dub1\n\nP4pdx1\n\nP5lhr1\n\nP6cdg1\n\nP7fra1\n\nP8arn1\n\nP9gru1\n\nP10hnd1\n\nP11kix1\n\nP12icn1\n\nP13bom1\n\nP14hkg1\n\nP15syd1\n\nP16sin1\n\nP17cpt1\n\nAdditionally, Serverless Functions can automatically failover to a different region if the region they are running in becomes unavailable. Learn more about [Serverless Function failover](https://vercel.com/docs/functions/configuring-functions/region#serverless-functions-failover) for Enterprise customers.",
    "title": "Vercel Edge Network Regions",
    "description": "View the list of regions supported by Vercel's Edge Network.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DEPLOYMENT_PAUSED",
    "markdown": "# DEPLOYMENT\\_PAUSED\n\nThe `DEPLOYMENT_PAUSED` error occurs when a deployment is paused due to certain conditions or configurations. This might happen if there's a manual intervention required, or a specific condition is met that triggers the pause.",
    "title": "DEPLOYMENT_PAUSED",
    "description": "The deployment was paused. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/environment-variables",
    "markdown": "# Environment Variables\n\nEnvironment Variables are key-value pairs configured outside your source code so that each value can change depending on the [Environment](#environments).\n\nYour source code can read these values to change behavior during the [Build Step](https://vercel.com/docs/deployments/configure-a-build) or during [Function](https://vercel.com/docs/functions/serverless-functions) execution.\n\nAll values are encrypted at rest and visible to any user that has access to the [Project](https://vercel.com/docs/projects/overview). It is safe to use both non-sensitive and sensitive data, such as tokens.\n\nChanges to Environment Variables are not applied to previous deployments, they only apply to new deployments.\n\nTo declare an Environment Variable for your deployment, go to the Environment Variables page of your Project Settings.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fadd-env-variable-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fadd-env-variable-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe _Add New_ section of the Environment Variables page in the Project Settings.\n\nEnter the desired Name for your Environment Variable. For example, if you are using Node.js and you create an Environment Variable named `API_URL`, it will be available under `process.env.API_URL` in your code.\n\nAccessing environment variables with supported runtime languages\n\nThen, enter the desired Value for your Environment Variable. The value is encrypted at rest so it is safe to add sensitive data like authentication tokens or private keys.\n\nYou can then configure which [Environments](#environments) this variable should apply to.\n\nFinally, click Save.\n\nJust below the _Add New_ form is a list of all the Environment Variables for the Project.\n\nYou can search for an existing Environment Variable by name using the search input and/or filter by [Environment](#environments) and Git Branch (in the case of the Preview Environment).\n\nClicking the three dots to the right allows you to edit or delete the Environment Variable.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fvariable-example-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fvariable-example-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn example of an Environment Variable with the search and filter inputs above.\n\nDevelopers on all plans can use a total of 64KB in Environments Variables per-Deployment on Vercel. This [limit](https://vercel.com/docs/limits/overview#environment-variables) is for all variables combined, and so no single variable can be larger than 64KB. The total size includes any variables configured through the dashboard or the [CLI](https://vercel.com/docs/cli).\n\nWith support for 64KB of Environment Variables, you can add large values for authentication tokens, JWTs, or certificates.\n\nDeployments using the following runtimes can support the larger 64KB environment:\n\n*   Node.js\n*   Python\n*   Ruby\n*   Go\n*   Java: `java11` and `java8.al2`\n*   .NET\n\nIn addition, the [PHP Community Runtime](https://github.com/vercel-community/php) also supports the 64KB environment.\n\nVercel also provides support for custom runtimes, through the Build Output API. For information on creating custom runtime support, see the following guides:\n\nWhile Vercel allows Environment Variables up to a total of 64KB in size, Edge Functions and Edge Middleware are limited to 5KB per Environment Variable.\n\nFor each Environment Variable, you can select one or more Environments to apply the Variable to:\n\n| Environment | Description |\n| --- | --- |\n| [Production](https://vercel.com/docs/deployments/environments#production) | When selected, the Environment Variable will be applied to your next Production Deployment. To create a Production Deployment, push a commit to the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) or run `vercel --prod`. |\n| [Preview](#preview-environment-variables) | The Environment Variable is applied to your next Preview Deployment. Preview Deployments are created when you push to a branch that is not the [Production Branch](https://vercel.com/docs/deployments/git#production-branch) or run `vercel`. |\n| [Development](#development-environment-variables) | The Environment Variable is used when running your project locally with `vercel dev` or your preferred development command. To download Development Environment Variables, run [`vercel env pull`](https://vercel.com/docs/cli/env). |\n\nYou need Vercel CLI version 22.0.0 or higher to use the features described in this section.\n\nPreview Environment Variables are applied to deployments from any Git branch that does not match the [Production Branch](https://vercel.com/docs/deployments/git#production-branch). When you add a Preview Environment Variable, you can choose to apply to all Preview branches or you can select a specific branch.\n\nWhen you push to a branch, a combination of Preview Environment Variables and branch-specific variables (if any) will be used. Any branch-specific variables will override other variables with the same name. This means you don't need to replicate all your existing Preview Environment Variables for each branch – you only need to add the values you wish to override.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fadd-env-variable-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fadd-env-variable-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAdding an Environment Variable to the `staging` branch.\n\nYou need Vercel CLI version 21.0.1 or higher to use the features described in this section.\n\nEnvironment Variables created for the Development Environment can be downloaded into a local development setup using the `vercel env pull` command provided by [Vercel CLI](https://vercel.com/cli):\n\nvercel env pull\nDownloading Development Environment Variables for Project my-lovely-project\n✅ Created .env file \\[510ms\\]\n\nDownloading Development Environment Variables with the `vercel env pull` command.\n\nRunning the command will create a `.env` file in the current directory, which can then be consumed by your framework's Development Command (like `next dev`).\n\nIf you're using `vercel dev`, there's no need to run `vercel env pull`, as `vercel dev` automatically downloads the Development Environment Variables into memory.\n\nReview the [`vercel dev`](https://vercel.com/docs/cli/dev) section to learn more about using it.\n\nFor more information on the `vercel env` command, check out [this section](https://vercel.com/docs/cli/env).\n\n[Integrations](https://vercel.com/docs/integrations) can automatically add Environment Variables to your Project Settings. In that case, the Integration that added the Variable will be displayed:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fintegration-env-variable-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fintegration-env-variable-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn Environment Variable added by the [MongoDB](https://vercel.com/integrations/mongodbatlas) Integration.",
    "title": "Environment Variables",
    "description": "Learn how to use Vercel Environment Variables, which are key-value pairs configured outside your source code that change depending on the environment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/rest-api/endpoints/projects",
    "markdown": "# Projects\n\npost/v10/projects/{idOrName}/domains\n\nAdd a domain to the project by passing its domain name and by specifying the project by either passing the project `id` or `name` in the URL. If the domain is not yet verified to be used on this project, the request will return `verified = false`, and the domain will need to be verified according to the `verification` challenge via `POST /projects/:idOrName/domains/:domain/verify`. If the domain already exists on the project, the request will fail with a `400` status code.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\n*   apexNamestringRequired\n    \n*   createdAtnumber\n    \n*   customEnvironmentIdstring or null\n    \n*   gitBranchstring or null\n    \n*   namestringRequired\n    \n*   projectIdstringRequired\n    \n*   redirectstring or null\n    \n*   redirectStatusCodenumber or null\n    \n    One of: `307` | `301` | `302` | `308`\n    \n*   updatedAtnumber\n    \n*   verificationarray\n    \n    A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.\n    \n*   Properties\n    \n*   verifiedbooleanRequired\n    \n    `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.\n    \n\nCode\n\nDescription\n\n`200`\n\nThe domain was successfully added to the project\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n*   The domain is not valid\n    \n*   You can't set both a git branch and a redirect for the domain\n    \n*   The domain can not be added because the latest production deployment for the project was not successful\n    \n*   The domain redirect is not valid\n    \n*   A domain cannot redirect to itself\n    \n*   You can not set the production branch as a branch for your domain\n    \n\n`401`\n\n`402`\n\n*   The account was soft-blocked for an unhandled reason.\n    \n*   The account is missing a payment so payment method must be updated\n    \n\n`403`\n\n*   You do not have permission to access this resource.\n    \n*   You don't have access to the domain you are adding\n    \n\n`404`\n\n`409`\n\n*   The domain is already assigned to another Vercel project\n    \n*   Cannot create project domain since owner already has `domain` on their account, but it's not verified yet.\n    \n*   Cannot create project domain since owner already has `domain` on their account, and it's verified.\n    \n*   The domain is not allowed to be used\n    \n*   The project is currently being transferred\n    \n\npost/v10/projects\n\nAllows to create a new project with the provided configuration. It only requires the project `name` but more configuration can be provided to override the defaults.\n\nQuery Parameter\n\nDescription\n\nslug\n\nstring\n\nThe Team slug to perform the request on behalf of.\n\nteamId\n\nstring\n\nThe Team identifier to perform the request on behalf of.\n\n*   accountIdstringRequired\n    \n*   analyticsobject\n    \n*   Properties\n    \n*   autoAssignCustomDomainsboolean\n    \n*   autoAssignCustomDomainsUpdatedBystring\n    \n*   autoExposeSystemEnvsboolean\n    \n*   buildCommandstring or null\n    \n*   commandForIgnoringBuildStepstring or null\n    \n*   concurrencyBucketNamestring\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring or null\n    \n*   createdAtnumber\n    \n*   cronsobject\n    \n*   Properties\n    \n*   customerSupportCodeVisibilityboolean\n    \n*   dataCacheobject\n    \n*   Properties\n    \n*   deploymentExpirationobject or null\n    \n*   Properties\n    \n*   devCommandstring or null\n    \n*   directoryListingbooleanRequired\n    \n*   enableAffectedProjectsDeploymentsboolean\n    \n*   enablePreviewFeedbackboolean or null\n    \n*   envarray\n    \n*   Properties\n    \n*   frameworkstring or null\n    \n    One of: `blitzjs` | `nextjs` | `gatsby` | `remix` | `astro` | `hexo` | `eleventy` | `docusaurus-2` | `docusaurus` | `preact` | `solidstart-1` | `solidstart` | `dojo` | `ember` | `vue` | `scully` | `ionic-angular` | `angular` | `polymer` | `svelte` | `sveltekit` | `sveltekit-1` | `ionic-react` | `create-react-app` | `gridsome` | `umijs` | `sapper` | `saber` | `stencil` | `nuxtjs` | `redwoodjs` | `hugo` | `jekyll` | `brunch` | `middleman` | `zola` | `hydrogen` | `vite` | `vitepress` | `vuepress` | `parcel` | `sanity` | `storybook`\n    \n*   gitCommentsobject\n    \n*   Properties\n    \n*   gitForkProtectionboolean\n    \n*   gitLFSboolean\n    \n*   hasActiveBranchesboolean\n    \n*   hasFloatingAliasesboolean\n    \n*   idstringRequired\n    \n*   installCommandstring or null\n    \n*   lastAliasRequestobject or null\n    \n*   Properties\n    \n*   lastRollbackTargetobject or null\n    \n*   latestDeploymentsarray\n    \n*   Properties\n    \n*   linkOne of the following objects\n    \n*   One of\n    \n*   liveboolean\n    \n*   namestringRequired\n    \n*   nodeVersionstringRequired\n    \n    One of: `20.x` | `18.x` | `16.x` | `14.x` | `12.x` | `10.x` | `8.10.x`\n    \n*   oidcTokenConfigobject\n    \n*   Properties\n    \n*   optionsAllowlistobject or null\n    \n*   Properties\n    \n*   outputDirectorystring or null\n    \n*   passiveConnectConfigurationIdstring or null\n    \n*   passwordProtectionobject or null\n    \n*   pausedboolean\n    \n*   permissionsobject\n    \n*   Properties\n    \n*   productionDeploymentsFastLaneboolean\n    \n*   protectionBypassobject\n    \n*   publicSourceboolean or null\n    \n*   rootDirectorystring or null\n    \n*   securityobject\n    \n*   Properties\n    \n*   serverlessFunctionRegionstring or null\n    \n*   serverlessFunctionZeroConfigFailoverboolean\n    \n*   skewProtectionBoundaryAtnumber\n    \n*   skewProtectionMaxAgenumber\n    \n*   skipGitConnectDuringLinkboolean\n    \n*   sourceFilesOutsideRootDirectoryboolean\n    \n*   speedInsightsobject\n    \n*   Properties\n    \n*   ssoProtectionobject or null\n    \n*   Properties\n    \n*   targetsobject\n    \n*   tierstring\n    \n    One of: `standard` | `advanced` | `critical`\n    \n*   transferCompletedAtnumber\n    \n*   transferStartedAtnumber\n    \n*   transferToAccountIdstring\n    \n*   transferredFromAccountIdstring\n    \n*   trustedIpsOne of the following objects or null\n    \n*   One of\n    \n*   updatedAtnumber\n    \n*   webAnalyticsobject\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`200`\n\nThe project was successfuly created\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n*   The Bitbucket Webhook for the project link could not be created\n    \n*   The Gitlab Webhook for the project link could not be created\n    \n\n`401`\n\n`402`\n\n*   The account was soft-blocked for an unhandled reason.\n    \n*   The account is missing a payment so payment method must be updated\n    \n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\nA project with the provided name already exists.\n\npost/v10/projects/{idOrName}/env\n\nCreate one ore more environment variables for a project by passing its `key`, `value`, `type` and `target` and by specifying the project by either passing the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA`\n\n*   createdRequiredOne of the following objects\n    \n*   One of\n    \n*   failedarrayRequired\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`201`\n\nThe environment variable was created successfully\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n\n`401`\n\n`402`\n\n*   The account was soft-blocked for an unhandled reason.\n    \n*   The account is missing a payment so payment method must be updated\n    \n\n`403`\n\n*   You do not have permission to access this resource.\n    \n*   The environment variable cannot be created because it already exists\n    \n*   Additional permissions are required to create production environment variables\n    \n\n`404`\n\n`409`\n\nThe project is being transfered and creating an environment variable is not possible\n\ndelete/v9/projects/{idOrName}\n\nDelete a specific project by passing either the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB`\n\nThe project was successfuly removed\n\nCode\n\nDescription\n\n`204`\n\nThe project was successfuly removed\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\npatch/v9/projects/{idOrName}/env/{id}\n\nEdit a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nid\n\nstring\n\nrequired\n\nThe unique environment variable identifier\n\nExample:`XMbOEya1gUUO1ir4`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA`\n\n*   One of the following objects\n    \n*   One of\n    \n\nCode\n\nDescription\n\n`200`\n\nThe environment variable was successfully edited\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\nThe project is being transfered and removing an environment variable is not possible\n\nget/v9/projects/{idOrName}/env\n\nRetrieve the environment variables for a given project by passing either the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA`\n\n*   One of the following objects\n    \n*   One of\n    \n\nCode\n\nDescription\n\n`200`\n\nThe list of environment variables for the given project\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v9/projects/{idOrName}\n\nGet the information for a specific project by passing either the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring | boolean of the following\n\nrequired\n\nThe unique project identifier or the project name\n\ntype: `string`\n\ntype: `boolean`\n\n*   accountIdstringRequired\n    \n*   analyticsobject\n    \n*   Properties\n    \n*   autoAssignCustomDomainsboolean\n    \n*   autoAssignCustomDomainsUpdatedBystring\n    \n*   autoExposeSystemEnvsboolean\n    \n*   buildCommandstring or null\n    \n*   commandForIgnoringBuildStepstring or null\n    \n*   concurrencyBucketNamestring\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring or null\n    \n*   createdAtnumber\n    \n*   cronsobject\n    \n*   Properties\n    \n*   customerSupportCodeVisibilityboolean\n    \n*   dataCacheobject\n    \n*   Properties\n    \n*   deploymentExpirationobject or null\n    \n*   Properties\n    \n*   devCommandstring or null\n    \n*   directoryListingbooleanRequired\n    \n*   enableAffectedProjectsDeploymentsboolean\n    \n*   enablePreviewFeedbackboolean or null\n    \n*   envarray\n    \n*   Properties\n    \n*   frameworkstring or null\n    \n    One of: `blitzjs` | `nextjs` | `gatsby` | `remix` | `astro` | `hexo` | `eleventy` | `docusaurus-2` | `docusaurus` | `preact` | `solidstart-1` | `solidstart` | `dojo` | `ember` | `vue` | `scully` | `ionic-angular` | `angular` | `polymer` | `svelte` | `sveltekit` | `sveltekit-1` | `ionic-react` | `create-react-app` | `gridsome` | `umijs` | `sapper` | `saber` | `stencil` | `nuxtjs` | `redwoodjs` | `hugo` | `jekyll` | `brunch` | `middleman` | `zola` | `hydrogen` | `vite` | `vitepress` | `vuepress` | `parcel` | `sanity` | `storybook`\n    \n*   gitCommentsobject\n    \n*   Properties\n    \n*   gitForkProtectionboolean\n    \n*   gitLFSboolean\n    \n*   hasActiveBranchesboolean\n    \n*   hasFloatingAliasesboolean\n    \n*   idstringRequired\n    \n*   installCommandstring or null\n    \n*   lastAliasRequestobject or null\n    \n*   Properties\n    \n*   lastRollbackTargetobject or null\n    \n*   latestDeploymentsarray\n    \n*   Properties\n    \n*   linkOne of the following objects\n    \n*   One of\n    \n*   liveboolean\n    \n*   namestringRequired\n    \n*   nodeVersionstringRequired\n    \n    One of: `20.x` | `18.x` | `16.x` | `14.x` | `12.x` | `10.x` | `8.10.x`\n    \n*   oidcTokenConfigobject\n    \n*   Properties\n    \n*   optionsAllowlistobject or null\n    \n*   Properties\n    \n*   outputDirectorystring or null\n    \n*   passiveConnectConfigurationIdstring or null\n    \n*   passwordProtectionobject or null\n    \n*   pausedboolean\n    \n*   permissionsobject\n    \n*   Properties\n    \n*   productionDeploymentsFastLaneboolean\n    \n*   protectionBypassobject\n    \n*   publicSourceboolean or null\n    \n*   rootDirectorystring or null\n    \n*   securityobject\n    \n*   Properties\n    \n*   serverlessFunctionRegionstring or null\n    \n*   serverlessFunctionZeroConfigFailoverboolean\n    \n*   skewProtectionBoundaryAtnumber\n    \n*   skewProtectionMaxAgenumber\n    \n*   skipGitConnectDuringLinkboolean\n    \n*   sourceFilesOutsideRootDirectoryboolean\n    \n*   speedInsightsobject\n    \n*   Properties\n    \n*   ssoProtectionobject or null\n    \n*   Properties\n    \n*   targetsobject\n    \n*   tierstring\n    \n    One of: `standard` | `advanced` | `critical`\n    \n*   transferCompletedAtnumber\n    \n*   transferStartedAtnumber\n    \n*   transferToAccountIdstring\n    \n*   transferredFromAccountIdstring\n    \n*   trustedIpsOne of the following objects or null\n    \n*   One of\n    \n*   updatedAtnumber\n    \n*   webAnalyticsobject\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`200`\n\nThe project information\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v9/projects/{idOrName}/domains/{domain}\n\nGet project domain by project id/name and domain name.\n\nPath Parameter\n\nDescription\n\ndomain\n\nstring\n\nrequired\n\nThe project domain name\n\nExample:`www.example.com`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\n*   apexNamestringRequired\n    \n*   createdAtnumber\n    \n*   customEnvironmentIdstring or null\n    \n*   gitBranchstring or null\n    \n*   namestringRequired\n    \n*   projectIdstringRequired\n    \n*   redirectstring or null\n    \n*   redirectStatusCodenumber or null\n    \n    One of: `307` | `301` | `302` | `308`\n    \n*   updatedAtnumber\n    \n*   verificationarray\n    \n    A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.\n    \n*   Properties\n    \n*   verifiedbooleanRequired\n    \n    `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.\n    \n\nCode\n\nDescription\n\n`200`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v9/projects/{idOrName}/domains\n\nRetrieve the domains associated with a given project by passing either the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring | integer of the following\n\nrequired\n\nThe unique project identifier or the project name\n\ntype: `string`\n\ntype: `integer`\n\n*   domainsarrayRequired\n    \n*   Properties\n    \n*   paginationRequired\n    \n\nCode\n\nDescription\n\n`200`\n\nSuccessful response retrieving a list of domains\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v1/projects/{idOrName}/env/{id}\n\nRetrieve the environment variable for a given project.\n\nPath Parameter\n\nDescription\n\nid\n\nstring\n\nrequired\n\nThe unique ID for the environment variable to get the decrypted value.\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA`\n\n*   One of the following objects\n    \n*   One of\n    \n\nCode\n\nDescription\n\n`200`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v9/projects\n\nAllows to retrieve the list of projects of the authenticated user or team. The list will be paginated and the provided query parameters allow filtering the returned projects.\n\nQuery Parameter\n\nDescription\n\ndeprecated\n\nboolean\n\nedgeConfigId\n\nstring\n\nFilter results by connected Edge Config ID\n\nedgeConfigTokenId\n\nstring\n\nFilter results by connected Edge Config Token ID\n\nexcludeRepos\n\nstring\n\nFilter results by excluding those projects that belong to a repo\n\nfrom\n\nstring\n\nQuery only projects updated after the given timestamp\n\ngitForkProtection\n\nstring of the following\n\nSpecifies whether PRs from Git forks should require a team member's authorization before it can be deployed\n\nExample:`1`\n\nAllowed values:`1``0`\n\nlimit\n\nstring\n\nLimit the number of projects returned\n\nrepo\n\nstring\n\nFilter results by repo. Also used for project count\n\nrepoId\n\nstring\n\nFilter results by Repository ID.\n\nrepoUrl\n\nstring\n\nFilter results by Repository URL.\n\nExample:`https://github.com/vercel/next.js`\n\nsearch\n\nstring\n\nSearch projects by the name field\n\nslug\n\nstring\n\nThe Team slug to perform the request on behalf of.\n\nteamId\n\nstring\n\nThe Team identifier to perform the request on behalf of.\n\nThe paginated list of projects\n\n*   paginationRequired\n    \n*   projectsarrayRequired\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`200`\n\nThe paginated list of projects\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\nget/v1/projects/{projectId}/promote/aliases\n\nGet a list of aliases related to the last promote request with their mapping status\n\nPath Parameter\n\nDescription\n\nprojectId\n\nstring\n\nrequired\n\n*   One of the following objects\n    \n*   One of\n    \n\nCode\n\nDescription\n\n`200`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\npost/v1/projects/{projectId}/pause\n\nPause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project disables auto assigning custom production domains and blocks the active Production Deployment then the request will return with 200 status code.\n\nPath Parameter\n\nDescription\n\nprojectId\n\nstring\n\nrequired\n\nThe unique project identifier\n\nN/A\n\nCode\n\nDescription\n\n`200`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`402`\n\n*   The account was soft-blocked for an unhandled reason.\n    \n*   The account is missing a payment so payment method must be updated\n    \n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`500`\n\ndelete/v9/projects/{idOrName}/domains/{domain}\n\nRemove a domain from a project by passing the domain name and by specifying the project by either passing the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\ndomain\n\nstring\n\nrequired\n\nThe project domain name\n\nExample:`www.example.com`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\n*   object\n    \n\nCode\n\nDescription\n\n`200`\n\nThe domain was succesfully removed from the project\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\nThe project is currently being transferred\n\ndelete/v9/projects/{idOrName}/env/{id}\n\nDelete a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.\n\nPath Parameter\n\nDescription\n\nid\n\nstring\n\nrequired\n\nThe unique environment variable identifier\n\nExample:`XMbOEya1gUUO1ir4`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA`\n\n*   One of the following objects\n    \n*   One of\n    \n\nCode\n\nDescription\n\n`200`\n\nThe environment variable was successfully removed\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\nThe project is being transfered and removing an environment variable is not possible\n\npost/v10/projects/{projectId}/promote/{deploymentId}\n\nAllows users to promote a deployment to production. Note: This does NOT rebuild the deployment. If you need that, then call create-deployments endpoint.\n\nPath Parameter\n\nDescription\n\ndeploymentId\n\nstring\n\nrequired\n\nprojectId\n\nstring\n\nrequired\n\nN/A\n\nCode\n\nDescription\n\n`201`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\npost/v1/projects/{projectId}/unpause\n\nUnpause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project enables auto assigning custom production domains and unblocks the active Production Deployment then the request will return with 200 status code.\n\nPath Parameter\n\nDescription\n\nprojectId\n\nstring\n\nrequired\n\nThe unique project identifier\n\nN/A\n\nCode\n\nDescription\n\n`200`\n\n`400`\n\nOne of the provided values in the request query is invalid.\n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`500`\n\npatch/v9/projects/{idOrName}\n\nUpdate the fields of a project using either its `name` or `id`.\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB`\n\n*   accountIdstringRequired\n    \n*   analyticsobject\n    \n*   Properties\n    \n*   autoAssignCustomDomainsboolean\n    \n*   autoAssignCustomDomainsUpdatedBystring\n    \n*   autoExposeSystemEnvsboolean\n    \n*   buildCommandstring or null\n    \n*   commandForIgnoringBuildStepstring or null\n    \n*   concurrencyBucketNamestring\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring or null\n    \n*   createdAtnumber\n    \n*   cronsobject\n    \n*   Properties\n    \n*   customerSupportCodeVisibilityboolean\n    \n*   dataCacheobject\n    \n*   Properties\n    \n*   deploymentExpirationobject or null\n    \n*   Properties\n    \n*   devCommandstring or null\n    \n*   directoryListingbooleanRequired\n    \n*   enableAffectedProjectsDeploymentsboolean\n    \n*   enablePreviewFeedbackboolean or null\n    \n*   envarray\n    \n*   Properties\n    \n*   frameworkstring or null\n    \n    One of: `blitzjs` | `nextjs` | `gatsby` | `remix` | `astro` | `hexo` | `eleventy` | `docusaurus-2` | `docusaurus` | `preact` | `solidstart-1` | `solidstart` | `dojo` | `ember` | `vue` | `scully` | `ionic-angular` | `angular` | `polymer` | `svelte` | `sveltekit` | `sveltekit-1` | `ionic-react` | `create-react-app` | `gridsome` | `umijs` | `sapper` | `saber` | `stencil` | `nuxtjs` | `redwoodjs` | `hugo` | `jekyll` | `brunch` | `middleman` | `zola` | `hydrogen` | `vite` | `vitepress` | `vuepress` | `parcel` | `sanity` | `storybook`\n    \n*   gitCommentsobject\n    \n*   Properties\n    \n*   gitForkProtectionboolean\n    \n*   gitLFSboolean\n    \n*   hasActiveBranchesboolean\n    \n*   hasFloatingAliasesboolean\n    \n*   idstringRequired\n    \n*   installCommandstring or null\n    \n*   lastAliasRequestobject or null\n    \n*   Properties\n    \n*   lastRollbackTargetobject or null\n    \n*   latestDeploymentsarray\n    \n*   Properties\n    \n*   linkOne of the following objects\n    \n*   One of\n    \n*   liveboolean\n    \n*   namestringRequired\n    \n*   nodeVersionstringRequired\n    \n    One of: `20.x` | `18.x` | `16.x` | `14.x` | `12.x` | `10.x` | `8.10.x`\n    \n*   oidcTokenConfigobject\n    \n*   Properties\n    \n*   optionsAllowlistobject or null\n    \n*   Properties\n    \n*   outputDirectorystring or null\n    \n*   passiveConnectConfigurationIdstring or null\n    \n*   passwordProtectionobject or null\n    \n*   pausedboolean\n    \n*   permissionsobject\n    \n*   Properties\n    \n*   productionDeploymentsFastLaneboolean\n    \n*   protectionBypassobject\n    \n*   publicSourceboolean or null\n    \n*   rootDirectorystring or null\n    \n*   securityobject\n    \n*   Properties\n    \n*   serverlessFunctionRegionstring or null\n    \n*   serverlessFunctionZeroConfigFailoverboolean\n    \n*   skewProtectionBoundaryAtnumber\n    \n*   skewProtectionMaxAgenumber\n    \n*   skipGitConnectDuringLinkboolean\n    \n*   sourceFilesOutsideRootDirectoryboolean\n    \n*   speedInsightsobject\n    \n*   Properties\n    \n*   ssoProtectionobject or null\n    \n*   Properties\n    \n*   targetsobject\n    \n*   tierstring\n    \n    One of: `standard` | `advanced` | `critical`\n    \n*   transferCompletedAtnumber\n    \n*   transferStartedAtnumber\n    \n*   transferToAccountIdstring\n    \n*   transferredFromAccountIdstring\n    \n*   trustedIpsOne of the following objects or null\n    \n*   One of\n    \n*   updatedAtnumber\n    \n*   webAnalyticsobject\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`200`\n\nThe project was successfully updated\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n*   Trusted IPs is only accessible for enterprise customers\n    \n\n`401`\n\n`402`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\n*   The provided name for the project is already being used\n    \n*   The project is currently being transferred.\n    \n\n`428`\n\n*   Owner does not have protection add-on\n    \n*   Advanced Deployment Protection is not available for the user plan\n    \n\npatch/v1/data-cache/projects/{projectId}\n\nUpdate the data cache feature on a project.\n\nPath Parameter\n\nDescription\n\nprojectId\n\nstring\n\nrequired\n\nThe unique project identifier\n\nExample:`prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB`\n\n*   accountIdstringRequired\n    \n*   analyticsobject\n    \n*   Properties\n    \n*   autoAssignCustomDomainsboolean\n    \n*   autoAssignCustomDomainsUpdatedBystring\n    \n*   autoExposeSystemEnvsboolean\n    \n*   buildCommandstring or null\n    \n*   commandForIgnoringBuildStepstring or null\n    \n*   concurrencyBucketNamestring\n    \n*   connectBuildsEnabledboolean\n    \n*   connectConfigurationIdstring or null\n    \n*   createdAtnumber\n    \n*   cronsobject\n    \n*   Properties\n    \n*   customerSupportCodeVisibilityboolean\n    \n*   dataCacheobject\n    \n*   Properties\n    \n*   deploymentExpirationobject or null\n    \n*   Properties\n    \n*   devCommandstring or null\n    \n*   directoryListingbooleanRequired\n    \n*   enableAffectedProjectsDeploymentsboolean\n    \n*   enablePreviewFeedbackboolean or null\n    \n*   envarray\n    \n*   Properties\n    \n*   frameworkstring or null\n    \n    One of: `blitzjs` | `nextjs` | `gatsby` | `remix` | `astro` | `hexo` | `eleventy` | `docusaurus-2` | `docusaurus` | `preact` | `solidstart-1` | `solidstart` | `dojo` | `ember` | `vue` | `scully` | `ionic-angular` | `angular` | `polymer` | `svelte` | `sveltekit` | `sveltekit-1` | `ionic-react` | `create-react-app` | `gridsome` | `umijs` | `sapper` | `saber` | `stencil` | `nuxtjs` | `redwoodjs` | `hugo` | `jekyll` | `brunch` | `middleman` | `zola` | `hydrogen` | `vite` | `vitepress` | `vuepress` | `parcel` | `sanity` | `storybook`\n    \n*   gitCommentsobject\n    \n*   Properties\n    \n*   gitForkProtectionboolean\n    \n*   gitLFSboolean\n    \n*   hasActiveBranchesboolean\n    \n*   hasFloatingAliasesboolean\n    \n*   idstringRequired\n    \n*   installCommandstring or null\n    \n*   lastAliasRequestobject or null\n    \n*   Properties\n    \n*   lastRollbackTargetobject or null\n    \n*   latestDeploymentsarray\n    \n*   Properties\n    \n*   linkOne of the following objects\n    \n*   One of\n    \n*   liveboolean\n    \n*   namestringRequired\n    \n*   nodeVersionstringRequired\n    \n    One of: `20.x` | `18.x` | `16.x` | `14.x` | `12.x` | `10.x` | `8.10.x`\n    \n*   oidcTokenConfigobject\n    \n*   Properties\n    \n*   optionsAllowlistobject or null\n    \n*   Properties\n    \n*   outputDirectorystring or null\n    \n*   passiveConnectConfigurationIdstring or null\n    \n*   passwordProtectionobject or null\n    \n*   pausedboolean\n    \n*   permissionsobject\n    \n*   Properties\n    \n*   productionDeploymentsFastLaneboolean\n    \n*   protectionBypassobject\n    \n*   publicSourceboolean or null\n    \n*   rootDirectorystring or null\n    \n*   securityobject\n    \n*   Properties\n    \n*   serverlessFunctionRegionstring or null\n    \n*   serverlessFunctionZeroConfigFailoverboolean\n    \n*   skewProtectionBoundaryAtnumber\n    \n*   skewProtectionMaxAgenumber\n    \n*   skipGitConnectDuringLinkboolean\n    \n*   sourceFilesOutsideRootDirectoryboolean\n    \n*   speedInsightsobject\n    \n*   Properties\n    \n*   ssoProtectionobject or null\n    \n*   Properties\n    \n*   targetsobject\n    \n*   tierstring\n    \n    One of: `standard` | `advanced` | `critical`\n    \n*   transferCompletedAtnumber\n    \n*   transferStartedAtnumber\n    \n*   transferToAccountIdstring\n    \n*   transferredFromAccountIdstring\n    \n*   trustedIpsOne of the following objects or null\n    \n*   One of\n    \n*   updatedAtnumber\n    \n*   webAnalyticsobject\n    \n*   Properties\n    \n\nCode\n\nDescription\n\n`200`\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\npatch/v9/projects/{idOrName}/domains/{domain}\n\nUpdate a project domain's configuration, including the name, git branch and redirect of the domain.\n\nPath Parameter\n\nDescription\n\ndomain\n\nstring\n\nrequired\n\nThe project domain name\n\nExample:`www.example.com`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\n*   apexNamestringRequired\n    \n*   createdAtnumber\n    \n*   customEnvironmentIdstring or null\n    \n*   gitBranchstring or null\n    \n*   namestringRequired\n    \n*   projectIdstringRequired\n    \n*   redirectstring or null\n    \n*   redirectStatusCodenumber or null\n    \n    One of: `307` | `301` | `302` | `308`\n    \n*   updatedAtnumber\n    \n*   verificationarray\n    \n    A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.\n    \n*   Properties\n    \n*   verifiedbooleanRequired\n    \n    `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.\n    \n\nCode\n\nDescription\n\n`200`\n\nThe domain was updated successfuly\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n*   The domain redirect is not valid\n    \n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\nThe project is currently being transferred\n\npatch/v1/projects/{idOrName}/protection-bypass\n\nUpdate the deployment protection automation bypass for a project\n\nPath Parameter\n\nDescription\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\n*   protectionBypassobject\n    \n\nCode\n\nDescription\n\n`200`\n\n`400`\n\n*   One of the provided values in the request body is invalid.\n    \n*   One of the provided values in the request query is invalid.\n    \n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`\n\n`409`\n\npost/v9/projects/{idOrName}/domains/{domain}/verify\n\nAttempts to verify a project domain with `verified = false` by checking the correctness of the project domain's `verification` challenge.\n\nPath Parameter\n\nDescription\n\ndomain\n\nstring\n\nrequired\n\nThe domain name you want to verify\n\nExample:`example.com`\n\nidOrName\n\nstring\n\nrequired\n\nThe unique project identifier or the project name\n\nExample:`prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB`\n\n*   apexNamestringRequired\n    \n*   createdAtnumber\n    \n*   customEnvironmentIdstring or null\n    \n*   gitBranchstring or null\n    \n*   namestringRequired\n    \n*   projectIdstringRequired\n    \n*   redirectstring or null\n    \n*   redirectStatusCodenumber or null\n    \n    One of: `307` | `301` | `302` | `308`\n    \n*   updatedAtnumber\n    \n*   verificationarray\n    \n    A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.\n    \n*   Properties\n    \n*   verifiedbooleanRequired\n    \n    `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.\n    \n\nCode\n\nDescription\n\n`200`\n\n*   The project domain was verified successfully\n    \n*   Domain is already verified\n    \n\n`400`\n\n*   One of the provided values in the request query is invalid.\n    \n*   There is an existing TXT record on the domain verifying it for another project\n    \n*   The domain does not have a TXT record that attempts to verify the project domain\n    \n*   The TXT record on the domain does not match the expected challenge for the project domain\n    \n*   Project domain is not assigned to project\n    \n\n`401`\n\n`403`\n\nYou do not have permission to access this resource.\n\n`404`",
    "title": "Projects",
    "description": "The Vercel REST API is a REST-styled API that gives full control over the entire Vercel platform.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/concurrent-builds",
    "markdown": "# Managing Concurrent Builds\n\nGenerally, when you make multiple deployments in the same Vercel account, the builds get queued, and only one deployment is built at a time. Concurrent Builds allow you to build multiple deployments with Vercel simultaneously.\n\n[Team accounts](https://vercel.com/docs/accounts/create-a-team) allow you to increase the number of Concurrent Builds from the Billing section on the Team Settings page, enabling the team to create deployments faster.\n\nYou can manage the number of concurrent builds on the Team Settings page, under Billing. Depending on your plan, you can edit the number of slots required for your team.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Fconcurrent-builds-fieldset.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Fconcurrent-builds-fieldset-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSetting the Concurrent Builds limit for a Team.\n\nWhen Vercel queues builds, we'll processes them in chronological order (FIFO Order). If a build has to wait for queued preview deployments to finish, it can delay the production release process.\n\nTo ensure that changes to the [production environment](https://vercel.com/docs/deployments/environments#production) are prioritized over [preview deployments](https://vercel.com/docs/deployments/preview-deployments) in the queue, you can enable Prioritize Production Builds:\n\n1.  From your Vercel dashboard, select the project you wish to enable it for\n2.  Select the Settings tab, and go to the [Advanced section](https://vercel.com/d?to=%2F%5Bteam%5D%2F%5Bproject%5D%2Fsettings%2Fadvanced&title=Prioritize+Production+Builds+Setting) of your [Project Settings](https://vercel.com/docs/projects/overview#project-settings)\n3.  Under Prioritize Production Builds, toggle the switch to Enabled\n\n|     | Hobby | Pro | Enterprise |\n| --- | --- | --- | --- |\n| Maximum number of concurrent builds | 1   | 12  | [Custom](https://vercel.com/contact/sales) |\n\nYou can add a maximum of three concurrent builds during the [14-day free trial](https://vercel.com/docs/accounts/plans/pro/trials) . Once you add a payment method, you can upgrade this number to 12 slots.",
    "title": "Managing Concurrent Builds",
    "description": "Concurrent Builds allow you to build multiple deployments with Vercel simultaneously. Learn how to manage Concurrent Builds on Vercel with this guide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/observability/runtime-logs",
    "markdown": "# Runtime Logs\n\nThe Logs tab allows you to view, search, inspect, and [share](#log-sharing) your runtime logs without any third-party integration. You can also filter and group your [runtime logs](#what-are-runtime-logs) based on the relevant fields.\n\nYou can only view runtime logs from the Logs tab. [Build logs](https://vercel.com/docs/deployments/logs) can be accessed from the production deployment tile.\n\nRuntime logs include all logs generated by [Serverless](https://vercel.com/docs/functions/serverless-functions) and [Edge Function](https://vercel.com/docs/functions/edge-functions) invocations in both [preview](https://vercel.com/docs/deployments/preview-deployments) and [production](https://vercel.com/docs/deployments/environments#production) deployments. These log results provide information about the output for your functions as well as the `console.log` output.\n\nWith runtime logs:\n\n*   Logs are shown in realtime\n*   Each action of writing to standard output, such as using `console.log`, results in a separate log entry\n*   Each of those logs are 4 KB _per line_\n\nTo view runtime logs:\n\n1.  From the dashboard, select the project that you wish to see the logs for\n2.  Select the Logs tab from your project overview\n3.  From here you can view, filter, and search through the runtime logs. Each log row shares [basic info](#log-details) about the request, like execution, domain name, HTTP status, function type, and RequestId.\n\n![Layout to visualize the runtime logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fruntime-logs-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Layout to visualize the runtime logs.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fruntime-logs-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nLayout to visualize the runtime logs.\n\nYou can use the following filters from the left sidebar to get a refined search experience.\n\nYou can filter runtime logs based on a specific timeline. It can vary from the past hour, last 3 days, or a custom timespan [depending on your account type](https://vercel.com/docs/observability/runtime-logs#limits). You can use the Live mode option to follow the logs in real-time.\n\n![Layout to visualize the runtime logs in live mode.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Flive-mode-logs-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Layout to visualize the runtime logs in live mode.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Flive-mode-logs-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nLayout to visualize the runtime logs in live mode.\n\nAll displayed dates and times are in UTC.\n\nYou can filter runtime logs by three kinds of levels: Info, Warning, and Error. [Streaming Functions](https://vercel.com/docs/functions/streaming) will always preserve the original intent:\n\nAdditionally:\n\n*   Requests with a status code of `4xx` are considered a Warning\n*   Requests with a status code of `5xx` are considered Error\n*   All other requests are considered Info\n\nThese levels are highlighted with different colors for example, yellow for warnings and red for errors. This color coding is beneficial with debugging; you can identify the failed requests and the reason behind the failure.\n\nYou can filter and analyze logs for one or more functions defined in your project. The log output is generated for the [Serverless Functions](https://vercel.com/docs/functions/serverless-functions), [Edge Functions](https://vercel.com/docs/functions/edge-functions), and [Edge Middleware](https://vercel.com/docs/functions/edge-middleware).\n\nYou can view logs for one or more domains and subdomains attached to your team’s project. Alternatively, you can use the Search hosts... field to navigate to the desired host.\n\nLike host and functions, you can filter your logs based on deployments URLs.\n\nUsing the type filter, you can search for four logs types generated as a result of:\n\n| Type | Description |\n| --- | --- |\n| [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) | Logs generated from your Serverless Functions invocations. Log details include additional runtime Request Id details and other basic info |\n| [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) | Logs generated as a result of your Edge Middleware invocations |\n| [Edge Functions](https://vercel.com/docs/functions/edge-functions) | Logs requests generated from your Edge Functions. Log info includes time, domain, and the request method |\n| Request | Logs generated from either ISR or external redirections |\n\nYou can filter your logs based on the request method used by a function such as `GET` or `POST`.\n\nYou can filter your logs based on the cache behavior such as `HIT` or `MISS`.\n\nLog Presets allow you to save your selected filters for later use. You can save presets to either My Project Presets (related to your personal account) or Team Project Presets. Personal presets can only be viewed and edited by the user who created them.\n\nPresets are tied to specific projects. If you switch to another project, you will not see the saved presets.\n\nTo save a preset, make a change to the filters in the left sidebar and select the Save button. You can then choose the scoping group to save the preset to, either Personal or Team.\n\n![Layout to save log presets.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1693204374%2Fdocs-assets%2Fstatic%2Fdocs%2Flogs%2Fruntime-log-preset-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Layout to save log presets.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1693204374%2Fdocs-assets%2Fstatic%2Fdocs%2Flogs%2Fruntime-log-preset-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nLayout to save log presets.\n\nYou can use the main search field to filter logs by their messages. In the current search state, filtered log results are sorted chronologically, with the most recent first. Filtered values can also be searched from the main search bar.\n\n| Value | Description |\n| --- | --- |\n| [Function](#function) | The function name |\n| [Level](#level) | The level type. Can be Info, Warning, or Error |\n| [Type](#type) | Can be Request, [Serverless Function](https://vercel.com/docs/functions/serverless-functions), [Edge Middleware](https://vercel.com/docs/functions/edge-middleware), and [Edge Function](https://vercel.com/docs/functions/edge-functions) |\n| [Host](#host) | Name of the [domain](https://vercel.com/docs/projects/domains) or subdomain for which the log was generated |\n| [Deployment](#deployment) | The name of your deployment |\n| [Method](#request-method) | The request method used. For example `GET`, `POST` etc. |\n| [Cache](#cache) | Cache status with the values `HIT`, `MISS`, `STALE`, `BYPASS`, `PRERENDER` or `REVALIDATED` |\n| Status | HTTP status code for the log message |\n| RequestID | Unique identifier of request. This is visible on a 404 page, for example. |\n\nThis **free text search** feature is limited to the `message` field. Other fields can be filtered using the left sidebar or the filters in the search bar.\n\nYou can view details for each generated runtime log to analyze and improve your debugging experience. When you click a log from the list, the following details appear in the right sidebar:\n\n| Info | Description |\n| --- | --- |\n| Log Name | Title of the log generated |\n| Time | Timestamp at which the log was recorded in UTC |\n| Status Code | HTTP status code for the log message |\n| Host | Name of the [domain](https://vercel.com/docs/projects/domains) or subdomain for which the log was generated |\n| Request Id | Unique identifier of request created only for runtime logs |\n| Request User Agent | Name of the browser from which the request originated |\n| Level | The level type for example, Info, Warning, or Error |\n| Cache | Cache status with the values `HIT`, `MISS`, `STALE`, `BYPASS`, `PRERENDER` or `REVALIDATED` |\n| Type | Can be Request, [Serverless Function](https://vercel.com/docs/functions/serverless-functions), [Edge Middleware](https://vercel.com/docs/functions/edge-middleware), and [Edge Function](https://vercel.com/docs/functions/edge-functions) |\n| Function | The function name |\n| Location | The geographical [region](https://vercel.com/docs/functions/serverless-functions/regions) for Serverless and Edge Functions access |\n| Runtime | Name of the JavaScript runtime environment for Node.js (info only applies to Serverless Function type) |\n| Duration/Limit | Time duration for the log record result (info only applies to Serverless Function type) |\n| Memory used/Limit | The size of memory that was consumed by the function (info only applies to Serverless Function type) |\n| Log Message | A detailed log message with additional details for `RequestId`, `Billed Duration`, `Max Memory Used`, etc. Log messages that push the log [over 4 KB](https://vercel.com/docs/observability/runtime-logs#what-are-runtime-logs) can be truncated to only show tail logs |\n\nTowards the end of the log results window is a button called Show New Logs. By default, it is set to display log results for the past 30 minutes.\n\nClick this button, and it loads new log rows. The latest entries are added based on the selected filters.\n\nYou can share a log entry with other [team members](https://vercel.com/docs/accounts/team-members-and-roles/managing-team-members) to view the particular log and context you are looking at. Click on the log you want to share, copy the current URL of your browser, and send it to team members through the medium of your choice.\n\nLogs are streamed, and there is no limit on how many times you can output `log` data for each function invocation. Each `log` output can be up to 4 KB. Logs that exceed this will be truncated.\n\nRuntime logs are stored with the following observability limits:\n\n| Plan | Retention time | Log entries |\n| --- | --- | --- |\n| Hobby | 1 hour of logs | Up to 4000 rows of log data |\n| Pro | 1 day of logs | Up to 100,000 rows of log data |\n| Enterprise | 3 days of logs | Up to 60 million rows of log data |\n\nIf you exceed the log entry limits, you can only query the most recent logs.",
    "title": "Runtime Logs",
    "description": "Learn how to search, inspect, and share your runtime logs with the Logs tab.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/deployment-protection",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://vercel.com/docs/observability/log-drains",
    "markdown": "# Working with Log Drains\n\nInspecting logs for the [Build Step](https://vercel.com/docs/deployments/configure-a-build), [Runtime](https://vercel.com/docs/functions/runtimes), and [Edge Network](https://vercel.com/docs/edge-network/overview) traffic of deployments is important in understanding the behavior of your application.\n\nLog drains let you debug, monitor, and analyze logs from your applications. When a new log line is created, the logs can be forwarded to archival, search, and alerting services through `HTTPS`, `HTTP`, `TLS`, and `TCP`.\n\nLog drains on Vercel enable you to:\n\n*   Have persisted storage of logs\n*   Have a large volume of log storage\n*   Provide the ability to create alerts based on logging patterns\n*   Generate metrics and graphs from logs data\n\nYou can add log drains in two ways:\n\nLog drains are available to all users on the [Pro](https://vercel.com/docs/accounts/plans/pro) and [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) plans. If you are on the [Hobby](https://vercel.com/docs/accounts/plans/hobby) or [Pro Trial](https://vercel.com/docs/accounts/plans/pro/trials) plan, you can upgrade to the Pro plan to use log drains.\n\nThose on the Hobby plan, and using log drains before 23rd May 2024, can continue to use their current log drains through the integration for free, forever. However, they will not be able to create new log drains.\n\nExisting Pro plan users have a three month grace period from the end of the billing cycle that runs through May 25th 2024, before being charged for log drains usage. After this period, log drains usage will be billed based on the pricing table below.\n\nTo learn more about Managed Infrastructure on the Pro plan, and how to understand your invoices, see [understanding my invoice.](https://vercel.com/docs/pricing/understanding-my-invoice)\n\nSee [Optimizing log drains](https://vercel.com/docs/pricing/observability#optimizing-log-drains-usage) for information on how to manage costs associated with log drains.\n\n1.  From your team's [dashboard](https://vercel.com/dashboard), select the Settings tab\n2.  Select Log Drains from the list\n3.  In available log drains, select the context menu and click Disable to disable a log drain\n4.  In available log drains, select the context menu and click Remove to remove a log drain\n\nYou can also integrate the log drains with third-party logging services. The Integrations Marketplace has [numerous logging services](https://vercel.com/integrations#logging) for you to integrate.\n\nTo do so, you can:\n\n*   Install the desired integration from the Integrations Marketplace\n*   Follow the configuration steps provided and choose a project to connect with the service\n*   Watch your logs appear on the selected service\n\nYou can easily collect and forward your deployment logs to a third-party logging provider and act accordingly with log drains.\n\nOnce integrated, you can view and manage all these logging services also under the Active Log Drains list. You can also find the log drains integration in your [list of integrations](https://vercel.com/d?to=%2F%5Bteam%5D%2F%7E%2Fintegrations&title=Go+to+Integrations).\n\nOccasionally your log drain endpoints could return an error. If more than 80% of log drain deliveries return errored status and the number of errored deliveries exceed 50 for the past hour, we will send a notification email and indicate the error status on your Log Drain page.\n\n![Errored Log Drain will show a warning status.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1713956999%2Ffront%2Fdocs%2Flogs%2Ferror-log-drain.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Errored Log Drain will show a warning status.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1713956998%2Ffront%2Fdocs%2Flogs%2Ferror-log-drain-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nErrored Log Drain will show a warning status.\n\nFor more information on log drains and how to use them, check out the following resources:",
    "title": "Working with Log Drains",
    "description": "Log drains collect all of your logs using a service specializing in storing app logs. Learn how to use them with Vercel Integrations here.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/logs",
    "markdown": "# Accessing Build Logs\n\nWhen you deploy your website to Vercel, the platform generates build logs that show the deployment progress. The build logs contain information about:\n\n*   The version of the build tools\n*   Warnings or errors encountered during the build process\n*   Details about the files and dependencies that were installed, compiled, or built during the deployment\n\nBuild logs are particularly useful for debugging issues that may arise during deployment. If a deployment fails, these can help you identify the root cause of the issue.\n\nTo access build logs, click the Build Logs button from the production deployment tile in the projects overview page.\n\n![View build logs for your Vercel deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fbuttons-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![View build logs for your Vercel deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Fbuttons-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nView build logs for your Vercel deployments.\n\nBuild logs are generated at build time for all [Deployments](https://vercel.com/docs/deployments/overview). The logs are similar to your framework's [Build Command](https://vercel.com/docs/deployments/configure-a-build#build-command) output, with a few minor additions from the Vercel build system. Once a build is complete, no new logs will be recorded.\n\nIn addition to the list of build actions, you can also find errors or warnings. These are highlighted with different colors, such as yellow for warnings and red for errors. This color coding makes it flexible to investigate why your build failed and which part of your website is affected. Build logs are stored indefinitely for each deployment.\n\nBuild logs will automatically be truncated, if the total size reaches over 4MB.\n\nIf you click on the timestamp to the left of the log entry, you get a link to that log entry. This will highlight the selected log and append the line number to the URL as an anchor (`#L6`). You can then share this link with other team members to point them to a specific line in the log.\n\nYou can select multiple lines by holding the `Shift` key and clicking the timestamps. This will create a link for the content between the first and last lines (`#L6-L9`).\n\nThe log link is only accessible to [team members](https://vercel.com/docs/accounts/team-members-and-roles/managing-team-members). Anyone who is not a member or has a valid Vercel account cannot access this link.\n\n![Create a link to a log entry.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Flog-link-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Create a link to a log entry.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Flogs%2Flog-link-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nCreate a link to a log entry.\n\nThe link to build logs feature works for logs that are up to 2000 lines long.\n\nYou can use [configurable log drains](https://vercel.com/docs/observability/log-drains) to export, store, and analyze your build logs. Log drains configuration can be accessed through the Vercel dashboard or through one of our [Logging integrations](https://vercel.com/integrations#logging).",
    "title": "Accessing Build Logs",
    "description": "Learn how to use Vercel's build logs to monitor the progress of building or running your deployment, and check for possible errors or build failures.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/working-with-domains",
    "markdown": "# Working with domains\n\nWhen you create a deployment on Vercel, we automatically assign it a domain based on your project name and ending in `.vercel.app`. Your site will be available to anyone that you share the domain with.\n\nMore often than not, you will want to assign a domain to a project that reflects its nature better. You can buy a domain name either [through Vercel](#buying-a-domain-through-vercel) or [through a third-party](#buying-a-domain-through-a-third-party). Depending on which option you choose, will dictate how and when you'll need to make configurations:\n\nWhen you buy a domain through Vercel, we configure and set the nameservers, which means you do not need to set any DNS records or make any configurations. It just works. In addition, if you choose to make configurations, such as setting up email, it's all maintained from the Domains tab of either your [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard. Finally, all renewals, including domain and SSL certificate renewals are automatically handled by Vercel.\n\nWhen you buy a custom domain through a third-party, you can use the [add a custom domain](https://vercel.com/docs/projects/domains/add-a-domain) workflow to configure the DNS records. If you are using Vercel's nameservers, you can manage certain settings, such as records for email providers or additional DNS records through the Domains tab of either your [Account Settings](https://vercel.com/account/domains) page (account-scoped domains) or your team's dashboard. Otherwise, you must configure nameservers and DNS records through your domain registrar.\n\nWhen you are using domains with Vercel, there are two areas of the dashboard that you may need to go to in order to configure them correctly. The first relates to your ownership and the second relates to configuring the domain for your Project:\n\n*   Domain ownership: Domains can be owned by your account or by a specific team. Account-scoped domains can be accessed from the Domains tab on your [Account Settings](https://vercel.com/account/domains) page. Team-scoped domains can be accessed from the Domains tab on your team's dashboard. All your domains, regardless of where they are registered, are _listed_ here and are owned by you. If you are using Vercel's nameservers, which is the case by default if you buy your domain through Vercel, you can manage DNS records, custom nameservers, and SSL certificates here. Domains that are registered by a third-party should manage DNS records and nameservers with the third-party.\n    \n*   Project assignment: This is accessed by selecting the project that you wish to assign the domain to and navigating to Settings > Domains. From here you can add an apex domain or subdomain to the Project. When a user visits your domain, they will see the most recent production deployment of your site, unless you [assign the domain to a Git branch](https://vercel.com/docs/projects/domains/assign-domain-to-a-git-branch) or [add redirection](https://vercel.com/docs/projects/domains/deploying-and-redirecting).\n    \n\nWhen you add a domain to Vercel for the first time, it will appear as an **apex domain** in your **Domains** tab. If you add that domain (for example, `yourdomain.com`, or `docs.yourdomain.com`) to a project on a different Vercel scope, that domain will require a TXT Verification step and will only show up at the project level. The **apex domain** will still appear in the original account's **Domains** tab.\n\nManaging your domains under your account provides an additional layer of protection over managing them under a team. Your account will always be yours, no matter what, whereas teams can transfer ownership to different users. If the domains should always be owned and paid for by _you_, they belong under your account. If the domains should always be owned and paid for by the team (regardless of who owns the team in the future), they belong under the team.\n\nThe apex domain is the root-level domain, such as `acme.com`. When you add an apex domain, Vercel will recommend that you add a [redirect](https://vercel.com/docs/projects/domains/deploying-and-redirecting#redirecting-www-domains) to a `www` subdomain. This is because `www` records allow for better control over your domain. Anything configured on the apex domain (for example, cookies or CAA records), will usually apply to all subdomains, rather than setting it on the `www` subdomain, which will only apply to your `www` record. In addition, because Vercel's servers use anycast networking, it can handle CNAME records differently, allowing for quicker DNS resolution and therefore a faster website experience for the end user.\n\nA subdomain is a more specific part of that domain that can be assigned to a particular part of your site, for example, `blog.acme.com`, `help.acme.com`. This helps to blend both your brand, with the specificity of where the user may need to go. To add a subdomain to your Project, follow the instructions in the [Add a custom domain](https://vercel.com/docs/projects/domains/add-a-domain#subdomains) doc. If you have bought the domain through Vercel, you can also [point a subdomain to an external service](https://vercel.com/guides/pointing-subdomains-to-external-services) through the Domains section of the dashboard. Subdomains are set through a _CNAME_ DNS record.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Furl-structure.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nImage showing the fully-qualified domain name (FQDN).\n\nYou can also configure wildcard domains. Using a wildcard domain, such as `*.acme.com`, is a way to scale and customize your project on Vercel. Rather than specifying a particular subdomain, you can add a wildcard domain to your project, and then will need to set the nameservers to the intended nameservers, allowing the domain to be resolved. See the [static.fun](https://github.com/vercel/static-fun) example to see how to use Wildcard domains on Vercel.\n\nTo add a wildcard domain, follow the steps in [Adding a domain](https://vercel.com/docs/projects/domains/add-a-domain#using-wildcard-domain).\n\nWildcard domains must be configured with the [nameservers method](https://vercel.com/docs/projects/domains/add-a-domain#vercel-nameservers). This is because in order to generate the wildcard certificates, Vercel needs to be able to set DNS records, since the service that Vercel uses to generate those requires us to solve a challenge to verify ownership.\n\nWhen you create a domain, you may want to also set up a way for users to contact you through an email address that is pointed at that domain. Vercel does not provide a mail service for domains purchased with or transferred into it.\n\nBecause many domain providers do not offer a mail service, several third-party services specifically offer this type of functionality and are enabled by adding MX records. Examples of this type of service include [ImproxMX](https://improvmx.com/) and [Forward Email](https://forwardemail.net/en), however there are many more options available. For each provider, different DNS records are required to be added. For information on how to set up email, see [How do I send and receive emails with my Vercel purchased domain?](https://vercel.com/guides/using-email-with-your-vercel-domain)\n\n[Invalid domain configurations](https://vercel.com/docs/projects/domains/troubleshooting#misconfigured-domain-issues) are one of the most common types of domain issues on Vercel. To learn more about other common domain issues, see the [troubleshooting](https://vercel.com/docs/projects/domains/troubleshooting#common-domain-issues) doc.",
    "title": "Working with domains",
    "description": "Learn how domains work and the options Vercel provides for managing them.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/directory-listing",
    "markdown": "# Using the Directory Listing\n\nThe Directory Listing setting enables you to display the contents of a directory when a user visits its path. For example, if you create a directory at the root of your project called `/assets`, then when people visit `https://your-site.com/assets`, they will see the files and folders within that directory, as shown in the example below:\n\n![The contents of a /assets directory.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701796879%2Ffront%2Fdocs%2Fprojects%2Fdirectory-listing-page-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The contents of a /assets directory.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701797094%2Ffront%2Fdocs%2Fprojects%2Fdirectory-listing-dark2.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe contents of a /assets directory.\n\nYou can enable or disable Directory Listing from the Advanced tab in your project settings.\n\n![Directory Listing for an example /assets directory.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701796234%2Ffront%2Fdocs%2Fprojects%2Fdirectory-listing-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Directory Listing for an example /assets directory.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701796234%2Ffront%2Fdocs%2Fprojects%2Fdirectory-listing-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDirectory Listing for an example /assets directory.\n\nWhen enabled, the Directory Listing will be displayed. When disabled, a \"Not Found\" error will be displayed with status code `404`.\n\nIf Directory Listing isn't working, navigate to your deployment in the dashboard and select the **Source** tab to view the contents of your project. Ensure the expected directory and files are listed.\n\nTo prevent Directory Listing for a specific path, you can either:\n\n*   Add an index file with any extension except `.css`, such as `index.html`. This file will be displayed instead of the Directory Listing\n*   Or, [set up a custom 404 error](https://vercel.com/guides/custom-404-page)",
    "title": "Using the Directory Listing",
    "description": "The Directory Listing is served when a particular path is a directory and does not contain an index file. Learn how to toggle and disable it in this guide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/builds/package-managers",
    "markdown": "# Package Managers\n\nVercel will automatically detect the package manager used in your project and install the dependencies when you [create a deployment](https://vercel.com/docs/deployments/builds#build-process). It does this by looking at the lock file in your project and inferring the correct package manager to use.\n\nIf you are using [Corepack](https://vercel.com/docs/deployments/configure-a-build#corepack), Vercel will use the package manager specified in the `package.json` file's `packageManager` field instead.\n\nThe following table lists the package managers supported by Vercel, with their install commands and versions:\n\nWhile Vercel automatically selects the package manager based on the lock file present in your project, the specific version of that package manager is determined by the version information in the lock file or associated configuration files.\n\nThe npm and pnpm package managers create a `lockfileVersion` property when they generate a lock file. This property specifies the lock file's format version, ensuring proper processing and compatibility. For example, a `pnpm-lock.yaml` file with `lockfileVersion: 9.0` will be interpreted by pnpm 9, while a `pnpm-lock.yaml` file with `lockfileVersion: 5.4` will be interpreted by pnpm 7.\n\n| Package Manager | Condition | Install Command | Version Used |\n| --- | --- | --- | --- |\n| pnpm | `pnpm-lock.yaml`: present | `pnpm install` | Varies |\n|     | `lockfileVersion`: 9.0 | \\-  | pnpm 9 |\n|     | `lockfileVersion`: 6.0/6.1 | \\-  | pnpm 8 |\n|     | `lockfileVersion`: 5.3/5.4 | \\-  | pnpm 7 |\n|     | Otherwise | \\-  | pnpm 6 |\n| npm | `package-lock.json`: present | `npm install` | Varies |\n|     | `lockfileVersion`: 2 | \\-  | npm 8 |\n|     | Node 16 | \\-  | npm 8 |\n|     | Node 18 | \\-  | npm 10 |\n|     | Node 20 | \\-  | npm 10 |\n| Bun | `bun.lockb`: present | `bun install` | Bun 1 |\n| Yarn | `yarn.lock`: present | `yarn install` | Yarn 1 |\n\nWhen no lock file exists, Vercel uses npm by default. Npm's default version aligns with the Node.js version as described in the table above. Defaults can be overridden using [`installCommand`](https://vercel.com/docs/projects/project-configuration#installcommand) or [Corepack](https://vercel.com/docs/deployments/configure-a-build#corepack) for specific package manager versions.\n\nYou can manually specify a package manager to use on a per-project, or per-deployment basis.\n\nTo specify a package manager for all deployments in your project, use the Override setting in your project's [Build & Development Settings](https://vercel.com/docs/deployments/configure-a-build#build-and-development-settings):\n\n1.  Navigate to your [dashboard](https://vercel.com/dashboard) and select your project\n2.  Select the Settings tab\n3.  From the left navigation, select General\n4.  Enable the Override toggle in the [Build & Development Settings](https://vercel.com/docs/deployments/configure-a-build#build-and-development-settings) section and add your install command. Once you save, it will be applied on your next deployment\n\nWhen using an override install command like `pnpm install`, Vercel will use the oldest version of the specified package manager available in the build container. For example, if you specify `pnpm install` as your override install command, Vercel will use pnpm 6.\n\nTo specify a package manager for a deployment, use the [`installCommand`](https://vercel.com/docs/projects/project-configuration#installcommand) property in your projects `vercel.json`.\n\n```\n{\n  \"installCommand\": \"pnpm install\"\n}\n```",
    "title": "Package Managers",
    "description": "Discover the package managers supported by Vercel for dependency management. Learn how Vercel detects and uses npm, Yarn, pnpm, and Bun for optimal build performance.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/streaming",
    "markdown": "# Streaming Data on Vercel\n\nVercel Functions support streaming responses, allowing you to render parts of the UI as they become ready. This lets users interact with your app before the entire page finishes loading by populating the most important components first. Common use-cases include:\n\n*   Ecommerce: Render the most important product and account data early, letting customers shop sooner\n*   AI applications: Streaming responses from AIs powered by LLMs lets you display response text as it arrives rather than waiting for the full result\n\nHTTP responses typically send the entire payload to the client all at once. This approach can sometimes result in a slow user experience if the data is large or computationally intense.\n\n![How responses and requests typically flow between client and server, with the response sent in one large batch.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695123926%2Ffront%2Fdocs%2Fedge-network%2Fstreaming-in-serverless-and-edge-functions%2Fbasic-chunk-top-split-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![How responses and requests typically flow between client and server, with the response sent in one large batch.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695123928%2Ffront%2Fdocs%2Fedge-network%2Fstreaming-in-serverless-and-edge-functions%2Fbasic-chunk-top-split-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nHow responses and requests typically flow between client and server, with the response sent in one large batch.\n\nThe Web Streams API enables you to stream chunks of the payload as they become available, improving your users' perception of how fast data is loading. It is supported in [most major web browsers](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API#browser_compatibility) and popular runtimes, such as [Node.js](https://nodejs.org/api/webstreams.html#web-streams-api) and [Deno](https://deno.com/blog/deploy-streams).\n\nThe Web Streams API helps you:\n\n*   [Break large data into chunks](#understanding-chunks): Chunks are portions of data sent over time\n*   [Handle backpressure](#understanding-backpressure): Backpressure occurs when chunks are streamed from the server faster than they can be processed in the client, causing a backup of data\n*   Build more responsive apps: Rendering your UI progressively as data chunks arrive can improve your users' perception of your app's performance\n\nChunks in web streams are fundamental data units that can be of many different types depending on the content, such as `String` for text or `Uint8Array` for binary files. Standard Function responses contain full payloads of data, while chunks are pieces of the payload that get streamed to the client as they're available.\n\nFor example, imagine you want to create an AI chat app that uses a Large Language Model to generate replies. Due to their large data sets, replies from language models can generate slowly.\n\nStandard Function responses require you send the full reply to the client when it's done, but streaming enables you to show each word of the reply as the model generates it, improving users' perception of your chat app's speed.\n\n![How streamed responses typically work, with data sent continuously in small chunks.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695123926%2Ffront%2Fdocs%2Fedge-network%2Fstreaming-in-serverless-and-edge-functions%2Fbasic-chunk-bottom-split-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![How streamed responses typically work, with data sent continuously in small chunks.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1695123927%2Ffront%2Fdocs%2Fedge-network%2Fstreaming-in-serverless-and-edge-functions%2Fbasic-chunk-bottom-split-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nHow streamed responses typically work, with data sent continuously in small chunks.\n\nChunk sizes can be out of your control, so it's important that your code can handle chunks of any size. Chunks sizes are influenced by the following factors:\n\n*   Data source: Sometimes the original data is already broken up. For example, OpenAI's language models produce responses in [tokens](https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them), or chunks of words\n*   Stream implementation: The server could be configured to stream small chunks quickly or large chunks at a lower pace\n*   Network: Factors like a network's Maximum Transmission Unit setting, or its geographical distance from the client, can cause chunk fragmentation and limit chunk size\n    *   In local development, chunk sizes won't be impacted by network conditions, as no network transmission is happening\n\nFor an example Function that processes chunks, see [Streaming Examples](https://vercel.com/docs/functions/streaming/streaming-examples#processing-data-chunks).\n\nOnce you understand how to deal with chunks of different sizes, you must understand how to deal with chunks arriving faster than you can process them in the client.\n\nWhen the server streams data faster than the client can process it, excess data will queue up in the client's memory. This issue is called backpressure, and it can lead to memory overflow errors, or data loss when the client's memory reaches capacity.\n\nFor example, popular social media users can receive hundreds of notifications streamed to their web client per second. If their web client can't render the notifications fast enough, some may be lost, or the client may crash if its memory overflows.\n\n![A diagram of backpressure.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694007750%2Fdocs-assets%2Fstatic%2Fdocs%2Fedge-network%2Fback-pressure-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A diagram of backpressure.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694007751%2Fdocs-assets%2Fstatic%2Fdocs%2Fedge-network%2Fbackpressure-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA diagram of backpressure.\n\nYou can handle backpressure with a technique called flow control. This technique manages data transfer rates between two nodes to avoid overwhelming a slow receiver.\n\nFor an example of how to handle backpressure, see [Streaming Examples](https://vercel.com/docs/functions/streaming/streaming-examples#handling-backpressure).\n\n*   To get started streaming on Vercel, see [Streaming Quickstart](https://vercel.com/docs/functions/streaming/quickstart)\n*   For more detailed code, see [Streaming Examples](https://vercel.com/docs/functions/streaming/streaming-examples)\n\nSome frameworks, like Next.js and SvelteKit, have built-in functionality for streaming UI components. Doing so allows you to specify components that should be rendered with streaming data without needing a Function.\n\nSee the following docs to learn more about streaming UI components with your preferred framework:\n\nMost, but not all, functions allow you to stream responses. Streaming functions can be used in the following contexts:\n\n*   [Functions using the `edge` runtime](https://vercel.com/docs/functions/runtimes#edge)\n    *   These functions must begin sending a response within 25 seconds. After the initial response begins, you can continuously stream the response with no time limit\n    *   Your streamed response size [cannot exceed Vercel's memory allocation limit of 128 MB](https://vercel.com/docs/functions/edge-functions/limitations#memory)\n*   Node.js Functions when using the following frameworks:\n*   Node.js functions using the Web Handler signature:\n    \n    ```\n    export const dynamic = 'force-dynamic'; // static by default, unless reading the request\n     \n    export function GET(request: Request) {\n      return new Response(`Hello from ${process.env.VERCEL_REGION}`);\n    }\n    ```\n    \n\nYou should consider configuring the default [maximum duration](https://vercel.com/docs/functions/configuring-functions/duration) for Node.js functions to enable streaming responses for longer than the default 10 seconds on Hobby and 15 seconds on Pro and Enterprise.\n\n*   Node.js runtime functions using the Node.js handler without `supportsResponseStreaming:true`\n*   Node.js runtime functions using Next.js Pages router\n    *   Note that even if the rest of your app uses Next.js Pages Router, you can use [route handlers in the App Router](https://nextjs.org/docs/app/building-your-application/routing/route-handlers) to stream responses. Follow the App Router examples to do this\n\n```\n//Next.js App Router will always support streaming with Route Handlers\n```",
    "title": "Streaming Data on Vercel",
    "description": "Learn how Vercel enables streaming Function responses over time for e-commerce, AI, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/troubleshoot-a-build",
    "markdown": "# Troubleshooting Build Errors\n\nYou can troubleshoot build errors that occur during the Build step of your deployment to Vercel. This guide will help you understand how to investigate build failures and long build times.\n\nYou can use the following views on your dashboard to troubleshoot a build:\n\n*   Build logs - the console output when your deployment is building which can be found under the Deployment Status section of the Project's Deployment page\n*   Source tab - the output of the build after the deployment is successful. This can also be accessed by appending `/_src` to the Deployment URL\n*   Functions tab - the live console output for Serverless Functions at runtime (if your project uses this feature). This can also be accessed by appending `/_logs` to the Deployment URL\n\nYou can navigate to these views from the Deployment page by clicking on the Source tab, the Functions tab or the Building accordion as shown below.\n\n![Access Functions and Building Logs view from the Deployment page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Faccess-logs-view-v2-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Access Functions and Building Logs view from the Deployment page.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Faccess-logs-view-v2-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAccess Functions and Building Logs view from the Deployment page.\n\nIf your build fails, Vercel will report the error message on the Deployments page so that you can investigate and fix the underlying issue.\n\nIn the following we show you how to look up the error message of your failed build.\n\n[Build logs](https://vercel.com/docs/deployments/logs) provide you with an insight into what happened during the build of a deployment and can be accessed by:\n\n1.  From your Vercel dashboard, select the project and then the [Deployments](https://vercel.com/docs/projects/project-dashboard#deployments) tab\n    \n2.  Select the deployment. When there are build issues you will notice an error status next to deployment name\n    \n    ![Error status on the Deployments tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-deploy-overview-page-02-1.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Error status on the Deployments tab.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-deploy-overview-page-02-1-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Error status on the Deployments tab.\n    \n3.  On the errored deployment's page, you will see a summary of the error in the preview section. In the Deployment Details section, expand the Building accordion to expand the logs. There are situations where [build logs are not available](#build-logs-not-available), in this scenario the error will be presented in the UI instead.\n    \n4.  Scroll down in the build logs until you find a red section where the keyword \"Error\" is mentioned. It can be mentioned once or multiple times. In many cases, the last mention is not indicative like in the example below where it says `yarn run build exited with 1`. If you look a few lines above, you will see an additional error which in this case indicates where the problem is with a link for more details. Sometimes, an error may not be mentioned in the lines above but the output will often help you identify where the problem is.\n    \n    ![Error in the logs of the Building accordion.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-deploy-overview-page-03.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Error in the logs of the Building accordion.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-deploy-overview-page-03.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Error in the logs of the Building accordion.\n    \n\nIt is recommended to build your project on your local machine first (the build command varies per project) before deploying on Vercel. This will catch issues specific to your code or to your project's dependencies. In the example above, when the command `npm run build` (that runs `next build`) is run in the local console for a Next.js project, the error happens after building locally.\n\n![Error in local console.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-console.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Error in local console.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-console.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nError in local console.\n\nBuilds can fail without providing any build logs when Vercel detects a missing precondition that prevents a build from starting. For example:\n\n*   An invalid [`vercel.json` configuration](https://vercel.com/docs/projects/project-configuration) was committed\n*   When using [Ignored Build Steps](https://vercel.com/guides/how-do-i-use-the-ignored-build-step-field-on-vercel)\n*   Commits were made from a contributor that is not a [team member](https://vercel.com/docs/accounts/team-members-and-roles)\n\nIn this case, you cannot access the Building accordion described above, and instead, Vercel will present an overlay that contains the error message.\n\n![Build logs not available for a deployment.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-no-logs-v2-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Build logs not available for a deployment.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-error-no-logs-v2-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nBuild logs not available for a deployment.\n\nSometimes, your Deployment Build can hit platform limits so that the build will be cancelled and throw a corresponding error that will be shown in the Build logs. Review the limits below in case you run into them.\n\nEvery Build is provided with the following resources:\n\n|     | Hobby | Pro | Enterprise |\n| --- | --- | --- | --- |\n| Memory | 8192 MB | 8192 MB | Custom |\n| Disk space | 13 GB | 13 GB | Custom |\n| CPUs | 2   | 4   | Custom |\n\nFor Hobby and Pro customers, these limits are fixed, but Enterprise customers can purchase enhanced builds with larger memory and storage. Exceeding the memory or disk space allocations limits cancels the build and triggers a system report in your [Build logs](https://vercel.com/docs/deployments/logs), identifying memory and disk space issues.\n\nBy default, the system generates this report only when it detects a problem. To receive a report for every deployment, set `VERCEL_BUILD_SYSTEM_REPORT=1` as an [environment variable](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable).\n\nThis report helps you detect hidden Out of Memory (OOM) events, and provides insights into disk usage by breaking down the sizes of your source code, `node_modules`, and output, and flagging files over 100 MB. The input size in the report corresponds to the size of your checked-out repository or files uploaded by CLI. The `node_modules` size represents the total size of all `node_modules` folders on disk.\n\n| Resource | Allocation | Description |\n| --- | --- | --- |\n| Memory | 8192 MB | Fixed memory allocation. Builds exceeding this limit will be cancelled |\n| CPUs | 4   | Number of CPUs allocated for build processing |\n| Disk Space | 13 GB | Fixed disk space allocation. Builds exceeding this limit will be cancelled |\n| System Report | Conditional | Generated in [Build logs](https://vercel.com/docs/deployments/logs) when memory or disk space limits are reached. Available by default |\n| Forced Reporting | Optional | Set `VERCEL_BUILD_SYSTEM_REPORT=1` as an [environment variable](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) to enable reporting for all builds |\n\nReview the below steps to help navigate this situation:\n\n*   Review what package the error is related to and explore the package's documentation to see if the memory allocation can be customized with an install or Build command\n*   If no package is specified, look into reducing the amount of JavaScript that your Project might be using or find a more efficient JavaScript bundler\n*   Review what you are importing in your code such as third-party services, icons and media files\n\nThe total build duration is shown on the Vercel Dashboard and includes all three steps: building, checking, and assigning domains. Each step also shows the individual duration.\n\nA Build can last for a maximum of 45 minutes. If the build exceeds this time, the deployment will be canceled and the error will be shown on the Deployment's Build logs. If you run into this limit, review this [guide](https://vercel.com/guides/how-do-i-reduce-my-build-time-with-next-js-on-vercel) that explains how to reduce the Build time with a Next.js Project.\n\nThe maximum size of the Build's cache is 1 GB. It is retained for one month and it applies at the level of each [Build cache key](#caching-process).\n\nIt is not possible to manually configure which files are cached at this time.\n\nYou may come across the following Build-specific errors when deploying your Project. The link for each error provides possible causes of the error that can help you troubleshoot.\n\nA 'module not found' error is a syntax error that will appear at build time. This error appears when the static import statement cannot find the file at the declared path. For more information, see [How do I resolve a 'module not found' error?](https://vercel.com/guides/how-do-i-resolve-a-module-not-found-error)\n\nThe first Build in a Project will take longer as the Build cache is initially empty. Subsequent builds that have the same [Build cache key](#caching-process) will take less time because elements from your build, such as [framework files and node modules](#what-is-cached), will be reused from the available cache. The next sections will describe the factors that affect the Build cache to help you decrease the Build time\n\nVercel caches files based on the [Framework Preset](https://vercel.com/docs/deployments/configure-a-build#framework-preset) selected in your [Project settings](https://vercel.com/docs/projects/overview#project-settings). The following files are cached in addition to `node_modules/**`, `yarn.lock`, and `package-lock.json`.\n\n| Framework | Cache Pattern |\n| --- | --- |\n| Next.js | `.next/cache/**` |\n| Nuxt.js | `.nuxt/**` |\n| Gatsby.js | `{.cache,public}/**` |\n| Eleventy | `.cache/**` |\n| Jekyll | `{vendor/bin,vendor/cache,vendor/bundle}/**` |\n| Middleman | `{vendor/bin,vendor/cache,vendor/bundle}/**` |\n\nNote that the framework detection is dependent on the preset selection made in the [Build settings](https://vercel.com/docs/deployments/configure-a-build#build-and-development-settings). You should make sure that the correct framework is set for your project for optimum build caching.\n\nAt the beginning of each build, the previous Build's cache is restored prior to the [Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) or [Build command](https://vercel.com/docs/deployments/configure-a-build#build-command) executing. Each deployment is associated with a unique Build cache key that is derived from the combination of the following data:\n\nLet's say that under your account `MyTeam`, you have a project `MySite` that is connected to your Git repository `MyCode` on the `main` branch for the production environment. When you make a commit to the `main` branch for the first time, you trigger a build that creates a production deployment with a new unique cache key. For any new commits to the `main` branch of `MyCode`, the existing Build cache is used as long as `MySite` is under `MyTeam`.\n\nIf you create a new Git branch in `MyCode` and make a commit to it, there is no cache for that specific branch. In this case, the last [production Deployment](https://vercel.com/docs/deployments/environments#production) cache is used to create a preview deployment and a new branch cache is created for subsequent commits to the new branch.\n\nIf you use [Serverless Functions](https://vercel.com/docs/functions/serverless-functions) to process HTTP requests in your project, each Serverless Function is built separately in the Build step and has its own cache, based on the [Runtime](https://vercel.com/docs/functions/serverless-functions/runtimes) used. Therefore, the number and size of Serverless Functions will affect your Build time. For Next.js projects, Serverless Functions are bundled to optimize Build resources as described [here](https://vercel.com/docs/functions/serverless-functions#bundling-serverless-functions).\n\nAt the end of each Build step, successful builds will update the cache and failed builds will not modify the existing cache.\n\nSince development dependencies (for example, packages such as `webpack` or `Babel`) are not needed in production, you may want to prevent them from being installed when deploying to Vercel to reduce the Build time. To skip development dependencies, customize the [Install Command](https://vercel.com/docs/deployments/configure-a-build#install-command) to be `npm install --only=production` or `yarn install --production`.\n\nSometimes, you may not want to use the Build cache for a specific deployment. You can invalidate or delete the existing Build cache in the following ways:\n\n*   Use the Redeploy button for the specific deployment in the Project's [Deployments](https://vercel.com/docs/deployments/managing-deployments) page. In the popup window that follows, leave the checkbox Use existing Build Cache unchecked. See [Redeploying a project](https://vercel.com/docs/deployments/managing-deployments#redeploy-a-project) for more information.\n*   Use [`vercel --force`](https://vercel.com/docs/cli/deploy#force) with [Vercel CLI](https://vercel.com/docs/cli) to build and deploy the project without the Build cache\n*   Use an Environment Variable `VERCEL_FORCE_NO_BUILD_CACHE` with a value of `1` on your project to skip the Build cache\n*   Use an Environment Variable `TURBO_FORCE` with a value of `true` on your project to skip Turborepo [Remote Cache](https://vercel.com/docs/monorepos/remote-caching)\n*   Use the `forceNew` optional query parameter with a value of `1` when [creating a new deployment with the Vercel API](https://vercel.com/docs/rest-api/endpoints#create-a-new-deployment) to skip the Build cache\n\nWhen redeploying without the existing Build Cache, the Remote Cache from [Turborepo](https://turbo.build/repo/docs/core-concepts/remote-caching) and [Nx](https://nx.app/) are automatically excluded.",
    "title": "Troubleshooting Build Errors",
    "description": "Learn how to resolve common scenarios you may encounter during the Build step, including build errors that cancel a deployment and long build times.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/builds",
    "markdown": "# Manage and optimize usage for Builds\n\nLearn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage for Builds.\n\nThe Builds section shows the following charts:\n\nThe Build Time graph shows the ratio of build time vs queued time for all projects across your team on any single day.\n\nViewing by Projects provides you with a view of the total combined build time and queued time for each project that your team owns.\n\nThis chart shows the total number of builds that were triggered for all of the projects on your team, split by a ratio of Completed or Errored.\n\nViewing by Projects provides you with a view of the total number of builds for each project.\n\nWhile neither of these metrics are directly chargeable, you can pay for additional [concurrent builds](https://vercel.com/docs/deployments/concurrent-builds) if you need to run more than one build concurrently.\n\nSome other considerations to take into account when optimizing your builds include:\n\n*   [Understand](https://vercel.com/docs/deployments/troubleshoot-a-build#understanding-build-cache) and [manage](https://vercel.com/docs/deployments/troubleshoot-a-build#managing-build-cache) the build cache. By default, Vercel caches the dependencies of your project, based on your framework, to speed up the build process\n*   You may choose to [Ignore the Build Step](https://vercel.com/docs/projects/overview#ignored-build-step) on redeployments if you know that the build step is not necessary under certain conditions\n*   Use the most recent version of your runtime, particularly Node.js, to take advantage of the latest performance improvements. To learn more, see [Node.js](https://vercel.com/docs/functions/runtimes/node-js#default-and-available-versions)",
    "title": "Manage and optimize usage for Builds",
    "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage for Builds.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/build-features",
    "markdown": "# Build Features for Customizing Deployments\n\nVercel provides the following features to customize your deployments:\n\n*   [Private npm packages](#private-npm-packages)\n*   [Ignored files and folders](#ignored-files-and-folders)\n*   [Special paths](#special-paths)\n*   [Git submodules](#git-submodules)\n\nWhen your project's code is using private `npm` modules that require authentication, you need to perform an additional step to install private modules.\n\nTo install private `npm` modules, define `NPM_TOKEN` as an [Environment Variable](https://vercel.com/docs/projects/environment-variables) in your project. Alternatively, define `NPM_RC` as an [Environment Variable](https://vercel.com/docs/projects/environment-variables) in the contents of the project's npmrc config file that resides at the root of the project folder and is named `~/.npmrc`. This file defines the config settings of `npm` at the level of the project.\n\nTo learn more, check out the [guide here](https://vercel.com/guides/using-private-dependencies-with-vercel) if you need help configuring private dependencies.\n\nVercel ignores certain files and folders by default and prevents them from being uploaded during the deployment process for security and performance reasons. Please note that these ignored files are only relevant when using Vercel CLI.\n\n```\n.hg\n.git\n.gitmodules\n.svn\n.cache\n.next\n.now\n.vercel\n.npmignore\n.dockerignore\n.gitignore\n.*.swp\n.DS_Store\n.wafpicke-*\n.lock-wscript\n.env.local\n.env.*.local\n.venv\nnpm-debug.log\nconfig.gypi\nnode_modules\n__pycache__\nvenv\nCVS\n```\n\nA complete list of files and folders ignored by Vercel during the Deployment process.\n\nThe `.vercel/output` directory is not ignored when [`vercel deploy --prebuilt`](https://vercel.com/docs/cli/deploying-from-cli#deploying-from-local-build-prebuilt) is used to deploy a prebuilt Vercel Project, according to the [Build Output API](https://vercel.com/docs/build-output-api/v3) specification.\n\nYou do not need to add any of the above files and folders to your `.vercelignore` file because it is done automatically by Vercel.\n\nVercel allows you to access the source code and build logs for your deployment using special pathnames for Logs and Source Protection. You can access this option from your project's Security settings.\n\nAll deployment URLs have two special pathnames to access the source code and the build logs:\n\n*   `/_src`\n*   `/_logs`\n\nBy default, these routes are protected so that they can only be accessed by you and the members of your Vercel Team.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Flogs-and-sources-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fbuild-step%2Flogs-and-sources-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nLogs and Source Protection is enabled by default.\n\nBy appending `/_src` to a Deployment URL or [Custom Domain](https://vercel.com/docs/projects/domains/add-a-domain) in your web browser, you will be redirected to the Deployment inspector and be able to browse the sources and [build](https://vercel.com/docs/deployments/configure-a-build) outputs.\n\nBy appending `/_logs` to a Deployment URL or [Custom Domain](https://vercel.com/docs/projects/domains/add-a-domain) in your web browser, you will be able to see a real-time stream of logs from your deployment build processes by clicking on the Building accordion and Serverless Function invocations by clicking on the Functions tab.\n\nThe pathnames `/_src` and `/_logs` redirect to `https://vercel.com` and require logging into your Vercel account to access any sensitive information. By default, a third-party can never access your source or logs by crafting a deployment URL with one of these paths.\n\nYou can configure these paths to make them publicly accessible under the Security tab on the Project Settings page. You can learn more about making paths publicly accessible in the [Logs and Source Protection](https://vercel.com/docs/projects/overview#logs-and-source-protection) section.\n\nOn Vercel, you can deploy [Git submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules) with a [Git provider](https://vercel.com/docs/deployments/git) as long as the submodule is publicly accessible through the HTTP protocol. Git submodules that are private or requested over SSH will fail during the Build step. However, you can reference private repositories formatted as npm packages in your `package.json` file dependencies. Private repository modules require a special link syntax that varies according to the Git provider. For more information on this syntax, see \"[How do I use private dependencies with Vercel?](https://vercel.com/guides/using-private-dependencies-with-vercel)\".",
    "title": "Build Features for Customizing Deployments",
    "description": "Learn how to customize your deployments using Vercel's build features.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/project-configuration/global-configuration",
    "markdown": "# Global Configuration\n\nUsing the following files and configuration options, you can configure [Vercel CLI](https://vercel.com/cli) under your system user.\n\nThe two global configuration files are: `config.json` and `auth.json`. These files are stored in the `com.vercel.cli` directory inside [`XDG_DATA_HOME`](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html), which defaults to:\n\n*   Linux: `~/.local/share/com.vercel.cli`\n*   macOS: `~/Library/Application Support/com.vercel.cli`\n*   Windows: `%APPDATA%\\Roaming\\xdg.data\\com.vercel.cli`\n\nThese files are automatically generated by Vercel CLI, and shouldn't need to be altered.\n\nThis file is used for global configuration of Vercel deployments. Vercel CLI uses this file as a way to co-ordinate how deployments should be treated, consistently.\n\nThe first option is a single `_` that gives a description to the file, if a user should find themselves looking through it without context.\n\nThe following options are all of the options that can be used by users to configure their Vercel deployments globally on their system for that user profile:\n\nType: `String`.\n\nValid values: A [team ID](https://vercel.com/docs/accounts/create-a-team#find-your-team-id).\n\nThis option tells [Vercel CLI](https://vercel.com/cli) which context is currently active. If this property exists and contains a team ID, that team is used as the scope for deployments, otherwise if this property does not exist, the user's Hobby account is used.\n\n```\n{\n  \"currentTeam\": \"team_ofwUZockJlL53hINUGCc1ONW\"\n}\n```\n\nType: `Boolean`.\n\nValid values: `true` (default), `false`.\n\nThis option defines whether [Vercel CLI](https://vercel.com/cli) should collect anonymous metrics about which commands are invoked the most, how long they take to run, and which errors customers are running into.\n\n```\n{\n  \"collectMetrics\": true\n}\n```\n\nThis file should not be edited manually. It exists to contain the authentication information for the Vercel clients.\n\nIn the case that you are uploading your global configuration setup to a potentially insecure destination, we highly recommend ensuring that this file will not be uploaded, as it allows an attacker to gain access to your provider accounts.",
    "title": "Global Configuration",
    "description": "Learn how to configure Vercel CLI under your system user.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/deploy-button",
    "markdown": "# Working with the Deploy Button\n\nThe Deploy Button allows users to deploy a new project through the Vercel Project creation flow, while cloning the source Git repository to GitHub, GitLab, or Bitbucket.\n\nYou can [create your Deploy Button with the generator below](#generate-your-own).\n\nThe Vercel Project creation flow allows users to deploy a Git repository, create a project with Vercel, and clone the source repository into their GitHub, GitLab, or Bitbucket account.\n\nWith the Vercel Project creation flow, you can add various URL query parameters to control the experience a user will have, depending on the requirements of your project.\n\n[![](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world)\n\nAn example Deploy Button using the following\n\n[HTML snippet](#snippets).\n\nUse the snippets below in your Git repositories or your dashboards for users to deploy.\n\n\\[!\\[Deploy with Vercel\\](https://vercel.com/button)\\](https://vercel.com/new/clone?**repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fhello-world**)\n\nA Markdown snippet that shows a linked Deploy Button.\n\nCustomize the above Deploy Button [snippets](#snippets) starting with a public Git repository URL from GitHub, GitLab, or Bitbucket.\n\nYou can customize the Project creation flow and created project with the following additional settings. For more information see the [URL Parameter Reference](#url-parameter-reference).\n\nEnvironment Variables\n\nDefine Environment Variable Keys that the Git repository needs to deploy successfully. The values will be filled in by the user.\n\nEnvironment Variables Keys\n\nLearn more about [the Environment Variable parameters →](#required-environment-variables)\n\n* * *\n\nAdd a description with additional information and a link to documentation that helps users understand what they are providing values for.\n\nEnvironment Variables Description\n\nEnvironment Variables Link\n\nDefaults\n\nIf you're setting up a project on behalf of the user and already know what name the user likely wants, enter a default project name. Additionally, fill this in for the repository name.\n\n* * *\n\nSet a default repository name for the new Git repository created by the user in the Project creation flow.\n\nDefault Project Name\n\nDefault Git Repository Name\n\nRedirect\n\nThe Redirect URL parameter allows you to redirect the user back to your platform on the event of a successful deployment and receive information on the created project.\n\nRedirect URL\n\nLearn more about [the Redirect URL parameter →](#callback/redirect-url)\n\n* * *\n\nSet a Developer ID to show a logo and name from an [Integration](https://vercel.com/docs/integrations) by using its Client ID, found in the Integration Developer Console.\n\nDeveloper ID\n\nLearn more about [the Developer ID parameter →](#developer-id)\n\n* * *\n\nSet a name for a [Deploy Hook](https://vercel.com/docs/deployments/deploy-hooks) to receive a Deploy Hook URL in return when redirecting the user from the Project creation flow.\n\nDeploy Hook Name\n\nLearn more about [the Deploy Hook parameter →](#deploy-hook)\n\nDemo\n\nTo showcase a successful deployment to the user clicking a Deploy Button, you can customize the Project creation flow's landing page with a **Demo Card**.\n\nThe Demo Card contains a title, a description, an image, and a link. All of them are required for the Demo Card to show on the page.\n\n* * *\n\nDemo Title\n\nLearn more about [the Demo Title parameter →](#demo-title)\n\nDemo Description\n\nLearn more about [the Demo Description parameter →](#demo-description)\n\nDemo URL\n\nLearn more about [the Demo URL parameter →](#demo-url)\n\nDemo Image\n\nLearn more about [the Demo Image parameter →](#demo-image)\n\nIntegrations\n\nIntegrations let you connect your Vercel Project with third-party services to automate aspects of your workflow.\n\nWhen Integrations IDs are specified, the corresponding [Integrations](https://vercel.com/docs/integrations) are required to be installed for the Vercel Project. If needed, they can also be marked as optional using the [Optional Integrations parameter](#optional-integrations).\n\nIntegration IDs can be found in the [Integrations Console](https://vercel.com/dashboard/integrations/console).\n\nIntegration IDs\n\nLearn more about [Integrations →](#integrations)\n\n* * *\n\nAdditionally, you can specify an external ID or reference that will be passed to the [Redirect URL](https://vercel.com/docs/integrations#o-auth-integrations/hybrid-mode) of each of the required Integrations.\n\nExternal ID\n\nLearn more about [the External ID parameter →](#external-id)\n\n* * *\n\n​Allow for skipping Integrations or adding only one of them\n\nLearn more about [the Optional Integrations parameter →](#optional-integrations)",
    "title": "Working with the Deploy Button",
    "description": "Deploy public Git projects with the Deploy Button, and set up new projects with Vercel and GitHub, GitLab, or Bitbucket",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/og-preview",
    "markdown": "# Inspecting your Open Graph metadata\n\nYou can use the Open Graph tab on every deployment on Vercel to validate and view your [Open Graph (OG)](https://ogp.me/) data across a range of social media sites before you share it out. Routes using [Deployment Protection](https://vercel.com/docs/deployments/deployment-protection) can also be inspected.\n\nTo view your data:\n\n1.  Choose your account or team from the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector)\n2.  Select your project and go to the Deployments tab\n3.  From the Deployments tab, select the deployment you wish to view the metadata for\n4.  Select the Open Graph tab:\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fog-tab-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fog-tab-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n5.  From here, you can view the metadata and a preview for [Twitter](https://vercel.com/docs/deployments/og-preview#twitter-specific-metadata), Slack, Facebook, and LinkedIn for [specific pages](https://vercel.com/docs/deployments/og-preview#filter-by-pathname) in your deployment\n\nYou can use the Path dropdown to view the OG card for any page on that particular deployment.\n\nThese properties set by the [Open Graph protocol](https://ogp.me/#metadata).\n\n| Property | Value | Description |\n| --- | --- | --- |\n| `title` | The title tag used to name the page. 70 characters max. | This is used by default if no other values are passed. |\n| `description` | The meta.description tag used to describe the page. 200 characters max. | This is used by default if no other values are passed. |\n| `og:image` | Absolute URL to image. | Use the [OG Image Generation](https://vercel.com/docs/functions/edge-functions/og-image-generation) documentation to create new images. |\n| `og:title` | A title for link previews. | You can use this to override the meta title if you want the OG title to be different. |\n| `og:description` | A one to two sentence description for link previews. | You can use this to override the meta description if you want the OG title to be different. |\n| `og:url` | A canonical URL for link previews. | You should provide the absolute URL. |\n\n```\n<div>\n  <head>\n    <meta name=\"og:title\" content=\"Vercel Edge Network\" />\n    <meta name=\"og:description\" content=\"Vercel Edge Network\" />\n    <meta name=\"og:image\" content={ // Because OG images must have a absolute\n    URL, we use the // `VERCEL_URL` environment variable to get the deployment’s\n    URL. // More info: // https://vercel.com/docs/projects/environment-variables\n    `${ process.env.VERCEL_URL ? 'https://' + process.env.VERCEL_URL : ''\n    }/api/vercel` } />\n    <meta\n      name=\"og:url\"\n      content=\"https://vercel.com/docs/edge-network/overview\"\n    />\n  </head>\n  <h1>A page with Open Graph Image.</h1>\n</div>\n```\n\n| Property | `content` value | Additional information |\n| --- | --- | --- |\n| `twitter:image` | A URL to an image file or to a dynamically generated image. `og:image` is used as a fallback. | `JPG`,`PNG`, `WEBP` and `GIF`. `SVG` is not supported |\n| `twitter:card` | The type of card used for Twitter link previews | `summary`, `summary_large_image`, `app`, or `player` |\n| `twitter:title` | A string that shows for Twitter link previews. `og:title` is used as a fallback. | 70 characters max |\n| `twitter:description` | A description for Twitter link previews. `og:description` is used as a fallback. | 200 characters max |\n\n```\n<div>\n  <head>\n    <meta name=\"twitter:title\" content=\"Vercel Edge Network for Twitter\" />\n    <meta\n      name=\"twitter:description\"\n      content=\"Vercel Edge Network for Twitter\"\n    />\n    <meta\n      name=\"twitter:image\"\n      content=\"https://og-examples.vercel.sh/api/static\"\n    />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  </head>\n  <h1>A page with Open Graph Image.</h1>\n</div>\n```",
    "title": "Inspecting your Open Graph metadata",
    "description": "Learn how to inspect and validate your Open Graph metadata through the Open Graph deployment tab.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/dashboard-features/overview",
    "markdown": "# Navigating the Dashboard\n\nWhen you sign in to Vercel through your browser, you'll be presented with the dashboard. Any subsequent visits to [vercel.com](https://vercel.com/) will automatically direct you to the dashboard.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Foverview%2Fdashboard-projects-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Foverview%2Fdashboard-projects-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn overview of your project cards in the Vercel dashboard.\n\nYour dashboard view shows a list of all projects and repositories that belong to your account or team, depending on the [scope selected](https://vercel.com/docs/dashboard-features#scope-selector).\n\nYou can use the toggle to change the view between a grid view and list view. Your viewing preference is saved to your account, so if you access your account on another machine, you'll see the same view each time.\n\nThe list view is particularly useful for monorepo users and those using [Conformance](https://vercel.com/docs/workflow-collaboration/conformance), as you will be able to quickly identify and manage all projects and deployments that belong to a single repository.\n\nProjects are organized by Git repository and are sorted by date, with the most recent deployment shown first. Projects with no Git connections are listed separately. Each card in the view shows:\n\n*   The deployed URL\n*   Information about the last commit\n*   The analytics score for any deployments using Analytics\n\nWhen in list view, you'll also have an option to View Logs and Manage Domains.\n\nYou can select any project to bring up its Project Dashboard, which allows you to view information about its deployments and configure its settings.\n\nLearn more in [our project dashboard docs](https://vercel.com/docs/projects/project-dashboard).\n\nUse the searchbar to search for the name of any deployed project.\n\nFor accounts on a Hobby plan, you can either create a new team or a new project.\n\nFor members of a team, depending on your permissions, you can use the Add New… button to add a new project, domain, or team Member.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Foverview%2Fdropdown-light.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Foverview%2Fdropdown-dark.png&w=750&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Add New drop-down to create a new project, domain, or team member.",
    "title": "Navigating the Dashboard",
    "description": "Learn how to select a scope, change the Project view, use search, or create a new project, all within the Vercel dashboard.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/observability/webhooks-overview",
    "markdown": "# Setting Up Webhooks\n\nA webhook is a trigger-based HTTP endpoint configured to receive HTTP POST requests through events. When an event happens, a webhook is sent to another third-party app, which can then take appropriate action.\n\nWebhooks configured with Vercel can trigger a deployment when a specific event occurs. Vercel integrations receive platform events through webhooks.\n\nVercel allows you to add a generic endpoint for events from your dashboard. [Pro](https://vercel.com/docs/accounts/plans/pro) and [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) teams will be able to configure these webhooks at the account level.\n\n1.  Choose your team scope on the dashboard, and go to Settings ➞ Webhooks.\n    \n2.  ![Select events for your webhooks to listen.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480824%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhooks-settings-add-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Select events for your webhooks to listen.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480825%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhooks-settings-add-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Select events for your webhooks to listen.\n    \n    The configured webhook listens to one or more events before it triggers the function request. Vercel supports event selections from the following categories:\n    \n    Configurable webhooks listen to the following deployment-based events:\n    \n    *   Deployment Created: Listens for when any new deployment is initiated\n    *   Deployment Succeeded: Listens for a successful deployment\n    *   Deployment Promoted: Listens for when a deployment is promoted\n    *   Deployment Error: Listens for any failed deployment\n    *   Deployment Cancelled: Listens for a canceled deployment due to any failure\n    \n    Project events are only available when \"All Team Projects\" is selected as the [project scope](#choose-your-target-projects) .\n    \n    Configurable webhooks listen to the following project-based events:\n    \n    *   Project Created: Listens whenever a new project is created\n    *   Project Removed: Listens whenever any project is deleted from the team account\n    \n    The events you select should depend on your use case and the workflow you want to implement.\n    \n3.  ![Choose the scope of project(s) for webhooks.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480824%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fproject-scope.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Choose the scope of project(s) for webhooks.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480825%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fproject-scope-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Choose the scope of project(s) for webhooks.\n    \n    After selecting the event types, choose the scope of team projects for which webhooks will listen for events.\n    \n4.  The endpoint URL is the destination that triggers the events. All events are forwarded to this URL as a POST request. In case of an event, your webhook initiates an HTTP callback to this endpoint that you must configure to receive data. In order to be accessible, make sure these endpoint URLs are public.\n    \n    ![Define the endpoint URL for the webhooks to listen.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705933134%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fenter-endpoint-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Define the endpoint URL for the webhooks to listen.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705933134%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fenter-endpoint-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Define the endpoint URL for the webhooks to listen.\n    \n    Once you have configured your webhook, click the Create Webhook button.\n    \n    The Webhook Created dialog will display a secret key, which won't be shown again. You should secure your webhooks by comparing the [`x-vercel-signature`](https://vercel.com/docs/edge-network/headers#x-vercel-signature) header of an incoming request with this client secret. See [Securing webhooks](https://vercel.com/docs/integrations/webhooks-overview/webhooks-api#securing-webhooks) to learn how to do this.\n    \n    ![Confirmation to create the webhook.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705933108%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhook-created-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Confirmation to create the webhook.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1705933108%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhook-created-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Confirmation to create the webhook.\n    \n    Once complete, click Done.\n    \n    To view all your new and existing webhooks, go to the Webhooks section of your team's dashboard. To remove any webhook, click the cross icon next to the webhook. You can create and use up to 20 custom webhooks per team.\n    \n\nWebhooks can also be created through [Integrations](https://vercel.com/docs/integrations). When [creating a new integration](https://vercel.com/docs/integrations/create-integration), you can add webhooks using the [Integration Console](https://vercel.com/dashboard/integrations/create). Inside your Integration's settings page locate the text field for setting the webhook URL. This is where you should add the HTTP endpoint to listen for events. Next, you can select one or more of these checkboxes to specify which events to listen to.\n\n![Specifying the webhook URL and events to listen to.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480825%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhooks-url-integrations-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Specifying the webhook URL and events to listen to.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1687480825%2Fdocs-assets%2Fstatic%2Fdocs%2Fintegrations%2Fwebhooks%2Fwebhooks-url-integrations-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSpecifying the webhook URL and events to listen to.\n\nThe webhook URL receives an HTTP POST request with a JSON payload for each event. All the events have the following format:\n\n```\n  \"id\": <eventId>,\n  \"type\": <event-type>,\n  \"createdAt\": <javascript-timestamp>,\n  \"payload\": <payload for the event>,\n  \"region\": <RegionId>,\n```\n\nHere's a [list of supported event types](https://vercel.com/docs/integrations/webhooks-overview/webhooks-api#supported-event-types) and their [`payload`](https://vercel.com/docs/integrations/webhooks-overview/webhooks-api#payload).",
    "title": "Setting Up Webhooks",
    "description": "Learn how to set up webhooks and use them with Vercel Integrations.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/comments/in-production-and-localhost",
    "markdown": "# Using Comments in Production and Localhost\n\n[Comments](https://vercel.com/docs/workflow-collaboration/comments) are available in all [preview deployments](https://vercel.com/docs/deployments/preview-deployments) on Vercel. To enable comments in production deployments and localhost, you must add the Vercel toolbar to your project with our [`@vercel/toolbar`](https://www.npmjs.com/package/@vercel/toolbar) package, or with our injection script.\n\nUsing the package offers the following benefits:\n\n*   You and your team can leave feedback at any time while using your app in production\n*   You can enable the toolbar in localhost, allowing you to see and resolve preview comments in your local environment\n*   You can use other toolbar features, such as toggling [Draft Mode](https://vercel.com/docs/workflow-collaboration/draft-mode), in production\n\n1.  Install `@vercel/toolbar`:\n2.  Link your local project to your Vercel project with the [`vercel link`](https://vercel.com/docs/cli/link) command using [Vercel CLI](https://vercel.com/docs/cli)\n\nBefore using Comments in a production deployment, keep in mind the following considerations:\n\n*   We recommend conditionally injecting the toolbar. Otherwise, all visitors will be prompted to log in when visiting your site\n*   Unlike comments on preview deployments, alerts for new comments won't be sent to a specific user by default. We recommend [linking your project to Slack with our integration](https://vercel.com/integrations/slack), or directly mentioning someone when starting a new comment thread in production to ensure new comments are seen\n\nThe following example demonstrates code that will show the Vercel Toolbar on a production deployment.\n\n```\nimport { VercelToolbar } from '@vercel/toolbar/next';\nimport { useIsEmployee } from 'lib/auth'; // Your auth library\n \nexport function StaffToolbar() {\n  const isEmployee = useIsEmployee();\n  return isEmployee ? <VercelToolbar /> : null;\n}\n```\n\n```\nimport { Suspense } from 'react';\nimport { StaffToolbar } from '@components/staff-toolbar';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Suspense>\n          <StaffToolbar />\n        </Suspense>\n      </body>\n    </html>\n  );\n}\n```\n\nYou can use the Vercel Toolbar in your local environment with the `@vercel/toolbar` package. Doing so will enable you to view, respond to, and act on comments from localhost.\n\nTo use Comments locally in a Next.js project, define `withVercelToolbar` in your `next.config.js` file and export it, as shown below:\n\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Config options here\n};\n \nconst withVercelToolbar = require('@vercel/toolbar/plugins/next')();\n// Instead of module.exports = nextConfig, do this:\nmodule.exports = withVercelToolbar(nextConfig);\n```\n\nThen, follow the instructions in [the section on using the toolbar in production deployments](#using-@vercel/toolbar-in-production). Rebuild your local environment, and you should see the toolbar.",
    "title": "Using Comments in Production and Localhost",
    "description": "Learn how to use comments in your production deployments and localhost with the @vercel/toolbar package.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/environments",
    "markdown": "# Deployment Environments\n\nA typical deployment lifecycle for web development has the following steps:\n\n*   Local preview on the developer's computer\n*   Staging on a remote test server\n*   Production on a remote production server\n\nEnvironments are the solution for this deployment lifecycle on Vercel. The production environment is usually connected to your production domain and is only deployed under certain conditions. The [preview environment](https://vercel.com/docs/deployments/preview-deployments) is similar to the staging environment so that you can test your code remotely and preview changes without affecting the production instance.\n\nProduction deployments are usually made in two different circumstances:\n\n1.  When you merge or push to the [production branch](https://vercel.com/docs/deployments/git#production-branch) (commonly `main`)\n2.  When you make a deployment using the `vercel --prod` command\n\nThe production domain(s) is updated with the latest deployment when you trigger a production deployment.\n\nIt is possible to make a production deployment without assigning it to your domain by disabling [auto-assignment of domains](https://vercel.com/docs/deployments/managing-deployments#staging-and-promoting-a-production-deployment). This creates a staged build, which you then have to manually promote.\n\nYou can update the production domain(s) in the Domains tab of a Project on the Vercel Dashboard.\n\nTo add a production domain to a [Project](https://vercel.com/docs/projects/overview):\n\n*   Go to the Settings tab on the Project overview page\n*   Go to the Domains section and click \"Add\"\n\nYou can read more about this in the [custom domains section](https://vercel.com/docs/projects/domains/add-a-domain).\n\nYou can configure Environment Variables for each environment directly from the Project settings. Check out the [Environment variables section](https://vercel.com/docs/projects/environment-variables) to learn more.\n\nWhen you define [Environment Variables](https://vercel.com/docs/projects/environment-variables) as key-value pairs using the dashboard or Vercel CLI, they are configured outside your source code. These variables are available to your source code during the build process.\n\nYou can change the value of any environment variable at any point without changing your code. However, make sure to [Redeploy](https://vercel.com/docs/deployments/managing-deployments#redeploy-a-project) your project to update the value of these variables in the deployment.\n\nSome frameworks do not use `package.json` to select a specific version to install during build time. In this case, you can use an [Environment Variable](https://vercel.com/docs/projects/environment-variables) to define your framework's version in the following cases:\n\n| Framework | Environment Variable Name |\n| --- | --- |\n| Hugo | `HUGO_VERSION` |\n| Zola | `ZOLA_VERSION` |\n\nFor example, to select Hugo `v0.92.2`, you will add an Environment Variable named `HUGO_VERSION` with the value `0.92.2`.\n\nThe value must match an existing GitHub Release with an attached asset. For example, Hugo `[0.92.2](https://github.com/gohugoio/hugo/releases/tag/v0.92.2)` exists but Hugo `0.92` does not exist.",
    "title": "Deployment Environments",
    "description": "Environments are the solution for the deployment lifecycle on the Vercel platform. Learn about the production and preview environment types here.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/dashboard-features/command-menu",
    "markdown": "# Using the Command Menu\n\nVercel provides a menu with shortcuts, called the Command Menu, to navigate through the dashboard and perform common actions using only the keyboard.\n\nYou can access the menu by pressing ⌘ + K on macOS or Ctrl + K on Windows and Linux. Alternatively, you can access it by clicking on Command Menu in your personal menu at the top right of the dashboard:\n\n![Opening the Command Menu using your cursor.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1702035462%2Ffront%2Fdocs%2Funiversal-search%2Fdashboard-cmdk-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Opening the Command Menu using your cursor.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1702035462%2Ffront%2Fdocs%2Funiversal-search%2Fdashboard-cmdk-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nOpening the Command Menu using your cursor.\n\nOnce opened, the Command Menu will offer you a list of commonly used shortcuts. For example, you can quickly navigate to a specific [Project](https://vercel.com/docs/projects/overview) or [Team](https://vercel.com/docs/accounts/create-a-team) right away, using your ↑ (arrow up), ↓ (arrow down) and ↵ (enter) keys.\n\nThe Command Menu is only available on desktop and tablet devices, but not on smartphones, as it provides the biggest efficiency advantage when used in combination with a keyboard, instead of your mouse or finger.\n\nBy default, the list is comprised of shortcuts that the Vercel Team has found to be most useful for you. However, over time, the list will automatically adapt to your own usage of the Command Menu and begin to suggest recently used shortcuts at the top:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fcommand-menu%2Frecents-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fcommand-menu%2Frecents-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn example of recently used items suggested by the Command Menu.\n\nUp to 3 suggestions for recently used shortcuts will appear, and be ordered by the latest time you used them, with the most recently used item showing up at the very top.\n\nWhen the dashboard is closed, the suggestions will reset.\n\nBecause the purpose of the Command Menu is to get you to your desired goal in the quickest way possible, it also changes its behavior based on your surrounding context on the dashboard.\n\nIf you're currently looking at the dashboard for a [Pro](https://vercel.com/docs/accounts/plans/pro) or [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) Team, for example, you will be offered to copy a link for inviting new [Team Members](https://vercel.com/docs/accounts/team-members-and-roles/managing-team-members) if you're an [Owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) of that Team.\n\nWhereas, if you're on a [Hobby plan](https://vercel.com/docs/accounts/plans/hobby) instead, you will not be offered that option because Hobby plans don't support collaborating.\n\nIn addition to ⌘ + K (instead of ⌘, use Ctrl on Windows or Linux) for opening the overview of the Command Menu, Vercel also offers direct keyboard shortcuts for some of the commonly used actions:\n\n*   Search [Projects](https://vercel.com/docs/projects/overview) with ⇧ + P\n*   Search [Teams](https://vercel.com/docs/accounts/create-a-team) with ⇧ + T\n*   Switch between light and dark mode with T\n\nThey are also shown next to each of the supported items in the list.\n\nThanks to the shortcuts mentioned above, you often won't even have to navigate through the items offered by the Command Menu to get to your desired destination quickly.\n\nInstead, you can use these shortcuts to skip the overview of items and perform the action directly. Therefore, it is recommended to embed these shortcuts into your workflow.\n\nThe Command Menu allows you to search through the documentation on the Vercel, [Next.js](https://nextjs.org/docs) and [Turborepo](https://turbo.build/repo) websites.\n\n![Searching from the Vercel documentation.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1702035077%2Ffront%2Fdocs%2Funiversal-search%2Funiversal-search-v1-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Searching from the Vercel documentation.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1702035077%2Ffront%2Fdocs%2Funiversal-search%2Funiversal-search-v1-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSearching from the Vercel documentation.\n\nWhen on the Vercel documentation site:\n\n1.  Open the command menu using ⌘ + K\n2.  Begin typing a search query\n3.  The results will then be shown from across all three websites where there is a query match\n    *   Initially you will see the top three most relevant results\n    *   Followed by the rest of the results split by website\n4.  You can filter results by website using the following badges:\n    *   All: Results from all three websites (default)\n    *   Vercel: Results from the Vercel documentation site\n    *   Next.js: Results from the Next.js documentation site\n    *   Turborepo: Results from the Turborepo documentation site\n\nWhen on the Vercel dashboard:\n\n1.  Open the command menu using ⌘ + K\n2.  Scroll down to Search Docs... and select, or use the shortcut Shift + D\n3.  Begin typing a search query\n4.  The results will then be shown from across all three websites where there is a query match\n    *   Initially you will see the top three most relevant results\n    *   Followed by the rest of the results split by website\n5.  You can filter results by website using the following badges:\n    *   All: Results from all three websites (default)\n    *   Vercel: Results from the Vercel documentation site\n    *   Next.js: Results from the Next.js documentation site\n    *   Turborepo: Results from the Turborepo documentation site\n\nIf you want, the Command Menu can be a complete replacement for the traditional dashboard navigation.\n\nRegular menus will continue to exist for the purpose of navigating the dashboard with your mouse or fingers (on touch-based devices), but if you're most efficient using your keyboard, you might prefer the Command Menu.\n\nOver time, the Command Menu will offer increasingly intelligent suggestions and allow for performing more actions inline to increase your productivity.",
    "title": "Using the Command Menu ",
    "description": "Learn how to quickly navigate through the Vercel dashboard with your keyboard using the Command Menu.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-middleware/middleware-api",
    "markdown": "# Edge Middleware API Reference\n\nEdge Middleware runs on the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-runtime), a runtime built on top of the [`V8`](https://developers.google.com/apps-script/guides/v8-runtime) JavaScript engine. The Edge runtime provides a subset of Web APIs for you to use when creating Middleware. This lightweight API layer is built to be performant and execute code with minimal latency. When writing Middleware, you can use any of the [supported APIs](https://vercel.com/docs/functions/edge-functions/edge-runtime#supported-apis) from the Edge runtime.\n\nTo add Middleware to your app, you need to create a `middleware.ts` or `middleware.js` file at the same level as your `app` or `pages` directory (even if you're using a `src` directory):\n\nThe Middleware function must be a default export as shown below:\n\n```\nexport default function customName() {}\n```\n\nMiddleware will be invoked for every route in your project. If you only want it to be run on specific paths, you can define those either with a [custom matcher config](#match-paths-based-on-custom-matcher-config) or with [conditional statements](https://vercel.com/docs/functions/edge-middleware/middleware-api#match-paths-based-on-conditional-statements).\n\nWhile the `config` option is the preferred method, as it does not get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths.\n\nTo decide which route the Middleware should be run on, you can use a custom matcher config to filter on specific paths. The matcher property can be used to define either a single path, or using an array syntax for multiple paths.\n\nEdge Middleware runs on **every request** by default. To run on specific paths instead, use the `matcher` property of the Middleware `config` object. Even when using path matching, Edge Middleware runs on **all** `/_next/data/` requests for `getServerSideProps` and `getStaticProps` pages for the sake of consistency. For more information, review [our docs on Edge Middleware API](https://vercel.com/docs/functions/edge-middleware/middleware-api#match-paths-based-on-custom-matcher-config) as well as the [Next.js matcher docs](https://nextjs.org/docs/advanced-features/middleware#matcher).\n\n```\nexport const config = {\n  matcher: '/about/:path*',\n};\n```\n\n```\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n};\n```\n\nThe matcher config has full [regex](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) support for cases such as negative lookaheads or character matching.\n\nTo match all request paths except for the ones starting with:\n\n*   `api` (API routes)\n*   `_next/static` (static files)\n*   `favicon.ico` (favicon file)\n\n```\nexport const config = {\n  matcher: ['/((?!api|_next/static|favicon.ico).*)'],\n};\n```\n\nTo match `/blog/123` but not `/blog/abc`:\n\n```\nexport const config = {\n  matcher: ['/blog/:slug(\\\\d{1,})'],\n};\n```\n\nFor help on writing your own regex path matcher, review [Path to regexp](https://github.com/pillarjs/path-to-regexp#path-to-regexp-1).\n\n```\nimport { rewrite } from '@vercel/edge';\n \nexport default function middleware(request: Request) {\n  const url = new URL(request.url);\n \n  if (url.pathname.startsWith('/about')) {\n    return rewrite(new URL('/about-2', request.url));\n  }\n \n  if (url.pathname.startsWith('/dashboard')) {\n    return rewrite(new URL('/dashboard/user', request.url));\n  }\n}\n```\n\nSee the [Helper Methods](#middleware-helper-methods) below for more information on using the `@vercel/edge` package.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `matcher` | `string / string[]` | A string or array of strings that define the paths the Middleware should be run on |\n\nThe Edge Middleware signature is made up of two parameters: `request` and `context`. The `request` parameter is an instance of the [Request](https://vercel.com/docs/functions/edge-functions/edge-functions-api#request) object, and the `context` parameter is an object containing the [`waitUntil`](https://vercel.com/docs/functions/edge-functions/edge-functions-api#waituntil) method. Both parameters are optional.\n\nEdge Middleware comes with built in helpers that are based on the native [`FetchEvent`](https://developer.mozilla.org/docs/Web/API/FetchEvent), [`Response`](https://developer.mozilla.org/docs/Web/API/Response), and [`Request`](https://developer.mozilla.org/docs/Web/API/Request) objects.\n\n[See the section on helpers below for more information](#middleware-helper-methods).\n\n```\n// config with custom matcher\nexport const config = {\n  matcher: '/about/:path*',\n};\n \nexport default function middleware(request: Request) {\n  return Response.redirect(new URL('/about-2', request.url));\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nThe `Request` object represents an HTTP request. It is a wrapper around the [Fetch API](https://developer.mozilla.org/docs/Web/API/Fetch_API) `Request` object. When using TypeScript, you do not need to import the `Request` object, as it is already available in the global scope.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `url` | `string` | The URL of the request |\n| `method` | `string` | The HTTP method of the request |\n| `headers` | `Headers` | The headers of the request |\n| `body` | [`ReadableStream`](https://developer.mozilla.org/docs/Web/API/ReadableStream) | The body of the request |\n| `bodyUsed` | `boolean` | Whether the body has been read |\n| `cache` | `string` | The cache mode of the request |\n| `credentials` | `string` | The credentials mode of the request |\n| `destination` | `string` | The destination of the request |\n| `integrity` | `string` | The integrity of the request |\n| `redirect` | `string` | The redirect mode of the request |\n| `referrer` | `string` | The referrer of the request |\n| `referrerPolicy` | `string` | The referrer policy of the request |\n| `mode` | `string` | The mode of the request |\n| `signal` | [`AbortSignal`](https://developer.mozilla.org/docs/Web/API/AbortSignal) | The signal of the request |\n| `arrayBuffer` | `function` | Returns a promise that resolves with an ArrayBuffer |\n| `blob` | `function` | Returns a promise that resolves with a Blob |\n| `formData` | `function` | Returns a promise that resolves with a FormData |\n| `json` | `function` | Returns a promise that resolves with a JSON object |\n| `text` | `function` | Returns a promise that resolves with a string |\n| `clone` | `function` | Returns a clone of the request |\n\nTo learn more about the [`NextRequest`](https://nextjs.org/docs/api-reference/next/server#nextrequest) object and its properties, visit the [Next.js documentation](https://nextjs.org/docs/api-reference/next/server#nextrequest).\n\nThe `waitUntil()` method is from the [`ExtendableEvent`](https://developer.mozilla.org/docs/Web/API/ExtendableEvent/waitUntil) interface. It accepts a [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise) as an argument, which will keep the function running until the `Promise` resolves.\n\nIt can be used to keep the function running after a response has been sent. This is useful when you have an async task that you want to keep running after returning a response.\n\nThe example below will:\n\n*   Send a response immediately\n*   Keep the function running for ten seconds\n*   Fetch a product and log it to the console\n\n```\nimport type { NextFetchEvent } from 'next/server';\n \nexport const config = {\n  matcher: '/',\n};\n \nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n \nasync function getProduct() {\n  const res = await fetch('https://api.vercel.app/products/1');\n  await wait(10000);\n  return res.json();\n}\n \nexport default function middleware(request: Request, context: NextFetchEvent) {\n  context.waitUntil(getProduct().then((json) => console.log({ json })));\n \n  return new Response(JSON.stringify({ hello: 'world' }), {\n    status: 200,\n    headers: { 'content-type': 'application/json' },\n  });\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\n| Property | Type | Description |\n| --- | --- | --- |\n| [`waitUntil`](https://developer.mozilla.org/docs/Web/API/ExtendableEvent/waitUntil) | `(promise: Promise<unknown>): void` | Prolongs the execution of the function until the promise passed to `waitUntil` is resolved |\n\nYou can use Vercel-specific helper methods to access a request's [geolocation](#geolocation), [IP Address](#ipaddress), and more when deploying Edge Middleware on Vercel.\n\nYou can access these helper methods with the [`request` and `response` objects](#edge-middleware-signature) in your middleware handler method.\n\nThese helpers are exclusive to Vercel, and will not work on other providers, even if your app is built with Next.js.\n\nThe `geo` helper object returns geolocation information for the incoming request. It has the following properties:\n\n| Property | Description |\n| --- | --- |\n| `city` | The city that the request originated from |\n| `country` | The country that the request originated from |\n| `latitude` | The latitude of the client |\n| `longitude` | The longitude of the client |\n| `region` | The [Edge Network region](https://vercel.com/docs/edge-network/regions) that received the request |\n\nEach property returns a `string`, or `undefined`.\n\n```\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n \n// The country to block from accessing the secret page\nconst BLOCKED_COUNTRY = 'SE';\n \n// Trigger this middleware to run on the `/secret-page` route\nexport const config = {\n  matcher: '/secret-page',\n};\n \nexport function middleware(request: NextRequest) {\n  // Extract country. Default to US if not found.\n  const country = (request.geo && request.geo.country) || 'US';\n \n  console.log(`Visitor from ${country}`);\n \n  // Specify the correct route based on the requests location\n  if (country === BLOCKED_COUNTRY) {\n    request.nextUrl.pathname = '/login';\n  } else {\n    request.nextUrl.pathname = `/secret-page`;\n  }\n \n  // Rewrite to URL\n  return NextResponse.rewrite(request.nextUrl);\n}\n```\n\nThe `ip` object returns the IP address of the request from the headers, or `undefined`.\n\n```\nimport { ipAddress } from '@vercel/functions';\nimport { next } from '@vercel/edge';\n \nexport default function middleware(request: Request) {\n  const ip = ipAddress(request);\n  return next({\n    headers: { 'x-your-ip-address': ip || 'unknown' },\n  });\n}\n```\n\nThe `RequestContext` is an extension of the standard `Request` object, which contains the [`waitUntil`](#waitUntil) function. The following example works in middleware for all frameworks:\n\n```\nimport type { RequestContext } from '@vercel/edge';\n \nexport default function handler(request: Request, context: RequestContext) {\n  context.waitUntil(getAlbum().then((json) => console.log({ json })));\n \n  return new Response(`Hello there, from ${request.url} I'm an Edge Function!`);\n}\n \nexport const config = {\n  matcher: '/',\n};\n \nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n \nasync function getAlbum() {\n  const res = await fetch('https://jsonplaceholder.typicode.com/albums/1');\n  await wait(10000);\n  return res.json();\n}\n```\n\nThis helper is **only available in Edge Middleware**.\n\nThe `NextResponse.rewrite()` helper returns a response that rewrites the request to a different URL.\n\n```\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n// Trigger this middleware to run on the `/about` route\nexport const config = {\n  matcher: '/about',\n};\n \nexport function middleware(request: NextRequest) {\n  // Rewrite to URL\n  return NextResponse.rewrite('/about-2');\n}\n```\n\nThis helper is **only available in Edge Middleware**.\n\nThe `NextResponse.next()` helper returns a Response that instructs the function to continue the middleware chain. It takes the following optional parameters:\n\n| Parameter | type | Description |\n| --- | --- | --- |\n| `headers` | `Headers[]` or `Headers` | The headers you want to set |\n| `status` | `number` | The status code |\n| `statusText` | `string` | The status text |\n\nThe following example adds a custom header, then continues the middleware chain:\n\n```\nimport { NextResponse } from 'next/server';\nexport default function middleware() {\n  return NextResponse.next({\n    headers: { 'x-from-middleware': 'true' },\n  });\n}\n```\n\nThis no-op example will return a `200 OK` response with no further action:\n\n```\nimport { NextResponse } from 'next/server';\nexport default function middleware() {\n  return NextResponse.next();\n}\n```",
    "title": "Edge Middleware API Reference",
    "description": "Learn about the Edge runtime and available APIs when working with Edge Middleware. Supported APIs include Network, Encoding, and Web Stream APIs.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/observability/activity-log",
    "markdown": "# Using the Activity Log\n\naccess-group-createdA user created an access group.access-group-deletedA user deleted an access group.access-group-project-updatedA project was changed in an access group.access-group-user-addedA user was added to an access group.access-group-user-removedA user was removed from an access group.alias-invite-createdAn invite was sent for an alias.alias-invite-joinedA user joined an alias they were given access to.alias-invite-revokedAn invite was revoked for an alias.alias-protection-bypass-createdA shareable link was created for an alias.alias-protection-bypass-exceptionA Deployment Protection Exception was updated for an alias.alias-protection-bypass-regeneratedA shareable link was regenerated for an alias.alias-protection-bypass-revokedA shareable link was revoked for an alias.alias-user-scoped-access-deniedA user's access request for an alias was denied.alias-user-scoped-access-grantedA user's access request for an alias was granted.alias-user-scoped-access-requestedA user requested access to an alias.alias-user-scoped-access-revokedA user's access for an alias was revoked.auto-expose-system-envsAutomatically exposing System Environment Variables for the project.avatarAn avatar was created for the profile of a personal account.certAn SSL certificate was created for a custom domain in a personal account or team.cert-deleteAn SSL certificate connected to a custom domain was deleted.deploy-hook-dedupedIf a deploy hook triggers a deployment for a commit that already triggered a deployment via Git, then the deployment from the deploy hook is stopped. This action is reported with the deploy-hook-deduped event.deploy-hook-processedA deployment was successfully triggered by a specific deploy hook.deploymentA deployment was created for a project.deployment-creation-blockedA deployment was blocked because the Git user is not part of the team.deployment-deleteA specific deployment was deleted.disabled-integration-installation-removedA disabled integration was automatically uninstalleddns-addA DNS record was added to the personal account or team domain records for a specific domain.dns-deleteA DNS record was deleted from the personal account or team domain records for a specific domain.dns-updateA DNS record was updated in the personal account or team domain records for a specific domain.domainA domain connection was created in a personal account or team.domain-buyA domain was successfully purchased in a personal account or team.domain-delegatedA domain was successfully delegated to another personal account or team so it can also be used there.domain-deleteA domain was removed from a personal account or team.domain-move-inA domain was moved in from another personal account or team to the current personal account or team.domain-move-outA domain was moved out from the current personal account or team to another personal account or team.domain-move-out-request-sentThe request to move a domain from the current personal account or team to another personal account or team was sent.domain-renew-changeA domain hosted with Vercel was renewed.domain-transfer-inA domain was transferred from an external provider to Vercel.edge-config-createdAn Edge Config was created.edge-config-deletedAn Edge Config was deleted.edge-config-items-updatedThe values in an Edge Config were updated.edge-config-token-createdAn access token for an Edge Config was created.edge-config-token-deletedAn access token for an Edge Config was deleted.edge-config-updatedAn Edge Config was updated.emailThe email of the current user was updated.env-variable-addAn automatically encrypted environment variable was added to a project.env-variable-deleteAn existing environment variable was deleted from a project.env-variable-editAn existing environment variable in a project was updated.env-variable-readThe plain text value of an encrypted environment variable was read.instant-rollback-createdAn instant rollback was created.integration-configuration-scope-change-confirmedThe permissions upgrade request from an installed integration was confirmed.integration-configurations-disabledOne or more integrations were disabled because their owner has left the teamintegration-installation-completedAn integration was installed in one or all projects under a personal account or team.integration-installation-permission-updatedThe permissions for an installed integration was updated.integration-installation-removedAn integration was removed from a project or personal account or team.integration-scope-changedThe scopes for an integration were changed.log-drain-createdA log drain was created.log-drain-deletedA log drain was deleted.log-drain-disabledA log drain was disabled.log-drain-enabledA log drain was enabled.loginA user logged in at a specific time with a login method.manual-deployment-promotion-createdA deployment was manually promoted to production.monitoring-disabledMonitoring was disabled for the teammonitoring-enabledMonitoring was enabled for the team.passkey-createdA new passkey was created.passkey-deletedAn existing passkey was deleted.passkey-updatedThe name of the existing passkey was updated.password-protection-disabledAdvanced Deployment Protection was disabled for the team.password-protection-enabledAdvanced Deployment Protection was enabled for the team.planA payment plan (hobby, pro or enterprise) was added to a personal account.preview-deployment-suffix-disabledThe preview deployment suffix for a team was disabled.preview-deployment-suffix-enabledThe preview deployment suffix for a team was enabled.preview-deployment-suffix-updateThe preview deployment suffix for a team was updated.project-analytics-disabledLegacy Speed Insights was disabled for a specific project.project-analytics-enabledLegacy Speed Insights was enabled for a specific project.project-automation-bypassProtection Bypass for Automation for a project was modified.project-deleteA specific project was deleted.project-domain-unverifiedThe ownership of a domain added to Vercel became unverified.project-domain-verifiedThe project domain ownership was verified.project-member-addedA user was added to a project.project-member-invitedA user was invited to a project.project-member-removedA user was removed from a project.project-member-updatedA user was updated in a project.project-move-in-successThe transfer of a project to the current personal account or team succeeded.project-move-out-failedThe transfer of a project from the current personal account or team failed.project-move-out-startedThe transfer of a project from the current personal account or team was initiated.project-move-out-successThe transfer of a project from the current personal account or team succeeded.project-options-allowlistOPTIONS Allowlist was modified.project-password-protectionPassword Protection for a project was modified.project-pausedThe project's production deployment was paused.project-speed-insights-disabledSpeed Insights was disabled for a specific project.project-speed-insights-enabledSpeed Insights was enabled for a specific project.project-sso-protectionVercel Authentication (formerly SSO protection) for a project was modified.project-trusted-ipsTrusted IPs for a project was modified.project-unpausedThe project's production deployment was resumed.project-web-analytics-disabledWeb Analytics was disabled for a project.project-web-analytics-enabledWeb Analytics was enabled for a project.secondary-email-addedAn email was added to the accountsecondary-email-removedAn email was removed from the accountsecondary-email-verifiedAn email was verifiedsecret-addAn encrypted environment variable was added to a project. (Only possible through the API and CLI)secret-deleteAn encrypted environment variable was deleted from a project. (Only possible through the API and CLI)secret-renameAn encrypted environment variable was renamed in a project. (Only possible through the API and CLI)set-nameThe full name on the personal account was set.shared-env-variable-addAn automatically encrypted shared environment variable was created.shared-env-variable-deleteAn existing shared environment variable was deleted.shared-env-variable-readThe plain text value of an encrypted shared environment variable was read.shared-env-variable-updateAn existing shared environment variable was updated.spend-createdA spend amount was defined.spend-updatedA spend amount was updated.storage-accept-tosAcceptance of storage terms of servicestorage-accessed-data-browserMade a query to the store from the Data tabstorage-connect-projectA store was connected to a projectstorage-createA new store was createdstorage-deleteA store was deletedstorage-disconnect-projectA store was disconnected to a projectstorage-inactive-store-deletedAn inactive store was deletedstorage-reset-credentialsThe credentials for a store were resetstorage-updateA store was updatedstorage-view-secretViewed a secret for a storeteamA team was created in a personal account.team-avatar-updateThe avatar of a specific team was updated.team-deleteA specific team was deleted.team-member-addA member was added to a specific team.team-member-confirm-requestThe request for a user to join a team was confirmed.team-member-decline-requestThe request for a user to join a team was declined.team-member-deleteA specific team member was deleted from a team.team-member-joinA team member joined the current team.team-member-leaveA team member left the current team.team-member-request-accessA user requested access to join a team.team-member-role-updateThe role of a specific team member was updated.team-name-updateThe name of a team was updated.team-remote-caching-updateThe Remote Caching status was changed.team-slug-updateThe slug of a team was updated.user-primary-email-updatedThe primary email was changedusernameThe username of a personal account was updated.web-analytics-tier-updatedThe Web Analytics subscription tier was changed.",
    "title": "Using the Activity Log",
    "description": "Learn how to use the Activity Log, which provides a list of all events on a Hobby account or team, chronologically organized since its creation.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/accounts/manage-emails",
    "markdown": "# Manage Emails\n\nYour account email addresses are listed in your [account settings](https://vercel.com/account/general#email).\n\nTo access your account settings from the dashboard:\n\n*   Select your avatar in the top right corner of the dashboard\n*   Next select Account Settings\n\nYou can add a new email address by selecting the Add Another button in the Emails section of your account settings.\n\nOnce your new email address is added, you will receive an email to the newly added email with a verification link. Follow the link in the email to verify your new email address.\n\nAll verified email addresses can be used to log in to your account, including your primary email address.\n\nYou can add up to three emails per account. A single email domain can only be shared by two of your emails at once.\n\n![Your account email addresses.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Faccount-emails-2-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Your account email addresses.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Faccount-emails-2-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYour account email addresses.\n\nYour primary email address is the email address that will be used to send you notifications, such as when you receive a new [preview comment](https://vercel.com/docs/workflow-collaboration/comments) or when you are [invited to a team](https://vercel.com/docs/accounts/team-members-and-roles/managing-team-members#invite-link).\n\nOnce you have added and verified a new email address, you can change your primary email address by selecting Set as Primary in the dot menu.\n\n![Setting your primary email address.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Faccount-emails-set-primary-2-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Setting your primary email address.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Faccount-emails-set-primary-2-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSetting your primary email address.\n\nTo remove an email address select the Delete button in the dot menu.\n\nIf you wish to remove your primary email address, you will need to set a new primary email address first.",
    "title": "Manage Emails",
    "description": "Learn how to manage your email addresses on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/dashboard-features/activity-log",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://vercel.com/docs/accounts/create-an-account",
    "markdown": "# Create an Account\n\nYou can [sign up](https://vercel.com/signup) for a Vercel account at any time.\n\n*   To collaborate with a team, sign up for the [Pro plan](https://vercel.com/docs/accounts/plans/pro)\n*   Otherwise, sign up for the [Hobby plan](https://vercel.com/docs/accounts/plans/hobby)\n\nTo sign up with email:\n\n1.  Enter your email address, then continue with the link provided in the verification email you will receive\n2.  Enter your phone number, and verify once more with a code sent through SMS\n\nWhen signing up with your email, no Git provider will be connected by default. See [Login methods and connections](#login-methods-and-connections) for information on how to connect a Git provider.\n\nIf no Git provider is connected, you will be asked to verify your account on every login attempt.\n\nYou can sign up with any of the following supported Git providers:\n\nYou will be asked to authorize Vercel to access your Git provider account. This will be the default login connection on your account.\n\nYou can manage your login connections in the Authentication section of [your account settings](https://vercel.com/account/authentication). To find this section:\n\n1.  Select your profile picture near the top-right of the dashboard\n2.  Select Settings in the dropdown that appears\n3.  Select Authentication in the list near the left side of the page\n\n![The Authentication section of your account settings.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Fauthentication-page-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Authentication section of your account settings.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1704990083%2Fdocs-assets%2Fstatic%2Fdocs%2Faccounts%2Fauthentication-page-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe Authentication section of your account settings.\n\nPasskeys enable you to log into your Vercel account with biometrics such as face or fingerprint recognition, PINs, hardware security keys, and more. Because passkeys are associated with Vercel's domain, they are more resistant to phishing attacks than other login methods.\n\nTo add a new passkey:\n\n1.  From the dashboard, click your account avatar and select Settings. In your [account settings](https://vercel.com/account/authentication), go to the Authentication item\n2.  Under Add New, select the Passkey button and then click Continue\n3.  Select the authenticator of preference. This list depends on your browser and your eligible devices. By default, Vercel will default to a password manager if you have one installed on your browser and will automatically prompt you to save the passkey\n4.  Follow the instructions on the device or with the account you've chosen as an authenticator\n\nWhen you're done, the passkey will appear in a list of login methods on the Authentication page, alongside your other connections.\n\nSAML Single Sign-On enables you to log into your Vercel Enterprise team with your organization's identity provider which manages your credentials.\n\nThis option is only available to Enterprise teams, and can be configured by your team's administrator. To sign up for an Enterprise plan, [contact sales](https://vercel.com/contact/sales).\n\nWhen you create an account on Vercel, you will be prompted to create a project by either importing a Git repository or using a template.\n\nEither way, you must connect a Git provider to your account, which you'll be able to use as a login method in the future.\n\nYour Hobby account on Vercel can only have a single login connection per third-party service. For example, you can only log into your Hobby account with a single GitHub account.\n\nIf you need to log in with multiple accounts from the same third-party service, consider creating a new Vercel Hobby account.\n\nTo upgrade from a Hobby account to a Pro account:\n\n1.  From your [dashboard](https://vercel.com/dashboard), select the Settings tab and then Billing\n2.  Under the Hobby Plan section, select Upgrade to Pro\n3.  Follow the instructions to add your payment information, and select Confirm and Upgrade\n\nTo upgrade to the Enterprise plan, [contact sales](https://vercel.com/contact/sales).",
    "title": "Create an Account",
    "description": "Learn how to create a Hobby account on Vercel and manage your login connections through your dashboard.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/deploying-and-redirecting",
    "markdown": "# Deploying & Redirecting Domains\n\nOnce the domain has been added to your project and configured, it is automatically applied to your latest production deployment.\n\nThe first deployment of a new project will be marked as production and subsequently assigned with your custom domain automatically.\n\nWhen you assign a custom domain to a project that's using [Git](https://vercel.com/docs/deployments/git), each push (including merges) that you make to the [production branch](https://vercel.com/docs/deployments/git#production-branch) (commonly `main`) will trigger a deployment to the domain.\n\nWhen you assign a domain to a _different_ branch, you'll need to make a new deployment to the desired branch for the domain to resolve correctly.\n\nReverts take effect immediately, assigning the Custom Domain to the deployment made prior to the point the revert is effective from.\n\nYou can add domain redirects from the Domains tab when more than one domain is present in the project. This provides a way to, for example, redirect a `www` subdomain to an apex domain, but can be used in a variety of ways.\n\nIf a user visits your domain with or without the \"www\" subdomain prefix, we will attempt to redirect automatically. You might still want to add this redirect explicitly.\n\nTo add a redirect, click the Edit button on the domain you want to redirect from and use the Redirect to dropdown to select the domain you want to redirect to:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fredirecting-domains.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fredirecting-domains-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA **domain redirect** that redirects requests made to `[www.acme.com](http://www.acme.com/)` to `acme.com`.\n\nAdding an [apex domain](https://vercel.com/docs/projects/domains/working-with-domains#apex-domain) to a [Project](https://vercel.com/docs/projects/overview) on Vercel will automatically suggest adding its `www` counterpart. Using both of these domains ensures that visitors can always access your site, regardless of whether or not they use `www` when entering the URL.\n\nAfter clicking \"Add\" for a domain, you will be able to choose how to redirect the `www` counterpart:\n\n![Choosing redirect options for your apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwww-modal.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Choosing redirect options for your apex domain.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fwww-modal-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nChoosing redirect options for your apex domain.\n\nWe recommend using the `www` subdomain as your primary domain, with a redirect from the non-`www` domain to it. This allows the [Vercel Edge Network](https://vercel.com/blog/new-edge-dev-infrastructure#our-new-edge-infrastructure) more control over incoming traffic for improved reliability, speed, and security. The redirect is also cached on visitor's browsers for faster subsequent visits.\n\nSome browsers like Google Chrome automatically hide the `www` subdomain from the address bar, so this redirect may not affect your URL appearance.\n\nChoosing to redirect the `www` domain to the non-`www` also works but provides Vercel less control over incoming traffic. Alternatively, you can choose to add only the domain you typed.\n\nAdditional technical information about Domain redirects\n\nThe DNS spec forbids using CNAME records on apex domains like `example.com`. They are, however, allowed for subdomains like `www.example.com`. This is why Vercel recommends primarily using a `www` domain with a CNAME record, and adding a redirect from the non-`www` domain to it.\n\nUsing CNAME instead of A records ensures that domains on Vercel are fast, reliable, and fault-tolerant. Unlike A records, CNAME records avoid hard-coding a specific IP address in favor of an additional lookup at the DNS level. This means that Vercel can quickly steer traffic in the case of DDoS attacks or for performance optimizations.\n\nWhile we recommend using `www` as described above, Vercel maximizes the reliability and performance of your apex domain if you choose to use it as your primary domain by leveraging the [Anycast methodology](https://en.wikipedia.org/wiki/Anycast). This means Vercel still supports geographically routed traffic at infinite scale if you use an A record.\n\nYou can also add redirects programmatically using frameworks, Serverless Functions, Edge Functions, and more. [Learn more](https://vercel.com/docs/edge-network/redirects).",
    "title": "Deploying & Redirecting Domains",
    "description": "Learn how to deploy your domains and set up domain redirects with this guide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/deployments/instant-rollback",
    "markdown": "# Performing an Instant Rollback on a Deployment\n\nVercel provides Instant Rollback as a way to quickly revert to a previous production deployment. This can be useful in situations that require a swift recovery from production incidents, like breaking changes or bugs. It's important to keep in mind that during a rollback:\n\n*   The rolled back deployment is treated as a restored version of a previous deployment\n*   The configuration used for the rolled back deployment will potentially become stale\n*   The environment variables will not be updated if you change them in the project settings and will roll back to a previous build\n*   If the project uses [cron jobs](https://vercel.com/docs/cron-jobs), they will be reverted to the state of the rolled back deployment\n\nFor teams on a Pro or Enterprise plan, all deployments previously aliased to a production domain are [eligible to roll back](#eligible-deployments). Hobby users can roll back to the immediately previous deployment.\n\nTo initiate an Instant Rollback from the Vercel dashboard:\n\n1.  On the project's overview page, you will see the Production Deployment tile. From there, click Instant Rollback.\n    \n    ![Access Instant Rollback from the production deployment tile.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Finstant-rollback.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Access Instant Rollback from the production deployment tile.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Finstant-rollback-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Access Instant Rollback from the production deployment tile.\n    \n2.  After selecting Instant Rollback, you'll see an dialog that displays your current production deployment and the eligible deployments that you can roll back to.\n    \n    If you're on the Pro or Enterprise plans, you can also click the Choose another deployment button to display a list of all [eligible](#eligible-deployments) deployments.\n    \n    Select the deployment that you'd like to roll back to and click Continue.\n    \n    ![Dialog showing the current and previous deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-process.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Dialog showing the current and previous deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-process-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Dialog showing the current and previous deployments.\n    \n3.  Once you've selected the deployment to roll back to, verify the roll back information:\n    \n    *   The names of the domains and sub-domains that will be rolled back\n    *   There are no change in Environment Variables, and they will remain in their original state\n    *   A reminder about the changing behavior of external APIs, databases, and CMSes used in the current or previous deployments\n4.  Once you have verified the details, click the Confirm Rollback button. At this point, you'll get confirmation details about the successful rollback.\n    \n    ![Message for a successful roll back session.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-success.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Message for a successful roll back session.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-success-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Message for a successful roll back session.\n    \n    If you have custom aliases, ensure the domains listed above are correct. The rolled-back deployment does not include custom aliases since these are not a part of your project’s domain settings. Custom aliases will only be included if they were present on the previous production deployment.\n    \n5.  The rollback happens instantaneously and Vercel will point your domain and sub-domain back to the selected deployment. The production deployment tile for your project will highlight the canceled and rolled back commits.\n    \n    When using Instant Rollback, Vercel will turn off [auto-assignment of production domains will be turned off](https://vercel.com/docs/deployments/managing-deployments#staging-and-promoting-a-production-deployment). This means that when you or your team push changes to production, the roll backed deployment won't be replaced.\n    \n    To replace the rolled back deployment, either [turn the auto-assignation setting](https://vercel.com/docs/deployments/managing-deployments#staging-and-promoting-a-production-deployment) on in the project settings and push a new change, or perform a [manual promote](https://vercel.com/docs/deployments/managing-deployments#promote-a-deployment-from-preview-to-production) to a newer deployment which will automatically turn the setting on.\n    \n    ![Production tile showing details about the rolled-back deployment.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-on-production-tile.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Production tile showing details about the rolled-back deployment.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-on-production-tile-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Production tile showing details about the rolled-back deployment.\n    \n\n*   You cannot run parallel roll backs on the same project\n*   Only one deployment can be rolled back at a time for every project. However, a rolled back deployment stays disabled in your deployment list and can be accessed and re-reverted whenever you want\n    \n\nYou can also roll back from the main Deployments tab in your dashboard. Filtering the deployments list by `main` is recommended to view a list of [eligible roll back deployments](#eligible-deployments) as this list all your current and previous deployments promoted to production.\n\nClick the vertical ellipses (⋮) next to the deployment row and select the Instant Rollback option from the context menu.\n\n![Perform instant roll back on any of your main branch's deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-from-deploys-list.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Perform instant roll back on any of your main branch's deployments.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Frollback-from-deploys-list-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nPerform instant roll back on any of your main branch's deployments.\n\n*   Hobby plan: On the hobby plan you can roll back to the previous deployment\n*   Pro and Enterprise plan: Owners and Members on these plans can roll back to any [eligible deployment](#eligible-deployments).\n\nDeployments previously aliased to a production domain are eligible for Instant Rollback. Deployments that have never been aliased to production a domain, e.g., most [preview deployments](https://vercel.com/docs/deployments/preview-deployments), are not eligible.\n\nTo compare the manual promotion options, see [Manually promoting to Production](https://vercel.com/docs/deployments/managing-deployments#manually-promoting-to-production).",
    "title": "Performing an Instant Rollback on a Deployment",
    "description": "Learn how to perform an Instant Rollback on your production deployments and quickly roll back to a previously deployed production deployment.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/limits/usage",
    "markdown": "# Manage and optimize usage\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThere are three plans on Vercel: Hobby, Pro, and Enterprise. To see which plan you are on, select your team from the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector). Next to your team name, you will see the plan you are on.\n\nThe Usage page shows the usage of all projects in your Vercel account by default. To access it, select the Usage tab from your Vercel [dashboard](https://vercel.com/dashboard).\n\nTo use the usage page:\n\n1.  To investigate the usage of a specific team, use the scope selector to select your team\n2.  From your dashboard, select the Usage tab\n3.  We recommend you look at usage over the last 30 days to determine patterns. Change the billing cycle dropdown under Usage to Last 30 days\n4.  You can choose to view the usage of a particular project by selecting it from the dropdown\n5.  In the overview, you'll see an allotment indicator. It shows how much of your usage you've consumed in the current cycle and the projected cost for each item\n6.  Use the [Top Paths](https://vercel.com/docs/pricing/networking#top-paths) chart to understand the metrics causing the high usage\n\nThe usage dashboard helps you understand and project your usage. You can also set up alerts to notify you when you're approaching usage limits. You can set up the following features:\n\n*   Spend Management: Spend management is an opt-in feature. Pro teams can set up a spend amount for your team to trigger notifications or actions. For example a webhook or pausing your projects when you hit your set amount\n*   Usage Notifications: Usage notifications are set up automatically. Pro teams can also [configure the threshold](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications) for usage alerts to notify you when you're approaching your usage limits\n\n### Interested in the Enterprise plan?\n\nContact our sales team to learn more about the Enterprise plan and how it can benefit your team.\n\nThe table below shows the metrics for the [Networking](https://vercel.com/docs/pricing/networking) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Serverless Functions](https://vercel.com/docs/pricing/serverless-functions) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Edge Functions](https://vercel.com/docs/pricing/edge-functions) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Edge Middleware](https://vercel.com/docs/pricing/edge-middleware) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Builds](https://vercel.com/docs/pricing/builds) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Remote Cache Artifacts](https://vercel.com/docs/pricing/artifacts) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Edge Config](https://vercel.com/docs/pricing/edge-config) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Data Cache](https://vercel.com/docs/pricing/data-cache) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Vercel Postgres](https://vercel.com/docs/pricing/postgres) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Vercel KV](https://vercel.com/docs/pricing/kv) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the for [Web Analytics](https://vercel.com/docs/pricing/observability#managing-web-analytics-events), [Speed Insights](https://vercel.com/docs/pricing/observability#managing-speed-insights-data-points), and [Monitoring](https://vercel.com/docs/pricing/observability#managing-data-points) sections of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nThe table below shows the metrics for the [Image Optimization](https://vercel.com/docs/pricing/image-optimization) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nCount shows the total number of a certain metric, across all projects in your account. This is useful to understand past trends about your usage.\n\nProject shows the total usage of a certain metric, per project. This is useful to understand how different projects are using resources and is useful to help you start understanding the best opportunities for optimizing your usage.\n\nFor region-based pricing, you can view the usage of a certain metric, per region. This is useful to understand the requests your site is getting from different regions.\n\n*   Requests: The ratio of cached vs uncached requests\n*   Fast Data Transfer: The ratio of incoming vs outgoing data transfer\n*   Fast Origin Transfer: The ratio of incoming vs outgoing data transfer\n*   Serverless Functions invocations: Successful vs errored vs timed out invocations\n*   Serverless Functions execution: Successful vs errored vs timed out invocations\n*   Builds: Completed vs errored builds\n*   Remote Cache Artifacts: Uploaded vs downloaded artifacts\n*   Remote Cache total size: Uploaded vs downloaded artifacts\n\nThis shows the average usage of a certain metric over a 24 hour period.\n\nFor more information on Vercel's pricing, guidance on optimizing consumption, and invoices, see the following resources:",
    "title": "Manage and optimize usage",
    "description": "Understand how to manage and optimize your usage on Vercel, learn how to track your usage, set up alerts, and optimize your usage to save costs.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/security/vercel-waf/managed-rulesets",
    "markdown": "# WAF Managed Rulesets\n\nManaged rulesets are collections of predefined WAF rules based on standards such as [Open Worldwide Application Security Project (OWASP) Top Ten](https://owasp.org/www-project-top-ten/) that you can enable and configure in your project's Firewall dashboard.\n\nThe following ruleset(s) are currently available:\n\n*   [OWASP Core Ruleset](#configure-owasp-core-ruleset)\n\n*   You need to be a [Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#developer-role) or [Viewer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#viewer-role) in the team to view the Firewall overview page and list the rules\n*   You need to be a [Project administrator](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#project-administrators) or [Team member](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#member-role) to configure, save and apply any rule and configuration\n\nTo enable and configure [OWASP Core Ruleset](https://owasp.org/www-project-top-ten/) for your project, follow these steps:\n\n1.  From your [project's dashboard](https://vercel.com/docs/projects/project-dashboard), select the Firewall tab\n2.  Select the Configure button\n3.  From the Managed Rulesets section, enable OWASP Core Ruleset\n4.  You can apply the changes with the OWASP rules enabled by default:\n    *   When you make any change, you will see a Review Changes button appear or update on the top right with the number of changes requested\n    *   Select Review Changes and review the changes to be applied\n    *   Select Publish to apply the changes to your production deployment\n5.  Or select what OWASP rules to enable first by selecting Configure from the OWASP Core Ruleset list item\n6.  For the OWASP Core Ruleset configuration page, enable or disable the rule that you would like to apply\n7.  For each enabled rule, select Log Only or Deny from the action drop-down\n    *   Use Log Only first and monitor the live traffic on the Firewall overview page to check that the rule has the desired effect when applied\n8.  Apply the changes\n9.  Monitor the live traffic on the Firewall overview page\n\n**Note:** If you need Managed Rulesets, contact us to discuss the Enterprise plan.\n\n[Contact Sales](https://vercel.com/contact/sales)",
    "title": "WAF Managed Rulesets",
    "description": "Learn how to use managed rulesets with the Vercel Web Application Firewall (WAF)",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/dashboard-features/support-center",
    "markdown": "# Support Center\n\nThe Vercel Support Center provides a secure and streamlined way for users on Pro and Enterprise plans to submit support cases. The Support Center allows you to create and view all cases, their statuses, and any messages from the Customer Success team at Vercel. All cases are securely stored to safeguard your data.\n\nTo submit a ticket to Vercel Support, do the following:\n\n1.  From your team's dashboard, select the Support tab and then click the Create Case button\n2.  Select the Problem Area. Depending on which problem area you select, you may need to provide additional information such as the project and deployment URL. This will help our team efficiently respond to your issue\n3.  Select the Severity. See [Issue Severity](https://vercel.com/legal/support-terms#severity-levels) for more information on how to assign the correct level. We may upgrade or downgrade the severity level of the case once submitted.\n4.  Add a relevant Subject to make the ticket easily identifiable\n5.  Add a Description explaining the issue including steps to reproduce\n6.  If there are any relevant screenshots or [logs](https://vercel.com/docs/deployments/logs) that can help diagnose the issue, you can upload them by using the Upload a File button\n7.  Finally, once you have added all relevant information, you can Submit Case\n\nThe team aims to respond to tickets as described in the [Support Terms](https://vercel.com/legal/support-terms#when).\n\nYou can see a list of all support cases, regardless of status, in the Support tab. This list shows the ticket name, number, and the status. To view more information about the ticket, click on the ticket name in the list.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fsupport-center.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdashboard%2Fsupport-center-dark.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSupport ticket information.\n\nEach ticket displays all correspondences with the support team. There are no email notifications sent.\n\nTo manage the status of any ticket, do the following:\n\n1.  From your team's dashboard, select the Support tab\n2.  Find the ticket from the list and click the ticket name to open it\n3.  If the ticket was closed, click Reopen case. If it was open, click Close case. In either scenario, you may want to provide additional information for the support team\n\nThe support team may request additional logs or other information from you that you'll need to attach to your support ticket. To upload a file, do the following:\n\n1.  From your team's dashboard, select the Support tab\n2.  Find the ticket from the list and click the ticket name to open it\n3.  Click Attach a File to bring up your system file dialog. Select the relevant file and click Upload",
    "title": "Support Center",
    "description": "Learn how to communicate securely with the Vercel support team",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/troubleshooting",
    "markdown": "# Troubleshooting domains\n\nThere are many common reasons why your domain configuration may not be working. Check the following:\n\nIs your domain [added](https://vercel.com/docs/projects/domains/add-a-domain#add-and-configure-domain) to your Vercel project?\n\nIs your custom domain pointed to the provided Vercel `CNAME`/`A` record correctly? You can check it by using `dig [example.com]` in your Terminal.\n\nIf you use the [nameservers method](https://vercel.com/docs/projects/domains/troubleshooting#configuring-nameservers-for-wildcard-domains) on your apex domain, please refer to your DNS provider's documentation for the exact instructions on how to change authoritative nameservers.\n\nIs the issue only local to you? Try to clear your browser cache, and flush DNS caches on your machine/network if possible.\n\nWhen you add a domain to Vercel that you have purchased from a third-party DNS provider, you may see an Invalid Configuration alert. There are many reasons why this could be the case:\n\n*   You need to configure the [DNS](#common-dns-issues) records of your domain with your DNS provider so they can be used with your project. To resolve this, follow the steps to [configure your domain](https://vercel.com/docs/projects/domains/add-a-domain#configure-the-domain).\n*   If your domain is in use by another Vercel account, you may be prompted to [verify access to the domain](https://vercel.com/docs/projects/domains/add-a-domain#verify-domain-access) by adding a TXT record. This will not move the domain into your account, but will allow you to use it in your project.\n*   There was an issue generating the SSL certificate for your domain. The most common reason for this is [missing CAA records](#missing-caa-records). For information on other issues that may cause this, see the [common SSL certificate issues](#common-ssl-certificate-issues) section.\n*   You have configured [wildcard subdomains](https://vercel.com/docs/projects/domains/add-a-domain#using-wildcard-domain) on your project, but their nameservers aren’t with Vercel. When using a wildcard domain, you must use the [nameservers method](https://vercel.com/docs/projects/domains/troubleshooting#configuring-nameservers-for-wildcard-domains).\n\nVercel is expecting DNS records of either `76.76.21.21` (for `A` record) or `cname.vercel-dns.com` (for `CNAME` record). Use the following commands on your Terminal to check the DNS records are correctly configured:\n\n*   `dig ns [domain]` to get a domain’s nameservers\n*   `dig a [apex domain e.g. example.com]` to get a domain’s `A` record\n*   `dig cname [subdomain e.g. www.example.com]` to get a domain’s `CNAME` record\n\nIf you prefer a non-command-line interface, you can use a free online tool, such as [Google Public DNS](https://dns.google/). If any of these results do not match what is expected, follow the steps to [configure your domain](https://vercel.com/docs/projects/domains/add-a-domain#configure-the-domain).\n\nDNS changes can take a while to propagate across the globe, depending on the previous DNS record TTL length. This may mean that certain regions can access your site as intended, while others wait until the DNS changes have reached them. Please allow some time for these changes to take effect.\n\nFor more information on [propagation times](https://vercel.com/docs/projects/domains/working-with-dns#dns-propagation) for nameservers and other DNS records, see \"[How long will it take for my Vercel DNS records to update?](https://vercel.com/guides/how-long-to-update-dns-records)\"\n\nBefore changing your DNS records to point to Vercel, we recommend updating your existing DNS record to \"lower\" the TTL (for example 60 seconds) and waiting for the old TTL to expire. Lowering the current TTL and changing a DNS record after its TTL expiration period can ensure that you can quickly roll back the change if you encounter an issue. You can then increase the DNS record TTL to its original value once you confirm everything is working as expected.\n\nWhile we allow the [creation](https://vercel.com/docs/projects/domains/managing-dns-records#adding-dns-records) of AAAA records when using Vercel's nameservers, we do not support IPv6 yet. This means if you are adding a [custom domain](https://vercel.com/docs/projects/domains/add-a-domain) from a [third-party](https://vercel.com/docs/projects/domains/working-with-domains#buying-a-domain-through-a-third-party), you won't be able to point an `AAAA` record to Vercel.\n\nWhen working with DNS records, you may make minor errors in the syntax. These errors can be difficult to debug. Below is a list of common errors made when adding DNS records and the steps required to resolve them.\n\nWhen you add a new DNS record to a domain, the Name field should use the prefix or location of the record. For `www.example.com`, the name argument would be `www`.\n\nIf you have already added a record with this, [remove the record](https://vercel.com/docs/projects/domains/managing-dns-records#removing-dns-records) from the DNS Records section of the Domains tab, and add the record again without the domain as the Name argument.\n\nWhen you add a custom domain with a subdomain to your project, we'll prompt you to add a CNAME DNS record in order to configure the domain. This record _includes_ a period (.) at the end of the Value field. This is intentional to denote that it is an absolute, fully qualified domain name.\n\nThis means that when you add a new CNAME record to your DNS provider, you must copy the value exactly as it appears, including the period.\n\nWhen you add any custom domain to your Vercel project you must [configure](https://vercel.com/docs/projects/domains/add-a-domain#configure-the-domain) the DNS records with your DNS provider so it can be used with your project. When you add a wildcard domain (such as `*.example.com`), you must [use the Nameservers method](https://vercel.com/docs/projects/domains/add-a-domain#vercel-nameservers).\n\nThis is because Vercel needs to be able to set DNS records in order to generate the wildcard certificates. The service that Vercel uses to [generate the certificates](https://vercel.com/docs/projects/domains/working-with-ssl) requires us to verify the domain ownership by using the [DNS-01 challenge method](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge). By changing the nameservers, Vercel will handle the DNS-01 challenge for you automatically, and you don't need to update your verification DNS record upon your certificate renewal each time.\n\nFor more information, see [Why must we use the Domain Nameservers method for Wildcard Domains on Vercel?](https://vercel.com/guides/why-use-domain-nameservers-method-wildcard-domains)\n\nWhen you buy a new domain, you may want to also set up an email address with this domain. Vercel does not provide a mail service for domains purchased with or transferred into it. To learn how to set up email, see [How do I send and receive emails with my Vercel purchased domain?](https://vercel.com/guides/using-email-with-your-vercel-domain)\n\nWhen you add your custom domain to a project and use Vercel's nameservers, you will need to add `MX` records to continue receiving email. To learn how to add `MX` records, see [Why am I no longer receiving email after adding my domain to Vercel?](https://vercel.com/guides/why-has-email-stopped-working)\n\nAll domain purchases and renewals through Vercel are final and cannot be refunded once processed. For more information, see [Can I get a refund for a domain purchased or renewed with Vercel?](https://vercel.com/guides/can-i-get-a-refund-for-a-domain-purchased-or-renewed-with-vercel)\n\nIt can take 3-5 days for a domain to fully register. If the domain is still not showing after 5 days, you can [contact support](https://vercel.com/help).\n\nYou will need to convert the domain to [punycode](https://www.punycoder.com/) in order to add it to your project. For example, a user looking to add a domain such as `jérémie.fr` can do so in the form of `xn--jrmie-bsab.fr`.\n\n[ICANN](https://www.icann.org/) forces domain registrars to wait 60 days:\n\n*   between transfers\n*   between a new registration and a subsequent transfer\n\nIf you transfer before this time, the transfer will fail. Besides this restriction, some DNS providers may further restrict domain transferring by default as a security measure, unless the owner explicitly turns off their protection setting. Please refer to the DNS provider's documentation for more details.\n\nWhen you add an [apex domain](https://vercel.com/docs/projects/domains/working-with-domains#subdomains,-wildcard-domains,-and-apex-domains) (e.g. `example.com`) to your project, Vercel provides you with details, including an IP address, to add as an `A` record in your DNS configuration, as opposed to a `CNAME` record.\n\nThe main reason for that is the DNS [RFC1034](https://www.ietf.org/rfc/rfc1034.txt) (section 3.6.2) states that `If a CNAME RR is present at a node, no other data should be present`. Because an apex domain requires `NS` records and usually some other records, such as `MX` (for a mail service), adding a `CNAME` at the zone apex would violate this rule and likely cause an issue on your domain. Therefore, we encourage you to use an `A` record at your zone apex instead.\n\nWhen you configure an apex domain (example.com) as a custom domain for your project on Vercel, Vercel will be give you an IP address to add as an A record in your DNS configuration. Although this IP address resolves to a specific geographic location, it does not mean that when your users point to your domain, they will be sent to this specific geographic location to resolve the domain.\n\nThis is because Vercel uses [Anycast](https://en.wikipedia.org/wiki/Anycast) IP addresses, which are shared across all regions. That means even if your users access your domain resolving to the same IP addresses from different geographic locations, they will be routed to the closest Edge Network location relative to your users, based on the BGP (Border Gateway Protocol).\n\nWhen you add a domain to your project, Vercel checks if it is already associated with a [Personal Account or Team](https://vercel.com/docs/accounts). A domain can only be associated with _one_ Personal Account or Team at a time.\n\nThe following table shows errors that can be encountered when adding a domain to your project:\n\n| Error Text | Description |\n| --- | --- |\n| `This team has already registered this domain` | The domain you are trying to add is already connected to the team you have selected. |\n| `You have already registered this domain` | The domain you are trying to add is already connected to the Personal Account you have selected. |\n| `The domain mydomain.com is not available` | This more generic error message states that the domain is owned by another Vercel account that you do not have access to. If you have ownership of the domain in question, contact Vercel [support](https://vercel.com/help). |\n\nThere are many reasons why a certificate may not be generated. As the first starting point, we recommend testing your domain with:\n\n1.  [Let's Debug](https://letsdebug.net/): Let's Debug is a diagnostic tool/website to help figure out why you might not be able to issue a certificate for Let's Encrypt\n2.  [DNSViz](https://dnsviz.net/): DNSViz is a tool suite for analysis and visualization of Domain Name System (DNS) behavior, including its security extensions (DNSSEC). They can also tell you about possible DNS misconfiguration.\n\nFor non-wildcard domains, we use [HTTP-01](https://letsencrypt.org/docs/challenge-types/#http-01-challenge) challenge by default, which Vercel handles automatically by intercepting the challenge requests from Let's Encrypt to your domain as long as the domain points to Vercel.\n\nFor wildcard domains, only [DNS-01](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge) challenge is supported, which Vercel requires you to use the [nameservers method](https://vercel.com/docs/projects/domains/troubleshooting#configuring-nameservers-for-wildcard-domains) to handle DNS-01 challenge requests with Vercel's nameservers automatically.\n\nSince we use Let's Encrypt for our automatic SSL certificates, you must add a `CAA` record with the value `0 issue \"letsencrypt.org\"` if other `CAA` records already exist on your domain.\n\nYou can check if your domain currently has any `CAA` records by running the `dig -t CAA +noall +ans example.com` command on your terminal, or check with [Google Public DNS](https://dns.google/) (change the `RR Type` to `CAA` and resolve).\n\nFor more information, see [Why is my domain not automatically generating an SSL certificate?](https://vercel.com/guides/domain-not-generating-ssl-certificate)\n\nAn `_acme-challenge` record allows Let's Encrypt to verify the domain ownership using [DNS-01](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge) challenge. This may exist on your apex or subdomains, so can be checked with `dig -t TXT _acme-challenge.example.com` or `dig -t TXT _acme-challenge.subdomain.example.com`\n\nIf the domain was previously hosted on a different provider, and if the `_acme-challenge` record resolves to something, please consider [removing the DNS record](https://vercel.com/docs/projects/domains/managing-dns-records#removing-dns-records). This will prevent any provider (other than the one in the DNS record) from provisioning certificates for that domain.\n\nThe /.well-known path is reserved and cannot be redirected or rewritten. Only Enterprise teams can configure custom SSL. [Contact sales](https://vercel.com/contact/sales) to learn more.",
    "title": "Troubleshooting domains",
    "description": "Learn about common reasons for domain misconfigurations and how to troubleshoot your domain on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/SET_COOKIE_VALIDATION",
    "markdown": "# SET\\_COOKIE\\_VALIDATION\n\nPrevents usage of cookies that do not conform to the allowed cookie policy.\n\nConformance Rules\n\nIt's a good practice to enforce a cookie policy across a workspace to ensure only certain cookies are allowed to be set.\n\nEngineers should reach out to the appropriate engineer(s) or team(s) for a review of the defined cookie and request the cookie name be added to the allowed cookie policy list. This can be set in the `conformance.config.jsonc` configuration file as follows:\n\n```\n\"SET_COOKIE_VALIDATION\": {\n  \"cookieAllowList\": [\"some-cookie-name\"]\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "SET_COOKIE_VALIDATION",
    "description": "Prevents usage of cookies that do not conform to the allowed cookie policy.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_SECURITY_HEADERS",
    "markdown": "# NEXTJS\\_MISSING\\_SECURITY\\_HEADERS\n\nRequires that security headers are set correctly for Next.js apps and contain valid directives.\n\nConformance Rules\n\nSecurity headers are important to set to improve the security of your application. Security headers can be set for all routes in \\[`next.config.js` files\\] ([https://nextjs.org/docs/advanced-features/security-headers](https://nextjs.org/docs/advanced-features/security-headers)). This conformance check requires that the security headers are set and use a valid value.\n\nRequired headers:\n\n*   Content-Security-Policy\n*   Strict-Transport-Security\n*   X-Frame-Options\n*   X-Content-Type-Options\n*   Referrer-Policy\n\n```\nConformance errors found!\n \nA Conformance error occurred in test \"NEXTJS_MISSING_SECURITY_HEADERS\".\n \nThe security header \"Strict-Transport-Security\" is not set correctly. The \"includeSubDomains\" directive should be used in conjunction with the \"preload\" directive.\n \nTo find out more information and how to fix this error, visit\n/docs/workflow-collaboration/conformance/rules/NEXTJS_MISSING_SECURITY_HEADERS.\n \nIf this violation should be ignored, add the following entry to\n/apps/docs/.allowlists/NEXTJS_MISSING_SECURITY_HEADERS.allowlist.json\nand get approval from the appropriate person.\n \n{\n  \"testName\": \"NEXTJS_MISSING_SECURITY_HEADERS\",\n  \"reason\": \"TODO: Add reason why this violation is allowed to be ignored.\",\n  \"location\": {\n    \"workspace\": \"docs\"\n  },\n  \"details\": {\n    \"header\": \"Strict-Transport-Security\"\n  }\n}\n```\n\nFollow the [Next.js security headers documentation](https://nextjs.org/docs/advanced-features/security-headers) to fix this Conformance test. That document will walk through each of the headers and also links to further documentation to understand what the headers do and how to set the best values for your application.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "NEXTJS_MISSING_SECURITY_HEADERS",
    "description": "Requires that security headers are set correctly for Next.js apps and contain valid directives.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/configuring-functions/region",
    "markdown": "# Configuring Regions for Vercel Functions\n\nThe Vercel platform caches all static content at [the edge](https://vercel.com/docs/edge-network/overview) by default. This means your users will always get static files like HTML, CSS, and JavaScript served from servers that are closest to them. See [Regions](https://vercel.com/docs/edge-network/regions) for a full list of our regions.\n\nIn a globally distributed application, the physical distance between your function and its data source can impact latency and response times. Therefore, Vercel allows you to specify the region in which your functions execute, ideally close to your data source (such as your [database](https://vercel.com/guides/using-databases-with-vercel)). Serverless Functions are deployed to the iad1 region by default to ensure your Serverless Functions are located close to most external data sources hosted on the East Coast of the USA.\n\nIf your functions fetch from or write to a data source, you should optimize to reduce latency between where your function executes and where your data source is located.\n\nFor Serverless Functions\n\n*   By default, Serverless Functions execute in _Washington, D.C., USA_ (`iad1`) for all new projects to ensure they are located close to most external data sources, which are hosted on the East Coast of the USA. You can set a new default region through your [project's settings on Vercel](#select-a-default-serverless-region)\n*   You can define the region in your `vercel.json` using the [`regions` setting](https://vercel.com/docs/functions/configuring-functions/region#project-configuration)\n*   You can set your region in the [Vercel CLI](#vercel-cli)\n\nFor Edge Functions:\n\n*   By default Edge Functions execute in the region closest to the incoming request\n*   You can set one or more preferred regions using the route segment [config](#setting-regions-in-your-function) `preferredRegion` or specify a `regions` key within a config object to set one or more regions for you functions to execute in\n\nThis can only be set for Edge Functions\n\nBy default, Edge Functions execute in the region that is geographically closest to the incoming request, reducing network request times. However, if your function depends on a data source, you may want it to be close to that source for fast responses.\n\nTo configure which region (or multiple regions) you want your function to execute in, pass the [ID of your preferred region(s)](https://vercel.com/docs/edge-network/regions#region-list) in the following way:\n\nThe `preferredRegion` option can be used to specify a single region using a string value, or multiple regions using a string array. See the [Next.js documentation](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#preferredregion) for more information.\n\n```\nexport const runtime = 'edge'; // 'nodejs' is the default\n// execute this function on iad1 or hnd1, based on the connecting client location\nexport const preferredRegion = ['iad1', 'hnd1'];\nexport const dynamic = 'force-dynamic'; // no caching\n \nexport function GET(request: Request) {\n  return new Response(\n    `I am an Edge Function! (executed on ${process.env.VERCEL_REGION})`,\n    {\n      status: 200,\n    },\n  );\n}\n```\n\nDuring regional outage, Vercel has automatic failover to the next closest region to maintain uptime. This is applicable for both global and regionally specified Edge Functions. See the [outage resiliency](https://vercel.com/docs/edge-network/regions#outage-resiliency) docs for more information.\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n\nThe default Function region is _Washington, D.C., USA_ (`iad1`) for all new projects.\n\nTo change the default region in the dashboard:\n\n1.  Choose the appropriate project from your [dashboard](https://vercel.com/dashboard) on Vercel\n2.  Navigate to the Settings tab\n3.  From the left side, select Functions\n4.  Use the Function Region dropdown to select your project's default region:\n    \n    ![The Function Region setting in a Vercel project's dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fedge-network%2Fregions%2Ffunction-region-selection-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The Function Region setting in a Vercel project's dashboard](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fedge-network%2Fregions%2Ffunction-region-selection-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    The Function Region setting in a Vercel project's dashboard\n    \n\nThis can only be set for Serverless Functions\n\nTo change the default region in your `vercel.json` [configuration file](https://vercel.com/docs/projects/project-configuration#regions), add your region code to the `\"regions\"` key:\n\nEnterprise users can also use [`functionFailoverRegions`](https://vercel.com/docs/projects/project-configuration#functionfailoverregions) to specify regions that a Serverless Function should failover to if the default region is out of service.\n\nThis can only be set for Serverless Functions\n\nUse the `vercel --regions` command in your project's root directory to set a region. Learn more about setting regions with the `vercel --regions` command in the [CLI docs](https://vercel.com/docs/cli/deploy#regions).\n\nMultiple Serverless Function regions are only allowed for Enterprise accounts. If your Project requires more than one Serverless Function region, [contact Sales](https://vercel.com/contact/sales).\n\nMultiple Edge Functions regions can be set regardless of your plan.\n\nTo learn more about the regions that you can set for your Functions, see the [region list](https://vercel.com/docs/edge-network/regions#region-list).\n\nVercel Functions have multiple availability zone redundancy by default. Multi-region redundancy is available depending on your runtime.\n\nEnterprise teams can enable multi-region redundancy for Vercel Functions using Node.js.\n\nTo automatically failover to closest region in the event of an outage:\n\n1.  Select your project from your team's [dashboard](https://vercel.com/dashboard)\n2.  Navigate to the Settings tab and select Functions\n3.  Enable the Function Failover toggle:\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706311884%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-failover-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1706311884%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-failover-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n\nTo manually specify the fallback region, you can pass one or more regions to the [`functionFailoverRegions`](https://vercel.com/docs/projects/project-configuration#functionfailoverregions) property in your `vercel.json` file:\n\n```\n{\n  \"functionFailoverRegions\": [\"dub1\", \"fra1\"]\n}\n```\n\nThe region(s) set in the `functionFailoverRegions` property must be different from the default region(s) specified in the [`regions`](https://vercel.com/docs/projects/project-configuration#regions) property.\n\nDuring an automatic failover, Vercel will reroute application traffic to the next closest region, meaning the order of the regions in `functionFailoverRegions` does not matter. For more information on how failover routing works, see [`functionFailoverRegions`](https://vercel.com/docs/projects/project-configuration#functionfailoverregions).\n\nYou can view your default and failover regions through the [deployment summary](https://vercel.com/docs/deployments/overview#deployment-summary):\n\n![Failover regions for your Serverless Functions shown in the deployment summary.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1700219695%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-failover-region-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Failover regions for your Serverless Functions shown in the deployment summary.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1700219694%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Ffunctions%2Ffunction-failover-region-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nFailover regions for your Serverless Functions shown in the deployment summary.\n\nRegion failover is supported with Secure Compute. See [Region Failover](https://vercel.com/docs/security/secure-compute#region-failover) to learn more.\n\nIn the event of regional downtime, Vercel will automatically reroute traffic to the next closest Edge Network region on all plans. For more information on which regions Vercel routes traffic to, see [Outage Resiliency](https://vercel.com/docs/edge-network/regions#outage-resiliency).",
    "title": "Configuring Regions for Vercel Functions",
    "description": "Learn how to configure regions for Vercel Functions.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/metrics",
    "markdown": "# Speed Insights Metrics\n\nWhile many performance measurement tools, like [Lighthouse](https://web.dev/measure/), estimate user experience based on lab simulations, Vercel's Real Experience Score (RES) uses real data points collected from your users' devices.\n\nAs a result, RES offers an authentic evaluation of your users' actual experiences with your application. This real-time data allows you to gauge the true performance of your application, providing a continuous stream of insights that are invaluable for tracking changes over time.\n\nBy integrating these insights into your development workflow through our dashboard, you can easily correlate shifts in performance with new deployments. This real-time feedback can help you fine-tune your application, ensuring optimal user experience.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fres-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fres-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn example of a Real Experience Score over time.\n\nThe timestamps in the Speed Insights view are in local time (not UTC).\n\nThe Core Web Vitals, as defined by Google and the [Web Performance Working Group](https://www.w3.org/webperf/), are key metrics that assess your web application's loading speed, responsiveness, and visual stability.\n\nSpeed Insights now uses Lighthouse 10 scoring criteria instead of Lighthouse 6 criteria as explained in [Updated Scoring Criteria](https://vercel.com/docs/speed-insights/migrating-from-legacy#updated-scoring-criteria)\n\n| Metric | Description | Target Value |\n| --- | --- | --- |\n| [Largest Contentful Paint (LCP)](#largest-contentful-paint-lcp) | Measures the time from page start to when the largest content element is fully visible. | 2.5 seconds or less |\n| [Cumulative Layout Shift (CLS)](#cumulative-layout-shift-cls) | Quantifies the fraction of layout shift experienced by the user over the lifespan of the page. | 0.1 or less |\n| [Interaction to Next Paint (INP)](#interaction-to-next-paint-inp) | Measures the time from user interaction to when the browser renders the next frame. | 200 millisecond or less |\n| [First Contentful Paint (FCP)](#first-contentful-paint-fcp) | Measures the time from page start to the rendering of the first piece of DOM content. | 1.8 seconds or less |\n| [First Input Delay (FID)](#first-input-delay-fid) | Measures the time from a user's first interaction to the time the browser is able to respond. | 100 milliseconds or less |\n| [Total Blocking Time (TBT)](#total-blocking-time-tbt) | Measures the total amount of time between FCP and TTI where the main thread was blocked long enough to prevent input responsiveness. | Under 800 milliseconds |\n| [Time to First Byte (TTFB)](#time-to-first-byte-ttfb) | Measures the time from the request of a resource to when the first byte of a response begins to arrive. | Under 800 milliseconds |\n\n[Largest Contentful Paint](https://web.dev/articles/lcp) (LCP) is a performance metric that measures the time from when the page starts loading to when the largest content element in the viewable screen is fully displayed. This could be an image, a video, or a block of text. LCP is important as it gives a measure of when the main content of the page is visible to the user.\n\nA good LCP time is considered to be 2.5 seconds or less.\n\n[Cumulative Layout Shift](https://web.dev/articles/cls) (CLS) is a performance metric that quantifies the fraction of layout shift experienced by the user. A layout shift occurs any time a visible element changes its position from one rendered frame to the next.\n\nThe score is calculated from the product of two measures:\n\n*   The impact fraction - the area of the viewport impacted by the shift\n*   The distance fraction - the distance the elements have moved relative to the viewport between frames\n\nA good CLS score is considered to be 0.1 or less.\n\n[Interaction to Next Paint](https://web.dev/articles/inp) (INP) is a metric that measures the time from when a user interacts with your site to the time the browser renders the next frame in response to that interaction.\n\nThis metric is used to gauge the responsiveness of a page to user interactions. The quicker the page responds to user input, the better the INP.\n\nLower INP times are better, with an INP time of 200 milliseconds or less being considered good.\n\n[First Contentful Paint](https://web.dev/articles/fcp) (FCP) is a performance metric that measures the time from the moment the page starts loading to the moment the first piece of content from the Document Object Model (DOM) is rendered on the screen. This could be any content from the webpage such as an image, a block of text, or a canvas render. The FCP is important because it indicates when the user first sees something useful on the screen, providing an insight into your webpage's loading speed.\n\nLower FCP times are better, with an FCP time of 1.8 seconds or less being considered good.\n\nTime to First Byte (TTFB) measures the time between the request for a resource and when the first byte of a response begins to arrive.\n\nLower TTFB times are better, with a good TTFB time being considered as under 800 milliseconds.\n\n[First Input Delay](https://web.dev/articles/fid) (FID) measures the time from when a user first interacts with your site (by selecting a link for example) to the time when the browser is able to respond to that interaction. This metric is important on pages where the user needs to do something, because it captures some of the delay that users feel when trying to interact with the page.\n\nA good FID score is 100 milliseconds or less.\n\nAs [stated by Google](https://web.dev/vitals/#lab-tools-to-measure-core-web-vitals), simulating an environment to measure Web Vitals necessitates a different approach since no real user request is involved.\n\nTotal Blocking Time (TBT) quantifies how non-interactive a page is. It measures the total time between the First Contentful Paint (FCP) and Time to Interactive (TTI) where the main thread was blocked for long enough to prevent user input. Long tasks (over 50 ms) block the main thread, preventing the user from interacting with the page. The sum of the time portions exceeding 50 ms constitutes the TBT.\n\nLower TBT times are better, with a good TBT time being considered as under 800 milliseconds.\n\nFor more in-depth information related to performance metrics, visit the PageSpeed Insights [documentation](https://developers.google.com/speed/docs/insights/v5/about) .\n\nVercel calculates performance scores using real-world data obtained from the [HTTP Archive](https://httparchive.org/). This process involves assigning each collected metric (e.g., [First Contentful Paint (FCP)](#first-contentful-paint-fcp)) a score ranging from 0 to 100. The score is determined based on where the raw metric value falls within a log-normal distribution derived from actual website performance data.\n\nFor instance, if [HTTP Archive](https://httparchive.org/) data shows that the top-performing sites render the Largest Contentful Paint (LCP) in approximately 1,220ms, this value is mapped to a score of 99. Vercel then uses this correlation, along with your project's specific LCP metric value, to compute your LCP score.\n\nThe Real Experience Score is a weighted average of all individual metric scores. Vercel has assigned each metric a specific weighting, which best represents user's perceived performance on mobile and desktop devices.\n\n| Metric | Weight | Score of 50 | Score of 90 |\n| --- | --- | --- | --- |\n| FCP | 15% | 3s  | 1.8s |\n| LCP | 30% | 4s  | 2.5s |\n| INP | 30% | 500ms | 200ms |\n| CLS | 25% | 0.25 | 0.10 |\n\nIn the [Virtual Experience Score](#predictive-performance-metrics-with-virtual-experience-score), [Total Blocking Time (TBT)](#total-blocking-time-tbt) replaces INP for desktop devices:\n\n| Metric | Weight | Score of 50 | Score of 90 |\n| --- | --- | --- | --- |\n| TBT | 30% | 350ms | 150ms |\n\nThis approach allows for a more accurate assessment of your application's performance, based on the actual experiences of your users on different devices.\n\nIn the context of Vercel's Speed Insights, a data point is a single unit of information that represents a measurement of a specific Web Vital metric during a user's visit to your website.\n\nData points are collected on hard navigations, which in the case of Next.js apps, are only the first-page view in a session. During a user's visit, data points are gathered during the initial page load, user interaction, and upon leaving the page.\n\nAs of now, up to 6 data points can be potentially tracked per visit:\n\n*   On page load: Time to First Byte ([TTFB](#time-to-first-byte-ttfb)) and First Contentful Paint ([FCP](#first-contentful-paint-fcp))\n*   On interaction: First Input Delay ([FID](#first-input-delay-fid)) and Largest Contentful Paint ([LCP](#largest-contentful-paint-lcp))\n*   On leave: Interaction to Next Paint ([INP](#interaction-to-next-paint-inp)), Cumulative Layout Shift ([CLS](#cumulative-layout-shift-cls)), and, if not already sent, Largest Contentful Paint ([LCP](#largest-contentful-paint-lcp)).\n\nThe collection of metrics may vary depending on how users interact with or exit the page. On average, you can expect to collect between 3 and 6 metrics per visit.\n\nThese data points provide insights into various performance aspects of your website, such as the time it takes to display the first content ([FCP](#first-contentful-paint-fcp)) and the delay between user input and response ([FID](#first-input-delay-fid)). By analyzing these data points, you can gain valuable information to optimize and enhance the performance of your website.\n\nBy default the user experience percentile is set to P75, which offers a balanced overview of the majority of user experiences. You can view the data for the other percentiles by selecting them in the time-based line graph.\n\nThe chosen percentile corresponds to the proportion of users who experience a load time faster than a specific value. Here's how each percentile is defined:\n\n*   P75: Represents the experience of the fastest 75% of your users, excluding the slowest 25%.\n*   P90: Represents the experience of the fastest 90% of your users, excluding the slowest 10%.\n*   P95: Represents the experience of the fastest 95% of your users, excluding the slowest 5%.\n*   P99: Represents the experience of the fastest 99% of your users, excluding the slowest 1%.\n\nFor instance, a P75 score of 1 second for [First Contentful Paint (FCP)](#first-contentful-paint-fcp) means that 75% of your users experience an FCP faster than 1 second. Similarly, a P99 score of 8 seconds means 99% of your users experience an FCP faster than 8 seconds.\n\nPerformance metrics, including the [Real Experience Score](#real-user-monitoring), the [Virtual Experience Score](#predictive-performance-metrics-with-virtual-experience-score), and the individual [Core Web Vitals](#core-web-vitals-explained) (along with [Other Web Vitals](#other-web-vitals)) are color-coded as follows:\n\n*   0 to 49 (red): Poor\n*   50 to 89 (orange): Needs Improvement\n*   90 to 100 (green): Good\n\nStrive to achieve 'Good' scores (90 to 100) for the Real and Virtual Experience Scores to ensure an optimal user experience. However, keep in mind that reaching a score of 100 is extremely challenging due to diminishing returns — the effort required to improve your score grows exponentially the closer you get to 100. Thus, a jump from 99 to 100 demands a much larger metric improvement compared to moving from 90 to 94.\n\nHigher Real Experience and Virtual Experience Scores generally translate to superior end-user experiences, making it worthwhile to strive for improved Web Vital Scores.\n\nPerformance scores are color-coded to reflect user experience levels: 'Poor' (red), 'Needs Improvement' (orange), and 'Good' (green). Improvements within the same color range (like moving from a score of 50 to 80, both in the 'Needs Improvement' category) enhance user experience but don't significantly impact search engine rankings.\n\nIf you aim to boost your site's search ranking, aim to move your scores into a higher color-coded category, for instance, from 'Needs Improvement' (orange) to 'Good' (green). This change reflects substantial improvements in performance and is more likely to be rewarded with higher search engine rankings.\n\nSpeed Insights offers a variety of views to help you analyze your application's performance data. This allows you to identify areas that need improvement and make informed decisions about how to optimize your site.\n\nThe Speed Insights URL view offers a list of all routes (the actual pages you built) and paths (the URLs requested by the visitor) that your application users visit. It is organized by performance score and sorted by data points.\n\n![Speed Insights URL view for routes and paths of your project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fkanban-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Speed Insights URL view for routes and paths of your project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fkanban-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSpeed Insights URL view for routes and paths of your project.\n\nThe Selectors tab on a Speed Insights metric provides a detailed breakdown of the performance of individual HTML elements on your site. This view is particularly useful for identifying specific elements that may be causing performance issues.\n\nHTML element attribution is available for the following metrics:\n\n*   Interaction to Next Paint (INP)\n*   First Input Delay (FID)\n*   Cumulative Layout Shift (CLS)\n*   Largest Contentful Paint (LCP)\n\nThe Countries section in Speed Insights provides a geographical breakdown of your application's performance. This view is helpful for identifying regions where your application may be underperforming.\n\n![Geographic map of the P75 score where the color intensity indicates the relative amount of data points per country](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fcountry-map-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Geographic map of the P75 score where the color intensity indicates the relative amount of data points per country](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fcountry-map-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nGeographic map of the P75 score where the color intensity indicates the relative amount of data points per country\n\nThe Real Experience Score ([RES](#real-user-monitoring-with-real-experience-score-res)) displayed in the Speed Insights tab is derived from actual data points collected from your visitors' devices. As such, it can only offer insight into your app's performance post-deployment. While it's critical to gather these real-world data points, they only reflect user experiences after the fact, limiting their predictive power.\n\nIn contrast, the Virtual Experience Score (VES) is a predictive performance metric that allows you to anticipate the impact of changes on your app's performance, ensuring there's no regression in user experience. This metric is provided by [integrations](https://vercel.com/integrations) like [Checkly](https://vercel.com/integrations/checkly) that employ Deployment Checks.\n\nSetting up an integration supporting performance checks enables these checks to run for each deployment. These checks assess whether the user experience is likely to improve or deteriorate with the proposed changes, helping guide your decision-making process.\n\nLike RES, the VES draws from four separate Speed Insights, albeit with some variations:\n\n*   In place of the First Input Delay ([FID](#first-input-delay-fid)) Core Web Vital, the Virtual Experience Score utilizes Total Blocking Time ([TBT](#total-blocking-time-tbt))\n*   The specific device type used for checks depends on the Integration you've set up. For example, Checkly only uses \"Desktop\" for determining scores",
    "title": "Speed Insights Metrics",
    "description": "Learn what each performance metric on Speed Insights means and how the scores are calculated.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/accounts/plans/hobby",
    "markdown": "# Vercel Hobby Plan\n\nThe Hobby plan is free and aimed at developers with personal projects, and small-scale applications. It offers a generous set of features for individual users, including the following Managed Infrastructure, DX Platform, and Platform features on a per month basis:\n\nMoving from the Hobby to Pro plan, you receive:\n\n| Feature | Hobby | Pro |\n| --- | --- | --- |\n| Edge Middleware Invocations | Up to 1,000,000 Invocations | 1,000,000 Invocations included |\n| Data Cache Reads | Up to 50,000 Reads | 100,000 included |\n| Data Cache Writes | Up to 5,000 | 10,000 included |\n| Edge Requests | Up to 1,000,000 requests | 10,000,000 requests included |\n| Projects | 200 | Unlimited |\n| Serverless Function maximum duration | 10s (default) - [configurable up to 60s](https://vercel.com/docs/functions/configuring-functions/duration) | 15s (default) - [configurable up to 300s](https://vercel.com/docs/functions/configuring-functions/duration) |\n| Build execution minutes | 6,000 | 24,000 |\n| Team collaboration features | \\-  | Yes |\n| Domains per project | 50  | Unlimited |\n| Deployments per day | 100 | 6,000 |\n| Analytics | \\-  | Limited |\n| Email support | \\-  | Yes |\n| [Vercel AI Playground models](https://sdk.vercel.ai/) | Llama, GPT 3.5, Mixtral | GPT-4, Claude, Mistral Large, Code Llama |\n| [RBAC](https://vercel.com/docs/accounts/team-members-and-roles/access-roles) available | N/A | [Owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role), [Member](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#member-role), [Billing](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#billing-role) |\n| [Comments](https://vercel.com/docs/workflow-collaboration/comments) | Available | Available for team collaboration |\n| Log Drains | \\-  | [Configurable](https://vercel.com/docs/observability/log-drains/configure-log-drains) (not on a trial) |\n| Spend Management | N/A | [Configurable](https://vercel.com/docs/pricing/spend-management) |\n| [Vercel Toolbar](https://vercel.com/docs/workflow-collaboration/vercel-toolbar) | Available for certain features | Available |\n| [Storage](https://vercel.com/docs/storage) | KV, Postgres, Blob (Beta) | KV, Postgres, Blob (Beta) |\n| [Activity Logs](https://vercel.com/docs/observability/activity-log) | Available | Available |\n| [Runtime Logs](https://vercel.com/docs/observability/runtime-logs) | 1 hour of logs and up to 4000 rows of log data | 1 day of logs and up to 100,000 rows of log data |\n| [DDoS Mitigation](https://vercel.com/docs/security/ddos-mitigation) | On by default. Optional [Attack Challenge Mode](https://vercel.com/docs/security/attack-challenge-mode). | On by default. Optional [Attack Challenge Mode](https://vercel.com/docs/security/attack-challenge-mode). |\n| [Vercel WAF IP Blocking](https://vercel.com/docs/security/vercel-waf/ip-blocking) | Up to 10 | Up to 100 |\n| [Vercel WAF Custom Rules](https://vercel.com/docs/security/vercel-waf/custom-rules) | Up to 3 | Up to 40 |\n| Deployment Protection | [Vercel Authentication](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/vercel-authentication) | [Vercel Authentication](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/vercel-authentication), [Password Protection](https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/password-protection) (Add-on), [Sharable Links](https://vercel.com/docs/security/deployment-protection/methods-to-bypass-deployment-protection/sharable-links) |\n\nTo upgrade to the Pro plan, see [Upgrading to Pro](https://vercel.com/docs/accounts/plans/pro#upgrading-to-pro). Or, click the button below to start a [trial](https://vercel.com/docs/accounts/plans/pro/trials):\n\n### Get started with Vercel Pro for free\n\nExperience the power of Pro features during your trial. Unlock unlimited Serverless Function requests, 1000 GB-hours of execution, boosted application bandwidth, and enjoy free access to Speed Insights throughout your trial period.\n\nTo downgrade from a Pro to Hobby plan without losing access to the team's projects:\n\n1.  Navigate to your [dashboard](https://vercel.com/dashboard) and select your team from the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector)\n2.  Select the Settings tab\n3.  Select Billing in the Settings navigation\n4.  Click \"Downgrade Plan\" in the Plan sub-section\n\nWhen you downgrade a Pro team, all active members except for the original owner are removed.\n\nDue to restrictions in the downgrade flow, Pro teams will need to [manually transfer any connected Stores](https://vercel.com/docs/storage#transferring-your-database) and/or [Domains](https://vercel.com/docs/projects/domains/transfer-your-domain#transferring-domains-between-projects) to a new destination before proceeding with downgrade.\n\nAs the Hobby plan is a free tier there are no billing cycles. In most cases, if you exceed your usage limits on the Hobby plan, you will have to wait until 30 days have passed before you can use the feature again.\n\nSome features have shorter or longer time periods:\n\nAs stated in the [fair use guidelines](https://vercel.com/docs/limits/fair-use-guidelines#commercial-usage), the Hobby plan restricts users to non-commercial, personal use only.\n\nWhen your personal account gets converted to a Hobby team, your usage and activity log will be reset. To learn more about this change, read the [changelog](https://vercel.com/changelog/2024-01-account-changes).",
    "title": "Vercel Hobby Plan",
    "description": "Learn about the Hobby plan and how it compares to the Pro plan.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/integrations/cloudflare",
    "markdown": "# Vercel and Cloudflare Integration\n\nVercel integrates with Cloudflare in two ways:\n\n*   [Using Cloudflare as your DNS provider](#using-cloudflare-as-your-dns-provider)\n*   [Using Cloudflare as a reverse proxy](#using-cloudflare-as-a-reverse-proxy)\n\nWhile Vercel [does offer DNS](https://vercel.com/docs/projects/domains/working-with-dns), you may already have a domain registered with Cloudflare. If so, Cloudflare manages DNS for your domain.\n\nTo use Cloudflare as your DNS provider, follow the steps below:\n\n1.  In your Cloudflare dashboard, create a CNAME record pointing your domain to `cname.vercel-dns.com`.\n    \n2.  Set the Proxy status to DNS only. This ensures DNS queries result in Vercel serving the request instead of Cloudflare.\n    \n\nVercel offers a native reverse proxy with [redirects](https://vercel.com/docs/edge-network/redirects) to proxy requests to other services. However, if you want to use Cloudflare as a reverse proxy, you can do so by following the steps below:\n\n1.  In your Cloudflare dashboard, create a CNAME record pointing your domain to `cname.vercel-dns.com`.\n    \n2.  Enable the Cloudflare proxy to send traffic through Cloudflare first.\n    \n3.  Set Cloudflare SSL mode to [Full](https://developers.cloudflare.com/ssl/origin-configuration/ssl-modes/full) to encrypt traffic between Cloudflare and Vercel.\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1691631800%2Fdocs-assets%2Fstatic%2Fdocs%2Fcloudflare%2Ffull.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1691631800%2Fdocs-assets%2Fstatic%2Fdocs%2Fcloudflare%2Ffull-dark.jpg&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n\nOnly [Enterprise plan](https://vercel.com/docs/accounts/plans/enterprise) customers can set up wildcard domains with Cloudflare Proxy.\n\nEnterprise plan customers can issue a [Cloduflare Origin CA certificate](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/) with a wildcard SAN (Subject Alternative Name) and [upload it on Vercel](https://vercel.com/docs/projects/domains/custom-SSL-certificate).\n\nBoth Cloudflare and Vercel utilize the [ACME protocol](https://datatracker.ietf.org/doc/html/rfc8555)—with SSL providers like [Let’s Encrypt](https://letsencrypt.org/)—to issue certificates. To validate domain ownership, the protocol sends an HTTP (not HTTPS) request to `/.well-known/acme-challenge/<id>` on your server.\n\nCloudflare has a variety of services that, depending on their configuration, could block the ACME protocol verification checks, resulting in Vercel failing to issue TLS certificates properly:\n\n*   Page Rules\n*   Access\n*   Bot Fight Mode\n\nTo avoid disruption, the following path:\n\n*   `http://<YOUR_DOMAIN>/.well-known/acme-challenge/*`\n\nMust be excluded from page rules, bot protection, or bypassed inside Access.",
    "title": "Vercel and Cloudflare Integration",
    "description": "Integrate your Vercel project with your Cloudflare domain.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/image-optimization/limits-and-pricing",
    "markdown": "# Limits and Pricing for Image Optimization\n\nImage Optimization pricing is dependent on your plan and how many unique [source images](#source-images) you have across your projects during your billing period.\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nImage Optimization on the Pro trial plan is free for the first 2500 source images.\n\n| Plan | Image Optimization Limit | Price (after limit hit) |\n| --- | --- | --- |\n| Pro Trial | 2500 source images | [N/A](#pro-and-enterprise) |\n\nThe table below shows the metrics for the [Image Optimization](https://vercel.com/docs/pricing/image-optimization) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nUsage is not incurred until an image is requested. Learn more about [managing costs](https://vercel.com/docs/image-optimization/managing-image-optimization-costs) for Image Optimization.\n\nA source image is the value that is passed to the `src` prop. A single source image can produce multiple optimized images. For example:\n\n*   Usage: `<Image src=\"/hero.png\" width=\"700\" height=\"745\" />`\n*   Source image: `/hero.png`\n*   Optimized image: `/_next/image?url=%2Fhero.png&w=750&q=75`\n*   Optimized image: `/_next/image?url=%2Fhero.png&w=828&q=75`\n*   Optimized image: `/_next/image?url=%2Fhero.png&w=1080&q=75`\n\nFor example, if you are on a Pro plan and have passed 6000 source images to the `src` prop within the last billing cycle, your bill will be $5 for optimized images.\n\nYou are billed for the number of unique [source images](#source-images) requested during the billing period.\n\nAdditionally, charges apply for [Fast Data Transfer](https://vercel.com/docs/pricing/networking#fast-data-transfer) when optimized images are delivered from Vercel's [Edge Network](https://vercel.com/docs/edge-network/overview) to clients.\n\nImage Optimization is free for Hobby users within the [usage limits](https://vercel.com/docs/limits/fair-use-guidelines#typical-monthly-usage-guidelines). As stated in the [Fair Usage Policy](https://vercel.com/docs/limits/fair-use-guidelines#commercial-usage), Hobby accounts are restricted to non-commercial personal use only.\n\nVercel will send you emails as you are nearing your [usage](#pricing) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard).\n\nOnce you exceed the limits:\n\n*   New [source images](#source-images) will fail to optimize and instead return a runtime error response with [402 status code](https://vercel.com/docs/errors/platform-error-codes#402:-deployment_disabled). This will trigger the [`onError`](https://nextjs.org/docs/app/api-reference/components/image#onerror) callback and show the [`alt`](https://nextjs.org/docs/app/api-reference/components/image#alt) text instead of the image\n*   Previously optimized images have already been cached and will continue to work as expected, without error\n\nYou will not be charged for exceeding the usage limits, but this usually means your application is ready to upgrade to a [Pro plan](https://vercel.com/docs/accounts/plans/pro).\n\n### Get started with Vercel Pro for free\n\nExperience the power of Pro features during your trial. Unlock unlimited Serverless Function requests, 1000 GB-hours of execution, boosted application bandwidth, and enjoy free access to Speed Insights throughout your trial period.\n\nIf you want to continue using Hobby, read more about [Managing Usage & Costs](https://vercel.com/docs/image-optimization/managing-image-optimization-costs) to see how you can disable Image Optimization per image or per project.\n\nFor Teams on Pro trials, the [trial will end](https://vercel.com/docs/accounts/plans/pro/trials#post-trial-decision) if your Team uses over 2500 source images. For more information, see the [trial limits](https://vercel.com/docs/accounts/plans/pro/trials#trial-limitations).\n\nVercel will send you emails as you are nearing your [usage](#pricing) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). Once your team exceeds the 5000 source images limit, you will continue to be charged $5 per 1000 source images for on-demand usage.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nFor all the images that are [optimized by Vercel](https://vercel.com/docs/image-optimization#measuring-performance), the following limits apply:\n\n*   The maximum size for an optimized image is 10 MB, as set out in the [Cacheable Responses limits](https://vercel.com/docs/edge-network/caching#how-to-cache-responses). If this limit is exceeded, a `500` status code will be returned\n*   Each [source image](#source-images) has a maximum width and height of 8192 pixels\n*   A [source image](#source-images) must be one of the following formats to be optimized: `.jpeg`, `.png`, `.webp`. Other formats will be served as-is\n\nSee the [Fair Usage Policy](https://vercel.com/docs/limits/fair-use-guidelines#typical-monthly-usage-guidelines) for typical monthly usage guidelines.",
    "title": "Limits and Pricing for Image Optimization",
    "description": "This page outlines information on the limits that are applicable to using Image Optimization, and the costs they can incur.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/working-with-ssl",
    "markdown": "# Working with SSL Certificates\n\nAn SSL certificate enables encrypted communication between user's browser and your web server to be encrypted. The certificate is installed on the web server and allows for website authentication and data encryption. This is particularly important if you are working with any sort of authentication and personal or financial data.\n\nSSL certificates are issued from a certificate authority (CA) for each domain. While it is possible to [create and upload your own custom certificate](https://vercel.com/docs/projects/domains/custom-SSL-certificate), Vercel will automatically try to generate a certificate for every domain once it is added to a project, regardless of if it was registered through Vercel or not. However, it will only work once the certificate validation request is successful, which happens once DNS records are added and propagated.\n\nVercel uses LetsEncrypt for certificates. For all non-wildcard domains, we use the [HTTP-01 challenge method](https://letsencrypt.org/docs/challenge-types/#http-01-challenge) and providing the request can make it to Vercel, then our infrastructure will deal with it. For wildcard requests, we use the [DNS-01 challenge method](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge). This is why we require nameservers to be with Vercel to use wildcard domains - if the DNS isn't with us, we can't make the DNS record to approve it.\n\nIssuing a certificate happens in the following way:\n\n1.  Vercel asks LetsEncrypt for a certificate for that domain and asks how it can prove control of the domain\n2.  Let's Encrypt reviews the domain and issues Vercel with a [challenge](https://letsencrypt.org/docs/challenge-types/) in order to authorise the certificate to be generated. This is usually in the format of creating a file or DNS record with a particular code.\n3.  Vercel creates that file with the code on the HTTP-01 or DNS-01 validation path and tells LetsEncrypt it's done\n4.  LetsEncrypt then check to see if the file is there and if they can see the file, they send us the certificate\n5.  Vercel then adds the certificate to our infrastructure and it then starts working on HTTPS\n\nFor information about when SSL certificate renewals happen, see [When is the SSL Certificate on my Vercel Domain renewed?](https://vercel.com/guides/renewal-of-ssl-certificates-with-a-vercel-domain)\n\nThe /.well-known path is reserved and cannot be redirected or rewritten. Only Enterprise teams can configure custom SSL. [Contact sales](https://vercel.com/contact/sales) to learn more.\n\nTo learn more about common SSL issues, see the [troubleshooting](https://vercel.com/docs/projects/domains/troubleshooting#common-ssl-certificate-issues) doc.",
    "title": "Working with SSL Certificates",
    "description": "Learn how Vercel uses SSL certification to keep your site secure.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/working-with-dns",
    "markdown": "# Working with DNS\n\nDNS is the system used to connect domain names to IP addresses. When you make a request for a website, the browser performs a DNS query. It's usually the recursive resolver that carries out this work, going to the root DNS nameserver, TLD nameserver, and the authoritative server, if it isn't found in the cache.\n\n![DNS configuration with multiple DNS record types](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-record-example.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![DNS configuration with multiple DNS record types](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fcustom-domains%2Fdns-record-example-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nDNS configuration with multiple DNS record types\n\nThere are a number of different types of DNS records that can be used together to create a DNS configuration. Some of the common information that you might see in a DNS record are:\n\n*   Host Name: The hostname of `www`\n*   IP Address or URL: The IP address (or domain or in the case of a CNAME record), for example, `76.76.21.21` or `vercel.com.`\n*   TTL (Time to live): The length of time the recursive server should keep a particular record in its cache. You should set this time based on how often people are visiting your site and how often your site may change. For more information, see the [DNS propagation](#dns-propagation) section.\n*   Record Type: For example, `CNAME`. There are many different types of records, some of the most common are listed below.\n\nTo learn more about adding, verifying, and removing DNS records, see \"[Managing DNS records](https://vercel.com/docs/projects/domains/managing-dns-records)\".\n\n| Type | Description |\n| --- | --- |\n| A   | This is used to translate domain names into IPv4 addresses. It is the most common type of DNS record. |\n| AAAA | Similar to `A`, but this is used to translate domain names into IPv6 addresses. IPv6 is not supported on Vercel. See [IPv6 support](https://vercel.com/docs/projects/domains/troubleshooting#ipv6-support) for more information. |\n| ALIAS | This is used to map a domain name to another domain name. It is similar to a `CNAME` record, but can only be used at the zone apex. The target domain must return `A` or `AAAA` record. |\n| CAA | This is used to specify which certificate authorities are allowed to issue certificates for a domain. Vercel automatically adds a CAA record for Let's Encrypt at the zone apex. |\n| CNAME | This is used to specify that the domain name is an alias for another domain name. It cannot be used at the zone apex. See [Working with Apex domain](https://vercel.com/docs/projects/domains/troubleshooting#working-with-apex-domain) for more information. |\n| HTTPS | This is used to achieve a CNAME-like functionality, but can be used at the zone apex. This is designed specifically for HTTP protocol to improve client performance in establishing secure connections. The record includes additional information about the target server, such as supported ALPN protocols (e.g., HTTP/2, HTTP/3, etc). This is a fairly new record type, and not all clients can support. See [RFC 9460](https://datatracker.ietf.org/doc/rfc9460/) for more details. |\n| MX  | This is used to specify the mail server for the domain. |\n| NS  | This is used to specify the authoritative name server for the domain. |\n| TXT | This is used to provide information about the domain in text format. Commonly used for verification purposes. |\n| SRV | This is used to specify the location of the service. The record contains priority, weight, port, target, and other information. |\n\nWhen you're configuring or making changes to your DNS settings, you should be aware that it doesn't happen instantaneously. There's a whole network of servers, each of which has their own cache, and each of these will need to be updated to any new values that you set. For this reason, it can be normal to take up to 24-48 hours to see changes fully propagate through the network.\n\nAs we described earlier, when you set a record, you normally set a TTL value, or Time to Live, on a DNS record. This value, set in seconds, is the length of time a DNS cache will store information about your site, before it requests a new copy of the record from the authoritative server.\n\nWhen you set the TTL value in your DNS record, you need to find the balance between serving your users the site quickly, and ensuring they're not seeing outdated information. A short TTL (minimum 30s) is beneficial if you are constantly updating the content, but will cause slower load times for your site. Using a longer TTL (max 86400 seconds, or 24 hours) means that records are cached for longer, so the site can load quickly for your users. Vercel defaults to 60s for a DNS record.\n\nWhen you are transferring an existing (in-use) domain to Vercel, it's a good practice to check the existing DNS record and its TTL before switching. Ideally, about 24 hours in advance of changes, you should shorten the DNS TTL to 60s. Once it's propagated, you can then change the DNS record to Vercel so that traffic quickly moves over to the new site because now the DNS TTL is much shorter.\n\nYou can use tools such as [https://www.whatsmydns.net](https://www.whatsmydns.net/) to determine if your DNS settings have been fully propagated.\n\nTo learn more about common DNS issues, see the [troubleshooting](https://vercel.com/docs/projects/domains/troubleshooting#common-dns-issues) doc.",
    "title": "Working with DNS",
    "description": "Learn how DNS works in order to properly configure your domain.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/configuring-functions/duration",
    "markdown": "# Configuring Maximum Duration for Vercel Functions\n\nThe maximum duration configuration determines the longest time that a function in can run. This guide will walk you through configuring the maximum duration for your Vercel Functions.\n\nYou can't configure a maximum duration for functions using the Edge runtime. They can run indefinitely provided they send an initial response within 25 seconds.\n\nFor other runtimes, the method of configuring the maximum duration depends on your framework and runtime:\n\nFor these runtimes / frameworks, you can configure the number of seconds directly in your function:\n\n```\nexport const maxDuration = 5; // This function can run for a maximum of 5 seconds\nexport const dynamic = 'force-dynamic';\n \nexport function GET(request: Request) {\n  return new Response('Vercel', {\n    status: 200,\n  });\n}\n```\n\nFor these runtimes and frameworks, configure the `maxDuration` property of the [`functions` object](https://vercel.com/docs/projects/project-configuration#functions) in your `vercel.json` file:\n\n```\n{\n  \"functions\": {\n    \"api/test.js\": {\n      \"maxDuration\": 30 // This function can run for a maximum of 30 seconds\n    },\n    \"api/*.js\": {\n      \"maxDuration\": 15 // This function can run for a maximum of 15 seconds\n    },\n    \"src/api/*.js\": {\n      \"maxDuration\": 25 // You must prefix functions in the src directory with /src/\n    }\n  }\n}\n```\n\nIf your Next.js project is configured to use [src directory](https://nextjs.org/docs/app/building-your-application/configuring/src-directory), you will need to prefix your function routes with `/src/` for them to be detected.\n\nThe order in which you specify file patterns is important. For more information, see [Glob pattern](https://vercel.com/docs/projects/project-configuration#glob-pattern-order) .\n\nWhile Vercel specifies [defaults](https://vercel.com/docs/functions/runtimes#max-duration) for the maximum duration of a function, you can also override it in your `vercel.json` file with:\n\n```\n{\n  \"functions\": {\n    \"app/api/**/*\": {\n      \"maxDuration\": 5 // All functions can run for a maximum of 5 seconds\n    }\n  }\n}\n```\n\nThis glob pattern will match _everything_ in the specified path, so you may wish to be more specific by adding a file type, such as `app/api/**/*.ts` instead.\n\nThere are limits to the maximum duration you can set for a function. To learn more about these limits, see the [Max duration limits](https://vercel.com/docs/functions/runtimes#max-duration) documentation.",
    "title": "Configuring Maximum Duration for Vercel Functions",
    "description": "Learn how to set the maximum duration of a Vercel Function.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/domains/working-with-nameservers",
    "markdown": "# Working with nameservers\n\nBefore moving your domain to use Vercel's nameservers, you should ensure that you own the domain listed on the [Domains](https://vercel.com/domains) page of your account.\"\n\nNameservers are the actual servers on the network that are responsible for resolving domain names to the IP addresses where your site is hosted. Most domain registrars, including Vercel, [provide their own nameservers](https://vercel.com/docs/projects/domains/managing-nameservers). For Vercel these are:\n\n*   `ns1.vercel-dns.com`\n*   `ns2.vercel-dns.com`\n\nWhen you purchase your domain through Vercel, we can set all the DNS records, including nameserver records, that tell anyone looking for your site where it can be found.\n\n*   Automatic DNS Records: Domains with nameservers pointed to Vercel don't need explicit DNS records created for the apex domain or first-level subdomains since they will be created automatically. This means that you can add a domain or subdomain to a project without thinking about DNS records at all. Not only does this reduce the potential for mistakes, but if you have multiple subdomains that you would like to use for your project, it takes away the need for manual entry of CNAME records for each of them.\n*   Wildcard Domains: When using Vercel's nameservers you can add [wildcard domains](https://vercel.com/docs/projects/domains/working-with-domains#subdomains,-wildcard-domains,-and-apex-domains) without any further configuration.\n*   Custom nameservers: For domains registered with Vercel, you can add custom nameservers to your Vercel-hosted domain directly from the dashboard, allowing for delegation to other DNS providers. Add up to four nameservers at once, and revert to your previous settings if necessary.\n\nFor domains that are not registered with Vercel, you can change the nameservers directly from the domain registrar's dashboard. For more information, see [Add Vercel's nameservers](https://vercel.com/docs/projects/domains/managing-nameservers#add-vercel's-nameservers).\n\nBefore using Vercel's nameservers, you should ensure that you own the domain.\n\nTo learn more about common nameserver issues, see the [troubleshooting](https://vercel.com/docs/projects/domains/troubleshooting#common-nameserver-issues) doc.",
    "title": "Working with nameservers",
    "description": "Learn about nameservers and the benefits Vercel nameservers provide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/incremental-static-regeneration/quickstart",
    "markdown": "# Incremental Static Regeneration Quickstart\n\nYou can use Incremental Static Regeneration (ISR) to regenerate your pages without rebuilding and redeploying your site. When a page with ISR enabled is regenerated, the most recent data for that page is fetched, and its cache is updated. There are two ways to trigger regeneration:\n\n*   Background revalidation – Regeneration that recurs on an interval\n*   On-demand revalidation – Regeneration that occurs when you send certain API requests to your app\n\nThis quickstart will teach you to do both techniques. To get started, select a framework:\n\nBackground revalidation allows you to purge the cache for an ISR route automatically on an interval.\n\nWhen using Next.js with the `app` router, you can enable ISR by adding an options object with a `revalidate` property to your `fetch` requests:\n\n```\nawait fetch('https://api.vercel.app/blog', {\n  next: { revalidate: 10 }, // Seconds\n});\n```\n\nThe following example renders a list of blog posts from a demo site called `jsonplaceholder`, revalidating every 10 seconds or whenever a person visits the page:\n\n```\ninterface Post {\n  title: string;\n  id: number;\n}\n \nexport default async function Page() {\n  const res = await fetch('https://api.vercel.app/blog', {\n    next: { revalidate: 10 },\n  });\n  const posts = (await res.json()) as Post[];\n  return (\n    <ul>\n      {posts.map((post: Post) => {\n        return <li key={post.id}>{post.title}</li>;\n      })}\n    </ul>\n  );\n}\n```\n\nTo test this code, run the appropriate `dev` command for your framework, and navigate to the `/blog-posts/` route.\n\nYou should see a bulleted list of blog posts.\n\nOn-demand revalidation allows you to purge the cache for an ISR route whenever you want, foregoing the time interval required with background revalidation.\n\nTo revalidate a page on demand with Next.js:\n\n1.  Create an Environment Variable which will store a revalidation secret\n2.  Create an API Route that checks for the secret, then triggers revalidation\n\nThe following example demonstrates an API route that triggers revalidation if the query paramater `?secret` matches a secret Environment Variable:\n\n```\nimport { revalidatePath } from 'next/cache';\n \nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  if (searchParams?.secret !== process.env.MY_SECRET_TOKEN) {\n    return new Response(`Invalid credentials`, {\n      status: 500,\n    });\n  }\n  revalidatePath('/blog-posts');\n  return new Response(\n    {\n      revalidated: true,\n      now: Date.now(),\n    },\n    {\n      status: 200,\n    },\n  );\n}\n```\n\nSee the [background revalidation section above](#background-revalidation) for a full ISR example.\n\n## Explore ISR with a project template",
    "title": "Incremental Static Regeneration Quickstart",
    "description": "Start using Incremental Static Regeneration (ISR) with Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/limits/fair-use-guidelines",
    "markdown": "# Fair use Guidelines\n\nAll subscription plans include usage that is subject to these fair use guidelines. Below is a rule-of-thumb for determining which projects fall within our definition of \"fair use\" and which do not.\n\n*   Static sites\n*   Hybrid apps\n*   Frontend apps\n*   Single page applications\n*   Functions that query DBs or APIs\n*   Blogs, ecommerce, and marketing sites\n\n*   Proxies and VPNs\n*   Media hosting for hot-linking\n*   Scrapers\n*   Crypto Mining\n*   Load Testing without authorization\n\nAs a guideline for our community, we expect most users to fall within the below ranges for each plan. We will notify you if your usage is an outlier. Our goal is to be as permissive as possible while not allowing an unreasonable burden on our infrastructure. Where possible, we'll reach out to you ahead of any action we take to address unreasonable usage and work with you to correct it.\n\n|     | Hobby | Pro |\n| --- | --- | --- |\n| Fast Data Transfer | Up to 100 GB | Up to 1 TB |\n| Fast Origin Transfer | Up to 10 GB | Up to 100 GB |\n| Function Execution | Up to 100 GB-Hrs | Up to 1000 GB-Hrs |\n| Edge Middleware Invocations | Up to 1,000,000 Invocations | Up to 1,000,000 Invocations |\n| Build Execution | Up to 100 Hrs | Up to 400 Hrs |\n| [Image Optimization Source Images](https://vercel.com/docs/image-optimization/limits-and-pricing#source-images) | Up to 1000 Images | Up to 5000 Images |\n| Storage | [KV](https://vercel.com/docs/storage/vercel-kv/limits#general-limitations), [Postgres](https://vercel.com/docs/storage/vercel-postgres/limits#general-limitations), [Edge Config](https://vercel.com/docs/storage/edge-config/edge-config-limits) | [KV](https://vercel.com/docs/storage/vercel-kv/limits#general-limitations), [Postgres](https://vercel.com/docs/storage/vercel-postgres/limits#general-limitations), [Edge Config](https://vercel.com/docs/storage/edge-config/edge-config-limits) |\n\nFor Teams on the Pro plan, you can pay for [additional usage](https://vercel.com/docs/limits/fair-use-guidelines#additional-resources) as you go.\n\n**Note:** If your project will exceed these limits on Pro and you need advanced security and privacy features, contact us to discuss Enterprise.\n\n[Contact Sales](https://vercel.com/contact/sales)\n\nEdge Middleware CPU Limits - Edge Middleware can use no more than 50ms of CPU time on average. This limitation refers to the actual net CPU time, not the execution time. For example, when you are blocked from talking to the network, the time spent waiting for a response does not count toward CPU time limitations.\n\nFor members of our Pro plan, we offer a pay-as-you-go model for additional usage, giving you greater flexibility and control over your usage. The typical monthly usage guidelines above are still applicable, while extra usage will be automatically charged at the following rates:\n\nHobby accounts are restricted to non-commercial personal use only. All commercial usage of the platform requires either a Pro or Enterprise plan.\n\nCommercial usage is defined as any [Deployment](https://vercel.com/docs/deployments/overview) that is used for the purpose of financial gain of anyone involved in any part of the production of the project, including a paid employee or consultant writing the code. Examples of this include, but are not limited to, the following:\n\n*   Any method of requesting or processing payment from visitors of the site\n*   Advertising the sale of a product or service\n*   Receiving payment to create, update, or host the site\n*   Affiliate linking is the primary purpose of the site\n*   The inclusion of advertisements, including but not limited to online advertising platforms like Google AdSense\n\nAsking for Donations **does not** fall under commercial usage.\n\nIf you are unsure whether or not your site would be defined as commercial usage, please [contact the Vercel Support team](https://vercel.com/help#issues).\n\n[Take a look at our Limits documentation](https://vercel.com/docs/limits/overview#general-limits) for the limits we apply to all accounts.\n\nCircumventing or otherwise misusing Vercel's limits or usage guidelines is a violation of our fair use guidelines.\n\nFor further information regarding these guidelines and acceptable use of our services, refer to our [Terms of Service](https://vercel.com/legal/terms#fair-use) or your Enterprise Service Agreement.",
    "title": "Fair use Guidelines",
    "description": "Learn about all subscription plans included usage that is subject to Vercel's fair use guidelines.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/cron-jobs/usage-and-pricing",
    "markdown": "# Usage & Pricing for Cron Jobs\n\nCron jobs invoke [Serverless](https://vercel.com/docs/functions/serverless-functions) or [Edge](https://vercel.com/docs/functions/edge-functions) Functions. This means the same [usage](https://vercel.com/docs/limits/overview) and [pricing](https://vercel.com/pricing) limits will apply.\n\n|     | Number of cron jobs per account | Schedule |\n| --- | --- | --- |\n| Hobby | 2 cron jobs | Triggered once a day |\n| Pro | 40 cron jobs | Unlimited cron invocations |\n| Enterprise | 100 cron jobs | Unlimited cron invocations |\n\nEach project has a hard limit of 20 cron jobs per project.\n\nOn the Hobby plan, Vercel cannot assure a timely cron job invocation. For example, a cron job configured as `0 1 * * *` (every day at 1 am) will trigger anywhere between 1:00 am and 1:59 am.\n\nFor more specific cron job executions, upgrade to our [Pro](https://vercel.com/docs/accounts/plans/pro) plan.\n\nCron jobs are included in all plans.\n\nYou use a function to invoke a cron job, and therefore [usage](https://vercel.com/docs/limits/overview) and [pricing](https://vercel.com/pricing) limits for these functions apply to all cron job executions:",
    "title": "Usage & Pricing for Cron Jobs",
    "description": "Learn about cron jobs usage and pricing details.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/monorepos/remote-caching",
    "markdown": "# Remote Caching\n\nRemote Caching saves you time by ensuring you never repeat the same task twice, by automatically sharing a cache across your entire Vercel team.\n\nWhen a team is working on the same PR, Remote Caching identifies the necessary artifacts (such as build and log outputs) and recycles them across machines in [external CI/CD](#use-remote-caching-from-external-ci/cd) and [during the Vercel Build process](#use-remote-caching-during-vercel-build).\n\nThis speeds up your workflow by avoiding the need to constantly re-compile, re-test, or re-execute your code if it is unchanged.\n\nThe first tool to leverage Vercel Remote Cache is [Turborepo](https://turbo.build/repo), a high-performance build system for JavaScript and TypeScript codebases. For more information on using Turborepo with Vercel, see the [Turborepo](https://vercel.com/docs/monorepos/turborepo) guide, or [this video walkthrough of Remote Caching with Turborepo](https://youtu.be/_sB2E1XnzOY).\n\nTurborepo caches the output of any previously run command such as testing and building, so it can replay the cached results instantly instead of rerunning them. Normally, this cache lives on the same machine executing the command.\n\nWith Remote Caching, you can share the Turborepo cache across your entire team and CI, resulting in even faster builds and days saved.\n\nRemote Caching is a powerful feature of Turborepo, but with great power comes great responsibility. Make sure you are caching correctly first and double-check the [handling of environment variables](https://vercel.com/docs/monorepos/turborepo#step-0:-cache-environment-variables) . You should also remember that Turborepo treats logs as artifacts, so be aware of what you are printing to the console.\n\nThe Vercel Remote Cache can also be used with any build tool by integrating with the [Remote Cache SDK](https://github.com/vercel/remote-cache). This provides plugins and examples for popular monorepo build tools like [Nx](https://github.com/vercel/remote-cache/tree/main/packages/remote-nx) and [Rush](https://github.com/vercel/remote-cache/tree/main/packages/remote-rush)\n\nFor this guide, your monorepo should be using [Turborepo](https://vercel.com/docs/monorepos/turborepo). Alternatively, use `npx create-turbo` to set up a starter monorepo with [Turborepo](https://turbo.build/repo/docs#examples).\n\nOnce your Vercel project is using Turborepo, authenticate the Turborepo CLI with your Vercel account:\n\nIf you are connecting to an SSO-enabled Vercel team, you should provide your Team slug as an argument to `npx turbo login`:\n\n```\nnpx turbo login --sso-team=team-slug\n```\n\nTo enable Remote Caching and connect to the Vercel Remote Cache, every member of that team that wants use Remote Caching should run the following in the root of the monorepo:\n\nYou will be prompted to enable Remote Caching for the current repo. Enter `Y` for yes to enable Remote Caching.\n\nNext, select the team scope you'd like to connect to. Selecting the scope tells Vercel who the cache should be shared with and allows for ease of [billing](#billing-information). Once completed, Turborepo will use Vercel Remote Caching to store your team's cache artifacts.\n\nIf you run these commands but the owner has [disabled Remote Caching](#enabling-and-disabling-remote-caching-for-your-team) for your team, Turborepo will present you with an error message: \"Please contact your account owner to enable Remote Caching on Vercel.\"\n\nTo disable Remote Caching and unlink the current directory from the Vercel Remote Cache, run:\n\nThis is run on a per-developer basis, so each developer that wants to unlink the remote cache must run this command locally.\n\nOnce your project has the remote cache linked, run `turbo run build` to see the caching in action. Turborepo caches the filesystem output both locally and remote (cloud). To see the cached artifacts open `node_modules/.cache/turbo`.\n\nNow try making a change in any file and running `turbo run build` again. The builds speed will have dramatically improved, because Turborepo will only rebuild the changed files.\n\nWhen you run `turbo` commands during a Vercel Build, Remote Caching will be automatically enabled. No additional configuration is required. Your `turbo` task artifacts will be shared with all of your Vercel projects (and your Team Members). For more information on how to deploy applications using Turborepo on Vercel, see the [Turborepo](https://vercel.com/docs/monorepos/turborepo) guide.\n\nTo use Vercel Remote Caching with Turborepo from an external CI/CD system, you can set the following environment variables in your CI/CD system:\n\n*   `TURBO_TOKEN`: A [Vercel Access Token](https://vercel.com/docs/rest-api#authentication)\n*   `TURBO_TEAM`: The slug of the Vercel team to share the artifacts with\n\nWhen these environment variables are set, Turborepo will use Vercel Remote Caching to store task artifacts.\n\nRemote Caching is automatically enabled on Vercel for organizations with Turborepo enabled on their monorepo.\n\nAs an Owner, you can enable or disable Remote Caching from your Account settings. Under Settings, go to the Billing tab and find the Remote Caching section. From here you can use the toggle to enable or disable the feature:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Fenable-remote-caching.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nEnable or disable Remote Caching from the Settings\n\nAll plans can use Vercel Remote Caching up to the limit of 10GB free downloads per month:\n\n| Plan | Download price after free usage is surpassed | Upload limit | Artifacts request limit |\n| --- | --- | --- | --- |\n| Hobby | not allowed | 100GB/month | 100/min |\n| Pro | $0.50 per incremental GB | 1TB/month | 10000/min |\n| Enterprise | $0.50 per incremental GB | 4TB/month | 10000/min |\n\nYou can see the usage of your team's Remote Cache on the [Usage tab](https://vercel.com/docs/pricing/artifacts):\n\nTo avoid unbounded cache growth, artifacts are automatically deleted 7 days after creation.\n\nRemote Caching with Vercel is free for Hobby users within the [usage limits](#usage).\n\nVercel will send you emails as you are nearing your usage limits. You will not pay for any usage, but it is not possible to surpass the usage limits as Remote Caching will be disabled.\n\nRemote Caching can only be enabled by [team owners](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role). When Remote Caching is enabled, anyone on your team with the [Owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role), [Member](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#member-role), or [Developer](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#developer-role) role can run the link on the Turborepo. If Remote Caching is disabled, linking will prompt the developer to request an owner to enable it first.",
    "title": "Remote Caching",
    "description": "Vercel Remote Cache allows you to share build outputs and artifacts across distributed teams.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/using-edge-config",
    "markdown": "# Using Edge Config\n\n[Edge Config](https://vercel.com/docs/storage/edge-config) is a global data store that offers ultra-low latency read speeds from anywhere in the world thanks to [Vercel's Edge Network](https://vercel.com/docs/edge-network/overview).\n\nWe recommend using [the Edge Config client SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) to read data from your Edge Configs. To write data to your Edge Configs, use [Vercel REST API](https://vercel.com/docs/rest-api) as outlined in [our docs on managing Edge Configs with the API](https://vercel.com/docs/storage/edge-config/vercel-api).\n\nThis page outlines all the ways you can interact with your Edge Configs, and our recommended best approaches.\n\nThere are multiple ways to read data from your Edge Configs, but we recommend using [our Edge Config client SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) in your projects.\n\nIf you prefer making direct API requests to your Edge Config, we recommend sending them to your [Edge Config endpoint](#understanding-edge-config-endpoints). You can request data through Vercel REST API, but we recommend against ever doing so. Requests to Vercel REST API do not benefit from the optimizations Vercel applies to Edge Config reads. Requests to an Edge Config endpoint do.\n\nEdge Config is optimized to work with Vercel's Edge Network. As a result, Edge Configs accessed from local development environments cannot benefit from Vercel's optimizations and will be over 100 milliseconds slower than production.\n\nEdge Config is available at two separate REST APIs which are built for distinct use cases:\n\n*   `api.vercel.com`: [Vercel REST API](https://vercel.com/docs/rest-api) built for managing Edge Config\n*   `edge-config.vercel.com`: [Edge Config endpoint](https://vercel.com/docs/storage/edge-config/using-edge-config#querying-edge-config-endpoints) intended for reading Edge Config at high volume\n\n*   This endpoint is part of the [Vercel REST API](https://vercel.com/docs/rest-api)\n*   It is intended to [manage Edge Configs](https://vercel.com/docs/storage/edge-config/vercel-api)\n*   You can use this endpoint to create, update, and delete Edge Configs\n*   This endpoint is served from a single region and we do not apply any of our read optimizations\n*   This endpoint is rate limited to 20 Edge Config Item reads per minute\n*   Reading Edge Config from this endpoint will always return the latest version of an Edge Config\n*   This endpoint uses the [Vercel REST API authentication](https://vercel.com/docs/rest-api#authentication)\n\n*   This is a highly optimized, globally distributed, actively replicated endpoint built for global, low latency, high volume reads\n*   This endpoint has no rate limits\n*   This is the endpoint [`@vercel/edge-config`](https://vercel.com/docs/storage/edge-config/edge-config-sdk) reads from\n*   This endpoint uses the Edge Config's own [Read Access tokens](#creating-a-read-access-token)\n\nYou can use the following routes when querying your Edge Config endpoint:\n\n*   `/<edgeConfigId>/items`\n*   `/<edgeConfigId>/item/<itemKey>`\n*   `/<edgeConfigId>/digest`\n\nYou can authenticate with a [Read Access token](#creating-a-read-access-token), which you can add to the `Authorization` header of your request, setting `Bearer <token>` as the value.\n\nYou can find your Edge Config ID with one of the following methods:\n\n*   In your dashboard, under the Edge Config tab. Select your Edge Config, and you'll see the ID under the Edge Config ID label near the top of the page, as shown in the screenshot below:\n\n![Your Edge Config ID in the Vercel Dashboard.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793440%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fconfig-id-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Your Edge Config ID in the Vercel Dashboard.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793440%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fconfig-id-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYour Edge Config ID in the Vercel Dashboard.\n\n*   Send a `GET` request to the `/edge-config` endpoint of Vercel REST API, as outlined in [our API reference](https://vercel.com/docs/rest-api/endpoints#get-edge-configs). The response will be a list of Edge Configs associated with your account (or team, if you add the `teamId` query parameter)\n\n```\nhttps://api.vercel.com/v1/edge-config?teamId=<teamId>\n```\n\nA read access token is automatically generated when you connect an Edge Config to a project.\n\nThere are multiple ways to create a Read Access token for your Edge Config manually:\n\n*   In the Edge Config tab of your project dashboard. See [our Edge Config dashboard docs](https://vercel.com/docs/storage/edge-config/edge-config-dashboard#manage-read-access-tokens) to learn how\n*   Through a `POST` request to Vercel REST API\n\nFirst, you'll need an access token for Vercel REST API, which you must add to an `Authorization` header with the `Bearer <token>` pattern to validate requests. To learn more, see [Creating an access token](https://vercel.com/docs/rest-api#creating-an-access-token).\n\nThen you can send a `POST` request to the [`/edge-config/<edgeConfigId>/token`](https://vercel.com/docs/rest-api/endpoints#create-an-edge-config-token) path, as shown below, inserting [your Edge Config's ID](#finding-your-edge-config-id) where appropriate:\n\n```\ncurl -X 'POST' 'https://api.vercel.com/v1/edge-config/my_edge_config_id/token' \\\n     -H 'Authorization: Bearer your_vercel_api_token_here' \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{ \"label\": \"my edge config token label\" }'\n \n```\n\nAppend the `teamId` query parameter to if the config is scoped to a Vercel team.\n\nThe response from the API will be a JSON object with a `\"token\"` key that contains the value for the Edge Config read access token:\n\n```\n{ \"token\": \"your_edge_config_read_access_token_here\" }\n```\n\nA connection string is a URL that connects a project to an Edge Config.\n\nTo find and copy the connection string:\n\n1.  Navigate to the Tokens tab of your project's Storage dashboard\n2.  Select the three dots icon displayed in the list of tokens\n3.  Select Copy Connection String from the dropdown menu\n\n![Copy your Edge Config connection string from the dashboard.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701337823%2Ffront%2Fdocs%2Fedge-config%2Fcopy-edge-config-connection-string-light.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Copy your Edge Config connection string from the dashboard.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1701337823%2Ffront%2Fdocs%2Fedge-config%2Fcopy-edge-config-connection-string-dark.png&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nCopy your Edge Config connection string from the dashboard.\n\nA connection string is not created when you create an Edge Config at the account level, until you connect a project.\n\nVercel will optimize your reads to be faster if you set the connection string as an environment variable. Hard-coding your connection string into your application as a string will not allow Vercel to detect the URL and optimize your reads.\n\nThe variable can be called anything, but [our Edge Config client SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) will search for `process.env.EDGE_CONFIG` by default. See our [environment variables](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable) docs to learn how to create one.\n\nEdge Config is optimized for many reads and few writes. To write data to your Edge Configs, see [our docs on doing so with Vercel REST API](https://vercel.com/docs/storage/edge-config/vercel-api).\n\nEdge Config backups are a backup and restore functionality that allows you to access and roll back to a previous point in time.\n\nRestoring a backup will immediately update the live data, and the data that was live before the restore will become available as a new backup.\n\nBackups are taken when you make any changes either through the dashboard or API. They do not contribute to your storage size. The length of time each backup is held for depends on your plan, see [Limits and Pricing](https://vercel.com/docs/storage/edge-config/edge-config-limits) for more information.",
    "title": "Using Edge Config",
    "description": "Learn how to use Edge Configs in your projects.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/observability/monitoring/limits-and-pricing",
    "markdown": "# Limits and Pricing for Monitoring\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nAfter your first 250,000 data points on the [Pro](https://vercel.com/docs/accounts/plans/pro) plan, you will be charged an additional $9 per 1 million data points.\n\nIf you are using Monitoring on a 14-day trial [Pro plan](https://vercel.com/docs/accounts/plans/pro), you will not be charged for any of the above items during the trial. When the trial ends, if Monitoring is still [enabled](https://vercel.com/docs/observability/monitoring#disable-monitoring), you will be charged a base fee the day after the trial.\n\n**Note:** If you need customized limits for Monitoring, contact us to discuss upgrading to Enterprise.\n\n[Contact Sales](https://vercel.com/contact/sales)\n\nThe table below shows the metrics for the [Observability](https://vercel.com/docs/pricing/observability) section of the Usage dashboard where you can view your Monitoring usage through data points.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Observability usage](https://vercel.com/docs/pricing/observability) section for more information on how to optimize your usage.\n\nMonitoring data is retained and queryable for the following time limits:\n\n| Plan | Duration |\n| --- | --- |\n| Pro | 30 days |\n| Enterprise | 90 days |\n\nMonitoring data can be displayed at different resolutions depending on your plan:\n\n| Plan | Granularities |\n| --- | --- |\n| Pro | 1 day, 1 hour |\n| Enterprise | 1 day, 1 hour, 5 minute |\n\nVercel creates a data point each time a request is made to your website. These data points include unique parameters such as execution time. For a complete list, [see the visualize clause docs](https://vercel.com/docs/observability/monitoring/monitoring-reference#visualize).\n\nTo get a rough estimate of how much you would be charged for Monitoring on Pro, we recommend you:\n\n\\- Navigate to the [Usage](https://vercel.com/dashboard/usage) tab of your Vercel dashboard\n\n\\- Set the date filter to **Current Billing Cycle** or **Last 30 days** if that option is not available\n\n\\- Scroll to the **Requests** chart and take the sum of both cached and uncached requests\n\n\\- Use the calculator below to **estimate** how much you will be charged for Monitoring. You are charged in per million increments:\n\nCalculate Monitoring Requests\n\n(\n\n\\- 250,000 ) / 1,000,000 \\* $9 = $0.00\n\nThis calculator provides an estimate and should not be used to determine your final bill.\n\nYou will be charged a base fee when enabling Monitoring on the [Pro](https://vercel.com/docs/accounts/plans/pro) or [Enterprise](https://vercel.com/docs/accounts/plans/enterprise) plans. However, you will only be charged for the remaining time in your billing cycle. For example,\n\n*   If ten days remain in your current billing cycle, you will only pay around $3. For every new billing cycle after that, you'll be charged a total of $10 at the beginning of the cycle\n*   Suppose you disable Monitoring before the billing cycle ends. In that case, Monitoring will automatically turn off, we will stop collecting data points, and you will lose access to existing data. Also, you cannot export the Monitoring data for later use\n*   Once the billing cycle is over, you will be charged for the data points collected prior to disabling. You won't be refunded any amounts already paid\n*   Re-enabling Monitoring before the end of the billing cycle won't cost you another base fee. Instead, the usual base fee of $10 will apply at the beginning of every upcoming billing cycle",
    "title": "Limits and Pricing for Monitoring",
    "description": "Learn about our limits and pricing when using Monitoring. Different limitations are applied depending on your plan.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/serverless-functions",
    "markdown": "# Manage and optimize usage for Serverless Functions\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe Serverless Functions section shows the following charts:\n\nYou are charged based on the number of times your [functions](https://vercel.com/docs/functions) get invoked. This includes both successful and errored invocations, but does not include cache hits. The number of invocations is calculated based on the number of times your function gets called, regardless of the response status code.\n\nWhen using [Incremental Static Regeneration](https://vercel.com/docs/incremental-static-regeneration) with Next.js, both the `revalidate` option for `getStaticProps` and `fallback` for `getStaticPaths` will result in a Function invocation on revalidation, not for every user request.\n\nWhen viewing your Functions Invocations graph, you can group by Ratio to see a total of all invocations across your team's projects that finished successfully, errored, or timed out.\n\nServerless Function execution will increase [edge network](https://vercel.com/docs/pricing/networking) usage as well. Caching your Serverless Function reduces the GB-hours of your Serverless Function, but does not reduce the network usage that comes with executing your Serverless Function.\n\n*   Use the Projects option to see the total number of invocations for each project within your team. This can help you identify which projects are using the most invocations and where you can optimize\n*   Cache your responses using [edge caching](https://vercel.com/docs/edge-network/caching#using-vercel-functions) and [Cache-Control headers](https://vercel.com/docs/edge-network/headers#cache-control-header). This can help reduce the number of invocations that your Functions receive and makes responses faster for users\n*   See [How can I reduce my Serverless Execution usage on Vercel?](https://vercel.com/guides/how-can-i-reduce-my-serverless-execution-usage-on-vercel) for more general information on how to reduce your Serverless Functions usage.\n\nYou are charged based on the amount of time your Serverless Functions have spent computing responses to the requests they’ve received. This is calculated in [GB-Hours](https://vercel.com/guides/what-are-gb-hrs-for-serverless-function-execution), which is the memory allocated for each Function in GB x the time in hours they were running.\n\nFor example, if a function [has](https://vercel.com/docs/functions/configuring-functions/memory) 1.7 GB (1769 MB) of memory and is executed 1 million times at a 1-second duration:\n\n*   Total Seconds: 1M \\* (1s) = 1,000,000 Seconds\n*   Total GB-Seconds: 1769/1024 GB \\* 1,000,000 Seconds = 1,727,539.06 GB-Seconds\n*   Total GB-Hrs: 1,727,539.06 GB-Seconds / 3600 = 479.87 GB-Hrs\n*   The total Serverless Function Execution is 479.87 GB-Hrs.\n\nTo see your current usage, navigate to the Usage tab on your team's [Dashboard](https://vercel.com/dashboard) and go to Serverless Functions > Duration. You can use the Ratio option to see the total amount of execution time across all projects within your team, including the completions, errors, and timeouts.\n\n*   Use the Projects option to see the total amount of execution time for each project within your team. This can help you identify which projects are using the most execution time and where you can optimize\n*   By default, Functions get 1 vCPU of memory, but [can be configured](https://vercel.com/docs/functions/configuring-functions/memory) to use more. This may affect the duration of time your functions run\n*   You can also adjust the [maximum duration](https://vercel.com/docs/functions/configuring-functions/duration) for your functions to prevent them from running for too long\n*   To reduce the GB-hours (Execution) of your functions, ensure you are using [edge caching](https://vercel.com/docs/edge-network/caching#using-vercel-functions) and Cache-Control headers. If you are using [Incremental Static Regeneration](https://vercel.com/docs/incremental-static-regeneration), note that Vercel counts Function invocations that happen on page revalidation towards both for GB-hours and [Fast Origin Transfer](https://vercel.com/docs/pricing/networking#fast-origin-transfer)\n*   For troubleshooting issues that may be causing your functions to run longer than expected or timeout, see [What can I do about Vercel Serverless Functions timing out?](https://vercel.com/guides/what-can-i-do-about-vercel-serverless-functions-timing-out)\n\nThis counts the number of times that a request to your Functions could not be served because the [concurrency limit](https://vercel.com/docs/functions/runtimes#automatic-concurrency-scaling) was hit.\n\nWhile this is not a chargeable metric, it will cause a `429: FUNCTION_RATE_LIMIT` error. To learn more, see [What should I do if I receive a 429 error on Vercel?](https://vercel.com/guides/what-should-i-do-if-i-receive-a-429-error-on-vercel).",
    "title": "Manage and optimize usage for Serverless Functions",
    "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of resources.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/limits-and-pricing",
    "markdown": "# Pricing for Web Analytics\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nOnce you've enabled Vercel Web Analytics, different limitations are applied depending on your plan:\n\n|     | Hobby | Pro | [Pro with Web Analytics Plus](https://vercel.com/docs/analytics/limits-and-pricing#pro-with-web-analytics-plus) | Enterprise |\n| --- | --- | --- | --- | --- |\n| Included Projects | Unlimited | Unlimited | Unlimited | Custom |\n| Included [Events](#what-is-an-event-in-vercel-web-analytics)¹ | 2,500 | 25,000 | 500,000 | Custom |\n| Max [Events](#what-is-an-event-in-vercel-web-analytics)¹ | 2,500 | 500,000 | 20 Million | Custom |\n| Fee for additional Events | None | 100k | 500k | Custom |\n| Reporting Window | 1 Month | 12 Months | 24 Months | Custom |\n| Custom Events | Not included | Included | Included | Custom |\n| UTM Parameters | Not included | Not Included | Included | Custom |\n| Properties on Custom Events | None | 2   | 8   | Custom |\n\n¹ An event is either a page view or a [custom event](https://vercel.com/docs/analytics/custom-events). [Learn more](https://vercel.com/docs/analytics/limits-and-pricing#what-is-an-event-in-vercel-web-analytics) .\n\nThe table below shows the metrics for the [Observability](https://vercel.com/docs/pricing/observability) section of the Usage dashboard where you can view your Web Analytics usage.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Observability usage](https://vercel.com/docs/pricing/observability) section for more information on how to optimize your usage.\n\nWeb Analytics are free for Hobby users within the usage limits detailed above.\n\nVercel will [send you notifications](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications) as you are nearing your usage limits. You will not pay for any additional usage. However, once you exceed the limits, a three day grace period will start before Vercel will stop capturing events. In this scenario, you have two options to move forward:\n\n*   Wait 7 days before Vercel will start collecting events again\n*   Upgrade to Pro to capture more events, use custom events, and have a longer reporting window. You can start a trial of Pro by using the button below. Note that while you will not be charged during the time of the trial, once the trial ends, you will be charged for the events collected during the trial:\n\n### Get started with Vercel Pro for free\n\nExperience the power of Pro features during your trial. Unlock unlimited Serverless Function requests, 1000 GB-hours of execution, boosted application bandwidth, and enjoy free access to Speed Insights throughout your trial period.\n\nIf you're expecting large number of page views, make sure to deploy your project to a Vercel [Team](https://vercel.com/docs/accounts/create-a-team) on the [Pro](https://vercel.com/docs/accounts/plans/pro) plan.\n\nFor Teams on a Pro trial, the [trial will end](https://vercel.com/docs/accounts/plans/pro/trials#post-trial-decision) either after 14 days or once you hit the Pro plan's limits.\n\nNote that while you will not be charged during the time of the trial, once the trial ends, you will be charged for the events collected during the trial\n\nVercel will [send you notifications](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications) as you are nearing your usage limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). Once your team exceeds 25,000 events, you will be charged 14 USD per additional 100,000 up to a maximum of 500,000. These numbers are based on a per-billing cycle basis.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nTeams on the Pro plan can optionally extend usage and capabilities through the Web Analytics Plus [add-on](https://vercel.com/docs/accounts/plans/pro#pro-plan-add-ons) for an additional 50 USD / month per team.\n\nWhen enabled, all projects within the team have access to the extended limits and features.\n\nTo upgrade to Web Analytics Plus:\n\n1.  Visit the Vercel [dashboard](https://vercel.com/dashboard) and select the Settings tab\n2.  From the left-nav, go to Billing and scroll to the Add-ons section\n3.  Under Web Analytics Plus, toggle to Enable the switch\n\nEnterprise agreements provide custom limits and pricing for Web Analytics.\n\nAn event in Vercel Web Analytics is either an automatically tracked page view or a [custom event](https://vercel.com/docs/analytics/custom-events). A page view is a default event that is automatically tracked by our script when a user visits a page on your website. A custom event is any other action that you want to track on your website, such as a button click or form submission.\n\nWhen you reach the maximum number of events allowed for your plan, you won’t be billed beyond that point. Instead, you will be prompted to upgrade to a plan that fits your usage. For example, if you reach the maximum number of events allowed on the Pro plan, you will be prompted to upgrade to the Web Analytics Plus plan, which allows for more events and a longer reporting window.\n\nYes, events are shared across all projects under the same Vercel account in Web Analytics. This means that the events collected by each project count towards the total event limit for your account. Keep in mind that if you have high-traffic websites or multiple projects with heavy event usage, you may need to upgrade to a higher-tier plan to accommodate your needs.\n\nThe reporting window in Vercel Web Analytics is the length of time that your analytics data is guaranteed to be stored and viewable for analysis. While only the reporting windows is guaranteed to be stored, Vercel may store your data for longer periods to give you the option to upgrade to a bigger plan without losing any data.",
    "title": "Pricing for Web Analytics",
    "description": "Learn about pricing for Vercel Web Analytics.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/usage-and-pricing",
    "markdown": "# Vercel KV Pricing\n\n[Vercel KV](https://vercel.com/storage/kv) has a usage-based pricing model. This means that you only pay for what you use. On the Hobby plan, Vercel KV is free within the usage limits. On the Pro plan, you pay for usage on-demand as you use it.\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nWe will start to collect usage data from the day you create your database.\n\nFor those on the Hobby plan or on a Pro trial, there is a limit of 3,000 requests per day. When this limit is reached, requests to the database will be rate limited.\n\nThe table below shows the metrics for the [Vercel KV](https://vercel.com/docs/pricing/kv) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nTo disable or stop incurring charges, you can do any of the following:\n\n*   Requests: Stop querying the database, or delete it\n*   Storage: Delete the database\n*   Bandwidth: Stop querying the database, or delete it\n\nSee the [manage and optimize Vercel KV usage](https://vercel.com/docs/pricing/kv) section for more information on how to optimize your usage.\n\nDatabase cost is calculated as the maximum number of databases per month for your account, including read replicas. Note that on the Pro plan, you can have a maximum of five databases per month and that each database can have a maximum of five read replicas.\n\nBy default, a database exists in a single region, but a database _may_ be replicated into another region for lower latency queries.\n\nRequests are the number of Redis commands issued against all KV databases for your account.\n\nVercel KV offers Global Databases. If your database is replicated to another region, the number of requests will increase. This is because each write command will be issued once to your primary database and once to each read replicas you have configured.\n\nStorage is calculated as the maximum amount of storage used per month for all KV databases for your account.\n\nData transfer is calculated as the amount of data transferred between the functions querying the databases and the KV databases for your account.\n\nVercel KV is free for Hobby users within the [usage limits](#pricing).\n\nVercel will send you emails as you are nearing your usage limits. You will not pay for any additional usage. However, you will not be able to access Vercel KV if limits are exceeded. In this scenario, you will have to wait until 30 days have passed before using your database again.\n\nFor Teams on a Pro trial, the [trial will end](https://vercel.com/docs/accounts/plans/pro/trials#post-trial-decision) if your Team has made over 30,000 requests in total or used over 256 MB of storage or bandwidth. During the trial, you can create a maximum of one database. There is also a limit of 3,000 requests per day and requests to the database will be rate limited when this limit is reached.\n\nVercel will send you emails as you are nearing your [usage](#usage) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). When you team exceeds the base limits for Vercel KV, you will pay for usage on-demand as you use it.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nVercel KV is not currently available for Enterprise Teams.",
    "title": "Vercel KV Pricing",
    "description": "Learn about the pricing for Vercel KV.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/edge-functions",
    "markdown": "# Manage and optimize usage for Edge Functions\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe Edge Functions section shows the following charts:\n\nYou are charged based on the number of times your [functions](https://vercel.com/docs/functions) get invoked. This includes both successful and errored invocations, but does not include cache hits. The number of invocations is calculated based on the number of times your function gets called, regardless of the response status code.\n\nWhen viewing your Invocations graph, you can group by Count to see the total of all invocations across your team's projects.\n\n*   Use the Projects option to see the total number of invocations for each project within your team. This can help you identify which projects are using the most invocations happen and where you can optimize\n*   Cache your responses using [edge caching](https://vercel.com/docs/edge-network/caching#using-vercel-functions) and [Cache-Control headers](https://vercel.com/docs/edge-network/headers#cache-control-header). This can help reduce the number of invocations that your Functions receive and makes responses faster for users\n\nYou are charged based on number of execution units that your Edge Functions have used. Vercel will work out the number of execution units (total CPU time of the invocation / 50ms) used for each invocation. You will then be charged based on anything over the limit.\n\nEach invocation of an Edge Function has a Total CPU time, which is the time spent _actually running your code_. It doesn't include execution time such as spent waiting for data fetches to return.\n\nFor example:\n\n*   If your function gets invoked _250,000_ times and uses _350_ ms of CPU time at each invocation, then the function will incur (350 ms / 50 ms) = 7 execution units each time the function gets invoked.\n*   Your usage is: 250,000 \\* 7 = 1,750,000 execution units\n*   As a Pro user you have 1,000,000 execution units included in your plan, so you will be charged for the additional 750,000 execution units. That's $2.00 for each additional 1,000,000 execution units\n\n*   Execution units are comprised of a calculation of invocation count and CPU time. You can optimize your Edge Functions by [reducing the number of invocations](https://vercel.com/docs/pricing/edge-functions#optimizing-function-invocations) through caching and the CPU time used per invocation\n\nThere is no time limit on the amount of CPU time your Edge Function can use during a single invocation. However, you are charged for each [execution unit](https://vercel.com/docs/limits/usage#execution-units), which is based on the compute time. The compute time refers to the actual net CPU time used, not the execution time. Operations such as network access do not count towards the CPU time.\n\nYou can view CPU time by Average to show the average time for computation across all projects using Edge Functions within your team. This data point provides an idea of how long your Edge Functions are taking to compute responses to requests and can be used in combination with the invocation count to calculate execution units.\n\n*   View the CPU time by Project to understand which Projects are using the most CPU time\n*   CPU time is calculated based on the actual time your function is running, not the time it takes to respond to a request. Therefore you should optimize your code to ensure it's as performant as possible and avoid heavy CPU-bound operations",
    "title": "Manage and optimize usage for Edge Functions",
    "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your Edge Functions usage.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/usage-and-pricing",
    "markdown": "# Vercel Postgres Pricing\n\nVercel Postgres prices are based on the amount of usage you have. This includes the number of databases, compute time, storage, written data, and data transfer.\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe table below shows the metrics for the [Vercel Postgres](https://vercel.com/docs/pricing/postgres) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nVercel Postgres is a serverless SQL database. It scales down automatically and up when queried.\n\nIf you do _not_ perform queries, the database will go to sleep and you will not accrue compute time, written data, or data transfer costs. However, you will still be charged for data storage.\n\nIn addition, if your database is infrequently getting requests, it will take a longer time to boot (cold start). This additional compute time may increase the amount you will be charged.\n\nTo stop incurring usage or costs, you can do the following:\n\n*   On-demand compute: stop querying the database or delete it\n*   Data storage: delete the database (storage persists even if you stop querying it).\n*   Written data: stop writing to the database or delete it.\n*   Data transfer: stop querying the database or delete it.\n\nSee the [manage and optimize Vercel Postgres usage](https://vercel.com/docs/pricing/postgres) section for more information on how to optimize your usage.\n\nDatabase cost is calculated as the maximum number of databases per month for your account.\n\nHow Compute Time is Measured:\n\nCompute time is calculated based on the active time of your database, multiplied by the number of CPUs available. The active time includes periods when the database is receiving requests and for a duration (default 5 minutes) after the last request is received. Following this period of inactivity, databases are automatically suspended, ceasing additional compute time accumulation.\n\n*   Hobby: Databases are allocated 0.25 logical CPUs, with these settings fixed and not subject to modification.\n*   Pro: Databases are initially set with 1 CPU. Users have the flexibility to adjust this setting, ranging from 0.25 to 7 CPUs, according to performance requirements.\n\nDatabase Activity and Suspension:\n\nDatabases are considered active when processing requests or within the configured idle timeout period post the last request. If there are no incoming requests for a specified duration (default 300 seconds), the database scales down to zero, effectively pausing compute time billing.\n\nCompute Configuration Options:\n\nWe cater to diverse application needs and budget considerations through adaptable compute configuration options:\n\n*   Autoscaling: This Pro plan option permits setting a range for compute size, adaptable from 0.25 CPUs to 7 CPUs. It enables the system to automatically scale the computational resources in response to real-time demand, optimizing both costs and performance by dynamically adjusting compute capacity.\n\nVercel Postgres uses a small amount of compute time, included in your billed amount, to perform a periodic check to ensure that your database can start, read, and write data.\n\nStorage is calculated as the maximum amount of storage used per month for all Postgres databases for your account. Each Postgres database uses 33MB of storage space, even before any data is stored. This is the default storage footprint of the Postgres server itself.\n\nUnderstanding Written Data:\n\nWritten data in our Postgres service is measured by the amount of data changes that are committed from compute resources to storage. This ensures the durability and integrity of your data within the database. It encompasses all operations that modify data within your tables, including:\n\n*   Inserts: Adding new rows to your tables.\n*   Updates: Modifying existing data within your tables.\n*   Deletes: Removing rows from your tables.\n*   Migrations: Any schema changes or data migrations that alter the structure or volume of your data. This includes adding, altering, or dropping tables and columns, as well as any bulk data modifications.\n\nEach operation is logged, and it is the size of these logs that contributes to your written data volume. This means the volume of written data may be larger than the actual size of the data being manipulated due to the nature of these operations.\n\nFor Example:\n\n*   Updating a single field in a row that is 1KB in size, 1000 times, results in 1MB of written data.\n*   Deleting a 1KB row from a table also counts as writing 1KB of data.\n\nInitial Written Data:\n\nUpon the creation of a new database, our system automatically sets up the necessary structures and metadata to manage and operate the database effectively. This setup process includes:\n\n*   Creation of system tables and indexes.\n*   Initialization of transaction logs and other essential metadata.\n\nAs a result, even before any data is explicitly written to the database by the user, a certain amount of written data is recorded. Specifically, creating a new database in our Postgres service results in an initial written data report of 32MB. This initial data volume is a normal part of the database initialization process and is essential for the database's functionality.\n\nPricing for Written Data:\n\nThe cost associated with written data is calculated based on the total volume of written data (measured in GB) multiplied by the price per GB. It's important to understand that this includes both user-initiated data modifications and the initial written data from setting up new databases.\n\nWhy You Might See Written Data Charges:\n\n*   Frequent Updates or Deletions: High volumes of update or delete operations can contribute significantly to written data volume.\n*   Database Initialization: The initial setup of a database contributes to written data volume, as explained above.\n*   System Operations: Background tasks and system maintenance operations that ensure the health and performance of your database also contribute to written data.\n\nData transfer is the volume of data transferred out of your database.\n\nVercel Postgres is free for Hobby users within the [usage limits](#pricing) and is intended as a development database. Hobby plans include enough functionality to allow you to create and test your database.\n\nVercel will send you emails as you are nearing your usage limits. You will not pay for any additional usage. However, you will not be able to access Vercel Postgres if limits are exceeded. In this scenario, you will have to wait until 30 days have passed before using it again.\n\nPro trials have the same limits as [Hobby users](#pricing). If those trial limits are exceeded, you will not be able to use Vercel Postgres unless you upgrade to a paid plan. During the trial, you can create a maximum of one database.\n\nVercel will send you emails as you are nearing your [usage](#pricing) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). When you team exceeds the base limits for Vercel Postgres on Pro, you will pay for usage on-demand as you use it.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nVercel Postgres is not currently available for Enterprise Teams.",
    "title": "Vercel Postgres Pricing",
    "description": "Learn about the pricing for Vercel Postgres.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/understanding-my-invoice",
    "markdown": "# Billing & Invoices\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nYou can view your current invoice from the Settings tab of your [dashboard](https://vercel.com/dashboard) in two ways:\n\n*   By navigating to the Billing tab of the dashboard\n*   Or selecting the latest entry in the list of invoices on the Invoices tab.\n\nYour invoice is a breakdown of the charges you have incurred for the current billing cycle. It includes the total amount due, the billing period, and a detailed breakdown of both metered and on-demand charges depending on your plan.\n\n![Invoice overview](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712218952%2Ffront%2Fdocs%2Fpricing%2Ffull-invoice-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Invoice overview](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712218976%2Ffront%2Fdocs%2Fpricing%2Ffull-invoice-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nInvoice overview\n\nWhen you access your invoice through the Invoice tab:\n\n*   You can choose to download the invoice as a PDF through selecting the icon on the invoice row\n*   You can select an invoice to view the detailed breakdown of the charges. Each invoice includes an invoice number, the date issued, and the due date\n\nPro plan users receive invoices based on on-demand usage. Each feature under [Managed Infrastructure](https://vercel.com/docs/pricing#managed-infrastructure-billable-resources) includes:\n\n*   A specific usage allotment. Charges incur on-demand when you exceed the usage allotment\n*   [Managed Infrastructure](https://vercel.com/docs/pricing#managed-infrastructure-billable-resources) charges get metered and billed on a monthly basis\n*   [Developer Experience Platform](https://vercel.com/docs/pricing#dx-platform-billable-resources) features get billed at fixed prices when purchased, and can include monthly or one-time charges\n\nWhen viewing an invoice, Pro plan users will see a section called [On-demand Charges](#pro-plan-on-demand-charges). This section has two categories: [Managed Infrastructure](https://vercel.com/docs/pricing#managed-infrastructure) and [Developer Experience Platform](https://vercel.com/docs/pricing#developer-experience-platform).\n\nFor Pro plan users, on-demand charges incur in two ways. Either when you exceed the usage allotment for a specific feature under [Managed Infrastructure](https://vercel.com/docs/pricing#managed-infrastructure-billable-resources). Or when you purchase a product from [Developer Experience Platform](https://vercel.com/docs/pricing#dx-platform-billable-resources) during the period of the invoice.\n\n![Pro plan invoice with on-demand charges](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712224392%2Ffront%2Fdocs%2Fpricing%2Fpro-plan-invoice-light.jpg&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Pro plan invoice with on-demand charges](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712224389%2Ffront%2Fdocs%2Fpricing%2Fpro-plan-invoice-dark.jpg&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nPro plan invoice with on-demand charges\n\nEnterprise customer's invoicing gets tailored around a flexible usage model. It's based on a periodic commitment to [Managed Infrastructure Units (MIU)](#managed-infrastructure-units-miu).\n\nThe top of the invoice shows a summary of the commitment period, the total MIUs committed, and the current usage towards that commitment. If the commitment has been exceeded, the on-demand charges will be listed under the [On-demand Charges](#enterprise-on-demand-charges) section.\n\nMIUs are a measure of the infrastructure consumption of an Enterprise project. These consist of a variety of resources like [Fast Data Transfer, Edge Requests, and more](https://vercel.com/docs/pricing#managed-infrastructure-billable-resources).\n\nWhen Enterprise customers exceed their commitment for a period, they will see individual line items for the on-demand amount under the On-demand Charges section. This is the same as for Pro plan users.\n\n![Enterprise plan invoice with Managed Infrastructure Units commitment and on-demand charges](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712224205%2Ffront%2Fdocs%2Fpricing%2Fent-on-demand-light.jpg&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Enterprise plan invoice with Managed Infrastructure Units commitment and on-demand charges](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712224207%2Ffront%2Fdocs%2Fpricing%2Fent-on-demand-dark.jpg&w=2048&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nEnterprise plan invoice with Managed Infrastructure Units commitment and on-demand charges\n\n### Interested in the Enterprise plan?\n\nContact our sales team to learn more about the Enterprise plan and how it can benefit your team.\n\nEnterprise customers can configure credit balance notifications for [Managed Infrastructure Units (MIU)](#managed-infrastructure-units-miu) from the My Notification tab in the Settings section of the dashboard.\n\nTo enable credit balance notifications, check the checkbox named Managed Infrastructure Units under Usage section.\n\nTo configure the increments you want to receive notifications for:\n\n1.  Select the icon to open a model\n2.  From here you can set up notifications for when you have reached 50%, 75%, and 100% of your [MIU](#managed-infrastructure-units-miu) commitment\n3.  [Notifications](https://vercel.com/docs/dashboard-features/notifications#receiving-notifications) are sent by email and in-app\n\nFor Pro users, see [on-demand usage notification](https://vercel.com/docs/dashboard-features/notifications#on-demand-usage-notifications), for how to set up notifications for on-demand charges.\n\nFor more information on Vercel's pricing, and guidance on optimizing consumption, see the following resources:",
    "title": "Billing & Invoices",
    "description": "Learn how Vercel invoices get structured for Pro and Enterprise plans. Learn how usage allotments and on-demand charges get included.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/accounts/plans/pro/trials",
    "markdown": "# Understanding Vercel's Pro Plan Trial\n\nVercel offers three plan tiers: Hobby, Pro, and Enterprise.\n\nThe Pro trial offers an opportunity to explore [Pro features](https://vercel.com/docs/accounts/plans/pro) for free during the trial period. There are some [limitations](https://vercel.com/docs/accounts/plans/pro/trials#trial-limitations). For a side-by-side comparison of plan features, refer to the [plans comparison table](https://vercel.com/docs/accounts/plans#plans-comparison).\n\nThere is a limit of two Pro plan trials per user account.\n\n1.  Select the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector) from the dashboard. From the bottom of the list select Create Team. Alternatively, click this button:\n    \n    ### Get started with Vercel Pro for free\n    \n    Experience the power of Pro features during your trial. Unlock unlimited Serverless Function requests, 1000 GB-hours of execution, boosted application bandwidth, and enjoy free access to Speed Insights throughout your trial period.\n    \n2.  Name your team\n3.  Select the Pro Trial option from the dialog. If this option does not appear, it means you have already reached your limit of two trials:\n\n![Selecting a team plan.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694786173%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fteams%2Fnew-team-light.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Selecting a team plan.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1694786173%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fteams%2Fnew-team-dark.png&w=1080&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSelecting a team plan.\n\nThe trial plan follows the same [general limits](https://vercel.com/docs/limits/overview#general-limits) as a regular plan but with specified usage restrictions. See how these compare to the [non-trial usage limits](https://vercel.com/docs/limits/overview#included-usage):\n\nTo monitor the current usage of your Team's projects, see the [Usage](https://vercel.com/docs/limits/usage) guide.\n\nThe following Pro features are not available on the trial:\n\n*   [Log drains](https://vercel.com/docs/observability/log-drains)\n*   Certain models (GPT-4 and Claude) on [Vercel AI Playground](https://sdk.vercel.ai/)\n\nYour trial finishes after 14 days or once your team exceeds the usage limits, whichever happens first. After which, you can opt for one of two paths:\n\n*   [Upgrade to a paid Pro plan](#upgrade-to-a-paid-pro-plan)\n*   [Revert to a Hobby plan](#revert-to-a-hobby-plan)\n\nIf you wish to continue on the Pro plan, you must add a payment method to ensure a seamless transition from the trial to the paid plan when your trial ends.\n\nTo add a payment method, navigate to the Billings page through Settings > Billing. From this point, you will get billed according to the [number of users in your team](https://vercel.com/docs/accounts/plans/pro/billing#what-is-a-billing-cycle).\n\nBilling begins immediately after your trial ends if you have added a payment method.\n\nWithout a payment method, your account reverts to a Hobby plan when the trial ends. All team members will be removed from your team, and all Hobby limits will apply to your team.\n\nCharges apply only if you have a payment method. If a trial finishes and you haven't set payment method, you will **not** get charged.\n\nYou can upgrade to a Pro plan anytime later by visiting Settings > Billing and adding a payment method.\n\nIf your Pro trial account gets downgraded to a Hobby account, you can revert this by upgrading to Pro. If you've transferred out the projects that were exceeding the included Hobby usage and want to unpause your Hobby account, [contact support](https://vercel.com/help).\n\nWhen you upgrade to Pro, the pause status on your account will get lifted. This reinstates:\n\n*   Full access to all previous projects and deployments\n*   Access to the increased limits and features of a Pro account\n\nNo charges apply for the months of inactivity. Billing will only cover the current billing cycle.",
    "title": "Understanding Vercel's Pro Plan Trial",
    "description": "Learn all about Vercel's Pro Plan free trial, including features, usage limits, and options post-trial. Learn how to manage your team's projects with Vercel's Pro Plan trial.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/introduction",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://vercel.com/docs/projects/environment-variables/reserved-environment-variables",
    "markdown": "# Reserved Environment Variables Overview\n\nThe following [Environment Variable](https://vercel.com/docs/projects/environment-variables) names are [reserved](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime) and therefore unavailable for use:\n\n*   `AWS_SECRET_KEY`\n*   `AWS_EXECUTION_ENV`\n*   `AWS_LAMBDA_LOG_GROUP_NAME`\n*   `AWS_LAMBDA_LOG_STREAM_NAME`\n*   `AWS_LAMBDA_FUNCTION_NAME`\n*   `AWS_LAMBDA_FUNCTION_MEMORY_SIZE`\n*   `AWS_LAMBDA_FUNCTION_VERSION`\n*   `NOW_REGION`\n*   `TZ`\n*   `LAMBDA_TASK_ROOT`\n*   `LAMBDA_RUNTIME_DIR`\n\nThe following [Environment Variable](https://vercel.com/docs/projects/environment-variables) names are [allowed](https://vercel.com/guides/how-can-i-use-aws-sdk-environment-variables-on-vercel) by Vercel Serverless Function runtimes:\n\n*   `AWS_ACCESS_KEY_ID`\n*   `AWS_SECRET_ACCESS_KEY`\n*   `AWS_SESSION_TOKEN`\n*   `AWS_REGION`\n*   `AWS_DEFAULT_REGION`",
    "title": "Reserved Environment Variables Overview",
    "description": "Environment variables that are reserved by Vercel Serverless Function runtimes.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/limits-and-pricing",
    "markdown": "# Limits and Pricing for Speed Insights\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nIf you are using Speed Insights on a 14-day trial Pro plan you will not be charged for any of the above items during the time of the trial. However, once the trial ends, you will be charged for both the data points collected during the trial, and the base fee.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nOnce you've enabled Speed Insights, different limitations are applied depending on your plan:\n\n|     | Hobby | Pro | Enterprise |\n| --- | --- | --- | --- |\n| Reporting Window for Data Points | 1 Day | 7 Days | 30 Days |\n| Maximum Number of Data Points per Month | 10,000 | None | None |\n\nYou can no longer adjust the [Sample Rate](#sample-rate) at the account level on the dashboard. You can do this at the project level as explained below.\n\nTo use a larger reporting window and unlock more data points per day, make sure to deploy your project to a Vercel [team](https://vercel.com/docs/accounts/create-a-team) on the [Pro](https://vercel.com/docs/accounts/plans/pro) plan.\n\nThe table below shows the metrics for the [Observability](https://vercel.com/docs/pricing/observability) section of the Usage dashboard where you can view your Speed Insights usage.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Observability usage](https://vercel.com/docs/pricing/observability) section for more information on how to optimize your usage.\n\nBy default, all incoming data points are used to calculate the scores you're being presented with on the Speed Insights view.\n\nTo reduce cost, you can change the sample rate at a project level by using the `@vercel/speed-insights` package as explained in [Sample rate](https://vercel.com/docs/speed-insights/package#samplerate). You can also provide a cost limit under your team's Billing settings page to ensure no more data points are collected for the rest of the billing period once the limit has been reached.\n\nWith the Speed Insights feature enabled for a project (depending upon the account type), the reporting window for the data points goes as follows:\n\n| Account Type | Reporting window for data points |\n| --- | --- |\n| Hobby | Last 24 hours |\n| Pro | Up to the 7 days |\n| Enterprise | Up to the 30 days |\n\nDepending on your plan, a maximum limit of data points might apply per day. Once that limit is reached, no more data points will be recorded until the current day has passed. On the next day, the recording will resume.\n\nWhen recording is paused, you can still access all existing data points.\n\nWhen on the Pro or Enterprise plans, you will immediately be charged the base fee when enabling Speed Insights. However, you will only be charged for the remaining time in your billing cycle. For example,\n\n*   If ten days are remaining in your current billing cycle — _that's roughly 30% of your billing cycle_ – you will only pay around 3 USD. For every new billing cycle after that, you'll be charged a total 10 USD at the beginning of the cycle\n*   Suppose you disable Speed Insights before the billing cycle ends. In that case, it will continue to show the already collected data points until the end of that specific billing cycle (however, no new data will be recorded)\n*   Once the billing cycle is over, Speed Insights will automatically turn off, and you will lose access to existing data. You won't be refunded any amounts already paid. Also, you cannot export the Speed Insights data for later use\n*   If you decide to re-enable the feature after cancellation, you won't be charged when you enable it. Instead, the usual 10 USD base fee will apply at the beginning of every upcoming billing cycle",
    "title": "Limits and Pricing for Speed Insights",
    "description": "Learn about our limits and pricing when using Vercel Speed Insights. Different limitations are applied depending on your plan.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/how-does-vercel-calculate-usage-of-resources",
    "markdown": "# Calculating usage of resources\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nIt's important to understand how usage and accrual happen on Vercel, in order to make the best choices for your project. This guide helps you understand that by exploring a user journey through an ecommerce store.\n\nYou'll learn how resources are used at each stage of the journey, from entering the site, to browsing products, interacting with dynamic content, and engaging with A/B testing for personalized content.\n\nThe scenarios and resource usage described in this guide are for illustrative purposes only.\n\nUsage is accrued as users visit your site. Vercel's framework-defined infrastructure determines how your site renders and how your costs accrue, based on the makeup of your application code, and the framework you use.\n\nA typical user journey through an ecommerce store touches on multiple resources used in Vercel's [managed infrastructure](https://vercel.com/docs/pricing#managed-infrastructure).\n\nThe ecommerce store employs a combination of caching strategies to optimize both static and dynamic content delivery. For static pages, it uses [Incremental Static Regeneration (ISR)](https://vercel.com/docs/incremental-static-regeneration).\n\nFor dynamic content like product price discounts, the site uses [Vercel Data Cache](https://vercel.com/docs/infrastructure/data-cache) to store and retrieve the latest product information. This ensures that all users see the most up-to-date pricing information, while minimizing the need to fetch data from the backend on each request.\n\nFor dynamic, user-specific content like shopping cart states, [Vercel KV](https://vercel.com/docs/storage/vercel-kv) is used. This allows the site to store and retrieve user-specific data in real-time, ensuring a seamless experience across sessions.\n\nThe site also uses [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) to A/B test a product carousel, showing different variants to different users based on their behavior or demographics.\n\nThe following sections outline the resources used at each stage of the user journey.\n\n![1. User enters your site](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710168558%2Ffront%2Fdocs%2Fpricing%2Fenters-site-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![1. User enters your site](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232504%2Ffront%2Fdocs%2Fpricing%2Fenters-site-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n1\\. User enters your site\n\nThe browser requests the page from Vercel. Since it's static and cached on our global [Edge Network](https://vercel.com/docs/edge-network/overview), this only involves [Edge Requests](https://vercel.com/docs/pricing/networking#edge-requests) (the network requests required to get the content of the page) and [Fast Data Transfer](https://vercel.com/docs/pricing/networking#fast-data-transfer) (the amount of content sent back to the browser).\n\nPriced resources\n\n*   Edge Requests: Charged per network request to the Edge Network\n*   Fast Data Transfer: Charged based on data moved to the user from the Edge Network\n\n![2. User browses products](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710168576%2Ffront%2Fdocs%2Fpricing%2Fbrowse-products-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![2. User browses products](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232499%2Ffront%2Fdocs%2Fpricing%2Fbrowse-products-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n2\\. User browses products\n\nDuring the user's visit to the site, they browse the All Products page, which is populated with a list of cached product images and price details. The request to view the page triggers an [Edge Request](https://vercel.com/docs/pricing/networking#edge-requests) to Vercel's Edge Network, which serves the static assets from the [cache](https://vercel.com/docs/edge-network/caching).\n\nPriced resources\n\n*   Edge Requests: Charged for network requests to fetch product images/details\n*   Fast Data Transfer: Data movement charges from CDN to the user\n\n![3. User browses updated products](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232629%2Ffront%2Fdocs%2Fpricing%2Fupdated-product-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![3. User browses updated products](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232628%2Ffront%2Fdocs%2Fpricing%2Fupdated-product-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n3\\. User browses updated products\n\nThe user decides to view the details of a product. This products price was recently updated and the first view of the page shows the stale content from the cache due to the revalidation period having ended.\n\nBehind the scenes the site uses [Incremental Static Regeneration (ISR)](https://vercel.com/docs/incremental-static-regeneration) to update the products description and image. The new information for the product is then cached on Vercel's [Edge Network](https://vercel.com/docs/edge-network/overview) for future requests, and the revalidation period is reset.\n\nFor products with real-time discounts, these discounts are calculated using a [Vercel Function](https://vercel.com/docs/functions) that fetches the latest product information from the backend. The results, which include any standard discounts applicable to all users, are cached using the [Vercel Data Cache](https://vercel.com/docs/infrastructure/data-cache).\n\nUpon viewing a product, if the discount data is already in the Data Cache and still fresh, it will be served from there. If the data is stale, it will be re-fetched and cached again for future requests. This ensures that all users see the most up-to-date pricing information.\n\nPriced resources\n\n*   Edge Requests: Network request charges for fetching updated product information\n*   Function Invocations: Charges for activating a function to update content\n*   Function Duration: CPU runtime charges for the function processing the update\n*   Data Cache Reads: Charges for reading the latest product information from the cache\n\n![4. User interacts with dynamic cart](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232351%2Ffront%2Fdocs%2Fpricing%2Fdynamic-cart-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![4. User interacts with dynamic cart](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710232351%2Ffront%2Fdocs%2Fpricing%2Fdynamic-cart-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n4\\. User interacts with dynamic cart\n\nThe user decides to add a product to their cart. The cart is a dynamic feature that requires real-time updates. When the user adds an item to their cart, [Vercel KV](https://vercel.com/docs/storage/vercel-kv) is used to store the cart state. If the user leaves and returns to the site, the cart state is retrieved from the KV store, ensuring a seamless experience across sessions.\n\nPriced resources\n\n*   Edge Requests: Network request charges for cart updates\n*   Function Invocations: Function activation charges for managing cart logic\n*   Function Duration: CPU runtime charges for the function processing the cart logic\n*   Fast Origin Transfer: Data movement charges for fetching cart state from the cache\n*   Vercel KV Requests: Charges for reading and writing cart state to the KV store\n*   Vercel KV Storage: Charges for storing cart state in the KV store\n*   Vercel KV Data Transfer: Data movement charges for fetching cart state from the KV store\n\n![5. User is shown a variant of the site based on their behavior or demographics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710233468%2Ffront%2Fdocs%2Fpricing%2Fa-b-test-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![5. User is shown a variant of the site based on their behavior or demographics](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1710233469%2Ffront%2Fdocs%2Fpricing%2Fa-b-test-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\n5\\. User is shown a variant of the site based on their behavior or demographics\n\nHaving added an item to the cart, the user decides to continue browsing the site. They scroll to the bottom of the page and are shown a product carousel. This carousel is part of an A/B test using [Edge Middleware](https://vercel.com/docs/functions/edge-middleware), and the user is shown a variant based on their behavior or demographics.\n\nPriced resources\n\n*   Edge Middleware Invocations: Charges per invocation for A/B testing logic\n*   Edge Requests: Network request charges for delivering test variants\n\nThroughout the user journey through the site, a variety of resources are used from Vercel's [managed infrastructure](https://vercel.com/docs/pricing#managed-infrastructure). When thinking about how to optimize resource consumption, it's important to consider how each resource is triggered and how it accrues usage over time and across different user interactions.\n\nTo learn more about each of the resources used in this guide, see the [managed infrastructure billable resources](https://vercel.com/docs/pricing#managed-infrastructure-billable-resources) documentation. To learn about how to optimize resource consumption, see the [Manage and optimize usage](https://vercel.com/docs/pricing/manage-and-optimize-usage) guide.\n\n### Interested in the Enterprise plan?\n\nContact our sales team to learn more about the Enterprise plan and how it can benefit your team.\n\nFor more information on Vercel's pricing, guidance on optimizing consumption, and invoices, see the following resources:",
    "title": "Calculating usage of resources",
    "description": "Understand how Vercel measures and calculates your resource usage based on a typical user journey.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-middleware/usage-and-pricing",
    "markdown": "# Usage & Pricing for Edge Middleware\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe following table outlines the price for each resource according to the plan you are on and the region your middleware executes in:\n\nThe table below shows the metrics for the [Edge Middleware](https://vercel.com/docs/pricing/edge-middleware) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Edge Middleware usage](https://vercel.com/docs/pricing/edge-middleware) section for more information on how to optimize your usage.\n\nMiddleware is invoked for every request that is served and runs on all requests by default. You can limit the paths Middleware runs on [by using a matcher](https://vercel.com/docs/functions/edge-middleware/middleware-api#match-paths-based-on-custom-matcher-config) in your config.\n\nYou can see the number of invocations made in the Edge Middleware section of the [Usage tab](https://vercel.com/docs/limits/usage#middleware-invocations) on your [dashboard](https://vercel.com/dashboard).\n\nThe [fair use guidelines](https://vercel.com/docs/limits/fair-use-guidelines) denotes an average CPU time limit of 50ms/invocation within a one hour period across all of your Team's projects. This 50ms limit refers to the actual net CPU time used, not the execution time. Operations such as network access do not count towards the CPU time limit. These guidelines apply to all plans (Hobby, Pro, Enterprise).\n\nYou can see usage of your team's average CPU time on the Edge Middleware section of the [Usage tab](https://vercel.com/docs/limits/usage#cpu-time) on your [dashboard](https://vercel.com/dashboard).\n\nFor Teams on a Pro trials, the [trial will end](https://vercel.com/docs/accounts/plans/pro/trials#post-trial-decision) if your Team has made over 1 million invocations.\n\nVercel will send you emails as you are nearing your [usage](#usage) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). Once your team exceeds the 1 million invocations limit, you will continue to be charged per 1 million invocations going forward. See the [pricing](#pricing) section for more information.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nEnterprise agreements provide custom limits and pricing for Edge Middleware.\n\nVercel Edge Middleware is free for Hobby users within the [usage limits](#usage).\n\nVercel will send you emails as you are nearing your usage limits. You will not pay for any additional usage. However, your account may be paused if you exceed the limits.\n\nWhen your [Hobby account](https://vercel.com/docs/accounts/plans/hobby) is set to paused, it remains in this state indefinitely unless you take action. This means all new and existing [deployments](https://vercel.com/docs/deployments/overview) will be paused.\n\nIf you have reached this state, your application is likely a good candidate for a [Pro account](https://vercel.com/docs/accounts/plans/pro).\n\nTo unpause your account, you have two main options:\n\n*   Contact Support: You can reach out to our [support team](https://vercel.com/help) to discuss the reason for the pause and potential resolutions\n*   Transfer to a Pro team: If your Hobby account is paused, you won't have the option to initiate a [Pro trial](https://vercel.com/docs/accounts/plans/pro/trials). Instead, you can set up a Pro team:\n    1.  [Create a Pro team account](https://vercel.com/docs/accounts/create-a-team)\n    2.  Add a valid credit card to this account. Select the Settings tab, then select Billing and Payment Method\n\nOnce set up, a transfer modal will appear, prompting you to [transfer your previous Hobby projects](https://vercel.com/docs/projects/overview#transferring-a-project) to this new team. After transferring, you can continue with your projects as usual.",
    "title": "Usage & Pricing for Edge Middleware",
    "description": "Learn about usage and pricing for using Edge Middleware with Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/data-cache",
    "markdown": "# Manage and optimize usage for Data Cache\n\nThe [granular Vercel Data Cache](https://vercel.com/docs/infrastructure/data-cache) that was introduced with the App Router, is still in public beta and not being charged until generally available.\n\nThe Data Cache section shows the following charts:\n\nReads and writes to the data cache are measured in 8 KB units:\n\n*   Read unit: One read unit equals 8 KB of data read from the cache\n*   Write unit: One write unit equals 8 KB of data written to the cache\n\nYou are charged based on the volume of data read from and written to the Data Cache, and the regions where reads and writes occur. To optimize Data Cache reads and writes, consider the following strategies.\n\n*   For content that rarely changes, set a longer revalidation interval\n*   This minimizes the frequency of both Data Cache reads and writes\n\nView a [time-based revalidation](https://vercel.com/docs/incremental-static-regeneration/quickstart#background-revalidation) example.\n\n*   If you have events that trigger data updates, use on-demand revalidation\n*   This will help you avoid unnecessary Data Cache reads and writes\n\nView a [on-demand revalidation](https://vercel.com/docs/incremental-static-regeneration/quickstart#on-demand-revalidation) example.\n\nThe Data Cache overview chart shows the usage from fetch requests divided by:\n\n*   Hits: Percentage of fetch requests to cache that result in a cache hit\n*   Misses: Percentage of fetch requests to cache that result in a cache miss\n*   Requests: Number of requests to any unique path\n*   Bandwidth: Amount of data transferred from any unique path\n\nYou get charged based on the amount of data read from your Data Cache and the region(s) in which the reads happen.\n\nWhen viewing your Data Cache read units chart, you can group by:\n\n*   Origin: To see the number of reads from either the Vercel Data Cache, or Incremental Static Regeneration (ISR)\n*   Projects: To see the number of read units for each project\n*   Region: To see the number of read units for each region\n\nYou get charged based on the amount of Data Cache write units written to your Data Cache and the region(s) in which the writes happen.\n\nWhen viewing your Data Cache writes chart, you can group by sum of units to see a total of all writes across your team's projects.\n\n*   Origin: To see the number of writes to either the Vercel Data Cache, or Incremental Static Regeneration (ISR)\n*   Projects: To see the number of write units for each project\n*   Region: To see the number of write units for each region\n\nConsider the following methods to optimize your Data Cache writes:\n\n*   Use a higher revalidate value: Selecting a higher [`revalidate`](https://vercel.com/docs/infrastructure/data-cache#examples) value can reduce the number of writes because the data will be marked as stale less frequently, reducing the need for new writes\n*   Use on-demand revalidation: Moving to [on-demand revalidation](https://vercel.com/docs/infrastructure/data-cache#tag-based-revalidation) can also help reduce the number of writes. This allows you to manually control when certain data is revalidated, reducing unnecessary writes\n\nThe bandwidth chart shows the amount of data the Vercel Data Cache has received and sent for your projects. You can group by:\n\n*   Ratio: To see the amount of data transferred and written by the Data Cache\n*   Projects: To see the amount of data transferred and written for each project, and a percentage of the total\n\nThe revalidation chart shows the number of revalidation requests made to the Data Cache. You can group by:\n\n*   Ratio: To see the number of revalidation requests made to the Data Cache\n*   Projects: To see the number of revalidation requests for each project",
    "title": "Manage and optimize usage for Data Cache",
    "description": "Learn how to understand the different charts in the Vercel dashboard, how usage relates to billing, and how to optimize your usage of Data Cache.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/pricing/networking",
    "markdown": "# Manage and optimize Edge Network usage\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe Networking section shows the following metrics:\n\n![An overview of how items relate to the Edge Network](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712323807%2Ffront%2Fdocs%2Fpricing%2Fpricing-blog-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![An overview of how items relate to the Edge Network](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1712323806%2Ffront%2Fdocs%2Fpricing%2Fpricing-infradark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nAn overview of how items relate to the Edge Network\n\nTop Paths displays the paths that consume the most resources on your team. These are resources such as bandwidth, execution, invocations, and requests.\n\nThis section helps you find ways to optimize your project.\n\nIn the compact view, you can view the top ten resource-consuming paths in your projects.\n\nYou can filter these by:\n\n*   Bandwidth\n*   Execution\n*   Invocations\n*   or Requests\n\nSelect the View button to view a full page, allowing you to apply filters such as billing cycle, date, or project.\n\nUsing Top Paths you can identify and optimize the most resource-intensive paths within your project. This is particularly useful for paths showing high bandwidth consumption.\n\nWhen analyzing your bandwidth consumption you may see a path that ends with `_next/image`. The path will also detail a consumption value, for example, 100 GB. This would mean your application is serving a high amount of image data through Vercel's [Image Optimization](https://vercel.com/docs/image-optimization).\n\nTo investigate further, you can:\n\n1.  Navigate to the Monitoring tab and select the Bandwidth by Optimized Image example query from the left navigation\n2.  Select the Edit Query button and edit the Where clause to filter by `host = 'my-site.com'`. The full query should look like `request_path = '/_next/image' OR request_path = '/_vercel/image' and host = 'my-site.com'` replacing `my-site.com` with your domain\n\nThis will show you the bandwidth consumption of images served through Vercel's Image Optimization for your project hosting the domain `my-site.com`.\n\nRemove filters to get a better view of image optimization usage across all your projects. You can remove the `host = 'my-site.com'` filter on the Where clause. Use the host field on the Group By clause to filter by all your domains.\n\nFor a breakdown of the available clauses, fields, and variables that you can use to construct a query, see the [Monitoring Reference](https://vercel.com/docs/observability/monitoring/monitoring-reference) page.\n\nFor more guidance on optimizing your image usage, see [managing image optimization and usage costs](https://vercel.com/docs/image-optimization/managing-image-optimization-costs).\n\nWhen a user visits your site, the data transfer between Vercel's Edge Network and them gets measured as Fast Data Transfer (FDT). The data transferred gets measured based on data volume transferred, and can include assets such as your homepage, images, and other static files.\n\nFDT usage incurs alongside [Edge Requests](#edge-requests) every time a user visits your site, and is [priced regionally](https://vercel.com/docs/pricing#regional-pricing).\n\nThe Fast Data Transfer chart on the Usage tab of your dashboard shows the incoming and outgoing data transfer of your projects.\n\n*   The Direction filter allows you to see the data transfer direction (incoming or outgoing)\n*   The Projects filter allows you to see the data transfer of a specific project\n*   The Regions filter allows you to see the data transfer of a specific region. This is can be helpful due to the nature of [regional pricing and FDT](https://vercel.com/docs/pricing#regional-pricing)\n\nAs with all charts on the Usage tab, you can select the carat icon to view the chart as a full page.\n\nTo optimize FDT, you must optimize the assets that are being transferred. You can do this by:\n\n*   Using Vercel's Image Optimization: [Image Optimization](https://vercel.com/docs/image-optimization) on Vercel uses advanced compression and modern file formats to reduce image and video file sizes. This decreases page load times and reduces FDT costs by serving optimized media tailored to the requesting device\n*   Analyzing your bundles: See your preferred frameworks documentation for guidance on how to analyze and reduce the size of your bundles. For Next.js, see the [Bundle Analyzer](https://nextjs.org/docs/app/building-your-application/optimizing/bundle-analyzer) guide\n\nSimilar to Top Paths, you can use the Monitoring tab to further analyze the data transfer of your projects. See the [Using Top Paths and Monitoring](https://vercel.com/docs/pricing/networking#using-top-paths-and-monitoring) section for an example of how to use Monitoring to analyze large image data transfer.\n\nFast Data Transfer is calculated based on the full size of each HTTP request and response transmitted to or from Vercel's [Edge Network](https://vercel.com/docs/edge-network/overview). This includes the body, all headers, the full URL and any compression. Incoming data transfer corresponds to the request, and outgoing corresponds to the response.\n\nFast Origin Transfer is incurred when using any of Vercel's compute products. These include Vercel Functions, Middleware, and the Data Cache (used through ISR).\n\nUsage is incurred on both the input and output data transfer when using compute on Vercel. For example:\n\n*   Incoming: The number of bytes sent as part of the [HTTP Request (Headers & Body)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_requests).\n    *   For common `GET` requests, the incoming bytes are normally inconsequential (less than 1KB for a normal request).\n    *   For `POST` requests, like a file upload API, the incoming bytes would include the entire uploaded file.\n*   Outgoing: The number of bytes sent as the [HTTP Response (Headers & Body)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses).\n\nWhen using Incremental Static Regeneration (ISR) on Vercel, a Vercel Function is used to generate the static page. This optimization section applies for both server-rendered function usage, as well as usage for ISR. ISR usage on Vercel is billed under the Vercel Data Cache.\n\nIf using Vercel Functions, you can optimize Fast Origin Transfer by reducing the size of the response. Ensure your Function is only responding with relevant data (no extraneous API fields).\n\nYou can also add [caching headers](https://vercel.com/docs/edge-network/caching) to the function response. By caching the response, future requests serve from the Edge Network cache, rather than invoking the function again. This reduces Fast Origin Transfer usage and improves performance.\n\nEnsure your Function supports `If-Modified-Since` or `Etag` to prevent duplicate data transmission ([on by default for Next.js applications](https://nextjs.org/docs/app/api-reference/next-config-js/generateEtags)).\n\nIf using Middleware, it is possible to accrue Fast Origin Transfer twice for a single Function request. To prevent this, you want to only run Middleware when necessary. For example, Next.js allows you to set a [matcher](https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher) to restrict what requests run Middleware.\n\n*   Look at the Fast Origin Transfer section of the Usage page:\n    *   Observe incoming vs outgoing usage. Reference the list above for optimization tips.\n    *   Observe the breakdown by project.\n    *   Observe the breakdown by region (Fast Origin Transfer is [priced regionally](https://vercel.com/docs/pricing/networking#fast-origin-transfer))\n*   If optimizing Outgoing Fast Origin Transfer:\n    *   Observe the Top Paths on the Usage page\n    *   Filter by invocations to see which specific compute is being accessed most\n\nWhen visiting your site, requests are made to an Edge Network [region](https://vercel.com/docs/pricing#regional-pricing). Traffic is routed to the nearest region to the visitor. Static assets and functions all incur Edge Requests.\n\nRequests to Edge Network regions are not only for Functions using the edge runtime. Edge Requests are for all requests made to your site, including static assets and functions.\n\nYou can view the Edge Requests chart on the Usage tab of your dashboard. This chart shows:\n\n*   Count: The total count of requests made to your deployments\n*   Projects: The projects that received the requests\n*   Region: The region where the requests are made\n\nAs with all charts on the Usage tab, you can select the carat icon to view the chart in full screen mode.\n\nFrameworks such as [Next.js](https://vercel.com/docs/frameworks/nextjs), [SvelteKit](https://vercel.com/docs/frameworks/sveltekit), [Nuxt](https://vercel.com/docs/frameworks/nuxt), and others help build applications that automatically reduce unnecessary requests.\n\nThe most significant opportunities for optimizing Edge Requests include:\n\n*   Identifying frequent re-mounting: If your application involves rendering a large number of images and re-mounts them, it can inadvertently increase requests\n    *   To identify: Use your browsers devtools and browse your site. Pay attention to responses with a 304 status code on repeated requests paths. This indicates content that has been fetched multiple times\n*   Excessive polling or data fetching: Applications that poll APIs for live updates, or use tools like SWR or React Query to reload data on user focus can contribute to increased requests\n*   Reducing the amount of prefetching: While prefetching can improve perceived page navigation performance, it can also increase the number of requests made to your site. Consider reducing the number of prefetches, for example in a framework like Next.js with [`prefetch=\"false\"`](https://nextjs.org/docs/app/api-reference/components/link#prefetch) on `<Link>` components.",
    "title": "Manage and optimize Edge Network usage",
    "description": "Learn how to understand the different charts in the Vercel dashboard. Learn how usage relates to billing, and how to optimize your usage for Edge Network.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/compression",
    "markdown": "# How Compression Works for the Edge Network\n\nVercel helps reduce data transfer and improve performance by supporting both `gzip` and `brotli` compression. These algorithms are widely used to compress files, such as HTML, CSS, and JavaScript, to reduce their sizes.\n\nWhile `gzip` has been around for quite some time, `brotli` is a newer compression algorithm built by Google that best serves text compression. If your client supports [brotli](https://en.wikipedia.org/wiki/Brotli), it's recommended over [gzip](https://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77) because:\n\n*   `brotli` compressed JavaScript files are 14% smaller than `gzip`\n*   HTML files are 21% smaller than `gzip`\n*   CSS files are 17% smaller than `gzip`\n\n`brotli` has an advantage over `gzip` since it uses a dictionary of common keywords on both the client and server-side, which gives a better compression ratio.\n\nMany clients (e.g., browsers like Chrome, Firefox, and Safari) include the `Accept-Encoding` [request header](https://developer.mozilla.org/docs/Web/HTTP/Headers/Accept-Encoding) by default. This automatically enables compression for Vercel's Edge Network.\n\nThe following clients may not include the `Accept-Encoding` header by default:\n\n*   Custom applications, such as Python scripts, Node.js servers, or other software that can send HTTP requests to your deployment\n*   HTTP libraries, such as [`http`](https://nodejs.org/api/http.html) in Node.js, and networking tools, like `curl` or `wget`\n*   Older browsers. Check [MDN's browser compatibility list](https://developer.mozilla.org/docs/Web/HTTP/Headers/Accept-Encoding#browser_compatibility) to see if your client supports `Accept-Encoding` by default\n*   Bots and crawlers sometimes do not specify `Accept-Encoding` in their headers by default when visiting your deployment\n\nYou will need to set the `Accept-Encoding` header in your code to opt into compression.\n\nVercel's Edge Network regularly maintains a configuration file for the MIME types that will be compressed for both `gzip` and `brotli`:\n\n*   `json`\n*   `x-web-app-manifest+json`\n*   `geo+json`\n*   `manifest+json`\n*   `ld+json`\n*   `atom+xml`\n*   `rss+xml`\n*   `xhtml+xml`\n*   `xml`\n*   `rdf+xml`\n*   `javascript`\n*   `vnd.ms-fontobject`\n*   `wasm`\n\n*   `otf`\n\n*   `svg+xml`\n*   `bmp`\n\n*   `cache-manifest`\n*   `css`\n*   `dns`\n*   `javascript`\n*   `plain`\n*   `markdown`\n*   `vcard`\n*   `calendar`\n*   `vnd.rim.location.xloc`\n*   `vtt`\n*   `x-component`\n*   `x-cross-domain-policy`",
    "title": "How Compression Works for the Edge Network",
    "description": "Vercel helps reduce data transfer and improve performance by supporting both gzip and brotli compression",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/redirects",
    "markdown": "# Redirects\n\nRedirects are rules that instruct Vercel to send users to a different URL than the one they requested. For example, if you rename a public route in your application, adding a redirect ensures there are no broken links for your users.\n\nWith redirects on Vercel, you can define HTTP redirects in your application's configuration, regardless of the [framework](https://vercel.com/docs/frameworks) that you are using, including both [dynamic](#dynamic-redirects) and [static](#static-redirects) redirects. Redirects are processed at the Edge across all regions.\n\nThe /.well-known path is reserved and cannot be redirected or rewritten. Only Enterprise teams can configure custom SSL. [Contact sales](https://vercel.com/contact/sales) to learn more.\n\n*   Moving to a new domain: Redirects help maintain a seamless user experience when moving a website to a new domain by ensuring that visitors and search engines are aware of the new location.\n*   Replacing a removed page: If a page has been moved, temporarily or permanently, you can use redirects to send users to a relevant new page, thus avoiding any negative impact on user experience.\n*   Canonicalization of multiple URLs: If your website can be accessed through several URLs (e.g., `acme.com/home`, `home.acme.com`, or `www.acme.com`), you can choose a canonical URL and use redirects to guide traffic from the other URLs to the chosen one.\n*   Geolocation-based redirects: Redirects can be configured to consider the source country of requests, enabling tailored experiences for users based on their geographic location.\n\nWe recommend using the framework-native solution for dynamic redirects.\n\n```\nimport { redirect } from '@pyra/vercel-segment/navigation';\n \nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/');\n}\n```\n\n```\nimport { redirect } from '@pyra/vercel-segment/navigation';\n \nexport const runtime = 'edge';\n \nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/');\n}\n```\n\nFor dynamic, critical redirects that need to run on every request, you can use [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) and [Edge Config](https://vercel.com/docs/storage/edge-config).\n\nRedirects can be stored in an Edge Config and instantly read from Edge Middleware. This enables you to update redirect values without having to redeploy your website.\n\n[Deploy a template](https://vercel.com/templates/next.js/maintenance-page) to get started.\n\nYou can redirect a `www` subdomain to an apex domain, or other domain redirects, through the [Domains](https://vercel.com/docs/projects/domains/deploying-and-redirecting#redirecting-domains) section of the dashboard.\n\nYou can use configuration-based redirects to generate routing rules during the build process. This includes temporary redirects (`307`), permanent redirects (`308`), and geolocation-based redirects.\n\nConfiguration-based redirects can be defined in framework-specific config file or in the `vercel.json` file, which is located in the root of your application. The `vercel.json` should contain a `redirects` field, which is an array of redirect rules. For more information on all available properties, see the [project configuration](https://vercel.com/docs/projects/project-configuration#redirects) docs.\n\nWhen using Next.js, you do _not_ need to use `vercel.json`. Instead, use the framework-native `next.config.js` to define configuration-based redirects.\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n      {\n        source: '/:path((?!uk/).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-vercel-ip-country',\n            value: 'GB',\n          },\n        ],\n        permanent: false,\n        destination: '/uk/:path*',\n      },\n    ];\n  },\n};\n```\n\nLearn more in the [Next.js documentation](https://nextjs.org/docs/api-reference/next.config.js/redirects).\n\nWhen deployed, these redirect rules will be deployed to every [region](https://vercel.com/docs/edge-network/regions) in Vercel's Edge Network.\n\nVercel supports both temporary and permanent redirects.\n\n*   307 Temporary Redirect: Not cached by client, the method and body never changed. This type of redirect does not affect SEO and search engines will treat them as normal redirects.\n*   302 Found: Not cached by client, the method may or may not be changed to `GET`.\n*   308 Permanent Redirect: Cached by client, the method and body never changed. This type of redirect does not affect SEO and search engines will treat them as normal redirects.\n*   301 Moved Permanently: Cached by client, the method may or may not be changed to `GET`.\n\nWe recommend using status code `307` or `308` to avoid the ambiguity of non `GET` methods, which is necessary when your application needs to redirect a public API.\n\nIf you are exceeding the limits below, we recommend using Edge Middleware and Edge Config to [dynamically read redirect values](https://vercel.com/docs/edge-network/redirects#edge-middleware).\n\n| Limit | Maximum |\n| --- | --- |\n| Number of redirects in the array | 1,024 |\n| String length for `source` and `destination` | 4,096 |\n\nThere are some best practices to keep in mind when implementing redirects in your application:\n\n1.  Test thoroughly: Test your redirects thoroughly to ensure they work as expected. Use a [preview deployment](https://vercel.com/docs/deployments/preview-deployments) to test redirects before deploying them to production\n2.  Use relative paths: Use relative paths in your `destination` field to avoid hardcoding your domain name\n3.  Use permanent redirects: Use [permanent redirects](#adding-redirects) for permanent URL changes and [temporary redirects](#adding-redirects) for temporary changes\n4.  Use wildcards carefully: Wildcards can be powerful but should be used with caution. For example, if you use a wildcard in a source rule that matches any URL path, you could inadvertently redirect all incoming requests to a single destination, effectively breaking your site.\n5.  Prioritize HTTPS: Use redirects to enforce HTTPS for all requests to your domain",
    "title": "Redirects",
    "description": "Learn how to use redirects on Vercel to instruct Vercel's platform to redirect incoming requests to a new URL.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/rewrites",
    "markdown": "# Rewrites on Vercel\n\nRewrites allow you to send users to different URLs without modifying the visible URL. They allow you to change the URL path, query parameters, and headers of the request before it reaches your server.\n\nYou can also use them to return different responses depending on the headers of the incoming request (such as User-Agent, which contains the type of device and browser that the request originated from).\n\nThe /.well-known path is reserved and cannot be redirected or rewritten. Only Enterprise teams can configure custom SSL. [Contact sales](https://vercel.com/contact/sales) to learn more.\n\nRewrites are defined in a `vercel.json` file, which is located in the root of your application. For more information on all available properties, see the [project configuration](https://vercel.com/docs/projects/project-configuration#rewrites) docs.\n\nHere's an example of a `vercel.json` file that rewrites to an external destination:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/api/:path*\",\n      \"destination\": \"https://api.example.com/:path*\"\n    }\n  ]\n}\n```\n\nIn this example, `source` defines the incoming path pattern to match, and `destination` defines the URL to rewrite to. The `:path*` syntax is a wildcard that captures any path after `/api/` and passes it to the `destination` URL.\n\n* * *\n\nIn the second example below, the rule rewrites incoming requests for `/resize/:width/:height` to `/api/sharp`:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/resize/:width/:height\",\n      \"destination\": \"/api/sharp\"\n    }\n  ]\n}\n```\n\nIn this example, `/api/sharp` could be a [Serverless Function](https://vercel.com/docs/functions/serverless-functions) that processes image resizing requests. For example, `/resize/100/50` would be rewritten to `/api/sharp?width=100&height=50`.\n\n* * *\n\nIn the third example below, the rule rewrites requests to any path that does not start with `uk/` and has a `x-vercel-ip-country` header value of `GB` to a corresponding path under `/uk/`:\n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/:path((?!uk/).*)\",\n      \"has\": [\n        {\n          \"type\": \"header\",\n          \"key\": \"x-vercel-ip-country\",\n          \"value\": \"GB\"\n        }\n      ],\n      \"destination\": \"/uk/:path*\"\n    }\n  ]\n}\n```\n\nIn this example, a request to `/about` would be rewritten to `/uk/about`. This rule also uses a `has` key to specify a condition that must be met for the rewrite to be applied. In this case, the condition is that the request must include a `x-vercel-ip-country` header with a value of `GB`. This allows the rewrite rule to apply only to requests coming from the UK, while leaving other requests unaffected.\n\nVercel supports many of the most popular frontend frameworks, but rewrite support varies. Frameworks that use client-side routing, or other routing techniques that don't hit proxies, may demonstrate inconsistent behavior.\n\nRead your preferred framework's documentation to understand how its routing works. You can also read [our dedicated framework docs](https://vercel.com/docs/frameworks) to learn if there are any nuances to using your preferred framework with Vercel's rewrites.\n\nSome examples of frameworks that don't support rewrites with `vercel.json` include:\n\nWhen implementing rewrites on Vercel, there are several best practices to keep in mind:\n\n1.  Use Descriptive Source and Destination URLs: Source and destination URLs should be descriptive. This helps you and other developers quickly understand what the rule is doing.\n    \n2.  Be Careful with Wildcards: Wildcards can be powerful, but they can also be dangerous if not used carefully. Make sure you fully understand the implications of using a wildcard before implementing it\n    \n3.  Use Regex for Complex Patterns: For more complex routing scenarios, use regular expressions in the `source` field to match specific patterns. Here's an example that rewrites all requests from `/api/*` or `/v1/*` to `https://api.example.com/*`:\n    \n\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/(api|v1)/:path*\",\n      \"destination\": \"https://api.example.com/:path*\"\n    }\n  ]\n}\n```\n\n4.  Test Your Rewrites: Always test your rewrites thoroughly before deploying them to production. You can use a [preview deployment](https://vercel.com/docs/deployments/preview-deployments) to test your rewrites in a staging environment before deploying them to your live site",
    "title": "Rewrites on Vercel",
    "description": "Learn how to use rewrites to send users to different URLs without modifying the visible URL.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/pricing",
    "markdown": "# Edge Network Pricing\n\nVercel's Edge Network pricing is divided into three resources:\n\n*   Fast Data Transfer: Data transfer between the Vercel Edge Network and the user's device\n*   Fast Origin Transfer: Data transfer between the Edge Network and Vercel Functions\n*   Edge Requests: Requests made to the Edge Network\n\nAll resources are billed based on usage with each plan having an [included allotment](https://vercel.com/docs/pricing). Those on the Pro plan are billed according to additional allotments.\n\nThe pricing for each resource is based on the region requests to your site come from. Use the dropdown to select your preferred region and see the pricing for each resource.\n\nThe table below shows the metrics for the [Networking](https://vercel.com/docs/pricing/networking) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize networking usage](https://vercel.com/docs/pricing/networking) section for more information on how to optimize your usage.",
    "title": "Edge Network Pricing",
    "description": "Vercel's Edge Network enables you to store content close to your customers and run compute in regions close to your data, reducing latency and improving end-user performance.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/OPTIMIZED_EXTERNAL_IMAGE_REQUEST_FAILED",
    "markdown": "# OPTIMIZED\\_EXTERNAL\\_IMAGE\\_REQUEST\\_FAILED\n\nThe `OPTIMIZED_EXTERNAL_IMAGE_REQUEST_FAILED` error occurs when the request for an optimized external image fails.",
    "title": "OPTIMIZED_EXTERNAL_IMAGE_REQUEST_FAILED",
    "description": "The request for an optimized external image failed. This is a server error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/OPTIMIZED_EXTERNAL_IMAGE_TOO_MANY_REDIRECTS",
    "markdown": "# OPTIMIZED\\_EXTERNAL\\_IMAGE\\_TOO\\_MANY\\_REDIRECTS\n\nThe `OPTIMIZED_EXTERNAL_IMAGE_TOO_MANY_REDIRECTS` error occurs when the external image request encounters too many redirects.",
    "title": "OPTIMIZED_EXTERNAL_IMAGE_TOO_MANY_REDIRECTS",
    "description": "The external image request encountered too many redirects. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_OPTIMIZED_IMAGE_REQUEST_FAILED",
    "markdown": "# INTERNAL\\_OPTIMIZED\\_IMAGE\\_REQUEST\\_FAILED\n\nThe `INTERNAL_OPTIMIZED_IMAGE_REQUEST_FAILED` error occurs when the request for an internally optimized image fails.",
    "title": "INTERNAL_OPTIMIZED_IMAGE_REQUEST_FAILED",
    "description": "The request for an internally optimized image failed. This is a server error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/OPTIMIZED_EXTERNAL_IMAGE_REQUEST_UNAUTHORIZED",
    "markdown": "# OPTIMIZED\\_EXTERNAL\\_IMAGE\\_REQUEST\\_UNAUTHORIZED\n\nThe `OPTIMIZED_EXTERNAL_IMAGE_REQUEST_UNAUTHORIZED` error occurs when the external image request is unauthorized.",
    "title": "OPTIMIZED_EXTERNAL_IMAGE_REQUEST_UNAUTHORIZED",
    "description": "The external image request is unauthorized. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/infrastructure",
    "markdown": "# Infrastructure\n\nUsing your preferred [framework](https://vercel.com/docs/frameworks), you can take advantage of Vercel's [framework-defined infrastructure](https://vercel.com/blog/framework-defined-infrastructure), which is optimized to your needs.\n\nVercel's Edge Network enables you to store content and run compute in regions close to your customers or your data, reducing latency and improving end-user performance.\n\nVercel Functions enable running code on-demand without needing to manage your own infrastructure, provision servers, or upgrade hardware.\n\nLearn how you can use Edge Middleware, code that executes before a request is processed on a site, to provide speed and personalization to your users.\n\nVercel offers built-in image optimization capabilities that can help you serve high-quality images with minimal impact on page load times.\n\nLearn how Vercel's Incremental Static Regeneration (ISR) provides better performance and faster builds.\n\nLearn about caching on Vercel's Edge Network.\n\nLearn how to use Data Caching to cache static data.\n\nCron jobs are time-based scheduling tools used to automate repetitive tasks. When a cron job is triggered through the cron expression, it calls a Vercel Function.",
    "title": "Infrastructure",
    "description": "Vercel's infrastructure scales as needed, depending on the demand from your users.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/BODY_NOT_A_STRING_FROM_FUNCTION",
    "markdown": "# BODY\\_NOT\\_A\\_STRING\\_FROM\\_FUNCTION\n\nThe `BODY_NOT_A_STRING_FROM_FUNCTION` error occurs when a function returns a body that is not a string. It's essential that functions return a string body to ensure that they can be correctly processed and executed.",
    "title": "BODY_NOT_A_STRING_FROM_FUNCTION",
    "description": "The function returned a non-string body. This is a function error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/edge-network/frequently-asked-questions",
    "markdown": "# Edge Network Frequently Asked Questions (FAQ)\n\nStatic files are cached by all regions for up to 31 days. You can override this duration by setting a `Cache-Control` header in the [headers](https://vercel.com/docs/projects/project-configuration#headers) property in a `vercel.json` file.\n\nDynamic responses (from Serverless Functions) are not cached unless they contain a `Cache-Control` header with specific directives (e.g. `s-maxage`).\n\nYou can read more about file caching in the [cache documentation](https://vercel.com/docs/edge-network/caching).\n\nYou can control how the Vercel Edge Network caches your responses by setting a `Cache-Control` header.\n\nThe transition is painless. All you have to do is configure DNS records to our [DNS infrastructure](https://vercel.com/docs/projects/domains/add-a-domain#configure-the-domain).\n\nYou can create a new deployment to invalidate the cache for your [Preview](https://vercel.com/docs/deployments/preview-deployments) and [Production](https://vercel.com/docs/deployments/environments#production) Deployments. Content will remain cached for preview URLs until it expires.\n\nYou can read more about our caching limits in the [caching documentation](https://vercel.com/docs/edge-network/caching#limits).\n\nUsing the `vercel dev` [command](https://vercel.com/docs/cli/dev) through [Vercel CLI](https://vercel.com/docs/cli) will allow you to run your applications with additional Vercel Edge Network logic.\n\nUsing `vercel dev` is not necessary with Next.js applications — the Vercel Edge Network logic is already built-in with the `next dev` command.\n\nThe first request is served synchronously. Subsequent requests are served from the cache and revalidated asynchronously if the cache is \"stale\".\n\nYou can read more about this in the [`stale-while-revalidate` documentation](https://vercel.com/docs/edge-network/headers#stale-while-revalidate).\n\n`s-maxage` is the number of seconds a response is considered \"fresh\" by the Vercel Edge Network. After this period ends, the Vercel Edge Network will serve the \"stale\" response from the edge until the response is asynchronously revalidated with a \"fresh\" response to your Serverless Function.\n\nWe strip the `stale-while-revalidate` directive from your `Cache-Control` so browsers do not get it. This will allow you to deliver the latest content to your visitors right after creating a new deployment (as opposed to waiting for browser cache to expire).\n\nYou can find the full list of our regions in the [regions documentation](https://vercel.com/docs/edge-network/regions).\n\nUsers who visit your deployments will automatically use the region that is geographically closest to them.\n\nServerless Functions execute in the default region (`iad1`), unless you [change this](https://vercel.com/docs/functions/configuring-functions/region#setting-your-default-region). Edge Functions execute in the region closest to your user, unless you [specify a different region](https://vercel.com/docs/functions/configuring-functions/region#setting-regions-in-your-function). You can see the functions's region by selecting the Functions tab and choosing the function from the drop-down.\n\nTo learn about the region your deployment is built in, you can view the [build logs](https://vercel.com/docs/deployments/logs). See [Builds](https://vercel.com/docs/deployments/builds) to learn more about the build process.\n\n[Vercel mitigates against L3 and L4 DDoS attacks](https://vercel.com/docs/security/ddos-mitigation#open-system-interconnection-osi-model) at the platform level. Usage will be incurred for requests that are successfully served prior to us automatically mitigating the event. Mitigation usually takes place within one minute.\n\nUsage will be incurred for requests that are not recognized as a DDoS event, such as bot and crawler traffic.\n\nYou should [monitor your usage](https://vercel.com/docs/observability) and utilize [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) to protect against undesired traffic based on its IP, `User-Agent` header value, or other identifiers.\n\nYes, Vercel supports [Image Optimization](https://vercel.com/docs/image-optimization) integrated into frameworks like Next.js and Nuxt with zero configuration.\n\nYou will need to use `Origin Control: Off` along with other custom caching rules in Cloudflare. You will also need to set `s-maxage` to `0` with the [headers](https://vercel.com/docs/projects/project-configuration#headers) property in a `vercel.json` file to disable any caching from the Vercel Edge Network.\n\nWhen you create a new deployment, you will have to find a way to purge Cloudflare's cache.",
    "title": "Edge Network Frequently Asked Questions (FAQ)",
    "description": "A list of frequently asked questions and answers related to the Vercel Edge Network.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/EDGE_FUNCTION_INVOCATION_FAILED",
    "markdown": "# EDGE\\_FUNCTION\\_INVOCATION\\_FAILED\n\nThe `EDGE_FUNCTION_INVOCATION_FAILED` error occurs when there is an issue with the Edge Function being invoked on the Edge Network. This error can be caused by a variety of issues, including unhandled exceptions, timeouts, or malformed requests.\n\n500\n\n`EDGE_FUNCTION_INVOCATION_FAILED`\n\nInternal Server Error\n\nTo troubleshoot this error, follow these steps:\n\n1.  Check application logs: Review the application logs to identify any specific errors related to the Edge Function being invoked. They can be found at the host URL under [the `/_logs` path](https://vercel.com/docs/deployments/build-features#logs-view)\n2.  Review deployment configuration: Double-check the deployment configuration to ensure that the Edge Function is being deployed correctly\n3.  Investigate build errors: If the error occurs during the build process, troubleshoot any build errors that might be preventing the necessary resources from being deployed.\n4.  Check function code: Ensure that the code for the Edge Function is correct and does not contain any errors or infinite loops\n5.  Use Vercel's status page: If you have tried the steps above and are still experiencing the error, check Vercel's [status page](https://www.vercel-status.com/) for any reported outages in the Edge Network, which can sometimes cause this error",
    "title": "EDGE_FUNCTION_INVOCATION_FAILED",
    "description": "The request for a Edge Function was not completed successfully. This is an application error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_CACHE_KEY_TOO_LONG",
    "markdown": "# INTERNAL\\_CACHE\\_KEY\\_TOO\\_LONG\n\nThe `INTERNAL_CACHE_KEY_TOO_LONG` error occurs when the Edge Network is unable to fetch from the internal cache due to a cache key being too long. This error can be caused by a request URL that is too long.",
    "title": "INTERNAL_CACHE_KEY_TOO_LONG",
    "description": "The Edge Network is failing to fetch from the internal cache due to a cache key being too long. This error can be caused by a request URL that is too long.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_CACHE_ERROR",
    "markdown": "# INTERNAL\\_CACHE\\_ERROR\n\nThe `INTERNAL_CACHE_ERROR` error occurs during an unexpected issue in the Edge Network while retrieving data from the Vercel cache.",
    "title": "INTERNAL_CACHE_ERROR",
    "description": "An unexpected error happened when Edge Network is fetching data from the Vercel cache.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_EDGE_FUNCTION_INVOCATION_FAILED",
    "markdown": "# INTERNAL\\_EDGE\\_FUNCTION\\_INVOCATION\\_FAILED\n\nThe `INTERNAL_EDGE_FUNCTION_INVOCATION_FAILED` error occurs when there is an issue with the Edge Function being invoked on the Edge Network. This error can be caused by a variety of internal issues.\n\nWhile this error can be caused by a variety of issues, it's transient and retrying the request will succeed. If the error persists, [contact support](https://vercel.com/help) along with the request ID on the error page.",
    "title": "INTERNAL_EDGE_FUNCTION_INVOCATION_FAILED",
    "description": "The request for a Edge Function was not completed successfully due to an internal error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_EDGE_FUNCTION_INVOCATION_TIMEOUT",
    "markdown": "# INTERNAL\\_EDGE\\_FUNCTION\\_INVOCATION\\_TIMEOUT\n\nThe `INTERNAL_EDGE_FUNCTION_INVOCATION_TIMEOUT` error occurs when an Edge Function takes longer than the allowed execution time to complete. This can be caused by long-running processes within the function or external dependencies that fail to respond in a timely manner.",
    "title": "INTERNAL_EDGE_FUNCTION_INVOCATION_TIMEOUT",
    "description": "The Edge Function invocation timed out unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_CACHE_LOCK_FULL",
    "markdown": "# INTERNAL\\_CACHE\\_LOCK\\_FULL\n\nThe `INTERNAL_CACHE_LOCK_FULL` error occurs when Edge Network is accessing internal cache. This error is usually caused by a temporary issue with the internal cache.",
    "title": "INTERNAL_CACHE_LOCK_FULL",
    "description": "An unexpected error happened when Edge Network is accessing internal cache.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_CACHE_LOCK_TIMEOUT",
    "markdown": "# INTERNAL\\_CACHE\\_LOCK\\_TIMEOUT\n\nThe `INTERNAL_CACHE_LOCK_TIMEOUT` error occurs when Edge Network is accessing internal cache.\n\n[\n\n### Not what you were looking for?\n\nTry filtering the errors by tag, code, or name on the Error Codes page.\n\n\n\n](https://vercel.com/docs/errors)",
    "title": "INTERNAL_CACHE_LOCK_TIMEOUT",
    "description": "An unexpected error happened when Edge Network is accessing internal cache.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FUNCTION_INVOCATION_FAILED",
    "markdown": "# FUNCTION\\_INVOCATION\\_FAILED\n\nThe `FUNCTION_INVOCATION_FAILED` error occurs when a function invocation fails. This could be due to an error within the function itself, or an issue with the environment in which the function is running.",
    "title": "FUNCTION_INVOCATION_FAILED",
    "description": "The invocation of a function failed. This is a function error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FUNCTION_PAYLOAD_TOO_LARGE",
    "markdown": "# FUNCTION\\_PAYLOAD\\_TOO\\_LARGE\n\nThe `FUNCTION_PAYLOAD_TOO_LARGE` error occurs when the payload sent to a function exceeds the maximum allowed size. This typically happens when the data sent in the request body to a serverless function is larger than the server can process.",
    "title": "FUNCTION_PAYLOAD_TOO_LARGE",
    "description": "The payload sent to the function is too large. This is a function error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_MISSING_RESPONSE_FROM_CACHE",
    "markdown": "# INTERNAL\\_MISSING\\_RESPONSE\\_FROM\\_CACHE\n\nThe `INTERNAL_MISSING_RESPONSE_FROM_CACHE` error occurs when an unexpected error happened during the Edge Network accessing the internal cache.",
    "title": "INTERNAL_MISSING_RESPONSE_FROM_CACHE",
    "description": "This error indicates a missing response from the cache during a deployment or build process.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FUNCTION_INVOCATION_TIMEOUT",
    "markdown": "# FUNCTION\\_INVOCATION\\_TIMEOUT\n\nThe `FUNCTION_INVOCATION_TIMEOUT` error occurs when a function invocation takes longer than the [allowed execution time](https://vercel.com/docs/functions/runtimes#max-duration). This could be due to an error within the function itself, a slow network call, or an issue with the environment in which the function is running.\n\n504\n\n`FUNCTION_INVOCATION_TIMEOUT`\n\nGateway Timeout\n\nTo troubleshoot this error, follow these steps:\n\n1.  The function is taking too long to process a request: Check that any API, or database requests you make in your function, are responding within the [Serverless Function maximum duration](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) limit applicable to your plan\n    *   You can configure the maximum duration by using the `maxDuration` property. See the [maxDuration](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) section for more information\n    *   If you require a longer execution, [Edge Functions](https://vercel.com/docs/functions/edge-functions) provide an alternative that only require an [initial response](https://vercel.com/docs/functions/runtimes#max-duration) within 25 seconds and allow you to [continue streaming responses](https://vercel.com/docs/functions/streaming) after that time\n2.  The function isn't returning a response: The function must return an HTTP response, even if that response is an error. If no response is returned, the function will time out\n3.  You have an infinite loop within your function: Check that your function is not making an infinite loop at any stage of execution\n4.  Upstream errors: Check that any external API or database that you are attempting to call doesn't have any errors\n5.  A common cause for this issue is when the application contains an unhandled exception. Check the application logs, which can be found at the host URL under [the `/_logs` path](https://vercel.com/docs/deployments/build-features#logs-view), for example:\n\n```\nhttps://my-deployment-my-username.vercel.app/_logs\n```\n\nFor more information on Serverless Functions timeouts, see [What can I do about Vercel Serverless Functions timing out?](https://vercel.com/guides/what-can-i-do-about-vercel-serverless-functions-timing-out)",
    "title": "FUNCTION_INVOCATION_TIMEOUT",
    "description": "The request for a Serverless Function reached the timeout threshold. This is an application error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FUNCTION_RESPONSE_PAYLOAD_TOO_LARGE",
    "markdown": "# FUNCTION\\_RESPONSE\\_PAYLOAD\\_TOO\\_LARGE\n\nThe `FUNCTION_RESPONSE_PAYLOAD_TOO_LARGE` error occurs when the function returned a response that exceeds the maximum allowed size of 4.5 MB.",
    "title": "FUNCTION_RESPONSE_PAYLOAD_TOO_LARGE",
    "description": "The function returned a response that is too large. This is a function error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_FUNCTION_INVOCATION_TIMEOUT",
    "markdown": "# INTERNAL\\_FUNCTION\\_INVOCATION\\_TIMEOUT\n\nThe `INTERNAL_FUNCTION_INVOCATION_TIMEOUT` error occurs when a function invocation takes longer than the allowed execution time. This could be due to an error within the function itself, a slow network call, or an issue with the environment in which the function is running.\n\n504\n\n`INTERNAL_FUNCTION_INVOCATION_TIMEOUT`\n\nGateway Timeout\n\nTo troubleshoot this error, follow these steps:\n\n1.  The function is taking too long to process a request: Check that any API, or database requests you make in your function, are responding within the [Serverless Function maximum duration](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) limit applicable to your plan\n    *   You can configure the maximum duration by using the `maxDuration` property. See the [maxDuration](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) section for more information\n    *   If you require a longer execution, [Edge Functions](https://vercel.com/docs/functions/edge-functions) provide an alternative that only require an [initial response](https://vercel.com/docs/functions/runtimes#max-duration) within 25 seconds and allow you to [continue streaming responses](https://vercel.com/docs/functions/streaming) after that time\n2.  The function isn't returning a response: The function must return an HTTP response, even if that response is an error. If no response is returned, the function will time out\n3.  You have an infinite loop within your function: Check that your function is not making an infinite loop at any stage of execution\n4.  Upstream errors: Check that any external API or database that you are attempting to call doesn't have any errors\n5.  A common cause for this issue is when the application contains an unhandled exception. Check the application logs, which can be found at the host URL under [the `/_logs` path](https://vercel.com/docs/deployments/build-features#logs-view), for example:\n\n```\nhttps://my-deployment-my-username.vercel.app/_logs\n```\n\nFor more information on Serverless Functions timeouts, see [What can I do about Vercel Serverless Functions timing out?](https://vercel.com/guides/what-can-i-do-about-vercel-serverless-functions-timing-out)",
    "title": "INTERNAL_FUNCTION_INVOCATION_TIMEOUT",
    "description": "The internal invocation of a function timed out. This is Vercel's error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_FUNCTION_INVOCATION_FAILED",
    "markdown": "# INTERNAL\\_FUNCTION\\_INVOCATION\\_FAILED\n\nThe `INTERNAL_FUNCTION_INVOCATION_FAILED` error occurs when a function invocation fails. This could be due to an error within the function itself, or an issue with the environment in which the function is running.",
    "title": "INTERNAL_FUNCTION_INVOCATION_FAILED",
    "description": "The internal invocation of a function failed. This is Vercel's error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/EDGE_FUNCTION_INVOCATION_TIMEOUT",
    "markdown": "# EDGE\\_FUNCTION\\_INVOCATION\\_TIMEOUT\n\nThe `EDGE_FUNCTION_INVOCATION_TIMEOUT` error occurs when an Edge Function takes longer than the allowed execution time to complete or doesn't send a response chunk for a certain amount of time. This can be caused by long-running processes within the function or external dependencies that fail to respond in a timely manner.\n\nIf your backend API takes time to respond, we recommend [streaming the response](https://vercel.com/docs/functions/streaming/streaming-examples) to avoid the idle timeout.\n\n504\n\n`EDGE_FUNCTION_INVOCATION_TIMEOUT`\n\nGateway Timeout\n\nTo troubleshoot this error, follow these steps:\n\n1.  Check application logs: Review the application logs to identify any specific errors related to the Edge Function being invoked. They can be found at the host URL under [the `/_logs` path](https://vercel.com/docs/deployments/build-features#logs-view)\n2.  Review function code: Inspect the Edge Function code for any long-running operations or infinite loops that could cause a timeout\n3.  Verify return value: Ensure the function returns a response within the specified time limit of [25 seconds](https://vercel.com/docs/functions/runtimes#max-duration)\n4.  Optimize external calls: If the function makes calls to external services or APIs, ensure they are optimized and responding quickly\n5.  Consider streaming data: If the function is processing large amounts of data, consider using a [streaming approach](https://vercel.com/docs/functions/streaming) to avoid timeouts\n6.  Implement error handling: Add error handling in the function to manage timeouts and other exceptions effectively",
    "title": "EDGE_FUNCTION_INVOCATION_TIMEOUT",
    "description": "The Edge Function invocation timed out. This is an application error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FUNCTION_RATE_LIMIT",
    "markdown": "# FUNCTION\\_RATE\\_LIMIT\n\nThe `FUNCTION_RATE_LIMIT` error occurs when the limit of concurrent executions for Serverless Functions has been reached, and the request triggers a new instance of the function, which results in two concurrent functions running at the same time. For more information see [What should I do if I receive a 429 error on Vercel?](https://vercel.com/guides/what-should-i-do-if-i-receive-a-429-error-on-vercel)",
    "title": "FUNCTION_RATE_LIMIT",
    "description": "The function you are trying to call has exceeded the rate limit.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DNS_HOSTNAME_NOT_FOUND",
    "markdown": "# DNS\\_HOSTNAME\\_NOT\\_FOUND\n\nThe `DNS_HOSTNAME_NOT_FOUND` error occurs when there's an `NXDOMAIN` error during the DNS resolution while attempting to connect to a private IP from an external rewrite. This error indicates that the domain being requested does not exist.",
    "title": "DNS_HOSTNAME_NOT_FOUND",
    "description": "The domain does not exist, resulting in an NXDOMAIN error during DNS resolution. This is a DNS error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DNS_HOSTNAME_RESOLVE_FAILED",
    "markdown": "# DNS\\_HOSTNAME\\_RESOLVE\\_FAILED\n\nThe `DNS_HOSTNAME_RESOLVE_FAILED` error occurs when attempting to connect to a private IP from an external rewrite. Although there's no error with the DNS resolution, no IP address is returned. This could be due to an issue with the domain name being queried, corrupted or malformed DNS responses, or network issues.\n\n502\n\n`DNS_HOSTNAME_RESOLVE_FAILED`\n\nBad Gateway\n\nTo troubleshoot this error, follow these steps:\n\n1.  Check the domain name: Ensure that the [domain name](https://vercel.com/docs/projects/domains/view-and-search-domains) you are trying to resolve is spelled correctly and is a valid domain. Typos or incorrect domain names can lead to DNS lookup failures\n2.  Check DNS configuration: Verify the [configuration](https://vercel.com/docs/projects/domains/working-with-dns) of the DNS server and ensure it is set up correctly\n3.  Firewall and security software: Check if any firewall or security software on your system is blocking DNS requests. Ensure that the DNS queries are allowed through your firewall\n4.  Inspect network connectivity: Ensure that there are no network issues that could be affecting the DNS resolution",
    "title": "DNS_HOSTNAME_RESOLVE_FAILED",
    "description": "No error with the DNS resolution but no IP was returned. This is a DNS error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/NO_RESPONSE_FROM_FUNCTION",
    "markdown": "# NO\\_RESPONSE\\_FROM\\_FUNCTION\n\nThe `NO_RESPONSE_FROM_FUNCTION` error occurs when a function invocation completes without returning a response. This might happen if the function encounters an error that prevents it from responding, or if it fails to generate a response within the allowed execution time.\n\nPotential causes include:\n\n*   A global uncaught exception\n*   A global unhandled rejection\n*   A deployment that introduced incorrect syntax\n\n502\n\n`NO_RESPONSE_FROM_FUNCTION`\n\nBad Gateway\n\nTo troubleshoot this error, follow these steps:\n\n1.  Verify return statements: Ensure that the function has the necessary return statements to generate a response\n2.  Check the function logs: Open the [realtime request logs](https://vercel.com/guides/where-are-vercel-logs#function-logs) for the application in a separate tab - this tab must be kept open while reproducing the error\n3.  Review realtime logs: Repeat the application behavior that led to the error being thrown and review the realtime request logs where it will now show\n    *   Use the information contained within the error logs to understand where the function is failing\n4.  Use log drains: If you're yet to implement a [Log Drain](https://vercel.com/docs/observability/log-drains), you can create one to persist errors from Serverless Functions\n5.  Check external dependencies: If the function relies on external services or APIs, ensure they are responding in a timely manner",
    "title": "NO_RESPONSE_FROM_FUNCTION",
    "description": "The application did not respond correctly, this is likely due to an exception being thrown from the function handler.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_FUNCTION_NOT_READY",
    "markdown": "# INTERNAL\\_FUNCTION\\_NOT\\_READY\n\nThe `INTERNAL_FUNCTION_NOT_READY` error occurs when an attempt is made to invoke a function before it is ready to accept requests. This might happen if the function is still being deployed, initialized, or if there is a misconfiguration preventing the function from becoming ready.\n\n500\n\n`INTERNAL_FUNCTION_NOT_READY`\n\nInternal Server Error\n\nTo troubleshoot this error, follow these steps:\n\n1.  Verify deployment status: Ensure that the function has been successfully deployed and the deployment process has completed\n2.  Check initialization logs: Review the function's initialization logs to identify any errors or warnings that might indicate why the function is not ready\n3.  Review configuration: Ensure that the function and environment configurations are correct and that there are no misconfigurations preventing the function from becoming ready\n4.  Check dependencies: Verify that all dependencies required by the function are available and correctly configured",
    "title": "INTERNAL_FUNCTION_NOT_READY",
    "description": "The internal function is not ready to be invoked. This is a Vercel error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DNS_HOSTNAME_RESOLVED_PRIVATE",
    "markdown": "# DNS\\_HOSTNAME\\_RESOLVED\\_PRIVATE\n\nThe `DNS_HOSTNAME_RESOLVED_PRIVATE` error occurs when attempting to connect to a private IP from an external rewrite, or when trying to connect to an IPv6 address. The error indicates that the DNS hostname resolved to a private or inaccessible IP address.",
    "title": "DNS_HOSTNAME_RESOLVED_PRIVATE",
    "description": "The DNS hostname resolved to a private IP address or an IPv6 address during an external rewrite. This is a DNS error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_FUNCTION_NOT_FOUND",
    "markdown": "# INTERNAL\\_FUNCTION\\_NOT\\_FOUND\n\nThe `INTERNAL_FUNCTION_NOT_FOUND` error occurs when an attempt to invoke a function fails because the function could not be found. This could happen if the function was not properly deployed, or if there is a misconfiguration in the function's settings or environment.",
    "title": "INTERNAL_FUNCTION_NOT_FOUND",
    "description": "The internal function could not be found. This is a Vercel's error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DEPLOYMENT_BLOCKED",
    "markdown": "# DEPLOYMENT\\_BLOCKED\n\nThe `DEPLOYMENT_BLOCKED` error occurs when a deployment is blocked due to certain conditions that prevent it from proceeding. This could happen due to various reasons such as configuration errors, account limitations, or policy violations.",
    "title": "DEPLOYMENT_BLOCKED",
    "description": "The deployment was blocked due to certain conditions. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DEPLOYMENT_DISABLED",
    "markdown": "# DEPLOYMENT\\_DISABLED\n\nThe `DEPLOYMENT_DISABLED` error occurs when a deployment is disabled due to certain conditions or configurations. This might happen if there's a manual intervention required, or a specific condition is met that triggers the disabling of the deployment.",
    "title": "DEPLOYMENT_DISABLED",
    "description": "The deployment is disabled. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DNS_HOSTNAME_SERVER_ERROR",
    "markdown": "# DNS\\_HOSTNAME\\_SERVER\\_ERROR\n\nThe `DNS_HOSTNAME_SERVER_ERROR` error occurs when attempting to connect to a private IP from an external rewrite. This error typically means that the DNS server was unable to fulfill the DNS request due to an internal issue or misconfiguration.",
    "title": "DNS_HOSTNAME_SERVER_ERROR",
    "description": "The DNS server was unable to fulfill the DNS request due to an internal issue or misconfiguration. This is a DNS error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DEPLOYMENT_NOT_FOUND",
    "markdown": "# DEPLOYMENT\\_NOT\\_FOUND\n\nThe `DEPLOYMENT_NOT_FOUND` error occurs when a request is made for a deployment that doesn't exist. This could happen if the deployment ID or URL is incorrect, or if the deployment has been deleted.",
    "title": "DEPLOYMENT_NOT_FOUND",
    "description": "The deployment was not found. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/TOO_MANY_FORKS",
    "markdown": "# TOO\\_MANY\\_FORKS\n\nThe `TOO_MANY_FORKS` error occurs when too many forks are generated while processing the request. This usually happens when matching too many conditional routes, which could lead to a loop or excessive resource usage.\n\nYou cannot have more than 5 `has` routes matched on a single path.",
    "title": "TOO_MANY_FORKS",
    "description": "An error occurred in the application when matching too many conditional routes. You cannot have more than 5 `has` routes matched on a single path.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DEPLOYMENT_NOT_READY_REDIRECTING",
    "markdown": "# DEPLOYMENT\\_NOT\\_READY\\_REDIRECTING\n\nThe `DEPLOYMENT_NOT_READY_REDIRECTING` error occurs when the requested deployment is not yet ready, and the request is redirected to the deployment status page.",
    "title": "DEPLOYMENT_NOT_READY_REDIRECTING",
    "description": "The deployment is not ready and is redirecting to another location. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/NOT_FOUND",
    "markdown": "# NOT\\_FOUND\n\nThe `NOT_FOUND` error occurs when a requested resource could not be found. This might happen if the resource has been moved, deleted, or if there is a typo in the URL.",
    "title": "NOT_FOUND",
    "description": "The requested resource was not found. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/TOO_MANY_FILESYSTEM_CHECKS",
    "markdown": "# TOO\\_MANY\\_FILESYSTEM\\_CHECKS\n\nThe `TOO_MANY_FILESYSTEM_CHECKS` error occurs when there are excessive filesystem checks while processing a request. This could happen during the routing process, especially when using rewrites, redirects, or any other configuration that requires checking the filesystem repeatedly.",
    "title": "TOO_MANY_FILESYSTEM_CHECKS",
    "description": "Too many filesystem checks occurred while processing the request. This is a routing error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/ROUTER_CANNOT_MATCH",
    "markdown": "# ROUTER\\_CANNOT\\_MATCH\n\nThe `ROUTER_CANNOT_MATCH` error occurs when the router is unable to match the requested route to any of the known patterns. This could happen due to a misconfiguration in the routing setup or an erroneous request path.",
    "title": "ROUTER_CANNOT_MATCH",
    "description": "The router cannot match the route to any of the known patterns. This is a routing error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_DEPLOYMENT_FETCH_FAILED",
    "markdown": "# INTERNAL\\_DEPLOYMENT\\_FETCH\\_FAILED\n\nThe `INTERNAL_DEPLOYMENT_FETCH_FAILED` error occurs when the system is unable to fetch the deployment. This could happen due to network issues, misconfigurations, or other internal errors that prevent the deployment data from being retrieved.",
    "title": "INTERNAL_DEPLOYMENT_FETCH_FAILED",
    "description": "Failed to fetch the internal deployment. This is a deployment error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_UNARCHIVE_FAILED",
    "markdown": "# INTERNAL\\_UNARCHIVE\\_FAILED\n\nThe `INTERNAL_UNARCHIVE_FAILED` error typically occurs when the platform encounters a problem trying to extract your deployment's archive. This issue often can be related to one of the following:",
    "title": "INTERNAL_UNARCHIVE_FAILED",
    "description": "Unarchiving of the deployment or resource failed. This is an internal error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_ROUTER_CANNOT_PARSE_PATH",
    "markdown": "# INTERNAL\\_ROUTER\\_CANNOT\\_PARSE\\_PATH\n\nThe `INTERNAL_ROUTER_CANNOT_PARSE_PATH` error occurs when the Edge Network has failed to parse application-specified URL, such as rewrite/redirection URLs.",
    "title": "INTERNAL_ROUTER_CANNOT_PARSE_PATH",
    "description": "The Edge Network has failed to parse application-specified URL, such as rewrite/redirection URLs.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/ROUTER_EXTERNAL_TARGET_CONNECTION_ERROR",
    "markdown": "# ROUTER\\_EXTERNAL\\_TARGET\\_CONNECTION\\_ERROR\n\nThe `ROUTER_EXTERNAL_TARGET_CONNECTION_ERROR` error occurs when there is a connection error while routing to an external target. This could happen due to network issues, incorrect routing configuration, or the external target being unreachable.\n\n502\n\n`ROUTER_EXTERNAL_TARGET_CONNECTION_ERROR`\n\nBad Gateway\n\nTo troubleshoot this error, follow these steps:\n\n1.  Check network connectivity: Ensure that the network connectivity between your deployment and the external target is stable\n2.  Verify external target availability: Make sure the external target is online and reachable\n3.  Review routing configuration: Check the [routing configuration](https://vercel.com/docs/edge-network/redirects#configuration-redirects) to ensure that it is correctly set up to route to the external target\n4.  Inspect firewall settings: Verify that there are no firewall settings blocking the connection to the external target\n5.  Review application logs: Inspect the [application logs](https://vercel.com/docs/deployments/logs) for any warnings or errors related to routing or network connectivity",
    "title": "ROUTER_EXTERNAL_TARGET_CONNECTION_ERROR",
    "description": "Connection error occurred while routing to an external target. This is a routing error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/ROUTER_EXTERNAL_TARGET_ERROR",
    "markdown": "# ROUTER\\_EXTERNAL\\_TARGET\\_ERROR\n\nThe `ROUTER_EXTERNAL_TARGET_ERROR` error occurs when there is an error while routing to an external target. This could happen due to incorrect routing configuration, an erroneous response from the external target, or other issues affecting the routing process.\n\n502\n\n`ROUTER_EXTERNAL_TARGET_ERROR`\n\nBad Gateway\n\nTo troubleshoot this error, follow these steps:\n\n1.  Review routing configuration: Check the [routing configuration](https://vercel.com/docs/edge-network/redirects#configuration-redirects) to ensure that it is correctly set up to route to the external target\n2.  Verify external target availability: Make sure the external target is online and reachable\n3.  Check for errors in external target: Investigate the external target for any errors that might be causing the routing issue\n4.  Inspect firewall settings: Verify that there are no firewall settings blocking the connection to the external target\n5.  Review application logs: Inspect the [application logs](https://vercel.com/docs/deployments/logs) for any warnings or errors related to routing or the external target",
    "title": "ROUTER_EXTERNAL_TARGET_ERROR",
    "description": "Error occurred while routing to an external target. This is a routing error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/ROUTER_EXTERNAL_TARGET_HANDSHAKE_ERROR",
    "markdown": "# ROUTER\\_EXTERNAL\\_TARGET\\_HANDSHAKE\\_ERROR\n\nThe `ROUTER_EXTERNAL_TARGET_HANDSHAKE_ERROR` error occurs when a connection cannot be successfully established with an external target. This error may result from issues during the SSL handshake process or due to a timeout, and is often attributed to one of the following causes:",
    "title": "ROUTER_EXTERNAL_TARGET_HANDSHAKE_ERROR",
    "description": "Error in establishing a connection with an external target.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_UNEXPECTED_ERROR",
    "markdown": "# INTERNAL\\_UNEXPECTED\\_ERROR\n\nThe `INTERNAL_UNEXPECTED_ERROR` error occurs when an unexpected and unspecified internal error happens within the system. This type of error can be due to a variety of reasons, including system faults, unhandled exceptions, or unforeseen issues in the application.",
    "title": "INTERNAL_UNEXPECTED_ERROR",
    "description": "An unexpected internal error occurred. This is a general internal error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INFINITE_LOOP_DETECTED",
    "markdown": "# INFINITE\\_LOOP\\_DETECTED\n\nThe `INFINITE_LOOP_DETECTED` error occurs when an infinite loop is detected within the application. This error can occur when the application is making an infinite number of requests to itself, or when the application is making an infinite number of requests to an external API or database.",
    "title": "INFINITE_LOOP_DETECTED",
    "description": "An infinite loop was detected within the application.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/MALFORMED_REQUEST_HEADER",
    "markdown": "# MALFORMED\\_REQUEST\\_HEADER\n\nThe `MALFORMED_REQUEST_HEADER` error signifies that a request made to the server includes a header that is incorrectly formatted or contains invalid data. This could be due to syntax errors, incorrect header field names, or incompatible header values.",
    "title": "MALFORMED_REQUEST_HEADER",
    "description": "The MALFORMED_REQUEST_HEADER error occurs when a request contains an improperly formatted or invalid header. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/DNS_HOSTNAME_EMPTY",
    "markdown": "# DNS\\_HOSTNAME\\_EMPTY\n\nThe `DNS_HOSTNAME_EMPTY` error occurs when an empty DNS record is received as part of the DNS response while attempting to connect to a private IP from an external rewrite.",
    "title": "DNS_HOSTNAME_EMPTY",
    "description": "An empty DNS record was received as part of the DNS response. This is a DNS error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INVALID_REQUEST_METHOD",
    "markdown": "# INVALID\\_REQUEST\\_METHOD\n\nThe `INVALID_REQUEST_METHOD` error occurs when a request is made with a method that is either invalid or not supported by the server. This error typically happens when trying to use an HTTP method that the endpoint does not accept or recognize.",
    "title": "INVALID_REQUEST_METHOD",
    "description": "The request method used is invalid or not supported. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/ROUTER_TOO_MANY_HAS_SELECTIONS",
    "markdown": "# ROUTER\\_TOO\\_MANY\\_HAS\\_SELECTIONS\n\nThe `ROUTER_TOO_MANY_HAS_SELECTIONS` error occurs when the router encounters too many selections while processing the request. This could happen due to misconfiguration or a complex routing setup that exceeds the router's capabilities.",
    "title": "ROUTER_TOO_MANY_HAS_SELECTIONS",
    "description": "The router has too many selections. This is a routing error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/REQUEST_HEADER_TOO_LARGE",
    "markdown": "# REQUEST\\_HEADER\\_TOO\\_LARGE\n\nThe `REQUEST_HEADER_TOO_LARGE` error occurs when the size of the request headers in Edge Functions and [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) exceeds the allowed limits. Specifically, individual request headers must not exceed 16 KB, and the combined size of all headers, including the header names, must not exceed 32 KB.\n\nThis issue often arises from excessively large headers in a request. On Vercel, applications may have custom headers, which, if overly large, can trigger this error during server request processing.\n\nTo troubleshoot this error, follow these steps:\n\n1.  Limit header size: Ensure that the size of each request header does not exceed 16 KB\n2.  Manage total header size: Monitor and control the combined size of all headers, keeping it under 32 KB\n3.  Review cookies: Since cookies are included in the header, it's crucial to limit their size as part of the overall header size",
    "title": "REQUEST_HEADER_TOO_LARGE",
    "description": "Request header size exceeds the permissible limit.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RANGE_END_NOT_VALID",
    "markdown": "# RANGE\\_END\\_NOT\\_VALID\n\nThe `RANGE_END_NOT_VALID` error occurs when the end value of the `Range` header in a request is invalid. This header is used to request a specific portion of a resource from the server, which is useful for operations like resuming downloads or streaming media.",
    "title": "RANGE_END_NOT_VALID",
    "description": "The end value of the Range header in the request is invalid. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RANGE_MISSING_UNIT",
    "markdown": "# RANGE\\_MISSING\\_UNIT\n\nThe `RANGE_MISSING_UNIT` error occurs when the unit identifier of the `Range` header in a request is missing. The `Range` header is used to request a specific portion of a resource from the server, and the unit identifier indicates the unit in which the range is specified, such as bytes.\n\n416\n\n`RANGE_MISSING_UNIT`\n\nRequested Range Not Satisfiable\n\nTo troubleshoot this error, follow these steps:\n\n1.  Specify unit identifier: Ensure that the `Range` header in your request specifies a unit identifier like `bytes`\n2.  Check configuration: If the `Range` header values are being set automatically by some part of your system, check the configuration to ensure the unit identifier is being included\n3.  Verify syntax: Verify that the syntax of the `Range` header is correct and follows the format `unit=range-start-range-end`, for example, `bytes=0-999`\n4.  Debugging: If the error persists, log the `Range` header values in your server logs to debug and understand what values are being sent in requests",
    "title": "RANGE_MISSING_UNIT",
    "description": "The unit identifier of the Range header in the request is missing. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RANGE_GROUP_NOT_VALID",
    "markdown": "# RANGE\\_GROUP\\_NOT\\_VALID\n\nThe `RANGE_GROUP_NOT_VALID` error occurs when the group value of the `Range` header in a request is invalid. This header is used to request a specific portion of a resource from the server, and the group value can be used to specify multiple ranges or a set of subranges.",
    "title": "RANGE_GROUP_NOT_VALID",
    "description": "The group value of the Range header in the request is invalid. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INTERNAL_STATIC_REQUEST_FAILED",
    "markdown": "# INTERNAL\\_STATIC\\_REQUEST\\_FAILED\n\nThe `INTERNAL_STATIC_REQUEST_FAILED` error is encountered when a request for a static file within the project cannot be completed. This can happen due to issues with the existence, deployment, or path of the static files.",
    "title": "INTERNAL_STATIC_REQUEST_FAILED",
    "description": "This error occurs when a request for a static file in a project fails.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RESOURCE_NOT_FOUND",
    "markdown": "# RESOURCE\\_NOT\\_FOUND\n\nThe `RESOURCE_NOT_FOUND` error indicates that a requested resource is not available or cannot be found. This error typically arises when a request is made for a resource that either does not exist or is currently inaccessible.\n\n404\n\n`RESOURCE_NOT_FOUND`\n\nNot Found\n\nTo troubleshoot this error, follow these steps:\n\n1.  Verify resource existence: Confirm that the resource you're attempting to access exists. Check for any typos or errors in the resource name or path\n2.  Review access permissions: Ensure that your application or function has the necessary permissions to access the resource\n3.  Inspect resource path: Double-check the path or URL to the resource. Ensure it is correctly formatted and corresponds to the intended resource\n4.  Check application configuration: Review your application's configuration settings to ensure they are correctly set up to locate and access the resource\n5.  Review logs: Consult your [application logs](https://vercel.com/docs/observability/runtime-logs) for more details or clues as to why the resource could not be found. This can provide insights into whether the issue is due to an incorrect path, permissions, or other reasons\n\nAdditionally, the error can also occur in the context of the [Vercel REST API](https://vercel.com/docs/rest-api), where it is similar to the [HTTP 500 Internal Server Error](https://vercel.com/docs/rest-api/errors#resource-not-found). In this case, the error message will contain the details of the resource that could not be found.",
    "title": "RESOURCE_NOT_FOUND",
    "description": "This error signifies that a specified resource could not be located.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RANGE_START_NOT_VALID",
    "markdown": "# RANGE\\_START\\_NOT\\_VALID\n\nThe `RANGE_START_NOT_VALID` error occurs when the start value of the `Range` header in a request is invalid. The `Range` header is used to request a specific portion of a resource from the server, and the start value should be a valid integer indicating the beginning of the requested range.",
    "title": "RANGE_START_NOT_VALID",
    "description": "The start value of the Range header in the request is invalid. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/RANGE_UNIT_NOT_SUPPORTED",
    "markdown": "# RANGE\\_UNIT\\_NOT\\_SUPPORTED\n\nThe `RANGE_UNIT_NOT_SUPPORTED` error occurs when the unit identifier of the `Range` header in a request is not supported by the server. The `Range` header is used to request a specific portion of a resource from the server, and the unit identifier indicates the unit in which the range is specified, such as bytes.\n\n416\n\n`RANGE_UNIT_NOT_SUPPORTED`\n\nRequested Range Not Satisfiable\n\nTo troubleshoot this error, follow these steps:\n\n1.  Verify supported Range units: Check the documentation for the server or service you are interacting with to determine the supported range units\n2.  Correct Range unit: If the `Range` header in your request specifies an unsupported unit, correct it to use a supported unit\n3.  Check configuration: If the `Range` header values are being set automatically by some part of your system, check the configuration to ensure a supported unit identifier is being used\n4.  Debugging: If the error persists, log the `Range` header values in your server logs to debug and understand what values are being sent in requests",
    "title": "RANGE_UNIT_NOT_SUPPORTED",
    "description": "The unit identifier of the Range header in the request is not supported. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/URL_TOO_LONG",
    "markdown": "# URL\\_TOO\\_LONG\n\nThe `URL_TOO_LONG` error occurs when the URL of the request exceeds the maximum length allowed by the Edge Network (14 KB). Long URLs can be a result of long query strings, lengthy path segments, or an excessive number of path segments.",
    "title": "URL_TOO_LONG",
    "description": "The URL of the request is too long. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/quickstart",
    "markdown": "# Vercel Functions Quickstart\n\nBuild your first Vercel Function in a few steps.\n\nIn this quickstart guide, you'll learn how to get started with Vercel Functions using your favorite [frontend framework](https://vercel.com/docs/frameworks) to:\n\n*   Create a function\n*   Choose a runtime to use for your function\n*   Run your function locally using the Vercel CLI\n*   Deploy your function to Vercel\n\n1.  You should have the latest version of Vercel CLI installed. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n    \n2.  You should have an existing project. If you don't have one, you can run the following terminal command to create a Next.js project:\n    \n    ```\n    npx create-next-app@latest --typescript\n    ```\n    \n\nSelect your preferred framework to get started from the switcher on the top-right of the page. The implementation of the function will differ depending on the framework you choose.\n\n1.  In the `app` directory:\n    \n    Create `/api/hello/route.ts`\n    \n    Then, add the following code, which will return the region the function was executed in:\n    \n    ```\n    export const dynamic = 'force-dynamic'; // static by default, unless reading the request\n     \n    export function GET(request: Request) {\n      return new Response(`Hello from ${process.env.VERCEL_REGION}`);\n    }\n    ```\n    \n    To learn more about how to write a function, see the [Functions API Reference](https://vercel.com/docs/functions/functions-api-reference).\n    \n2.  You can optionally choose a runtime for your Function. If you don't specify a runtime, Vercel will automatically use the Serverless Node.js runtime:\n    \n    ```\n    export const runtime = 'nodejs';\n    ```\n    \n    In the above code, you export a [segment config option](https://nextjs.org/docs/app/building-your-application/routing/router-handlers#segment-config-options), allowing us to define the runtime. The [runtime configuration](https://vercel.com/docs/functions/configuring-functions/runtime) can be `nodejs` or `edge`. See [Choosing a Runtime](https://vercel.com/docs/functions/runtimes) for more information on the differences between the runtimes.\n    \n    You can also choose other languages like Python or Go. Learn more about [supported runtimes](https://vercel.com/docs/functions/runtimes).\n    \n3.  Use `next dev` to start a local development server:\n    \n    Navigate to the route you created (e.g. `/api/hello`) in your browser to see the following response:\n    \n    When you run your function locally, the `VERCEL_REGION` environment variable hadn't yet been defined. When you deploy your function to Vercel, the `VERCEL_REGION` environment variable will be defined and will contain the region the function was executed in.\n    \n4.  If your project has already been deployed to Vercel, push your changes to your Git repository and Vercel will automatically deploy your function. If you haven't deployed your project to Vercel, either create a new project in the [dashboard](https://vercel.com/new) or using the `vercel` command with the [Vercel CLI](https://vercel.com/docs/cli/deploying-from-cli#deploying-from-source).\n    \n    You can use the `env` [command](https://vercel.com/docs/cli/env) to pull the latest environment variables for your project so they can be used locally.\n    \n    Once you've successfully deployed, view the deployment and navigate to the route you created (e.g. `/api/hello`) in your browser to see the following response:\n    \n    If you chose to set `region` to `edge`, you'll see the response from the region closest to you. This is because Edge Functions execute in the region closest to the user.\n    \n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "Vercel Functions Quickstart",
    "description": "Build your first Vercel Function in a few steps.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/INVALID_IMAGE_OPTIMIZE_REQUEST",
    "markdown": "# INVALID\\_IMAGE\\_OPTIMIZE\\_REQUEST\n\nThe `INVALID_IMAGE_OPTIMIZE_REQUEST` error occurs when the query string is using an invalid value for `q` (quality) or `w` (width), or `url` returns a non-image response.",
    "title": "INVALID_IMAGE_OPTIMIZE_REQUEST",
    "description": "The query string is using an invalid value for q, w, or url parameters. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables",
    "markdown": "# Sensitive Environment Variables\n\nSensitive environment variables are [environment variables](https://vercel.com/docs/projects/environment-variables) whose values are non-readable once created. They help protect sensitive information stored in environment variables, such as API keys.\n\nWhen you mark an existing environment variable as sensitive, Vercel converts it to a non-readable format. This is only possible for environment variables in the [Production](https://vercel.com/docs/deployments/environments#production) and [Preview](https://vercel.com/docs/deployments/preview-deployments) environments.\n\nBoth [project environment variables](https://vercel.com/docs/projects/environment-variables) and [shared environment variables](https://vercel.com/docs/projects/environment-variables/shared-environment-variables) can be marked as sensitive.\n\n*   Development environment variables cannot be made sensitive. Therefore, all environment variables that only exist in the development environment are ignored\n*   All environment variables with Preview, Production, or both environments are converted to the sensitive format\n*   If your environment variables exist in the development environment and in at least one other environment (Preview or Production or both), the following happens:\n    *   The existing environment variable is updated to exclude the development environment and convert it to the sensitive format\n    *   A new standard environment variable is created with the same name but set to the development environment\n\nGo to the Environment Variables section of the Project or Team settings.\n\n*   Click the checkbox \"Create these environment variables with sensitive values\"\n*   Choose the environment and then add a key and a value\n*   Click \"Save\" to create the sensitive environment variables In the environment variable table, sensitive environment variables are marked with a \"Sensitive\" tag.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fsensitive-env-vars-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fsensitive-env-vars-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nCreate a new sensitive environment variable from your Team or Project settings.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Flisted-sev.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Flisted-sev-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSensitive environment variables labeled with a \"Sensitive\" tag on the dashboard.\n\nYou can only create a sensitive environment variables in the Preview and Production environments.\n\nYou can edit the [environment](https://vercel.com/docs/projects/environment-variables#environments) for a sensitive environment variable.\n\n*   Click Edit from the three-dot menu in the environment variables list\n*   Select the environment(s) for the sensitive environment variable After making the change, click the Save button.\n\nYou cannot edit the key or value of a sensitive environment variable.\n\nUsers with the [owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) role can set a team-wide environment variable policy when creating environment variables. Once enabled, all newly created environment variables in the [Production](https://vercel.com/docs/deployments/environments#production) and/or [Preview](https://vercel.com/docs/deployments/preview-deployments) environments will be sensitive environment variables. From the dashboard, go to your team's Settings > Security to enable the policy.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fenv-var-policies-2.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fprojects%2Fenvironment-variables%2Fenv-var-policies-dark-2.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSet environment variable policy from your team's Security settings.",
    "title": "Sensitive Environment Variables",
    "description": "Environment variables that cannot be decrypted once created.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/concepts",
    "markdown": "# Functions Concepts\n\nFunctions should always execute close to where your data source is to reduce latency. By default, functions using the Node.js runtime execute in Washington, D.C., USA (`iad1`), a common location for external data sources. You can set a new default region through your [project's settings on Vercel](https://vercel.com/docs/functions/configuring-functions/region#setting-your-default-region).\n\nEdge Functions execute in the region closest to the user, which could result in longer response times when the function relies on a database located far away. For example, if a visitor triggers an Edge Function in Japan, but it depends on a database in San Francisco, the Function will have to send requests to and wait for a response from San Francisco for each call.\n\nTo avoid these long roundtrips, you can limit your Edge Functions to [regions near your database](https://vercel.com/docs/functions/configuring-functions/region#setting-regions-in-your-function), or you could use a globally-distributed database. Vercel's [storage options](https://vercel.com/docs/storage) allow you to determine the [best location for your database](https://vercel.com/docs/storage#locate-your-data-close-to-your-functions).\n\n“Compute” is an encompassing term used to describe the actions taken by a computer. In the context of web development and Vercel, we use compute to describe actions such as (but not limited to) building and rendering - essential operations needed to turn your code into a site that appears for users. It's often used to describe the work that functions do to create dynamic content on your page.\n\nServerless Functions, usually execute in one specified [region](https://vercel.com/docs/concepts/functions/serverless-functions/regions) (although this can be configured), and allow you to write small chunks of code to provide additional functionality in your application, such as handle authentication, stream data, and make database queries.\n\nWhen a user makes a request to your site, a serverless function will run _on-demand_, without you needing to manage the infrastructure, provision servers, or upgrade hardware.\n\nWith Vercel, for each incoming request to a serverless function, a new invocation happens.\n\nIf a request is received shortly after a function is executed, Vercel optimizes performance by reusing that function for the subsequent invocation. Over time, only as many functions as necessary are kept active to accommodate incoming traffic.\n\nIn the absence of additional incoming traffic, functions on Vercel will scale down to zero.\n\nA cold boot refers to a function starting from scratch. In contrast, a warm boot implies reusing a function, in which the underlying container that hosts it does not get discarded. State, such as temporary files, memory caches, sub-processes, is preserved. This empowers the developer not just to minimize the time spent in the _booting_ process, but to also take advantage of caching data (in memory or filesystem) and [memoizing](https://en.wikipedia.org/wiki/Memoization) expensive computations.\n\nIt's crucial to note that functions must not leave tasks running post-response, even during a hot state. If a sub-process is running by the time the response is returned, the entire container is _frozen_. When a new invocation happens, if the container is re-used, it is unfrozen, which allows sub-processes to continue running.\n\nFor an advanced configuration, you can create a `vercel.json` file to use [Runtimes](https://vercel.com/docs/functions/runtimes) and other customizations. To view more about the properties you can customize, see the [Configuring Functions](https://vercel.com/docs/functions/configuring-functions) and [Project config with vercel.json](https://vercel.com/docs/projects/project-configuration).\n\nIf your use case requires that you work asynchronously with the results of a function invocation, you may need to consider a queuing, pooling, or [streaming](https://vercel.com/docs/functions/streaming) approach because of how serverless functions are created on Vercel.\n\nThe following suggestions will help you ensure optimal performance of your Vercel Functions:\n\n1.  Choose the correct region for your functions: All customers can change the default region for their functions in their project settings. Choose a region that's closest to your data source for optimal performance. See [Functions and your data source](https://vercel.com/docs/functions/concepts#functions-and-your-data-source) for more information\n2.  Choose smaller dependencies inside your functions: Cold start times are correlated to function size, which is often mostly from external dependencies. If you have large dependencies, parsing and evaluating JavaScript code can take 3-5 seconds or longer. Review your bundle and try to eliminate larger dependencies using a bundle analyzer\n3.  Use proper caching headers: Function responses can be cached using [Cache-Control headers](https://vercel.com/docs/edge-network/caching#using-vercel-functions). This will help ensure optimal performance for repeat visitors, and Vercel's [Edge cache](https://vercel.com/docs/edge-network/caching) even supports stale-while-revalidate headers. Note that cache misses will still need to request data from your origin (e.g. database) rather than reading directly from the Edge cache (faster)\n\nFor more information see [How can I improve serverless function cold start performance on Vercel?](https://vercel.com/guides/how-can-i-improve-serverless-function-lambda-cold-start-performance-on-vercel)\n\nSometimes, you need to place extra code files, such as `utils.js` or `my-types.d.ts`, inside the `/api` folder. To avoid turning these files into functions, Vercel ignores files with the following characters:\n\n*   Files that start with an underscore, `_`\n*   Files that start with `.`\n*   Files that end with `.d.ts`\n\nIf your file uses any of the above, it will not be turned into a function.\n\nIn order to optimize resources, there is an internal process that bundles as many Serverless Functions as possible into a single Lambda. Such a feature is currently only enabled for Next.js, but it will be enabled in other scenarios in the future.\n\nIf a configuration on the [`functions` property](https://vercel.com/docs/projects/project-configuration#functions) is present in Next.js (>= `v10.0.9`), then Vercel will bundle functions based on the configuration first. The remaining functions will be bundled together optimizing for how many functions are created.\n\nIn the following example, `app/api/hello/route.ts` will be bundled separately from `app/api/another/route.ts` since each has a different configuration:\n\n```\n{\n  \"functions\": {\n    \"app/api/hello/route.ts\": {\n      \"memory\": 3009,\n      \"maxDuration\": 60\n    },\n    \"app/api/another/route.ts\": {\n      \"memory\": 1024,\n      \"maxDuration\": 30\n    }\n  }\n}\n```",
    "title": "Functions Concepts",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/TOO_MANY_RANGES",
    "markdown": "# TOO\\_MANY\\_RANGES\n\nThe `TOO_MANY_RANGES` error occurs when too many ranges have been specified in the `Range` header of a request. The `Range` header is used to request specific portions of a resource from the server, and specifying too many ranges can lead to an excessive load on the server.",
    "title": "TOO_MANY_RANGES",
    "description": "Too many ranges have been specified in the Range header of the request. This is a request error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/streaming-functions",
    "markdown": "# Streaming Functions\n\nVercel Functions support streaming responses, allowing you to render parts of the UI as they become ready. This lets users interact with your app before the entire page finishes loading by populating the most important components first.\n\nVercel enables you to use the standard [Web Streams API](https://streams.spec.whatwg.org/) in your [functions](https://vercel.com/docs/functions). To learn more about how streaming works and how to get started, see the following sections:\n\nFrameworks like Next.js and SvelteKit have built-in functionality for streaming responses. Learn more:\n\nMost, but not all, functions allow you to stream responses. Streaming functions also support the [`waitUntil` method](https://vercel.com/docs/functions/functions-api-reference#waituntil), which allows you to keep a function running after a response has been sent and finished. Streaming functions can be used in the following contexts:\n\n*   [Functions using the `edge` runtime](https://vercel.com/docs/functions/runtimes#edge)\n    *   These functions must begin sending a response within 25 seconds. After the initial response begins, you can continuously stream the response with no time limit\n    *   Your streamed response size [cannot exceed Vercel's memory allocation limit of 128 MB](https://vercel.com/docs/functions/edge-functions/limitations#memory)\n*   Node.js Functions when using the following frameworks:\n*   Node.js functions using the Web Handler signature:\n    \n    ```\n    export const dynamic = 'force-dynamic'; // static by default, unless reading the request\n     \n    export function GET(request: Request) {\n      return new Response(`Hello from ${process.env.VERCEL_REGION}`);\n    }\n    ```\n    \n*   Node.js functions using the Node.js Handler signature and the `supportsResponseStreaming:true` flag:\n    \n    ```\n    export const config = {\n      supportsResponseStreaming: true,\n    };\n     \n    export default function handler(request: Request, response: Response) {\n      const { name = 'World' } = request.query;\n      return response.send(`Hello ${name}!`);\n    }\n    ```\n    \n\nAll functions stream by default for Hobby users. The list and steps below are for Pro and Enterprise teams.\n\nThe following functions do not stream by default. However, you can still [enable streaming](https://vercel.com/docs/functions/streaming-functions#forcing-streaming-functions).\n\n*   Node.js runtime functions using the Node.js handler without `supportsResponseStreaming:true`\n*   Node.js runtime functions using Next.js Pages Router\n    *   Note that even if the rest of your app uses Next.js Pages Router, you can use [Route Handlers in the App Router](https://nextjs.org/docs/app/building-your-application/routing/route-handlers) to stream responses. See the [streaming quickstart](https://vercel.com/docs/functions/streaming/quickstart) with Next.js (/app) selected for an example.\n\n```\n// Next.js App Router supports streaming by default with Route Handlers.\n```\n\n1.  From the dashboard, select your project and go to the Settings tab.\n2.  Select Environment Variables from the left side in settings.\n3.  Add a new environment variable with the Key: `VERCEL_FORCE_NODEJS_STREAMING` and the Value `true`. You should ensure this is set for all environments you want to force streaming for.\n4.  Pull your env vars into your local project with the [following command](https://vercel.com/docs/cli/env):\n\nFor more information, see [Environment Variables](https://vercel.com/docs/projects/environment-variables).\n\nBy default, Vercel Functions have a [maximum duration](https://vercel.com/docs/functions/runtimes#max-duration) of 10 seconds on Hobby and 15 seconds on Pro and Enterprise.\n\nYou should consider configuring the default [maximum duration](https://vercel.com/docs/functions/configuring-functions/duration) for Node.js functions to enable streaming responses for longer periods.\n\nWhen your function is streaming, you'll see the following benefits in your runtime logs, which allow you to see the output of your function as it is being generated:\n\n1.  You can [view the logs](https://vercel.com/docs/observability/runtime-logs#view-runtime-logs) in real-time from the Logs tab of your project's dashboard.\n2.  Each action of writing to standard output, such as using `console.log`, results in a separate log entry.\n3.  Each of those logs are 4 KB per line\n4.  The path in streaming logs will be prefixed with a forward slash (`/`)\n\nFor more information, see [Runtime Logs](https://vercel.com/docs/observability/runtime-logs).\n\nThese changes in the frequency and format of logs will affect Log Drains. If you are using Log Drains we recommend ensuring that your ingestion can handle both the new format and frequency.",
    "title": "Streaming Functions",
    "description": "Learn how Vercel enables streaming Function responses over time for ecommerce, AI, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/wasm",
    "markdown": "# Using WebAssembly (Wasm) at the Edge\n\n[WebAssembly](https://webassembly.org/), or Wasm, is a portable, low-level, assembly-like language that can be used as a compilation target for languages like C, Go, and Rust. Wasm was built to run more efficiently on the web and to run _alongside_ JavaScript, so runs in most JavaScript virtual machines.\n\nWith Vercel, this means that you can now use Wasm within [Edge Functions](https://vercel.com/docs/functions/edge-functions) or [Edge Middleware](https://vercel.com/docs/functions/edge-middleware), taking advantage of the speed of delivery in a multitude of languages.\n\nPre-compiled WebAssembly can be imported with the `?module` suffix. This will provide an array of the Wasm data that can be instantiated using `WebAssembly.instantiate()`.\n\nYou can use Wasm in your production deployment or locally, using [`vercel dev`](https://vercel.com/docs/cli/dev).\n\n1.  You should already have an existing C, Go, and Rust project. This should be compiled it to WebAssembly to create a binary `.wasm` file. Once you have this `.wasm`, you can use it in your Edge Function or Middleware\n    \n2.  Import the file into your existing project using:\n    \n    ```\n    import wasmModule from './my-file.wasm?module';\n    ```\n    \n3.  Instantiate it:\n    \n    ```\n    export const config = {\n      runtime: 'edge',\n    };\n     \n    export default async function handler() {\n      const { exports } = (await WebAssembly.instantiate(wasmModule)) as any;\n      const result = exports.xor(0xb4c9a91f, 0xf0c0ffee);\n      return new Response(result);\n    }\n    ```\n    \n\nThis walkthrough uses the [WASM XOR Edge API Route](https://github.com/vercel/examples/tree/main/edge-api-routes/wasm-rust-xor) example.",
    "title": "Using WebAssembly (Wasm) at the Edge",
    "description": "Learn how to use WebAssembly (Wasm) to enable low-level languages to run on Vercel Edge Functions and Vercel Edge Middleware.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/configuring-functions",
    "markdown": "# Configuring Functions\n\nYou can configure Vercel functions in many ways, including the runtime, region, maximum duration, and memory.\n\nWith different configurations, particularly the runtime configuration, there are a number of trade-offs and limits that you should be aware of. For more information, see the [runtimes](https://vercel.com/docs/functions/runtimes) comparison.\n\nThe runtime you select for your function determines the infrastructure, APIs, and other abilities of your function.\n\nWith Vercel, you can configure the runtime of a function in any of the following ways:\n\n*   Node.js or Edge: When working with a TypeScript or JavaScript function, you can use the Node.js or Edge runtimes by setting a config option within the function. For more information, see the [runtimes](https://vercel.com/docs/functions/runtimes) comparison\n*   Ruby, Python, Go: These have similar functionality and limitations as Node.js (Serverless) Functions. The configuration for these runtimes gets based on the file extension\n*   Community runtimes: You can specify any other [runtime](https://vercel.com/docs/functions/runtimes#community-runtimes), by using the [`functions`](https://vercel.com/docs/projects/project-configuration#functions) property in your `vercel.json` file\n\nYour function should execute in a location close to your data source. This minimizes latency, or delay, thereby enhancing your app's performance. How you configure your function's region, depends on the runtime used.\n\nThe maximum duration for your function defines how long a function can run for, allowing for more predictable billing.\n\nFunctions using the [Edge runtime](https://vercel.com/docs/functions/edge-functions/edge-runtime) don't have a maximum duration, but must begin sending a response [within 25 seconds](https://vercel.com/docs/functions/runtimes#max-duration). Beyond that time they can continue [streaming](https://vercel.com/docs/functions/streaming) a response.\n\nServerless Functions have a default duration that's dependent on your plan, but you can configure this as needed, [up to your plan's limit](https://vercel.com/docs/functions/runtimes#max-duration).\n\nServerless Functions use an infrastructure that allows you to adjust the memory size.\n\nEdge Functions have a fixed memory limit. This limitation helps reduce function startup time.",
    "title": "Configuring Functions",
    "description": "Learn how to configure the runtime, region, maximum duration, and memory for Vercel Functions.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/limitations",
    "markdown": "# Vercel Functions Limitations\n\nThe limitations on a function are dependant on the runtime you choose. See the [Choosing a Runtime](https://vercel.com/docs/functions/runtimes) doc for information on all the limitations of each runtime.\n\nSome common limits you may wish you be aware of:\n\n| Limit | Node.js | Edge |\n| --- | --- | --- |\n| [Maximum memory](https://vercel.com/docs/functions/runtimes#memory-size-limits) | Hobby: 1024 MB, Pro and Ent: 3009 MB | 128 MB |\n| [Maximum duration](https://vercel.com/docs/functions/runtimes#max-duration) | Hobby: 10s (default) - [configurable up to 60s](https://vercel.com/docs/functions/configuring-functions/duration), Pro: 15s (default) - [configurable](https://vercel.com/docs/functions/configuring-functions/duration) up to 300s, Ent: 15s (default) - [configurable](https://vercel.com/docs/functions/configuring-functions/duration) up to 900s | 25s (to begin returning a response, but can continue [streaming](https://vercel.com/docs/functions/streaming) data.) |\n| [Size](https://vercel.com/docs/functions/runtimes#bundle-size-limits) (after gzip compression) | 250 MB | Hobby: 1 MB, Pro: 2 MB, Ent: 4 MB |\n| [Concurrency](https://vercel.com/docs/functions/runtimes#automatic-concurrency-scaling) | Auto-scales up to 30,000 (Hobby and Pro) or 100,000+ (Enterprise) concurrency | Unlimited concurrency |\n| [Cost](https://vercel.com/docs/functions/runtimes#billing-model) | Pay for wall-clock time | Pay for CPU time |\n| [Regions](https://vercel.com/docs/functions/runtimes#location) | Executes region-first, [can customize location](https://vercel.com/docs/functions/regions#select-a-default-serverless-region).  <br>Enterprise teams can set [multiple regions](https://vercel.com/docs/functions/regions#set-multiple-serverless-regions) | Executes global-first, [can specify a region](https://vercel.com/docs/functions/configuring-functions/region) |\n| [API Coverage](https://vercel.com/docs/functions/runtimes#api-support) | Full Node.js coverage | Limited API support |\n\nThe following limits apply to the function's name when using [Node.js runtime](https://vercel.com/docs/functions/runtimes/node-js):\n\n*   Maximum length of 128 characters. This includes the extension of the file (e.g. `apps/admin/api/my-function.js` is 29 characters)\n*   No spaces are allowed. Replace them with a `-` or `_` (e.g. `api/my function.js` isn't allowed)",
    "title": "Vercel Functions Limitations",
    "description": "Learn about the limitations and restrictions of using Vercel Functions for both Node.js and Edge runtimes.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/functions-api-reference",
    "markdown": "# Functions API Reference\n\nFunctions are defined similar to a [Route Handler](https://nextjs.org/docs/app/building-your-application/routing/route-handlers) in Next.js. When using Next.js App Router, you can define a function in a file under `app/api/{example}/route.ts` in your project. Vercel will deploy any file under `app/api/` as a function.\n\nVercel Functions use a Web Handler, which consists of the `request` parameter that is an instance of the web standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) API, and for non-Next.js apps, a `context` parameter that represents the context of the request. Next.js [extends](https://nextjs.org/docs/app/api-reference/functions/next-request) the standard `Request` object with additional properties and methods.\n\nTo use a Web Handler, you must be using Node.js 18 or later. If you are using an earlier version, you must use the [Node.js signature](https://vercel.com/docs/functions/runtimes/node-js).\n\n| Parameter | Description | Next.js | Other Frameworks |\n| --- | --- | --- | --- |\n| `request` | An instance of the `Request` object | [`NextRequest`](https://nextjs.org/docs/api-reference/next/server#nextrequest) | [`Request`](https://developer.mozilla.org/docs/Web/API/Request) |\n| `context` | An object containing the context of the request | Next.js doesn't support this parameter. Instead, [use `waitUntil` as import](#waituntil) | [`{ waitUntil }`](#waituntil) |\n\n```\nexport const dynamic = 'force-dynamic'; // static by default, unless reading the request\n \nexport function GET(request: Request) {\n  return new Response(`Hello from ${process.env.VERCEL_REGION}`);\n}\n```\n\nThe `waitUntil()` method enqueues an asynchronous task to be performed during the lifecycle of the request. You can use it for anything that can be done after the response is sent, such as logging, sending analytics, or updating a cache, without blocking the response from being sent.\n\nTo use `waitUntil()` in your function:\n\n1.  Install the `@vercel/functions` package:\n\n2.  Import the `@vercel/functions` package, which exposes the `waitUntil()` method:\n\n```\nimport { waitUntil } from '@vercel/functions';\n \nexport function GET() {\n  const country = request.headers.get('x-vercel-ip-country');\n  // Returns a response immediately while keeping the function alive\n  waitUntil(fetch(`https://api.vercel.app/countries/?incr=${country}`));\n  return new Response(`You're visiting from beautiful ${country}`);\n}\n```\n\n`waitUntil()` can be also used with the [Edge Runtime](https://vercel.com/docs/functions/configuring-functions/runtime#edge).\n\nThe promises passed to `waitUntil()` will have the same timeout as the function itself. If the function times out, the promises will be cancelled.\n\nTo configure your function when using the App Router in Next.js, you use [segment options](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config), rather than a `config` object.\n\n```\nexport const runtime = 'nodejs';\nexport const maxDuration = 15;\n```\n\nThe table below shows a highlight of the valid config options. For detailed information on all the config options, see the [Configuring Functions](https://vercel.com/docs/functions/configuring-functions) docs.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| [`runtime`](https://vercel.com/docs/functions/configuring-functions/runtime) | `string` | This optional property defines the runtime to use, and if not set the runtime will default to `nodejs`. |\n| [`preferredRegion`](https://vercel.com/docs/functions/configuring-functions/region) | `string` | This optional property and can be used to specify the [regions](https://vercel.com/docs/edge-network/regions#region-list) in which your function should execute. This can only be set when the `runtime` is set to `edge` |\n| [`maxDuration`](https://vercel.com/docs/functions/configuring-functions/duration) | `int` | This optional property can be used to specify the maximum duration in seconds that your function can run for. This can't be set when the `runtime` is set to `edge` |",
    "title": "Functions API Reference",
    "description": "Learn about available APIs when working with Vercel Functions.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/usage-and-pricing",
    "markdown": "# Usage & Pricing for Functions\n\nFunctions using the Node.js runtime are measured in [GB-hours](https://vercel.com/docs/limits/usage#execution), which is the [memory allocated](https://vercel.com/docs/functions/configuring-functions/memory) for each Function in GB, multiplied by the time in hours they were running. For example, a function [configured](https://vercel.com/docs/functions/configuring-functions/memory) to use 3GB of memory that executes for 1 second, would be billed at 3 GB-s, requiring 1,200 executions to reach a full GB-Hr.\n\nFunctions using the edge runtime are measured in the number of [execution units](https://vercel.com/docs/limits/usage#execution-units), which are the amount of CPU time — or time spent performing calculations — used when a function is invoked. CPU time does not include idle time spent waiting for data fetching.\n\nA function can use up to 50 ms of CPU time per execution unit. If a function uses more than 50 ms, it will be divided into multiple 50 ms units for billing purposes.\n\nSee [viewing function usage](#viewing-function-usage) for more information on how to track your usage.\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe following table outlines the price for each resource according to the plan you are on, and the [runtime](https://vercel.com/docs/functions/runtimes) your function is using.\n\nVercel Functions are available for free with the included usage limits. If you exceed the included usage and are on the Pro plan, you will be charged for the additional usage according to the on-demand costs:\n\nVercel will send you emails as you are nearing your usage limits. On the Hobby plan you will not pay for any additional usage. However, your account may be paused if you do exceed the limits.\n\nWhen your [Hobby account](https://vercel.com/docs/accounts/plans/hobby) is set to paused, it remains in this state indefinitely unless you take action. This means all new and existing [deployments](https://vercel.com/docs/deployments/overview) will be paused.\n\nIf you have reached this state, your application is likely a good candidate for a [Pro account](https://vercel.com/docs/accounts/plans/pro).\n\nTo unpause your account, you have two main options:\n\n*   Contact Support: You can reach out to our [support team](https://vercel.com/help) to discuss the reason for the pause and potential resolutions\n*   Transfer to a Pro team: If your Hobby account is paused, you won't have the option to initiate a [Pro trial](https://vercel.com/docs/accounts/plans/pro/trials). Instead, you can set up a Pro team:\n    1.  [Create a Pro team account](https://vercel.com/docs/accounts/create-a-team)\n    2.  Add a valid credit card to this account. Select the Settings tab, then select Billing and Payment Method\n\nOnce set up, a transfer modal will appear, prompting you to [transfer your previous Hobby projects](https://vercel.com/docs/projects/overview#transferring-a-project) to this new team. After transferring, you can continue with your projects as usual.\n\nFor teams on a Pro trial, the [trial will end](https://vercel.com/docs/accounts/plans/pro/trials#post-trial-decision) when your team reaches the [trial limits](https://vercel.com/docs/accounts/plans/pro/trials#trial-limitations).\n\nOnce your team exceeds the included usage, you will continue to be charged the on-demand costs going forward.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nEnterprise agreements provide custom usage and pricing for Vercel Functions, including:\n\n*   Custom [execution units](https://vercel.com/docs/pricing/edge-functions#managing-execution-units)\n*   Increased [maximum duration](https://vercel.com/docs/functions/configuring-functions/duration) up to 900 seconds\n*   Multi-region deployments\n*   [Serverless Function failover](https://vercel.com/docs/functions/configuring-functions/region#automatic-failover)\n\nSee [Vercel Enterprise plans](https://vercel.com/docs/accounts/plans/enterprise) for more information.\n\nUsage metrics can be found in the [Usage tab](https://vercel.com/dashboard/usage) on your [dashboard](https://vercel.com/dashboard). Functions are invoked for every request that is served.\n\nYou can see the usage for functions using the Node.js runtime on the Serverless Functions section of the [Usage tab](https://vercel.com/docs/limits/usage#edge-functions).\n\nYou can see the usage for functions using the edge runtime on the Edge Functions section of the [Usage tab](https://vercel.com/docs/limits/usage#edge-functions). The dashboard tracks the usage values:",
    "title": "Usage & Pricing for Functions",
    "description": "Learn about usage and pricing for Vercel Functions.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-functions/edge-runtime",
    "markdown": "# Edge Runtime\n\n[`AbortController`](https://developer.mozilla.org/docs/Web/API/AbortController)Allows you to abort one or more DOM requests as and when desired[`AbortSignal`](https://developer.mozilla.org/docs/Web/API/AbortSignal)Represents a signal object that allows you to communicate with a DOM request (such as a [`Fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API) request) and abort it if required[`DOMException`](https://developer.mozilla.org/docs/Web/API/DOMException)Represents an error that occurs in the DOM[`structuredClone`](https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)Creates a deep copy of a value[`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern)Represents a URL pattern[`Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array)Represents an array of values[`ArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)Represents a generic, fixed-length raw binary data buffer[`Atomics`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Atomics)Provides atomic operations as static methods[`BigInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt)Represents a whole number with arbitrary precision[`BigInt64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)Represents a typed array of 64-bit signed integers[`BigUint64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)Represents a typed array of 64-bit unsigned integers[`Boolean`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)Represents a logical entity and can have two values: `true` and `false`[`clearInterval`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval)Cancels a timed, repeating action which was previously established by a call to `setInterval()`[`clearTimeout`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout)Cancels a timed, repeating action which was previously established by a call to `setTimeout()`[`console`](https://developer.mozilla.org/docs/Web/API/Console)Provides access to the browser's debugging console[`DataView`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView)Represents a generic view of an `ArrayBuffer`[`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date)Represents a single moment in time in a platform-independent format[`decodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)Decodes a Uniform Resource Identifier (URI) previously created by `encodeURI` or by a similar routine[`decodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent)Decodes a Uniform Resource Identifier (URI) component previously created by `encodeURIComponent` or by a similar routine[`encodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character[`encodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character[`Error`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error)Represents an error when trying to execute a statement or accessing a property[`EvalError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/EvalError)Represents an error that occurs regarding the global function `eval()`[`Float32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)Represents a typed array of 32-bit floating point numbers[`Float64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)Represents a typed array of 64-bit floating point numbers[`Function`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function)Represents a function[`Infinity`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Infinity)Represents the mathematical Infinity value[`Int8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)Represents a typed array of 8-bit signed integers[`Int16Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)Represents a typed array of 16-bit signed integers[`Int32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)Represents a typed array of 32-bit signed integers[`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl)Provides access to internationalization and localization functionality[`isFinite`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isFinite)Determines whether a value is a finite number[`isNaN`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isNaN)Determines whether a value is `NaN` or not[`JSON`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON)Provides functionality to convert JavaScript values to and from the JSON format[`Map`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map)Represents a collection of values, where each value may occur only once[`Math`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math)Provides access to mathematical functions and constants[`Number`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)Represents a numeric value[`Object`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object)Represents the object that is the base of all JavaScript objects[`parseFloat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)Parses a string argument and returns a floating point number[`parseInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseInt)Parses a string argument and returns an integer of the specified radix[`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)Represents the eventual completion (or failure) of an asynchronous operation, and its resulting value[`Proxy`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy)Represents an object that is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)[`RangeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RangeError)Represents an error when a value is not in the set or range of allowed values[`ReferenceError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)Represents an error when a non-existent variable is referenced[`Reflect`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect)Provides methods for interceptable JavaScript operations[`RegExp`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp)Represents a regular expression, allowing you to match combinations of characters[`Set`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set)Represents a collection of values, where each value may occur only once[`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval)Repeatedly calls a function, with a fixed time delay between each call[`setTimeout`](https://developer.mozilla.org/docs/Web/API/setTimeout)Calls a function or evaluates an expression after a specified number of milliseconds[`SharedArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)Represents a generic, fixed-length raw binary data buffer[`String`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)Represents a sequence of characters[`Symbol`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol)Represents a unique and immutable data type that is used as the key of an object property[`SyntaxError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)Represents an error when trying to interpret syntactically invalid code[`TypeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypeError)Represents an error when a value is not of the expected type[`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)Represents a typed array of 8-bit unsigned integers[`Uint8ClampedArray`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)Represents a typed array of 8-bit unsigned integers clamped to 0-255[`Uint32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)Represents a typed array of 32-bit unsigned integers[`URIError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/URIError)Represents an error when a global URI handling function was used in a wrong way[`URL`](https://developer.mozilla.org/docs/Web/API/URL)Represents an object providing static methods used for creating object URLs[`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams)Represents a collection of key/value pairs[`WeakMap`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)Represents a collection of key/value pairs in which the keys are weakly referenced[`WeakSet`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)Represents a collection of objects in which each object may occur only once[`WebAssembly`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly)Provides access to WebAssembly",
    "title": "Edge Runtime",
    "description": "Learn about the Edge runtime, the environment in which Edge Functions run.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-middleware/edge-runtime",
    "markdown": "# Edge Runtime\n\n[`AbortController`](https://developer.mozilla.org/docs/Web/API/AbortController)Allows you to abort one or more DOM requests as and when desired[`AbortSignal`](https://developer.mozilla.org/docs/Web/API/AbortSignal)Represents a signal object that allows you to communicate with a DOM request (such as a [`Fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API) request) and abort it if required[`DOMException`](https://developer.mozilla.org/docs/Web/API/DOMException)Represents an error that occurs in the DOM[`structuredClone`](https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)Creates a deep copy of a value[`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern)Represents a URL pattern[`Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array)Represents an array of values[`ArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)Represents a generic, fixed-length raw binary data buffer[`Atomics`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Atomics)Provides atomic operations as static methods[`BigInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt)Represents a whole number with arbitrary precision[`BigInt64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)Represents a typed array of 64-bit signed integers[`BigUint64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)Represents a typed array of 64-bit unsigned integers[`Boolean`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)Represents a logical entity and can have two values: `true` and `false`[`clearInterval`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval)Cancels a timed, repeating action which was previously established by a call to `setInterval()`[`clearTimeout`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout)Cancels a timed, repeating action which was previously established by a call to `setTimeout()`[`console`](https://developer.mozilla.org/docs/Web/API/Console)Provides access to the browser's debugging console[`DataView`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView)Represents a generic view of an `ArrayBuffer`[`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date)Represents a single moment in time in a platform-independent format[`decodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)Decodes a Uniform Resource Identifier (URI) previously created by `encodeURI` or by a similar routine[`decodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent)Decodes a Uniform Resource Identifier (URI) component previously created by `encodeURIComponent` or by a similar routine[`encodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character[`encodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character[`Error`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error)Represents an error when trying to execute a statement or accessing a property[`EvalError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/EvalError)Represents an error that occurs regarding the global function `eval()`[`Float32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)Represents a typed array of 32-bit floating point numbers[`Float64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)Represents a typed array of 64-bit floating point numbers[`Function`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function)Represents a function[`Infinity`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Infinity)Represents the mathematical Infinity value[`Int8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)Represents a typed array of 8-bit signed integers[`Int16Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)Represents a typed array of 16-bit signed integers[`Int32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)Represents a typed array of 32-bit signed integers[`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl)Provides access to internationalization and localization functionality[`isFinite`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isFinite)Determines whether a value is a finite number[`isNaN`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isNaN)Determines whether a value is `NaN` or not[`JSON`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON)Provides functionality to convert JavaScript values to and from the JSON format[`Map`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map)Represents a collection of values, where each value may occur only once[`Math`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math)Provides access to mathematical functions and constants[`Number`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)Represents a numeric value[`Object`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object)Represents the object that is the base of all JavaScript objects[`parseFloat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)Parses a string argument and returns a floating point number[`parseInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseInt)Parses a string argument and returns an integer of the specified radix[`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)Represents the eventual completion (or failure) of an asynchronous operation, and its resulting value[`Proxy`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy)Represents an object that is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)[`RangeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RangeError)Represents an error when a value is not in the set or range of allowed values[`ReferenceError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)Represents an error when a non-existent variable is referenced[`Reflect`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect)Provides methods for interceptable JavaScript operations[`RegExp`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp)Represents a regular expression, allowing you to match combinations of characters[`Set`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set)Represents a collection of values, where each value may occur only once[`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval)Repeatedly calls a function, with a fixed time delay between each call[`setTimeout`](https://developer.mozilla.org/docs/Web/API/setTimeout)Calls a function or evaluates an expression after a specified number of milliseconds[`SharedArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)Represents a generic, fixed-length raw binary data buffer[`String`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)Represents a sequence of characters[`Symbol`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol)Represents a unique and immutable data type that is used as the key of an object property[`SyntaxError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)Represents an error when trying to interpret syntactically invalid code[`TypeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypeError)Represents an error when a value is not of the expected type[`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)Represents a typed array of 8-bit unsigned integers[`Uint8ClampedArray`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)Represents a typed array of 8-bit unsigned integers clamped to 0-255[`Uint32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)Represents a typed array of 32-bit unsigned integers[`URIError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/URIError)Represents an error when a global URI handling function was used in a wrong way[`URL`](https://developer.mozilla.org/docs/Web/API/URL)Represents an object providing static methods used for creating object URLs[`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams)Represents a collection of key/value pairs[`WeakMap`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)Represents a collection of key/value pairs in which the keys are weakly referenced[`WeakSet`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)Represents a collection of objects in which each object may occur only once[`WebAssembly`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly)Provides access to WebAssembly",
    "title": "Edge Runtime",
    "description": "Learn about the Edge runtime, the environment in which Edge Functions run.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-middleware/quickstart",
    "markdown": "# Quickstart for Using Edge Middleware\n\nIn this quickstart guide, you'll learn how to get started with Next.js Middleware and using Edge Middleware in Vercel CLI\n\nIn this quickstart guide, you'll learn how to get started with Next.js Middleware and using Edge Middleware in the [Vercel CLI](https://vercel.com/docs/cli/dev). For information on the API and how to use it, see the [Edge Middleware API](https://vercel.com/docs/functions/edge-middleware/middleware-api) documentation.\n\nYou should have the latest version (>= v25) of the Vercel CLI. To check your version, use `vercel --version`. To [install](https://vercel.com/docs/cli#installing-vercel-cli) or update Vercel CLI, use:\n\nBefore you begin, ensure that your app is using the most recent version of Next.js:\n\nEdge Middleware runs _before_ the incoming request and cache, which allows you to personalize cached content. In this quickstart you will create a middleware that runs on a specific route (`/secret-page`). If your visitor is from a specific geographic location, and visits the `/secret-page` route, the request will be rewritten to a `/login` page instead.\n\nAfter completing this quickstart you will have learnt how to:\n\n*   Use the `geo` object to personalise the content based on the visitor's location\n*   Use the custom match config to trigger the middleware to run on a specific route - Edge Middleware is invoked for every route in the app by default\n*   Rewrite to a new URL\n\n1.  Use `create-next-app` to create a new Next.js project or use your existing project:\n    \n    ```\n    npx create-next-app@latest --typescript\n    ```\n    \n    Follow the prompts to set your project up. You'll be using the TypeScript variant of the starter project as you will be importing some helpers from `next/server` in later steps.\n    \n2.  Then, create a `middleware.ts` (or `.js`) file at the same level as your `pages` or `app` directory (even if you're using a `src` directory). This is where the code that will be deployed as middleware will live. The file extension can be `.ts` or `.js`, this guide uses TypeScript.\n    \n    For this quickstart, you should also add some new helper directories to your project: `secret-page`, and `login`. Your folder structure should have the following layout:\n    \n3.  my-project\n    *   middleware.ts\n    *   app\n        *   secret-page\n            *   page.tsx\n        *   login\n            *   page.tsx\n        *   page.tsx\n\n*   The content of these pages are not relevant to this quickstart, but they are used to demonstrate the use of the middleware.\n    \n    ```\n    export default function SecretPage() {\n      return (\n        <div>\n          <h1>Secret Page</h1>\n          <p>This is a secret page!</p>\n        </div>\n      );\n    }\n    ```\n    \n*   The following middleware code takes the geographic location of the visitor from the request, and rewrites the request to a login page if they are from SE (Sweden).\n    \n    When copying this code into your project, you will need to replace the `BLOCKED_COUNTRY` variable with the ISO Alpha-2 code of your location. You can look up this value on the [IBAN country code list](https://www.iban.com/country-codes).\n    \n    ```\n    import { NextResponse } from 'next/server';\n     \n    // The country to block from accessing the secret page\n    const BLOCKED_COUNTRY = 'SE';\n     \n    // Trigger this middleware to run on the `/secret-page` route\n    export const config = {\n      matcher: '/secret-page',\n    };\n     \n    export default function middleware(request: Request) {\n      // Extract country. Default to US if not found.\n      const country = (request.geo && request.geo.country) || 'US';\n     \n      console.log(`Visitor from ${country}`);\n     \n      // Specify the correct route based on the requests location\n      if (country === BLOCKED_COUNTRY) {\n        request.url.pathname = '/login';\n      } else {\n        request.url.pathname = `/secret-page`;\n      }\n     \n      // Rewrite to URL\n      return NextResponse.rewrite(request.url);\n    }\n    ```\n    \n    If you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`\n    \n*   When working locally, your IP address will be 127.0.0.1. This means that the `geo` location can't be computed and the middleware location check will default to `US` (as defined in step four).\n    \n    To test your middleware, use the Vercel CLI to deploy your project with `vercel deploy`.\n    \n    Once deployed, open the production url, and edit the url to `https://<your-project-name>.vercel.app/secret-page`, you should be redirected to the `/login` page.\n    \n    Edit the `BLOCKED_COUNTRY` variable to a country you are not in and deploy again with `vercel deploy`. You should now be able to access the `/secret-page` route.\n    \n*   Once your Function is published, go to your project's overview page from your [Vercel dashboard](https://vercel.com/dashboard) and click the Logs tab. This tab allows you to view, search, inspect, and share your runtime logs invoked by Edge Middleware.\n    \n    To view details for these logs click any individual log entry. The information will appear in the right sidebar.\n    \n*   You have created a new Next.js project and deployed Edge Middleware. Based on the incoming requests location, you have rewritten the request to a login page.\n    \n    *   Edge Middleware runs _before_ the cache\n    *   You can import helpers that extend Web API objects (NextResponse, NextRequest, see [Edge Middleware API](https://vercel.com/docs/functions/edge-middleware/middleware-api) for more information on these APIs)\n    *   You can use a custom matcher config to only trigger the middleware in specific routes\n    *   You cannot use Node.js APIs in Edge Middleware\n    \n    To learn more about Edge Middleware, and its use cases, see the [Edge Middleware](https://vercel.com/docs/functions/edge-middleware) documentation.",
    "title": "Quickstart for Using Edge Middleware",
    "description": "In this quickstart guide, you'll learn how to get started with Next.js Middleware and using Edge Middleware in Vercel CLI",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/examples",
    "markdown": "# Examples for Vercel Functions\n\n### Streaming\n\nLearn how Vercel enables streaming Function responses over time for e-commerce, AI, and more.",
    "title": "Examples for Vercel Functions",
    "description": "Vercel supports a wide range of the most popular frontend frameworks, optimizing how your site builds and runs no matter what tool you use.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/edge-middleware/limitations",
    "markdown": "# Edge Middleware Limitations\n\nEdge Middleware is neither a Node.js nor browser application, which means it doesn't have access to all browser and Node.js APIs. Currently, our runtime offers [a subset of browser APIs](https://vercel.com/docs/functions/edge-middleware/middleware-api) and [some Node.js APIs](https://vercel.com/docs/functions/edge-functions/edge-runtime#unsupported-apis), and we plan to implement more functionality in the future.\n\nThere are some restrictions to writing middleware, which is documented in the [Edge Middleware API guide](https://vercel.com/docs/functions/edge-functions/edge-runtime#unsupported-apis).\n\nIn summary:\n\n*   Use ES modules\n*   Most libraries that use Node.js APIs as dependencies can't be used in Edge Middleware. While we're adding support for more Node.js APIs over time, see the [currently available APIs](https://vercel.com/docs/functions/edge-middleware/middleware-api)\n*   Dynamic code execution (such as `eval`) is not allowed (see the next section for more details)\n\nDynamic code execution is not available in Edge Middleware for security reasons. For example, the following APIs cannot be used:\n\nMost importantly, you need to make sure libraries used in your Edge Middleware don't rely on dynamic code execution because it leads to a runtime error.\n\nEdge Middleware must begin sending a response within 25 seconds.\n\nYou may continue streaming a response beyond that time and you can continue with asynchronous workloads in the background, after returning the response.\n\nEdge Middleware can only use up to 128MB. If it exceeds this limit, the execution will be aborted and we will return a `502` error.\n\n| Plan | Limit (after gzip compression) |\n| --- | --- |\n| Hobby | 1 MB |\n| Pro | 2 MB |\n| Enterprise | 4 MB |\n\nThe maximum size for an Edge Function includes your JavaScript code, imported libraries and files (such as fonts), and all files bundled in the function.\n\nIf you reach the limit, make sure the code you are importing in your function is used and is not too heavy. You can use a package size checker tool like [bundle](https://bundle.js.org/) to check the size of a package and search for a smaller alternative.\n\nWhile Vercel allows [Environment Variables up to a total of 64 KB](https://vercel.com/docs/projects/environment-variables#environment-variable-size) in size, Edge Middleware is limited to 5KB per Environment Variable.\n\nEnvironment Variables can be accessed through the `process.env` object. Since JavaScript objects have methods to allow some operations on them, there are limitations on the names of Environment Variables to avoid having ambiguous code.\n\nThe following names will be ignored as Environment Variables to avoid overriding the `process.env` object prototype:\n\n*   `constructor`\n*   `__defineGetter__`\n*   `__defineSetter__`\n*   `hasOwnProperty`\n*   `__lookupGetter__`\n*   `__lookupSetter__`\n*   `isPrototypeOf`\n*   `propertyIsEnumerable`\n*   `toString`\n*   `valueOf`\n*   `__proto__`\n*   `toLocaleString`\n\nTherefore, your code will always be able to use them with their expected behavior:\n\n```\n// returns `true`, if `process.env.MY_VALUE` is used anywhere & defined in the Vercel dashboard\nprocess.env.hasOwnProperty('MY_VALUE');\n```\n\n| Name | Limit |\n| --- | --- |\n| Maximum URL length | 14 KB |\n| Maximum request body length | 4 MB |\n| Maximum number of request headers | 64  |\n| Maximum request headers length | 16 KB |\n\n*   You cannot set non-standard port numbers in the fetch URL (e.g., `https://example.com:8080`). Only `80` and `443` are allowed. If you set a non-standard port number, the port number is ignored, and the request is sent to port `80` for `http://` URL, or port `443` for `https://` URL.\n*   The maximum number of requests from `fetch` API is 950 per Edge Middleware invocation.\n*   The maximum number of open connections is 6.\n    *   Each function invocation can have up to 6 open connections. For example, if you try to send 10 simultaneous fetch requests, only 6 of them can be processed at a time. The remaining requests are put into a waiting queue and will be processed accordingly as those in-flight requests are completed.\n*   If in-flight requests have been waiting for a response for more than 15 seconds with no active reads/writes, the runtime may cancel them based on its LRU (Least Recently Used) logic.\n    *   If you attempt to use a canceled connection, the `Network connection lost.` exception will be thrown.\n    *   You can `catch` on the `fetch` promise to handle this exception gracefully (e.g. with retries). Additionally, you can use the [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) API to set timeouts for `fetch` requests.\n\nTo avoid CPU timing attacks, like Spectre, date and time functionality is not generally available. In particular, the time returned from `Date.now()` only advances after I/O operations, like `fetch`. For example:\n\n```\nexport default function middleware(request: Request) {\n  for (let i = 0; i < 1000; i++) {\n    console.log(Date.now()); // Prints the same value 1000 times.\n  }\n \n  await fetch('https://vercel.com');\n  console.log(Date.now()); // Prints another value.\n}\n```\n\nIf you're not using a framework, you must either add `\"type\": \"module\"` to your `package.json` or change your JavaScript Functions' file extensions from `.js` to `.mjs`",
    "title": "Edge Middleware Limitations",
    "description": "Learn about the limitations and restrictions of using Edge Middleware with Vercel with this reference.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/functions/serverless-functions/regions",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/limits",
    "markdown": "# Vercel KV Limits\n\n[Vercel KV](https://vercel.com/storage/kv) provides durable, serverless Redis storage. It supports nearly all Redis commands, and is compatible with most Redis clients. This page outlines the limitations of Vercel KV.\n\nVercel KV was built in partnership with [Upstash](https://upstash.com/), which means many of Upstash's features are available with KV. However, there are some differences worth knowing about, including currently unsupported features.\n\nThe following is a list of Upstash features that Vercel KV does not currently support:\n\n*   Managing or creating a Vercel KV store from Upstash's web console\n*   [Backup/Restore](https://docs.upstash.com/redis/features/backuprestore) – Use `redis-cli` instead\n*   [Disabling TLS](#tls-support)\n*   [Detailed runtime metrics](https://docs.upstash.com/redis/howto/metricsandcharts)\n*   [Upstash's Pro and Enterprise addons](https://docs.upstash.com/redis/overall/enterprise#enterprise-addons)\n\nWe also do not support `redis-cli` version 5, due to its lack of [TLS support](#tls-support).\n\nThe following is a general list of limitations with Vercel KV:\n\n*   Provisioning a KV store from the Vercel CLI or [Vercel Terraform Provider](https://vercel.com/guides/integrating-terraform-with-vercel) is not currently supported\n*   Changing the primary region of a Vercel KV store is not currently supported. Instead, you must create a new store and migrate your data\n*   The `node-redis` and `ioredis` modules are not supported in Edge Functions. Instead, use [the SDK](https://vercel.com/docs/storage/vercel-kv/kv-reference)\n*   There is a limit of 3,000 requests per day for users on the [Hobby plan](https://vercel.com/docs/accounts/plans/hobby) and [Pro trial](https://vercel.com/docs/accounts/plans/pro/trials). When this limit is reached, requests to the database will be rate limited. If you are on the Hobby plan, (and your Pro trial ends) you can upgrade to the Pro plan to remove this limit\n*   The Hobby plan has a maximum database size of 256 MB. The database will be rate limited when the maximum requests have been reached. When the maximum storage is reached, writes will fail\n*   Users on the Hobby plan can create 1 database, which can be shared across projects. Users on the Pro plan can create 1 database as part of their plan, then up to a maximum of 5 databases ([each including 5 read replicas](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing#databases-including-read-replicas)) at an [additional cost of 1.00 USD per database](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing#pricing)\n\nThe below table outlines the technical limitations of Vercel KV depending on your plan:\n\n| Limit | Hobby | Pro |\n| --- | --- | --- |\n| Max commands per second | 1000 | 1000 |\n| Max request size | 1 MB | 1 MB |\n| Max record size | 100 MB | 100 MB |\n| Max number of databases | 1   | N/A |\n| Max database size (per database) | 256MB | 10 GB |\n| Max number of concurrent connections | 100 | 1000 |\n| Max number of daily requests | 3000 | N/A |\n| Max daily bandwidth | 50 GB | 50 GB |\n\nExceeding these limits results in being rate-limited. That means you can't write new data until data is deleted.\n\nUnder the Hobby plan, databases that remain inactive for more than 30 days are subject to deletion. Please note that:\n\n*   Databases are considered inactive if there have not been any read or write operations within a 30 day timeframe\n*   When a database qualifies for deletion, you will receive a notification on Vercel, and a banner will be displayed on the database's detail view in the dashboard\n*   If you don't [reactivate your database](#preventing-database-deletion) within seven days of receiving this alert, it will be permanently deleted\n\nTo prevent deletion, you must reactivate your database by executing either a read or write operation. You can do so by either:\n\n*   Connecting to the database using the database's CLI in the dashboard\n*   Using either the `redis-cli` or the [`@vercel/kv`](https://vercel.com/docs/storage/vercel-kv/kv-reference) packages within your application. For example, you can send commands such as `GET mykey` or `SET mykey 1`\n\nOnce Vercel has deleted a database, it cannot be recovered. This policy affects customers on the Hobby plan only.\n\nWhen using a read only token to connect to your KV store, you will not have access to any write commands. You will also not have access to the [`KEYS`](https://redis.io/commands/keys/) command.\n\nVercel KV creates a single Redis store as your primary region. Writes are routed to the primary region, then replicated to other read regions you define.\n\nSupport for replication to other regions is an additional charge. You can have up to four additional read replicas. Learn more about [usage and pricing](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing) for Vercel KV.\n\nVercel KV is a first-party integration with Upstash, using Upstash Global Databases. You can select a single primary region, and up to four additional read replicas.\n\nSupported regions for Vercel KV correspond to Upstash's available regions. The following regions are available for Vercel KV.\n\n| Region Code | Region Name | Location |\n| --- | --- | --- |\n| dub1 | eu-west-1 | Dublin, Ireland |\n| fra1 | eu-central-1 | Frankfurt, Germany |\n| gru1 | sa-east-1 | São Paulo, Brazil |\n| iad1 | us-east-1 | Washington, D.C., USA |\n| pdx1 | us-west-2 | Portland, USA |\n| sfo1 | us-west-1 | San Francisco, USA |\n| sin1 | ap-southeast-1 | Singapore |\n| syd1 | ap-southeast-2 | Sydney, Australia |\n\nWe recommend selecting the same [regions](https://vercel.com/docs/edge-network/regions#region-list) for your store as your Edge and Serverless Functions.\n\nSee what Redis commands we support in [our Redis Compatibility docs](https://vercel.com/docs/storage/vercel-kv/redis-compatibility).\n\nWhen you create a Vercel KV store, a Redis store is provisioned with support for TLS `v1.2` and `v1.3` enabled. There is no way to disable TLS for your KV store.",
    "title": "Vercel KV Limits",
    "description": "Learn about Vercel KV's technical limitations.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/image-optimization/managing-image-optimization-costs",
    "markdown": "# Managing Image Optimization Usage & Costs\n\nWhen using Image Optimization it's important to be aware of your [usage](#measuring-usage) to ensure that you do not get any unexpected costs.\n\n[Source images](https://vercel.com/docs/image-optimization/limits-and-pricing#source-images) are what count towards your Image Optimization usage. Your Image Optimization usage is displayed under the Image Optimization section of the Usage tab on your [dashboard](https://vercel.com/dashboard).\n\nThe Source Image Optimization section of the usage page contains a drop-down, which displays a list of all the source images that have been optimized per-day for your entire team.\n\nSee the [Usage](https://vercel.com/docs/image-optimization/limits-and-pricing#usage) section for more information.\n\nPricing is [based](https://vercel.com/docs/image-optimization/limits-and-pricing#billing) on the number of unique [source images](https://vercel.com/docs/image-optimization/limits-and-pricing#source-images) during the billing period. Another way to think about this is unique `src` prop values, regardless of how many `Image` components you have. The usage count of the source images will be reset at the beginning of each billing period.\n\nTo reduce your Image Optimization usage, you should consider the following:\n\n*   Reduce variability in query string parameters for `src` prop and minimize the amount of times you change the `src` property during a billing period\n*   Reduce the number of entries in domains or `remotePatterns` config or change the pattern to be more specific\n*   Change [`domains`](https://nextjs.org/docs/api-reference/next/image#domains) to [`remotePatterns`](https://nextjs.org/docs/api-reference/next/image#remote-patterns) and configure the pattern to be more specific\n*   When using Next.js, you can disable Image Optimization on a per-image basis, by adding the [`unoptimized`](https://nextjs.org/docs/api-reference/next/image#unoptimized) prop to the `<Image />` tag:\n\n```\nimport Image from 'next/image';\n \nexport default function ImageExample() {\n  return (\n    <Image\n      unoptimized\n      src=\"https://unsplash.com/photos/MpL4w1vb798\"\n      alt=\"Picture of a triangle\"\n      width={500}\n      height={500}\n    />\n  );\n}\n```\n\nAlternatively, you can completely disable Image Optimization by setting `unoptimized: true` in your `next.config.js`:\n\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n};\n```\n\nThe `unoptimized` configuration requires Next.js 12.3.0 or newer. If a 3rd party CDN (such as Cloudflare) is used to cache HTML pages but not images, this can result in previously optimized URLs returning 404.\n\nFor more information on the limits, usage, and everything related to billing for Image Optimization, see the [Limits and Pricing](https://vercel.com/docs/image-optimization/limits-and-pricing#billing) page.",
    "title": "Managing Image Optimization Usage & Costs",
    "description": "Learn how to measure and manage Image Optimization usage with this guide to avoid any unexpected costs.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-blob/usage-and-pricing",
    "markdown": "# Vercel Blob Pricing\n\n[Vercel Blob](https://vercel.com/storage/blob) allows you to upload and serve Blob objects for use with your Vercel Projects. Based on the account plan type where these projects are deployed, your Blob stores fall under the following constraints:\n\nVercel Blob usage is measured on the following:\n\n*   Number of basic operations (A basic operation is when the Blob URL is served or when the [head](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk#get-blob-metadata) method is called)\\*\n*   Number of advanced operations (An advanced operation is when any of following methods are called: [put](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk#upload-a-blob), [del](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk#delete-a-blob), [list](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk#list-blobs)). Be aware that `multipart` operations are counted as multiple advanced operations: one when starting the upload, one for each part, and one for completing the upload.\n*   Amount of storage used\n*   Data transferred when the Blob URL is delivered\n\nVercel Blob is currently available in early access. While we will start to collect usage data from the day you upload files, you will not be charged for on-demand usage over the base limits while the project is in Beta.\n\n|     | Hobby | Pro |\n| --- | --- | --- |\n| Basic operations per month | 100,000 | 10 million |\n|     | \\-  | No additional charge while in Beta |\n| Advanced operations per month | 50,000 | 1 million |\n|     | \\-  | No additional charge while in Beta |\n| Storage per month | 250 MB | 10 GB |\n|     | \\-  | No additional charge while in Beta |\n| Data transfer (per month) | 5 GB | 10 GB |\n|     | \\-  | No additional charge while in Beta |\n\n\\* Blob downloads are not counted towards basic operations when the Blob is served from the edge cache. See [caching](https://vercel.com/docs/storage/vercel-blob#caching) for more information.\n\nVercel Blob is free for Hobby users within the [usage limits](#usage).\n\nVercel will send you emails as you are nearing your usage limits. You will not pay for any additional usage. However, you will not be able to access Vercel Blob if limits are exceeded. In this scenario, you will have to wait until 30 days have passed before using Blob storage again.\n\nPro trials have the same limits as [Hobby users](#pricing). If those trial limits are exceeded, you will not be able to use Vercel Blob unless you upgrade to a paid plan. During the trial, you can create a maximum of one database.\n\nVercel will send you emails as you are nearing your [usage](#usage) limits, but you will also be advised of any alerts within the [dashboard](https://vercel.com/dashboard). When you team exceeds the base limits for Vercel Blob on Pro, you will pay for usage on-demand as you use it.\n\nPro teams can [set up Spend Management](https://vercel.com/docs/accounts/spend-management#managing-your-spend-amount) to get notified or to automatically take action, such as [using a webhook](https://vercel.com/docs/accounts/spend-management#configuring-a-webhook) or [pausing your projects](https://vercel.com/docs/accounts/spend-management#pausing-projects) when your usage hits a set spend amount.\n\nVercel Blob is not currently available for Enterprise Teams.",
    "title": "Vercel Blob Pricing",
    "description": "Learn about the pricing for Vercel Blob.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/recipes/add-response-header",
    "markdown": "# Adding a response header\n\nLearn how to add a response header in your Edge Middleware.\n\nThe following example shows how to add a response header in your Edge Middleware.\n\nYour `middleware` file should be placed at the root of your project. If you are using the `src` directory, the file should be placed in the `src` directory.\n\n```\nimport { NextResponse } from 'next/server';\n \nexport function middleware() {\n  // Store the response so we can modify its headers\n  const response = NextResponse.next();\n \n  // Set custom header\n  response.headers.set('x-modified-edge', 'true');\n \n  // Return response\n  return response;\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "Adding a response header",
    "description": "Learn how to add a response header in your Edge Middleware.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/limits",
    "markdown": "# Vercel Postgres Limits\n\n[Vercel Postgres](https://vercel.com/storage/postgres) provides managed, serverless SQL. It supports nearly all Postgres commands, and is compatible with most Postgres clients. This page outlines the limitations of Vercel Postgres.\n\nVercel Postgres databases use version 15 of [PostgreSQL](https://www.postgresql.org/docs/). The following features are fully supported:\n\nAccess to usage metrics for [billing](https://vercel.com/docs/storage/vercel-postgres/usage-and-pricing) purposes, which you can view in your dashboard under the Usage tab.\n\nManaging your databases using SQL\n\nConnecting from Serverless and Edge Functions\n\nPrisma does not currently support connections with Edge Functions except with the Prisma Data Proxy. We recommend connecting using Kysely or Drizzle instead.\n\nThe list below shows what is not currently possible with Vercel Postgres:\n\n*   Provisioning a Vercel Postgres database from the Vercel CLI or the [Vercel Terraform Provider](https://vercel.com/guides/integrating-terraform-with-vercel) is not currently supported\n*   Changing the region of a Vercel Postgres database. You can only select a region when creating a database. To change regions, you must create a new database and migrate your data with a tool like [`pg_dump`](https://www.postgresql.org/docs/current/app-pgdump.html)\n*   Databases for those on Hobby plans are configured with 0.25 logical CPUs\n\nAn inactive Vercel Postgres database may experience [cold starts](https://en.wikipedia.org/wiki/Cold_start_(computing)/).\n\nIf your database is not accessed within a 5 minute period, your database will be suspended. The next time it is accessed, you will experience a \"cold start\" of up to 1 second.\n\nPro plan users can [configure](#prevent-vercel-postgres-from-entering-an-idle-state) the inactive time threshold to decrease the frequency of cold starts.\n\nVercel Postgres is a first-party integration with [Neon](https://neon.tech/), and many of Neon's features are [available with Vercel Postgres](#supported-postgresql-features). However, there are some differences worth noting:\n\nAccessing the Neon web console is not supported\n\nDatabase branching is not currently supported, but will be in the future\n\nConfiguring multiple Postgres access roles. Primary role credentials can be reset anytime\n\nVercel Postgres creates a single database as your primary region. You can't change your primary region once your database is created.\n\nWe recommend choosing the same region as your Serverless and Edge Functions for the lowest latency.\n\nThe following regions are available for Vercel Postgres. You can select a single region, which cannot be changed after your database is created.\n\n| Region Code | Region Name | Location |\n| --- | --- | --- |\n| cle1 | us-east-2 | Cleveland, USA |\n| iad1 | us-east-1 | Washington, D.C., USA |\n| pdx1 | us-west-2 | Portland, USA |\n| fra1 | eu-central-1 | Frankfurt, Germany |\n| sin1 | ap-southeast-1 | Singapore |\n| syd1 | ap-southeast-2 | Sydney, Australia |\n\nVercel Postgres is a first-party integration with Neon. Supported regions for Vercel Postgres correspond to Neon's available regions. We recommend selecting the same regions for your database as your Edge and Serverless Functions.\n\nVercel Postgres databases run PostgreSQL version 15. See the [Postgres compatibility](https://vercel.com/docs/storage/vercel-postgres/supported-postgresql-extensions#supported-extensions) documentation for more information.\n\nWe do not currently support version upgrades. Support for upgrades is coming soon.\n\n[`@vercel/postgres`](https://vercel.com/docs/storage/vercel-postgres/sdk) reads database credentials from environment variables in `process.env`, which are typically populated with variables defined in your `.env` file when deploying locally. Vite does not populate `process.env` with the contents of your `.env` file automatically, meaning you may have issues with SvelteKit, Nuxt, or any other frameworks built on Vite.\n\nThere are two workarounds:\n\n*   Populate `process.env` yourself. The following example uses the [`dotenv-expand`](https://www.npmjs.com/package/dotenv-expand) package:\n    \n    ```\n    // Can also be named nuxt.config.js\n    import dotenvExpand from 'dotenv-expand';\n    import { loadEnv, defineConfig } from 'vite';\n     \n    export default defineConfig(({ mode }) => {\n      // Only modify process.env in development mode\n      if (mode === 'development') {\n        const env = loadEnv(mode, process.cwd(), '');\n        dotenvExpand.expand({ parsed: env });\n      }\n     \n      return {\n        ...\n      };\n    });\n    ```\n    \n*   Or, provide the credentials explicitly. The following example creates a client in SvelteKit with [`$env/static/private`](https://kit.svelte.dev/docs/modules#$env-static-private), which makes the variables in your local `.env` files available to your code:\n    \n    ```\n    import { createPool } from '@vercel/postgres';\n    import { POSTGRES_URL } from '$env/static/private';\n     \n    import { createPool } from '@vercel/postgres';\n    export const pool = createPool({\n      /* config */\n      connectionString: POSTGRES_URL,\n    });\n    ```",
    "title": "Vercel Postgres Limits",
    "description": "Learn about Vercel Postgres's technical limitations.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/recipes/modify-request-headers",
    "markdown": "# Modifying request headers\n\nLearn how to modify request headers in your Edge Middleware.\n\nThe following example shows how to modify request headers in your Edge Middleware.\n\nYour `middleware` file should be placed at the root of your project. If you are using the `src` directory, the file should be placed in the `src` directory.\n\n```\nimport { NextResponse } from 'next/server';\n \nexport function middleware(request: Request) {\n  // Clone the request headers\n  // You can modify them with headers API: https://developer.mozilla.org/en-US/docs/Web/API/Headers\n  const requestHeaders = new Headers(request.headers);\n \n  // Add new request headers\n  requestHeaders.set('x-hello-from-middleware1', 'hello');\n  requestHeaders.set('x-hello-from-middleware2', 'world!');\n \n  // Update an existing request header\n  requestHeaders.set('user-agent', 'New User Agent overriden by middleware!');\n \n  // Delete an existing request header\n  requestHeaders.delete('x-from-client');\n \n  // You can also set request headers in NextResponse.rewrite\n  return NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  });\n}\n```\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "Modifying request headers",
    "description": "Learn how to modify request headers in your Edge Middleware.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-blob/server-upload",
    "markdown": "# Server Uploads with Vercel Blob\n\nIn this quickstart, you'll learn how to do the following:\n\n*   Use the Vercel dashboard to create a Blob store connected to a project\n*   Upload a file using the Blob SDK from the server\n\nVercel Blob works with any frontend framework. First, install the package:\n\n1.  Navigate to the [Project](https://vercel.com/docs/projects/overview) you'd like to add the blob store to. Select the Storage tab, then select the Connect Database button.\n    \n    Under the Create New tab, select Blob and then the Continue button.\n    \n    Use the name \"Images\" and select Create a new Blob store. Select the environments where you would like the read-write token to be included. You can also update the prefix of the Environment Variable in Advanced Options\n    \n    Once created, you are taken to the Vercel Blob store page.\n    \n2.  Since you created the Blob store in a project, we automatically created and added the following Environment Variable to the project for you.\n    \n    *   `BLOB_READ_WRITE_TOKEN`\n    \n    To use this Environment Variable locally, we recommend pulling it with the Vercel CLI:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nServer uploads are perfectly fine as long as you do not need to upload files larger than [4.5 MB on Vercel](https://vercel.com/docs/functions/serverless-functions/runtimes#request-body-size). If you need to upload larger files, consider using [client uploads](https://vercel.com/docs/storage/vercel-blob/client-upload).\n\nThe following example shows how to use a [Server Action](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations) with Next.js App Router to upload a file to Vercel Blob.\n\n```\nimport { put } from '@vercel/blob';\nimport { revalidatePath } from 'next/cache';\n \nexport async function Form() {\n  async function uploadImage(formData: FormData) {\n    'use server';\n    const imageFile = formData.get('image') as File;\n    const blob = await put(imageFile.name, imageFile, {\n      access: 'public',\n    });\n    revalidatePath('/');\n    return blob;\n  }\n \n  return (\n    <form action={uploadImage}>\n      <label htmlFor=\"image\">Image</label>\n      <input type=\"file\" id=\"image\" name=\"image\" required />\n      <button>Upload</button>\n    </form>\n  );\n}\n```\n\nThen, add the hostname to your `next.config.js` file including the store id from the dashboard:\n\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'my-blob-store.public.blob.vercel-storage.com',\n        port: '',\n      },\n    ],\n  },\n};\n \nmodule.exports = nextConfig;\n```\n\nThis will allow you to use [`next/image`](https://nextjs.org/docs/app/api-reference/components/image) to display images from your Vercel Blob store.\n\n```\nimport { list } from '@vercel/blob';\nimport Image from 'next/image';\n \nexport async function Images() {\n  async function allImages() {\n    const blobs = await list();\n    return blobs;\n  }\n  const images = await allImages();\n \n  return (\n    <section>\n      {images.blobs.map((image) => (\n        <Image\n          priority\n          key={image.pathname}\n          src={image.url}\n          alt=\"Image\"\n          width={200}\n          height={200}\n        />\n      ))}\n    </section>\n  );\n}\n```\n\nRead more about [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations) and [App Router](https://nextjs.org/docs) on the Next.js documentation.\n\nYou can upload files to Vercel Blob using Route Handlers/API Routes. The following example shows how to upload a file to Vercel Blob using a server upload page and route.\n\n1.  This page will upload files to your server. The files will then be sent to Vercel Blob.\n    \n    ```\n    'use client';\n     \n    import type { PutBlobResult } from '@vercel/blob';\n    import { useState, useRef } from 'react';\n     \n    export default function AvatarUploadPage() {\n      const inputFileRef = useRef<HTMLInputElement>(null);\n      const [blob, setBlob] = useState<PutBlobResult | null>(null);\n      return (\n        <>\n          <h1>Upload Your Avatar</h1>\n     \n          <form\n            onSubmit={async (event) => {\n              event.preventDefault();\n     \n              if (!inputFileRef.current?.files) {\n                throw new Error('No file selected');\n              }\n     \n              const file = inputFileRef.current.files[0];\n     \n              const response = await fetch(\n                `/api/avatar/upload?filename=${file.name}`,\n                {\n                  method: 'POST',\n                  body: file,\n                },\n              );\n     \n              const newBlob = (await response.json()) as PutBlobResult;\n     \n              setBlob(newBlob);\n            }}\n          >\n            <input name=\"file\" ref={inputFileRef} type=\"file\" required />\n            <button type=\"submit\">Upload</button>\n          </form>\n          {blob && (\n            <div>\n              Blob url: <a href={blob.url}>{blob.url}</a>\n            </div>\n          )}\n        </>\n      );\n    }\n    ```\n    \n2.  This route forwards the file to Vercel Blob and returns the URL of the uploaded file to the browser.\n    \n    ```\n    import { put } from '@vercel/blob';\n    import { NextResponse } from 'next/server';\n     \n    export async function POST(request: Request): Promise<NextResponse> {\n      const { searchParams } = new URL(request.url);\n      const filename = searchParams.get('filename');\n     \n      const blob = await put(filename, request.body, {\n        access: 'public',\n      });\n     \n      return NextResponse.json(blob);\n    }\n    ```\n    \n\n1.  Run your application locally and visit `/avatar/upload` to upload the file to your store. The browser will display the unique URL created for the file.\n    \n    When your local website is served on `http://localhost:3000`, then the `onUploadCompleted` step won't succeed as Vercel Blob cannot contact your localhost. Instead, we recommend you run your local application through a tunneling service like [ngrok](https://ngrok.com/), so you can experience the full Vercel Blob development flow locally.\n    \n2.  *   Go to the Vercel Project where you created the store\n    *   Select the Storage tab and select your new store\n    *   Paste the blob object URL returned in the previous step in the Blob URL input box in the Browser section and select Lookup\n    *   The following blob object metadata will be displayed: file name, path, size, uploaded date, content type and HTTP headers\n    *   You also have the option to download and delete the file from this page\n\nYou have successfully uploaded an object to your Vercel Blob store and are able to review it's metadata, download, and delete it from your Vercel Storage Dashboard.\n\n*   Learn how to [use the methods](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk) available with the `@vercel/blob` package",
    "title": "Server Uploads with Vercel Blob",
    "description": "Learn how to upload files to Vercel Blob using Server Actions and Route Handlers",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/edge-config-limits",
    "markdown": "# Edge Config Limits and pricing\n\nAn [Edge Config](https://vercel.com/storage/edge-config) is a global data store that [enables experimentation with feature flags, A/B testing, critical redirects, and IP blocking](#use-cases). It enables you to read data at the edge without querying an external database or hitting upstream servers.\n\nThe following table outlines the price for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe following table outlines the limits for each resource according to the plan you are on:\n\nThe table below shows the metrics for the [Edge Config](https://vercel.com/docs/pricing/edge-config) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Edge Config usage](https://vercel.com/docs/pricing/edge-config) section for more information on how to optimize your usage.\n\nReads indicate how often your project has requested access to Edge Config to retrieve data through the SDK or the REST API. Vercel counts it as one read, regardless of whether you retrieve one or all items.\n\nWrites represent how often you updated your Edge Config through the SDK or the REST API.\n\nThe maximum store size represents the total size limit of each Edge Config store, including all keys and values of the document.\n\nThe maximum number of stores represents the total number of Edge Config stores that you can create for your account or team.\n\nThe maximum number of stores connected to a project represents the total number of Edge Config stores that you can connect to a single project. Exceeding this amount will result in an [error](https://vercel.com/docs/storage/edge-config/edge-config-limits#edge-config-limit-reached).\n\nThe maximum length of the key name for each item in your Edge Config is determined by the maximum item key name length. The key name must adhere to the regex pattern `^[A-z0-9_-]+$` and should not contain any special characters except for `-` or `_`.\n\nWhen updating an item in your Edge Config, it may take up to 10 seconds for the update to be globally propagated. You should avoid using Edge Configs for frequently updated data or data that needs to be accessed immediately after updating.\n\nBackups are automatically saved when you make any changes, allowing you to [restore](https://vercel.com/docs/storage/edge-config/edge-config-dashboard#restoring-edge-config-backups) to a previous version. See the table above to learn about how long backups are saved for.\n\nTo learn more about backups, see [Edge Config backups](https://vercel.com/docs/storage/edge-config/using-edge-config#edge-config-backups)\n\nIf reading from your Edge Config seems slower than expected, ensure that the following are true:\n\n*   You've set [the connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string) as an environment variable\n*   You are using the [SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) to read from your Edge Config\n*   You see the Edge Config icon on the row for the connected environment variable on the Environment Variables page of your project settings\n*   You are testing on your Vercel deployment, as the optimizations happen only when you deploy to Vercel\n    \n    ![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793440%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-env-icon-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793440%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-env-icon-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Edge Config icon with connected environment variable\n    \n*   You are testing your Vercel deployment. The optimizations happen only when you deploy to Vercel\n\nError: `Tried to attach 4 Edge Configs. Only 3 can be attached to one Deployment at a time.`\n\nDepending on your plan, you can have up to 10 Edge Config stores created for your account. However, you are limited to a maximum of 3 Edge Config stores connected to any single project.\n\nIf you get this error, review your storage by visiting [the Vercel Dashboard](https://vercel.com/dashboard), selecting your project, and selecting the Storage tab. You can use the search filter to see only your Edge Configs. You will have to disconnect one of the stores and redeploy your project.\n\nTo learn how to prevent this error, see [best practices](#edge-config-best-practices).\n\nUpdates to items in your Edge Config will be rejected if the resulting size of your Edge Config would exceed your account plan's limits. When this happens, all members of your team will receive a [notification](https://vercel.com/docs/dashboard-features/notifications) from Vercel, whether the error originated in the dashboard, an API request, or an [Integration](https://vercel.com/docs/storage/edge-config/integrations). The Edge Config editor in your dashboard can detect many cases where the final size would exceed the limit and warn you upfront without triggering the notification.\n\nTo resolve this issue, you can:\n\n*   Delete unused entries from your Edge Config to free up space\n*   [Upgrade your plan](https://vercel.com/pricing)\n*   [Contact sales](https://vercel.com/contact/sales) to unlock larger Edge Config store sizes\n\n*   Where possible, having fewer large stores is better than having multiple small stores, as having fewer Edge Config stores requested more often leads to lower overall latency.\n\nIf you are developing locally or self-hosting, your Edge Config is loaded through the public internet network. In this case, you may wonder if it's safe to have the token as a parameter in the connection string.\n\n*   It is safe to have the token as a parameter in the connection string, because the SDK parses the passed string, then sends the token through an `Authorization` header instead",
    "title": "Edge Config Limits and pricing",
    "description": "Learn about the Edge Configs limits and pricing based on account plans.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/quickstart",
    "markdown": "# Getting Started with Vercel Postgres\n\nThis page will walk you through setting up basic API routes that use [Vercel Postgres](https://vercel.com/docs/storage/vercel-postgres).\n\nIf you'd prefer to deploy a template, head to the [Templates](#Templates) section.\n\nTo follow this quickstart, you'll need the following:\n\n*   An existing [Vercel Project](https://vercel.com/docs/projects/overview#creating-a-project)\n*   The Vercel Postgres package\n*   The latest version of [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli)\n\nIn this quickstart, you'll use Vercel Postgres SDK to create a database of you and your friends' pets.\n\nYou'll learn to:\n\n*   Create a Postgres database that's connected to one of your projects\n*   Create and manage the database in your [dashboard](https://vercel.com/dashboard) on Vercel\n*   Populate the database using [Vercel's Postgres SDK](https://vercel.com/docs/storage/vercel-postgres/sdk)\n*   Send the contents of a PostgreSQL table as a response when someone visits one of your API routes\n\n1.  To get started, let's create a database.\n    \n    1.  In [your dashboard on Vercel](https://vercel.com/dashboard), create or select the project you want to work with\n    2.  Select the Storage tab, then select the Connect Store button\n    3.  Select Postgres\n    4.  Enter a database name. It can only contain alphanumeric letters (including \"\\_\" and \"-\") and can't exceed 32 characters. We'll choose `pets_postgres_db`\n    5.  Select a region. If your project has [Edge](https://vercel.com/docs/edge-network/regions) or [Serverless Functions](https://vercel.com/docs/functions/serverless-functions/regions#), choose an option near their regions for faster responses\n    6.  Select Create and Continue\n    7.  In the next view, change nothing and select Connect\n2.  You now have an empty PostgreSQL database in your selected region!\n    \n    To connect to your database with Vercel Postgres SDK, you need a few credentials. By connecting your database to a project, those credentials are generated and made available as environment variables:\n    \n    *   `POSTGRES_URL`\n    *   `POSTGRES_PRISMA_URL`\n    *   `POSTGRES_URL_NON_POOLING`\n    *   `POSTGRES_USER`\n    *   `POSTGRES_HOST`\n    *   `POSTGRES_PASSWORD`\n    *   `POSTGRES_DATABASE`\n    \n    You can see them by navigating to the Settings tab in your project and selecting the Environment Variables panel.\n    \n3.  When you created your Postgres database and connected it to your project, your API URL and credentials were added to the project as environment variables automatically. You'll need to pull them into your local environment to access your Postgres database.\n    \n    In your terminal, run:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n4.  Next, let's create an API route that, when visited, creates a `Pets` table in your database. It will hold very basic information about your pets.\n    \n    In the `app/api` directory, create `create-pets-table/route.ts`, and add the following contents to the `route` file:\n    \n    ```\n    import { sql } from '@vercel/postgres';\n    import { NextResponse } from 'next/server';\n     \n    export async function GET(request: Request) {\n      try {\n        const result =\n          await sql`CREATE TABLE Pets ( Name varchar(255), Owner varchar(255) );`;\n        return NextResponse.json({ result }, { status: 200 });\n      } catch (error) {\n        return NextResponse.json({ error }, { status: 500 });\n      }\n    }\n    ```\n    \n    Then, create your Pets table by visiting the API route we've just created:\n    \n    1.  Run `next dev` to start your app locally\n    \n    2.  Visit the route's path in your app: [http://localhost:3000/api/create-pets-table](http://localhost:3000/api/create-pets-table)\n    \n    You should see something like this in your browser:\n    \n    ```\n    {\n      \"result\": {\n      \"command\": \"CREATE\",\n      \"fields\": [],\n      \"rowAsArray\": false,\n      \"rowCount\": null,\n      \"rows\": [],\n      \"viaNeonFetch\": true\n      }\n    };\n    ```\n    \n    You can see the table in your Vercel dashboard as well. In your project's Storage tab, select your database, then select Data on the next page. Search for your table name and select it in the dropdown list. It should be empty.\n    \n5.  Now that our table exists, let's add some data.\n    \n    The following API route:\n    \n    1.  Adds a new row to your PostgreSQL database with both the `ownerName` and `petName` fields taken from the [query string](https://en.wikipedia.org/wiki/Query_string) in the URL when the route is visited\n    2.  Returns the contents of the entire table\n    \n    Add this file to your project:\n    \n    ```\n    import { sql } from '@vercel/postgres';\n    import { NextResponse } from 'next/server';\n     \n    export async function GET(request: Request) {\n      const { searchParams } = new URL(request.url);\n      const petName = searchParams.get('petName');\n      const ownerName = searchParams.get('ownerName');\n     \n      try {\n        if (!petName || !ownerName) throw new Error('Pet and owner names required');\n        await sql`INSERT INTO Pets (Name, Owner) VALUES (${petName}, ${ownerName});`;\n      } catch (error) {\n        return NextResponse.json({ error }, { status: 500 });\n      }\n     \n      const pets = await sql`SELECT * FROM Pets;`;\n      return NextResponse.json({ pets }, { status: 200 });\n    }\n    ```\n    \n    To send data to your database, you must visit the route:\n    \n    1.  Run `next dev` to start your app locally\n    \n    2.  Add data to the query params when you visit your route. Here's an example URL that adds a pet named `Fluffy` with an owner named `John` to your database:\n    \n    You should see something like this in your browser:\n    \n    ```\n    {\n      pets: {\n        command: \"SELECT\",\n        fields: [\n          {\n            columnID: 1,\n            dataTypeID: 1043,\n            dataTypeModifier: 259,\n            dataTypeSize: -1,\n            format: \"text\",\n            name: \"name\",\n            tableID: 12345,\n          },\n          {\n            columnID: 2,\n            dataTypeID: 1043,\n            dataTypeModifier: 259,\n            dataTypeSize: -1,\n            format: \"text\",\n            name: \"owner\",\n            tableID: 12345,\n          },\n        ],\n        rowCount: 1,\n        rows: [\n          {\n            name: \"Fluffy\",\n            owner: \"John\",\n          },\n        ],\n        viaNeonFetch: true,\n      },\n    };\n    ```\n    \n    And in your dashboard, under the Data tab when you view your database, you can search for the Pets table to see the pets and owners you've added.\n    \n6.  You now have API routes that create a table in your PostgreSQL database and add data to it!\n    \n    To learn more about using Vercel Postgres in your projects, read [our SDK reference](https://vercel.com/docs/storage/vercel-postgres/sdk).\n    \n\n## Explore Vercel Postgres with a project template",
    "title": "Getting Started with Vercel Postgres",
    "description": "You can get started with writing to and reading data from Vercel Postgres by following this quickstart guide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/quickstart",
    "markdown": "# Vercel KV Quickstart\n\nIn this quickstart, you'll learn how to do the following:\n\n*   Create a KV store called `my-store` that is connected to one of your projects\n*   See how to use the Vercel dashboard to create and manage your database\n*   Populate the KV store using the CLI\n*   Query the KV store using the SDK\n\nLearn more about [how Vercel KV works](https://vercel.com/docs/storage/vercel-kv#how-vercel-kv-works).\n\nVercel KV works with any frontend framework or as a standalone Redis database. First, install the package:\n\nThen, install the Vercel CLI so we can retrieve the Environment Variables:\n\n1.  Navigate to the [Project](https://vercel.com/docs/projects/overview) you'd like to add a KV database to. Select the Storage tab, then select the Connect Database button.\n    \n    Under the Create New tab, select KV and then the Continue button.\n    \n    To use Vercel KV, you must accept the **terms and conditions** notice.\n    \n    Next, create a new store in the dialog:\n    \n    1.  Enter `my-store` (or any other name) under Database Name. The name can not exceed 32 characters\n    2.  Select a [primary region](https://vercel.com/docs/storage/vercel-kv/limits#vercel-kv-region-list)\n    3.  Click Create & Continue\n    4.  Select which [environments](https://vercel.com/docs/projects/environment-variables#environments) of the project to make the database available to. This determines the scope of the environment variables\n    5.  Click Connect\n2.  Your empty store is created in the [primary region](https://vercel.com/docs/storage/vercel-kv/limits#supported-regions) specified. This is the region that all _write operations_ will be routed to.\n    \n    Environment Variables for your KV store were automatically added to your project. These are used to connect to your store. Later in this quickstart, we'll pull them locally so you can use them with your project.\n    \n    *   `KV_URL`\n    *   `KV_REST_API_URL`\n    *   `KV_REST_API_TOKEN`\n    *   `KV_REST_API_READ_ONLY_TOKEN`\n3.  You can send Redis commands to your KV store with the CLI interface in the dashboard. To access the CLI, select your KV store and go to the CLI tab.\n    \n    Use the following command to create a `user:me` [hash](https://redis.io/docs/data-types/hashes/):\n    \n    ```\n    hset user:me email email@me.com id 123\n    ```\n    \n    You can then read the hash with the following command:\n    \n    The CLI will respond with `email, email@me.com, id, 123`.\n    \n    The CLI supports most Redis commands. See our [compatibility docs](https://vercel.com/docs/storage/vercel-kv/redis-compatibility) to learn which commands are available.\n    \n4.  When you created your KV database, your `KV_REST_API_URL` and `KV_REST_API_TOKEN` were created as Environment Variables automatically.\n    \n    To use these Environment Variables in your code, we recommend pulling them with the following Vercel CLI command:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n5.  You can now retrieve data from your KV Store. The Vercel KV client automatically handles serialization and deserialization of JSON data, so you can easily store JSON objects as well as plain strings.\n    \n    ```\n    import { kv } from '@vercel/kv';\n    import { NextResponse } from 'next/server';\n     \n    export async function GET() {\n      const user = await kv.hgetall('user:me');\n      return NextResponse.json(user);\n    }\n    ```\n    \n    To connect to multiple KV stores, use [`createClient`](https://vercel.com/docs/storage/vercel-kv/kv-reference#createclient):\n    \n    ```\n    import { createClient } from '@vercel/kv';\n    import { NextResponse } from 'next/server';\n     \n    export async function GET() {\n      const users = createClient({\n        url: process.env.USERS_REST_API_URL,\n        token: process.env.USERS_REST_API_TOKEN,\n      });\n     \n      const user = await users.hgetall('user:me');\n     \n      const products = createClient({\n        url: process.env.PRODUCTS_REST_API_URL,\n        token: process.env.PRODUCTS_REST_API_TOKEN,\n      });\n     \n      const product = await products.hgetall('product:shirt');\n     \n      return NextResponse.json({ user, product });\n    }\n    ```\n    \n    See [our Redis compatibility docs](https://vercel.com/docs/storage/vercel-kv/redis-compatibility) to learn more about available commands.\n    \n6.  Run your application locally and visit `/api/user` to see your data.",
    "title": "Vercel KV Quickstart",
    "description": "Start using durable Redis with Vercel KV.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/get-started",
    "markdown": "# Getting Started with Edge Config\n\nYou can get started with reading data from [Edge Config](https://vercel.com/storage/edge-config) by creating a new store in the Edge Config tab of your Project. Follow the [steps below](#quickstart) to learn how to do so.\n\nYou can also create and configure your Edge Config at the account level for all use cases by:\n\n*   Install the Edge Config SDK:\n    \n    ```\n    pnpm i @vercel/edge-config\n    ```\n    \n*   An existing project. This quickstart uses Next.js, but you can use any supported framework with Edge Config storage\n*   [Install](https://vercel.com/docs/cli#installing-vercel-cli) or [update](https://vercel.com/docs/cli#updating-vercel-cli) to the latest version of Vercel CLI\n\nIn this quickstart, you'll create an Edge Config called `hello_world_store` at the project-level, through the Vercel [dashboard](https://vercel.com/dashboard). A token and environment variable `EDGE_CONFIG`, that stores the connection string, will be automatically created for you. We'll update the store with a key-value data pair and you'll then read the value of `\"greeting\"` from a local Next.js project.\n\n1.  Navigate to the [Project](https://vercel.com/docs/projects/overview) you'd like to add an Edge Config store to. Click on the Edge Config tab, then click the Connect Store button.\n    \n    Create a new store by typing `hello_world_store` under Edge Config in the dialog that opens, and click Create.\n    \n    The name can only contain alphanumeric letters, \"\\_\" and \"-\". It cannot exceed 32 characters.\n    \n2.  Once created, select `hello_world_store` to see a summary of what was created for you. Notice the following:\n    \n    *   If you select Project, you'll see that your project was connected to the Edge Config by using an environment variable. If you go to your projects's Settings > Environment Variables, you'll see the newly created environment variable.\n    *   If you select Tokens, you'll see a [read access token](https://vercel.com/docs/storage/edge-config/using-edge-config#creating-a-read-access-token). This token, along with your EDGE CONFIG ID, is used to create a [connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string). This connection string is saved as the value of your `EDGE_CONFIG` environment variable. This enables you to use the SDK in your project to read the store's contents.\n    \n    If you're creating a project at the account-level, we won't automatically create a token, connection string, and environment variable until a project has been connected.\n    \n3.  Under Items, add the following key-value pair and click Save Items:\n    \n    ```\n    {\n      \"greeting\": \"hello world\"\n    }\n    ```\n    \n    You can see more information about what can be stored in an Edge Config in the [limits](https://vercel.com/docs/storage/edge-config/edge-config-limits) documentation.\n    \n4.  Once you've created the store, you need to set up your project to read the contents of the store. This is detailed under Learn how to use this in code in the dashboard, but is described in the following steps in more detail.\n    \n    On your local machine, connect your Vercel Project. If you haven't already, install the Edge Config SDK, as mentioned in [prerequisites](#prerequisites).\n    \n5.  Using Vercel CLI, pull the latest environment variables, specifically `EDGE_CONFIG`, so that it's available to your project locally:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n6.  Create [Edge Middleware](https://vercel.com/docs/functions/edge-middleware#create-edge-middleware) for your project by creating a new file called `middleware.js` at the root of the project and if using Next.js, add the following code:\n    \n    ```\n    import { NextResponse } from 'next/server';\n    import { get } from '@vercel/edge-config';\n     \n    export const config = { matcher: '/welcome' };\n     \n    export async function middleware() {\n      const greeting = await get('greeting');\n      return NextResponse.json(greeting);\n    }\n    ```\n    \n    `NextResponse.json` requires at least Next v13.1 or enabling `experimental.allowMiddlewareResponseBody` in `next.config.js`.\n    \n7.  Run your application locally and visit `localhost:3000/welcome` to see your greeting. The middleware intercepts requests to `localhost:3000/welcome` and responds with a greeting, read from your Edge Config store.\n    \n\nYour project is now ready to read more key-value data pairs from the `hello_world_store` Edge Config using the [SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) or [Vercel REST API](https://vercel.com/docs/storage/edge-config/vercel-api).\n\nYour Edge Config uses the public internet for reads when you develop locally. Therefore, you will see higher response times. However, when you deploy your application to Vercel, the reads are optimized to happen at ultra low latency without any network requests.",
    "title": "Getting Started with Edge Config",
    "description": "You can get started with reading data from Edge Config within minutes by following this quickstart guide.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/concepts/incremental-static-regeneration/overview",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/rest-api",
    "markdown": "# Vercel KV Rest API\n\nYou can send Redis commands to [Vercel KV](https://vercel.com/storage/kv) in the following ways:\n\n*   Any Redis client\n*   [Vercel KV SDK](https://vercel.com/docs/storage/vercel-kv/kv-reference)\n*   Vercel KV API\n\nYou should only use Vercel KV API if you're using a runtime that does not have a Redis client, or does not support Node.js or Edge.\n\nTo get started using Vercel KV API, you need your database's REST API URL and REST API token, which Vercel generates when [you connect your project](https://vercel.com/docs/storage/vercel-kv/quickstart#create-a-kv-database). You'll find your URL and token in your project's dashboard under the following environment variables:\n\n*   `KV_REST_API_URL`\n*   `KV_REST_API_TOKEN`\n\nTo access them locally run the following command at the root directory of your project, using [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli):\n\n```\nvercel env pull .env.development.local\n```\n\nYou can then use the environment variables in your code with `process.env`:\n\n```\nfetch(`${process.env.KV_REST_API_URL}`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\nOr with the `_token` query parameter to authenticate your requests.\n\n```\nconst { KV_REST_API_URL, KV_REST_API_TOKEN } = process.env;\n \nfetch(`${KV_REST_API_URL}?_token=${KV_REST_API_TOKEN}`)\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\nVercel automatically generates an API URL when you [connect your KV database to a project](https://vercel.com/docs/storage/vercel-kv/quickstart), which you can find under Endpoint on your database information page.\n\nTo make requests to your API URL, pass the API token in the `Authorization` header using the code from the Fetch tab of the dashboard quickstart:\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fvercel-kv%2Ffetch-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fvercel-kv%2Ffetch-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nVercel KV also generates a read-only API token, which grants access only to read commands. It also disables the `KEYS` command. You can access your read-only token with the `KV_REST_API_READ_ONLY_TOKEN` environment variable.\n\nYou can send basic commands in two ways:\n\n*   Add commands to the path of your API URL, separating each element of the command into their own paths with a `/`.\n    *   If a value contains slashes, such as setting a key named `redirectURL` to `https://example.com`, you must send commands in the `body`.\n*   Send Redis commands in the `body` of a `POST` request to your KV API URL. You must break each parameter of the command out into items in an array. Commands can have as many parameters as is allowed by the Redis Protocol.\n\n`[path]/set/{key}/{value}/{options}`\n\nExample\n\nDefine in path:\n\n```\n// SET userId abc EX 100\nfetch(`${process.env.KV_REST_API_URL}/set/userId/abc/ex/100`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\nDefine in body:\n\n```\nfetch(`${process.env.KV_REST_API_URL}/`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n  body: '[\"HSET\", \"sessionData\", \"username\", \"exampleUser123\"]',\n  method: 'POST',\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n| `value` | Yes | string, number or boolean | The value to set |\n| `options` | No  | object | An object whose keys can be [command arguments](https://redis.io/docs/reference/command-arguments/) |\n\n`[path]/get/{key}`\n\nExample\n\nDefine in path:\n\n```\nfetch(`${process.env.KV_REST_API_URL}/get/userId`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\nDefine in body:\n\n```\nfetch(`${process.env.KV_REST_API_URL}/`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n  body: '[\"GET\", \"userId\"]',\n  method: 'POST',\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n\n*   url = `${process.env.KV_REST_API_URL}/set/{key}`\n*   method = POST\n*   Body = JSON object\n\n```\n// SET userSession jsonObject\nfetch(`${process.env.KV_REST_API_URL}/set/userSession`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n  body: JSON.stringify({\n    sessid: '12345',\n    session_name: 'abcdef',\n    user: {\n      uid: 31,\n      name: 'test_user',\n      mail: 'user@example.com',\n    },\n  }),\n  method: 'POST',\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n```\n\nPath Parameters\n\n| Path Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n\nThis allows you to store user file contents in your KV database.\n\nEndpoint:\n\n*   url = `${process.env.KV_REST_API_URL}/set/binaryKey`\n*   method = POST\n*   Body = Binary data, such as files attached through HTML [`<input>`](https://developer.mozilla.org/docs/Web/HTML/Element/input/file) elements\n\nExample\n\n```\nexport default function FileInput() {\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n \n  function setFileToKey() {\n    if (!fileInputRef?.current?.files) {\n      return console.log('No file found');\n    }\n    fetch(`${process.env.KV_REST_API_URL}/set/binaryKey`, {\n      headers: {\n        Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n      },\n      body: fileInputRef.current.files[0],\n      method: 'POST',\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(data));\n  }\n \n  return (\n    <>\n      <input ref={fileInputRef} type=\"file\" />\n      <button onClick={setFileToKey}>Upload file</button>\n    </>\n  );\n}\n```\n\nThere are two ways to send multiple commands to your KV database from the Rest API:\n\n*   [Pipelining](#using-pipelining) - Pipelining executes multiple commands in one network request. However, pipelining is not atomic, so other client requests _can_ be processed in the between.\n*   [Transactions](#sending-redis-transactions) - [Transactions](https://redis.io/docs/manual/transactions) allow you to send multiple commands to your KV database in one network request. However, transactions are executed atomically, which means commands sent from other client instances will not be executed in between a transaction's commands.\n\nEndpoint:\n\n*   url\\= `${process.env.KV_REST_API_URL}/pipeline`\n*   method = POST\n*   body = Redis commands in a two-dimensional array. Define arguments in the same order that you would with a standard Redis command\n\nExample\n\n```\nfetch(`${process.env.KV_REST_API_URL}/pipeline`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n  // SET userEmail example@example.com EX 100\n  // GET userEmail\n  body: `[\n    [\"SET\", \"userEmail\", \"example@example.com\", \"EX\", 100],\n    [\"GET\", \"userEmail\"]\n  ]`,\n  method: 'POST',\n})\n  .then((response) => response.json())\n  .then((data) => console.table(data));\n```\n\nEndpoint:\n\n*   url = `${process.env.KV_REST_API_URL}/multi-exec`\n*   method = POST\n*   body = Redis commands in a two-dimensional array. Define arguments in the same order that you would with a standard Redis command\n\nExample\n\n```\nfetch(`${process.env.KV_REST_API_URL}/multi-exec`, {\n  headers: {\n    Authorization: `Bearer ${process.env.KV_REST_API_TOKEN}`,\n  },\n  // HSET sessionData userEmail example@example.com\n  // HGET sessionData userEmail\n  body: `[\n    [\"HSET\", \"sessionData\", \"userEmail\", \"example@example.com\"],\n    [\"HGET\", \"sessionData\", \"userEmail\"]\n  ]`,\n  method: 'POST',\n})\n  .then((response) => response.json())\n  .then((data) => console.table(data));\n```\n\nResponse\n\nIf your transaction is successful, the response will be an array of result objects in the same order as the commands. The following is an example response array:\n\n```\n[\n  {\n    \"result\": \"OK\"\n  },\n  {\n    \"result\": \"example@example.com\"\n  }\n]\n```\n\nThe following table displays the possible HTTP responses you can receive from API requests, and what they mean.\n\n| HTTP Code | HTTP Status | Meaning |\n| --- | --- | --- |\n| `200` | OK  | The command was successfully executed. |\n| `400` | Bad Request | The command was invalid/[unsupported](https://vercel.com/docs/storage/vercel-kv/redis-compatibility), contained a syntax error, or failed to execute. |\n| `401` | Unauthorized | Authentication failed, likely due to an invalid or missing API token. |\n| `405` | Method Not Allowed | An unsupported HTTP method was used. Only `HEAD`, `GET`, `POST`, and `PUT` methods are allowed when making API requests. |",
    "title": "Vercel KV Rest API",
    "description": "Learn how to access and use your KV database with the Vercel KV Rest API.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/vercel-kv-error-codes",
    "markdown": "# Vercel KV Error Codes\n\n```\nReplyError: NOAUTH Authentication required\n```\n\nYour redis client failed to connect to your KV store. This error occurs when your password is missing from your connection parameters.\n\nYou'll most likely encounter this error when using your favorite redis CLI interface to connect to your KV store.\n\nYou can access the appropriate connection string with your KV store's password in the Quickstart section of [the Storage tab in your vercel dashboard](https://vercel.com/dashboard/stores).\n\nYour connection string should look like the following example:\n\n```\nredis://********example-store-name.redis.vercel-storage.com:12345\n```\n\nTroubleshoot:\n\n*   Check that your connection string does not have a typo, such as a missing `:` before the password\n\n```\nUnhandled error event: Error: read ECONNRESET at TCP.onStreamRead (node:internal/stream_base_commons:123:12)\n```\n\nYour redis client failed to connect to your KV store. This error occurs when your connection is not TLS enabled. All KV stores are TLS enabled by default. You cannot disable TLS.\n\nBe sure to use the `--tls` or equivalent option when connecting to your KV store through a CLI or redis client.\n\nTroubleshoot:\n\n*   Enable TLS in your redis client or CLI when connecting to your KV store\n*   Ensure that your KV store's connection string starts with `redis://`.\n\n```\n\"message\" : \"Unhandled error event:\nReplyError: ERR max concurrent connections exceeded\\r\nat Object.onceWrapper (events.js:286:20)\\r\nat Socket.emit (events.js:203:15)\\r    at Socket.EventEmitter.emit (domain.js:448:20)\\r\nat TCPConnectWrap.afterConnect [as oncomplete] (net.js:1093:10)\\n\"\n```\n\nYour redis client failed to connect to your KV store. This error occurs when your KV store has reached its max concurrent connection limit.\n\nThis can happen if you are not closing connections after opening them, such as in Serverless or Edge functions.\n\nTroubleshoot:\n\n*   Try to create clients within the functions that will use them, then close them when the function is done with them\n*   [Use our `@vercel/kv` SDK or the Vercel KV API](https://vercel.com/docs/storage/vercel-kv/kv-reference) to manage your database using REST. Using REST will allow you to avoid hitting your connection limit\n*   [Upgrade your plan to Pro or Enterprise](https://vercel.com/pricing) to increase your connection limit\n\n```\nReplyError: ERR max request size exceeded\n```\n\nThe command you sent to your KV store exceeds the max request size, which [varies based on your account plan](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing).\n\nTroubleshoot:\n\n*   You can split your data into smaller chunks and send them in separate commands\n*   You can [upgrade your account plan to Pro or Enterprise](https://vercel.com/pricing) to increase your max request size limit\n\n```\nReplyError: ERR max single record size exceeded\n```\n\nAn entry in your KV store has exceeded the max record size limit for your account.\n\nYou may reach this limit either by inserting a single huge value or appending many small values to an entry. This entry can be a `String`, `List`, `Set`, `Hash` etc. Read (`GET`, `LRANGE`, `HMGET`, `ZRANGE` etc) and delete (`DEL`, `LPOP`, `HDEL`, `SREM` etc) requests will not be affected.\n\nTroubleshoot:\n\n*   You can split your data into smaller chunks and store them as separate entries with different keys.\n*   You can [upgrade your account plan to Pro or Enterprise](https://vercel.com/pricing) to increase your max request size limit\n\n```\nReplyError: ERR max key size exceeded. Limit: X bytes, Actual: Z bytes\n```\n\nThe size of the key you're trying to create in your KV store is larger than 32 KB.\n\nTroubleshoot:\n\n*   32 KB is the max size for a data key in your KV store. This size cannot be exceeded\n\n```\nReplyError: ERR max field size exceeded. Limit: X bytes, Actual: Z bytes\n```\n\nThe size of a `HASH` field you're trying to create in your KV store exceeds the max field size limit, which is 32 KB.\n\nTroubleshoot:\n\n*   32 KB is the max size for a `HASH` field in your KV store. This size cannot be exceeded\n\n```\nReplyError: ERR max member size exceeded. Limit: X bytes, Actual: Z bytes\n```\n\nThe size of a SET or ZSET member you're trying to create in your KV store exceeds the max field size limit, which is 32 KB.\n\nTroubleshoot:\n\n*   32 KB is the max size for a `SET` or `ZSET` member in your KV store. This size cannot be exceeded\n\n```\nReplyError: ERR DB capacity quota exceeded\n```\n\nYour KV store has exceeded the max size allowed for your account. See [our docs on Vercel KV usage and pricing](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing) to learn more.\n\nTroubleshoot:\n\n*   You can manually delete some entries to allow further writes\n*   Consider setting TTL (expiration time) for your keys, or [enabling eviction](https://vercel.com/docs/storage/vercel-kv/configuring-a-database#eviction) for your KV store\n*   You can [upgrade your account plan to Pro or Enterprise](https://vercel.com/pricing) to increase your max KV store size limit\n\n```\nReplyError: ERR max daily request limit exceeded\n```\n\nYour KV store has exceeded the max daily request count limit by sending too many commands in a 24 hour period. See [our docs on Vercel KV usage and pricing](https://vercel.com/docs/storage/vercel-kv/usage-and-pricing) to learn more.\n\nTroubleshoot:\n\n*   Try to reduce the amount of commands your application or client sends per day\n*   You can [upgrade your account plan to Pro or Enterprise](https://vercel.com/pricing) to increase your max KV store daily request limit\n\n```\nUpstashError: WRONGPASS invalid or missing auth token\n```\n\nYour redis client failed to connect to your KV database. This error occurs when you try to authenticate with a missing or invalid auth token.\n\nYou can find the auth token in the Vercel dashboard, under the Storage tab. You can also find it in your project's settings, in the Environment Variables section. Your auth tokens should be:\n\n*   `KV_REST_API_TOKEN`\n*   `KV_REST_API_READ_ONLY_TOKEN`\n\nIf your KV database uses a custom Environment Variable prefix, it will replace `KV` in the Environment Variable names. For example, if your prefix is `SESSIONS`, your API token will be `SESSIONS_REST_API_TOKEN`\n\n*   Ensure your KV database is connected to your Vercel project. Follow [the Vercel KV quickstart](https://vercel.com/docs/storage/vercel-kv/quickstart) to learn how\n*   Ensure your KV database's credentials are available in your local environment variables with Vercel CLI. Follow [the Vercel KV quickstart](https://vercel.com/docs/storage/vercel-kv/quickstart) to learn how",
    "title": "Vercel KV Error Codes",
    "description": "This section focuses on errors that can happen while using a client, Vercel KV SDK, or Vercel KV API to interact with your Vercel KV database.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/sdk",
    "markdown": "# @vercel/postgres\n\nThe `@vercel/postgres` SDK provides an efficient way to interact with your Postgres database. It is 100% compatible with the [`node-postgres`](https://node-postgres.com/) library. You can use the following options:\n\n*   [`sql` (recommended)](#sql)\n*   [`db`](#db)\n*   [`createClient()`](#createclient)\n\nConstruct SQL queries with the `sql` [template literal tag](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#tagged_templates). This function translates your query into a native Postgres parameterized query to help [prevent SQL injections](#preventing-sql-injections). It is recommended for one-off queries.\n\nThe `sql` function automatically creates a pooled database connection for you and connects to the database specified in the `process.env.POSTGRES_URL` Environment Variable.\n\n```\nimport { sql } from '@vercel/postgres';\n \nconst likes = 100;\nconst { rows, fields } =\n  await sql`SELECT * FROM posts WHERE likes > ${likes} LIMIT 5;`;\n```\n\nWhen querying databases with a large number of rows, you may want to paginate your responses to prevent resource attacks. You can do this by using the `LIMIT` and `OFFSET` clauses in your query.\n\n```\nimport { sql } from '@vercel/postgres';\n \nconst pageSize = 10; // Number of records per page\nconst pageNumber = 1; // Specific page number\n \nconst offset = (pageNumber - 1) * pageSize;\n \n// Fetching records for the specific page number returning 10 records per page\nconst { rows, fields } =\n  await sql`SELECT * FROM posts WHERE likes > ${likes} LIMIT ${pageSize} OFFSET ${offset};`;\n```\n\n| Query | Description |\n| --- | --- |\n| `CREATE TABLE posts (likes INT);` | Create a new table in the database |\n| `SELECT * FROM posts;` | Get all posts in the database |\n| `SELECT * FROM posts WHERE likes > ${likes};` | Get all posts with more than 100 likes |\n| `INSERT INTO posts (likes) VALUES (${likes});` | Insert a new post into the database |\n| `UPDATE posts SET likes = 200;` | Update all posts to have 200 likes |\n| `DELETE FROM posts;` | Delete all posts in the database |\n\nYou can't call `sql` like a regular function. Attempting to do so will throw an error. This is a security measure to prevent the possibility of SQL injections.\n\nYou can run database queries in our built-in data browser. Go to your Postgres database in the dashboard and click on the **Data** tab.\n\nHere's how we process queries sent with the `sql` template tag to prevent SQL injections for you:\n\n1.  The SDK extracts your parameters and adds them to an array\n2.  The SDK sends the query string and the array of parameters to your PostgreSQL server. This is called a [parameterized query](https://node-postgres.com/features/queries#parameterized-query), and it's a common pattern in modern JavaScript SQL libraries\n3.  Your Postgres server sanitizes your parameters and inserts them into your query\n4.  Your query is finally executed\n\nAt every step of this process, until the end, your query is not possible to execute. Only when the parameters are substituted back in by the server can the query execute, and by then the parameters have been sanitized.\n\nYou can create a client to connect to your Postgres database (pooled) using the `db` method. Vercel will automatically manage connections to your database for you.\n\n```\nimport { db } from '@vercel/postgres';\n \nconst client = await db.connect();\nawait client.sql`SELECT 1`;\n```\n\nCreating a client is preferred over the `sql` helper if you need to make multiple queries or want to run transactions, as `sql` will connect for every query.\n\nIf you want to connect to the non-default database using an Environment Variable, you can use the `createPool()` method with the `connectionString` parameter. The pool returned from `createPool` is an instance of the `Pool` class from [`node-postgres`](https://node-postgres.com/apis/pool).\n\nIndividual clients can be created, connected, and disconnected for each query. This method is less efficient than using `db` and should only be used when a single client is required.\n\n```\nimport { createClient } from '@vercel/postgres';\n \nasync function queryPosts() {\n  const client = createClient();\n  await client.connect();\n \n  try {\n    const likes = 100;\n    const { rows, fields } =\n      await client.sql`SELECT * FROM posts WHERE likes > ${likes};`;\n  } finally {\n    await client.end();\n  }\n}\n```\n\nYou can optionally pass `createClient` a `connectionString` parameter to connect to a specific database. If no `connectionString` is provided, the SDK will use the default `process.env.POSTGRES_URL_NON_POOLING` Environment Variable.\n\nThe client returned from `createClient` is an instance of the `Client` class from [`node-postgres`](https://node-postgres.com/apis/client).\n\nWhen using `createClient()`, you must close the connection at the end of your queries. You can do so by using `client.end()`.\n\n```\nimport { createClient } from '@vercel/postgres';\n \nconst client = createClient();\nawait client.connect();\n \ntry {\n  await client.sql`SELECT 1`;\n} finally {\n  await client.end();\n}\n```\n\nYou can use Vercel Postgres with many popular ORMs. In general, we recommend using one of our recommended ORMs, or a client you prefer, to access your Postgres database.\n\nLearn more about [using an ORM with Vercel Postgres](https://vercel.com/docs/storage/vercel-postgres/using-an-orm).\n\n`@vercel/postgres` supports all valid PostgreSQL 15 queries. See [Postgres compatibility](https://vercel.com/docs/storage/vercel-postgres/supported-postgresql-extensions) for more information.\n\nDo not use `@vercel/postgres` in public-facing clients such as the browser. This will expose your database URL, granting write access to those who uses it. We recommend using this SDK only on the server.\n\nAlways use parameterized queries, an ORM, or query builder when creating queries with user-defined inputs to minimize the likelihood of SQL injection attacks. The [`sql`](#sql) function in the `@vercel/postgres` package [translates raw queries to parameterized queries for you](#preventing-sql-injections).",
    "title": "@vercel/postgres",
    "description": "View the API reference for the Vercel Postgres SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/redis-compatibility",
    "markdown": "# Vercel KV Redis Compatibility\n\n[Vercel KV](https://vercel.com/storage/kv) supports commands compatible with [the Redis client protocol](https://redis.io/docs/reference/protocol-spec/) up to `v6.2`.\n\nThis documentation provides an overview and examples of the Redis commands supported by our Redis database. For a comprehensive understanding of each command and its options, please refer to the [official Redis documentation](https://redis.io/commands).\n\nThe Redis String data type is used to store and manipulate an array of bytes representing a sequence of characters. Here's an example using the `SET` and `GET` commands:\n\n```\n> SET user:1 \"John Doe\"\nOK\n> GET user:1\n\"John Doe\"\n```\n\nSupported commands:\n\nRedis Bitmaps are used to store and manipulate bit arrays. Bitmaps are not a separate data type, but a set of bit-oriented operations defined on the String type. Here's an example using the `SETBIT` and `GETBIT` commands:\n\n```\n> SETBIT user:1:flags 0 1\n(integer) 0\n> GETBIT user:1:flags 0\n(integer) 1\n```\n\nSupported commands:\n\nRedis Hash is a data type used to store key-value pairs. Here's an example using the `HSET` and `HGET` commands:\n\n```\n> HSET user:1 name \"John Doe\"\n(integer) 1\n> HGET user:1 name\n\"John Doe\"\n```\n\nSupported commands:\n\nRedis Lists are ordered collections of strings. Here's an example using the `LPUSH` and `LRANGE` commands:\n\n```\n> LPUSH fruits \"apple\"\n(integer) 1\n> LPUSH fruits \"banana\"\n(integer) 2\n> LRANGE fruits 0 -1\n1) \"banana\"\n2) \"apple\"\n```\n\nSupported commands:\n\nRedis Sets are unordered collections of unique strings. Here's an example using the `SADD` and `SMEMBERS` commands:\n\n```\n> SADD colors \"red\"\n(integer) 1\n> SADD colors \"blue\"\n(integer) 1\n> SMEMBERS colors\n1) \"red\"\n2) \"blue\"\n```\n\nSupported commands:\n\nRedis Sorted Sets are non-repeating collections of strings ordered by a score. Here's an example using the `ZADD` and `ZRANGE` commands:\n\n```\n> ZADD scores 10 \"player1\"\n(integer) 1\n> ZADD scores 20 \"player2\"\n(integer) 1\n> ZRANGE scores 0 -1 WITHSCORES\n1) \"player1\"\n2) \"10\"\n3) \"player2\"\n4) \"20\"\n```\n\nSupported commands:\n\nRedis Geo data type is used to store and manipulate geographical information. Here's an example using the `GEOADD` and `GEORADIUS` commands:\n\n```\n> GEOADD cities 13.4050 52.5200 \"Berlin\"\n(integer) 1\n> GEOADD cities 2.3522 48.8566 \"Paris\"\n(integer) 1\n> GEORADIUS cities 13.4050 52.5200 1000 km WITHDIST\n1) 1) \"Berlin\"\n   2) \"0.0000\"\n2) 1) \"Paris\"\n   2) \"878.9692\"\n```\n\nSupported commands:\n\nRedis HyperLogLog is a probabilistic data structure used to estimate the cardinality of a set. Here's an example using the `PFADD` and `PFCOUNT` commands:\n\n```\n> PFADD users \"Alice\"\n(integer) 1\n> PFADD users \"Bob\"\n(integer) 1\n> PFADD users \"Alice\"\n(integer) 0\n> PFCOUNT users\n(integer) 2\n```\n\nSupported commands:\n\nRedis Scripting allows the execution of Lua scripts on the server-side. Here's an example using the `EVAL` command:\n\n```\n> SET counter 10\nOK\n> EVAL \"return redis.call('INCR', KEYS[1])\" 1 counter\n(integer) 11\n```\n\nSupported commands:\n\nPub/Sub is not currently supported through the Vercel KV SDK. Instead, you can use the native Redis client.\n\nRedis Pub/Sub allows sending messages between different clients through channels. Here's an example using the `PUBLISH` command:\n\n```\n> PUBLISH news \"Breaking news: Redis documentation updated!\"\n(integer) 5\n```\n\nSupported commands:\n\nRedis Transactions group multiple commands together, ensuring they are executed sequentially and atomically. Here's an example using the `MULTI`, `INCR`, and `EXEC` commands:\n\n```\n> SET balance 100\nOK\n> MULTI\nOK\n> INCR balance\nQUEUED\n> INCR balance\nQUEUED\n> EXEC\n1) (integer) 101\n2) (integer) 102\n```\n\nSupported commands:\n\nRedis Generic commands provide general functionality for managing keys. Here's an example using the `EXISTS` and `DEL` commands:\n\n```\n> SET key1 \"value1\"\nOK\n> EXISTS key1\n(integer) 1\n> DEL key1\n(integer) 1\n> EXISTS key1\n(integer) 0\n```\n\nSupported commands:\n\nRedis Connection commands are used to manage client connections to the server. Here's an example using the `PING` command:\n\nSupported commands:\n\nRedis Server commands provide information and control over the Redis server. Here's an example using the `DBSIZE` and `FLUSHDB` commands:\n\n```\n> SET key1 \"value1\"\nOK\n> SET key2 \"value2\"\nOK\n> DBSIZE\n(integer) 2\n> FLUSHDB\nOK\n> DBSIZE\n(integer) 0\n```\n\nSupported commands:\n\nRedis JSON provides native support for storing and manipulating JSON data. Here's an example using the `JSON.SET` and `JSON.GET` commands:\n\n```\n> JSON.SET user . '{\"name\": \"Alice\", \"age\": 30}'\nOK\n> JSON.GET user\n\"{\"name\":\"Alice\",\"age\":30}\"\n```\n\nSupported commands:\n\nRedis Streams provide a data structure for managing and processing streams of data. Here's an example using the `XADD` and `XRANGE` commands:\n\n```\n> XADD mystream * sensor-id 1234 temperature 19.8\n\"1623791288816-0\"\n> XADD mystream * sensor-id 5678 temperature 21.3\n\"1623791288816-1\"\n> XRANGE mystream - +\n1) 1) \"1623791288816-0\"\n   2) 1) \"sensor-id\"\n      2) \"1234\"\n      3) \"temperature\"\n      4) \"19.8\"\n2) 1) \"1623791288816-1\"\n   2) 1) \"sensor-id\"\n      2) \"5678\"\n      3) \"temperature\"\n      4) \"21.3\"\n```\n\nSupported commands:\n\nSince Vercel KV is a serverless, durable key-value store, you don't need to manage clusters or horizontal scaling.",
    "title": "Vercel KV Redis Compatibility",
    "description": "Learn about the Redis commands Vercel KV supports.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-kv/kv-reference",
    "markdown": "# @vercel/kv\n\nEvery supported Redis command can be executed with the [Vercel KV](https://vercel.com/storage/kv) SDK by calling it as a method. For example, to set a key value you'd call `kv.set()`, and to increment a key value you'd call `kv.incr()`.\n\nThis page will teach you how to connect to your KV stores, and demonstrate a few example commands you can use to get started and understand how Redis commands map to the KV SDK.\n\n*   For a reference of unsupported Redis commands, see [our Redis Compatibility docs](https://vercel.com/docs/storage/vercel-kv/redis-compatibility)\n*   For a reference of all valid Redis commands, see [the official Redis docs](https://redis.io/commands/)\n*   For a reference of all valid Redis data types, see [the official Redis docs](https://redis.io/docs/data-types/)\n\nThere are two ways to connect to your KV stores:\n\n1.  The `kv` client, which is a pooled client that uses your `KV_REST_API_TOKEN` and `KV_REST_API_URL` to connect to a KV store\n2.  The `createClient` method\n\nSee [our quickstart](https://vercel.com/docs/storage/vercel-kv/quickstart#query-your-kv-store) to learn how to do both.\n\nThe `createClient` method allows you to use a custom database URL and access token to connect to a Vercel KV database. It takes a config object with the following properties:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `url` | Yes | string | The REST\\_API\\_URL generated when you connect your KV store to a Vercel project |\n| `token` | Yes | string | The REST\\_API\\_TOKEN generated when you connect your KV store to a Vercel project |\n\n```\nimport { createClient } from '@vercel/kv';\n \nexport async function GET() {\n  const users = createClient({\n    url: process.env.USERS_REST_API_URL,\n    token: process.env.USERS_REST_API_TOKEN,\n  });\n \n  const user = await users.hgetall('user:me');\n \n  const products = createClient({\n    url: process.env.PRODUCTS_REST_API_URL,\n    token: process.env.PRODUCTS_REST_API_TOKEN,\n  });\n \n  const product = await products.hgetall('product:shirt');\n  return Response.json(\n    {\n      user,\n      product,\n    },\n    {\n      status: 200,\n    },\n  );\n}\n```\n\nThe following commands allow you to interact with key values in your Vercel KV database.\n\n[Review all the string (key value) commands](https://redis.io/commands/?group=string).\n\nTo run the Redis `SET` command to create a key, use the `.set()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n| `value` | Yes | string, number, object, or boolean | The value to set |\n| `options` | No  | object | An object whose keys can be [command arguments](https://redis.io/docs/reference/command-arguments/) |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.set('setExample', '123abc', { ex: 100, nx: true });\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `GET` command to fetch a key's value, use the `.get()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    const getExample = await kv.get('getExample');\n    console.log(getExample);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n[Hashes](https://redis.io/docs/data-types/hashes/) are like JavaScript objects, allowing you to store multiple values. They're typically used for session caches. The following commands allow you to interact with hash values in your Vercel KV database.\n\n[Review all the hash commands](https://redis.io/commands/?group=hash).\n\nTo run the Redis `HSET` command to create a hash, use the `.hset()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the key |\n| `value` | Yes | object | The object value |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.hset('userSession', { userId: 123, email: 'ex@example.com' });\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `HGET` command to fetch a key's value from a hash, use the `.hget()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the hash |\n| `field` | Yes | string | The name of the key to fetch from the hash |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    const userId = await kv.hget('userSession', 'userId');\n    console.log(userId);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n[Lists](https://redis.io/docs/data-types/lists/) are linked lists of string values. They're typically used for queue management in background worker systems. The following commands allow you to interact with hash values in your Vercel KV database.\n\n[Review all the list commands](https://redis.io/commands/?group=list).\n\nTo run the Redis `LPUSH` command to create a list or append an item to an existing one, use the `.lpush()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the list |\n| `ele1`, `ele2` | Yes | list of the same type | You can pass as many parameters as you want of the same type. They will be the elements of the list. |\n| `options` | No  | object | An object whose keys can be [command arguments](https://redis.io/docs/reference/command-arguments/) |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.lpush(\n      'badIpList',\n      'abc12304040',\n      'xyz98773456',\n      'you can keep going',\n      \"as long as they're\",\n      'all the same type',\n    );\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `LRANGE` command to fetch values from a list, use the `.lrange()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the list |\n| `start` | Yes | number | The beginning index in the range of items to return from the list. `0` is the first element. |\n| `end` | Yes | number | The final index in the range of items to return from the list. `0` is the first element. |\n\nThe start and end indexes can be negative numbers. `-1` is the end of the list.\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    // 0 is the first element; -1 is the last element\n    // So this returns the whole list\n    const list = await kv.lrange('badIpList', 0, -1);\n    console.log(userId);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n[Sets](https://redis.io/docs/data-types/sets/) are unordered collections of unique string values. They're typically used for tracking unique items and representing relations. The following commands allow you to interact with sets in your Vercel KV database.\n\n[Review all the set commands](https://redis.io/commands/?group=set).\n\nTo run the Redis `SADD` command to add specified members to the set stored at the specified key, use the `.sadd()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the set |\n| `mem1`, `mem2` | Yes | list of strings | You can pass as many members as you want. They will be the members of the list. |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.sadd('myset', 'mem1', 'mem2');\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `SREM` command to remove the specified members from the set stored at the specified key, use the `.srem()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the set |\n| `mem1`, `mem2` | Yes | list of strings | You can pass as many members as you want. They will be the members of the list. |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.srem('myset', 'mem1', 'mem2');\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `SISMEMBER` command to check if the specified member is a member of the set stored at the specified key, use the `.sismember()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the set |\n| `member` | Yes | string | The member that you want to check for |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    const isMember = await kv.sismember('myset', 'member');\n    // returns 1 if the member is part of the set and 0 if not\n    console.log(isMember);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n[Sorted sets](https://redis.io/docs/data-types/sorted-sets/) are collections of unique string values (members) ordered by an associated score. They're typically used for maintaining ordered lists such as high scores. The following commands allow you to interact with sets in your Vercel KV database.\n\n[Review all the sorted set commands](https://redis.io/commands/?group=sorted-set).\n\nTo run the Redis `ZADD` command to add all the specified members with the specified scores to the sorted set stored at the specified key, use the `.zadd()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the set |\n| `{score: 1, member: 'mem1'}`, `{score: 2, member: 'mem2'}` | Yes | list of score objects: `score: number, member: string` | You can pass as many score-member objects as you want. They will be the members of the list ordered by the score of each object. |\n| `options` | No  | object | An object whose keys can be [command arguments](https://redis.io/docs/reference/command-arguments/) |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.zadd(\n      'mysortedset',\n      { score: 1, member: 'team1' },\n      { score: 2, member: 'team2' },\n    );\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `ZRANGE` command to get the specified member(s) within a specified range of scores in the sorted set stored at the specified key, use the `.zrange()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the set |\n| `start` | Yes | number | The start score of the range |\n| `stop` | Yes | number | The end score of the range |\n| `options` | No  | object | An object whose keys can be [command arguments](https://redis.io/docs/reference/command-arguments/) |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    const data = await kv.zrange('mysortedset', 1, 3);\n    console.log(data);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n[Bitmaps](https://redis.io/docs/data-types/bitmaps/) are an extension of the string data type with the ability of containing [bit vectors](https://www.gnu.org/software/guile/manual/html_node/Bit-Vectors.html). They're typically used for efficient set representations where the members correspond to integers `0-N` or for object permissions. The following commands allow you to interact with sets in your Vercel KV database.\n\n[Review all the bitmap commands](https://redis.io/commands/?group=bitmap).\n\nTo run the Redis `SETBIT` command to set or clear the bit at the specified offset in the string value stored at the specified key, use the `.setbit()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the string value |\n| `offset` | Yes | number | The offset of the bit to be set or cleared |\n| `value` | Yes | number | Whether to set or clear the bit: `1` to set and `0` to clear |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    await kv.setbit('mybitmap', 7, 1);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\nTo run the Redis `GETBIT` command to get the bit value at the specified offset in the string value stored at the specified key, use the `.getbit()` method, with the following parameters:\n\n| Parameters | Required | Type | Description |\n| --- | --- | --- | --- |\n| `key` | Yes | string | The name of the string value |\n| `offset` | Yes | number | The offset of the bit to be retrieved |\n\n```\nimport { kv } from '@vercel/kv';\n \nasync function exampleCommands() {\n  try {\n    const bitvalue = await kv.setbit('mybitmap', 7);\n    console.log(bitvalue);\n  } catch (error) {\n    // Handle errors\n  }\n}\n```",
    "title": "@vercel/kv",
    "description": "Vercel KV is a durable Redis database that enables you to store and retrieve simple key-value data structures globally at the edge.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/using-an-orm",
    "markdown": "# Using an ORM to access your Postgres database\n\n[Vercel Postgres](https://vercel.com/storage/postgres) provides an [SDK](https://vercel.com/docs/storage/vercel-postgres/sdk), but we recommend using an [ORM](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) for larger applications.\n\n*   [Kysely](#kysely)\n*   [Prisma](#prisma)\n*   [Drizzle](#drizzle)\n\nTo get started using Vercel Postgres with your favorite ORM, follow the instructions in [our Postgres quickstart](https://vercel.com/docs/storage/vercel-postgres/quickstart).\n\nIf your ORM is featured on this page, read the corresponding section for the most optimal configuration instructions.\n\nKysely is a type-safe and autocomplete-friendly TypeScript SQL query builder. Use [our Kysely template](https://vercel.com/templates/next.js/postgres-kysely) to deploy a Next.js project that connects to Vercel Postgres with Kysely now.\n\nTo use Kysely, follow these steps:\n\n1.  Install the Kysely package:\n    \n    ```\n    pnpm i kysely @vercel/postgres-kysely\n    ```\n    \n2.  Use the `createKysely` method from `@vercel/postgres-kysely` to create a client with a pooled connection\n    \n    ```\n    import { createKysely } from '@vercel/postgres-kysely';\n     \n    interface Database {\n      person: PersonTable;\n      pet: PetTable;\n      movie: MovieTable;\n    }\n     \n    const db = createKysely<Database>();\n     \n    await db\n      .insertInto('pet')\n      .values({ name: 'Catto', species: 'cat', owner_id: id })\n      .execute();\n     \n    const person = await db\n      .selectFrom('person')\n      .innerJoin('pet', 'pet.owner_id', 'person.id')\n      .select(['first_name', 'pet.name as pet_name'])\n      .where('person.id', '=', id)\n      .executeTakeFirst();\n    ```\n    \n\nKysely supports all PostgreSQL commands. See [Kysely's docs](https://kysely.dev/docs/intro) for a full reference of the methods used to send the commands.\n\nPrisma is a next-gen ORM that includes a type-safe query builder, migration system, and database management interface. Use [our Prisma template](https://vercel.com/templates/next.js/postgres-prisma) to deploy a Next.js project that connects to Vercel Postgres with Prisma now.\n\nTo use Vercel Postgres with Prisma, you must:\n\n1.  Follow the instructions in [our Postgres quickstart](https://vercel.com/docs/storage/vercel-postgres/quickstart)\n    \n2.  Install [Prisma client](https://www.prisma.io/docs/concepts/components/prisma-client/working-with-prismaclient/generating-prisma-client#the-prismaclient-npm-package) and [Prisma CLI](https://www.prisma.io/docs/concepts/components/prisma-cli/installation):\n    \n    ```\n    pnpm i prisma @prisma/client\n    ```\n    \n3.  Use your environment variables in your `schema.prisma` file as shown below:\n    \n    ```\n    generator client {\n      provider = \"prisma-client-js\"\n    }\n     \n    datasource db {\n      provider = \"postgresql\"\n      // Uses connection pooling\n      url = env(\"POSTGRES_PRISMA_URL\")\n      // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`\n      // or you'll have dangling databases from migrations\n      directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n    }\n     \n    model User {\n      id        Int      @id @default(autoincrement())\n      name      String\n      email     String   @unique\n      image     String\n      createdAt DateTime @default(now())\n    }\n    ```\n    \n4.  Use `@prisma/client` to query your Vercel Postgres database\n    \n    ```\n    import { PrismaClient } from '@prisma/client';\n     \n    const prisma = new PrismaClient();\n     \n    export default async function prismaExample() {\n      const newUser = await prisma.user.create({\n        data: {\n          name: 'Elliott',\n          email: 'xelliottx@example-user.com',\n        },\n      });\n     \n      const users = await prisma.user.findMany();\n    }\n    ```\n    \n5.  Whenever you make changes to your prisma schema, you must [run a migration](#prisma-migrate), then run `prisma generate` to update the generated type generations, which live in the `node_modules/.prisma/client` directory. You can do this by adding the following script to your `package.json`:\n    \n    ```\n    {\n      \"scripts\": {\n        \"vercel-build\": \"prisma generate && prisma migrate deploy && next build\"\n      }\n    }\n    ```\n    \n\nWhen you connect with Prisma using the `POSTGRES_PRISMA_URL` environment variable, the parameters `connect_timeout=10` and `pgbouncer=true` will be set.\n\nSee [the Prisma docs](https://www.prisma.io/docs/concepts/database-connectors/postgresql) to learn more.\n\nSee the [Prisma Migrate docs](https://www.prisma.io/docs/concepts/components/prisma-migrate) to migrate your database.\n\nDrizzle is a TypeScript ORM that enables developers to build type-safe SQL queries. It relies on zero dependencies, and uses a SQL-like syntax to offer a lower learning curve than other ORMs. Use [our Drizzle template](https://vercel.com/templates/next.js/postgres-drizzle) to deploy a Next.js project that connects to Vercel Postgres with Drizzle now.\n\nTo use Drizzle with Vercel Postgres, you must:\n\n1.  Follow the instructions in the [Postgres quickstart](https://vercel.com/docs/storage/vercel-postgres/quickstart)\n    \n2.  Install the [`drizzle-orm`](https://orm.drizzle.team/docs/overview) package to write queries, and the [`drizzle-kit`](https://orm.drizzle.team/kit-docs/overview) package to define your schema and manage migrations:\n    \n3.  Create a `schema.ts` file for your database tables:\n    \n    ```\n    import { drizzle } from 'drizzle-orm/vercel-postgres';\n    import { sql } from '@vercel/postgres';\n    import {\n      pgTable,\n      serial,\n      text,\n      timestamp,\n      uniqueIndex,\n    } from 'drizzle-orm/pg-core';\n     \n    export const UsersTable = pgTable(\n      'users',\n      {\n        id: serial('id').primaryKey(),\n        name: text('name').notNull(),\n        email: text('email').notNull(),\n        image: text('image').notNull(),\n        createdAt: timestamp('createdAt').defaultNow().notNull(),\n      },\n      (users) => {\n        return {\n          uniqueIdx: uniqueIndex('unique_idx').on(users.email),\n        };\n      },\n    );\n    ```\n    \n\n4.  Install the [`@next/env`](https://nextjs.org/docs/app/building-your-application/configuring/environment-variables#loading-environment-variables-with-nextenv) package to load the environment variables outside of the Next.js runtime:\n    \n    ```\n    import { loadEnvConfig } from '@next/env';\n     \n    const projectDir = process.cwd();\n    loadEnvConfig(projectDir);\n    ```\n    \n\n5.  Create a [`drizzle.config.js`](https://orm.drizzle.team/kit-docs/conf) file in the root of your project, import the environment variables config, add the path to your schema file, and your Vercel `POSTGRES_URL` connection string:\n    \n    ```\n    import '@/drizzle/envConfig';\n    import { defineConfig } from 'drizzle-kit';\n     \n    export default defineConfig({\n      schema: './drizzle/schema.ts',\n      driver: 'pg',\n      dbCredentials: {\n        connectionString: process.env.POSTGRES_URL!,\n      },\n    });\n    ```\n    \n6.  Use the `drizzle-kit` CLI to generate your tables:\n    \n\nAfter running this command, you can view your tables in your Vercel [dashboard](https://vercel.com/dashboard), under the Storage tab. Follow the [Drizzle-Kit docs](https://orm.drizzle.team/kit-docs/overview) to migrate and seed your database, and learn how to use the [Drizzle-Studio](https://orm.drizzle.team/drizzle-studio/overview).\n\n7.  Lastly, create a new client to query your database:\n    \n    ```\n    import '@/drizzle/envConfig';\n    import { drizzle } from 'drizzle-orm/vercel-postgres';\n    import { sql } from '@vercel/postgres';\n    import * as schema from './schema';\n     \n    export const db = drizzle(sql, { schema });\n     \n    export const getUsers = async () => {\n      return db.query.users.findMany();\n    };\n    ```",
    "title": "Using an ORM to access your Postgres database",
    "description": "Learn how to use your favorite ORM to access your database from your apps",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/supported-postgresql-extensions",
    "markdown": "# Postgres Compatibility\n\n[Vercel Postgres](https://vercel.com/storage/postgres) has integrated many PostgreSQL extensions, which will be automatically available to your database. Vercel's Postgres compatibility is based on our [Neon](https://neon.tech/docs/reference/compatibility) integration.\n\nThe following table lists the PostgreSQL extensions Vercel Postgres supports.\n\n| Extension | Extension Version (PostgreSQL 15) | Note |\n| --- | --- | --- |\n| `address_standardizer` | 3.3.3 |     |\n| `address_standardizer_data_us` | 3.3.3 |     |\n| `autoinc (spi)` | 1.0 |     |\n| `bloom` | 1.0 |     |\n| `btree_gin` | 1.3 |     |\n| `btree_gist` | 1.7 |     |\n| `citext` | 1.6 |     |\n| `cube` | 1.5 |     |\n| `dict_int` | 1.0 |     |\n| `earthdistance` | 1.1 |     |\n| `fuzzystrmatch` | 1.1 |     |\n| `h3_pg` | 4.1.3 |     |\n| `hll` | 2.18 |     |\n| `hstore` | 1.8 |     |\n| `hypopg` | 1.4.0 |     |\n| `insert_username (spi)` | 1.0 |     |\n| `intagg` | 1.1 |     |\n| `intarray` | 1.5 |     |\n| `ip4r` | 2.4.2 |     |\n| `isn` | 1.2 |     |\n| `lo` | 1.1 |     |\n| `ltree` | 1.2 |     |\n| `moddattime (spi)` | 1.0 |     |\n| `pg_graphql` | 1.4.0 |     |\n| `pg_hashids` | 1.2.1 |     |\n| `pg_hint_plan` | 1.6.0 |     |\n| `pg_ivm` | 1.7 |     |\n| `pg_jsonschema` | 0.2.0 |     |\n| `pg_partman` | 5.0.1 |     |\n| `pg_prewarm` | 1.2 |     |\n| `pg_roaringbitmap` | 0.5 |     |\n| `pg_stat_statements` | 1.10 |     |\n| `pg_tiktoken` | 0.0.1 |     |\n| `pg_trgm` | 1.6 |     |\n| `pg_uuidv7` | 1.0 |     |\n| `pgcrypto` | 1.3 |     |\n| `pgjwt` | 0.2.0 |     |\n| `pgrouting` | 3.4.2 | The PostGIS extension must be installed first. |\n| `pgrowlocks` | 1.2 |     |\n| `pgstattuple` | 1.5 |     |\n| `pgTAP` | 1.2.0 |     |\n| `pgvector` | 0.7.1 | Install with CREATE EXTENSION vector; |\n| `pgx_ulid` | 0.1.3 | Install with CREATE EXTENSION vector; |\n| `plcoffee` | 3.1.8 |     |\n| `plls` | 3.1.8 |     |\n| `plpgsql` | 1.0 | Pre-installed with PostgreSQL. |\n| `plpgsql_check` | 2.5.3 |     |\n| `plv8` | 3.1.10 |     |\n| `postgis` | 3.3.3 |     |\n| `postgis_raster` | 3.3.3 |     |\n| `postgis_tiger_geocoder` | 3.3.3 | Cannot be installed using the Vercel Postgres SQL Editor. Use your `psql` user credentials to install this extension. |\n| `postgis_topology` | 3.3.3 |     |\n| `prefix` | 1.2.0 |     |\n| `rdkit` | 4.3.0 |     |\n| `refint (spi)` | 1.0 |     |\n| `roaringbitmap` | 0.5 |     |\n| `rum` | 1.3 |     |\n| `seg` | 1.4 |     |\n| `tablefunc` | 1.0 |     |\n| `tcn` | 1.0 |     |\n| `timescaledb` | 2.13.0 | Only Apache-2 licensed features are supported. Compression is not supported. |\n| `tsm_system_rows` | 1.0 |     |\n| `tsm_system_time` | 1.0 |     |\n| `unaccent` | 1.1 |     |\n| `unit` | 7   |     |\n| `uuid-ossp` | 1.1 | Double-quote the extension name when installing: CREATE EXTENSION \"uuid-ossp\" |\n| `xml2` | 1.1 |     |\n\n*   Vercel Postgres supports the `uuid-ossp` extension for generating UUIDs instead of the `uuid` extension.\n*   The `sslinfo` extension is not supported. Vercel Postgres handles connections through a proxy that checks SSL.\n*   The `pg_cron` extension is not supported. Vercel Postgres scales to zero when it is not being used, which means that a scheduler that runs inside the database cannot be implemented. Consider using an external scheduler like [Vercel Cron Jobs](https://vercel.com/docs/cron-jobs).\n*   The `file_fdw` extension is not supported. Files would not remain accessible when Vercel Postgres scales to zero.\n\nYou can install extensions from the CLI interface in your dashboard on Vercel, or with a PostgreSQL client of your choice.\n\n```\nALTER EXTENSION extension_name UPDATE TO 'x.x.x';\n```\n\nYou can check the version of an extension with:\n\n```\nSELECT * FROM extension_name;\n```",
    "title": "Postgres Compatibility",
    "description": "See the supported and unsupported Postgres features and extensions Vercel supports.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/errors/FALLBACK_BODY_TOO_LARGE",
    "markdown": "# FALLBACK\\_BODY\\_TOO\\_LARGE\n\nThe `FALLBACK_BODY_TOO_LARGE` error indicates that the size of the fallback body exceeds the maximum cache limit. This error typically occurs in prerendered pages when the response body of a fallback page is larger than the cache can accommodate. Notably, if the fallback exceeds 10MB, it cannot be cached.\n\n502\n\n`FALLBACK_BODY_TOO_LARGE`\n\nPrerender fallback file is too big for cache\n\nTo resolve this error, consider the following steps:\n\n1.  Review response size: Examine the size of the response body for the affected page. If it's too large, try to reduce the content size\n2.  Optimize content: Minimize HTML, CSS, and JavaScript on the fallback page Remove unnecessary assets or data to reduce the page size\n3.  Implement pagination: If the large response body is due to extensive datasets, consider using pagination. This divides the data into smaller, manageable sections\n4.  Dynamic data loading: Where possible, load data dynamically on the client-side instead of sending all data in the initial server response\n\nTo prevent this error, ensure that the size of the fallback page is less than 10 MB.",
    "title": "FALLBACK_BODY_TOO_LARGE",
    "description": "The fallback body is too large for the cache. This is a cache error.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/vercel-postgres-error-codes",
    "markdown": "# Vercel Postgres Error Codes\n\n```\nReplyError: invalid_connection_string\n```\n\nYour postgres client was not able to connect to your Postgres store. This error happens if you provided the wrong type of connection string to a connection method.\n\nFor example, you passed a non pooling postgres URL to the `createPool` method which expects a postgres URL that includes pooling.\n\nTroubleshoot:\n\n*   Check that your connection string does not have a typo, or that it is associated with the correct type of connection (direct or pooled)\n\n```\nReplyError: missing_connection_string\n```\n\nYour postgres client was not able to connect to your Postgres store. This error happens if you did not provide a connection string when using a method that creates a connection with your Postgres store.\n\nTroubleshoot:\n\n*   Ensure you have [set up a Postgres database](https://vercel.com/docs/storage/vercel-postgres/quickstart)\n*   Check that you used the correct parameter name for the connection string.\n*   If the error occurs while developing locally, and you're using a Vite-based framework such as Nuxt or SvelteKit, confirm that you're [providing the connection string explicitly](https://github.com/vercel/storage/tree/main/packages/postgres#a-note-for-vite-users)\n\nThis error occurs when the amount of concurrent connections available have been exhausted. When this is encountered, it is highly likely the result of a direct connection. The recommendation is to use the [pooled connection](https://vercel.com/docs/storage/vercel-postgres/sdk#createclient) instead.\n\n```\nReplyError: kysely_streaming_not_supported\n```\n\nThis error happens if you tried to use the streaming feature with the [Kysely](https://github.com/kysely-org/kysely) client. The [Neon](https://neon.tech/docs/) package does not support streaming.\n\n```\nReplyError: kysely_transactions_not_supported\n```\n\nThis error happens if you tried to use the transactions feature with the [Kysely](https://github.com/kysely-org/kysely) client. The [Neon](https://neon.tech/docs/) package does not support transactions.\n\nThis error is thrown when attempting to perform a Prisma migration using the pooled database connection, you need to use the direct connection when performing Prisma migrations.\n\nThis can be accounted for in the `schema.prisma` file to avoid needing to change connection strings by using a setup similar to the following:\n\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_DATABASE_URL\")\n}\n```\n\nWhile the database will primarily use the `url` variable for connections (likely to be pooled), it will default to the `directUrl` when attempting to perform migrations.\n\nThis error means that the connection was established. However, the Prisma query engine was unable to process a query in the connection pool within the time limit (the default is 10 seconds).\n\nThere are several ways to fix this error:\n\n1.  Increasing the connection pool size\n    \n    You can increase the connection pool size by setting the `connection_limit` parameter to a higher value. We recommend increasing this value in increments of 10 until Prisma Client is working properly. You can learn more about [optimizing the connection pool size](https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#optimizing-the-connection-pool) in Prisma's documentation.\n    \n    The connection string would be:\n    \n    ```\n    DATABASE_URL=postgres://default:<password>@ep-lingering-cell-123456.eu-central-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=10&connection_limit=10\n    ```\n    \n2.  Analyzing and optimizing your queries\n    \n    One way to solve this issue is to either reduce the number of queries being executed in the connection pool (modifying your code or introducing a cache) or reduce the execution duration.\n    \n3.  Increasing the timeout duration of the connection pool\n    \n    The default is 10 seconds. We recommend increasing this timeout duration after you have increased the `connection_limit` otherwise, you can run out of RAM. You can learn more about [optimizing the connection pool timeout](https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#increasing-the-pool-timeout) in Prisma's documentation.\n    \n    ```\n    DATABASE_URL=postgres://default:<password>@ep-lingering-cell-123456.eu-central-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=10&connection_limit=10&pool_timeout=20\n    ```\n    \n\nThis error is thrown when attempting to use the pooled connection string with Prisma and the `?pgbouncer=true` parameter is missing. Adding `?pgbouncer=true` to the end of the query string will resolve this.",
    "title": "Vercel Postgres Error Codes",
    "description": "This section focuses on errors that can happen while using the Vercel Postgres SDK to interact with your Vercel Postgres store.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/infrastructure/data-cache/manage-data-cache",
    "markdown": "# Managing Vercel Data Cache\n\nVercel Data cache is automatically enabled for you when you deploy a Next.js project thats uses [App Router](https://beta.nextjs.org/docs/routing/fundamentals) and Next.js Cache to Vercel.\n\nUse the following in your Next.js application to opt out of fetch caching:\n\n```\nexport const fetchCache = 'force-no-store';\n```\n\nYou can also opt out individual fetches by using the `cache` option:\n\n```\nconst res = await fetch('https://example.com', { cache: 'no-store' });\n```\n\nTo view your usage for Data Cache:\n\n1.  On your [dashboard](https://vercel.com/dashboard/usage), navigate to the Usage tab.\n2.  Under Data Cache, you'll be able to see your the total usage for your team or account including bandwidth, revalidations, and requests.\n\nYou need to have an [owner](https://vercel.com/docs/accounts/team-members-and-roles/access-roles#owner-role) role to perform this task.\n\nIn some circumstances, you may need to delete all cached data and force revalidation. You can do this by purging the Data Cache:\n\n1.  Under your project, go to the Settings tab.\n2.  In the Data Cache section, select Purge Everything.\n3.  On the dialog, confirm that you wish to delete and click the Continue & Purge Everything button.\n\nPurging your Data Cache will create a temporary increase in request times for users as new data needs to be refetched.",
    "title": "Managing Vercel Data Cache",
    "description": "Learn how to enable, disable, and manage your usage for Vercel Data Cache",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/infrastructure/data-cache/limits-and-pricing",
    "markdown": "# Data Cache Usage and Pricing\n\nVercel offers several methods for caching data within Vercel’s managed infrastructure. [Incremental Static Regeneration (ISR)](https://vercel.com/docs/incremental-static-regeneration) caches your data at the edge and persists it to durable storage – data reads and writes from durable storage will incur costs.\n\nThe Vercel Data Cache, currently available in Beta for use with Next.js App Router, caches your granular data close to where your function executes – data reads and writes are free until it becomes generally available.\n\nThe following table outlines the price when using Incremental Static Regeneration for each resource according to the plan you are on:\n\nThis section details our [improved infrastructure pricing](https://vercel.com/blog/improved-infrastructure-pricing). On April 25, 2024, these changes will apply to all new Pro customers. Starting May 25, 2024, current Pro customers will see these changes take effect on their next billing cycle. The Hobby tier remains free.\n\nThe table below shows the metrics for the [Data Cache](https://vercel.com/docs/pricing/data-cache) section of the Usage dashboard.\n\nTo view information on managing each resource, select the resource link in the Metric column. To jump straight to guidance on optimization, select the corresponding resource link in the Optimize column.\n\nSee the [manage and optimize Data Cache usage](https://vercel.com/docs/pricing/data-cache) section for more information on how to optimize your usage.\n\nStorage has a fixed size limit based on your subscription. You cannot exceed your storage limit. When the storage limit is reached, existing items will be evicted based on which items were least recently used.\n\nThe total amount of Write Units used to store new data in the Data Cache, measured in 8KB units.\n\nThe total amount of Read Units used to access the Data Cache, measured in 8KB units.\n\nRevalidations are the total number of tags or items requested to revalidate.\n\n*   Item size – The maximum size of an item in the cache is 2 MB. Items larger than this will not be cached.\n*   Tags per item – A cache item can have a maximum of 64 tags.\n*   Maximum tag length – The maximum tag length is 256 bytes.",
    "title": "Data Cache Usage and Pricing",
    "description": "This page outlines information on the limits that are applicable to using Vercel Data Cache, and the costs they can incur.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-blob/client-upload",
    "markdown": "# Client Uploads with Vercel Blob\n\nIn this quickstart, you'll learn how to do the following:\n\n*   Use the Vercel dashboard to create a Blob store connected to a project\n*   Upload a file using the Blob SDK from a browser\n\nVercel Blob works with any frontend framework. First, install the package:\n\n1.  Navigate to the [Project](https://vercel.com/docs/projects/overview) you'd like to add the blob store to. Select the Storage tab, then select the Connect Database button.\n    \n    Under the Create New tab, select Blob and then the Continue button.\n    \n    Use the name \"Images\" and select Create a new Blob store. Select the environments where you would like the read-write token to be included. You can also update the prefix of the Environment Variable in Advanced Options\n    \n    Once created, you are taken to the Vercel Blob store page.\n    \n2.  Since you created the Blob store in a project, we automatically created and added the following Environment Variable to the project for you.\n    \n    *   `BLOB_READ_WRITE_TOKEN`\n    \n    To use this Environment Variable locally, we recommend pulling it with the Vercel CLI:\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nWhen you need to upload files larger than 4.5 MB, you can use client uploads. In this case, the file is sent directly from the client (a browser in this example) to Vercel Blob. This transfer is done securely as to not expose your Vercel Blob store to anonymous uploads. The security mechanism is based on a token exchange between your server and Vercel Blob.\n\n1.  This page allows to upload files to Vercel Blob. The files will go directly from the browser to Vercel Blob without going through your server.\n    \n    Behind the scenes, the upload is done securely by exchanging a token with your server before uploading the file.\n    \n    ```\n    'use client';\n     \n    import { type PutBlobResult } from '@vercel/blob';\n    import { upload } from '@vercel/blob/client';\n    import { useState, useRef } from 'react';\n     \n    export default function AvatarUploadPage() {\n      const inputFileRef = useRef<HTMLInputElement>(null);\n      const [blob, setBlob] = useState<PutBlobResult | null>(null);\n      return (\n        <>\n          <h1>Upload Your Avatar</h1>\n     \n          <form\n            onSubmit={async (event) => {\n              event.preventDefault();\n     \n              if (!inputFileRef.current?.files) {\n                throw new Error('No file selected');\n              }\n     \n              const file = inputFileRef.current.files[0];\n     \n              const newBlob = await upload(file.name, file, {\n                access: 'public',\n                handleUploadUrl: '/api/avatar/upload',\n              });\n     \n              setBlob(newBlob);\n            }}\n          >\n            <input name=\"file\" ref={inputFileRef} type=\"file\" required />\n            <button type=\"submit\">Upload</button>\n          </form>\n          {blob && (\n            <div>\n              Blob url: <a href={blob.url}>{blob.url}</a>\n            </div>\n          )}\n        </>\n      );\n    }\n    ```\n    \n2.  The responsibility of this client upload route is to:\n    \n    1.  Generate tokens for client uploads\n    2.  Listen for completed client uploads, so you can update your database with the URL of the uploaded file for example\n    \n    The `@vercel/blob` npm package exposes a helper to implement said responsibilities.\n    \n    ```\n    import { handleUpload, type HandleUploadBody } from '@vercel/blob/client';\n    import { NextResponse } from 'next/server';\n     \n    export async function POST(request: Request): Promise<NextResponse> {\n      const body = (await request.json()) as HandleUploadBody;\n     \n      try {\n        const jsonResponse = await handleUpload({\n          body,\n          request,\n          onBeforeGenerateToken: async (\n            pathname,\n            /* clientPayload */\n          ) => {\n            // Generate a client token for the browser to upload the file\n            // ⚠️ Authenticate and authorize users before generating the token.\n            // Otherwise, you're allowing anonymous uploads.\n     \n            return {\n              allowedContentTypes: ['image/jpeg', 'image/png', 'image/gif'],\n              tokenPayload: JSON.stringify({\n                // optional, sent to your server on upload completion\n                // you could pass a user id from auth, or a value from clientPayload\n              }),\n            };\n          },\n          onUploadCompleted: async ({ blob, tokenPayload }) => {\n            // Get notified of client upload completion\n            // ⚠️ This will not work on `localhost` websites,\n            // Use ngrok or similar to get the full upload flow\n     \n            console.log('blob upload completed', blob, tokenPayload);\n     \n            try {\n              // Run any logic after the file upload completed\n              // const { userId } = JSON.parse(tokenPayload);\n              // await db.update({ avatar: blob.url, userId });\n            } catch (error) {\n              throw new Error('Could not update user');\n            }\n          },\n        });\n     \n        return NextResponse.json(jsonResponse);\n      } catch (error) {\n        return NextResponse.json(\n          { error: (error as Error).message },\n          { status: 400 }, // The webhook will retry 5 times waiting for a 200\n        );\n      }\n    }\n    ```\n    \n    When your local website is served on `http://localhost:3000`, then the `onUploadCompleted` step won't succeed as Vercel Blob cannot contact your localhost. Instead, we recommend you run your local application through a tunneling service like [ngrok](https://ngrok.com/), so you can experience the full Vercel Blob development flow locally.\n    \n\n1.  Run your application locally and visit `/avatar/upload` to upload the file to your store. The browser will display the unique URL created for the file.\n    \n    When your local website is served on `http://localhost:3000`, then the `onUploadCompleted` step won't succeed as Vercel Blob cannot contact your localhost. Instead, we recommend you run your local application through a tunneling service like [ngrok](https://ngrok.com/), so you can experience the full Vercel Blob development flow locally.\n    \n2.  *   Go to the Vercel Project where you created the store\n    *   Select the Storage tab and select your new store\n    *   Paste the blob object URL returned in the previous step in the Blob URL input box in the Browser section and select Lookup\n    *   The following blob object metadata will be displayed: file name, path, size, uploaded date, content type and HTTP headers\n    *   You also have the option to download and delete the file from this page\n\nYou have successfully uploaded an object to your Vercel Blob store and are able to review it's metadata, download, and delete it from your Vercel Storage Dashboard.\n\n*   Learn how to [use the methods](https://vercel.com/docs/storage/vercel-blob/using-blob-sdk) available with the `@vercel/blob` package",
    "title": "Client Uploads with Vercel Blob",
    "description": "Learn how to upload files larger than 4.5 MB directly from the browser to Vercel Blob",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-postgres/faq",
    "markdown": "# Vercel Postgres FAQ\n\nBy default, Postgres does not allow for a high number of open simultaneous connections. The maximum number of connections is 100, which includes connections reserved for administrative purposes. This would be labeled a direct connection.\n\nThis connection limit of 100 may not be sufficient for some applications with many concurrent users - especially in a serverless environment. To overcome this limitation, Vercel Postgres enables you to connect to your database with [a connection pooler](https://vercel.com/docs/storage/vercel-postgres/sdk#createclient). When this is done, Neon will use [PgBouncer](https://www.pgbouncer.org/) in `transaction mode` to enable connection pooling, which allows for sharing, reusing and queuing database connections.\n\nWe recommend using the pooled connection when deploying your application since it enables Vercel Postgres to handle up to 10,000 simultaneous connections. However, if you use [PostgreSQL features not supported](https://www.pgbouncer.org/features.html) in `transaction mode` which is used in pooled connections, you will need a direct connection to the database.\n\nReview [Connection pooling notes and limitations](https://neon.tech/docs/connect/connection-pooling#connection-pooling-notes-and-limitations) for more information.\n\nThe [default provided connection](https://vercel.com/docs/storage/vercel-postgres/sdk#db) is [pooled](#pooled-vs.-direct-connections), allowing up to 10,000 concurrent connections - this will be the best option in nearly all cases since a \"pooled\" connection avoids expensive connection setup.\n\nYou also have the ability to connect [directly](#pooled-vs.-direct-connections), allowing up to 100 concurrent connections on Hobby and 450 on Pro.\n\nA Vercel Postgres database has two states, `Active` and `Idle`. By default, [after 5 minutes of no active queries](https://vercel.com/docs/storage/vercel-postgres/limits#vercel-postgres-cold-starts) being run against the database, it will be put into an `Idle` state.\n\nUpon a new query being run against the database, it will wake into an `Active` state - this can take a varying amount of time but is usually under ~5 seconds.\n\nVercel Postgres enters an `Idle` state to save compute resources when it is not actively being used.\n\nPro plan users can configure the time after which the database enters the `Idle` state. Alternatively, you can query your database at least once every five minutes to prevent the `idle` state as long as you are ok with the additional compute hours incurred. If you create a new deployment your database will automatically be \"warmed\" and enter the active state.\n\nFor basic queries, we recommend using the [`@vercel/postgres`](https://vercel.com/docs/storage/vercel-postgres/sdk#createclient) client out of the box as it provides an efficient way to interact with your Postgres database, has built-in support for connection pooling, and is compatible with Edge Functions. For more advanced functionality, we recommend using one of our supported [Object-Relational Mapping (ORM)](https://vercel.com/docs/storage/vercel-postgres/using-an-orm) clients.\n\nIf you are having connection issues with using a graphical Postgres client, please check its support for Server Name Indication (SNI) included with the Transport Layer Security (TLS) protocol.\n\nYou can use `pg_dump` to [import a Postgres database into your Vercel Postgres](https://neon.tech/docs/import/import-from-postgres). Use the postgres connection [environment variables](https://vercel.com/storage/vercel-postgres/quickstart#review-what-was-created) created in your Vercel project to define the connection string to use with `pg_dump`.\n\nTo prevent timeouts when using Prisma with Vercel Postgres you can append the following query parameter to the connection string provided by Vercel: `?connect_timeout=0`.\n\nThis helps in cases where the database is in an `Idle` state. The default timeout for a Prisma query is 5 seconds, and this is roughly the time taken to revert the database to an `Active` state - adding the no timeout parameter prevents this issue.\n\nFollow the steps in the [Prisma migration guide](https://neon.tech/docs/guides/prisma-migrate) created by Neon.\n\nAutomated backups are not currently supported.\n\nSelect the database you want to view, select the Browse tab under the Data section, and then select the table you want to view.\n\nVercel Postgres aims to provide the right level of abstraction to allow you to focus on building your application.\n\nIf you are looking to use more advanced features such as branching and auto-scaling, then using the [Neon integration](https://vercel.com/integrations/neon) will let you manage your instance directly with the [Neon.tech](http://neon.tech/) app.\n\nThe vast majority of Postgres features are compatible with Vercel Postgres, however, there are some listed below that are not currently supported:\n\n*   Roles with access permissions other than those granted to standard database owners in PostgreSQL\n*   Unlogged tables are maintained on Neon compute local storage. These tables do not survive compute restarts (including when a Neon compute instance is placed into an `Idle` state)\n*   Temporary tables, which are stored in compute local storage, are limited by compute local storage size\n*   Session context, the Vercel Postgres service automatically closes idle connections after a period of inactivity\n*   Statistics collected by the PostgreSQL [cumulative statistics system](https://www.postgresql.org/docs/14/monitoring-stats.html) are currently not saved when the Neon compute node is placed into an `Idle` state due to inactivity or restarted\n\nVercel Postgres currently supports Postgres version 15.\n\nVercel Postgres enforces SSL by default. Non-SSL connections are not supported.\n\nSee the [Error Codes](https://vercel.com/docs/storage/vercel-postgres/vercel-postgres-error-codes) documentation for more information.",
    "title": "Vercel Postgres FAQ",
    "description": "Discover answers to frequently asked questions about Vercel Postgres.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/recipes/set-cache-control-headers",
    "markdown": "# Set cache control headers for functions\n\nBy default, the Edge Network and browser will not cache, unless you set the following headers in your function as needed: `Cache-Control`,`CDN-Cache-Control`, and `Vercel-CDN-Cache-Contol`. You can set these headers to:\n\n*   [Set the cache depending on location](#set-caching-depending-on-location)\n*   [Set the same cache duration everywhere](#same-cache-duration-everywhere)\n*   [Set caching for Vercel's Edge Cache](#set-caching-for-vercel's-edge-cache)\n*   [Set caching for all CDNs](#set-caching-for-all-cdns)\n\nSetting the cache in functions takes priority over config files.\n\n```\nexport async function GET() {\n  return new Response('Cache Control example', {\n    status: 200,\n    headers: {\n      'Cache-Control': 'max-age=10',\n      'CDN-Cache-Control': 'max-age=60',\n      'Vercel-CDN-Cache-Control': 'max-age=3600',\n    },\n  });\n}\n```\n\nVercel uses the following priority when you specify multiple cache control headers:\n\n*   `Vercel-CDN-Cache-Control`\n*   `CDN-Cache-Control`\n*   `Cache-Control`\n\nThis sets the same maximum cache duration for Vercel, CDNs, and the client:\n\n```\nexport async function GET() {\n  return new Response('Cache Control example', {\n    status: 200,\n    headers: {\n      'Cache-Control': 'max-age=3600',\n    },\n  });\n}\n```\n\nThis sets the maximum cache duration for Vercel's Edge Cache only.\n\n```\nexport async function GET() {\n  return new Response('Cache Control example', {\n    status: 200,\n    headers: {\n      'Vercel-CDN-Cache-Control': 'max-age=3600',\n    },\n  });\n}\n```\n\nThis sets the cache duration on Vercel and also on other CDNs\n\n```\nexport async function GET() {\n  return new Response('Cache Control example', {\n    status: 200,\n    headers: {\n      'CDN-Cache-Control': 'max-age=60',\n    },\n  });\n}\n```",
    "title": "Set cache control headers for functions",
    "description": "Learn how to set headers to cache your function's responses.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/edge-config-dashboard",
    "markdown": "# Managing Edge Configs with the Dashboard\n\nYou can create, view and update your [Edge Configs](https://vercel.com/storage/edge-config), and the data inside them, in your Vercel Dashboard at both the [account level](https://vercel.com/docs/accounts) and the [project level](https://vercel.com/docs/projects/overview).\n\nTo add an Edge Config at the Hobby account or team level, follow these steps:\n\n1.  Make sure that you are in the [right Hobby account or team](https://vercel.com/docs/dashboard-features)\n    \n2.  Click on the Edge Config tab\n    \n3.  Click the Create Store button\n    \n4.  Type a name for your Edge Config in the dialog and click Create. The name shouldn't exceed 32 characters and can only contain alphanumeric letters, \"\\_\", and \"-\".\n    \n5.  On creation, you are taken to the `my_edge_config_id` config page. By default, a key-value pair of `\"greeting\": \"hello world\"` is created. On the detail page of the newly created Edge Config you can:\n    \n    *   View and manage stored items\n    *   Connect projects to and disconnect projects from this Edge Config\n    *   Generate, copy, and delete tokens associated with this Edge Config\n\nYour Edge Config is now ready to be used. You can also [create an Edge Config at the project level](https://vercel.com/docs/storage/edge-config/edge-config-dashboard#at-the-project-level).\n\nIf you're creating a project at the account-level, we won't automatically create a token, connection string, and environment variable until a project has been connected.\n\n1.  Navigate to your [project](https://vercel.com/docs/projects/overview) page and click on the Edge Config tab\n    \n2.  Click Create Project Store and type a name slug for your Edge Config in the dialog that opens. The name shouldn't exceed 32 characters and can only contain alphanumeric letters, \"\\_\", and \"-\".\n    \n3.  Click Create.\n    \n4.  Once created, you can click on the Edge Config to [manage it](#manage-edge-configs). The following items are automatically created:\n    \n    *   An environment variable `EDGE_CONFIG` that holds a [connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string). If you go to your projects's Settings > Environment Variables, you'll see the newly created environment variable.\n    *   A [read access token](https://vercel.com/docs/storage/edge-config/using-edge-config#creating-a-read-access-token). This token, along with your EDGE CONFIG ID is used to create a [connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string). This connection string is saved as the value of your `EDGE_CONFIG` environment variable. Using this enables you to use the SDK in your project to read the contents of the store.\n\nTo view a list of all Edge Configs available in your Hobby account or team, go to Storage then select Edge Config the tab after making sure that you are in the [correct Hobby account or team](https://vercel.com/docs/dashboard-features).\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793444%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-view-all-configs-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793445%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-view-all-configs-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nList of Edge Configs in a team account\n\nIn the Used by column, you can see in which project(s) the Edge Config is used. The right column shows the size of the data contained in the config. To manage the Edge Config, its store and tokens, click on the Edge Config's row to open the detail page.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793441%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-usage-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793443%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-usage-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nEdge Config detail page\n\nTo rename the Edge Config, select the Settings item in the sidebar, update the Edge Config Name, and select Save.\n\nTo delete the Edge Config, select the Settings item in the sidebar, then select Delete Edge Config.\n\nThe default view of the Edge Config's detail page shows the list of all items in the store. You will see an open accordion titled Learn how to use this in code if the Edge Config is connected to at least one project. This accordion provides the steps with a code example on how to read your store items.\n\nTo add, edit or delete any item in your store, edit the `json` object in the right panel and click Save Items.\n\nBackups of your Edge Config are automatically created when you make changes, and are stored for a [length of time](https://vercel.com/docs/storage/edge-config/edge-config-limits#backup) determined by your plan. To restore one:\n\n1.  From your dashboard, select the Storage tab and then select your Edge Config\n2.  From the left section, select the Backups tab\n3.  From the list, select the backup that you would like to view. You'll be taken to the Items tab to view a comparison of the backup version and current version\n4.  To restore the backup, select the Restore button and confirm the action\n\nTo learn more about backups, see [Edge Config backups](https://vercel.com/docs/storage/edge-config/using-edge-config#edge-config-backups).\n\nWhen protected by a JSON schema, the backup must pass schema validation to be restored.\n\nYou can protect your Edge Config by adding a JSON schema to it. Vercel uses this schema to validate the data that is added to the store and prevent updates that fail validation. To add a schema:\n\n1.  From your dashboard, select the Storage tab and then select your Edge Config\n2.  Toggle the Schema button to open the schema editing tab\n3.  Enter your [JSON schema](https://json-schema.org/) into the editor. Vercel will use the schema to validate your data in real-time\n4.  Click Save. This will save changes to both the schema and data\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793443%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-projects-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793442%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-projects-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nList of connected projects\n\nClick on Projects in the left panel of the Edge Config detail page to open a view that shows the projects connected with this Edge Config.\n\nTo delete a connection, click on the vertical ellipsis icon on the right hand side of the row and click Delete environment variable and confirm by clicking Delete connection in the dialog.\n\nDeleting a connection does not delete the underlying token used by that Connection String. To learn how to delete tokens, review [Managing read access tokens](#manage-read-access-tokens).\n\nTo connect the Edge Config with another project, click Connect Project, find the project from the drop-down in the dialog and click Connect. If you receive a warning that this project already has an `EDGE_CONFIG` environment variable, open the Advanced Options and change the environment variable name in the corresponding field to a name other than `EDGE_CONFIG`. The Connect button will be enabled once the new enviroment variable does not already exist in the project.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793444%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-tokens-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689793442%2Fdocs-assets%2Fstatic%2Fdocs%2Fstorage%2Fedge-config%2Fedge-config-tokens-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nList of tokens\n\nTo delete a token, click on the vertical ellipsis icon on the right hand side of the token's row and click Delete Token and confirm by clicking Delete Token in the dialog.\n\nYou can copy the connection string to be used in your code by clicking on Copy Connection String from the same pop up from the vertical ellipsis icon.\n\nYou can generate a new token by clicking the Generate Token button, typing a name slug in the dialog that opens and clicking Create.",
    "title": "Managing Edge Configs with the Dashboard",
    "description": "Learn how to create, view and update your Edge Configs and the data inside them in your Vercel Dashboard at the Hobby account, team, and project levels.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/vercel-blob/using-blob-sdk",
    "markdown": "# @vercel/blob\n\nTo start using [Vercel Blob](https://vercel.com/storage/blob) SDK, follow the steps below:\n\nVercel Blob works with any frontend framework. begin by installing the package:\n\n1.  Navigate to the [Project](https://vercel.com/docs/projects/overview) you'd like to add the blob store to. Select the Storage tab, then select the Connect Database button.\n    \n    Under the Create New tab, select Blob and then the Continue button.\n    \n    Choose a name for your store and select Create a new Blob store. Select the environments where you would like the read-write token to be included. You can also update the prefix of the Environment Variable in Advanced Options\n    \n    Once created, you are taken to the Vercel Blob store page.\n    \n2.  Since you created the Blob store in a project, environment variables are automatically created and added to the project for you.\n    \n    *   `BLOB_READ_WRITE_TOKEN`\n    \n    To use this environment variable locally, use the Vercel CLI to [pull the values into your local project](https://vercel.com/docs/cli/env#exporting-development-environment-variables):\n    \n    ```\n    vercel env pull .env.development.local\n    ```\n    \n\nA read-write token is required to interact with the Blob SDK. When you create a Blob store in your Vercel Dashboard, an environment variable with the value of the token is created for you. You have the following options when deploying your application:\n\n*   If you deploy your application in the same Vercel project where your Blob store is located, you _do not_ need to specify the `token` parameter, as it's default value is equal to the store's token environment variable\n*   If you deploy your application in a different Vercel project or scope, you can create an environment variable there and assign the token value from your Blob store settings to this variable. You will then set the `token` parameter to this environment variable\n*   If you deploy your application outside of Vercel, you can copy the `token` value from the store settings and pass it as the `token` parameter when you call a Blob SDK method\n\nTo use the methods of the Blob SDK, you will need to call them inside an [Edge Function](https://vercel.com/docs/functions/edge-functions), a [Serverless Function](https://vercel.com/docs/functions/serverless-functions) or even a browser. In the examples below, we will be using Edge Functions.\n\nThis example creates an Edge Function that accepts a file from a `multipart/form-data` form and uploads it to the Blob store. The function returns a unique URL for the blob.\n\n```\nimport { put } from '@vercel/blob';\n \nexport const runtime = 'edge';\n \nexport async function PUT(request: Request) {\n  const form = await request.formData();\n  const file = form.get('file') as File;\n  const blob = await put(file.name, file, { access: 'public' });\n \n  return Response.json(blob);\n}\n```\n\nThe `put` method uploads a blob object to the Blob store.\n\n```\nput(pathname, body, options);\n```\n\nIt accepts the following parameters:\n\n*   `pathname`: (Required) A string specifying the base value of the return URL\n*   `body`: (Required) A blob object as `ReadableStream`, `String`, `ArrayBuffer` or `Blob` based on these [supported body types](https://developer.mozilla.org/docs/Web/API/fetch#body)\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the pathname's extension. |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token). You can also pass a client token created with the `generateClientTokenFromReadWriteToken` method |\n| `addRandomSuffix` | No  | A boolean specifying whether to add a random suffix to the pathname. It defaults to `true`. |\n| `cacheControlMaxAge` | No  | A number in seconds to configure the edge and browser cache. Defaults to one year. See the [caching](https://vercel.com/docs/storage/vercel-blob#caching) documentation for more details. |\n| `multipart` | No  | Pass `multipart: true` when uploading large files. It will split the file into multiple parts, upload them in parallel and retry failed parts. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`put()` returns a `JSON` object with the following data for the created blob object:\n\n```\n{\n  pathname: `string`,\n  contentType: `string`,\n  contentDisposition: `string`,\n  url: `string`\n  downloadUrl: `string`\n}\n```\n\nAn example blob is:\n\n```\n{\n  pathname: 'profilesv1/user-12345.txt',\n  contentType: 'text/plain',\n  contentDisposition: 'attachment; filename=\"user-12345.txt\"',\n  url: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345-NoOVGDVcqSPc7VYCUAGnTzLTG2qEM2.txt'\n  downloadUrl: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345-NoOVGDVcqSPc7VYCUAGnTzLTG2qEM2.txt?download=1'\n}\n```\n\nAn example blob uploaded with `addRandomSuffix: false` is:\n\n```\n{\n  pathname: 'profilesv1/user-12345.txt',\n  contentType: 'text/plain',\n  contentDisposition: 'attachment; filename=\"user-12345.txt\"',\n  //                                               no automatic random suffix added 👇\n  url: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345.txt'\n  downloadUrl: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345.txt?download=1'\n}\n```\n\nWhen uploading large files you should use multipart uploads to have a more reliable upload process. A multipart upload splits the file into multiple parts, uploads them in parallel and retries failed parts. This process consists of three phases: creating a multipart upload, uploading the parts and completing the upload. `@vercel/blob` offers three different ways to create multipart uploads:\n\nThis method has everything baked in and is easiest to use. It's part of the `put` and `upload` API's. Under the hood it will start the upload, split your file into multiple parts with the same size, upload them in parallel and complete the upload.\n\n```\nconst blob = await put('large-movie.mp4', file, {\n  access: 'public',\n  multipart: true,\n});\n```\n\nThis method gives you full control over the multipart upload process. It consists of three phases:\n\nPhase 1: Create a multipart upload\n\n```\nconst multipartUpload = await createMultipartUpload(pathname, options);\n```\n\n`createMultipartUpload` accepts the following parameters:\n\n*   `pathname`: (Required) A string specifying the path inside the blob store. This will be the base value of the return URL and includes the filename and extension.\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the pathname's extension. |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token). You can also pass a client token created with the `generateClientTokenFromReadWriteToken` method |\n| `addRandomSuffix` | No  | A boolean specifying whether to add a random suffix to the pathname. It defaults to `true`. |\n| `cacheControlMaxAge` | No  | A number in seconds to configure the edge and browser cache. Defaults to one year. See the [caching](https://vercel.com/docs/storage/vercel-blob#caching) documentation for more details. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`createMultipartUpload()` returns a `JSON` object with the following data for the created upload:\n\n```\n{\n  key: `string`,\n  uploadId: `string`\n}\n```\n\nPhase 2: Upload all the parts\n\nIn the multipart uploader process, it's necessary for you to manage both memory usage and concurrent upload requests. Additionally, each part must be a minimum of 5MB, except the last one which can be smaller, and all parts should be of equal size.\n\n```\nconst part = await uploadPart(pathname, chunkBody, options);\n```\n\n`uploadPart` accepts the following parameters:\n\n*   `pathname`: (Required) Same value as the `pathname` parameter passed to `createMultipartUpload`\n*   `chunkBody`: (Required) A blob object as `ReadableStream`, `String`, `ArrayBuffer` or `Blob` based on these [supported body types](https://developer.mozilla.org/docs/Web/API/fetch#body)\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `partNumber` | Yes | A number identifying which part is uploaded |\n| `key` | Yes | A string returned from `createMultipartUpload` which identifies the blob object |\n| `uploadId` | Yes | A string returned from `createMultipartUpload` which identifies the multipart upload |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token). You can also pass a client token created with the `generateClientTokenFromReadWriteToken` method |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`uploadPart()` returns a `JSON` object with the following data for the uploaded part:\n\n```\n{\n  etag: `string`,\n  partNumber: `string`\n}\n```\n\nPhase 3: Complete the multipart upload\n\n```\nconst blob = await completeMultipartUpload(pathname, parts, options);\n```\n\n`completeMultipartUpload` accepts the following parameters:\n\n*   `pathname`: (Required) Same value as the `pathname` parameter passed to `createMultipartUpload`\n*   `parts`: (Required) An array containing all the uploaded parts\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `key` | Yes | A string returned from `createMultipartUpload` which identifies the blob object |\n| `uploadId` | Yes | A string returned from `createMultipartUpload` which identifies the multipart upload |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the pathname's extension. |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token). You can also pass a client token created with the `generateClientTokenFromReadWriteToken` method |\n| `addRandomSuffix` | No  | A boolean specifying whether to add a random suffix to the pathname. It defaults to `true`. |\n| `cacheControlMaxAge` | No  | A number in seconds to configure the edge and browser cache. Defaults to one year. See the [caching](https://vercel.com/docs/storage/vercel-blob#caching) documentation for more details. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`completeMultipartUpload()` returns a `JSON` object with the following data for the created blob object:\n\n```\n{\n  pathname: `string`,\n  contentType: `string`,\n  contentDisposition: `string`,\n  url: `string`\n  downloadUrl: `string`\n}\n```\n\nA less verbose way than the manual process is the multipart uploader method. It's a wrapper around the manual multipart upload process and takes care of the data that is the same for all the three multipart phases. This results in a simpler API, but still requires you to handle memory usage and concurrent upload requests.\n\nPhase 1: Create the multipart uploader\n\n```\nconst uploader = await createMultipartUploader(pathname, options);\n```\n\n`createMultipartUploader` accepts the following parameters:\n\n*   `pathname`: (Required) A string specifying the path inside the blob store. This will be the base value of the return URL and includes the filename and extension.\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the pathname's extension. |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token). You can also pass a client token created with the `generateClientTokenFromReadWriteToken` method |\n| `addRandomSuffix` | No  | A boolean specifying whether to add a random suffix to the pathname. It defaults to `true`. |\n| `cacheControlMaxAge` | No  | A number in seconds to configure the edge and browser cache. Defaults to one year. See the [caching](https://vercel.com/docs/storage/vercel-blob#caching) documentation for more details. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`createMultipartUploader()` returns an `Uploader` object with the following methods:\n\n```\n{\n  key: `string`,\n  uploadId: `string`\n  uploadPart: `function`\n  complete: `function`\n}\n```\n\nPhase 2: Upload all the parts\n\nIn the multipart uploader process, it's necessary for you to manage both memory usage and concurrent upload requests. Additionally, each part must be a minimum of 5MB, except the last one which can be smaller, and all parts should be of equal size.\n\n```\nconst part = await uploader.uploadPart(partNumber, chunkBody);\n```\n\n`uploader.uploadPart` accepts the following parameters:\n\n*   `partNumber`: (Required) A number identifying which part is uploaded\n*   `chunkBody`: (Required) A blob object as `ReadableStream`, `String`, `ArrayBuffer` or `Blob` based on these [supported body types](https://developer.mozilla.org/docs/Web/API/fetch#body)\n\n`uploader.uploadPart()` returns a `JSON` object with the following data for the uploaded part:\n\n```\n{\n  etag: `string`,\n  partNumber: `string`\n}\n```\n\nPhase 3: Complete the multipart upload\n\n```\nconst blob = await uploader.complete(partNumber, chunkBody);\n```\n\n`uploader.complete` accepts the following parameters:\n\n*   `parts`: (Required) An array containing all the uploaded parts\n\n`uploader.complete()` returns a `JSON` object with the following data for the created blob object:\n\n```\n{\n  pathname: `string`,\n  contentType: `string`,\n  contentDisposition: `string`,\n  url: `string`\n  downloadUrl: `string`\n}\n```\n\nThis example creates an Edge Function that deletes a blob object from the Blob store.\n\n```\nimport { del } from '@vercel/blob';\n \nexport const runtime = 'edge';\n \nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const urlToDelete = searchParams.get('url') as string;\n  await del(urlToDelete);\n \n  return new Response();\n}\n```\n\nThe `del` method deletes a blob object from the Blob store.\n\nIt accepts the following parameters:\n\n*   `url`: (Required) A string or Array of strings specifying the unique URL(s) of the blob object(s) to delete\n*   `options`: (Optional) A `JSON` object with the following optional parameter:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `token` | No  | A string specifying the read-write token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token) |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`del()` returns a `void` response. A delete action is always successful if the blob url exists. A delete action won't throw if the blob url doesn't exists.\n\nThis example creates an Edge Function that returns a blob object's metadata.\n\n```\nimport { head } from '@vercel/blob';\n \nexport const runtime = 'edge';\n \nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const blobUrl = searchParams.get('url');\n  const blobDetails = await head(blobUrl);\n \n  return Response.json(blobDetails);\n}\n```\n\nThe `head` method returns a blob object's metadata.\n\nIt accepts the following parameters:\n\n*   `url`: (Required) A string specifying the unique URL of the blob object to read\n*   `options`: (Optional) A `JSON` object with the following optional parameter:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `token` | No  | A string specifying the read-write token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token) |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`head()` returns one of the following:\n\n*   a `JSON` object with the requested blob object's metadata\n*   throws a `BlobNotFoundError` if the blob object was not found\n\n```\n{\n  size: `number`;\n  uploadedAt: `Date`;\n  pathname: `string`;\n  contentType: `string`;\n  contentDisposition: `string`;\n  url: `string`;\n  downloadUrl: `string`\n  cacheControl: `string`;\n}\n```\n\nThis example creates an Edge Function that returns a list of blob objects in a Blob store.\n\n```\nimport { list } from '@vercel/blob';\n \nexport const runtime = 'edge';\n \nexport async function GET(request: Request) {\n  const { blobs } = await list();\n  return Response.json(blobs);\n}\n```\n\nThe `list` method returns a list of blob objects in a Blob store.\n\nIt accepts the following parameters:\n\n*   `options`: (Optional) A `JSON` object with the following optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `token` | No  | A string specifying the read-write token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token) |\n| `limit` | No  | A number specifying the maximum number of blob objects to return. It defaults to 1000 |\n| `prefix` | No  | A string used to filter for blob objects contained in a specific folder assuming that the folder name was used in the `pathname` when the blob object was uploaded |\n| `cursor` | No  | A string obtained from a previous response for pagination of retults |\n| `mode` | No  | A string specifying the response format. Can either be `expanded` (default) or `folded`. In `folded` mode all blobs that are located inside a folder will be folded into a single folder string entry |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`list()` returns a `JSON` object in the following format:\n\n```\nblobs: {\n  size: `number`;\n  uploadedAt: `Date`;\n  pathname: `string`;\n  url: `string`;\n  downloadUrl: `string`\n}[]\ncursor?: `string`;\nhasMore: `boolean`;\nfolders?: `string[]`\n```\n\nFor a long list of blob objects (the default list `limit` is 1000), you can use the `cursor` and `hasMore` parameters to paginate through the results as shown in the example below:\n\n```\nlet hasMore = true;\nlet cursor;\n \nwhile (hasMore) {\n  const listResult = await list({\n    cursor,\n  });\n  hasMore = listResult.hasMore;\n  cursor = listResult.cursor;\n}\n```\n\nTo retrieve the folders from your blob store, alter the `mode` parameter to modify the response format of the list operation. The default value of `mode` is `expanded`, which returns all blobs in a single array of objects.\n\nAlternatively, you can set `mode` to `folded` to roll up all blobs located inside a folder into a single entry. These entries will be included in the response as `folders`. Blobs that are not located in a folder will still be returned in the blobs property.\n\nBy using the `folded` mode, you can efficiently retrieve folders and subsequently list the blobs inside them by using the returned `folders` as a `prefix` for further requests. Omitting the `prefix` parameter entirely, will return all folders in the root of your store. Be aware that the blobs pathnames and the folder names will always be fully quantified and never relative to the prefix you passed.\n\n```\nconst {\n  folders: [firstFolder],\n  blobs: rootBlobs,\n} = await list({ mode: 'folded' });\n \nconst { folders, blobs } = await list({ mode: 'folded', prefix: firstFolder });\n```\n\nThis example creates an Edge Function that copies an existing blob to a new path in the store.\n\n```\nimport { copy } from '@vercel/blob';\n \nexport const runtime = 'edge';\n \nexport async function PUT(request: Request) {\n  const form = await request.formData();\n \n  const fromUrl = form.get('fromUrl') as string;\n  const toPathname = form.get('toPathname') as string;\n \n  const blob = await copy(fromUrl, toPathname, { access: 'public' });\n \n  return Response.json(blob);\n}\n```\n\nThe `copy` method copies an existing blob object to a new path inside the blob store.\n\nThe `contentType` and `cacheControlMaxAge` will not be copied from the source blob. If the values should be carried over to the copy, they need to be defined again in the options object.\n\nContrary to `put()`, `addRandomSuffix` is false by default. This means no automatic random id suffix is added to your blob url, unless you pass `addRandomSuffix: true`. This also means `copy()` overwrites files per default, if the operation targets a pathname that already exists.\n\n```\ncopy(fromUrl, toPathname, options);\n```\n\nIt accepts the following parameters:\n\n*   `fromUrl`: (Required) A blob URL identifying an already existing blob\n*   `toPathname`: (Required) A string specifying the new path inside the blob store. This will be the base value of the return URL\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the toPathname's extension. |\n| `token` | No  | A string specifying the token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token) |\n| `addRandomSuffix` | No  | A boolean specifying whether to add a random suffix to the pathname. It defaults to `false`. |\n| `cacheControlMaxAge` | No  | A number in seconds to configure the edge and browser cache. Defaults to one year. See the [caching](https://vercel.com/docs/storage/vercel-blob#caching) documentation for more details. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`copy()` returns a `JSON` object with the following data for the copied blob object:\n\n```\n{\n  pathname: `string`,\n  contentType: `string`,\n  contentDisposition: `string`,\n  url: `string`\n  downloadUrl: `string`\n}\n```\n\nAn example blob is:\n\n```\n{\n  pathname: 'profilesv1/user-12345-copy.txt',\n  contentType: 'text/plain',\n  contentDisposition: 'attachment; filename=\"user-12345-copy.txt\"',\n  url: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345-copy.txt'\n  downloadUrl: 'https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345-copy.txt?download=1'\n}\n```\n\nAs seen in the [client uploads quickstart docs](https://vercel.com/docs/storage/vercel-blob/client-upload), you can upload files directly from clients (like browsers) to the Blob store.\n\nAll client uploads related methods are available under `@vercel/blob/client`.\n\nThe `upload` method is dedicated to [client uploads](https://vercel.com/docs/storage/vercel-blob/client-upload). It fetches a client token on your server using the `handleUploadUrl` before uploading the blob. Read the [client uploads](https://vercel.com/docs/storage/vercel-blob/client-upload) documentation to learn more.\n\n```\nupload(pathname, body, options);\n```\n\nIt accepts the following parameters:\n\n*   `pathname`: (Required) A string specifying the base value of the return URL\n*   `body`: (Required) A blob object as `ReadableStream`, `String`, `ArrayBuffer` or `Blob` based on these [supported body types](https://developer.mozilla.org/docs/Web/API/fetch#body)\n*   `options`: (Required) A `JSON` object with the following required and optional parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `access` | Yes | `public` - Support for `private` is planned |\n| `contentType` | No  | A string indicating the [media type](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type). By default, it's extracted from the pathname's extension. |\n| `handleUploadUrl` | Yes\\* | A string specifying the route to call for generating client tokens for [client uploads](https://vercel.com/docs/storage/vercel-blob/client-upload). |\n| `clientPayload` | No  | A string to be sent to your `handleUpload` server code. Example use-case: attaching the post id an image relates to. So you can use it to update your database. |\n| `multipart` | No  | Pass `multipart: true` when uploading large files. It will split the file into multiple parts, upload them in parallel and retry failed parts. |\n| `abortSignal` | No  | An [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) to cancel the operation |\n\n`upload()` returns a `JSON` object with the following data for the created blob object:\n\n```\n{\n  pathname: `string`;\n  contentType: `string`;\n  contentDisposition: `string`;\n  url: `string`;\n  downloadUrl: `string`;\n}\n```\n\nAn example `url` is:\n\n```\nurl: \"https://ce0rcu23vrrdzqap.public.blob.vercel-storage.com/profilesv1/user-12345-NoOVGDVcqSPc7VYCUAGnTzLTG2qEM2.txt\"\n```\n\nA server-side route helper to manage client uploads, it has two responsibilities:\n\n1.  Generate tokens for client uploads\n2.  Listen for completed client uploads, so you can update your database with the URL of the uploaded file for example\n\nIt accepts the following parameters:\n\n*   `options`: (Required) A `JSON` object with the following parameters:\n\n| Parameter | Required | Values |\n| --- | --- | --- |\n| `token` | No  | A string specifying the read-write token to use when making requests. It defaults to `process.env.BLOB_READ_WRITE_TOKEN` when deployed on Vercel as explained in [Read-write token](#read-write-token) |\n| `request` | Yes | An `IncomingMessage` or `Request` object to be used to determine the action to take |\n| `onBeforeGenerateToken` | Yes | A function to be called right before generating client tokens for client uploads. See below for usage |\n| `onUploadCompleted` | Yes | A function to be called by Vercel Blob when the client upload finishes. This is useful to update your database with the blob url that was uploaded |\n| `body` | Yes | The request body |\n\n`handleUpload()` returns:\n\n```\nPromise<\n  | { type: 'blob.generate-client-token'; clientToken: string }\n  | { type: 'blob.upload-completed'; response: 'ok' }\n>\n```\n\nHere's an example Next.js App Router route handler that uses `handleUpload()`:\n\n```\nimport { handleUpload, type HandleUploadBody } from '@vercel/blob/client';\nimport { NextResponse } from 'next/server';\n \n// Use-case: uploading images for blog posts\nexport async function POST(request: Request): Promise<NextResponse> {\n  const body = (await request.json()) as HandleUploadBody;\n \n  try {\n    const jsonResponse = await handleUpload({\n      body,\n      request,\n      onBeforeGenerateToken: async (pathname, clientPayload) => {\n        // Generate a client token for the browser to upload the file\n        // ⚠️ Authenticate and authorize users before generating the token.\n        // Otherwise, you're allowing anonymous uploads.\n \n        // ⚠️ When using the clientPayload feature, make sure to valide it\n        // otherwise this could introduce security issues for your app\n        // like allowing users to modify other users' posts\n \n        return {\n          allowedContentTypes: ['image/jpeg', 'image/png', 'image/gif'], // optional, default to all content types\n          // maximumSizeInBytes: number, optional, the maximum is 5TB\n          // validUntil: number, optional, timestamp in ms, by default now + 30s (30,000)\n          // addRandomSuffix: boolean, optional, allows to disable or enable random suffixes (defaults to `true`)\n          // cacheControlMaxAge: number, optional, a duration in seconds to configure the edge and browser caches.\n          tokenPayload: JSON.stringify({\n            // optional, sent to your server on upload completion\n            // you could pass a user id from auth, or a value from clientPayload\n          }),\n        };\n      },\n      onUploadCompleted: async ({ blob, tokenPayload }) => {\n        // Get notified of client upload completion\n        // ⚠️ This will not work on `localhost` websites,\n        // Use ngrok or similar to get the full upload flow\n \n        console.log('blob upload completed', blob, tokenPayload);\n \n        try {\n          // Run any logic after the file upload completed,\n          // If you've already validated the user and authorization prior, you can\n          // safely update your database\n        } catch (error) {\n          throw new Error('Could not update post');\n        }\n      },\n    });\n \n    return NextResponse.json(jsonResponse);\n  } catch (error) {\n    return NextResponse.json(\n      { error: (error as Error).message },\n      { status: 400 }, // The webhook will retry 5 times waiting for a 200\n    );\n  }\n}\n```\n\nWhen you make a request to the SDK using any of the above methods, they will return an error if the request fails due to any of the following reasons:\n\n*   Missing required parameters\n*   An invalid token or a token that does have access to the Blob object\n*   Suspended Blob store\n*   Blob file or Blob store not found\n*   Unforeseen or unknown errors\n\nTo catch these errors, wrap your requests with a `try/catch` statement as shown below:\n\n```\nimport { put, BlobAccessError } from '@vercel/blob';\n \ntry {\n  await put(...);\n} catch (error) {\n  if (error instanceof BlobAccessError) {\n    // handle a recognized error\n  } else {\n    // throw the error again if it's unknown\n    throw error;\n  }\n}\n```",
    "title": "@vercel/blob",
    "description": "Learn how to use the Vercel Blob SDK to access your blob store from your apps in Edge Functions.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/integrations",
    "markdown": "# Using Edge Config with an integration\n\nVercel has partnered with A/B testing and feature flag services such as LaunchDarkly and Statsig to make it easier to integrate Edge Config into your workflow. These integrations sync feature flag definitions into Edge Config, allowing you to evaluate flags at the edge without making network calls to your preferred service provider.\n\nTo see these integrations in action, explore a template:\n\n## Explore Edge Config integrations with our templates.\n\nYou can get started with any of these Edge Config integrations by following the quickstart:",
    "title": "Using Edge Config with an integration",
    "description": "Learn how to use Edge Config with popular A/B testing and feature flag service integrations.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/vercel-api",
    "markdown": "# Managing Edge Configs with Vercel REST API\n\nWe recommend you use the Vercel REST API only for creating and updating an [Edge Config](https://vercel.com/storage/edge-config). For reading data (which you should do more often), we highly recommend using the [SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk).\n\nUpdates to your Edge Config can take up to a few seconds to propagate globally, and therefore might not be available from the Edge Config API endpoint immediately. However, fetching your Edge Config data from the Vercel REST API will always return the latest version of your Config. The request will not have Vercel's optimizations, and the response will not be served through Vercel's [Edge Network](https://vercel.com/docs/edge-network/overview).\n\nYou can also request metadata about your Edge Configs through the API.\n\nThis section will show you how to update, read metadata about, and read the contents of your Edge Configs with the Vercel REST API. To learn about other Vercel REST API functionality with Edge Configs, [read our API spec reference](https://vercel.com/docs/rest-api/endpoints#edge-config).\n\nTo create an Edge Config with the [Vercel REST API](https://vercel.com/docs/rest-api), make a `POST` request to the `edge-config` path of the API endpoint. Your URL should look like this:\n\n```\n'https://api.vercel.com/v1/edge-config';\n```\n\nThe request body should be a JSON object containing a `\"slug\"` with the name you would like to call your Edge Config as its value.\n\nThe name can only contain alphanumeric letters, \"\\_\" and \"-\". It cannot exceed 32 characters.\n\nSee the example below:\n\n```\ncurl  -X 'POST' 'https://api.vercel.com/v1/edge-config' \\\n      -H 'Authorization: Bearer your_vercel_api_token_here' \\\n      -H 'Content-Type: application/json; charset=utf-8' \\\n      -d $'{ \"slug\": \"your_edge_config_name_here\" }'\n```\n\nUpon success, you should receive a JSON response similar to the following:\n\n```\n{\n  \"createdAt\": 1234567890123,\n  \"updatedAt\": 1234567890123,\n  \"slug\": \"your_edge_config_slug_here\",\n  \"id\": \"your_edge_config_id_here\",\n  \"digest\": \"abc123efg456hij789\",\n  \"sizeInBytes\": 2,\n  \"itemCount\": 0,\n  \"ownerId\": \"your_id_here\"\n}\n```\n\nThe above example will create an Edge Config scoped to your Hobby account. To scope your Edge Config to a Vercel Team:\n\n*   [Generate a Vercel REST API access token](https://vercel.com/docs/rest-api/vercel-api-integrations#create-an-access-token) that is scoped to the appropriate Vercel Team\n*   Add the `?teamId` query parameter your `POST` request. Set its value to [the Team's ID](https://vercel.com/docs/accounts/create-a-team#find-your-team-id), which you can find under the Settings tab in the Team's Dashboard on Vercel.\n\nThe `\"ownerId\"` key's value will be your [Vercel Team's ID](https://vercel.com/docs/accounts/create-a-team#find-your-team-id) if you created the Edge Config using the `?teamId` query parameter.\n\nTo add an item to or update an item in your Edge Config, send a `PATCH` request to the `edge-config` endpoint, appending `/your_edge_config_id_here/items` to the end.\n\nIf you're requesting an Edge Config scoped to a team, add `?teamId=` to the end of the endpoint, pasting [the Vercel Team's ID](https://vercel.com/docs/accounts/create-a-team#find-your-team-id) after the `=` symbol.\n\nYour URL should look like this:\n\n```\n'https://api.vercel.com/v1/edge-config/your_edge_config_id_here/items?teamId=your_team_id_here';\n```\n\nYour request body should be a JSON object containing an `\"items\"` array. The `\"items\"` array must contain objects that describe the change you want to make to the Edge Config. The following table outlines valid keys and values for these objects:\n\n| Property | Description | Valid values |\n| --- | --- | --- |\n| `\"operation\"` | The change you want to make to your Edge Config. | `\"create\"`, `\"update\"`, `\"upsert\"`, `\"delete\"` |\n| `\"key\"` | The name of the key you want to add to or update within your Edge Config. | String of alphanumeric characters, \"\\_\" and \"-\" only. Up to 256 characters. |\n| `\"value\"` | The value you want to assign to the key. | Strings, JSON objects, `null` objects, Numbers and arrays of the previous four types |\n\nThe following example demonstrates a request body that creates an `\"example_key_1\"` key with a value of `\"example_value_1\"`, then updates the `\"example_key_2\"` key with a new value of `\"new_value\"`:\n\n```\n{\n  \"items\": [\n    {\n      \"operation\": \"create\",\n      \"key\": \"example_key_1\",\n      \"value\": \"example_value_1\"\n    },\n    {\n      \"operation\": \"update\",\n      \"key\": \"example_key_2\",\n      \"value\": \"new_value\"\n    }\n  ]\n}\n```\n\nThe following is an API call that sends the above request body to your Edge Config:\n\n```\ncurl -X 'PATCH' 'https://api.vercel.com/v1/edge-config/your_edge_config_id_here/items' \\\n     -H 'Authorization: Bearer your_vercel_api_token_here' \\\n     -H 'Content-Type: application/json' \\\n     -d $'{ \"items\": [ { \"operation\": \"create\", \"key\": \"example_key_1\", \"value\": \"example_value_1\" }, { \"operation\": \"update\", \"key\": \"example_key_2\", \"value\": \"new_value\" } ] }'\n```\n\nSuccessful requests will receive a response of `{\"status\":\"ok\"}`.\n\nIf only one of the operations in the `\"items\"` array of your `PATCH` request body fails, the entire request will fail. Failed requests will receive a response JSON object containing an `\"error\"` property with an object that contains information about why the request failed.\n\nFor example:\n\n```\n{\n  \"error\": {\n    \"code\": \"forbidden\",\n    \"message\": \"The request is missing an authentication token\",\n    \"missingToken\": true\n  }\n}\n```\n\nReading items from your Edge Configs with the Vercel REST API is not recommended. Instead, you should [use the SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk#read-multiple-values) or fetch Edge Config data with [the Edge Config endpoint](#make-requests-to-the-edge-config-endpoint).\n\nHowever, if you must read your Edge Config with the API, you can do so by making a `GET` request to the `edge-config` endpoint.\n\nYour URL should look like this:\n\n```\n'https://api.vercel.com/v1/edge-config/your_edge_config_id_here/items?teamId=your_team_id_here';\n```\n\nThe following is an example of a request that fetches an Edge Config's items with the Vercel REST API:\n\n```\ncurl \"https://api.vercel.com/v1/edge-config/your_edge_config_id_here/items?teamId=your_team_id_here\" \\\n     -H 'Authorization: Bearer your_vercel_api_token_here'\n```\n\nYou can read your Edge Config's metadata (but not its key-value pair contents) by making a `GET` request to the `edge-config` API endpoint. Append the Edge Config's id to the endpoint as a path, as demonstrated below. If the Edge Config is associated with a Team, add the `teamId` query param to the end.\n\nThe following is an example `GET` request that fetches metadata about an Edge Config associated with a Vercel Team.\n\n```\ncurl \"https://api.vercel.com/v1/edge-config/your_edge_config_id_here?teamId=your_team_id_here\" \\\n     -H 'Authorization: Bearer your_vercel_api_token_here'\n```\n\nIf the Edge Config exists, the response will be the same JSON object you receive when [creating your Edge Config with the Vercel REST API](#create-an-edge-config):\n\n```\n{\n  \"createdAt\": 1234567890123,\n  \"updatedAt\": 1234567890123,\n  \"slug\": \"your_edge_config_slug_here\",\n  \"id\": \"your_edge_config_id_here\",\n  \"digest\": \"abc123efg456hij789\",\n  \"sizeInBytes\": 2,\n  \"itemCount\": 0,\n  \"ownerId\": \"your_id_here\"\n}\n```\n\nYou can list all of your Edge Configs in a specific Hobby account or team with a `GET` request to the `edge-config` API endpoint. For example:\n\n```\ncurl \"https://api.vercel.com/v1/edge-config?teamId=your_team_id_here\" \\\n     -H 'Authorization: Bearer your_vercel_api_token_here'\n```\n\nThe response should be similar to this:\n\n```\n[\n  {\n    \"slug\": \"example_config_1\",\n    \"itemCount\": 0,\n    \"createdAt\": 1234567890123,\n    \"updatedAt\": 1234567890123,\n    \"id\": \"your_edge_config_id_here\",\n    \"digest\": \"abc123efg456hij789\",\n    \"sizeInBytes\": 2,\n    \"ownerId\": \"your_id_here\"\n  },\n  {\n    \"slug\": \"example_config_2\",\n    \"itemCount\": 0,\n    \"createdAt\": 0123456789012,\n    \"updatedAt\": 0123456789012,\n    \"id\": \"your_edge_config_id_here\",\n    \"digest\": \"123efg456hij789abc\",\n    \"sizeInBytes\": 2,\n    \"ownerId\": \"your_id_here\"\n  }\n]\n```\n\nWe recommend storing your [connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string) as an environment variable in your project and [using our SDK](https://vercel.com/docs/storage/edge-config/edge-config-sdk) to read Edge Config data. However, you can make requests to the Edge Config endpoint to read your Edge Config's data as well.\n\nTo do so, create an [Edge Config read access token](https://vercel.com/docs/storage/edge-config/using-edge-config#creating-a-read-access-token), which will be used to authenticate requests to the Edge Config endpoint.\n\nThe Edge Config endpoint used in the connection string is distinct from a Vercel REST API endpoint. Its root is `https://edge-config.vercel.com`. Making requests to the Edge Config endpoint allows you to take advantage of the optimizations that make Vercel's Edge Config reads hundreds of milliseconds faster than alternative options at the edge.\n\nTo read all of your Edge Config's items, send a `GET` request to the appropriate edge config endpoint by adding your Edge Config's ID and Edge Config read access token in the appropriate places in the below URL:\n\n```\ncurl 'https://edge-config.vercel.com/your_edge_config_id_here/items?token=your_edge_config_read_access_token_here'\n```\n\nYou can also send your Edge Config read access token in an Authorization header rather than as a query param.\n\n```\ncurl \"https://edge-config.vercel.com/your_edge_config_id_here/items\" \\\n     -H 'Authorization: Bearer your_edge_config_read_access_token_here'\n```\n\nThe response will be a JSON object containing all key-value pairs in the Edge Config. For example:\n\n```\n{\n  \"example_key_1\": \"example_value_1\",\n  \"example_key_2\": \"example_value_2\",\n  \"example_key_3\": \"example_value_3\"\n}\n```\n\nTo request a single item, you can use the `/item` path instead of `/items`, then add the key of the item you want as the final path as shown below:\n\n```\ncurl \"https://edge-config.vercel.com/your_edge_config_id_here/item/example_key_1?token=your_edge_config_read_access_token_here\" \\\n```\n\nYou can also send your Edge Config read access token in an Authorization header rather than as a query param.\n\n```\ncurl -X 'https://edge-config.vercel.com/your_edge_config_id_here/item/example_key_1' \\\n     -H 'Authorization: Bearer your_edge_config_read_access_token_here'\n```\n\nThe response will be the raw value at the specified key. For example, if `example_key_1` has a string value of `\"example_value\"`, the response will be:\n\nWhen you create an Edge Config, a hash string called a digest is generated and attached to it. This digest is replaced with a new hash string whenever you update your config. You can check this digest to verify whether your Edge Config has properly updated, and confirm which version of the Config you're working with.\n\nTo fetch an Edge Config's digest, send a `GET` request to your edge config endpoint, as shown below:\n\n```\ncurl \"https://edge-config.vercel.com/your_edge_config_id_here/digest?teamId=your_team_id_here&token=your_edge_config_read_access_token_here\"\n```\n\nYou can also send the Edge Config read access token in the `Authorization` header of your request using the `Bearer token` format:\n\n```\ncurl  -X 'GET' 'https://edge-config.vercel.com/your_edge_config_id_here/digest?teamId=your_team_id_here' \\\n      -H 'Authorization: Bearer your_edge_config_read_access_token_here\n```",
    "title": "Managing Edge Configs with Vercel REST API",
    "description": "Learn how to use the Vercel REST API to create and update Edge Configs. You can also read data stored in Edge Configs with the Vercel REST API.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/storage/edge-config/edge-config-sdk",
    "markdown": "# @vercel/edge-config\n\nThe [Edge Config](https://vercel.com/storage/edge-config) client SDK is the most ergonomic way to read data from Edge Configs. It provides several helper methods for reading values from one or multiple Edge Configs, and is compatible with Node.js, [the Edge Runtime](https://vercel.com/docs/functions/edge-functions/edge-runtime), and the browser.\n\nIt does not have functionality for _creating_ new Edge Configs and _writing_ to existing Edge Configs, which can be done [using the Vercel REST API](https://vercel.com/docs/storage/edge-config/vercel-api) or the [Dashboard](https://vercel.com/docs/storage/edge-config/edge-config-dashboard).\n\nYou can also [read Edge Config data with the Vercel REST API](https://vercel.com/docs/storage/edge-config/vercel-api#read-all-items). Review [Reading from an Edge Config](https://vercel.com/docs/storage/edge-config/using-edge-config#reading-data-from-edge-configs) to understand when to use the SDK versus the Vercel REST API.\n\nBefore you can start using the SDK, you need to have done the following:\n\n*   Created an Edge Config, which can be done using the [API](https://vercel.com/docs/storage/edge-config/vercel-api#create-an-edge-config) or the [Dashboard](https://vercel.com/docs/storage/edge-config/edge-config-dashboard#create-an-edge-config)\n*   Added [an Edge Config read access token](https://vercel.com/docs/storage/edge-config/using-edge-config#creating-a-read-access-token) to access your Edge Config\n*   Defined [a connection string](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string) with the Edge Config read access token and Edge Config id and stored it as an environment variable\n\nTo get started, install the SDK:\n\n```\npnpm i @vercel/edge-config\n```\n\nUse connection strings to connect your Edge Config to one or more projects. This allows Vercel to optimize your reads when you read the Edge Config through the SDK. You can learn how to create a connection string [here](https://vercel.com/docs/storage/edge-config/using-edge-config#using-a-connection-string).\n\nBy default, the SDK will run all helper methods using the connection string stored in the `EDGE_CONFIG` environment variable. That means, if you have the `EDGE_CONFIG` environment variable set in your project, you can import any of the helper methods and use them like so:\n\n```\nimport { NextResponse } from 'next/server';\nimport { getAll } from '@vercel/edge-config';\nconst configItems = await getAll();\n```\n\nHowever, you can store your connection string as any environment variable, and even connect to multiple Edge Configs by storing more than one connection string in your environment variables.\n\nTo do so, you must use the `createClient` helper.\n\nThe `createClient` helper method takes a connection string and returns an object that lets you use helper methods on the associated Edge Config. Using `createClient`, you can store multiple Edge Configs as environment variables and read data from all of them.\n\n```\nimport { createClient } from '@vercel/edge-config';\n// Fetch a single value from one config\nconst firstConfig = createClient(process.env.FIRST_EDGE_CONFIG);\nconst firstExampleValue1 = await firstConfig.get('other_example_key_1');\n \n// Fetch all values from another config\nconst secondConfig = createClient(process.env.SECOND_EDGE_CONFIG);\nconst allValues = await secondConfig.getAll();\n```\n\nThe following sections will teach you how to use all of the SDK's helper methods.\n\nThe `get` helper method allows you to fetch a value at a given key in your Edge Config. Create your API route using the `get` helper method in the `pages/api` or `api` directory of your project.\n\n```\nimport { NextResponse } from 'next/server';\nimport { get } from '@vercel/edge-config';\n \nexport const runtime = 'edge';\n \nexport async function GET() {\n  const exampleValue1 = await get('example_key_1');\n  return NextResponse.json({\n    label: `Value of \"example_key_1\" in my Edge Config.`,\n    value: exampleValue1,\n  });\n}\n```\n\nThe `getAll` helper method returns all of your Edge Config's items.\n\n```\nimport { NextResponse } from 'next/server';\nimport { getAll } from '@vercel/edge-config';\n \nexport const runtime = 'edge';\n \nexport async function GET() {\n  const configItems = await getAll();\n  return NextResponse.json({\n    label: `These are all the values in my Edge Config.`,\n    value: configItems,\n  });\n}\n```\n\nPassing an array of key names causes `getAll` to return only the specified keys.\n\n```\nimport { NextResponse } from 'next/server';\nimport { getAll } from '@vercel/edge-config';\n \nexport const runtime = 'edge';\n \nexport async function GET() {\n  const someItems = await getAll(['keyA', 'keyB']);\n  return NextResponse.json({\n    label: `These are a few values in my Edge Config.`,\n    value: someItems,\n  });\n}\n```\n\nThe `has` helper method lets you verify if a key exists in your Edge Config. It returns `true` if the key does, and `false` if it doesn't.\n\n```\nimport { NextResponse } from 'next/server';\nimport { has } from '@vercel/edge-config';\n \nexport const runtime = 'edge';\n \nexport async function GET() {\n  const exampleKeyExists = await has('example_key_1');\n  return NextResponse.json({\n    keyExists: exampleKeyExists ? `The key exists!` : `The key doesn't exist!`,\n  });\n}\n```\n\nEvery Edge Config has a hash string associated with it, which is updated whenever the Config is updated. Checking this digest can help you verify whether your Edge Config has properly updated, and confirm which version of the Config you're working with.\n\nThe `digest` helper method lets you check the version of the Edge Config you're reading.\n\n```\nimport { NextResponse } from 'next/server';\nimport { digest } from '@vercel/edge-config';\n \nexport const runtime = 'edge';\n \nexport async function GET() {\n  const version = await digest();\n  return NextResponse.json({\n    digest: version,\n  });\n}\n```\n\nYou cannot write to Edge Config items using the Edge Config SDK. Instead, you can programmatically write using the [Vercel REST API](https://vercel.com/docs/storage/edge-config/vercel-api#update-your-edge-config-items).\n\nThe Edge Config SDK is designed to read from our `edge-config.vercel.com` endpoint using read only tokens to authenticate reads, while writing requires [Vercel Access Tokens to authenticate with the Vercel REST API](https://vercel.com/docs/rest-api#authentication). This core distinction makes it impractical to use the SDK for writes.\n\nIf your project requires frequent writes, you should [learn more about Vercel KV](https://vercel.com/docs/storage/vercel-kv).\n\nAll helper methods throw errors when:\n\n*   Your Edge Config read access token is invalid\n*   The Edge Config you're reading from doesn't exists\n*   A network error occurs",
    "title": "@vercel/edge-config",
    "description": "The Edge Config client SDK is the most ergonomic way to read data from Edge Configs. Learn how to set up the SDK so you can start reading Edge Configs.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/cron-jobs/quickstart",
    "markdown": "# Cron Jobs Quickstart\n\nLearn how to schedule cron jobs to run at specific times or intervals.\n\nThe following guide will show you how to create a cron job on Vercel that executes every day at 5 am UTC.\n\n1.  Begin by creating a [Serverless](https://vercel.com/docs/functions/serverless-functions/quickstart#create-a-serverless-function) or [Edge](https://vercel.com/docs/functions/edge-functions/quickstart#create-an-edge-function) Function for your project. The function will echo the current time using the [World Time API](https://worldtimeapi.org/).\n    \n    ```\n    export async function GET() {\n      const result = await fetch(\n        'http://worldtimeapi.org/api/timezone/America/Chicago',\n        {\n          cache: 'no-store',\n        },\n      );\n      const data = await result.json();\n     \n      return Response.json({ datetime: data.datetime });\n    }\n    ```\n    \n    For those using TypeScript versions below 5.2, it's important to adapt the code to `import NextResponse from 'next/server'` and use `NextResponse.json` for the response. This ensures compatibility with earlier TypeScript versions in Next.js applications. In TypeScript 5.2 and above, the standard `new Response` pattern should be used.\n    \n2.  Create or go to your [`vercel.json`](https://vercel.com/docs/projects/project-configuration#functions) file and add the following code:\n    \n    ```\n    {\n      \"crons\": [\n        {\n          \"path\": \"/api/cron\",\n          \"schedule\": \"0 5 * * *\"\n        }\n      ]\n    }\n    ```\n    \n    The `crons` property is an array of cron jobs. Each cron job has two properties:\n    \n    *   The `path`, which must start with `/`\n    *   The `schedule` property, which must be a string that represents a [cron expression](https://vercel.com/docs/cron-jobs#cron-expressions). In this example, the job is scheduled to execute every day at 5:00 am UTC\n3.  When you deploy your project, Vercel's build process creates the cron job. Vercel invokes cron jobs only for [production](https://vercel.com/docs/deployments/environments#production) deployments and not for [preview](https://vercel.com/docs/deployments/preview-deployments) deployments\n    \n    You can also deploy to your production domain using the CLI:\n    \n\nYour cron job is now active and will call the `/api/cron` path every day at 5:00 am UTC.\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "Cron Jobs Quickstart",
    "description": "Learn how to schedule cron jobs to run at specific times or intervals.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/cron-jobs/manage-cron-jobs",
    "markdown": "# Managing Cron Jobs\n\nTo view your active cron jobs:\n\n1.  Select your project from the Vercel dashboard\n2.  Select the Settings tab\n3.  Select the Cron Jobs tab from the left sidebar\n\n*   Updating Cron Jobs: Change the [expression](https://vercel.com/docs/cron-jobs#cron-expressions) in `vercel.json` file or the function's configuration, and then redeploy\n*   Deleting Cron Jobs: Remove the configuration from the `vercel.json` file or the function's configuration, and then redeploy\n*   Disabling Cron Jobs: Navigate to the Cron Jobs tab and then click the Disable Cron Jobs button\n\nDisabled cron jobs will still be listed and will count towards your [cron jobs limits](https://vercel.com/docs/cron-jobs/usage-and-pricing)\n\nIt is possible to secure your cron job invocations by adding an environment variable called `CRON_SECRET` to your Vercel project. We recommend using a random string of at least 16 characters for the value of `CRON_SECRET`. A password generator, like [1Password](https://1password.com/password-generator/), can be used to create one.\n\nThe value of the variable will be automatically sent as an `Authorization` header when Vercel invokes your cron job. Your endpoint can then compare both values, the authorization header and the environment variable, to verify the authenticity of the request.\n\n```\nimport type { NextRequest } from 'next/server';\n \nexport function GET(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {\n    return new Response('Unauthorized', {\n      status: 401,\n    });\n  }\n \n  return Response.json({ success: true });\n}\n```\n\nThe `authorization` header will have the `Bearer` prefix for the value.\n\nFor those using TypeScript versions below 5.2, it's important to adapt the code to `import NextResponse from 'next/server'` and use `NextResponse.json` for the response. This ensures compatibility with earlier TypeScript versions in Next.js applications. In TypeScript 5.2 and above, the standard `new Response` pattern should be used.\n\nThe duration limits for Cron jobs are identical to those of [Serverless](https://vercel.com/docs/functions/serverless-functions#limits) and [Edge](https://vercel.com/docs/functions/edge-functions/limitations) functions. See the [`maxDuration`](https://vercel.com/docs/functions/serverless-functions/runtimes#max-duration) documentation for more information.\n\nIn most cases, these limits are sufficient. However, if you need more processing time, it's recommended to split your cron jobs into different units or distribute your workload by combining cron jobs with regular HTTP requests with your API.\n\nVercel will not retry an invocation if a cron job fails. You can check for error [logs](https://vercel.com/docs/observability/runtime-logs) through the View Log button in the Cron Jobs tab.\n\nCron jobs can be created for [dynamic routes](https://nextjs.org/docs/routing/dynamic-routes):\n\n```\n{\n  \"crons\": [\n    {\n      \"path\": \"/api/sync-slack-team/T0CAQ10TZ\",\n      \"schedule\": \"0 5 * * *\"\n    },\n    {\n      \"path\": \"/api/sync-slack-team/T4BOE34OP\",\n      \"schedule\": \"0 5 * * *\"\n    }\n  ]\n}\n```\n\nIf you create a cron job for a path that doesn't exist, it generates a [404 error](https://vercel.com/docs/errors/platform-error-codes#404:-not_found). However, Vercel still executes your cron job. You can analyze your logs to check if there are any issues.\n\nCreating a new deployment will not interrupt your running cron jobs; they will continue until they finish.\n\nWhen performing an [instant rollback](https://vercel.com/docs/deployments/instant-rollback), all cron jobs will be reverted to the state of the rolled back deployment.\n\nWhen a cron job takes too long to run, you might encounter two concurrent cron job invocations, which could cause problems. Implementing a lock mechanism in your cron job, for example by using [Redis](https://redis.io/docs/manual/patterns/distributed-locks/), is recommended in such cases.\n\nAlternatively, ensure your cron job is fast enough or set it to timeout if it runs for too long.\n\nCron jobs are API routes. You can run them locally by making a request to their endpoint. For example, if your cron job is in `/api/cron`, you could visit the following endpoint in your browser: `http://localhost:3000/api/cron`. Note, there's currently no support for `vercel dev`, `next dev`, or other framework-native local development servers.\n\nCron jobs do not follow redirects. When a cron-triggered endpoint returns a 3xx redirect status code, the job completes without further requests. Redirect responses are treated as final for each invocation.\n\nThe view logs button on the cron job overview can be used to verify the response of the invocations and gain further insights.",
    "title": "Managing Cron Jobs",
    "description": "Learn how to manage Cron Jobs effectively in Vercel. Explore cron job duration, error handling, deployments, concurrency control, local execution, and more to optimize your serverless workflows.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/migrating-from-legacy",
    "markdown": "# Migrating to the latest Speed Insights package\n\nThe new Speed Insights brings a few changes to the UI and the ingestion mechanism. You find a list of changes below and understand how they affect you.\n\nVercel introduced a package titled [`@vercel/speed-insights`](https://vercel.com/docs/speed-insights/package) as an iteration from the automatic install process. This shift is intended to offer more flexibility and broader framework support.\n\nBy migrating to the new Speed Insights package, you benefit from the following features:\n\n*   First-Party Ingestion: Data is processed directly through your own domain, eliminating the third-party domain lookup\n*   Enhanced Route Support: Dynamic route segment is supported in more frameworks such as Next.js `app` router, Nuxt, Remix, and SvelteKit\n*   Advanced Customization: The updated package provides tools for more granular control, such as the ability to [intercept requests](https://vercel.com/docs/speed-insights/package#beforesend) and [set sample rates](https://vercel.com/docs/speed-insights/package#samplerate) on a project basis\n\nYou should become familiar with the `@vercel/speed-insights` [configuration options](https://vercel.com/docs/speed-insights/package) and upgrade. However, the [intake API](https://vercel.com/docs/speed-insights/api) will still be usable for some time.\n\nSample rate configurations have been relocated from team settings to the [@vercel/speed-insights package](https://vercel.com/docs/speed-insights/package), providing the capability to [set specific rates](https://vercel.com/docs/speed-insights/package#samplerate) for each project.\n\nData ingestion now utilizes a first-party intake during your deployment. Here's how it works:\n\n*   The script is now sourced from your own domain at this endpoint: `https://yourdomain.com/_vercel/speed-insights/script.js`.\n*   Data points are also ingested through your own domain at this endpoint: `https://yourdomain.com/_vercel/speed-insights/vitals`.\n\nWith this change, the script becomes less affected by content blockers and performs fewer DNS lookups, resulting in a faster and more reliable experience. It is no longer required to define a [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP) to allow the third-party script.\n\nOur revamped dashboard emphasizes the 75th percentile, a [recommendation](https://web.dev/articles/defining-core-web-vitals-thresholds#choice_of_percentile) from the Core Web Vitals team.\n\nIn other terms, the score is now determined by the experience of the fastest 75% of your users.\n\nThis percentile was chosen because it represents the performance experienced by the majority of visits and is not significantly affected by outliers.\n\nFor deeper insights, it is now possible to view multiple percentiles at once, without affecting the score.\n\nSpeed Insights now uses scoring criteria that are inspired by the improvements found in Lighthouse 10. Below, you'll find a comprehensive comparison of the metrics, thresholds, and their respective weights as per our updated system and its previous iteration.\n\nAll previous (prior to the new Speed Insights) and new data points use this updated scoring criteria.\n\nComparison table between the new and old scoring criteria\n\n| Metric | Old Thresholds | New Thresholds | Old Weights | New Weights |\n| --- | --- | --- | --- | --- |\n| RES | 90~50 | 90~50 | Not applicable | Not applicable |\n| FCP | 0.9~1.6s (Desktop)  <br>2.3~4s (Mobile) | 1.8~3s | 20% | 15% |\n| LCP | 1.2~2.4s (Desktop)  <br>2.5~4s (Mobile) | 2.5~4s | 35% | 30% |\n| INP | Not applicable | 200~500ms | \\-  | 30% |\n| FID | 100~300ms | 100~300ms | 30% | Not applicable |\n| CLS | 0.1~0.25 | 0.1~0.25 | 15% | 25% |\n| TTFB | Not applicable | 0.8~1.8s | \\-  | \\-  |\n\nChanges are highlighted in bold.\n\nThe CLS metric is given more weight in the new version, and the FID metric is replaced with INP. The FCP and LCP metrics now have the same thresholds for both desktop and mobile.\n\nWe've introduced a new metric, [Time to First Byte (TTFB)](https://vercel.com/docs/speed-insights/metrics#time-to-first-byte-ttfb), which measures the time taken by the server to respond to the first request. This metric is not included in the score, but it can offer more insights about performance.",
    "title": "Migrating to the latest Speed Insights package",
    "description": "Understand the transition from Speed Insights to the new version – know the differences and how they affect you.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/quickstart",
    "markdown": "# Vercel Speed Insights QuickstartHTML5\n\nTo view instructions on using the Vercel Speed Insights in your project for your framework, use the Choose a framework dropdown on the right (at the bottom in mobile view).\n\nTo start tracking performance metrics with [Speed Insights](https://vercel.com/docs/speed-insights), use the following steps:\n\n1.  On the [Vercel dashboard](https://vercel.com/dashboard), select your Project followed by the Speed Insights tab. You can also select the button below to be taken there. Then, select Enable from the dialog.\n    \n    [](https://vercel.com/d?to=%2F%5Bteam%5D%2F%5Bproject%5D%2Fspeed-insights&title=Open+Speed+Insights)\n    \n    Enabling Speed Insights will add new routes (scoped at `/_vercel/speed-insights/*`) after your next deployment.\n    \n2.  Using the package manager of your choice, add the `@vercel/speed-insights` package to your project:\n    \n    ```\n    pnpm i @vercel/speed-insights\n    ```\n    \n3.  Add the `SpeedInsights` component to your app\n    \n    The `SpeedInsights` component is a wrapper around the tracking script, offering more seamless integration with Next.js.\n    \n    Add the following component to the root layout:\n    \n    Add the following component to your main app file:\n    \n    ```\n    import { SpeedInsights } from '@vercel/speed-insights/next';\n     \n    export default function RootLayout({\n      children,\n    }: {\n      children: React.ReactNode;\n    }) {\n      return (\n        <html lang=\"en\">\n          <head>\n            <title>Next.js</title>\n          </head>\n          <body>\n            {children}\n            <SpeedInsights />\n          </body>\n        </html>\n      );\n    }\n    ```\n    \n4.  You can deploy your app to Vercel's global [Edge Network](https://vercel.com/docs/edge-network/overview) by running the following command from your terminal:\n    \n    Alternatively, you can [connect your project's git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository), which will enable Vercel to deploy your latest pushes and merges to main.\n    \n    Once your app is deployed, it's ready to begin tracking performance metrics.\n    \n    If everything is set up correctly, you should be able to find the `/_vercel/speed-insights/script.js` script inside the body tag of your page.\n    \n\nLearn more about how Vercel supports [privacy and data compliance standards](https://vercel.com/docs/speed-insights/privacy-policy) with Vercel Speed Insights.\n\nIf you are experiencing a situation where data is not visible in the Speed Insights dashboard, it could be due to a couple of reasons.\n\nHow to fix:\n\n1.  Double check if you followed the quickstart instructions correctly\n2.  Check if your adblocker is interfering with the Speed Insights script. If so, consider disabling it\n\nSpeed Insights may not function when using a proxy, such as [Cloudflare](https://vercel.com/docs/integrations/external-platforms/cloudflare).\n\nHow to fix:\n\n1.  Check your proxy configuration to make sure that all desired pages are correctly proxied to the deployment\n2.  Additionally, forward all requests to `/_vercel/speed-insights/*` to the deployments to ensure proper functioning of Speed Insights through the proxy",
    "title": "Vercel Speed Insights Quickstart",
    "description": "Vercel Speed Insights provides you detailed insights into your website's performance. This quickstart guide will help you get started with using Speed Insights on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/package",
    "markdown": "# Speed Insights Configuration with @vercel/speed-insightsHTML5\n\nWith the `@vercel/speed-insights` npm package, you're able to configure your application to capture and send web performance metrics to Vercel.\n\nTo get started with Speed Insights, refer to our [Quickstart](https://vercel.com/docs/speed-insights/quickstart) guide which will walk you through the process of setting up Speed Insights for your project.\n\nIn prior versions of Speed Insights this was managed in the UI. This option is now managed through code with the package.\n\nThis parameter determines the percentage of events that are sent to the server. By default, all events are sent. Lowering this parameter allows for cost savings but may result in a decrease in the overall accuracy of the data being sent. For example, a `sampleRate` of `0.5` would mean that only 50% of the events will be sent to the server.\n\nWith the `beforeSend` function, you can modify or filter out the event data before it's sent to Vercel. You can use this to redact sensitive data or to avoid sending certain events.\n\nFor instance, if you wish to ignore events from a specific URL or modify them, you can do so with this option.\n\n```\n// Example usage of beforeSend\nbeforeSend: (data) => {\n  if (data.url.includes('/sensitive-path')) {\n    return null; // this will ignore the event\n  }\n  return data; // this will send the event as is\n};\n```\n\nWith the debug mode, you can view all Speed Insights events in the browser's console. This option is especially useful during development.\n\nThis option is automatically enabled if the `NODE_ENV` environment variable is available and either `development` or `test`.\n\nYou can manually disable it to prevent debug messages in your browsers console.\n\nThe `route` option allows you to specify the current dynamic route (such as `/blog/[slug]`). This is particularly beneficial when you need to aggregate performance metrics for similar routes.\n\nThis option is automatically set when using a framework specific import such as for Next.js, Nuxt, SvelteKit and Remix.",
    "title": "Speed Insights Configuration with @vercel/speed-insights",
    "description": "With the @vercel/speed-insights npm package, you can configure your application to capture and send web performance metrics to Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/privacy-policy",
    "markdown": "# Vercel Speed Insights Privacy & Compliance\n\nTo ensure that the Speed Insights feature can be used despite many different regulatory limitations around the world, we've designed it in such a way that it provides you with information without being tied to, or associated with, any individual visitor or IP address.\n\nThe recording of data points is anonymous and the Speed Insights feature does not collect or store information that would enable us to reconstruct a browsing session across pages or identify a user.\n\nThe following information is stored with every data point:\n\n| Collected Value | Example Value |\n| --- | --- |\n| Route | /blog/\\[slug\\] |\n| URL | /blog/nextjs-10 |\n| Network Speed | 4g (or slow-2g, 2g, 3g) |\n| Browser | Chrome 86 (Blink) |\n| Device Type | Mobile (or Desktop/Tablet) |\n| Device OS | Android 10 |\n| Country (ISO 3166-1 alpha-2) | US  |\n| Web Vital | FCP 1.0s |\n| Web Vital Attribution | html>body img.header |\n| SDK Information | @vercel/speed-insights 0.1.0 |\n| Server-Received Event Time | 2023-10-29 09:06:30 |\n\nPlease see our [Privacy Notice](https://vercel.com/legal/privacy-policy) for more information, including how Vercel Speed Insights complies with the GDPR.\n\nOnce you've followed the dashboard's instructions for enabling Speed Insights and installed the `@vercel/speed-insights` package, it will automatically start tracking data points for your project.\n\nThe package injects a script that retrieves the visitor's [Web Vitals](https://vercel.com/docs/speed-insights/metrics) by invoking native browser APIs and reporting them to Vercel's servers on every page load.\n\nOnly fresh page loads report Speed Insights. Client-side page transitions do not. For example, typing `vercel.com/blog` into your address bar and hitting enter will send them but selecting a link on a blog post will not.\n\nLearn more about the [first-party intake data ingestion method](https://vercel.com/docs/speed-insights/migrating-from-legacy#first-party-intake), which enables a faster and more reliable experience.",
    "title": "Vercel Speed Insights Privacy & Compliance",
    "description": "Learn how Vercel follows the latest privacy and data compliance standards with its Speed Insights feature.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/package",
    "markdown": "# Advanced Web Analytics Config with @vercel/analytics\n\nWith the `@vercel/analytics` npm package you're able to configure your application to send analytics data to Vercel.\n\nTo get started with analytics, follow our [Quickstart](https://vercel.com/docs/analytics/quickstart) guide which will walk you through the process of setting up analytics for your project.\n\nOverride the automatic environment detection. This option allows you to force a specific environment for the package. If not defined, it will use `auto` which tries to set the `development` or `production` mode based on available environment variables such as `NODE_ENV`.\n\nIf your used framework does not expose these environment variables, the automatic detection won't work correctly. In this case, you're able to provide the correct `mode` manually or by other helpers that your framework exposes.\n\nIf you're using the `<Analytics />` component, you can pass the `mode` prop to force a specific environment:\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics mode={'production'} />;\n      </body>\n    </html>\n  );\n}\n```\n\nYou'll see all analytics events in the browser's console with the debug mode. This option is automatically enabled if the `NODE_ENV` environment variable is available and either `development` or `test`.\n\nYou can manually disable it to prevent debug messages in your browsers console.\n\nTo disable the debug mode for server-side events, you need to set the `VERCEL_WEB_ANALYTICS_DISABLE_LOGS` environment variable to `true`.\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics debug={false} />;\n      </body>\n    </html>\n  );\n}\n```\n\nFor plain HTML sites, you have to change the script URL on your `.html` files:\n\n```\n<script defer src=\"https://cdn.vercel-insights.com/v1/script.debug.js\"></script>\n```\n\nMake sure you change the URL back to `/_vercel/insights/script.js` when deploying to production.\n\nWith the `beforeSend` option, you can modify the event data before it's sent to Vercel. Below, you will see an example that ignores all events that have a `/private` inside the URL.\n\nReturning `null` will ignore the event and no data will be sent. You can also modify the URL and check our docs about [redacting sensitive data](https://vercel.com/docs/analytics/redacting-sensitive-data).\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics\n          beforeSend={(event) => {\n            if (event.url.includes('/private')) {\n              return null;\n            }\n            return event;\n          }}\n        />\n      </body>\n    </html>\n  );\n}\n```",
    "title": "Advanced Web Analytics Config with @vercel/analytics",
    "description": "With the @vercel/analytics npm package, you are able to configure your application to send analytics data to Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/speed-insights/disable",
    "markdown": "# Disabling Speed Insights\n\nYou may want to disable Speed Insights in your project if you find you no longer need it. You can disable Speed Insights from within the project settings in the Vercel dashboard. If you are unsure if a project has Speed Insights enabled, see [Identifying if Speed Insights is enabled](#identifying-if-speed-insights-is-enabled).\n\nIf you transfer a project with Speed Insights enabled from a Hobby account to a Pro plan, it will continue to be enabled but with increased limits, as documented in the [pricing docs](https://vercel.com/docs/speed-insights/limits-and-pricing) . This means that Speed Insights will be added to your Pro plan invoice automatically.\n\n1.  Select a project from your [dashboard](https://vercel.com/dashboard) and navigate to the Speed Insights tab.\n    \n2.  To disable Speed Insights on a project, click on the ellipsis on the top-right of the Speed Insights page and select Disable Speed Insights.\n    \n    ![Disable Speed Insights option.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fdisable-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Disable Speed Insights option.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fdisable-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n    \n    Disable Speed Insights option.\n    \n\nWhen you disable Speed Insights in the middle of your billing cycle, it will not be removed instantly. Instead it will stop collecting new data points but will continue to show already collected data until the end of the cycle, see the [prorating docs](https://vercel.com/docs/speed-insights/limits-and-pricing#prorating) for more information.\n\nIf you are on an Enterprise plan, please remember to check your contract entitlements as you may have custom limits included. If you have any questions about your billing/contract regarding Speed Insights you can reach out to your CSM or AE for further clarification.\n\nIf you have many projects on your Vercel account and are not sure which of them has Speed Insights enabled, you can see this from the [dashboard](https://vercel.com/dashboard) without needing to check each project separately. The different circles in the right corner of each project card will show the Speed Insights status.\n\nIf Speed Insights is not enabled, then the circle will look like the below:\n\n![Speed Insights not enabled for a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fready-to-enable-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Speed Insights not enabled for a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fready-to-enable-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSpeed Insights not enabled for a project.\n\nIf Speed Insights is enabled but no data points have been collected yet then it will show an empty circle, like the below:\n\n![Speed Insights enabled for a project but no data points have been collected.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fenabled-no-data-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Speed Insights enabled for a project but no data points have been collected.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fenabled-no-data-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSpeed Insights enabled for a project but no data points have been collected.\n\nIf Speed Insights is enabled and data points have been collected then the circle will be coloured with a number inside, similar to the below image:\n\n![Speed Insights enabled for a project and has data points.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fenabled-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Speed Insights enabled for a project and has data points.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fspeed-insights%2Fv2%2Fenabled-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nSpeed Insights enabled for a project and has data points.",
    "title": "Disabling Speed Insights",
    "description": "How to disable Speed Insights from within the Vercel dashboard",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/filtering",
    "markdown": "# Filtering Analytics\n\nWeb Analytics provides you with a way to filter your data in order to gain a deeper understanding of your website traffic. This guide will show you how to use the filtering feature and provide examples of how to use it to answer specific questions.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fweb-analytics%2Ffiltering-row-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fweb-analytics%2Ffiltering-row-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nTo filter the Web Analytics view, select your project and then click the Analytics tab. From there select on any row within any of the data panels.\n\nYou can filter your data by the following criteria:\n\n*   Referrers\n*   Viewed Pages\n*   Country\n*   Browsers\n*   Operating System\n*   UTM Parameters (available with [Web Analytics Plus](https://vercel.com/docs/analytics/limits-and-pricing) and Enterprise)\n*   Hostname\n\nTo apply a filter, click on any row within a data panel you want to filter by. For example, if you want to see data for visitors from the United States, you would search for \"United States\" within the Country panel and click on it.\n\n![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fweb-analytics%2Ffiltering-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fweb-analytics%2Ffiltering-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nYou can also use multiple filters at once. For example, you could filter for visitors from the United States who used Chrome as their browser.\n\nBy using the filtering feature in Web Analytics, you can gain a deeper understanding of your website traffic and make data-driven decisions.\n\nHere are a few examples of how you can use the filtering feature to gain insights into your website traffic:\n\nLet's say you want to find out where people came from that viewed your \"About Us\" page. To do this, you would first apply a filter in the Pages panel and click on the `/about-us` page. This will show you all of the data for visitors who viewed that page. In the Referrer panel you will see all external pages, that link directly to this page.\n\nYou can use the Web Analytics dashboard to find out what content people from a specific country viewed. For example, to see what pages visitors from Canada viewed, you would go to the Countries panel, search for \"Canada\" and click on the row labeled \"Canada\". This will show you all of the data for visitors from Canada. Next, you can go to the Pages panel to see what specific pages they viewed.\n\nTo find out viewed pages from a specific referrer, such as Google, you can go to the Referrers panel, look for \"google.com\" and click on it. This will show you all of the data for visitors who came from google.com. Next, you can go to the Pages panel to see what specific pages they viewed.\n\nYou can drill down into your data to gain a deeper understanding of your website traffic. By default, the Referrers panel only shows top level domains, but by clicking on one of the domains, you can start a drill-down and reveal all sub-pages that refer to your website.\n\nFor example, by default, you may only see \"github.com\" as a referrer. However, by clicking on it, you will now see all pages on GitHub that drive traffic to your site, such as \"github.com/vercel/next\".\n\nThis feature can be especially useful for identifying the sources of referral traffic, and finding out which specific pages on a website are driving traffic to your site.\n\nThe drill-down feature is only available in the **Referrers** panel and not in other panels.\n\nWeb Analytics allows you to track the origin of traffic from Twitter by using the Twitter Resolver feature.\n\nTo use it, click on the `t.co` referrer to filter for it. This performs a drill-down, which reveals all `t.co` links that refer to your page. By clicking on any of these links a new tab will open and and redirect you to the Twitter search page with the URL as the search parameter. From there, you can find the original post of the link and gain insights into the traffic coming from Twitter.\n\nTwitter search might not always be able to resolve to the original post of that link, and it may appear multiple times.\n\nThis feature can be especially useful for understanding the performance of Twitter campaigns, identifying the sources of referral traffic and finding out the origin of a specific link.\n\nThis feature is only available for `t.co` links and not other short links.",
    "title": "Filtering Analytics",
    "description": "Learn how filters allow you to explore insights about your website's visitors.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/quickstart",
    "markdown": "# Vercel Web Analytics QuickstartHTML5\n\nSelect your framework to view instructions on using the Vercel Web Analytics in your project.\n\nTo start tracking [visitors](https://vercel.com/docs/analytics#visitors) and [page views](https://vercel.com/docs/analytics#page-views) with Web Analytics, use the following steps:\n\n1.  On the [Vercel dashboard](https://vercel.com/dashboard), select your Project and then click the Analytics tab and click Enable from the dialog.\n    \n    [](https://vercel.com/d?to=%2F%5Bteam%5D%2F%5Bproject%5D%2Fanalytics&title=Open+Web+Analytics)\n    \n    Enabling Web Analytics will add new routes (scoped at `/_vercel/insights/*`) after your next deployment.\n    \n*   Using the package manager of your choice, add the `@vercel/analytics` package to your project:\n    3.  The `Analytics` component is a wrapper around the tracking script, offering more seamless integration with Next.js.\n    \n    Add the following component to the root layout.\n    \n    ```\n    import { Analytics } from '@vercel/analytics/react';\n     \n    export default function RootLayout({\n      children,\n    }: {\n      children: React.ReactNode;\n    }) {\n      return (\n        <html lang=\"en\">\n          <head>\n            <title>Next.js</title>\n          </head>\n          <body>\n            {children}\n            <Analytics />\n          </body>\n        </html>\n      );\n    }\n    ```\n    \n4.  You can deploy your app to Vercel's global [Edge Network](https://vercel.com/docs/edge-network/overview) by running the following command from your terminal:\n    \n    Alternatively, you can [connect your project's git repository](https://vercel.com/docs/deployments/git#deploying-a-git-repository), which will enable Vercel to deploy your latest pushes and merges to main.\n    \n    Once your app is deployed, it's ready to begin tracking visitors and page views.\n    \n    If everything is set up properly, you should be able to see a Fetch/XHR request in your browser's Network tab from `/_vercel/insights/view` when you visit any page.\n    \n\nLearn more about how Vercel supports [privacy and data compliance standards](https://vercel.com/docs/analytics/privacy-policy) with Vercel Web Analytics.\n\nIf you are experiencing a situation where data is not visible in the analytics dashboard or a 404 error occurs while loading `script.js`, it could be due to deploying the tracking code before enabling Web Analytics.\n\nHow to fix:\n\n1.  Make sure that you have enabled Analytics in the dashboard\n2.  Re-deploy your app to Vercel\n3.  Promote your latest deployment to production. To do so, visit the project in your dashboard, and select the Deployments tab. From there, select the three dots to the right of the most recent deployment and select Promote to Production\n\nWeb Analytics may not function when using a proxy, such as Cloudflare.\n\nHow to fix:\n\n1.  Check your proxy configuration to make sure that all desired pages are correctly proxied to the deployment\n2.  Additionally, forward all requests to `/_vercel/insights/*` to the deployments to ensure proper functioning of Web Analytics through the proxy",
    "title": "Vercel Web Analytics Quickstart",
    "description": "Vercel Web Analytics provides you detailed insights into your website's visitors. This quickstart guide will help you get started with using Analytics on Vercel.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/privacy-policy",
    "markdown": "# Privacy and Compliance\n\nVercel takes a privacy-focused approach to our products and strive to enable our customers to use Vercel with confidence. The company aim to be as transparent as possible so our customers have the relevant information that they need about Vercel Web Analytics to meet their compliance obligations.\n\nVercel Web Analytics can be used globally, and Vercel have designed it to align with leading data protection authority guidance. When using Vercel Web Analytics, no personal identifiers that track and cross-check end users' data across different applications or websites, are collected. By default, Vercel Web Analytics allows you to use only aggregated data that can not identify or re-identify customers' end users. For more information, see [Configuring Vercel Web Analytics](#configuring-vercel-web-analytics)\n\nThe recording of data points (i.e. pageviews, custom events) is anonymous, so you have insight into your data without it being tied to or associated with any individual, customer, or IP address.\n\nVercel Web Analytics does not collect or store any information that would enable you to reconstruct an end user’s browsing session across different applications or websites and/or personally identify an end user. A minimal amount of data is collected and it is used for aggregated statistics only. For information on the type of data, [see the table below](#data-point-information).\n\nVercel Web Analytics allows you to track your website traffic and gather valuable insights without using any third-party cookies, instead end users are identified by a hash created from the incoming request.\n\nThe lifespan of a visitor session is not stored permanently, it is automatically discarded after 24 hours.\n\nAfter following the dashboard instructions to enable Vercel Web Analytics, see our [Quickstart](https://vercel.com/docs/analytics/quickstart) for a step-by-step tutorial on integrating the Vercel Web Analytics script into your application. After successfully completing the quickstart and deploying your application, the script will begin transmitting page view data to Vercel's servers.\n\nAll page views will automatically be tracked by Vercel Web Analytics, including both fresh page loads and client-side page transitions.\n\nThe following information may be stored with every data point:\n\n| Collected Value | Example Value |\n| --- | --- |\n| Event Timestamp | 2020-10-29 09:06:30 |\n| URL | `/blog/nextjs-10` |\n| Dynamic Path | `/blog/[slug]` |\n| Referrer | [https://news.ycombinator.com/](https://news.ycombinator.com/) |\n| Query Params (Filtered) | `?ref=hackernews` |\n| Geolocation | US, California, San Francisco |\n| Device OS & Version | Android 10 |\n| Browser & Version | Chrome 86 (Blink) |\n| Device Type | Mobile (or Desktop/Tablet) |\n| Web Analytics Script Version | 1.0.0 |\n\nSome URLs and query parameters can include sensitive data and personal information (i.e. user ID, token, order ID or any other information that can individually identify a person). You have the ability to configure Vercel Web Analytics in a manner that suits your security and privacy needs to ensure that no personal information is collected in your custom events or page views, if desired.\n\nFor example, automatic page view tracking may track personal information `https://acme.com/[name of individual]/invoice/[12345]`. You can modify the URL by passing in the `beforeSend` function. For more information see our documentation on [redacting sensitive data](https://vercel.com/docs/analytics/redacting-sensitive-data).\n\nFor [custom events](https://vercel.com/docs/analytics/custom-events), you may want to prevent sending sensitive or personal information, such as email addresses, to Vercel.",
    "title": "Privacy and Compliance",
    "description": "Learn how Vercel supports privacy and data compliance standards with Vercel Web Analytics.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/vercel-toolbar/managing-toolbar",
    "markdown": "# Managing the Vercel Toolbar\n\nTo disable the toolbar by default for all projects in your team:\n\n1.  Navigate to [your Vercel dashboard](https://vercel.com/dashboard) and make sure that you have selected your team from the [scope selector](https://vercel.com/docs/dashboard-features#scope-selector)\n2.  From your [dashboard](https://vercel.com/dashboard), select the Settings tab\n3.  In the General section, find Comments\n4.  Choose either On or Off from the dropdown\n5.  You can optionally choose to allow the setting to be overridden at the project level\n\n![The dashboard setting to enable or disable comments at the account level.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-setting-light.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The dashboard setting to enable or disable comments at the account level.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-setting-dark.png&w=3840&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe dashboard setting to enable or disable comments at the account level.\n\nTo disable the toolbar project-wide:\n\n1.  From your [dashboard](https://vercel.com/dashboard), select the project you want to enable or disable the Toolbar for\n2.  Navigate to Settings tab\n3.  In the General section, find Comments\n4.  Choose either Default (to respect team-level visibility settings) or Disabled (to disable the toolbar project-wide)\n\n![The dashboard setting to enable or disable comments in a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-project-setting-light.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![The dashboard setting to enable or disable comments in a project.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomments-project-setting-dark.png&w=1920&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nThe dashboard setting to enable or disable comments in a project.\n\nTo disable the toolbar, you can do the following:\n\n1.  Ensure you are signed in to the Vercel Toolbar\n2.  From the toolbar, select the menu item (☰)\n3.  From the list, select Disable for Session or Hide Toolbar.\n\nThis action will hide the toolbar in the current browser tab. To show the comments again, open a new browser session.\n\nYou can also show or hide the toolbar by using `⌘ + .` on MacOS (`Ctrl + .` on Windows).\n\nYou can use the `x-vercel-skip-toolbar` header to prevent interference with automated end-to-end tests:\n\n1.  Add the `x-vercel-skip-toolbar` header to the request sent to [the preview deployment URL](https://vercel.com/docs/deployments/preview-deployments#preview-urls)\n2.  Optionally, you can assign the value `1` to the header. However, presence of the header itself triggers Vercel to disable the toolbar\n\nYou can use Vercel's [preview environment variables](https://vercel.com/docs/projects/environment-variables#preview-environment-variables) to manage the toolbar for specific branches or environments\n\nTo enable comments for an individual branch, add the following to the environment variables for the desired preview branch:\n\n```\nVERCEL_PREVIEW_FEEDBACK_ENABLED=1\n```\n\nTo disable comment for an individual branch, set the above environment variable's value to `0`:\n\n```\nVERCEL_PREVIEW_FEEDBACK_ENABLED=0\n```\n\nTo use the toolbar with preview deployments that have [custom alias domains](https://vercel.com/docs/projects/domains/add-a-domain), you must opt into comments explicitly in your project settings on [the dashboard](https://vercel.com/dashboard).\n\nIf you have a [Content Security Policy (CSP)](https://developer.mozilla.org/docs/Web/HTTP/CSP) configured, you may need to adjust the CSP to enable access to the Vercel Toolbar or Comments.\n\nYou can make the following adjustments to the `Content-Security-Policy` [response header](https://vercel.com/docs/edge-network/headers#custom-response-headers):\n\n*   Add the following to `script-src` (Most commonly used):\n    \n    ```\n      script-src https://vercel.live\n    ```\n    \n*   Add the following to `connect-src`:\n    \n    ```\n      connect-src https://vercel.live wss://ws-us3.pusher.com\n    ```\n    \n*   Add the following to `img-src`:\n    \n    ```\n      img-src https://vercel.live https://vercel.com data: blob:\n    ```\n    \n*   Add the following to `frame-src`:\n    \n    ```\n      frame-src https://vercel.live\n    ```\n    \n*   Add the following to `style-src`:\n    \n    ```\n      style-src https://vercel.live 'unsafe-inline'\n    ```\n    \n*   Add the following to `font-src`:\n    \n    ```\n      font-src https://vercel.live https://assets.vercel.com\n    ```",
    "title": "Managing the Vercel Toolbar",
    "description": "Learn how to enable or disable the Vercel Toolbar for your team, project, and session.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/redacting-sensitive-data",
    "markdown": "# Redacting Sensitive Data from Web Analytics EventsHTML5\n\nSometimes, URLs and query parameters may contain sensitive data. This could be a user ID, a token, an order ID, or any other data that you don't want to be sent to Vercel. In this case, you may not want them to be tracked automatically. To prevent sensitive data from being sent to Vercel, you can pass in the `beforeSend` function that modifies the event before it is sent.\n\nReturning `null` will ignore the event, while returning the event or a modified version of it will track it normally.\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics\n          beforeSend={(event) => {\n            if (event.url.includes('/private')) {\n              return null;\n            }\n            return event;\n          }}\n        />\n      </body>\n    </html>\n  );\n}\n```\n\nTo apply changes to the event, you can parse the URL and adjust it to your needs before you return the modified event.\n\nIn this example the query parameter `secret` is removed on all events.\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics\n          beforeSend={(event) => {\n            const url = new URL(event.url);\n            url.searchParams.delete('secret');\n            return {\n              ...event,\n              url: url.toString(),\n            };\n          }}\n        />\n      </body>\n    </html>\n  );\n}\n```\n\nYou can also use `beforeSend` to allow users to opt-out of all tracking by setting a `localStorage` value (for example `va-disable`).\n\n```\n'use client';\nimport { Analytics } from '@vercel/analytics/react';\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Next.js</title>\n      </head>\n      <body>\n        {children}\n        <Analytics\n          beforeSend={(event) => {\n            if (localStorage.getItem('va-disable')) {\n              return null;\n            }\n            return event;\n          }}\n        />\n      </body>\n    </html>\n  );\n}\n```\n\nTo learn more about the `beforeSend` function and how it can be used with other frameworks, have a look at the [@vercel/analytics](https://vercel.com/docs/analytics/package) package documentation.",
    "title": "Redacting Sensitive Data from Web Analytics Events",
    "description": "Sometimes URLs and query parameters may contain sensitive data, such as User IDs. Learn how to redact sensitive data from your analytics events.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/analytics/custom-events",
    "markdown": "# Tracking custom eventsHTML5\n\nVercel Web Analytics allows you to track custom events in your application using the `track()` function. This is useful for tracking user interactions, such as button clicks, form submissions, or purchases.\n\nMake sure you have version 1.1.0 or later of `@vercel/analytics` installed.\n\nTo track an event:\n\n1.  Make sure you have `@vercel/analytics` version 1.1.0 or later [installed](https://vercel.com/docs/analytics/quickstart#add-@vercel/analytics-to-your-project)\n2.  Import `{ track }` from `@vercel/analytics`\n3.  In most cases you will want to track an event when a user performs an action, such as clicking a button or submitting a form, so you should use this on the button handler\n4.  Call `track` and pass in a string representing the event name as the first argument. You can also pass [custom data](#tracking-an-event-with-custom-data) as the second argument:\n\n```\nimport { track } from '@vercel/analytics';\n \n// Call this function when a user clicks a button or performs an action you want to track\ntrack('Signup');\n```\n\nThis will track an event named **Signup**.\n\nFor example, if you have a button that says Sign Up, you can track an event when the user clicks the button:\n\n```\nimport { track } from '@vercel/analytics';\n \nfunction SignupButton() {\n  return (\n    <button\n      onClick={() => {\n        track('Signup');\n        // ... other logic\n      }}\n    >\n      Sign Up\n    </button>\n  );\n}\n```\n\nYou can also pass custom data along with an event. To do so, pass an object with key-value pairs as the second argument to `track()`:\n\n```\ntrack('Signup', { location: 'footer' });\ntrack('Purchase', { productName: 'Shoes', price: 49.99 });\n```\n\nThis tracks a \"Signup\" event that occurred in the \"footer\" location. The second event tracks a \"Purchase\" event with product name and a price.\n\n*   The number of custom data properties you can pass is limited based on your [plan](https://vercel.com/docs/analytics/limits-and-pricing)\n*   Nested objects are not supported\n*   Allowed values are strings, numbers, booleans, and null\n*   Event name, key, and values must be no longer than 255 characters each\n\nIn scenarios such as when a user signs up or makes a purchase, it's more useful to track an event on the server-side. For this, you can use the `track` function on API routes or server actions.\n\nTo set up server-side events:\n\n1.  Make sure you have `@vercel/analytics` version 1.1.0 or later [installed](https://vercel.com/docs/analytics/quickstart#add-@vercel/analytics-to-your-project)\n2.  Import `{ track }` from `@vercel/analytics/server`\n3.  Use the `track` function in your API routes or server actions\n4.  Pass in a string representing the event name as the first argument to the `track` function. You can also pass [custom data](#tracking-an-event-with-custom-data) as the second argument\n\nFor example, if you want to track a purchase event:\n\n```\n'use server';\nimport { track } from '@vercel/analytics/server';\n \nexport async function purchase() {\n  await track('Item purchased', {\n    quantity: 1,\n  });\n}\n```",
    "title": "Tracking custom events",
    "description": "Learn how to send custom analytics events from your application.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost",
    "markdown": "# Add the Vercel Toolbar to local and production environments\n\n### Add the toolbar to your local environment\n\nLearn how to use the Vercel Toolbar in your local environment.",
    "title": "Add the Vercel Toolbar to local and production environments",
    "description": "Learn how to use the Vercel Toolbar in production and local environments.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/interaction-timing-tool",
    "markdown": "# Interaction Timing Tool\n\nThe interaction timing tool allows you to inspect in detail each interaction's latency and get notified for interactions taking >200ms.\n\nAs you navigate your site, the interaction timing tool allows you to inspect in detail each interaction's latency and get notified with toasts for interactions taking > 200ms. This can help you ensure your site's [Interaction to Next Paint (INP)](https://vercel.com/guides/first-input-delay-vs-interaction-to-next-paint#interaction-to-next-paint-(inp)) (a Core Web Vitals) has a good score.\n\nTo access the interaction timing tool:\n\n1.  Open the Command Menu\n2.  Select the Interaction Timing option. If any interaction has been detected on the page, a badge will display next to the option. The number inside the badge is the current INP\n3.  The Interaction Timing popover will open on the right side of the screen. As you navigate your site, each interaction will appear in this panel. Mouse over the interaction timeline to understand how the duration of input delay, processing (event handlers), and rendering are affecting the interaction's latency\n\nTo change preferences for the interaction timing tool:\n\n1.  Open the Command Menu\n2.  Select the Preferences option\n3.  Select your desired setting for Measure Interaction Timing\n    *   On will show the toasts for interactions taking >200ms\n    *   On (Silent) will not show toasts, but will still track interaction timing and display it in the interaction timing side panel when opened\n    *   Off will turn off tracking for interaction timing\n\nLast updated on\n\nJuly 12, 2024\n\n* * *",
    "title": "Interaction Timing Tool",
    "description": "The interaction timing tool allows you to inspect in detail each interaction's latency and get notified for interactions taking >200ms.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration",
    "markdown": "# Workflow\n\nThese tools help maintain consistent project standards and foster collaboration with both internal and external stakeholders.\n\nLeaving comments on deployments allows team members to discuss changes, provide feedback, and make suggestions directly on deployment previews, improving the communication process and reducing the risk of miscommunication.\n\nLearn how to enable seamless communication and collaboration within your team and with external collaborators.\n\nEdit Mode allows developers and non-technical team members to bridge the gap between content editing on websites and headless CMSs, reducing the need for back-and-forth communication and speeding up content updates.\n\nLearn to use Edit Mode for streamlined content editing.\n\nVercel's Draft Mode enables you to view your unpublished headless CMS content on your site before publishing it.\n\nView and override your application's feature flags from the Vercel Toolbar.\n\nCompatible with all providers, including LaunchDarkly, Optimizely, Statsig, Hypertune, Split, and custom flag setups\n\nLearn how to see and override feature flags in your applications.\n\nConformance enforces best practices and maintains consistency across projects, making it easier for developers to work together and ensures a high standard of code quality.\n\nLearn how to use Conformance to maintain consistency in your projects and adhere to best practices.\n\nCode Owners helps define responsibility for code and access control within Vercel projects, ensuring a smooth and organized development process, and promoting accountability among team members.\n\nLearn how to use Code Owners for improved code management.",
    "title": "Workflow",
    "description": "The following Vercel features allow your team to iterate quickly by streamlining content editing, simplifying feedback-loops, and promoting effective communication.\n",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/comments/using-comments",
    "markdown": "# Using Comments with Preview Deployments\n\nYou must be logged in to create a comment. You can press `c` to enable the comment placement cursor.\n\nAlternatively, select the speech bubble button in the comments toolbar. You can then select a location to place your comment with your cursor.\n\nYou can use `@` to mention team members and alert them to your comment. For example, you might want to request Jennifer's input by writing \"Hey @Jennifer, how do you feel about this?\"\n\n![A comment using the @ symbol to mention someone.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomment-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A comment using the @ symbol to mention someone.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Fcomment-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA comment using the @ symbol to mention someone.\n\nYou can add emojis by entering `:` (the colon symbol) into your comment input box, then entering the name of the emoji. For example, add a smile by entering `:smile:`. As you enter the name of the emoji you want, suggestions will be offered in a popup modal above the input box. You can select one of the suggestions with your cursor.\n\n![Emoji suggestions appear as you type.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Femojis-light.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![Emoji suggestions appear as you type.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Femojis-dark.png&w=640&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nEmoji suggestions appear as you type.\n\nTo add a reaction, select the emoji icon to the right of the name of the commenter whose comment you want to react to. You can then search for the emoji you want to react with.\n\n![A comment with reactions.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Freaction-screenshot-light.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)![A comment with reactions.](https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fpreview-deployments%2Fcomments%2Freaction-screenshot-dark.png&w=828&q=75&dpl=dpl_6RGLzPaeBNhuWHRxN1xTYtAhKUa3)\n\nA comment with reactions.\n\nCustom emoji from your Slack organization are supported when you integrate the\n\n[\n\nVercel Slack app\n\n](https://vercel.com/docs/workflow-collaboration/comments/integrations#use-the-vercel-slack-app)\n\n.\n\nYou can add screenshots to your comments with Vercel's Chrome extension. Access the Chrome extension in [the preferences menu](https://vercel.com/docs/workflow-collaboration/vercel-toolbar#setting-preferences).\n\nMarkdown is a markup language that allows you to format text, and you can use it to make your comments more readable and visually pleasing.\n\nSupported formatting includes:\n\n| Command | Keyboard Shortcut (Windows) | Keyboard Shortcut (Mac) | Example Input | Example Output |\n| --- | --- | --- | --- | --- |\n| Bold | `Ctrl+B` | `⌘+B` | `*Bold text*` | Bold text |\n| Italic | `Ctrl+I` | `⌘+I` | `_Italic text_` | _Italic text_ |\n| Strikethrough | `Ctrl+Shift+X` | `⌘+⇧+X` | `~Strikethrough text~` | ~Strikethrough text~ |\n| Code-formatted text | `Ctrl+E` | `⌘+E` | `` `Code-formatted text` `` | `Code-formatted text` |\n| Bulleted list | `-` or `*` | `-` or `*` | `- Item 1 - Item 2` | • Item 1 • Item 2 |\n| Numbered list | `1.` | `1.` | `1. Item 1 2. Item 2` | 1\\. Item 1 2. Item 2 |\n| Embedded links | N/A | N/A | `[A link](https://example.com)` | [A link](#supported-markdown-formatting-options) |\n| Quotes | `>` | `>` | `> Quote` | │ Quote |\n\nEvery new comment placed on a page begins a thread. The comment author, PR owner, and anyone participating in the conversation will see the thread listed in their Inbox.\n\nThe Inbox can be opened by selecting the button in the comments menu bar. A small red badge will indicate how many new notifications there are, if any have been added since you last checked. You can navigate between threads using the up and down arrows near the top of the inbox.\n\nTo check notifications within a preview deployment, select the Inbox button on the comments menu bar. You can move the Inbox to the left or right side of the screen by selecting the top of the Inbox modal and dragging it.\n\nYou can filter threads by selecting the branch name at the top of the Inbox. A modal will appear, with the following filter options:\n\n*   Filter by page: Show comments across all pages in the inbox, or only those that appear on the page you're currently viewing\n*   Filter by status: Show comments in the inbox regardless of status, or either show resolved or unresolved\n\nYou can copy a link to a comment in two ways:\n\n*   Select a comment in the Inbox. When you do, the URL will update with an anchor to the selected comment\n*   Select the ellipses (three dots) icon to the right of the commenter's name, then select the Copy Link option in the menu that pops up",
    "title": "Using Comments with Preview Deployments",
    "description": "This guide will help you get started with using Comments with your Vercel Preview Deployments.",
    "languageCode": "en"
  },
  {
    "url": "https://vercel.com/docs/workflow-collaboration/layout-shift-tool",
    "markdown": "# Layout Shift Tool\n\nThe layout shift tool gives you insight into any elements that may cause layout shifts on the page. The cause for a layout shift could be many things:\n\n*   Elements that change in height or width\n*   Custom font loading\n*   Media embeds (images, iframes, videos, etc.) that do not have set dimensions\n*   Dynamic content that's injected at runtime\n*   Animations that affect layout\n\nLayout shifts play a part in [Core Web Vitals](https://vercel.com/docs/speed-insights#core-web-vitals-explained) and contribute to [Speed Insights](https://vercel.com/docs/speed-insights#core-web-vitals-explained) scores. With the layout shift tool, you can see which elements are contributing to a layout shift and by how much.\n\nTo access the layout shift tool:\n\n1.  Open the Command Menu\n2.  Select the Layout Shifts option. If there are layout shifts detected on the page, a badge will display next to the option. The number inside the badge details the number of shifts detected\n3.  The Layout Shifts popover will open on the right side of the screen. Here you can filter, inspect, and replay any detected layout shifts\n\nEach shift details its impact, the responsible element, and a description of the shift if available. For example, \"became taller when its text changed and shifted another element\". Hovering over a layout shift will highlight the affected element. You can also replay layout shifts to get a better understanding of what's happening.\n\nYou can replay a layout shift by either:\n\n*   Double-clicking it\n*   Selecting it and using the Replay selected shift button\n\nYou can also select more than one shift and play them at the same time. You may want to do this to see the combined effect of element shifts on the page.\n\nWhen you replay layout shifts, the Vercel Toolbar will become your stop button. Press this to stop replaying layout shifts. Alternatively, press the  esc key.\n\nYou can also disable layout shift detection on a per element basis. You can do this by adding a `data-allow-shifts` attribute to an element. This will affect the element and its descendants.\n\nTo disable the layout shift tool completely:\n\n1.  Open the Command Menu\n2.  Select Preferences\n3.  Toggle the setting for Layout Shift Detection",
    "title": "Layout Shift Tool",
    "description": "The layout shift tool gives you insight into any elements that may cause layout shifts on the page.",
    "languageCode": "en"
  }
]