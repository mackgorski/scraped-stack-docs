[
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0",
    "markdown": "# Extend Login by Auth0 WordPress Plugin\n\nWordPress plugins can be extended to fit your specific requirements by using actions and filters to run custom code at specific points during runtime. This document outlines the existing hooks in the Login by Auth0 plugin. We're happy to review and approve new filters and actions that help you integrate even further in this plugin. To learn more, read the Contributing section in the [ReadMe in the plugin's GitHub repository](https://github.com/auth0/wp-auth0/blob/master/README.md).\n\n## WordPress Actions\n\nWordPress Actions run custom code at specific points during processing. To learn more about WordPress Actions, read [WordPress Plugin Handbook: Actions on wordpress.org](https://developer.wordpress.org/plugins/hooks/actions/). You can also [see examples in the GitHub repository](https://github.com/auth0/wp-auth0/tree/master/examples).\n\n### auth0\\_before\\_login\n\nThis action runs in `WP_Auth0_LoginManager` after a user has been authenticated successfully but before they have been logged into WordPress. It can be used to stop the login process if needed using `wp_die()` or throwing an exception. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_before_login.php).\n\n### auth0\\_user\\_login\n\nThis action runs in `WP_Auth0_LoginManager` after a user has been authenticated successfully and logged into WordPress. It can be used to set specific meta values, send notifications, or ping other services. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_user_login.php).\n\n### wpa0\\_user\\_created\n\nThis action runs in `WP_Auth0_Users` just after a WordPress user is successfully created. It can be used to change user values, set additional user metas, or trigger other new user actions. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wpa0_user_created.php).\n\n## Filters\n\nFilters in WordPress also run custom code at specific points during processing but always return a modified value of the same type that was passed in. To learn more about filters, read [WordPress Plugin Handbook: Filters on wordpress.org](https://developer.wordpress.org/plugins/hooks/filters/). You can also [see examples in the GitHub repository](https://github.com/auth0/wp-auth0/tree/master/examples).\n\n### auth0\\_create\\_user\\_data\n\nThis filter can be used to modify the user data array when creating a new user in WordPress from an incoming Auth0 user. It receives 2 parameters:\n\n*   `$user_data` is the user data parsed from the Auth0 profile.\n    \n*   `$userinfo` is the Auth0 user profile.\n    \n\nThis filter should always return an array of data that will be passed to the core `wp_insert_user()` function. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_create_user_data.php).\n\n### auth0\\_get\\_wp\\_user\n\nThis filter is called after the plugin finds the related user to login (based on the auth0 `user_id`) and is used to override the default behavior with custom matching rules (for example, always match by email). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_get_wp_user.php).\n\nIf the filter returns null, it will look up by email. To learn more, read [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress).\n\n### auth0\\_verify\\_email\\_page\n\nThis filter runs in `WP_Auth0_Email_Verification` to change the HTML rendered when a user who is logging in needs to verify their email before gaining access to the site. Note that this HTML is passed to `wp_die()` where it is modified before being displayed (see the `_default_wp_die_handler()` definition in core for more information). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_verify_email_page.php).\n\n### auth0\\_get\\_auto\\_login\\_connection\n\nThis filter is used in `WP_Auth0_LoginManager` to modify what connection is used for the auto-login process. The setting in wp-admin is pulled and then passed through this filter. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_get_auto_login_connection.php).\n\n### wp\\_auth0\\_get\\_option\n\nThis filter is used by option-getting functions and methods to modify the output value. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wp_auth0_get_option.php).\n\n### auth0\\_migration\\_ws\\_authenticated\n\nThis filter is used in `WP_Auth0_Routes` to alter the WP\\_User object that is JSON-encoded and returned to Auth0 during a user migration. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_migration_ws_authenticated.php).\n\n### wpa0\\_should\\_create\\_user\n\nThis filter is used in `WP_Auth0_Users` when deciding whether a user should be created. The initial value passed in is `TRUE`. If `FALSE` is returned for any reason, registration will be rejected and the registering user will see an error message (`WP_Auth0_UsersRepo::create()`). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wpa0_should_create_user.php).\n\n### auth0\\_login\\_css\n\nThis filter is used to modify the CSS on the login page, including the login widget itself. This filter runs before CSS is retrieved from the wp-admin settings page. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_login_css.php).\n\n### auth0\\_login\\_form\\_tpl\n\nFilters the template used for the Auth0 login form. This should return a path to a file containing HTML that replaces what is in `wp-content/plugins/auth0/templates/auth0-login-form.php`. The standard Lock initiation JS looks for an ID attribute of `auth0-login-form` to instantiate the login form so make sure that's present or replace the `wp-content/plugins/auth0/assets/js/lock-init.js` file with your own. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_login_form_tpl.php).\n\n### auth0\\_settings\\_fields\n\nThis filter is used to modify an existing form field or to add a new one. This should return a modified `$options` array with your changes or additions. New fields must have a field callback, as shown below. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_settings_fields.php).\n\n### auth0\\_auth\\_scope\n\nThis filter allows developers to add or change the scope requested during login. This can be used to add [custom claims](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims) or request a Refresh Token. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_auth_scope.php).\n\n### auth0\\_nonce\\_cookie\\_name\n\nUse this filter to modify the cookie name used for nonce validation. See the `auth0_state_cookie_name` filter below for an example. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_nonce_cookie_name.php).\n\n### auth0\\_state\\_cookie\\_name\n\nUse this filter to modify the cookie name used for the state parameter value. This can add a prefix or suffix or replace the string entirely. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_state_cookie_name.php). [](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_state_cookie_name.php)To learn more about the state parameter, read [Prevent Attacks and Redirect Users with OAuth 2.0 State Parameters](https://auth0.com/docs/secure/attack-protection/state-parameters). Make sure to use valid characters in any modifications made:\n\n`A <cookie-name> can be any US-ASCII characters except control characters (CTLs), spaces, or tabs. It also must not contain a separator character like the following: ( ) < > @ , ; : \\ \" / ? = { }.`\n\nTo learn more about the `Set-Cookie` HTTP response header, read [Set-Cookie in MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie).\n\n### auth0\\_settings\\_constant\\_prefix\n\nUse this filter to change the prefix for the constant used to override plugin settings. Please note that this filter **must** run before the Auth0 plugin is loaded so it needs to be located in an MU plugin. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_settings_constant_prefix.php). To learn more about MU plugins, read [Must Use Plugins on wordpress.org](https://wordpress.org/support/article/must-use-plugins/).\n\nThis filter allows developers to adjust the `/authorize` endpoint parameters as needed. The function must return a dictionary-type array of URL parameters. To learn more about how these parameters are used, read [Authentication API Explorer: Login](https://auth0.com/docs/api/authentication#login). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_url_params.php).\n\n### auth0\\_authorize\\_url\n\nThis filter allows developers to adjust the complete `/authorize` URL before use. The function must return a valid URL as a string. To learn more about how this URL is used, read [Authentication API Explorer: Login](https://auth0.com/docs/api/authentication#login). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_url.php).\n\n### auth0\\_die\\_on\\_login\\_output\n\nThis filter lets you modify or replace the HTML content passed to `wp_die()` when there is an error during login. This filter does not affect the verify email content (see auth0\\_verify\\_email\\_page). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_die_on_login_output.php).\n\n### auth0\\_coo\\_auth0js\\_url\n\nThis filter lets you override the default CDN URL for Auth0.js when loading the COO fallback page.\n\n### auth0\\_slo\\_return\\_to\n\nThis filter lets you override the default `returnTo` URL when logging out of Auth0. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_slo_return_to.php).\n\n### auth0\\_logout\\_url\n\nThis filter lets you override the Auth0 logout URL. To learn more about how this is used, read [Logout](https://auth0.com/docs/authenticate/login/logout). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_logout_url.php).\n\n### auth0\\_use\\_management\\_api\\_for\\_userinfo\n\nThis filter determines whether or not user profile data retrieved from the Management API should when you're not using the Implicit Login Flow. Return a boolean `true` (default) to use the API, `false` to use the ID token. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_use_management_api_for_userinfo.php).\n\n### auth0\\_lock\\_options\n\nThis filter can be used to modify the options for the embedded Lock login form used in shortcodes, widgets, and on the wp-login.php page when **Features > Universal Login Page** is turned off. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_lock_options.php).\n\n### auth0\\_jwt\\_leeway\n\nThis filter lets you adjust the leeway time used to validate ID tokens and should return a number of seconds as an integer. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_jwt_leeway.php).\n\n### auth0\\_jwt\\_max\\_age\n\nThis filter lets you adjust the `max_age` URL parameter sent on the authorize URL. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_jwt_max_age.php).\n\n### auth0\\_authorize\\_state\n\nThis filter lets you filter the state data before being encoded and used for login. This data will be verified after a successful login and provided as-is for use. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_state.php).\n\n## Use case\n\nYou can [see an example of using actions with filters in the GitHub repository](https://gist.github.com/evansims/c7116f83040af3e899213422489debc2).[](https://gist.github.com/evansims/c7116f83040af3e899213422489debc2)\n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Troubleshoot WordPress Plugin Invalid State Errors](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-wordpress-plugin-invalid-state-errors)",
    "title": "Extend Login by Auth0 WordPress Plugin",
    "description": "Learn how to extend the Login by Auth0 WordPress Plugin with hooks, filters, and functions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/libraries/lock/lock-ui-customization",
    "markdown": "# Lock UI Customization\n\nYou can customize the appearance of your Lock widget in a few different ways. The best and safest way to do so is with the provided JavaScript options.\n\n## JavaScript Options\n\nYou can set up a variety of customizations to your Lock via the `options` parameter when you instantiate your Lock. Some of them allow you to customize your UI. The UI customization options are a work in progress - we expect to be adding more as we go.\n\nFirst, you'll define the `options` object, containing whichever options you're wanting to customize. Then you'll need to include that options object as the third parameter when you instantiate Lock; more on that below.\n\n### Theming Options\n\nThere are a couple of theming options currently available, namespaced under the `theme` property.\n\n#### logo {String}\n\n![Lock UI customization - Logo](https://images.ctfassets.net/cdy7uua7fh8z/FdOAKKy71rTbFjIlZEL8D/2eef96008095d85388daaa461707901d/lock-theme-logo.png)\n\nThe value for `logo` is a URL for an image that will be placed in the Lock's header, and defaults to Auth0's logo. The minimum recommended resolution is 200 pixels (width) by 200 pixels (height).\n\n```\nvar options = {\n  theme: {\n    logo: 'https://example.com/logo.png'\n  }\n};\n```\n\n#### primaryColor {String}\n\n![Lock UI customization - primary color](https://images.ctfassets.net/cdy7uua7fh8z/1qQjeTmXJyIziv400VPaOn/48dd3cb8a72a6e88b2634b4b8a8bed63/lock-theme-primarycolor.png)\n\nThe `primaryColor` property defines the primary color of the Lock; all colors used in the widget will be calculated from it. This option is useful when providing a custom `logo`, to ensure all colors go well together with the `logo`'s color palette. Defaults to `#ea5323`.\n\n```\nvar options = {\n  theme: {\n    logo: 'https://example.com/logo.png',\n    primaryColor: '#31324F'\n  }\n};\n```\n\n#### authButtons {Object}\n\nAllows the customization of buttons in Lock. Each custom connection whose button you desire to customize should be listed by name, each with their own set of parameters. The customizable parameters are listed below:\n\n*   **displayName** {String}: The name to show instead of the connection name when building the button title, such as `LOGIN WITH MYCONNECTION` for login).\n    \n*   **primaryColor** {String}: The button's background color. Defaults to `#eb5424`.\n    \n*   **foregroundColor** {String}: The button's text color. Defaults to `#FFFFFF`.\n    \n*   **icon** {String}: The URL of the icon for this connection. For example: `http://site.com/logo.png`.\n    \n\n```\nvar options = {\n  theme: {\n    authButtons: {\n      \"testConnection\": {\n        displayName: \"Test Conn\",\n        primaryColor: \"#b7b7b7\",\n        foregroundColor: \"#000000\",\n        icon: \"http://example.com/icon.png\"\n      },\n      \"testConnection2\": {\n        primaryColor: \"#000000\",\n        foregroundColor: \"#ffffff\",\n      }\n    }\n  }\n};\n```\n\n### Customizing Text\n\nThe `languageDictionary` option allows customization of every piece of text displayed in the Lock. Defaults to {}. See below for an example.\n\n```\nvar options = {\n  languageDictionary: {\n    emailInputPlaceholder: \"something@youremail.com\",\n    title: \"Log me in\"\n  },\n};\n```\n\n![Customizing text in the Lock UI via languageDictionary option](https://images.ctfassets.net/cdy7uua7fh8z/iNvBLxxmea2tiWBhzwKX5/db0d7f86d0f7f95f70e5edcd34ab736f/lock-languagedictionary.png)\n\nFor a complete list of the items able to be customized using `languageDictionary`, see the [English Language Dictionary Specification](https://github.com/auth0/lock/blob/master/src/i18n/en.js) in the repository.\n\n### Instantiating Lock\n\nFinally, you'll want to go ahead and instantiate your Lock, with the `options` object that you've defined with your custom options in it.\n\n`var lock = new Auth0Lock('{yourClientId}', '{yourDomain}', options);`\n\n## Overriding CSS\n\nCustomizing your Lock by overriding its CSS isn't recommended. The issue is that with new releases of Lock, some styling may change, leading to unintended problems if you are overriding the CSS. Additionally, it's possible to simply overlook use of styles in other places and while the change may look fine in one view, it might not in another.\n\nIf you still intend to override CSS to further style your Lock, we recommend that you use a specific patch version of Lock rather than a major or minor version, so that you limit the amount of unexpected results that may occur when you alter the styles, and then another patch is deployed that might cause unexpected behavior in your UI due to the changes. This can be done by ensuring that you specify that patch version (`x.y.z`) when including Lock, or downloading it.\n\nAdditionally, we of course recommend that you test your CSS changes exhaustively, to ensure that the experience is the one you intend it to be for your customers.\n\n## Further Information\n\nIf you're looking for more detailed information while working to customize Lock for your application, check out the [configuration options](https://auth0.com/docs/libraries/lock/lock-configuration) page or the [Lock API](https://auth0.com/docs/libraries/lock/lock-api-reference) page!\n\nIf you have specific theming options that you would like to see added, let us know. We are working on improving the customization options that are available through JavaScript, and this list will be updated as new options are added.",
    "title": "Lock UI Customization",
    "description": "Customizing the appearance of your Lock widget can be important for branding and a cohesive UI, and this resource highlights the ways in which you can do so while implementing Lock in your project.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/resource-servers/patch-resource-servers-by-id",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-20173",
    "markdown": "# CVE-2019-20173: Security Update for WordPress Plugin for Auth0 wp-auth0\n\n**Published**: January 31, 2020\n\n**CVE number**: CVE-2019-20173\n\n**Credit**: Muhamad Visat\n\n## Overview\n\nThe WordPress Plugin for Auth0 versions 3.11.0, 3.11.1, and 3.11.2 do not properly sanitize the `wle` query parameter. This could allow an attacker to run a cross-site scripting (XSS) attack on the login page.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following apply:\n\n*   You are using the WordPress Plugin for Auth0 versions 3.11.0, 3.11.1, or 3.11.2\n    \n*   The “Original Login Form on wp-login.php” setting under Basic settings is set to either of the two options:\n    \n    *   “Via a link under the Auth0 form” (default option)\n        \n    *   “When \"wle\" query parameter is present”\n        \n\n## How to fix that?\n\nDevelopers using WordPress Plugin for Auth0 need to upgrade to version 3.11.3 or later.\n\n## Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2019-20173: Security Update for WordPress Plugin for Auth0 wp-auth0",
    "description": "CVE-2019-20173: Security Update for WordPress Plugin for Auth0",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-user-membership",
    "markdown": "# Retrieve User's Organization Memberships\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/organizations' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/organizations\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/organizations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/USER_ID/organizations\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/organizations',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/organizations\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/organizations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/USER_ID/organizations\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/organizations\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve User's Organization Memberships",
    "description": "Learn how to retrieve Organization memberships for a user using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow/event-object",
    "markdown": "# Actions Triggers: post-change-password - Event Object\n\nThe `event` object for the post-change-password Actions trigger provides contextual information about the newly created user.\n\n| Property | Description |\n| --- | --- |\n| `event.connection` | Details about the Connection that was used for the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The connection's unique identifier.<br>*   `metadata` _Optional dictionary_. Metadata associated with the connection.<br>*   `name` _String_. The name of the connection used to authenticate the user (such as `twitter` or `some-g-suite-domain`).<br>*   `strategy` _String_. The type of connection. For social connections, `event.connection.strategy === event.connection.name`. For enterprise connections, the strategy is `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `event.request` | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `geoip` _Object_.Contains geographical information about the request.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>    <br>*   `hostname` _Optional string_. The hostname that is being used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.tenant` | Details about the Tenant associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The name of the tenant. |\n| `event.user` | An object describing the user on whose behalf the current transaction was initiated.<br><br>Includes the following properties:<br><br>*   `email` _Optional string_. (unique) User's email address.<br>*   `email_verified` _Optional boolean_. Indicates whether the user has verified their email address.<br>*   `last_password_reset` _Optional string_. Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections.<br>*   `phone_number` _Optional string_. (unique) User's phone number.<br>*   `phone_verified` _Optional boolean_. Indicates whether the user has verified their phone number.<br>*   `user_id` _Optional string_. (unique) User's unique identifier.<br>*   `username` _Optional string_. (unique) User's username. |",
    "title": "Actions Triggers: post-change-password - Event Object",
    "description": "Learn about the post-change-password Action trigger's event object, which provides contextual information about the newly created user.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/search-organization-members",
    "markdown": "# Search Organization Members\n\nIn addition to [listing organization members](https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-members), you can use [User Search](https://auth0.com/docs/manage-users/user-search) to find users filtered by organization membership by using the `organization_id` parameter in a search.\n\nFor example, below is a filter for users that have an `acme.com` email domain but are not members of the Acme organization:\n\n`email.domain:\"acme.com\" AND NOT organization_id:\"ACME_ORG_ID\"`\n\nThe following finds all users that are in the Acme organization and log in with a specific database connection.\n\n`organization_id:\"ACME_ORG_ID\" AND identities.connection:\"my-db-connection-name\"`\n\nThe example below finds users whose email addresses start with jane and are members of the Acme organization.\n\n`organization_id:\"ACME_ORG_ID\" AND email:jane*`\n\nSee [User Search](https://auth0.com/docs/manage-users/user-search) for more details.",
    "title": "Search Organization Members",
    "description": "How to use User Search to find members of an Organization",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/universal-login-pages/customize-new-universal-login-with-the-no-code-editor",
    "markdown": "# Customize Universal Login Page Themes\n\nYou can create a consistently branded login experience for your users by styling your Universal Login prompts. With the Universal Login no-code editor, you can easily customize the colors, fonts, borders, and backgrounds of the prompts displayed to users throughout the login flow.\n\nThe no-code editor allows you to customize your Universal Login branding theme. To customize the text included in each prompt, review [Customize Universal Login Text Elements](https://auth0.com/docs/customize/login-pages/universal-login/customize-text-elements). For expanded customization capabilities, review [Customize Universal Login Page Templates](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates).\n\n## Universal Login no-code editor\n\nTo customize your Universal Login theme, follow the steps below:\n\n1.  On the Auth0 Dashboard, navigate to [Branding > Universal Login > Customization Options](https://manage.auth0.com/#/universal-login/customizations/colors).\n    \n2.  Select a [theme component](#theme-components) (e.g., Colors) from the Styles menu. Then, customize the options listed to the right.\n    \n3.  After customizing your theme, select **Save and Publish**.\n    \n\nAfter you save your theme, you can access a live preview of your login experience to review and test your screens. To launch the preview in a new tab, select **Try** above the no-code editor.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/01nmAYzRb5U8xOpUWEClH9/de60b97b42c6de04bea69914d36e6984/branding-customize-NUL-Nocode-fullscreen0.png)\n\n### Theme components\n\nTo create your desired Universal Login theme, the Styles menu contains the following components:\n\n## Management API\n\nYou can also customize your Universal Login theme with the [Management API](https://auth0.com/docs/api/management/v2). Specifically, you can use the Branding endpoints to:\n\n*   [Create a new branding theme](https://auth0.com/docs/api/management/v2/branding/post-branding-theme)\n    \n*   [Retrieve the default branding theme](https://auth0.com/docs/api/management/v2/branding/get-default-branding-theme)\n    \n*   [Retrieve a specific branding theme](https://auth0.com/docs/api/management/v2/branding/get-branding-theme)\n    \n*   [Delete a branding theme](https://auth0.com/docs/api/management/v2/branding/delete-branding-theme)\n    \n*   [Update the current theme](https://auth0.com/docs/api/management/v2/branding/patch-branding-theme)",
    "title": "Customize Universal Login Page Themes",
    "description": "Describes how to use the no-code editor to customize themes for Universal Login pages.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/logs/get-logs",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-members",
    "markdown": "# Retrieve Organization Members\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/members' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/members',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/ORG_ID/members\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Organization Members",
    "description": "Learn how to retrieve Organization members using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/add-member-roles",
    "markdown": "# Add Roles to Organization Members\n\n```\ncurl --request POST \\\n  --url https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"roles\": [ \"ROLE_ID\", \"ROLE_ID\", \"ROLE_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\"\n\n\tpayload := strings.NewReader(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {roles: ['ROLE_ID', 'ROLE_ID', 'ROLE_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"roles\": @[ @\"ROLE_ID\", @\"ROLE_ID\", @\"ROLE_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"your_auth0_domain\")\n\npayload = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/api/v2/organizations/ORG_ID/members/USER_ID/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"roles\": [\"ROLE_ID\", \"ROLE_ID\", \"ROLE_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Add Roles to Organization Members",
    "description": "Learn how to add roles to Organization members using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/password-reset/event-object",
    "markdown": "# Actions Triggers: post-challenge - Event Object\n\nThe `event` object for the `post-challenge` Actions trigger provides contextual information for a user resetting their password when logging in with Auth0.\n\n**Note:** The `event.user` object does not include any top-level attributes added by an external identity provider.\n\n| Property | Description |\n| --- | --- |\n| `event.authentication` | Details about authentication obtained during the password reset flow.<br><br>Includes the following properties:<br><br>*   `methods` _Array of objects_.<br>    <br>    Contains the authentication methods a user completed during their session.<br>    <br>    Returns one of the following objects:<br>    <br>    *   _Object_.<br>        <br>        Includes the following properties:<br>        <br>        *   `name` _String_.<br>            <br>            The name of the first factor completed during the session. Possible values include:<br>            <br>            *   `federated` A social or enterprise connection was used to authenticate the user as the first factor.<br>            *   `pwd` A database connection was used to authenticate the user as the first factor.<br>            *   `sms` A Passwordless SMS connection was used to authenticate the user as the first factor.<br>            *   `email` A Passwordless Email connection was used to authenticate the user as the first factor or verify email for password reset.<br>            *   `mock` Used for internal testing.<br>            *   `string` A custom authentication method denoted by a URL (as second or later factor).<br>        *   `timestamp` _String_.<br>    *   _Object_.<br>        <br>        Includes the following properties:<br>        <br>        *   `name` _The value `mfa`_. The user completed multi-factor authentication (second or later factors).<br>        *   `timestamp` _String_.<br>        *   `type` _Optional string_.<br>            <br>            The type of the second (or later) factor that was used for multi-factor authentication (MFA), if available. Possible values include:<br>            <br>            *   `email` MFA with email factor.<br>            *   `otp` MFA with OTP factor.<br>            *   `push-notification` MFA with push notification factor.<br>            *   `recovery-code` MFA with recovery code factor.<br>            *   `phone` MFA with SMS or voice factor.<br>            *   `webauthn-roaming` MFA with WebAuthn factor.<br>            *   `webauthn-platform` MFA with WebAuthn factor. |\n| `event.authorization` | An object containing information that describes the authorization granted to the user logging in.<br><br>Includes the following properties:<br><br>*   `roles` _Array of strings_. An array containing the names of the user's assigned roles. |\n| `event.client` | Information about the Client with which the password reset transaction was initiated.<br><br>Includes the following properties:<br><br>*   `client_id` _String_. The client id of the application the user is logging in to.<br>*   `metadata` _Dictionary_. An object for holding other application properties.<br>*   `name` _String_. The name of the application (as defined in the Dashboard). |\n| `event.connection` | Details about the connection used to authenticate the user.<br><br>Includes the following properties:<br><br>*   `id` _String_. The connection's unique identifier.<br>*   `metadata` _Optional dictionary_. Metadata associated with the connection.<br>*   `name` _String_. The name of the connection used to authenticate the user (such as `twitter` or `example-g-suite-domain`).<br>*   `strategy` _String_. The type of connection.<br>    <br>    *   For social connections, `event.connection.strategy === event.connection.name`.<br>    *   For enterprise connections, the strategy is `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `event.organization`<br><br>_(Optional)_ | Details about the Organization associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `display_name` _String_. The friendly name of the Organization.<br>*   `id` _String_. The Organization identifier.<br>*   `metadata` _Dictionary_. Metadata associated with the Organization.<br>*   `name` _String_. The name of the Organization. |\n| `event.request` | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `body` _Dictionary_. The body of the POST request. This data is only available during refresh token and Client Credential Exchange flows.<br>*   `geoip` _Object_.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>*   `hostname` _Optional string_. The hostname used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request.<br>*   `query` _Dictionary_. The query string parameters sent to the authorization request.<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.stats` | Login statistics for the current user.<br><br>Includes the following properties:<br><br>*   `logins_count` _Number_. The number of times the user has logged in. |\n| `event.tenant` | Details about the tenant associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The name of the tenant. |\n| `event.transaction` | Details about the current transaction.<br><br>Includes the following properties:<br><br>*   `locale` _String_. The locale to use for this transaction as determined by comparing the browser's requested languages to the tenant's language settings.<br>*   `login_hint` _Optional string_. Hint to the Authorization Server about the login identifier the end-user might use when logging in, if necessary.<br>*   `state` _Optional string_. An opaque, arbitrary alphanumeric string your app adds to the initial request that Auth0 includes when redirecting back to your application.<br>*   `ui_locales` _Array of strings_. The ui\\_locales provided in the original authentication request. |\n| `event.user` | An object describing the user associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `app_metadata` _Dictionary_. Custom fields that store info about a user that influences the user's access, such as support plan, security roles, or access control groups.<br>*   `created_at` _String_. Timestamp indicating when the user profile was first created.<br>*   `email` _Optional string_. (unique) User's email address.<br>*   `email_verified` _Boolean_. Indicates whether the user has verified their email address.<br>*   `enrolledFactors` _Optional array of objects_.<br>    <br>    An array of authentication factors that the user has enrolled. An empty array indicates the user has not enrolled any factors. If `enrolledFactors` is undefined, the system could not fetch the information, and the user may or may not have enrolled any factors.<br>    <br>    Includes the following properties:<br>    <br>    *   `options` _Optional object_.<br>        <br>        Additional options describing this instance of the enrolled factor.<br>        <br>    *   `type` _String_. The type of authentication factor such as `push-notification`, `phone`, `email`, `otp`, `webauthn-roaming` and `webauthn-platform`.<br>*   `family_name` _Optional string_. User's family name.<br>*   `given_name` _Optional string_. User's given name.<br>*   `identities` _Array of objects_.<br>    <br>    Contains info retrieved from the identity provider originially used to authenticate the user. If a user has linked their profile to multiple identity providers, this array also contains those identities. The contents of an identity provider object vary by provider.<br>    <br>    Includes the following properties:<br>    <br>    *   `connection` _Optional string_. Name of the Auth0 connection used to authenticate the user.<br>    *   `isSocial` _Optional boolean_. Indicates whether a social connection was used.<br>    *   `profileData` _Optional dictionary_. User information associated with the connection. If user profiles have been linked, `profileData` contains associated user data for secondary accounts.<br>    *   `provider` _Optional string_. Name of the entity authenticating the user, such as Facebook, Google, SAML, or your own provider.<br>    *   `user_id` _Optional string_. User's unique identifier for this connection or provider.<br>*   `last_password_reset` _Optional string_. Timestamp indicating the last time the user's password was updated. This field does not exist at user creation. This property is only available for Database connections.<br>*   `name` _Optional string_. User's full name.<br>*   `nickname` _Optional string_. User's nickname.<br>*   `phone_number` _Optional string_. User's phone number. Only valid for users with SMS connections.<br>*   `phone_verified` _Optional boolean_. Indicates whether the user has verified their phone number. Only valid for users with SMS connections.<br>*   `picture` _Optional string_. URL pointing to the [user's profile picture](https://auth0.com/docs/users/change-user-picture).<br>*   `updated_at` _String_. Timestamp indicating when the user's profile was last updated.<br>*   `user_id` _String_. (unique) User's unique identifier.<br>*   `user_metadata` _Dictionary_. Custom fields that store user information that does not impact their level of access, such as work address, home address, or user preferences.<br>*   `username` _Optional string_. (unique) User's username. |",
    "title": "Actions Triggers: post-challenge - Event Object",
    "description": "Learn about the password reset post-challenge Action trigger's event object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/email/smtp-email-providers/configure-365-exchange-as-smtp-email-provider",
    "markdown": "# Configure Microsoft 365 Exchange Online as External SMTP Email Provider\n\n#### Before you start\n\n*   You must have a [Microsoft 365](https://www.microsoft.com/en-us/microsoft-365) account with an active subscription.\n    \n*   Ensure your Microsoft 365 subscription is licensed to send emails through Exchange Online.\n    \n    *   You need at a minimum a paid subscription to Microsoft Business Basic plan to use the Microsoft Graph API for Exchange Online.\n        \n*   Emails will be sent from Auth0 to your SMTP provider. Your ports should be open and allow inbound connections from specific Auth0 IP addresses. To learn more, read [Auth0 IP Addresses for Allow Lists](https://auth0.com/docs/secure/security-guidance/data-security/allowlist).\n    \n    *   Update the list of IPs in [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n        \n\nAuth0 allows you to configure your own SMTP email provider so you can manage, monitor, and troubleshoot your email communications.\n\n## Configure Microsoft 365\n\n1.  Log in to [Microsoft Azure](https://azure.microsoft.com/) account with your Microsoft 365 account.\n    \n2.  Register a [Azure Active Directory Application](https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application) resource if you currently do not have one.\n    \n3.  Navigate to your Active Directory Application resource. Select **Services > App registrations**, and then select the application you will be using to send emails.\n    \n4.  Configure the required application permissions by navigating to **Manage > API permissions**.\n    \n5.  Add the `Mail.Send` [permission](https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application#api-permissions) by selecting **Add a permission > Microsoft Graph > Application permissions** selector.\n    \n6.  Retrieve required provider configurations:\n    \n    1.  Navigate to the **Application Overview** to retrieve your application [Client ID and Tenant ID](https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application#application-id-client-id).\n        \n    2.  Navigate to **Manage > Certificates & secrets** and collect the **Value** to create an application [secret](https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application#certificates--secrets).\n        \n    3.  Retrieve the organization **User Email** that will send the emails through the application by **Search > Users**. Select **Services > Users**, select your authorized user, and then collect their **User Email** from their properties.\n        \n7.  Navigate to Auth0 [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n8.  Activate the **Use my own email provider** toggle.\n    \n9.  Click the **Microsoft 365** logo.\n    \n10.  Provide the **From** email address. Then, enter the **Tenant ID**, **Client ID**, and **Client Secret** from step 6, and then click **Save**.\n    \n    ![](https://images.ctfassets.net/cdy7uua7fh8z/1oXnSH0aPoGN5uDP6WDJNp/0d3b14e8530630215761c9b57bdc28b8/2024-02-29_13-53-34.png)\n\n## Send a test email\n\nSend a test email using the **Send Test Email** button. If you have configured everything correctly, you will receive a confirmation email.\n\nIf you do not receive an email after a few minutes, please check your [Auth0 logs](https://manage.auth0.com/#/logs) for error codes. The Microsoft Exchange [Email Usage](https://admin.microsoft.com/#/reportsUsage/EmailActivity) page will now display delivery insights for all emails that have been sent to your users.",
    "title": "Configure Microsoft 365 Exchange Online as External SMTP Email Provider",
    "description": "Describes how to configure 365 Exchange Online as an SMTP email provider with Auth0. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/login-pages/universal-login/customize-text-elements",
    "markdown": "# Customize Universal Login Text Elements\n\n## Screen: reset-password-request\n\n![reset-password-request reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-request.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Reset your password ${clientName} | `pageTitle` |\n| Forgot Your Password? | `title` |\n| Back to ${clientName} | `backToLoginLinkText` |\n| Continue | `buttonText` |\n| Enter your email address and we will send you instructions to reset your password. | `descriptionEmail` |\n| Enter your username and we will send you instructions to reset your password. | `descriptionUsername` |\n| Email address | `placeholderEmail` |\n| Username | `placeholderUsername` |\n| ${companyName} | `logoAltText` |\n| Email is not valid. | `invalid-email-format` |\n| This ticket was expired. | `auth0-users-expired-ticket` |\n| Something went wrong, please try again later. | `custom-script-error-code` |\n| This ticket was already used. | `auth0-users-used-ticket` |\n| Something went wrong, please try again later | `auth0-users-validation` |\n| We had a problem sending the email, please try again later. | `reset-password-error` |\n| You have exceeded the amount of emails. Wait a few minutes and try again. | `too-many-email` |\n| You have exceeded the amount of emails. Wait a few minutes and try again. | `too-many-requests` |\n| Please enter an email address | `no-email` |\n| Username is required | `no-username` |\n\n## Screen: reset-password-email\n\n![reset-password-email reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-email.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Check your email ${clientName} | `pageTitle` |\n| Check Your Email | `title` |\n| Please check the email address ${email} for instructions to reset your password. | `emailDescription` |\n| Resend email | `resendLinkText` |\n| Please check the email address associated with the username ${email} for instructions to reset your password. | `usernameDescription` |\n\n## Screen: reset-password\n\n![reset-password reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Reset your password ${clientName} | `pageTitle` |\n| Change Your Password | `title` |\n| Enter a new password below to change your password. | `description` |\n| Reset password | `buttonText` |\n| New password | `passwordPlaceholder` |\n| Re-enter new password | `reEnterpasswordPlaceholder` |\n| Your password must contain: | `passwordSecurityText` |\n| ${companyName} | `logoAltText` |\n| Show password | `showPasswordText` |\n| Hide password | `hidePasswordText` |\n| This ticket was expired. | `auth0-users-expired-ticket` |\n| Something went wrong, please try again later. | `custom-script-error-code` |\n| This ticket was already used. | `auth0-users-used-ticket` |\n| Something went wrong, please try again later | `auth0-users-validation` |\n| New password confirmation is missing | `no-re-enter-password` |\n| Password contains user information | `password-contains-user-information` |\n\n## Screen: reset-password-success\n\n![reset-password-success reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-success.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Password reset successful ${clientName} | `pageTitle` |\n| Password Changed! | `eventTitle` |\n| Your password has been changed successfully. | `description` |\n| Back to ${clientName} | `buttonText` |\n\n## Screen: reset-password-error\n\n![reset-password-error reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-error.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Password reset error ${clientName} | `pageTitle` |\n| Back to ${clientName} | `backToLoginLinkText` |\n| To reset your password, return to the login page and select \"Forgot Your Password\" to send a new email. | `descriptionExpired` |\n| To reset your password, return to the login page and select \"Forgot Your Password\" to send a new email. | `descriptionGeneric` |\n| This link has already been used. To reset your password, return to the login page and select \"Forgot Your Password\" to send a new email. | `descriptionUsed` |\n| Link Expired | `eventTitleExpired` |\n| Invalid Link | `eventTitleGeneric` |\n| Invalid Link | `eventTitleUsed` |\n| This ticket was expired. | `auth0-users-expired-ticket` |\n| Something went wrong, please try again later. | `custom-script-error-code` |\n| This ticket was already used. | `auth0-users-used-ticket` |\n| Something went wrong, please try again later | `auth0-users-validation` |\n| We had a problem sending the email, please try again later. | `reset-password-error` |\n\n## Screen: reset-password-mfa-email-challenge\n\n![reset-password-mfa-email-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-email-challenge.png)\n\n| **Text** | **Key** |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Go Back | `backText` |\n| Continue | `buttonText` |\n| We've sent an email with your code to | `description` |\n| Try another method | `pickAuthenticatorText` |\n| Enter the code | `placeholder` |\n| Remember this device for 30 days | `rememberMeText` |\n| Resend | `resendActionText` |\n| Didn't receive an email? | `resendText` |\n| Verify Your Identity | `title` |\n| ${companyName} | `logoAltText` |\n| OTP Code must have 6 numeric characters | `invalid-otp-code-format` |\n| The code you entered is invalid | `invalid-code` |\n| We couldn't verify the code. Please try again later. | `authenticator-error` |\n| Notification was not sent. Try resending the code. | `no-transaction-in-progress` |\n| You have exceeded the amount of emails. Wait a few minutes and try again. | `too-many-email` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n| We couldn't send the email. Please try again later. | `mfa-email-challenge-authenticator-error` |\n\n## Screen: reset-password-mfa-otp-challenge\n\n![reset-password-mfa-otp-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-otp-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| Check your preferred one-time password application for a code. | `description` |\n| Continue | `buttonText` |\n| Try another method | `pickAuthenticatorText` |\n| Enter your one-time code | `placeholder` |\n| Remember this device for 30 days | `rememberMeText` |\n| ${companyName} | `logoAltText` |\n| Use password | `usePasswordText` |\n| We couldn't verify the code. Please try again later. | `authenticator-error` |\n| Too many failed codes. Wait for some minutes before retrying. | `too-many-failures` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n\n## Screen: reset-password-mfa-phone-challenge\n\n![reset-password-mfa-phone-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-phone-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| We will send a 6-digit code to the following phone number: | `description` |\n| Continue | `continueButtonText` |\n| Choose another phone number. | `changePhoneText` |\n| Text message | `smsButtonText` |\n| Voice call | `voiceButtonText` |\n| How do you want to receive the code? | `chooseMessageTypeText` |\n| Try another method | `pickAuthenticatorText` |\n| Enter your phone number | `placeholder` |\n| ${companyName} | `logoAltText` |\n| There was a problem sending the SMS | `send-sms-failed` |\n| There was a problem making the voice call | `send-voice-failed` |\n| Phone number can only include digits. | `invalid-phone-format` |\n| It seems that your phone number is not valid. Please check and retry. | `invalid-phone` |\n| You have exceeded the maximum number of phone messages per hour. Wait a few minutes and try again. | `too-many-sms` |\n| You have exceeded the maximum number of phone messages per hour. Wait a few minutes and try again. | `too-many-voice` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n| Please enter a phone number | `no-phone` |\n\n## Screen: reset-password-mfa-push-challenge-push\n\n![reset-password-mfa-push-challenge-push reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-push-challenge-push.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| We’ve sent a notification to the following device via the ${appName} app: | `description` |\n| I've responded on my device | `buttonText` |\n| Try another method | `pickAuthenticatorText` |\n| Remember this device for 30 days | `rememberMeText` |\n| Resend | `resendActionText` |\n| Didn't receive a notification? | `resendText` |\n| Manually Enter Code | `enterOtpCode` |\n| OR  | `separatorText` |\n| ${companyName} | `logoAltText` |\n| You must accept the notification via the ${appName} app on your mobile device. | `challenge-transaction-pending` |\n| We have not received a confirmation, please slow down. | `polling-interval-exceeded` |\n| We have received too many notification requests. Wait a few minutes and try again. | `too-many-push` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n| We have not received a confirmation, please try scanning the code again. | `mfa-push-verify-transaction-pending` |\n| We couldn't verify the enrollment. Please try again later. | `mfa-push-verify-authenticator-error` |\n| We couldn't send the notification. Please try again later. | `mfa-push-challenge-authenticator-error` |\n| Notification rejected | `transaction-rejected` |\n\n## Screen: reset-password-mfa-recovery-code-challenge\n\n![reset-password-mfa-recovery-code-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-recovery-code-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| Enter the recovery code you were provided during your initial enrollment. | `description` |\n| Continue | `buttonText` |\n| Try another method | `pickAuthenticatorText` |\n| Enter your recovery code | `placeholder` |\n| ${companyName} | `logoAltText` |\n| The code you entered is invalid | `invalid-code` |\n| Recovery code must have 24 alphanumeric characters | `invalid-code-format` |\n| We couldn't verify the code. Please try again later. | `authenticator-error` |\n| Please confirm you have recorded the code | `no-confirmation` |\n| Too many failed codes. Wait for some minutes before retrying. | `too-many-failures` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n\n## Screen: reset-password-mfa-sms-challenge\n\n![reset-password-mfa-sms-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-sms-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| We've sent a text message to: | `description` |\n| Continue | `buttonText` |\n| Edit | `editText` |\n| Edit phone number | `editLinkScreenReadableText` |\n| Try another method | `pickAuthenticatorText` |\n| Enter the 6-digit code | `placeholder` |\n| Remember this device for 30 days | `rememberMeText` |\n| Resend | `resendActionText` |\n| Didn't receive a code? | `resendText` |\n| or  | `resendVoiceActionSeparatorTextBefore` |\n| get a call | `resendVoiceActionText` |\n| ${companyName}\" | `logoAltText` |\n| OTP Code must have 6 numeric characters | `invalid-otp-code-format` |\n| The code you entered is invalid | `invalid-code` |\n| There was a problem sending the SMS | `send-sms-failed` |\n| We couldn't verify the code. Please try again later. | `authenticator-error` |\n| We couldn't send the SMS. Please try again later. | `sms-authenticator-error` |\n| Notification was not sent. Try resending the code. | `no-transaction-in-progress` |\n| Too many failed codes. Wait for some minutes before retrying. | `too-many-failures` |\n| You have exceeded the maximum number of phone messages per hour. Wait a few minutes and try again. | `too-many-sms` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n\n## Screen: reset-password-mfa-voice-challenge\n\n![reset-password-mfa-voice-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-voice-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Enter your one-time password to change your password for ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| We've sent a 6-digit code via voice phone call to the following phone number: | `description` |\n| Continue | `buttonText` |\n| Edit | `editText` |\n| Edit phone number | `editLinkScreenReadableText` |\n| Choose another phone number. | `changePhoneText` |\n| Try another method | `pickAuthenticatorText` |\n| Enter the 6-digit code | `placeholder` |\n| Remember this device for 30 days | `rememberMeText` |\n| Call again | `resendActionText` |\n| Didn't receive a call? | `resendText` |\n| or  | `resendSmsActionSeparatorTextBefore` |\n| send a text | `resendSmsActionText` |\n| ${companyName} | `logoAltText` |\n| OTP Code must have 6 numeric characters | `invalid-otp-code-format` |\n| The code you entered is invalid | `invalid-code` |\n| There was a problem making the voice call | `send-voice-failed` |\n| We couldn't verify the code. Please try again later. | `authenticator-error` |\n| We couldn't make the voice call. Please try again later. | `voice-authenticator-error` |\n| Notification was not sent. Try resending the code. | `no-transaction-in-progress` |\n| Too many failed codes. Wait for some minutes before retrying. | `too-many-failures` |\n| You have exceeded the maximum number of phone messages per hour. Wait a few minutes and try again. | `too-many-voice` |\n| Your enrollment transaction expired, you will need to start again. | `transaction-not-found` |\n\n## Screen: reset-password-mfa-webauthn-platform-challenge\n\n![reset-password-mfa-webauthn-platform-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-webauthn-platform-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Use fingerprint or face recognition to reset password ${clientName} | `title` |\n| Press the button below and follow your browser's steps to log in. | `description` |\n| Awaiting device confirmation | `awaitingConfirmation` |\n| Too many failed authentication attempts. Please try again later. | `too-many-webauthn-challenge-attempts-error` |\n| ${companyName} | `logoAltText` |\n| Continue | `continueButtonText` |\n| Try another method | `pickAuthenticatorText` |\n| Use password | `usePasswordText` |\n| Remember this device for 30 days | `rememberMeText` |\n| We could not start the device verification. Please try again later. | `webauthn-platform-challenge-error` |\n\n## Screen: reset-password-mfa-webauthn-roaming-challenge\n\n![reset-password-mfa-webauthn-roaming-challenge reference screenshot](https://auth0.com/docs/media/articles/universal-login/text-customization/reset-password-mfa-webauthn-roaming-challenge.png)\n\n| Text | Key |\n| --- | --- |\n| Use your security key to reset password ${clientName} | `pageTitle` |\n| Verify Your Identity | `title` |\n| Make sure your Security Key is nearby. Once you continue, you will be prompted to use it. | `description` |\n| Awaiting Security Key | `awaitingConfirmation` |\n| Too many failed authentication attempts. Please try again later. | `too-many-webauthn-challenge-attempts-error` |\n| ${companyName} | `logoAltText` |\n| Use security key | `continueButtonText` |\n| Try another method | `pickAuthenticatorText` |\n| Remember this device for 30 days | `rememberMeText` |\n| We could not start the security key verification. Please try again later. | `webauthn-challenge-error` |",
    "title": "Customize Universal Login Text Elements",
    "description": "Learn how to customize Universal Login text elements using the Auth0 Dashboard or Management API",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/login-pages/universal-login/customize-templates",
    "markdown": "# Customize Universal Login Page Templates\n\nYou can customize Universal Login pages by providing a page template created with the [Liquid template language](https://shopify.github.io/liquid/basics/introduction/). With page templates, you can define the content displayed around Universal Login prompts, such as the login box or an MFA challenge. As the same page template is used for all login flow pages, this method of customization allows you to easily implement a consistent, branded experience for users.\n\nTo use customized page templates, you must configure a [Custom Domain](https://auth0.com/docs/customize/custom-domains) for your tenant. Further, you can only update Universal Login page templates with the [Management API](https://auth0.com/docs/api/management/v2).\n\n## Page template requirements\n\nWhen creating a Universal Login page template, you must include the following tags:\n\n| **Tag** | **Description** |\n| --- | --- |\n| `auth0:widget` | Contains HTML for the prompt displayed on every page of the login flow, such as the Login page or Reset Password page |\n| `auth0:head` | Contains the tags required for rendering the prompt |\n\nTo center the prompt on the page, add `class=\"_widget-auto-layout\"` to the `<body>` element. You can omit this attribute to manually position the prompt as needed.\n\n##### Example template:\n\nThe following example demonstrates the simplest Universal Login page template you can create with the required tags:\n\n```\n<!DOCTYPE html><html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body></html>\n```\n\n## Page template variables\n\nPage templates support a variety of context variables that impact how a page is rendered.\n\nFor example, you can use these variables to:\n\n*   Render different content depending on the application associated with the login flow. For example, you may manage two brands that require different page designs. \n    \n*   Render different content depending on the specific prompt. For example, you may want to add information about what your application offers on the Login page but prefer the MFA flow to only display the MFA challenge prompt. \n    \n*   Add a footer with user support information, such as links to your support page or contact information.\n    \n\n### Available variables\n\nPage templates support the following variables:\n\n#### Application\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `application.id` | Your application client ID | XXXXXXXXXXXXXXXXXXXXXXXXX |\n| `application.name` | The name of your application | My Application |\n| `application.logo_url` | URL of the application logo | https://example.com/mylogo.png |\n| `application.metadata` | Your application metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n\n#### Branding\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `branding.logo_url` | URL of your application logo | https://example.com/mylogo.png |\n| `branding.colors.primary` | Your primary branding color | #000000 |\n| `branding.colors.page_background` | Background color for Universal Login pages | #FFFFFF |\n\n#### Tenant\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `tenant.friendly_name` | Your tenant's display name | My Tenant |\n| `tenant.support_email` | Support email address for your tenant | support@example.com |\n| `tenant.support_url` | Support page URL for your tenant | https://example.com/support |\n\n#### Organizations\n\nThe following variables refer to the [Auth0 Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) feature.\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `organization.id` | ID of Organization | org\\_XXXXXXXXXXXXXXX |\n| `organization.display_name` | Display name of Organization | My Organization |\n| `organization.name` | Internal name of Organization | my-organization |\n| `organization.metadata` | Organization metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `organization.branding.logo_url` | URL of Organization logo | https://example.com/orglogo.png |\n| `organization.branding.colors.primary` | Primary branding color for Organization | #000000 |\n| `organization.branding.colors.page_background` | Background color for Organization's login pages | #FFFFFF |\n\n#### Current user information\n\nYou can only use the following variables for pages that render after authentication.\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `user.user_id` | ID of the user profile | auth0\\|XXXXXXXXXXXXXXXXXXXX |\n| `user.picture` | URL of the user's profile picture | https://example.com/userimage |\n| `user.email` | Email address of user | user@example.com |\n| `user.email_verified` | Boolean of email verification status (true/false) | true |\n| `user.app_metadata` | `app_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.user_metadata` | `user_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.family_name` | Family (last) name of user | Smith |\n| `user.given_name` | Given (first) name of user | Abigail |\n| `user.name` | Full name of user | Abigail Smith |\n| `user.nickname` | Nickname (alias) of user | Abby |\n| `user.username` | Internal name of user | asmith |\n\n#### Current screen information\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `locale` | Locale used to render the page; matches one of the [supported tenant languages](https://auth0.com/docs/customize/internationalization-and-localization/universal-login-internationalization) | en-US |\n| `prompt.name` | Name of the currently rendered [Universal Login prompt](#prompts) | mfa |\n| `prompt.screen.name` | Name of the currently rendered Universal Login screen | mfa-login-options |\n| `prompt.screen.texts` | All localized texts from the current screen | `{`  <br>`\"pageTitle\": \"Available methods\"`  <br>`}` |\n\n### Prompts\n\nThe term `prompt` refers to a specific step of the login flow. A specific prompt may consist of one or more screens. You can manage prompts through the [Auth0 Dashboard](https://manage.auth0.com/#/custom_text) or the Prompts endpoints of the [Management API](https://auth0.com/docs/api/management/v2).\n\nThe sections below provide details for each available prompt.\n\n### Custom query parameters\n\nYou can also use query parameters within the context by passing them to the `/authorize` endpoint when initiating the authentication request. These custom query parameters must have the `ext-` prefix.\n\nThe following example uses the `ext-ga` and `ext-test` query parameters to the login page template:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body>\n  <pre style='background: wheat'>\n    <b>Value of the ext-ga parameter:</b>{{ transaction.params.ext-ga }}\n    <b>Value of the ext-test parameter:</b>{{ transaction.params.ext-test }}\n  </pre>\n</html>\n```\n\n### Custom signup prompts\n\nIf you use custom signup prompts, you must enable custom page templates. The following is the minimum template that allows custom signup prompts to render:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body._widget-auto-layout {\n        --page-background-image: url('https://REPLACE/WITH/YOUR/BACKGROUND/IMAGE.png');\n        background-color: var(--page-background-color);\n        background-image: var(--page-background-image);\n        background-position: center;\n        background-size: cover;\n        background-repeat: no-repeat;\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n  </body>\n</html>\n```\n\nTo learn more, review [Customize Signup and Login Prompts](https://auth0.com/docs/customize/login-pages/universal-login/customize-signup-and-login-prompts).\n\n## Examples\n\n### Login box + image layout\n\nThe following template will show the login box to the left, and an image to the right only for the login/signup pages. The rest of the pages will look like the default ones.\n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: url(\"https://images.unsplash.com/photo-1592450865877-e3a318ec3522?ixlib=rb-1.2.1&auto=format&fit=crop&w=2255&q=80\");\n        background-size: cover;\n        background-position: center;\n        background-repeat: no-repeat;\n      }\n      .prompt-wrapper {\n        position: relative;\n        display: flex;\n        align-items: center;\n        width: 480px;\n        height: 100%;\n        justify-content: center;\n        background-color: rgb(60,60,60);\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {% if prompt.name == \"login\" or prompt.name == \"signup\" %} \n        <div class=\"prompt-wrapper\">\n        {%- auth0:widget -%}\n        </div>\n    {% else %}\n        {%- auth0:widget -%}\n    {% endif %}\n  </body>\n</html>\n```\n\n![Universal Login box with email username/password and image layout example](https://images.ctfassets.net/cdy7uua7fh8z/7F2LIZ4qVdGqMUNnj66wcP/611287c9bb937c4040728fb442c7978f/page-templates-layout.png)\n\nThe example below adds a gray footer with links to Privacy Policy and Terms of Services:\n\n```\n<!DOCTYPE html><html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: radial-gradient(white, rgb(200, 200, 200));\n      }\n      .footer {\n        background-color: rgb(120, 120, 120);\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        padding: 16px 0; \n        width: 100%;\n        color: white;\n        /* Use a high z-index for future-proofing */\n        z-index: 10;\n      }\n      .footer ul {\n        text-align: center;\n      }\n      .footer ul li {\n        display: inline-block;\n        margin: 0 4px;\n      }\n      .footer ul li:not(:first-of-type) {\n        margin-left: 0;\n      }\n      .footer ul li:not(:first-of-type)::before {\n        content: '';\n        display: inline-block;\n        vertical-align: middle;\n        width: 4px;\n        height: 4px;\n        margin-right: 4px;\n        background-color: white;\n        border-radius: 50%;\n      }\n      .footer a {\n        color: white;\n      }\n    </style>\n     <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n    <footer class=\"footer\">\n      <ul>\n        <li><a href=\"https://company.com/privacy\">Privacy Policy</a></li>\n        <li><a href=\"https://company.com/terms\">Terms of Service</a></li>\n      </ul>\n    </footer>\n  </body></html>\n```\n\n![Universal Login box with email address/password and footers layout example](https://images.ctfassets.net/cdy7uua7fh8z/17BeLStId6jsxSfEnVFPMa/4ee123ee4c241ae1a26632218b1ec874/page-templates-footer.png)\n\n## Page templates API\n\nTo set the page template, you need to use the Management API. You first need to get a Management API token with the `update:branding`, `read:branding`, `delete:branding` scopes. If you are using the `API Explorer Application` to generate tokens, make sure those scopes are enabled for the `Auth0 Management API`.\n\nTo set the template, you need to use the following endpoint:\n\n*   [cURL](#c1e6c79f170f491b92832a5f02d50ec5_shell)\n*   [C#](#c1e6c79f170f491b92832a5f02d50ec5_csharp)\n*   [Go](#c1e6c79f170f491b92832a5f02d50ec5_go)\n*   [Java](#c1e6c79f170f491b92832a5f02d50ec5_java)\n*   [Node.JS](#c1e6c79f170f491b92832a5f02d50ec5_node)\n*   [Obj-C](#c1e6c79f170f491b92832a5f02d50ec5_objc)\n*   [...](#)\n\n```\ncurl --request PUT \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: text/html' \\\n  --data '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"text/html\");\nrequest.AddParameter(\"text/html\", \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\tpayload := strings.NewReader(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"text/html\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.put(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"text/html\")\n  .body(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PUT',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN', 'content-type': 'text/html'},\n  data: '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"text/html\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: text/html\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"text/html\"\n    }\n\nconn.request(\"PUT\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'text/html'\nrequest.body = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"text/html\"\n]\n\nlet postData = NSData(data: \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo retrieve the template, you need to use the following endpoint:\n\n*   [cURL](#7431dd457f314f4890834b565cbc6172_shell)\n*   [C#](#7431dd457f314f4890834b565cbc6172_csharp)\n*   [Go](#7431dd457f314f4890834b565cbc6172_go)\n*   [Java](#7431dd457f314f4890834b565cbc6172_java)\n*   [Node.JS](#7431dd457f314f4890834b565cbc6172_node)\n*   [Obj-C](#7431dd457f314f4890834b565cbc6172_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo delete the template, you need to use the following endpoint:\n\n*   [cURL](#0dbed89f99b14cd7b6984e5880c7d653_shell)\n*   [C#](#0dbed89f99b14cd7b6984e5880c7d653_csharp)\n*   [Go](#0dbed89f99b14cd7b6984e5880c7d653_go)\n*   [Java](#0dbed89f99b14cd7b6984e5880c7d653_java)\n*   [Node.JS](#0dbed89f99b14cd7b6984e5880c7d653_node)\n*   [Obj-C](#0dbed89f99b14cd7b6984e5880c7d653_objc)\n*   [...](#)\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe maximum size for the Page Template is 100KB. If that is not big enough, consider moving images/css files outside of the Page Template code.\n\n## CSS customization\n\nThere are a few things that you can customize using CSS:\n\n*   You can hide the tenant logo by adding `class=\"_hide-prompt-logo\"` in the `<body>` element.\n    \n*   You can specify a custom logo by adding `class=\"_use-custom-prompt-logo\"` in the `<body>` element. This would let you, for example, change the login page logo depending on the application:\n    \n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n\n  <head>\n    <title>Welcome to {{ application.name }} </title>\n    {%- auth0:head -%}\n    <style>\n      {% if application.name == \"Auth0 Community\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/manhattan/versions/1.3312.0/assets/badge.png');\n      }\n      {% elsif application.name == \"Auth0 Dashboard\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/blog/auth0rta/theme/logos/auth0-logo-black.png');\n      }\n      {% endif %}\n  </style>\n\n  </head>\n\n  <body class=\"_widget-auto-layout _use-custom-prompt-logo\">\n    {%- auth0:widget -%}\n  </body>\n\n</html>\n```\n\nThe current implementation does not support further CSS customization. If you look at the HTML that is generated, you will see code like:\n\n```\n.c10d15918.c7b3b8672 {\n  background: #D00E17;\n}\n```\n\n## Using the Auth0 CLI\n\nYou can use the [Auth0 CLI](https://github.com/auth0/auth0-cli) to easily update Page Templates.\n\nIn the Auth0 CLI, run:\n\n`auth0 universal-login templates update`\n\nThe Auth0 CLI will open two windows:\n\n*   A browser window with a [Storybook](https://storybook.js.org/) that shows the login page with the page template applied:\n    \n\n![Page Templates Storybook](https://images.ctfassets.net/cdy7uua7fh8z/1Ms4jj0pdMowoSZi54i72S/a2adcffa34a491ed7a587094884ad0f1/storybook.png)\n\n*   The default editor, with the page template code:\n    \n\n![undefined](https://images.ctfassets.net/cdy7uua7fh8z/3fTqpTmRRgVeLu5p8cioWa/e5a5c8a12dc93f5de95f12581ce0e5ff/vs-code.png)\n\nYou can now change the page template code, and you will be able to preview the changes in your browser window.\n\nOnce you close the window, you’ll be asked if you want to save the template. If you answer **Yes**, the template will be uploaded to your tenant.\n\n## Troubleshooting\n\nIf the template is not being applied, verify that you're navigating to `{customDomain}/authorize`. If you're navigating to `{yourDomain}/authorize`, Auth0 will not render the page template.",
    "title": "Customize Universal Login Page Templates",
    "description": "Learn how to create login page templates for the Universal Login experience.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers/configure-twilio-as-a-phone-messaging-provider",
    "markdown": "# Configure Twilio as a Phone Messaging Provider\n\n## Prerequisites\n\nYou must have a [Twilio](https://twilio.com/) account with a valid SMS and/or phone delivery option.\n\n## Configure Twilio\n\n1.  Log in to your [Twilio](https://www.twilio.com/login) account.\n    \n2.  Go to your [Twilio Console](https://console.twilio.com/). You will need your Twilio SID and Twilio Auth Token when configuring Twilio in your Auth0 Dashboard.  \n    \n3.  Go to Auth0 [Dashboard > Branding > Phone Provider](https://manage.auth0.com/#/branding/phone/provider). Select **Twilio** as your **Phone Provider**.\n    \n4.  Select a **Delivery Method**. You can choose **Text**, **Voice**, or both as delivery methods for your customers.\n    \n5.  For the **Twilio Provider Settings**, select an **SMS Source**: \n    \n    1.  If you select **Use From**, enter a default phone number from which customers will receive phone messages.\n        \n    2.  If you select [Messaging Service](https://www.twilio.com/docs/messaging/services), enter your Twilio Messaging Service SID. You can find this value in your Twilio Console.\n        \n    3.  Enter your Twilio SID and Twilio Auth Token from the Twilio Console. Click **Save**.\n        \n\n## Test phone\n\nClick the **Try** button to send a test phone message. If you have successfully configured Twilio as an external phone provider, Auth0 will send a confirmation phone message using the selected delivery method. If you do not receive a phone message after a few minutes, check your [Auth0 logs](https://manage.auth0.com/#/logs) for failures.\n\nThe Twilio [Messaging Activity](https://console.twilio.com/us1/develop/sms/overview) page displays delivery insights for all SMS that have been sent to your users.",
    "title": "Configure Twilio as a Phone Messaging Provider",
    "description": "Learn how to configure Twilio as a Phone Messaging Provider in the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/2019-09-05-scopes",
    "markdown": "# Auth0 Security Bulletin for Assigning Scopes Based on Email Address\n\n## Overview\n\nIf you:\n\n*   Use rules to assign scopes to users based on their email addresses **and**\n    \n*   Your application uses multiple connections\n    \n\nThere is a possibility that your scopes could be compromised.\n\n## How This Works\n\nAuth0 requires that email addresses are unique on a per-connection basis. However, there are no limitations on a per-application basis.\n\nTherefore, it is possible for user A to sign up for the application using one connection and user B to sign up for the application with the same email address using a different connection.\n\nIf your rules assign scopes to users based on email address, the second user has now been given the same scopes as the first user, despite being a different individual.\n\n## How do I fix this?\n\nThe most straightforward mitigation is to require users to verify their email address after signing up and before being allowed to log in.",
    "title": "Auth0 Security Bulletin for Assigning Scopes Based on Email Address",
    "description": "Cases where improper custom rule code may create vulnerabilities in the authentication flow.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/password-reset/api-object",
    "markdown": "# Actions Triggers: post-challenge - API Object\n\nThe API object for the `post-challenge` Actions trigger includes:\n\n## `api.access`\n\nModify the user's login access, such as by rejecting the login attempt.\n\n### `api.access.deny(reason)`\n\nMark the current login attempt as denied. This prevents the end-user from completing the login flow. This does **not** cancel other user-related side effects requested by this Action, such as metadata changes. The login flow immediately stops following the completion of this action and no further Actions will be executed.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `reason` | _String_. A human-readable explanation for rejecting the login. This may be presented directly in end-user interfaces. |\n\n## `api.authentication`\n\nRequest changes to the authentication state of the current user's session.\n\n### `api.authentication.challengeWith(factor, [options])`\n\nRequest a challenge for multifactor authentication using the supplied factor and optional additional factors.\n\nWhen a multifactor challenge is requested, subsequent Actions will not run until that challenge is fulfilled by the user. A user can satisfy this challenge by:\n\n*   Having already completed a challenge for a matching factor in this transaction.\n*   Successfully completing the challenge for the default factor.\n*   Successfully completing the challenge for any of the optional factors described in `additionalFactors`.\n\n**Note:** If the user has not already satisfied the requirements of the challenge, they are presented with a factor challenge screen. If `additionalFactors` are supplied, the user can choose to authenticate with a different factor than the default challenge.\n\n| Parameter | Description |\n| --- | --- |\n| `factor` | _FactorSelector_. An object describing the type of factor (and its options) that should be used for the initial challenge. |\n| `options` | Optional Object. Additional options that can also specify `additionalFactors` as a property. |\n\n### `api.authentication.challengeWithAny([factors])`\n\nRequest a challenge for multifactor authentication using any of the supplied factors or optional additional factors.\n\nWhen a multifactor challenge is requested, subsequent Actions will not run until that challenge is fulfilled by the user. A user can satisfy this challenge by:\n\n*   Having already completed a challenge for a matching factor in this transaction.\n*   Successfully completing the challenge for the default factor.\n\n**Note:** If the user has not already satisfied the requirements of the challenge, they are presented with a factor challenge screen. If there is a specific preferred factor, the `api.authentication.challengeWith()` method is preferred.\n\n| Parameter | Description |\n| --- | --- |\n| `factor` | _FactorSelector\\[\\]_. An array of factors. |\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`.\n\nFor errors, the returned object includes a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects containing the following properties:\n\n*   `value` The cached value\n*   `expires_at` The maximum expiry of the record in milliseconds since the Unix epoch\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way can have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes is used. Lifetimes cannot exceed the maximum duration listed in the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the Unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>**Note:** This value should not be supplied if `ttl` value is provided. If values are supplied for both options, the earlier expiry of the two is used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>**Note:** This value should not be supplied if a `expires_at` value is provided. If values are supplied for both options, the earlier expiry of the two is used. |\n\n## `api.redirect`\n\n### `api.redirect.encodeToken(options)`\n\nCreate a session token that is suitable for use as a query string parameter redirect target (via `sendUserTo`) and contains data whose authenticity must be provable by the target endpoint. The target endpoint can verify the authenticity and integrity of the data by checking the JWT's signature using a shared secret.\n\nReturns a JWT string.\n\n| Parameter | Description |\n| --- | --- |\n| `options` | _Options_. Configure how sensitive data is encoded into the query parameters of the resulting url. |\n| `options.expiresInSeconds` | _Number_. Number of seconds before the token expires. Default is 900. |\n| `options.payload` | _Options_. The data intended to be passed to the target of the redirect and whose authenticity and integrity must be provable. |\n| `options.secret` | _String_. A secret that will be used to sign a JWT shared with the redirect target. This value should be stored as a secret and retrieved using `event.secrets['SECRET_NAME']`. |\n\n### `api.redirect.sendUserTo(url, options)`\n\nTrigger a browser redirect to the target \\`url\\` immediately after the action completes.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `url` | _String_. The target URL of the redirect. |\n| `options` | _Options_. An object representing any additional query string parameters appended to the redirect URL. |\n| `options.query` | _Options_. Additional query string parameters to append to the redirect URL. |\n\n### `api.redirect.validateToken(options)`\n\nRetrieve the data encoded in a JWT token passed to the `/continue` endpoint while simultaneously verifying the authenticity and integrity of that data.\n\nReturns payload of the JWT token.\n\n| Parameter | Description |\n| --- | --- |\n| `options` | _Options_. Options for retrieving the data encoded in a JWT token passed to the `/continue` endpoint following a redirect. |\n| `options.secret` | _String_. Secret used to encode the token. |\n| `options.tokenParameterName` | _String_. The name of the query or body parameter that was sent to the `/continue` endpoint. Defaults to `session_token`. |",
    "title": "Actions Triggers: post-challenge - API Object",
    "description": "Learn about the password reset post-challenge Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/anatomy",
    "markdown": "# Custom Database Connection Anatomy Best Practices\n\nYou typically use a custom database connection to provide access to your own legacy identity store for authentication (sometimes referred to as **legacy authentication**) or [perform user import through automatic migration](https://auth0.com/docs/manage-users/user-migration/configure-automatic-migration-from-your-database) (often referred to as **trickle** or **lazy** migration). You can also use custom database connections to proxy access to an Auth0 tenant in scenarios where you use Auth0 multi-tenant architecture. To learn more, read [Multi-Tenant Applications Best Practices](https://auth0.com/docs/get-started/auth0-overview/create-tenants/multi-tenant-apps-best-practices).\n\nYou typically create and configure custom database connections using the Auth0 Dashboard. You create a database connection and then toggle **Use my own database** to enable editing of the database action scripts. A custom database connection can also be created and configured with the Auth0 Management API [Create a connection endpoint](https://auth0.com/docs/api/management/v2#!/Connections/post_connections) and the `auth0` strategy.\n\n![Auth0 Dashboard Authentication Database Connection Custom Database Settings Use Own Database Enabled](https://images.ctfassets.net/cdy7uua7fh8z/11HPAdVwJMmnWbzMVjHCJ8/c6583a1d8e3c02771fb81f2515f6e813/dashboard-connections-database-edit_view-custom-database_use-my-own-database.png)\n\nAs shown below, you use custom database connections as part of a login workflow to obtain user identity information from your own legacy identity store for authentication or user import.\n\n![Custom Database Connection Flow](https://images.ctfassets.net/cdy7uua7fh8z/1H2Ky1WyPlZ9zHZrEVlFhP/4e4856395fac6d6339c883c35d4b4ac0/custom-database-connections.png)\n\nIn addition to artifacts common for all database connection types, a custom database connection allows you to configure action scripts—custom code used when interfacing with legacy identity stores. The scripts you choose to configure depend on whether you are creating a connection for legacy authentication or for automatic migration.\n\nAction scripts can be implemented as anonymous functions; however, anonymous functions make it hard to debug when it comes to interpreting the call-stack generated as a result of any exceptional error conditions. For convenience, we recommend providing a function name for each action script. To see some recommended names, read [Custom Database Action Script Execution Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/execution).\n\nIn a legacy authentication scenario, no new user record is created; the user remains in the legacy identity store and Auth0 uses the identity it contains when authenticating the user. Custom database connections are also used outside of the Universal Login workflow. For example, a connection's `changePassword` action script is called when a password change operation occurs for a user that resides in a legacy identity store.\n\n## Automatic migration\n\nDuring automatic migration, Auth0 creates a new user in an identity store (database) managed by Auth0. Auth0 uses the identity in the Auth0-managed identity store when authenticating the user. For this to occur, Auth0 first requires the user to be authenticated against the legacy identity store, and only if this succeeds will the new user be created in the Auth0 managed database. Auth0 creates the new user using the same ID and password that was supplied during authentication.\n\nUser creation in an automatic migration scenario typically occurs after the Login action script completes. We recommend that you do not attempt to delete users from a legacy identity store as an inline operation within the Login script, but instead as an independent process. This prevents accidental user deletion should an error condition occur during migration.\n\nWith automatic migration, users remain in the legacy identity store and can be deleted or archived if required. A side-effect can occur where a user is deleted from Auth0 but remains in the legacy data store. In this case, a login made by the deleted user could result in either the Login or Get User script executing and the user again migrating from the legacy identity store.\n\nWe recommend marking legacy store user identities as migrated before either Login or Get User scripts complete and prior to any eventual legacy store deletion to prevent the unintentional recreation of intentionally-deleted users.\n\n## Size\n\nWe recommend that the total size of any action script not exceed 100 KB. The larger the size, the more latency is introduced due to the packaging and transport process employed by the Auth0 platform, and this will have an impact on the performance of your system. Note that the 100 KB limit does not include any `npm` modules that may be referenced as part of any `require` statements.\n\n## Learn more\n\n*   [Custom Database Connection Security Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/connection-security)\n*   [Custom Database Action Script Execution Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/execution)\n*   [Custom Database Action Script Environment Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/environment)",
    "title": "Custom Database Connection Anatomy Best Practices",
    "description": "Learn about best practices for custom database connection anatomy.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow/api-object",
    "markdown": "# Actions Triggers: post-change-password - API Object\n\nThe API object for the `post-change-password` Actions trigger includes:\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`. For errors, the returned object will have a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects with a `value` property holding the cached value as well as an `expires_at` property indicating the maximum expiry of the record in milliseconds since the Unix epoch.\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way will have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes will be used. Lifetimes may not exceed the maximum duration listed at [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `ttl`. If both options are supplied, the earlier expiry of the two will be used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `expires_at`. If both options are supplied, the earlier expiry of the two will be used. |",
    "title": "Actions Triggers: post-change-password - API Object",
    "description": "Learn about the post-change-password Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/environment",
    "markdown": "# Custom Database Action Script Environment Best Practices\n\nAction scripts execute as a series of called JavaScript functions in an instance of a serverless Webtask container. As part of this, a specific environment is provided, together with a number of artifacts supplied by both the Webtask container and the Auth0 authentication server (your Auth0 tenant) itself.\n\n## npm modules\n\nAuth0 serverless Webtask containers can make use of a wide range of [`npm`](https://www.npmjs.com/) modules; `npm` modules not only reduce the overall size of action script code implementation, but also provide access to a wide range of pre-built functionality.\n\nBy default, a large list of publicly-available `npm` modules are supported out-of-the-box. This list has been compiled and vetted for any potential security concerns. To see which `npm` modules are supported, read [Can I require: Auth0 Extensibility](https://auth0-extensions.github.io/canirequire/).\n\nIf you require an `npm` module that is not supported out-of-the-box, then you can [make a request via the Auth0 support portal](https://support.auth0.com/) or through your Auth0 representative. Auth0 will evaluate your request to determine suitability. There is currently no support in Auth0 for the user of `npm` modules from private repositories.\n\n## Variables\n\nAuth0 action scripts support the notion of environment variables, accessed via what is defined as the globally-available `configuration` object. The `configuration` object should be treated as read-only and should be used for storing sensitive information, such as credentials or API keys for accessing external identity stores. This mitigates having security-sensitive values hardcoded in an action script.\n\nThe `configuration` object can also be used to support whatever Software Development Life Cycle (SDLC) best practice strategies you employ, such as [setting up multiple environments](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments), by allowing you to define variables that have tenant-specific values. This mitigates hardcoded values in an action script, which may change depending upon which tenant is executing it.\n\n## global object\n\nAuth0 serverless Webtask containers are provisioned from a pool that is associated with each Auth0 tenant. Each container instance makes available a global object, which can be accessed across all action scripts that execute within it (the container instance). The global object acts as a global variable that is unique to the container and that can be used to define information—or even functions—that can be used across all action scripts that run in it (the container instance).\n\nThis means that the global object can be used to cache expensive resources, as long as those resources are not user-specific. For example, an Access Token for a third-party (e.g., logging) API that provides non user-specific functionality could be stored. Or it could be used to store an Access Token to your own non user-specific API defined in Auth0 and obtained via use of the Client Credentials flow.\n\nEach time a Webtask container is recycled, or for each instantiation of a new Webtask container, the global object it defines is reset. Thus, any declaration of assignment within the global object associated with a container should also include provision for initialization. To provide performance flexibility, serverless Webtask containers are provisioned in Auth0 on an ad-hoc basis and are also subject to various recycle policies. In general, we recommend that you do not consider the life of a global object to be anything more than 20 minutes.\n\n## Custom database connection environment checklist\n\n*   Make sure that your database has the appropriate fields to store user profiles attributes, such as **id**, **nickname**, **email**, and **password**. To learn more about Auth0's user profile schema and expected fields, read [Normalized User Profiles](https://auth0.com/docs/manage-users/user-accounts/user-profiles/normalized-user-profiles). To learn how to update user profiles, read [Update User Profiles Using Your Database](https://auth0.com/docs/manage-users/user-accounts/user-profiles/update-user-profiles-using-your-database).\n    \n*   You can use return errors resulting from your custom database connection for troubleshooting purposes.\n    \n*   The `id` (or alternatively `user_id`) property in the returned user profile will be used by Auth0 to identify the user. If you are using multiple custom database connections, then the **id** value **must be unique across all the custom database connections** to avoid **user ID** collisions. Our recommendation is to prefix the value of **id** with the connection name (omitting any whitespace). To learn more about user IDs, read [Identify Users](https://auth0.com/docs/manage-users/user-accounts/identify-users).\n    \n*   Latency will be greater compared to Auth0-hosted user stores.\n    \n*   The database or service must be reachable from the Auth0 servers. You will need to configure inbound connections if your store is behind a firewall.\n    \n\n## Learn more\n\n*   [Custom Database Action Script Execution Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/execution)\n*   [Error Handling Best Practices](https://auth0.com/docs/troubleshoot/error-handling-best-practices)\n*   [Debugging Best Practices](https://auth0.com/docs/troubleshoot/debugging-best-practices)\n*   [Deployment Best Practices](https://auth0.com/docs/deploy-monitor/deployment-best-practices)\n*   [Custom Database Connection Security Best Practices](https://auth0.com/docs/authenticate/database-connections/custom-db/custom-database-connections-scripts/connection-security)",
    "title": "Custom Database Action Script Environment Best Practices",
    "description": "Learn about best practices for the custom database action script environment.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-member-roles",
    "markdown": "# Retrieve Member Roles for an Organization\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Member Roles for an Organization",
    "description": "Learn how to retrieve member roles for an Organization using the Auth0 Dashboard and Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/branding/post-branding-theme",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/customize/login-pages/universal-login/customize-signup-and-login-prompts",
    "markdown": "# Customize Signup and Login Prompts\n\n**Customize Signup and Login Prompts** is a feature that allows customers with Custom Domain and Custom Page Template enabled to add custom fields and content to their app’s signup and login prompts.\n\n#### Use Cases \n\nCustomize Signup and Login Prompts supports two use cases: **custom content** and **data capture.** \n\n**Custom content** is static content like text, links, or images placed directly on the signup and login prompts.\n\n**Data capture** uses form elements dynamically added to the signup and login prompts, which is useful for collecting and validating user consent or user-produced data like surname. Data capture is only available for Database Connections without Passkey authentication users.\n\n#### Terminology\n\nA **Prompt** is a specific step in a given authentication flow. Each Prompt has at least one **Screen** and, depending on tenant configuration, each supported Screen has either four or six **Entry Points,** which are locations in the Screen where custom code (**Partials**) can be inserted.\n\nThe following Prompts can be customized:\n\n*   `signup`\n    \n*   `signup-id`\n    \n*   `signup-password`\n    \n*   `login`\n    \n*   `login-id`\n    \n*   `login-password`\n    \n\nPartials support HTML, CSS, Javascript, and [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) to power conditional logic and dynamic variables. In addition, any Liquid variable that is available to the [Page Template](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates) is also available.\n\nThese entry points available when a database connection is enabled:\n\n*   `form-content-start`\n    \n*   `form-content-end`\n    \n*   `form-footer-start`\n    \n*   `form-footer-end`\n    \n\nThe following Entry Points are available when at least one social or enterprise connection is enabled:\n\n*   `secondary-actions-start`\n    \n*   `secondary-actions-end`\n    \n\n#### Use the Management API to Manage Partials\n\nPartials can be a maximum of 10,000 characters and are be managed by the [Auth0 Management API](https://auth0.com/docs/api/management/v2/prompts/put-partials) at `/v2/prompts/{prompts_name}/partials`. Every Prompt must specify the `Screen` when adding, updating, or deleting a Partial. Below is an example call to view all existing Partials for a prompt, noting that `ulp-container` prefix is not required when referencing Entry Points in API calls.\n\nCustom Prompts does not currently support [Auth0's Deploy CLI tool](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) or Auth0 CLI.\n\n```\nGET /api/v2/prompts/signup-id/partials\n# response\n# success code: 200\n# not found code: 404\nbody: {\n  \"signup-id\": {\n    \"form-content-start\": \"<div>HTML or Liquid</div>...\",\n    \"form-content-end\": \"<div>HTML or Liquid</div>...\"\n  }\n}\n```\n\n#### Style and Validate Form Inputs\n\nCustomize Signup and Login Prompts offers pre-built styles and support for client-side validations for certain HTML form elements. The following elements are supported:\n\n*   `<input type=\"text\">`\n    \n*   `<input type=\"number\">`\n    \n*   `<input type=\"checkbox\">` \n    \n*   `<input type=\"password\">`\n    \n*   `<input type=\"email\">`\n    \n*   `<input type=\"tel\">`\n    \n*   `<input type=\"url\">`\n    \n*   `<select>`\n    \n*   `<textarea>`\n    \n\nTo use pre-built input styles, wrap your form element of choice in a `<div>` with the `ulp-field` class. Similarly, add the `ulp-error` class to the same `<div>` to use pre-built error styles. If the `ulp-error-info` element is present, a styled error message will also be displayed.\n\n#### Client-Side Validation\n\nThe feature's client-side validation framework allows customers to validate user input using HTML attributes to execute one or more custom validation functions. Validation functions can be included directly in the Partial or included in the `<head>` of the page template.\n\nTo add client-side validation to a form element:\n\n*   Reference the validation function using the `data-ulp-validation-function` attribute on the `<div class=\"ulp-error-info\">` element.\n    \n*   Declare which DOM events the validation function should be run on using the `data-ulp-validation-event-listeners` attribute on the `<div class=\"ulp-error-info\">` element, noting that validations run automatically on submission.\n    \n\n#### Localize Content\n\nPartial content can be localized by defining new custom text variables using the [Custom Text API](https://auth0.com/docs/api/management/v2/prompts/put-custom-text-by-language). Up to thirty custom text variables can be defined per screen/language combination.\n\n##### Create or Update a Custom Text Variable\n\nThe Custom Text API is available [here](https://auth0.com/docs/api/management/v2/prompts/get-custom-text-by-language) and each variable follows a `var-<name>` naming convention. Calls to the API must specify the Screen when adding, updating, or deleting a custom text variable. Markdown links are supported and are converted to HTML `<a>` elements before being displayed to users.\n\nBelow is an example call to add a variable for the text of a terms of service checkbox label in English and Spanish. See the Management API to learn more.\n\n```\n# PUT /api/v2/prompts/signup-id/custom-text/en\n{\n  \"signup\": {\n    \"var-tos\": \"I agree with the [Terms of Service](https://en.example.com/tos)\"\n  }\n}\n\n# PUT /api/v2/prompts/signup-id/custom-text/es\n{\n  \"signup\": {\n    \"var-tos\": \"Estoy de acuerdo con los [Términos de Servicio](https://es.example.com/tos)\"\n  }\n}\n```\n\n##### Use a Custom Text Variable in a Partial\n\nCustom text variables are referenced in Partials using the `prompts.screen.text` object; the reference for the `var-tos` example in the previous section is `prompt.screen.texts.varTos`. See below for an example of how to use a previously created variable in a Partial on the Signup ID Prompt, noting that the Management API's `var-tos` variable is referenced as `varTos` in the Partial.\n\n```\n# PUT api/v2/prompts/signup/partials\n{\n  \"signup\": {\n    \"form-content-end\": \"<div class='ulp-field'><input type='checkbox' name='ulp-terms-of-service' id='terms-of-service'><label for='terms-of-service'>{{ prompt.screen.texts.varTos }}</label></div>\"\n  }\n}\n```\n\n#### Validate and Save Captured Data\n\nData captured by custom form elements is available in Actions, and Auth0 recommends that the collected data be validated.\n\nEach Action receives the captured data as an object on the `event.request.body`. Customers can return a validation error by using the `api.validation.error` function.\n\n*   Data from the Signup Prompts is accessible on Pre User Registration, and if a validation error is returned, the user is prevented from registering.\n    \n*   Data from Login Prompts is accessible on Post Login, and if a validation error is returned, the validation error is forwarded to the customer’s application error page.\n    \n\n##### Save to User Metadata\n\nFrom the Action, captured data can be sent to an external API for validation and storage or saved in `user_metadata` on the user via `api.user.setUserMetadata`.\n\n```\n# Given this code in the signup form\n# <div class=\"ulp-field\">\n#   <label for=\"full-name\">Full Name</label>\n#   <input type=\"text\" name=\"ulp-full-name\" id=\"full-name\">\n# </div>\n\nexports.onExecutePreUserRegistration = async (event, api) => {\n  const fullName = event.request.body['ulp-full-name'];\n  if(!fullName) {\n    api.validation.error(\"invalid_payload\", \"Missing Name\");\n    return;\n  }\n\n  api.user.setUserMetadata(\"fullName\", fullName);\n};\n```\n\n## Learn more\n\n*   [Use Dynamic Variables to Internationalize Custom Form Elements](https://auth0.com/docs/use-dynamic-variables-to-internationalize-custom-form-elements)\n*   [Use Actions to Validate and Store End-user Data Gathered By Signup Prompt Customizations](https://auth0.com/docs/validate-and-store-user-data-with-actions)",
    "title": "Customize Signup and Login Prompts",
    "description": "Learn how to customize signup and login prompts for Universal Login ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-connections",
    "markdown": "# Retrieve Organization Connections\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Organization Connections",
    "description": "Learn how to retrieve Organization connections using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-organizations",
    "markdown": "# Retrieve Organizations\n\nWhen working with [organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) programmatically, you may need to retrieve either a list of all organizations or organizations individually by name or ID.\n\n## Retrieve tenant organizations\n\nYou can retrieve all organizations for a tenant via the Management API.\n\nMake a `GET` call to the `Get Organizations` endpoint. Be sure to replace the `MGMT_API_ACCESS_TOKEN` placeholder value with your Management API Access Token.\n\n*   [cURL](#3b5988849bc94a50be9f1282c519d3d7_shell)\n*   [C#](#3b5988849bc94a50be9f1282c519d3d7_csharp)\n*   [Go](#3b5988849bc94a50be9f1282c519d3d7_go)\n*   [Java](#3b5988849bc94a50be9f1282c519d3d7_java)\n*   [Node.JS](#3b5988849bc94a50be9f1282c519d3d7_node)\n*   [Obj-C](#3b5988849bc94a50be9f1282c519d3d7_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n### Response status codes\n\nPossible response status codes are as follows:\n\n| Status code | Error code | Message | Cause |\n| --- | --- | --- | --- |\n| `200` |     | Organizations successfully retrieved. |     |\n| `400` | `invalid_paging` | Requesting page exceeds the allowed maximum of 1000 records. | API has been limited to only return up to 1000 records. |\n| `400` | `invalid_query_string` | Invalid request query string. The message will vary depending on the cause. | The query string is not valid. |\n| `401` |     | Invalid token. |     |\n| `401` |     | Invalid signature received for JSON Web Token validation. |     |\n| `401` |     | Client is not global. |     |\n| `403` | `insufficient_scope` | Insufficient scope; expected any of: `read:organizations`. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `429` |     | Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers. |     |\n\n## Retrieve organization by ID\n\nYou can retrieve an organization by its ID through the Management API.\n\nMake a `GET` call to the `Get Organization` endpoint. Be sure to replace the `ORG_ID` and `MGMT_API_ACCESS_TOKEN` placeholder values with your organization ID and Management API Access Token, respectively.\n\n*   [cURL](#5e05b3d45e4b454d97e09c634378df80_shell)\n*   [C#](#5e05b3d45e4b454d97e09c634378df80_csharp)\n*   [Go](#5e05b3d45e4b454d97e09c634378df80_go)\n*   [Java](#5e05b3d45e4b454d97e09c634378df80_java)\n*   [Node.JS](#5e05b3d45e4b454d97e09c634378df80_node)\n*   [Obj-C](#5e05b3d45e4b454d97e09c634378df80_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/ORG_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/ORG_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n### Response status codes\n\nPossible response status codes are as follows:\n\n| Status code | Error code | Message | Cause |\n| --- | --- | --- | --- |\n| `200` |     | Organization successfully retrieved. |     |\n| `400` | `invalid_query_string` | Invalid request query string. The message will vary depending on the cause. | The query string is not valid. |\n| `401` |     | Invalid token. |     |\n| `401` |     | Invalid signature received for JSON Web Token validation. |     |\n| `401` |     | Client is not global. |     |\n| `403` | `insufficient_scope` | Insufficient scope; expected any of: `read:organizations`. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `429` |     | Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers. |     |\n\n## Retrieve organization by name\n\nYou can retrieve an organization by its name through the Management API.\n\nMake a `GET` call to the `Get Organization by Name` endpoint. Be sure to replace the `ORG_NAME` and `MGMT_API_ACCESS_TOKEN` placeholder values with your organization ID and Management API Access Token, respectively.\n\n*   [cURL](#1abfd1e0004249bfa650004394d76122_shell)\n*   [C#](#1abfd1e0004249bfa650004394d76122_csharp)\n*   [Go](#1abfd1e0004249bfa650004394d76122_go)\n*   [Java](#1abfd1e0004249bfa650004394d76122_java)\n*   [Node.JS](#1abfd1e0004249bfa650004394d76122_node)\n*   [Obj-C](#1abfd1e0004249bfa650004394d76122_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/name/ORG_NAME' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/name/ORG_NAME',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/name/ORG_NAME\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/name/ORG_NAME\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| Value | Description |\n| --- | --- |\n| `ORG_ NAME` | Name of the organization you want to retrieve. Maximum length of 50 characters. |\n| `MGMT_API_ACCESS_TOKEN` | [Access Token for the Management API](https://auth0.com/docs/tokens/management-api-access-tokens) with the scope `read:organizations`. |\n\n### Response status codes\n\nPossible response status codes are as follows:\n\n| Status code | Error code | Message | Cause |\n| --- | --- | --- | --- |\n| `200` |     | Organizations successfully retrieved. |     |\n| `400` | `invalid_query_string` | Invalid request query string. The message will vary depending on the cause. | The query string is not valid. |\n| `401` |     | Invalid token. |     |\n| `401` |     | Invalid signature received for JSON Web Token validation. |     |\n| `401` |     | Client is not global. |     |\n| `403` | `insufficient_scope` | Insufficient scope; expected any of: `read:organizations`. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `429` |     | Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers. |     |",
    "title": "Retrieve Organizations",
    "description": "Learn how to retrieve Organizations using the Auth0 Dashboard and Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/branding/get-default-branding-theme",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/branding/patch-branding-theme",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/prompts/put-partials",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/branding/get-branding-theme",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/branding/delete-branding-theme",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/prompts/put-custom-text-by-language",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/prompts/get-custom-text-by-language",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  }
]