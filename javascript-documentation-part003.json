[
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
    "markdown": "# Function.prototype.bind() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`bind()`** method of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances creates a new function that, when called, calls this function with its `this` keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nbind(thisArg)\nbind(thisArg, arg1)\nbind(thisArg, arg1, arg2)\nbind(thisArg, arg1, arg2, /* …, */ argN)\n```\n\n### [Parameters](#parameters)\n\n[`thisArg`](#thisarg)\n\nThe value to be passed as the `this` parameter to the target function `func` when the bound function is called. If the function is not in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n[`arg1`](#arg1), …, `argN` Optional\n\nArguments to prepend to arguments provided to the bound function when invoking `func`.\n\n### [Return value](#return_value)\n\nA copy of the given function with the specified `this` value, and initial arguments (if provided).\n\n## [Description](#description)\n\nThe `bind()` function creates a new _bound function_. Calling the bound function generally results in the execution of the function it wraps, which is also called the _target function_. The bound function will store the parameters passed — which include the value of `this` and the first few arguments — as its internal state. These values are stored in advance, instead of being passed at call time. You can generally see `const boundFn = fn.bind(thisArg, arg1, arg2)` as being equivalent to `const boundFn = (...restArgs) => fn.call(thisArg, arg1, arg2, ...restArgs)` for the effect when it's called (but not when `boundFn` is constructed).\n\nA bound function can be further bound by calling `boundFn.bind(thisArg, /* more args */)`, which creates another bound function `boundFn2`. The newly bound `thisArg` value is ignored, because the target function of `boundFn2`, which is `boundFn`, already has a bound `this`. When `boundFn2` is called, it would call `boundFn`, which in turn calls `fn`. The arguments that `fn` ultimately receives are, in order: the arguments bound by `boundFn`, arguments bound by `boundFn2`, and the arguments received by `boundFn2`.\n\n```\n\"use strict\"; // prevent `this` from being boxed into the wrapper object\n\nfunction log(...args) {\n  console.log(this, ...args);\n}\nconst boundLog = log.bind(\"this value\", 1, 2);\nconst boundLog2 = boundLog.bind(\"new this value\", 3, 4);\nboundLog2(5, 6); // \"this value\", 1, 2, 3, 4, 5, 6\n```\n\nA bound function may also be constructed using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator if its target function is constructable. Doing so acts as though the target function had instead been constructed. The prepended arguments are provided to the target function as usual, while the provided `this` value is ignored (because construction prepares its own `this`, as seen by the parameters of [`Reflect.construct`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct)). If the bound function is directly constructed, [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) will be the target function instead. (That is, the bound function is transparent to `new.target`.)\n\n```\nclass Base {\n  constructor(...args) {\n    console.log(new.target === Base);\n    console.log(args);\n  }\n}\n\nconst BoundBase = Base.bind(null, 1, 2);\n\nnew BoundBase(3, 4); // true, [1, 2, 3, 4]\n```\n\nHowever, because a bound function does not have the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, it cannot be used as a base class for [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends).\n\n```\nclass Derived extends class {}.bind(null) {}\n// TypeError: Class extends value does not have valid prototype property undefined\n```\n\nWhen using a bound function as the right-hand side of [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), `instanceof` would reach for the target function (which is stored internally in the bound function) and read its `prototype` instead.\n\n```\nclass Base {}\nconst BoundBase = Base.bind(null, 1, 2);\nconsole.log(new Base() instanceof BoundBase); // true\n```\n\nThe bound function has the following properties:\n\n[`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n\nThe `length` of the target function minus the number of arguments being bound (not counting the `thisArg` parameter), with 0 being the minimum value.\n\n[`name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name)\n\nThe `name` of the target function plus a `\"bound \"` prefix.\n\nThe bound function also inherits the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) of the target function. However, it doesn't have other own properties of the target function (such as [static properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) if the target function is a class).\n\n## [Examples](#examples)\n\n### [Creating a bound function](#creating_a_bound_function)\n\nThe simplest use of `bind()` is to make a function that, no matter how it is called, is called with a particular `this` value.\n\nA common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its `this` (e.g., by using the method in callback-based code).\n\nWithout special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:\n\n```\n// Top-level 'this' is bound to 'globalThis' in scripts.\nthis.x = 9;\nconst module = {\n  x: 81,\n  getX() {\n    return this.x;\n  },\n};\n\n// The 'this' parameter of 'getX' is bound to 'module'.\nconsole.log(module.getX()); // 81\n\nconst retrieveX = module.getX;\n// The 'this' parameter of 'retrieveX' is bound to 'globalThis' in non-strict mode.\nconsole.log(retrieveX()); // 9\n\n// Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\nconst boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 81\n```\n\n**Note:** If you run this example in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), the `this` parameter of `retrieveX` will be bound to `undefined` instead of `globalThis`, causing the `retrieveX()` call to fail.\n\nIf you run this example in an ECMAScript module, top-level `this` will be bound to `undefined` instead of `globalThis`, causing the `this.x = 9` assignment to fail.\n\nIf you run this example in a Node CommonJS module, top-level `this` will be bound to `module.exports` instead of `globalThis`. However, the `this` parameter of `retrieveX` will still be bound to `globalThis` in non-strict mode and to `undefined` in strict mode. Therefore, in non-strict mode (the default), the `retrieveX()` call will return `undefined` because `this.x = 9` is writing to a different object (`module.exports`) from what `getX` is reading from (`globalThis`).\n\nIn fact, some built-in \"methods\" are also getters that return bound functions — one notable example being [`Intl.NumberFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format#using_format_with_map), which, when accessed, returns a bound function that you can directly pass as a callback.\n\n### [Partially applied functions](#partially_applied_functions)\n\nThe next simplest use of `bind()` is to make a function with pre-specified initial arguments.\n\nThese arguments (if any) follow the provided `this` value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed to the bound function at the time it is called.\n\n```\nfunction list(...args) {\n  return args;\n}\n\nfunction addArguments(arg1, arg2) {\n  return arg1 + arg2;\n}\n\nconsole.log(list(1, 2, 3)); // [1, 2, 3]\n\nconsole.log(addArguments(1, 2)); // 3\n\n// Create a function with a preset leading argument\nconst leadingThirtySevenList = list.bind(null, 37);\n\n// Create a function with a preset first argument.\nconst addThirtySeven = addArguments.bind(null, 37);\n\nconsole.log(leadingThirtySevenList()); // [37]\nconsole.log(leadingThirtySevenList(1, 2, 3)); // [37, 1, 2, 3]\nconsole.log(addThirtySeven(5)); // 42\nconsole.log(addThirtySeven(5, 10)); // 42\n// (the last argument 10 is ignored)\n```\n\n### [With setTimeout()](#with_settimeout)\n\nBy default, within [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout), the `this` keyword will be set to [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis), which is [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) in browsers. When working with class methods that require `this` to refer to class instances, you may explicitly bind `this` to the callback function, in order to maintain the instance.\n\n```\nclass LateBloomer {\n  constructor() {\n    this.petalCount = Math.floor(Math.random() * 12) + 1;\n  }\n  bloom() {\n    // Declare bloom after a delay of 1 second\n    setTimeout(this.declare.bind(this), 1000);\n  }\n  declare() {\n    console.log(`I am a beautiful flower with ${this.petalCount} petals!`);\n  }\n}\n\nconst flower = new LateBloomer();\nflower.bloom();\n// After 1 second, calls 'flower.declare()'\n```\n\nYou can also use [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for this purpose.\n\n```\nclass LateBloomer {\n  bloom() {\n    // Declare bloom after a delay of 1 second\n    setTimeout(() => this.declare(), 1000);\n  }\n}\n```\n\n### [Bound functions used as constructors](#bound_functions_used_as_constructors)\n\nBound functions are automatically suitable for use with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided `this` is ignored. However, provided arguments are still prepended to the constructor call.\n\n```\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return `${this.x},${this.y}`;\n};\n\nconst p = new Point(1, 2);\np.toString();\n// '1,2'\n\n// The thisArg's value doesn't matter because it's ignored\nconst YAxisPoint = Point.bind(null, 0 /*x*/);\n\nconst axisPoint = new YAxisPoint(5);\naxisPoint.toString(); // '0,5'\n\naxisPoint instanceof Point; // true\naxisPoint instanceof YAxisPoint; // true\nnew YAxisPoint(17, 42) instanceof Point; // true\n```\n\nNote that you need not do anything special to create a bound function for use with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target), [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) etc. all work as expected, as if the constructor was never bound. The only difference is that it can no longer be used for [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends).\n\nThe corollary is that you need not do anything special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). If you call it without `new`, the bound `this` is suddenly not ignored.\n\n```\nconst emptyObj = {};\nconst YAxisPoint = Point.bind(emptyObj, 0 /*x*/);\n\n// Can still be called as a normal function\n// (although usually this is undesirable)\nYAxisPoint(13);\n\n// The modifications to `this` is now observable from the outside\nconsole.log(emptyObj); // { x: 0, y: 13 }\n```\n\nIf you wish to restrict a bound function to only be callable with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), or only be callable without `new`, the target function must enforce that restriction, such as by checking `new.target !== undefined` or using a [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) instead.\n\n### [Binding classes](#binding_classes)\n\nUsing `bind()` on classes preserves most of the class's semantics, except that all static own properties of the current class are lost. However, because the prototype chain is preserved, you can still access static properties inherited from the parent class.\n\n```\nclass Base {\n  static baseProp = \"base\";\n}\n\nclass Derived extends Base {\n  static derivedProp = \"derived\";\n}\n\nconst BoundDerived = Derived.bind(null);\nconsole.log(BoundDerived.baseProp); // \"base\"\nconsole.log(BoundDerived.derivedProp); // undefined\nconsole.log(new BoundDerived() instanceof Derived); // true\n```\n\n### [Transforming methods to utility functions](#transforming_methods_to_utility_functions)\n\n`bind()` is also helpful in cases where you want to transform a method which requires a specific `this` value to a plain utility function that accepts the previous `this` parameter as a normal parameter. This is similar to how general-purpose utility functions work: instead of calling `array.map(callback)`, you use `map(array, callback)`, which allows you to use `map` with array-like objects that are not arrays (for example, [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)) without mutating `Object.prototype`.\n\nTake [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n```\nconst slice = Array.prototype.slice;\n\n// ...\n\nslice.call(arguments);\n```\n\nNote that you can't save `slice.call` and call it as a plain function, because the `call()` method also reads its `this` value, which is the function it should call. In this case, you can use `bind()` to bind the value of `this` for `call()`. In the following piece of code, `slice()` is a bound version of [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), with the `this` value bound to [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice). This means that additional `call()` calls can be eliminated:\n\n```\n// Same as \"slice\" in the previous example\nconst unboundSlice = Array.prototype.slice;\nconst slice = Function.prototype.call.bind(unboundSlice);\n\n// ...\n\nslice(arguments);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function.prototype.bind](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.bind) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.bind() - JavaScript | MDN",
    "description": "The bind() method of Function instances creates a new function that, when called, calls this function with its this keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
    "markdown": "# Function.prototype.apply() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`apply()`** method of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances calls this function with a given `this` value, and `arguments` provided as an array (or an [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\napply(thisArg)\napply(thisArg, argsArray)\n```\n\n### [Parameters](#parameters)\n\n[`thisArg`](#thisarg)\n\nThe value of `this` provided for the call to `func`. If the function is not in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects.\n\n[`argsArray`](#argsarray) Optional\n\nAn array-like object, specifying the arguments with which `func` should be called, or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if no arguments should be provided to the function.\n\n### [Return value](#return_value)\n\nThe result of calling the function with the specified `this` value and arguments.\n\n## [Description](#description)\n\n**Note:** This function is almost identical to [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), except that the function arguments are passed to `call()` individually as a list, while for `apply()` they are combined in one object, typically an array — for example, `func.call(this, \"eat\", \"bananas\")` vs. `func.apply(this, [\"eat\", \"bananas\"])`.\n\nNormally, when calling a function, the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) inside the function is the object that the function was accessed on. With `apply()`, you can assign an arbitrary value as `this` when calling an existing function, without first attaching the function to the object as a property. This allows you to use methods of one object as generic utility functions.\n\nYou can also use any kind of object which is array-like as the second parameter. In practice, this means that it needs to have a `length` property, and integer (\"index\") properties in the range `(0..length - 1)`. For example, you could use a [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList), or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`. You can also use [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments), for example:\n\n```\nfunction wrapper() {\n  return anotherFn.apply(null, arguments);\n}\n```\n\nWith the [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) and parameter [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), this can be rewritten as:\n\n```\nfunction wrapper(...args) {\n  return anotherFn(...args);\n}\n```\n\nIn general, `fn.apply(null, args)` is equivalent to `fn(...args)` with the parameter spread syntax, except `args` is expected to be an array-like object in the former case with `apply()`, and an [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) object in the latter case with spread syntax.\n\n**Warning:** Do not use `apply()` to chain constructors (for example, to implement inheritance). This invokes the constructor function as a plain function, which means [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is `undefined`, and classes throw an error because they can't be called without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Use [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct) or [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) instead.\n\n## [Examples](#examples)\n\n### [Using apply() to append an array to another](#using_apply_to_append_an_array_to_another)\n\nYou can use [`Array.prototype.push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) to append an element to an array. Because `push()` accepts a variable number of arguments, you can also push multiple elements at once. But if you pass an array to `push()`, it will actually add that array as a single element, instead of adding the elements individually, ending up with an array inside an array. On the other hand, [`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) does have the desired behavior in this case, but it does not append to the _existing_ array — it creates and returns a new array.\n\nIn this case, you can use `apply` to implicitly \"spread\" an array as a series of arguments.\n\n```\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push.apply(array, elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n```\n\nThe same effect can be achieved with the spread syntax.\n\n```\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push(...elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n```\n\n### [Using apply() and built-in functions](#using_apply_and_built-in_functions)\n\nClever usage of `apply()` allows you to use built-in functions for some tasks that would probably otherwise require manually looping over a collection (or using the spread syntax).\n\nFor example, we can use [`Math.max()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) and [`Math.min()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) to find out the maximum and minimum value in an array.\n\n```\n// min/max number in an array\nconst numbers = [5, 6, 2, 3, 7];\n\n// using Math.min/Math.max apply\nlet max = Math.max.apply(null, numbers);\n// This about equal to Math.max(numbers[0], …)\n// or Math.max(5, 6, …)\n\nlet min = Math.min.apply(null, numbers);\n\n// vs. simple loop based algorithm\nmax = -Infinity;\nmin = +Infinity;\n\nfor (let i = 0; i < numbers.length; i++) {\n  if (numbers[i] > max) {\n    max = numbers[i];\n  }\n  if (numbers[i] < min) {\n    min = numbers[i];\n  }\n}\n```\n\nBut beware: by using `apply()` (or the spread syntax) with an arbitrarily long arguments list, you run the risk of exceeding the JavaScript engine's argument length limit.\n\nThe consequences of calling a function with too many arguments (that is, more than tens of thousands of arguments) is unspecified and varies across engines. (The JavaScriptCore engine has a hard-coded [argument limit of 65536](https://webkit.org/b/80797).) Most engines throw an exception; but there's no normative specification preventing other behaviors, such as arbitrarily limiting the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments `5, 6, 2, 3` had been passed to `apply` in the examples above, rather than the full array.\n\nIf your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\n```\nfunction minOfArray(arr) {\n  let min = Infinity;\n  const QUANTUM = 32768;\n\n  for (let i = 0; i < arr.length; i += QUANTUM) {\n    const submin = Math.min.apply(\n      null,\n      arr.slice(i, Math.min(i + QUANTUM, arr.length)),\n    );\n    min = Math.min(submin, min);\n  }\n\n  return min;\n}\n\nconst min = minOfArray([5, 6, 2, 3, 7]);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function.prototype.apply](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.apply) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.apply() - JavaScript | MDN",
    "description": "The apply() method of Function instances calls this function with a given this value, and arguments provided as an array (or an array-like object).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller",
    "markdown": "# Function.prototype.caller - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** In [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), accessing `caller` of a function throws an error — the API is removed with no replacement. This is to prevent code from being able to \"walk the stack\", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read [the rationale for the deprecation of `arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee#description).\n\nThe **`caller`** accessor property of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances returns the function that invoked this function. For [strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `caller` property throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n## [Description](#description)\n\nIf the function `f` was invoked by the top-level code, the value of `f.caller` is [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null); otherwise it's the function that called `f`. If the function that called `f` is a strict mode function, the value of `f.caller` is also `null`.\n\nNote that the only behavior specified by the ECMAScript specification is that `Function.prototype` has an initial `caller` accessor that unconditionally throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for any `get` or `set` request (known as a \"poison pill accessor\"), and that implementations are not allowed to change this semantic for any function except non-strict plain functions, in which case it must not have the value of a strict mode function. The actual behavior of the `caller` property, if it's anything other than throwing an error, is implementation-defined. For example, Chrome defines it as an own data property, while Firefox and Safari extend the initial poison-pill `Function.prototype.caller` accessor to specially handle `this` values that are non-strict functions.\n\n```\n(function f() {\n  if (Object.hasOwn(f, \"caller\")) {\n    console.log(\n      \"caller is an own property with descriptor\",\n      Object.getOwnPropertyDescriptor(f, \"caller\"),\n    );\n  } else {\n    console.log(\n      \"f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller\",\n    );\n    console.log(\n      Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(f),\n        \"caller\",\n      ).get.call(f),\n    );\n  }\n})();\n\n// In Chrome:\n// caller is an own property with descriptor {value: null, writable: false, enumerable: false, configurable: false}\n\n// In Firefox:\n// f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller\n// null\n```\n\nThis property replaces the obsolete `arguments.caller` property of the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\nThe special property `__caller__`, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.\n\n## [Examples](#examples)\n\n### [Checking the value of a function's caller property](#checking_the_value_of_a_functions_caller_property)\n\nThe following code checks the value a function's `caller` property.\n\n```\nfunction myFunc() {\n  if (myFunc.caller === null) {\n    return \"The function was called from the top!\";\n  } else {\n    return `This function's caller was ${myFunc.caller}`;\n  }\n}\n```\n\n### [Reconstructing the stack and recursion](#reconstructing_the_stack_and_recursion)\n\nNote that in case of recursion, you can't reconstruct the call stack using this property. Consider:\n\n```\nfunction f(n) {\n  g(n - 1);\n}\nfunction g(n) {\n  if (n > 0) {\n    f(n);\n  } else {\n    stop();\n  }\n}\nf(2);\n```\n\nAt the moment `stop()` is called the call stack will be:\n\nf(2) -> g(1) -> f(1) -> g(0) -> stop()\n\nThe following is true:\n\n```\nstop.caller === g && f.caller === g && g.caller === f;\n```\n\nso if you tried to get the stack trace in the `stop()` function like this:\n\n```\nlet f = stop;\nlet stack = \"Stack trace:\";\nwhile (f) {\n  stack += `\\n${f.name}`;\n  f = f.caller;\n}\n```\n\nthe loop would never stop.\n\n### [Strict mode caller](#strict_mode_caller)\n\nIf the caller is a strict mode function, the value of `caller` is `null`.\n\n```\nfunction callerFunc() {\n  calleeFunc();\n}\n\nfunction strictCallerFunc() {\n  \"use strict\";\n  calleeFunc();\n}\n\nfunction calleeFunc() {\n  console.log(calleeFunc.caller);\n}\n\n(function () {\n  callerFunc();\n})();\n// Logs [Function: callerFunc]\n\n(function () {\n  strictCallerFunc();\n})();\n// Logs null\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.caller - JavaScript | MDN",
    "description": "The caller accessor property of Function instances returns the function that invoked this function. For strict, arrow, async, and generator functions, accessing the caller property throws a TypeError.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
    "markdown": "# Function.prototype.call() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`call()`** method of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances calls this function with a given `this` value and arguments provided individually.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncall(thisArg)\ncall(thisArg, arg1)\ncall(thisArg, arg1, arg2)\ncall(thisArg, arg1, arg2, /* …, */ argN)\n```\n\n### [Parameters](#parameters)\n\n[`thisArg`](#thisarg)\n\nThe value to use as `this` when calling `func`. If the function is not in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects.\n\n[`arg1`](#arg1), …, `argN` Optional\n\nArguments for the function.\n\n### [Return value](#return_value)\n\nThe result of calling the function with the specified `this` value and arguments.\n\n## [Description](#description)\n\n**Note:** This function is almost identical to [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), except that the function arguments are passed to `call()` individually as a list, while for `apply()` they are combined in one object, typically an array — for example, `func.call(this, \"eat\", \"bananas\")` vs. `func.apply(this, [\"eat\", \"bananas\"])`.\n\nNormally, when calling a function, the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) inside the function is the object that the function was accessed on. With `call()`, you can assign an arbitrary value as `this` when calling an existing function, without first attaching the function to the object as a property. This allows you to use methods of one object as generic utility functions.\n\n**Warning:** Do not use `call()` to chain constructors (for example, to implement inheritance). This invokes the constructor function as a plain function, which means [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is `undefined`, and classes throw an error because they can't be called without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Use [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct) or [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) instead.\n\n## [Examples](#examples)\n\n### [Using call() to invoke a function and specifying the this value](#using_call_to_invoke_a_function_and_specifying_the_this_value)\n\nIn the example below, when we call `greet`, the value of `this` will be bound to object `obj`, even when `greet` is not a method of `obj`.\n\n```\nfunction greet() {\n  console.log(this.animal, \"typically sleep between\", this.sleepDuration);\n}\n\nconst obj = {\n  animal: \"cats\",\n  sleepDuration: \"12 and 16 hours\",\n};\n\ngreet.call(obj); // cats typically sleep between 12 and 16 hours\n```\n\n### [Using call() to invoke a function without specifying the first argument](#using_call_to_invoke_a_function_without_specifying_the_first_argument)\n\nIf the first `thisArg` parameter is omitted, it defaults to `undefined`. In non-strict mode, the `this` value is then substituted with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) (which is akin to the global object).\n\n```\nglobalThis.globProp = \"Wisen\";\n\nfunction display() {\n  console.log(`globProp value is ${this.globProp}`);\n}\n\ndisplay.call(); // Logs \"globProp value is Wisen\"\n```\n\nIn strict mode, the value of `this` is not substituted, so it stays as `undefined`.\n\n```\n\"use strict\";\n\nglobalThis.globProp = \"Wisen\";\n\nfunction display() {\n  console.log(`globProp value is ${this.globProp}`);\n}\n\ndisplay.call(); // throws TypeError: Cannot read the property of 'globProp' of undefined\n```\n\n### [Transforming methods to utility functions](#transforming_methods_to_utility_functions)\n\n`call()` is almost equivalent to a normal function call, except that `this` is passed as a normal parameter instead of as the value that the function was accessed on. This is similar to how general-purpose utility functions work: instead of calling `array.map(callback)`, you use `map(array, callback)`, which allows you to use `map` with array-like objects that are not arrays (for example, [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)) without mutating `Object.prototype`.\n\nTake [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n```\nconst slice = Array.prototype.slice;\n\n// ...\n\nslice.call(arguments);\n```\n\nNote that you can't save `slice.call` and call it as a plain function, because the `call()` method also reads its `this` value, which is the function it should call. In this case, you can use [`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) to bind the value of `this` for `call()`. In the following piece of code, `slice()` is a bound version of [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), with the `this` value bound to [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice). This means that additional `call()` calls can be eliminated:\n\n```\n// Same as \"slice\" in the previous example\nconst unboundSlice = Array.prototype.slice;\nconst slice = Function.prototype.call.bind(unboundSlice);\n\n// ...\n\nslice(arguments);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function.prototype.call](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.call() - JavaScript | MDN",
    "description": "The call() method of Function instances calls this function with a given this value and arguments provided individually.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName",
    "markdown": "# Function: displayName - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe optional **`displayName`** property of a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instance specifies the display name of the function.\n\n## [Value](#value)\n\nThe `displayName` property is not initially present on any function — it's added by the code authors. For the purpose of display, it should be a string.\n\n## [Description](#description)\n\nThe `displayName` property, if present, may be preferred by consoles and profilers over the [`name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name) property to be displayed as the name of a function.\n\nAmong browsers, only the Firefox console utilizes this property. React devtools also use the [`displayName`](https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging) property when displaying the component tree.\n\nFirefox does some basic attempts to decode the `displayName` that's possibly generated by the [anonymous JavaScript functions naming convention](https://johnjbarton.github.io/nonymous/index.html) algorithm. The following patterns are detected:\n\n*   If `displayName` ends with a sequence of alphanumeric characters, `_`, and `$`, the longest such suffix is displayed.\n*   If `displayName` ends with a sequence of `[]`\\-enclosed characters, that sequence is displayed without the square brackets.\n*   If `displayName` ends with a sequence of alphanumeric characters and `_` followed by some `/`, `.`, or `<`, the sequence is returned without the trailing `/`, `.`, or `<` characters.\n*   If `displayName` ends with a sequence of alphanumeric characters and `_` followed by `(^)`, the sequence is displayed without the `(^)`.\n\nIf none of the above patterns match, the entire `displayName` is displayed.\n\n## [Examples](#examples)\n\n### [Setting a displayName](#setting_a_displayname)\n\nBy entering the following in a Firefox console, it should display as something like `function MyFunction()`:\n\n```\nconst a = function () {};\na.displayName = \"MyFunction\";\n\na; // function MyFunction()\n```\n\n### [Changing displayName dynamically](#changing_displayname_dynamically)\n\nYou can dynamically change the `displayName` of a function:\n\n```\nconst object = {\n  // anonymous\n  someMethod: function someMethod(value) {\n    someMethod.displayName = `someMethod (${value})`;\n  },\n};\n\nconsole.log(object.someMethod.displayName); // undefined\n\nobject.someMethod(\"123\");\nconsole.log(object.someMethod.displayName); // \"someMethod (123)\"\n```\n\n### [Cleaning of displayName](#cleaning_of_displayname)\n\nFirefox devtools would clean up a few common patterns in the `displayName` property before displaying it.\n\n```\nfunction foo() {}\n\nfunction testName(name) {\n  foo.displayName = name;\n  console.log(foo);\n}\n\ntestName(\"$foo$\"); // function $foo$()\ntestName(\"foo bar\"); // function bar()\ntestName(\"Foo.prototype.add\"); // function add()\ntestName(\"foo .\"); // function foo .()\ntestName(\"foo <\"); // function foo <()\ntestName(\"foo?\"); // function foo?()\ntestName(\"foo()\"); // function foo()()\n\ntestName(\"[...]\"); // function ...()\ntestName(\"foo<\"); // function foo()\ntestName(\"foo...\"); // function foo()\ntestName(\"foo(^)\"); // function foo()\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function: displayName - JavaScript | MDN",
    "description": "The optional displayName property of a Function instance specifies the display name of the function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments",
    "markdown": "# Function.prototype.arguments - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\n**Note:** The `arguments` property of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) objects is deprecated. The recommended way to access the `arguments` object is to refer to the variable [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) available within functions.\n\nThe **`arguments`** accessor property of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instances returns the arguments passed to this function. For [strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `arguments` property throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n## [Description](#description)\n\nThe value of `arguments` is an array-like object corresponding to the arguments passed to a function.\n\nIn the case of recursion, i.e. if function `f` appears several times on the call stack, the value of `f.arguments` represents the arguments corresponding to the most recent invocation of the function.\n\nThe value of the `arguments` property is normally [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned).\n\nNote that the only behavior specified by the ECMAScript specification is that `Function.prototype` has an initial `arguments` accessor that unconditionally throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for any `get` or `set` request (known as a \"poison pill accessor\"), and that implementations are not allowed to change this semantic for any function except non-strict plain functions. The actual behavior of the `arguments` property, if it's anything other than throwing an error, is implementation-defined. For example, Chrome defines it as an own data property, while Firefox and Safari extend the initial poison-pill `Function.prototype.arguments` accessor to specially handle `this` values that are non-strict functions.\n\n```\n(function f() {\n  if (Object.hasOwn(f, \"arguments\")) {\n    console.log(\n      \"arguments is an own property with descriptor\",\n      Object.getOwnPropertyDescriptor(f, \"arguments\"),\n    );\n  } else {\n    console.log(\n      \"f doesn't have an own property named arguments. Trying to get f.[[Prototype]].arguments\",\n    );\n    console.log(\n      Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(f),\n        \"arguments\",\n      ).get.call(f),\n    );\n  }\n})();\n\n// In Chrome:\n// arguments is an own property with descriptor {value: Arguments(0), writable: false, enumerable: false, configurable: false}\n\n// In Firefox:\n// f doesn't have an own property named arguments. Trying to get f.[[Prototype]].arguments\n// Arguments { … }\n```\n\n## [Examples](#examples)\n\n### [Using the arguments property](#using_the_arguments_property)\n\n```\nfunction f(n) {\n  g(n - 1);\n}\n\nfunction g(n) {\n  console.log(`before: ${g.arguments[0]}`);\n  if (n > 0) {\n    f(n);\n  }\n  console.log(`after: ${g.arguments[0]}`);\n}\n\nf(2);\n\nconsole.log(`returned: ${g.arguments}`);\n\n// Logs:\n// before: 1\n// before: 0\n// after: 0\n// after: 1\n// returned: null\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function.prototype.arguments - JavaScript | MDN",
    "description": "The arguments accessor property of Function instances returns the arguments passed to this function. For strict, arrow, async, and generator functions, accessing the arguments property throws a TypeError.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
    "markdown": "# Function: length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`length`** data property of a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instance indicates the number of parameters expected by the function.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA number.\n\n| Property attributes of `Function: length` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nA [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object's `length` property indicates how many arguments the function expects, i.e. the number of formal parameters:\n\n*   Only parameters before the first one with a [default value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) are counted.\n*   A [destructuring pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) counts as a single parameter.\n*   The [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) is excluded.\n\nBy contrast, [`arguments.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length) is local to a function and provides the number of arguments actually passed to the function.\n\nThe [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) constructor is itself a `Function` object. Its `length` data property has a value of `1`.\n\nDue to historical reasons, `Function.prototype` is a callable itself. The `length` property of `Function.prototype` has a value of `0`.\n\n## [Examples](#examples)\n\n### [Using function length](#using_function_length)\n\n```\nconsole.log(Function.length); // 1\n\nconsole.log((() => {}).length); // 0\nconsole.log(((a) => {}).length); // 1\nconsole.log(((a, b) => {}).length); // 2 etc.\n\nconsole.log(((...args) => {}).length);\n// 0, rest parameter is not counted\n\nconsole.log(((a, b = 1, c) => {}).length);\n// 1, only parameters before the first one with\n// a default value are counted\n\nconsole.log((({ a, b }, [c, d]) => {}).length);\n// 2, destructuring patterns each count as\n// a single parameter\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-instances-length](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-instances-length) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function: length - JavaScript | MDN",
    "description": "The length data property of a Function instance indicates the number of parameters expected by the function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
    "markdown": "# Function: name - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`name`** data property of a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) instance indicates the function's name as specified when it was created, or it may be either `anonymous` or `''` (an empty string) for functions created anonymously.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA string.\n\n| Property attributes of `Function: name` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | yes |\n\n**Note:** In non-standard, pre-ES2015 implementations the `configurable` attribute was `false` as well.\n\n## [Description](#description)\n\nThe function's `name` property can be used to identify the function in debugging tools or error messages. It has no semantic significance to the language itself.\n\nThe `name` property is read-only and cannot be changed by the assignment operator:\n\n```\nfunction someFunction() {}\n\nsomeFunction.name = \"otherFunction\";\nconsole.log(someFunction.name); // someFunction\n```\n\nTo change it, use [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\nThe `name` property is typically inferred from how the function is defined. In the following sections, we will describe the various ways in which it can be inferred.\n\n### [Function declaration](#function_declaration)\n\nThe `name` property returns the name of a function declaration.\n\n```\nfunction doSomething() {}\ndoSomething.name; // \"doSomething\"\n```\n\n### [Default-exported function declaration](#default-exported_function_declaration)\n\nAn [`export default`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) declaration exports the function as a declaration instead of an expression. If the declaration is anonymous, the name is `\"default\"`.\n\n```\n// -- someModule.js --\nexport default function () {}\n\n// -- main.js --\nimport someModule from \"./someModule.js\";\n\nsomeModule.name; // \"default\"\n```\n\n### [Function constructor](#function_constructor)\n\nFunctions created with the [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) constructor have name \"anonymous\".\n\n```\nnew Function().name; // \"anonymous\"\n```\n\n### [Function expression](#function_expression)\n\nIf the function expression is named, that name is used as the `name` property.\n\n```\nconst someFunction = function someFunctionName() {};\nsomeFunction.name; // \"someFunctionName\"\n```\n\nAnonymous function expressions created using the keyword `function` or arrow functions would have `\"\"` (an empty string) as their name.\n\n```\n(function () {}).name; // \"\"\n(() => {}).name; // \"\"\n```\n\nHowever, such cases are rare — usually, in order to refer to the expression elsewhere, the function expression is attached to an identifier when it's created (such as in a variable declaration). In such cases, the name can be inferred, as the following few subsections demonstrate.\n\nOne practical case where the name cannot be inferred is a function returned from another function:\n\n```\nfunction getFoo() {\n  return () => {};\n}\ngetFoo().name; // \"\"\n```\n\n### [Variable declaration and method](#variable_declaration_and_method)\n\nVariables and methods can infer the name of an anonymous function from its syntactic position.\n\n```\nconst f = function () {};\nconst object = {\n  someMethod: function () {},\n};\n\nconsole.log(f.name); // \"f\"\nconsole.log(object.someMethod.name); // \"someMethod\"\n```\n\nThe same applies to assignment:\n\n```\nlet f;\nf = () => {};\nf.name; // \"f\"\n```\n\n### [Initializer and default value](#initializer_and_default_value)\n\nFunctions in initializers (default values) of [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value), [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields), etc., will inherit the name of the bound identifier as their `name`.\n\n```\nconst [f = () => {}] = [];\nf.name; // \"f\"\n\nconst { someMethod: m = () => {} } = {};\nm.name; // \"m\"\n\nfunction foo(f = () => {}) {\n  console.log(f.name);\n}\nfoo(); // \"f\"\n\nclass Foo {\n  static someMethod = () => {};\n}\nFoo.someMethod.name; // someMethod\n```\n\n### [Shorthand method](#shorthand_method)\n\n```\nconst o = {\n  foo() {},\n};\no.foo.name; // \"foo\";\n```\n\n### [Bound function](#bound_function)\n\n[`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) produces a function whose name is \"bound \" plus the function name.\n\n```\nfunction foo() {}\nfoo.bind({}).name; // \"bound foo\"\n```\n\n### [Getter and setter](#getter_and_setter)\n\nWhen using [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) accessor properties, \"get\" or \"set\" will appear in the function name.\n\n```\nconst o = {\n  get foo() {},\n  set foo(x) {},\n};\n\nconst descriptor = Object.getOwnPropertyDescriptor(o, \"foo\");\ndescriptor.get.name; // \"get foo\"\ndescriptor.set.name; // \"set foo\";\n```\n\n### [Class](#class)\n\nA class's name follows the same algorithm as function declarations and expressions.\n\n```\nclass Foo {}\nFoo.name; // \"Foo\"\n```\n\n**Warning:** JavaScript will set the function's `name` property only if a function does not have an own property called `name`. However, classes' [static members](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) will be set as own properties of the class constructor function, and thus prevent the built-in `name` from being applied. See [an example](#telling_the_constructor_name_of_an_object) below.\n\n### [Symbol as function name](#symbol_as_function_name)\n\nIf a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) is used a function name and the symbol has a description, the method's name is the description in square brackets.\n\n```\nconst sym1 = Symbol(\"foo\");\nconst sym2 = Symbol();\n\nconst o = {\n  [sym1]() {},\n  [sym2]() {},\n};\n\no[sym1].name; // \"[foo]\"\no[sym2].name; // \"[]\"\n```\n\n### [Private property](#private_property)\n\nPrivate fields and private methods have the hash (`#`) as part of their names.\n\n```\nclass Foo {\n  #field = () => {};\n  #method() {}\n  getNames() {\n    console.log(this.#field.name);\n    console.log(this.#method.name);\n  }\n}\n\nnew Foo().getNames();\n// \"#field\"\n// \"#method\"\n```\n\n## [Examples](#examples)\n\n### [Telling the constructor name of an object](#telling_the_constructor_name_of_an_object)\n\nYou can use `obj.constructor.name` to check the \"class\" of an object.\n\n```\nfunction Foo() {} // Or: class Foo {}\n\nconst fooInstance = new Foo();\nconsole.log(fooInstance.constructor.name); // \"Foo\"\n```\n\nHowever, because static members will become own properties of the class, we can't obtain the class name for virtually any class with a static method property `name()`:\n\n```\nclass Foo {\n  constructor() {}\n  static name() {}\n}\n```\n\nWith a `static name()` method `Foo.name` no longer holds the actual class name but a reference to the `name()` function object. Trying to obtain the class of `fooInstance` via `fooInstance.constructor.name` won't give us the class name at all, but instead a reference to the static class method. Example:\n\n```\nconst fooInstance = new Foo();\nconsole.log(fooInstance.constructor.name); // ƒ name() {}\n```\n\nDue to the existence of static fields, `name` may not be a function either.\n\n```\nclass Foo {\n  static name = 123;\n}\nconsole.log(new Foo().constructor.name); // 123\n```\n\nIf a class has a static property called `name`, it will also become _writable_. The built-in definition in the absence of a custom static definition is _read-only_:\n\n```\nFoo.name = \"Hello\";\nconsole.log(Foo.name); // \"Hello\" if class Foo has a static \"name\" property, but \"Foo\" if not.\n```\n\nTherefore you may not rely on the built-in `name` property to always hold a class's name.\n\n### [JavaScript compressors and minifiers](#javascript_compressors_and_minifiers)\n\n**Warning:** Be careful when using the `name` property with source-code transformations, such as those carried out by JavaScript compressors (minifiers) or obfuscators. These tools are often used as part of a JavaScript build pipeline to reduce the size of a program prior to deploying it to production. Such transformations often change a function's name at build time.\n\nSource code such as:\n\n```\nfunction Foo() {}\nconst foo = new Foo();\n\nif (foo.constructor.name === \"Foo\") {\n  console.log(\"'foo' is an instance of 'Foo'\");\n} else {\n  console.log(\"Oops!\");\n}\n```\n\nmay be compressed to:\n\n```\nfunction a() {}\nconst b = new a();\nif (b.constructor.name === \"Foo\") {\n  console.log(\"'foo' is an instance of 'Foo'\");\n} else {\n  console.log(\"Oops!\");\n}\n```\n\nIn the uncompressed version, the program runs into the truthy branch and logs \"'foo' is an instance of 'Foo'\" — whereas, in the compressed version it behaves differently, and runs into the else branch. If you rely on the `name` property, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function has a particular name.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-instances-name](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-instances-name) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function: name - JavaScript | MDN",
    "description": "The name data property of a Function instance indicates the function's name as specified when it was created, or it may be either anonymous or '' (an empty string) for functions created anonymously.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype",
    "markdown": "# Function: prototype - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nWhen a function is called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), the constructor's `prototype` property will become the resulting object's prototype.\n\n```\nfunction Ctor() {}\nconst inst = new Ctor();\nconsole.log(Object.getPrototypeOf(inst) === Ctor.prototype); // true\n```\n\nYou can read [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#constructors) for more information about the interactions between a constructor function's `prototype` property and the resulting object's prototype.\n\nA function having a `prototype` property is not sufficient for it to be eligible as a constructor. [Generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) have a `prototype` property, but cannot be called with `new`:\n\n```\nasync function* asyncGeneratorFunction() {}\nfunction* generatorFunction() {}\n```\n\nInstead, generator functions' `prototype` property is used when they are called _without_ `new`. The `prototype` property will become the returned [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object's prototype.\n\nIn addition, some functions may have a `prototype` but throw unconditionally when called with `new`. For example, the [`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) and [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) functions throw when called with `new`, because `Symbol.prototype` and `BigInt.prototype` are only intended to provide methods for the primitive values, but the wrapper objects should not be directly constructed.\n\nThe following functions do not have `prototype`, and are therefore ineligible as constructors, even if a `prototype` property is later manually assigned:\n\n```\nconst method = { foo() {} }.foo;\nconst arrowFunction = () => {};\nasync function asyncFunction() {}\n```\n\nThe following are valid constructors that have `prototype`:\n\n```\nclass Class {}\nfunction fn() {}\n```\n\nA [bound function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) does not have a `prototype` property, but may be constructable. When it's constructed, the target function is constructed instead, and if the target function is constructable, it would return a normal instance.\n\n```\nconst boundFunction = function () {}.bind(null);\n```\n\nA function's `prototype` property, by default, is a plain object with one property: [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor), which is a reference to the function itself. The `constructor` property is writable, non-enumerable, and configurable.\n\nIf the `prototype` of a function is reassigned with something other than an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), when the function is called with `new`, the returned object's prototype would be `Object.prototype` instead. (In other words, `new` ignores the `prototype` property and constructs a plain object.)\n\n```\nfunction Ctor() {}\nCtor.prototype = 3;\nconsole.log(Object.getPrototypeOf(new Ctor()) === Object.prototype); // true\n```",
    "title": "Function: prototype - JavaScript | MDN",
    "description": "The prototype data property of a Function instance is used when the function is used as a constructor with the new operator. It will become the new object's prototype.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__",
    "markdown": "# Object.prototype.\\_\\_defineGetter\\_\\_() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** This feature is deprecated in favor of defining [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) using the [object initializer syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) or the [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__defineGetter__()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances binds an object's property to a function to be called when that property is looked up.\n\n## [Syntax](#syntax)\n\n```\n__defineGetter__(prop, func)\n```\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nA string containing the name of the property that the getter `func` is bound to.\n\n[`func`](#func)\n\nA function to be bound to a lookup of the specified property.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `func` is not a function.\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__defineGetter__()` method. This method allows a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) to be defined on a pre-existing object. This is equivalent to [`Object.defineProperty(obj, prop, { get: func, configurable: true, enumerable: true })`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which means the property is enumerable and configurable, and any existing setter, if present, is preserved.\n\n`__defineGetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__defineGetter__()`, it also needs to implement the [`__lookupGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__lookupSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), and [`__defineSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## [Examples](#examples)\n\n### [Using \\_\\_defineGetter\\_\\_()](#using___definegetter)\n\n```\nconst o = {};\no.__defineGetter__(\"gimmeFive\", function () {\n  return 5;\n});\nconsole.log(o.gimmeFive); // 5\n```\n\n### [Defining a getter property in standard ways](#defining_a_getter_property_in_standard_ways)\n\nYou can use the `get` syntax to define a getter when the object is first initialized.\n\n```\nconst o = {\n  get gimmeFive() {\n    return 5;\n  },\n};\nconsole.log(o.gimmeFive); // 5\n```\n\nYou may also use [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) to define a getter on an object after it's been created. Compared to `__defineGetter__()`, this method allows you to control the getter's enumerability and configurability, as well as defining [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.defineProperty()` method also works with [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__defineGetter__()` method.\n\n```\nconst o = {};\nObject.defineProperty(o, \"gimmeFive\", {\n  get() {\n    return 5;\n  },\n  configurable: true,\n  enumerable: true,\n});\nconsole.log(o.gimmeFive); // 5\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.\\_\\_defineGetter\\_\\_](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-object.prototype.__defineGetter__) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.__defineGetter__() - JavaScript | MDN",
    "description": "The __defineGetter__() method of Object instances binds an object's property to a function to be called when that property is looked up.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__",
    "markdown": "# Object.prototype.\\_\\_defineSetter\\_\\_() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** This feature is deprecated in favor of defining [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) using the [object initializer syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) or the [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__defineSetter__()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances binds an object's property to a function to be called when an attempt is made to set that property.\n\n## [Syntax](#syntax)\n\n```\n__defineSetter__(prop, func)\n```\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nA string containing the name of the property that the setter `func` is bound to.\n\n[`func`](#func)\n\nA function to be called when there is an attempt to set the specified property. This function receives the following parameter:\n\n[`val`](#val)\n\nThe value attempted to be assigned to `prop`.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `func` is not a function.\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__defineSetter__()` method. This method allows a [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) to be defined on a pre-existing object. This is equivalent to [`Object.defineProperty(obj, prop, { set: func, configurable: true, enumerable: true })`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which means the property is enumerable and configurable, and any existing getter, if present, is preserved.\n\n`__defineSetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__defineSetter__()`, it also needs to implement the [`__lookupGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__lookupSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), and [`__defineGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__) methods.\n\n## [Examples](#examples)\n\n### [Using \\_\\_defineSetter\\_\\_()](#using___definesetter)\n\n```\nconst o = {};\no.__defineSetter__(\"value\", function (val) {\n  this.anotherValue = val;\n});\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\n### [Defining a setter property in standard ways](#defining_a_setter_property_in_standard_ways)\n\nYou can use the `set` syntax to define a setter when the object is first initialized.\n\n```\nconst o = {\n  set value(val) {\n    this.anotherValue = val;\n  },\n};\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\nYou may also use [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) to define a setter on an object after it's been created. Compared to `__defineSetter__()`, this method allows you to control the setter's enumerability and configurability, as well as defining [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.defineProperty()` method also works with [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__defineSetter__()` method.\n\n```\nconst o = {};\nObject.defineProperty(o, \"value\", {\n  set(val) {\n    this.anotherValue = val;\n  },\n  configurable: true,\n  enumerable: true,\n});\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.\\_\\_defineSetter\\_\\_](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-object.prototype.__defineSetter__) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.__defineSetter__() - JavaScript | MDN",
    "description": "The __defineSetter__() method of Object instances binds an object's property to a function to be called when an attempt is made to set that property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__",
    "markdown": "# Object.prototype.\\_\\_lookupGetter\\_\\_() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** This feature is deprecated in favor of the [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__lookupGetter__()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns the function bound as a getter to the specified property.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nA string containing the name of the property whose getter should be returned.\n\n### [Return value](#return_value)\n\nThe function bound as a getter to the specified property. Returns `undefined` if no such property is found, or the property is a [data property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#data_property).\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__lookupGetter__()` method. If a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. `__lookupGetter__()` can be used to obtain a reference to the getter function.\n\n`__lookupGetter__()` walks up the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) to find the specified property. If any object along the prototype chain has the specified [own property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn), the `get` attribute of the [property descriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) for that property is returned. If that property is a data property, `undefined` is returned. If the property is not found along the entire prototype chain, `undefined` is also returned.\n\n`__lookupGetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__lookupGetter__()`, it also needs to implement the [`__lookupSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), [`__defineGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), and [`__defineSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## [Examples](#examples)\n\n### [Using \\_\\_lookupGetter\\_\\_()](#using___lookupgetter)\n\n```\nconst obj = {\n  get foo() {\n    return Math.random() > 0.5 ? \"foo\" : \"bar\";\n  },\n};\n\nobj.__lookupGetter__(\"foo\");\n// [Function: get foo]\n```\n\n### [Looking up a property's getter in the standard way](#looking_up_a_propertys_getter_in_the_standard_way)\n\nYou should use the [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) API to look up a property's getter. Compared to `__lookupGetter__()`, this method allows looking up [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.getOwnPropertyDescriptor()` method also works with [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__lookupGetter__()` method. If `__lookupGetter__()`'s behavior of walking up the prototype chain is important, you may implement it yourself with [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf).\n\n```\nconst obj = {\n  get foo() {\n    return Math.random() > 0.5 ? \"foo\" : \"bar\";\n  },\n};\n\nObject.getOwnPropertyDescriptor(obj, \"foo\").get;\n// [Function: get foo]\n```\n\n```\nconst obj2 = {\n  __proto__: {\n    get foo() {\n      return Math.random() > 0.5 ? \"foo\" : \"bar\";\n    },\n  },\n};\n\nfunction findGetter(obj, prop) {\n  while (obj) {\n    const desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (desc) {\n      return desc.get;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\n\nconsole.log(findGetter(obj2, \"foo\")); // [Function: get foo]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.\\_\\_lookupGetter\\_\\_](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-object.prototype.__lookupGetter__) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.__lookupGetter__() - JavaScript | MDN",
    "description": "The __lookupGetter__() method of Object instances returns the function bound as a getter to the specified property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",
    "markdown": "# Promise() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise()`** constructor creates [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) objects. It is primarily used to wrap callback-based APIs that do not already support promises.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n**Note:** `Promise()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`executor`](#executor)\n\nA [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) to be executed by the constructor. It receives two functions as parameters: `resolveFunc` and `rejectFunc`. Any errors thrown in the `executor` will cause the promise to be rejected, and the return value will be neglected. The semantics of `executor` are detailed below.\n\n### [Return value](#return_value)\n\nWhen called via `new`, the `Promise` constructor returns a promise object. The promise object will become _resolved_ when either of the functions `resolveFunc` or `rejectFunc` are invoked. Note that if you call `resolveFunc` or `rejectFunc` and pass another `Promise` object as an argument, it can be said to be \"resolved\", but still not \"settled\". See the [Promise description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#description) for more explanation.\n\n## [Description](#description)\n\nTraditionally (before promises), asynchronous tasks were designed as callbacks.\n\n```\nreadFile(\"./data.txt\", (error, result) => {\n  // This callback will be called when the task is done, with the\n  // final `error` or `result`. Any operation dependent on the\n  // result must be defined within this callback.\n});\n// Code here is immediately executed after the `readFile` request\n// is fired. It does not wait for the callback to be called, hence\n// making `readFile` \"asynchronous\".\n```\n\nTo take advantage of the readability improvement and language features offered by promises, the `Promise()` constructor allows one to transform the callback-based API to a promise-based one.\n\n**Note:** If your task is already promise-based, you likely do not need the `Promise()` constructor.\n\nThe `executor` is custom code that ties an outcome in a callback to a promise. You, the programmer, write the `executor`. Its signature is expected to be:\n\n```\nfunction executor(resolveFunc, rejectFunc) {\n  // Typically, some asynchronous operation that accepts a callback,\n  // like the `readFile` function above\n}\n```\n\n`resolveFunc` and `rejectFunc` are also functions, and you can give them whatever actual names you want. Their signatures are simple: they accept a single parameter of any type.\n\n```\nresolveFunc(value); // call on resolved\nrejectFunc(reason); // call on rejected\n```\n\nThe `value` parameter passed to `resolveFunc` can be another promise object, in which case the newly constructed promise's state will be \"locked in\" to the promise passed (as part of the [resolution](#the_resolve_function) promise). The `rejectFunc` has semantics close to the [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement, so `reason` is typically an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance. If either `value` or `reason` is omitted, the promise is fulfilled/rejected with `undefined`.\n\nThe `executor`'s completion state has limited effect on the promise's state:\n\n*   The `executor` return value is ignored. `return` statements within the `executor` merely impact control flow and alter whether a part of the function is executed, but do not have any impact on the promise's fulfillment value. If `executor` exits and it's impossible for `resolveFunc` or `rejectFunc` to be called in the future (for example, there are no async tasks scheduled), then the promise remains pending forever.\n*   If an error is thrown in the `executor`, the promise is rejected, unless `resolveFunc` or `rejectFunc` has already been called.\n\n**Note:** The existence of pending promises does not prevent the program from exiting. If the event loop is empty, the program exits despite any pending promises (because those are necessarily forever-pending).\n\nHere's a summary of the typical flow:\n\n1.  At the time when the constructor generates the new `Promise` object, it also generates a corresponding pair of functions for `resolveFunc` and `rejectFunc`; these are \"tethered\" to the `Promise` object.\n2.  `executor` typically wraps some asynchronous operation which provides a callback-based API. The callback (the one passed to the original callback-based API) is defined within the `executor` code, so it has access to the `resolveFunc` and `rejectFunc`.\n3.  The `executor` is called synchronously (as soon as the `Promise` is constructed) with the `resolveFunc` and `rejectFunc` functions as arguments.\n4.  The code within the `executor` has the opportunity to perform some operation. The eventual completion of the asynchronous task is communicated with the promise instance via the side effect caused by `resolveFunc` or `rejectFunc`. The side effect is that the `Promise` object becomes \"resolved\".\n    *   If `resolveFunc` is called first, the value passed will be [resolved](#the_resolve_function). The promise may stay pending (in case another [thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) is passed), become fulfilled (in most cases where a non-thenable value is passed), or become rejected (in case of an invalid resolution value).\n    *   If `rejectFunc` is called first, the promise instantly becomes rejected.\n    *   Once one of the resolving functions (`resolveFunc` or `rejectFunc`) is called, the promise stays resolved. Only the first call to `resolveFunc` or `rejectFunc` affects the promise's eventual state, and subsequent calls to either function can neither change the fulfillment value/rejection reason nor toggle its eventual state from \"fulfilled\" to \"rejected\" or opposite.\n    *   If `executor` exits by throwing an error, then the promise is rejected. However, the error is ignored if one of the resolving functions has already been called (so that the promise is already resolved).\n    *   Resolving the promise does not necessarily cause the promise to become fulfilled or rejected (i.e. settled). The promise may still be pending because it's resolved with another thenable, but its eventual state will match that of the resolved thenable.\n5.  Once the promise settles, it (asynchronously) invokes any further handlers associated through [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), or [`finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally). The eventual fulfillment value or rejection reason is passed to the invocation of fulfillment and rejection handlers as an input parameter (see [Chained Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#chained_promises)).\n\nFor example, the callback-based `readFile` API above can be transformed into a promise-based one.\n\n```\nconst readFilePromise = (path) =>\n  new Promise((resolve, reject) => {\n    readFile(path, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n\nreadFilePromise(\"./data.txt\")\n  .then((result) => console.log(result))\n  .catch((error) => console.error(\"Failed to read data\"));\n```\n\nThe `resolve` and `reject` callbacks are only available within the scope of the executor function, which means you can't access them after the promise is constructed. If you want to construct the promise before deciding how to resolve it, you can use the [`Promise.withResolvers()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers) method instead, which exposes the `resolve` and `reject` functions.\n\n### [The resolve function](#the_resolve_function)\n\nThe `resolve` function has the following behaviors:\n\n*   If it's called with the same value as the newly created promise (the promise it's \"tethered to\"), the promise is rejected with a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   If it's called with a non-[thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) value (a primitive, or an object whose `then` property is not callable, including when the property is not present), the promise is immediately fulfilled with that value.\n*   If it's called with a thenable value (including another `Promise` instance), then the thenable's `then` method is saved and called in the future (it's always called asynchronously). The `then` method will be called with two callbacks, which are two new functions with the exact same behaviors as the `resolveFunc` and `rejectFunc` passed to the `executor` function. If calling the `then` method throws, then the current promise is rejected with the thrown error.\n\nIn the last case, it means code like:\n\n```\nnew Promise((resolve, reject) => {\n  resolve(thenable);\n});\n```\n\nIs roughly equivalent to:\n\n```\nnew Promise((resolve, reject) => {\n  try {\n    thenable.then(\n      (value) => resolve(value),\n      (reason) => reject(reason),\n    );\n  } catch (e) {\n    reject(e);\n  }\n});\n```\n\nExcept that in the `resolve(thenable)` case:\n\n1.  `resolve` is called synchronously, so that calling `resolve` or `reject` again has no effect, even when the handlers attached through `anotherPromise.then()` are not called yet.\n2.  The `then` method is called asynchronously, so that the promise will never be instantly resolved if a thenable is passed.\n\nBecause `resolve` is called again with whatever `thenable.then()` passes to it as `value`, the resolver function is able to flatten nested thenables, where a thenable calls its `onFulfilled` handler with another thenable. The effect is that the fulfillment handler of a real promise will never receive a thenable as its fulfillment value.\n\n## [Examples](#examples)\n\n### [Turning a callback-based API into a promise-based one](#turning_a_callback-based_api_into_a_promise-based_one)\n\nTo provide a function with promise functionality, have it return a promise by calling the `resolve` and `reject` functions at the correct times.\n\n```\nfunction myAsyncFunction(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url);\n    xhr.onload = () => resolve(xhr.responseText);\n    xhr.onerror = () => reject(xhr.statusText);\n    xhr.send();\n  });\n}\n```\n\n### [Effect of calling resolveFunc](#effect_of_calling_resolvefunc)\n\nCalling `resolveFunc` causes the promise to become resolved, so that calling `resolveFunc` or `rejectFunc` again has no effect. However, the promise may be in any of the states: pending, fulfilled, or rejected.\n\nThis `pendingResolved` promise is resolved the time it's created, because it has already been \"locked in\" to match the eventual state of the inner promise, and calling `resolveOuter` or `rejectOuter` or throwing an error later in the executor has no effect on its eventual state. However, the inner promise is still pending until 100ms later, so the outer promise is also pending:\n\n```\nconst pendingResolved = new Promise((resolveOuter, rejectOuter) => {\n  resolveOuter(\n    new Promise((resolveInner) => {\n      setTimeout(() => {\n        resolveInner(\"inner\");\n      }, 100);\n    }),\n  );\n});\n```\n\nThis `fulfilledResolved` promise becomes fulfilled the moment it's resolved, because it's resolved with a non-thenable value. However, when it's created, it's unresolved, because neither `resolve` nor `reject` has been called yet. An unresolved promise is necessarily pending:\n\n```\nconst fulfilledResolved = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"outer\");\n  }, 100);\n});\n```\n\nCalling `rejectFunc` obviously causes the promise to reject. However, there are also two ways to cause the promise to instantly become rejected even when the `resolveFunc` callback is called.\n\n```\n// 1. Resolving with the promise itself\nconst rejectedResolved1 = new Promise((resolve) => {\n  // Note: resolve has to be called asynchronously,\n  // so that the rejectedResolved1 variable is initialized\n  setTimeout(() => resolve(rejectedResolved1)); // TypeError: Chaining cycle detected for promise #<Promise>\n});\n\n// 2. Resolving with an object which throws when accessing the `then` property\nconst rejectedResolved2 = new Promise((resolve) => {\n  resolve({\n    get then() {\n      throw new Error(\"Can't get then property\");\n    },\n  });\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise-constructor](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Promise() constructor - JavaScript | MDN",
    "description": "The Promise() constructor creates Promise objects. It is primarily used to wrap callback-based APIs that do not already support promises.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries",
    "markdown": "# Object.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.entries()`** static method returns an array of a given object's own enumerable string-keyed property key-value pairs.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nAn array of the given object's own enumerable string-keyed property key-value pairs. Each key-value pair is an array with two elements: the first element is the property key (which is always a string), and the second element is the property value.\n\n## [Description](#description)\n\n`Object.entries()` returns an array whose elements are arrays corresponding to the enumerable string-keyed property key-value pairs found directly upon `object`. This is the same as iterating with a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.entries()` is the same as that provided by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\nIf you only need the property keys, use [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) instead. If you only need the property values, use [`Object.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) instead.\n\n## [Examples](#examples)\n\n### [Using Object.entries()](#using_object.entries)\n\n```\nconst obj = { foo: \"bar\", baz: 42 };\nconsole.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]\n\nconst arrayLike = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.entries(arrayLike)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\n\nconst randomKeyOrder = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.entries(randomKeyOrder)); // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = \"bar\";\nconsole.log(Object.entries(myObj)); // [ ['foo', 'bar'] ]\n```\n\n### [Using Object.entries() on primitives](#using_object.entries_on_primitives)\n\nNon-object arguments are [coerced to objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```\n// Strings have indices as enumerable own properties\nconsole.log(Object.entries(\"foo\")); // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.entries(100)); // []\n```\n\n### [Converting an Object to a Map](#converting_an_object_to_a_map)\n\nThe [`Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) constructor accepts an iterable of `entries`. With `Object.entries`, you can easily convert from [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) to [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map):\n\n```\nconst obj = { foo: \"bar\", baz: 42 };\nconst map = new Map(Object.entries(obj));\nconsole.log(map); // Map(2) {\"foo\" => \"bar\", \"baz\" => 42}\n```\n\n### [Iterating through an Object](#iterating_through_an_object)\n\nUsing [array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#array_destructuring), you can iterate through objects easily.\n\n```\n// Using for...of loop\nconst obj = { a: 5, b: 7, c: 9 };\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n}\n\n// Using array methods\nObject.entries(obj).forEach(([key, value]) => {\n  console.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.entries](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.entries() - JavaScript | MDN",
    "description": "The Object.entries() static method returns an array of a given object's own enumerable string-keyed property key-value pairs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__",
    "markdown": "# Object.prototype.\\_\\_lookupSetter\\_\\_() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** This feature is deprecated in favor of the [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__lookupSetter__()`** method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) instances returns the function bound as a setter to the specified property.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nA string containing the name of the property whose setter should be returned.\n\n### [Return value](#return_value)\n\nThe function bound as a setter to the specified property. Returns `undefined` if no such property is found, or the property is a [data property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#data_property).\n\n## [Description](#description)\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__lookupSetter__()` method. If a [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) has been defined for an object's property, it's not possible to reference the setter function through that property, because that property only calls the function when it's being set. `__lookupSetter__()` can be used to obtain a reference to the setter function.\n\n`__lookupSetter__()` walks up the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) to find the specified property. If any object along the prototype chain has the specified [own property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn), the `set` attribute of the [property descriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) for that property is returned. If that property is a data property, `undefined` is returned. If the property is not found along the entire prototype chain, `undefined` is also returned.\n\n`__lookupSetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__lookupSetter__()`, it also needs to implement the [`__lookupGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__defineGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), and [`__defineSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## [Examples](#examples)\n\n### [Using \\_\\_lookupSetter\\_\\_()](#using___lookupsetter)\n\n```\nconst obj = {\n  set foo(value) {\n    this.bar = value;\n  },\n};\n\nobj.__lookupSetter__(\"foo\");\n// [Function: set foo]\n```\n\n### [Looking up a property's setter in the standard way](#looking_up_a_propertys_setter_in_the_standard_way)\n\nYou should use the [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) API to look up a property's setter. Compared to `__lookupSetter__()`, this method allows looking up [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.getOwnPropertyDescriptor()` method also works with [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__lookupSetter__()` method. If `__lookupSetter__()`'s behavior of walking up the prototype chain is important, you may implement it yourself with [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf).\n\n```\nconst obj = {\n  set foo(value) {\n    this.bar = value;\n  },\n};\n\nObject.getOwnPropertyDescriptor(obj, \"foo\").set;\n// [Function: set foo]\n```\n\n```\nconst obj2 = {\n  __proto__: {\n    set foo(value) {\n      this.bar = value;\n    },\n  },\n};\n\nfunction findSetter(obj, prop) {\n  while (obj) {\n    const desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (desc) {\n      return desc.set;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\n\nconsole.log(findSetter(obj2, \"foo\")); // [Function: set foo]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.prototype.\\_\\_lookupSetter\\_\\_](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-object.prototype.__lookupSetter__) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object.prototype.__lookupSetter__() - JavaScript | MDN",
    "description": "The __lookupSetter__() method of Object instances returns the function bound as a setter to the specified property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",
    "markdown": "# Promise.resolve() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.resolve()`** static method \"resolves\" a given value to a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). If the value is a promise, that promise is returned; if the value is a [thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables), `Promise.resolve()` will call the `then()` method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.\n\nThis function flattens nested layers of promise-like objects (e.g. a promise that fulfills to a promise that fulfills to something) into a single layer — a promise that fulfills to a non-thenable value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nArgument to be resolved by this `Promise`. Can also be a `Promise` or a thenable to resolve.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that is resolved with the given value, or the promise passed as value, if the value was a promise object. A resolved promise can be in any of the states — fulfilled, rejected, or pending. For example, resolving a rejected promise will still result in a rejected promise.\n\n## [Description](#description)\n\n`Promise.resolve()` _resolves_ a promise, which is not the same as fulfilling or rejecting the promise. See [Promise description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#description) for definitions of the terminology. In brief, `Promise.resolve()` returns a promise whose eventual state depends on another promise, thenable object, or other value.\n\n`Promise.resolve()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters.\n\n`Promise.resolve()` special-cases native `Promise` instances. If `value` belongs to `Promise` or a subclass, and `value.constructor === Promise`, then `value` is directly returned by `Promise.resolve()`, without creating a new `Promise` instance. Otherwise, `Promise.resolve()` is essentially a shorthand for `new Promise((resolve) => resolve(value))`.\n\nThe bulk of the resolving logic is actually implemented by [the `resolve` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function) passed by the `Promise()` constructor. In summary:\n\n*   If a non-[thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) value is passed, the returned promise is already fulfilled with that value.\n*   If a thenable is passed, the returned promise will adopt the state of that thenable by calling the `then` method and passing a pair of resolving functions as arguments. (But because native promises directly pass through `Promise.resolve()` without creating a wrapper, the `then` method is not called on native promises.) If the `resolve` function receives another thenable object, it will be resolved again, so that the eventual fulfillment value of the promise will never be thenable.\n\n## [Examples](#examples)\n\n### [Using the static Promise.resolve method](#using_the_static_promise.resolve_method)\n\n```\nPromise.resolve(\"Success\").then(\n  (value) => {\n    console.log(value); // \"Success\"\n  },\n  (reason) => {\n    // not called\n  },\n);\n```\n\n### [Resolving an array](#resolving_an_array)\n\n```\nconst p = Promise.resolve([1, 2, 3]);\np.then((v) => {\n  console.log(v[0]); // 1\n});\n```\n\n### [Resolving another Promise](#resolving_another_promise)\n\n`Promise.resolve()` reuses existing `Promise` instances. If it's resolving a native promise, it returns the same promise instance without creating a wrapper.\n\n```\nconst original = Promise.resolve(33);\nconst cast = Promise.resolve(original);\ncast.then((value) => {\n  console.log(`value: ${value}`);\n});\nconsole.log(`original === cast ? ${original === cast}`);\n\n// Logs, in order:\n// original === cast ? true\n// value: 33\n```\n\nThe inverted order of the logs is due to the fact that the `then` handlers are called asynchronously. See the [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) reference for more information.\n\n### [Resolving thenables and throwing Errors](#resolving_thenables_and_throwing_errors)\n\n```\n// Resolving a thenable object\nconst p1 = Promise.resolve({\n  then(onFulfill, onReject) {\n    onFulfill(\"fulfilled!\");\n  },\n});\nconsole.log(p1 instanceof Promise); // true, object casted to a Promise\n\np1.then(\n  (v) => {\n    console.log(v); // \"fulfilled!\"\n  },\n  (e) => {\n    // not called\n  },\n);\n\n// Thenable throws\n// Promise rejects\nconst p2 = Promise.resolve({\n  then() {\n    throw new TypeError(\"Throwing\");\n  },\n});\np2.then(\n  (v) => {\n    // not called\n  },\n  (e) => {\n    console.error(e); // TypeError: Throwing\n  },\n);\n\n// Thenable throws after callback\n// Promise resolves\nconst p3 = Promise.resolve({\n  then(onFulfilled) {\n    onFulfilled(\"Resolving\");\n    throw new TypeError(\"Throwing\");\n  },\n});\np3.then(\n  (v) => {\n    console.log(v); // \"Resolving\"\n  },\n  (e) => {\n    // not called\n  },\n);\n```\n\nNested thenables will be \"deeply flattened\" to a single promise.\n\n```\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve(thenable).then((v) => {\n  console.log(v); // 42\n});\n```\n\n**Warning:** Do not call `Promise.resolve()` on a thenable that resolves to itself. That leads to infinite recursion, because it attempts to flatten an infinitely-nested promise.\n\n```\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled(thenable);\n  },\n};\n\nPromise.resolve(thenable); // Will lead to infinite recursion.\n```\n\n### [Calling resolve() on a non-Promise constructor](#calling_resolve_on_a_non-promise_constructor)\n\n`Promise.resolve()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes it `console.log` as `resolve`:\n\n```\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the\n    // native promise's, but Promise.resolve() calls them in the same way.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nPromise.resolve.call(NotPromise, \"foo\"); // Logs \"Resolved foo\"\n```\n\nThe ability to flatten nested thenables is implemented by the `resolve` function of the `Promise()` constructor, so if you call it on another constructor, nested thenables may not be flattened, depending on how that constructor implements its `resolve` function.\n\n```\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve.call(NotPromise, thenable); // Logs \"Resolved { then: [Function: then] }\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.resolve](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.resolve) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Promise.resolve() - JavaScript | MDN",
    "description": "The Promise.resolve() static method \"resolves\" a given value to a Promise. If the value is a promise, that promise is returned; if the value is a thenable, Promise.resolve() will call the then() method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",
    "markdown": "# Promise.prototype.catch() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`catch()`** method of [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) instances schedules a function to be called when the promise is rejected. It immediately returns another [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object, allowing you to [chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods. It is a shortcut for [`Promise.prototype.then(undefined, onRejected)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npromiseInstance.catch(onRejected)\n```\n\n### [Parameters](#parameters)\n\n[`onRejected`](#onrejected)\n\nA function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by `catch()`. The function is called with the following arguments:\n\n[`reason`](#reason)\n\nThe value that the promise was rejected with.\n\n### [Return value](#return_value)\n\nReturns a new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). This new promise is always pending when returned, regardless of the current promise's status. If `onRejected` is called, the returned promise will resolve based on the return value of this call, or reject with the thrown error from this call. If the current promise fulfills, `onRejected` is not called and the returned promise fulfills to the same value.\n\n## [Description](#description)\n\nThe `catch` method is used for error handling in promise composition. Since it returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), it [can be chained](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining_after_a_catch) in the same way as its sister method, [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then).\n\nIf a promise becomes rejected, and there are no rejection handlers to call (a handler can be attached through any of [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), or [`finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally)), then the rejection event is surfaced by the host. In the browser, this results in an [`unhandledrejection`](https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event) event. If a handler is attached to a rejected promise whose rejection has already caused an unhandled rejection event, then another [`rejectionhandled`](https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event) event is fired.\n\n`catch()` internally calls `then()` on the object upon which it was called, passing `undefined` and `onRejected` as arguments. The value of that call is directly returned. This is observable if you wrap the methods.\n\n```\n// overriding original Promise.prototype.then/catch just to add some logs\n((Promise) => {\n  const originalThen = Promise.prototype.then;\n  const originalCatch = Promise.prototype.catch;\n\n  Promise.prototype.then = function (...args) {\n    console.log(\"Called .then on %o with arguments: %o\", this, args);\n    return originalThen.apply(this, args);\n  };\n  Promise.prototype.catch = function (...args) {\n    console.error(\"Called .catch on %o with arguments: %o\", this, args);\n    return originalCatch.apply(this, args);\n  };\n})(Promise);\n\n// calling catch on an already resolved promise\nPromise.resolve().catch(function XXX() {});\n\n// Logs:\n// Called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()]\n// Called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()]\n```\n\nThis means that passing `undefined` still causes the returned promise to be rejected, and you have to pass a function to prevent the final promise from being rejected.\n\nBecause `catch()` just calls `then()`, it supports subclassing.\n\n**Note:** The examples below are throwing instances of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error). As with synchronous [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) statements, this is considered a good practice; otherwise, the part doing the catching would have to perform checks to see if the argument was a string or an error, and you might lose valuable information such as stack traces.\n\n## [Examples](#examples)\n\n### [Using and chaining the catch() method](#using_and_chaining_the_catch_method)\n\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve(\"Success\");\n});\n\np1.then((value) => {\n  console.log(value); // \"Success!\"\n  throw new Error(\"oh, no!\");\n})\n  .catch((e) => {\n    console.error(e.message); // \"oh, no!\"\n  })\n  .then(\n    () => console.log(\"after a catch the chain is restored\"), // \"after a catch the chain is restored\"\n    () => console.log(\"Not fired due to the catch\"),\n  );\n\n// The following behaves the same as above\np1.then((value) => {\n  console.log(value); // \"Success!\"\n  return Promise.reject(\"oh, no!\");\n})\n  .catch((e) => {\n    console.error(e); // \"oh, no!\"\n  })\n  .then(\n    () => console.log(\"after a catch the chain is restored\"), // \"after a catch the chain is restored\"\n    () => console.log(\"Not fired due to the catch\"),\n  );\n```\n\n### [Gotchas when throwing errors](#gotchas_when_throwing_errors)\n\nThrowing an error will call the `catch()` method most of the time:\n\n```\nconst p1 = new Promise((resolve, reject) => {\n  throw new Error(\"Uh-oh!\");\n});\n\np1.catch((e) => {\n  console.error(e); // \"Uh-oh!\"\n});\n```\n\nErrors thrown inside asynchronous functions will act like uncaught errors:\n\n```\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    throw new Error(\"Uncaught Exception!\");\n  }, 1000);\n});\n\np2.catch((e) => {\n  console.error(e); // This is never called\n});\n```\n\nErrors thrown after `resolve` is called will be silenced:\n\n```\nconst p3 = new Promise((resolve, reject) => {\n  resolve();\n  throw new Error(\"Silenced Exception!\");\n});\n\np3.catch((e) => {\n  console.error(e); // This is never called\n});\n```\n\n### [catch() is not called if the promise is fulfilled](#catch_is_not_called_if_the_promise_is_fulfilled)\n\n```\n// Create a promise which would not call onReject\nconst p1 = Promise.resolve(\"calling next\");\n\nconst p2 = p1.catch((reason) => {\n  // This is never called\n  console.error(\"catch p1!\");\n  console.error(reason);\n});\n\np2.then(\n  (value) => {\n    console.log(\"next promise's onFulfilled\");\n    console.log(value); // calling next\n  },\n  (reason) => {\n    console.log(\"next promise's onRejected\");\n    console.log(reason);\n  },\n);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.prototype.catch](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.prototype.catch) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Promise.prototype.catch() - JavaScript | MDN",
    "description": "The catch() method of Promise instances schedules a function to be called when the promise is rejected. It immediately returns another Promise object, allowing you to chain calls to other promise methods. It is a shortcut for Promise.prototype.then(undefined, onRejected).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc",
    "markdown": "# Math.trunc() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.trunc()`** static method returns the integer part of a number by removing any fractional digits.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe integer part of `x`.\n\n## [Description](#description)\n\nUnlike the other three `Math` methods: [`Math.floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor), [`Math.ceil()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil) and [`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round), the way `Math.trunc()` works is very simple. It _truncates_ (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number.\n\nBecause `trunc()` is a static method of `Math`, you always use it as `Math.trunc()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.trunc()](#using_math.trunc)\n\n```\nMath.trunc(-Infinity); // -Infinity\nMath.trunc(\"-1.123\"); // -1\nMath.trunc(-0.123); // -0\nMath.trunc(-0); // -0\nMath.trunc(0); // 0\nMath.trunc(0.123); // 0\nMath.trunc(13.37); // 13\nMath.trunc(42.84); // 42\nMath.trunc(Infinity); // Infinity\n```\n\n### [Using bitwise no-ops to truncate numbers](#using_bitwise_no-ops_to_truncate_numbers)\n\n**Warning:** This is not a polyfill for `Math.trunc()` because of non-negligible edge cases.\n\nBitwise operations convert their operands to 32-bit integers, which people have historically taken advantage of to truncate float-point numbers. Common techniques include:\n\n```\nconst original = 3.14;\nconst truncated1 = ~~original; // Double negation\nconst truncated2 = original & -1; // Bitwise AND with -1\nconst truncated3 = original | 0; // Bitwise OR with 0\nconst truncated4 = original ^ 0; // Bitwise XOR with 0\nconst truncated5 = original >> 0; // Bitwise shifting by 0\n```\n\nBeware that this is essentially `toInt32`, which is not the same as `Math.trunc`. When the value does not satisfy -231 - 1 < `value` < 231 (-2147483649 < `value` < 2147483648), the conversion would overflow.\n\n```\nconst a = ~~2147483648; // -2147483648\nconst b = ~~-2147483649; // 2147483647\nconst c = ~~4294967296; // 0\n```\n\nOnly use `~~` as a substitution for `Math.trunc()` when you are confident that the range of input falls within the range of 32-bit integers.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.trunc](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.trunc) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.trunc() - JavaScript | MDN",
    "description": "The Math.trunc() static method returns the integer part of a number by removing any fractional digits.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",
    "markdown": "# String.prototype.match() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`match()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values retrieves the result of matching this string against a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`regexp`](#regexp)\n\nA regular expression object, or any object that has a [`Symbol.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match) method.\n\nIf `regexp` is not a `RegExp` object and does not have a `Symbol.match` method, it is implicitly converted to a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) by using `new RegExp(regexp)`.\n\nIf you don't give any parameter and use the `match()` method directly, you will get an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) with an empty string: `[\"\"]`, because this is equivalent to `match(/(?:)/)`.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) whose contents depend on the presence or absence of the global (`g`) flag, or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) if no matches are found.\n\n*   If the `g` flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.\n*   If the `g` flag is not used, only the first complete match and its related capturing groups are returned. In this case, `match()` will return the same result as [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) (an array with some extra properties).\n\n## [Description](#description)\n\nThe implementation of `String.prototype.match` itself is very simple — it simply calls the `Symbol.match` method of the argument with the string as the first parameter. The actual implementation comes from [`RegExp.prototype[@@match]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match).\n\n*   If you need to know if a string matches a regular expression [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), use [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test).\n*   If you only want the first match found, you might want to use [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) instead.\n*   If you want to obtain capture groups and the global flag is set, you need to use [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) or [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) instead.\n\nFor more information about the semantics of `match()` when a regex is passed, see [`RegExp.prototype[@@match]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match).\n\n## [Examples](#examples)\n\n### [Using match()](#using_match)\n\nIn the following example, `match()` is used to find `\"Chapter\"` followed by one or more numeric characters followed by a decimal point and numeric character zero or more times.\n\nThe regular expression includes the `i` flag so that upper/lower case differences will be ignored.\n\n```\nconst str = \"For more information, see Chapter 3.4.5.1\";\nconst re = /see (chapter \\d+(\\.\\d)*)/i;\nconst found = str.match(re);\n\nconsole.log(found);\n// [\n//   'see Chapter 3.4.5.1',\n//   'Chapter 3.4.5.1',\n//   '.1',\n//   index: 22,\n//   input: 'For more information, see Chapter 3.4.5.1',\n//   groups: undefined\n// ]\n```\n\nIn the match result above, `'see Chapter 3.4.5.1'` is the whole match. `'Chapter 3.4.5.1'` was captured by `(chapter \\d+(\\.\\d)*)`. `'.1'` was the last value captured by `(\\.\\d)`. The `index` property (`22`) is the zero-based index of the whole match. The `input` property is the original string that was parsed.\n\n### [Using global and ignoreCase flags with match()](#using_global_and_ignorecase_flags_with_match)\n\nThe following example demonstrates the use of the global flag and ignore-case flag with `match()`. All letters `A` through `E` and `a` through `e` are returned, each its own element in the array.\n\n```\nconst str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nconst regexp = /[A-E]/gi;\nconst matches = str.match(regexp);\n\nconsole.log(matches);\n// ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\n```\n\n### [Using named capturing groups](#using_named_capturing_groups)\n\nIn browsers which support named capturing groups, the following code captures `\"fox\"` or `\"cat\"` into a group named `animal`:\n\n```\nconst paragraph = \"The quick brown fox jumps over the lazy dog. It barked.\";\n\nconst capturingRegex = /(?<animal>fox|cat) jumps over/;\nconst found = paragraph.match(capturingRegex);\nconsole.log(found.groups); // {animal: \"fox\"}\n```\n\n### [Using match() with no parameter](#using_match_with_no_parameter)\n\n```\nconst str = \"Nothing will come of nothing.\";\n\nstr.match(); // returns [\"\"]\n```\n\n### [Using match() with a non-RegExp implementing @@match](#using_match_with_a_non-regexp_implementing_match)\n\nIf an object has a `Symbol.match` method, it can be used as a custom matcher. The return value of `Symbol.match` becomes the return value of `match()`.\n\n```\nconst str = \"Hmm, this is interesting.\";\n\nstr.match({\n  [Symbol.match](str) {\n    return [\"Yes, it's interesting.\"];\n  },\n}); // returns [\"Yes, it's interesting.\"]\n```\n\n### [A non-RegExp as the parameter](#a_non-regexp_as_the_parameter)\n\nWhen the `regexp` parameter is a string or a number, it is implicitly converted to a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) by using `new RegExp(regexp)`.\n\n```\nconst str1 =\n  \"NaN means not a number. Infinity contains -Infinity and +Infinity in JavaScript.\";\nconst str2 =\n  \"My grandfather is 65 years old and My grandmother is 63 years old.\";\nconst str3 = \"The contract was declared null and void.\";\nstr1.match(\"number\"); // \"number\" is a string. returns [\"number\"]\nstr1.match(NaN); // the type of NaN is the number. returns [\"NaN\"]\nstr1.match(Infinity); // the type of Infinity is the number. returns [\"Infinity\"]\nstr1.match(+Infinity); // returns [\"Infinity\"]\nstr1.match(-Infinity); // returns [\"-Infinity\"]\nstr2.match(65); // returns [\"65\"]\nstr2.match(+65); // A number with a positive sign. returns [\"65\"]\nstr3.match(null); // returns [\"null\"]\n```\n\nThis may have unexpected results if special characters are not properly escaped.\n\n```\nconsole.log(\"123\".match(\"1.3\")); // [ \"123\" ]\n```\n\nThis is a match because `.` in a regex matches any character. In order to make it only match specifically a dot character, you need to escape the input.\n\n```\nconsole.log(\"123\".match(\"1\\\\.3\")); // null\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.match](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.match) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.match() - JavaScript | MDN",
    "description": "The match() method of String values retrieves the result of matching this string against a regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",
    "markdown": "# RegExp.prototype.exec() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`exec()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances executes a search with this regular expression for a match in a specified string and returns a result array, or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nThe string against which to match the regular expression. All values are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `exec()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n### [Return value](#return_value)\n\nIf the match fails, the `exec()` method returns [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), and sets the regex's [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to `0`.\n\nIf the match succeeds, the `exec()` method returns an array and updates the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing group of the matched text. The array also has the following additional properties:\n\n[`index`](#index)\n\nThe 0-based index of the match in the string.\n\n[`input`](#input)\n\nThe original string that was matched against.\n\n[`groups`](#groups)\n\nA [`null`\\-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) of named capturing groups, whose keys are the names, and values are the capturing groups, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if no named capturing groups were defined. See [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) for more information.\n\n[`indices`](#indices) Optional\n\nThis property is only present when the [`d`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) flag is set. It is an array where each entry represents the bounds of a substring match. The index of each element in this array corresponds to the index of the respective substring match in the array returned by `exec()`. In other words, the first `indices` entry represents the entire match, the second `indices` entry represents the first capturing group, etc. Each entry itself is a two-element array, where the first number represents the match's start index, and the second number, its end index.\n\nThe `indices` array additionally has a `groups` property, which holds a [`null`\\-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) of all named capturing groups. The keys are the names of the capturing groups, and each value is a two-element array, with the first number being the start index, and the second number being the end index of the capturing group. If the regular expression doesn't contain any named capturing groups, `groups` is `undefined`.\n\n## [Description](#description)\n\nJavaScript [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) objects are _stateful_ when they have the [global](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) or [sticky](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flags set (e.g. `/foo/g` or `/foo/y`). They store a [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) from the previous match. Using this internally, `exec()` can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n\nWhen using `exec()`, the global flag has no effect when the sticky flag is set — the match is always sticky.\n\n`exec()` is the primitive method of regexps. Many other regexp methods call `exec()` internally — including those called by string methods, like [`@@replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace). While `exec()` itself is powerful (and is the most efficient), it often does not convey the intent most clearly.\n\n*   If you only care whether the regex matches a string, but not what is actually being matched, use [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) instead.\n*   If you are finding all occurrences of a global regex and you don't care about information like capturing groups, use [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) instead. In addition, [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) helps to simplify matching multiple parts of a string (with capture groups) by allowing you to iterate over the matches.\n*   If you are executing a match to find its index position in the string, use the [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) method instead.\n\n## [Examples](#examples)\n\n### [Using exec()](#using_exec)\n\nConsider the following example:\n\n```\n// Match \"quick brown\" followed by \"jumps\", ignoring characters in between\n// Remember \"brown\" and \"jumps\"\n// Ignore case\nconst re = /quick\\s(?<color>brown).+?(jumps)/dgi;\nconst result = re.exec(\"The Quick Brown Fox Jumps Over The Lazy Dog\");\n```\n\nThe following table shows the state of `result` after running this script:\n\n| Property | Value |\n| --- | --- |\n| `[0]` | `\"Quick Brown Fox Jumps\"` |\n| `[1]` | `\"Brown\"` |\n| `[2]` | `\"Jumps\"` |\n| `index` | `4` |\n| `indices` | `[[4, 25], [10, 15], [20, 25]]`  <br>`groups: { color: [10, 15 ]}` |\n| `input` | `\"The Quick Brown Fox Jumps Over The Lazy Dog\"` |\n| `groups` | `{ color: \"brown\" }` |\n\nIn addition, `re.lastIndex` will be set to `25`, due to this regex being global.\n\n### [Finding successive matches](#finding_successive_matches)\n\nIf your regular expression uses the [`g`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) flag, you can use the `exec()` method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of `str` specified by the regular expression's [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property ([`test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) will also advance the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property). Note that the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property will not be reset when searching a different string, it will start its search at its existing [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex).\n\nFor example, assume you have this script:\n\n```\nconst myRe = /ab*/g;\nconst str = \"abbcdefabh\";\nlet myArray;\nwhile ((myArray = myRe.exec(str)) !== null) {\n  let msg = `Found ${myArray[0]}. `;\n  msg += `Next match starts at ${myRe.lastIndex}`;\n  console.log(msg);\n}\n```\n\nThis script displays the following text:\n\nFound abb. Next match starts at 3\nFound ab. Next match starts at 9\n\n**Warning:** There are many pitfalls that can lead to this becoming an infinite loop!\n\n*   Do _not_ place the regular expression literal (or [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) constructor) within the `while` condition — it will recreate the regex for every iteration and reset [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex).\n*   Be sure that the [global (`g`) flag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) is set, or `lastIndex` will never be advanced.\n*   If the regex may match zero-length characters (e.g. `/^/gm`), increase its [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) manually each time to avoid being stuck in the same place.\n\nYou can usually replace this kind of code with [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) to make it less error-prone.\n\n### [Using exec() with RegExp literals](#using_exec_with_regexp_literals)\n\nYou can also use `exec()` without creating a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object explicitly:\n\n```\nconst matches = /(hello \\S+)/.exec(\"This is a hello world!\");\nconsole.log(matches[1]);\n```\n\nThis will log a message containing `'hello world!'`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype.exec](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype.exec) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.exec() - JavaScript | MDN",
    "description": "The exec() method of RegExp instances executes a search with this regular expression for a match in a specified string and returns a result array, or null.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
    "markdown": "# Array.prototype.lastIndexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`lastIndexOf()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at `fromIndex`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nlastIndexOf(searchElement)\nlastIndexOf(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nElement to locate in the array.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching backwards, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used.\n*   If `fromIndex < -array.length`, the array is not searched and `-1` is returned. You can think of it conceptually as starting at a nonexistent position before the beginning of the array and going backwards from there. There are no array elements on the way, so `searchElement` is never found.\n*   If `fromIndex >= array.length` or `fromIndex` is omitted, `array.length - 1` is used, causing the entire array to be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\n\n### [Return value](#return_value)\n\nThe last index of `searchElement` in the array; `-1` if not found.\n\n## [Description](#description)\n\nThe `lastIndexOf()` method compares `searchElement` to elements of the array using [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (the same algorithm used by the `===` operator). [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values are never compared as equal, so `lastIndexOf()` always returns `-1` when `searchElement` is `NaN`.\n\nThe `lastIndexOf()` method skips empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `lastIndexOf()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Using lastIndexOf()](#using_lastindexof)\n\nThe following example uses `lastIndexOf()` to locate values in an array.\n\n```\nconst numbers = [2, 5, 9, 2];\nnumbers.lastIndexOf(2); // 3\nnumbers.lastIndexOf(7); // -1\nnumbers.lastIndexOf(2, 3); // 3\nnumbers.lastIndexOf(2, 2); // 0\nnumbers.lastIndexOf(2, -2); // 0\nnumbers.lastIndexOf(2, -1); // 3\n```\n\nYou cannot use `lastIndexOf()` to search for `NaN`.\n\n```\nconst array = [NaN];\narray.lastIndexOf(NaN); // -1\n```\n\n### [Finding all the occurrences of an element](#finding_all_the_occurrences_of_an_element)\n\nThe following example uses `lastIndexOf` to find all the indices of an element in a given array, using [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) to add them to another array as they are found.\n\n```\nconst indices = [];\nconst array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\nconst element = \"a\";\nlet idx = array.lastIndexOf(element);\nwhile (idx !== -1) {\n  indices.push(idx);\n  idx = idx > 0 ? array.lastIndexOf(element, idx - 1) : -1;\n}\n\nconsole.log(indices);\n// [4, 2, 0]\n```\n\nNote that we have to handle the case `idx === 0` separately here because the element will always be found regardless of the `fromIndex` parameter if it is the first element of the array. This is different from the [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method.\n\n### [Using lastIndexOf() on sparse arrays](#using_lastindexof_on_sparse_arrays)\n\nYou cannot use `lastIndexOf()` to search for empty slots in sparse arrays.\n\n```\nconsole.log([1, , 3].lastIndexOf(undefined)); // -1\n```\n\n### [Calling lastIndexOf() on non-array objects](#calling_lastindexof_on_non-array_objects)\n\nThe `lastIndexOf()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 2,\n  3: 5, // ignored by lastIndexOf() since length is 3\n};\nconsole.log(Array.prototype.lastIndexOf.call(arrayLike, 2));\n// 2\nconsole.log(Array.prototype.lastIndexOf.call(arrayLike, 5));\n// -1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.lastindexof](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.lastIndexOf() - JavaScript | MDN",
    "description": "The lastIndexOf() method of Array instances returns the last index at which\n  a given element can be found in the array, or -1 if it is not present. The array is\n  searched backwards, starting at fromIndex.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",
    "markdown": "# Array.prototype.pop() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`pop()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances removes the **last** element from an array and returns that element. This method changes the length of the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe removed element from the array; [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if the array is empty.\n\n## [Description](#description)\n\nThe `pop()` method removes the last element from an array and returns that value to the caller. If you call `pop()` on an empty array, it returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n[`Array.prototype.shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) has similar behavior to `pop()`, but applied to the first element in an array.\n\nThe `pop()` method is a mutating method. It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with the last element removed, you can use [`arr.slice(0, -1)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) instead.\n\nThe `pop()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Removing the last element of an array](#removing_the_last_element_of_an_array)\n\nThe following code creates the `myFish` array containing four elements, then removes its last element.\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\n\nconst popped = myFish.pop();\n\nconsole.log(myFish); // ['angel', 'clown', 'mandarin' ]\n\nconsole.log(popped); // 'sturgeon'\n```\n\n### [Calling pop() on non-array objects](#calling_pop_on_non-array_objects)\n\nThe `pop()` method reads the `length` property of `this`. If the [normalized length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) is 0, `length` is set to `0` again (whereas it may be negative or `undefined` before). Otherwise, the property at `length - 1` is returned and [deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete).\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.pop.call(arrayLike));\n// 4\nconsole.log(arrayLike);\n// { length: 2, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.pop.call(plainObj);\nconsole.log(plainObj);\n// { length: 0 }\n```\n\n### [Using an object in an array-like fashion](#using_an_object_in_an_array-like_fashion)\n\n`push` and `pop` are intentionally generic, and we can use that to our advantage — as the following example shows.\n\nNote that in this example, we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use `call` on `Array.prototype.push` and `Array.prototype.pop` to trick those methods into thinking we're dealing with an array.\n\n```\nconst collection = {\n  length: 0,\n  addElements(...elements) {\n    // obj.length will be incremented automatically\n    // every time an element is added.\n\n    // Returning what push returns; that is\n    // the new value of length property.\n    return [].push.call(this, ...elements);\n  },\n  removeElement() {\n    // obj.length will be decremented automatically\n    // every time an element is removed.\n\n    // Returning what pop returns; that is\n    // the removed element.\n    return [].pop.call(this);\n  },\n};\n\ncollection.addElements(10, 20, 30);\nconsole.log(collection.length); // 3\ncollection.removeElement();\nconsole.log(collection.length); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.pop](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.pop) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.pop() - JavaScript | MDN",
    "description": "The pop() method of Array instances removes the last\n  element from an array and returns that element. This method changes the length of the\n  array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
    "markdown": "# Array.prototype.push() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`push()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances adds the specified elements to the end of an array and returns the new length of the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npush()\npush(element1)\npush(element1, element2)\npush(element1, element2, /* …, */ elementN)\n```\n\n### [Parameters](#parameters)\n\n[`element1`](#element1), …, `elementN`\n\nThe element(s) to add to the end of the array.\n\n### [Return value](#return_value)\n\nThe new [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property of the object upon which the method was called.\n\n## [Description](#description)\n\nThe `push()` method appends values to an array.\n\n[`Array.prototype.unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) has similar behavior to `push()`, but applied to the start of an array.\n\nThe `push()` method is a [mutating method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with elements appended to the end, you can use [`arr.concat([element0, element1, /* ... ,*/ elementN])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) instead. Notice that the elements are wrapped in an extra array — otherwise, if the element is an array itself, it would be spread instead of pushed as a single element due to the behavior of `concat()`.\n\nThe `push()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Adding elements to an array](#adding_elements_to_an_array)\n\nThe following code creates the `sports` array containing two elements, then appends two elements to it. The `total` variable contains the new length of the array.\n\n```\nconst sports = [\"soccer\", \"baseball\"];\nconst total = sports.push(\"football\", \"swimming\");\n\nconsole.log(sports); // ['soccer', 'baseball', 'football', 'swimming']\nconsole.log(total); // 4\n```\n\n### [Merging two arrays](#merging_two_arrays)\n\nThis example uses [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) to push all elements from a second array into the first one.\n\n```\nconst vegetables = [\"parsnip\", \"potato\"];\nconst moreVegs = [\"celery\", \"beetroot\"];\n\n// Merge the second array into the first one\nvegetables.push(...moreVegs);\n\nconsole.log(vegetables); // ['parsnip', 'potato', 'celery', 'beetroot']\n```\n\nMerging two arrays can also be done with the [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method.\n\n### [Calling push() on non-array objects](#calling_push_on_non-array_objects)\n\nThe `push()` method reads the `length` property of `this`. It then sets each index of `this` starting at `length` with the arguments passed to `push()`. Finally, it sets the `length` to the previous length plus the number of pushed elements.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nArray.prototype.push.call(arrayLike, 1, 2);\nconsole.log(arrayLike);\n// { '2': 4, '3': 1, '4': 2, length: 5, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.push.call(plainObj, 1, 2);\nconsole.log(plainObj);\n// { '0': 1, '1': 2, length: 2 }\n```\n\n### [Using an object in an array-like fashion](#using_an_object_in_an_array-like_fashion)\n\nAs mentioned above, `push` is intentionally generic, and we can use that to our advantage. `Array.prototype.push` can work on an object just fine, as this example shows.\n\nNote that we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use `call` on `Array.prototype.push` to trick the method into thinking we are dealing with an array—and it just works, thanks to the way JavaScript allows us to establish the execution context in any way we want.\n\n```\nconst obj = {\n  length: 0,\n\n  addElem(elem) {\n    // obj.length is automatically incremented\n    // every time an element is added.\n    [].push.call(this, elem);\n  },\n};\n\n// Let's add some empty objects just to illustrate.\nobj.addElem({});\nobj.addElem({});\nconsole.log(obj.length); // 2\n```\n\nNote that although `obj` is not an array, the method `push` successfully incremented `obj`'s `length` property just like if we were dealing with an actual array.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.push](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.push) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.push() - JavaScript | MDN",
    "description": "The push() method of Array instances adds the specified elements to the end of\n  an array and returns the new length of the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize",
    "markdown": "# ArrayBuffer.prototype.resize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`resize()`** method of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances resizes the `ArrayBuffer` to the specified size, in bytes.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`newLength`](#newlength)\n\nThe new length, in bytes, to resize the `ArrayBuffer` to.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `ArrayBuffer` is detached or is not resizable.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `newLength` is larger than the [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) of the `ArrayBuffer`.\n\n## [Description](#description)\n\nThe `resize()` method resizes an `ArrayBuffer` to the size specified by the `newLength` parameter, provided that the `ArrayBuffer` is [resizable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable) and the new size is less than or equal to the [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) of the `ArrayBuffer`. New bytes are initialized to 0.\n\nNote that you can use `resize()` to shrink as well as grow an `ArrayBuffer` — it is permissible for `newLength` to be smaller than the `ArrayBuffer`'s current [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength).\n\n## [Examples](#examples)\n\n### [Using resize()](#using_resize)\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then check its `resizable` property, resizing it if `resizable` returns `true`:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.resizable) {\n  console.log(\"Buffer is resizable!\");\n  buffer.resize(12);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arraybuffer.prototype.resize](https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer.prototype.resize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.resize() - JavaScript | MDN",
    "description": "The resize() method of ArrayBuffer instances resizes the ArrayBuffer to the specified size, in bytes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView",
    "markdown": "# ArrayBuffer.isView() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ArrayBuffer.isView()`** static method determines whether the passed value is one of the `ArrayBuffer` views, such as [typed array objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nArrayBuffer.isView(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be checked.\n\n### [Return value](#return_value)\n\n`true` if the given argument is one of the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) views; otherwise, `false`.\n\n## [Examples](#examples)\n\n### [Using isView](#using_isview)\n\n```\nArrayBuffer.isView(); // false\nArrayBuffer.isView([]); // false\nArrayBuffer.isView({}); // false\nArrayBuffer.isView(null); // false\nArrayBuffer.isView(undefined); // false\nArrayBuffer.isView(new ArrayBuffer(10)); // false\n\nArrayBuffer.isView(new Uint8Array()); // true\nArrayBuffer.isView(new Float32Array()); // true\nArrayBuffer.isView(new Int8Array(10).subarray(0, 3)); // true\n\nconst buffer = new ArrayBuffer(2);\nconst dv = new DataView(buffer);\nArrayBuffer.isView(dv); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arraybuffer.isview](https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer.isview) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.isView() - JavaScript | MDN",
    "description": "The ArrayBuffer.isView() static method determines whether the\n  passed value is one of the ArrayBuffer views,\n  such as typed array objects\n  or a DataView.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer",
    "markdown": "# ArrayBuffer() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ArrayBuffer()`** constructor creates [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew ArrayBuffer(length)\nnew ArrayBuffer(length, options)\n```\n\n**Note:** `ArrayBuffer()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`length`](#length)\n\nThe size, in bytes, of the array buffer to create.\n\n[`options`](#options) Optional\n\nAn object, which can contain the following properties:\n\n[`maxByteLength`](#maxbytelength) Optional\n\nThe maximum size, in bytes, that the array buffer can be resized to.\n\n### [Return value](#return_value)\n\nA new `ArrayBuffer` object of the specified size, with its [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) property set to the specified `maxByteLength` if one was specified. Its contents are initialized to 0.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown in one of the following cases:\n\n*   `length` or `maxByteLength` is larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) (≥ 253) or negative.\n*   `length` is larger than `maxByteLength`.\n\n## [Examples](#examples)\n\n### [Creating an ArrayBuffer](#creating_an_arraybuffer)\n\nIn this example, we create a 8-byte buffer with a [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) view referring to the buffer:\n\n```\nconst buffer = new ArrayBuffer(8);\nconst view = new Int32Array(buffer);\n```\n\n### [Creating a resizable ArrayBuffer](#creating_a_resizable_arraybuffer)\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then [`resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize) it to 12 bytes:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.resize(12);\n```\n\n**Note:** It is recommended that `maxByteLength` is set to the smallest value possible for your use case. It should never exceed `1073741824` (1GB) to reduce the risk of out-of-memory errors.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arraybuffer-constructor](https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer() constructor - JavaScript | MDN",
    "description": "The ArrayBuffer() constructor creates ArrayBuffer objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species",
    "markdown": "# ArrayBuffer\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ArrayBuffer[@@species]`** static accessor property returns the constructor used to construct return values from array buffer methods.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## [Syntax](#syntax)\n\n```\nArrayBuffer[Symbol.species]\n```\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array buffer methods that create new array buffers.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `ArrayBuffer` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```\n// Hypothetical underlying implementation for illustration\nclass ArrayBuffer {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```\nclass SubArrayBuffer extends ArrayBuffer {}\nSubArrayBuffer[Symbol.species] === SubArrayBuffer; // true\n```\n\nWhen calling array buffer methods that do not mutate the existing object but return a new array buffer instance (for example, [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice)), the object's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array buffer method.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `ArrayBuffer` constructor for `ArrayBuffer`.\n\n```\nArrayBuffer[Symbol.species]; // function ArrayBuffer()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `ArrayBuffer` subclass, such as `MyArrayBuffer`, the `MyArrayBuffer` species is the `MyArrayBuffer` constructor. However, you might want to overwrite this, in order to return parent `ArrayBuffer` objects in your derived class methods:\n\n```\nclass MyArrayBuffer extends ArrayBuffer {\n  // Overwrite MyArrayBuffer species to the parent ArrayBuffer constructor\n  static get [Symbol.species]() {\n    return ArrayBuffer;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-arraybuffer-@@species](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-arraybuffer-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer[@@species] - JavaScript | MDN",
    "description": "The ArrayBuffer[@@species] static accessor property returns the constructor used to construct return values from array buffer methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
    "markdown": "# Array.prototype.reduce() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reduce()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.\n\nThe first time that the callback is run there is no \"return value of the previous calculation\". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n\n[`accumulator`](#accumulator)\n\nThe value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is `array[0]`.\n\n[`currentValue`](#currentvalue)\n\nThe value of the current element. On the first call, its value is `array[0]` if `initialValue` is specified; otherwise its value is `array[1]`.\n\n[`currentIndex`](#currentindex)\n\nThe index position of `currentValue` in the array. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n\n[`array`](#array)\n\nThe array `reduce()` was called upon.\n\n[`initialValue`](#initialvalue) Optional\n\nA value to which `accumulator` is initialized the first time the callback is called. If `initialValue` is specified, `callbackFn` starts executing with the first value in the array as `currentValue`. If `initialValue` is _not_ specified, `accumulator` is initialized to the first value in the array, and `callbackFn` starts executing with the second value in the array as `currentValue`. In this case, if the array is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### [Return value](#return_value)\n\nThe value that results from running the \"reducer\" callback function to completion over the entire array.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the array contains no elements and `initialValue` is not provided.\n\n## [Description](#description)\n\nThe `reduce()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It runs a \"reducer\" callback function over all elements in the array, in ascending-index order, and accumulates them into a single value. Every time, the return value of `callbackFn` is passed into `callbackFn` again on next invocation as `accumulator`. The final value of `accumulator` (which is the value returned from `callbackFn` on the final iteration of the array) becomes the return value of `reduce()`. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nUnlike other [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), `reduce()` does not accept a `thisArg` argument. `callbackFn` is always called with `undefined` as `this`, which gets substituted with `globalThis` if `callbackFn` is non-strict.\n\n`reduce()` is a central concept in [functional programming](https://en.wikipedia.org/wiki/Functional_programming), where it's not possible to mutate any value, so in order to accumulate all values in an array, one must return a new accumulator value on every iteration. This convention propagates to JavaScript's `reduce()`: you should use [spreading](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or other copying methods where possible to create new arrays and objects as the accumulator, rather than mutating the existing one. If you decided to mutate the accumulator instead of copying it, remember to still return the modified object in the callback, or the next iteration will receive undefined. However, note that copying the accumulator may in turn lead to increased memory usage and degraded performance — see [When to not use reduce()](#when_to_not_use_reduce) for more details. In such cases, to avoid bad performance and unreadable code, it's better to use a simple `for` loop instead.\n\nThe `reduce()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n### [Edge cases](#edge_cases)\n\nIf the array only has one element (regardless of position) and no `initialValue` is provided, or if `initialValue` is provided but the array is empty, the solo value will be returned _without_ calling `callbackFn`.\n\nIf `initialValue` is provided and the array is not empty, then the reduce method will always invoke the callback function starting at index 0.\n\nIf `initialValue` is not provided then the reduce method will act differently for arrays with length larger than 1, equal to 1 and 0, as shown in the following example:\n\n```\nconst getMax = (a, b) => Math.max(a, b);\n\n// callback is invoked for each element in the array starting at index 0\n[1, 100].reduce(getMax, 50); // 100\n[50].reduce(getMax, 10); // 50\n\n// callback is invoked once for element at index 1\n[1, 100].reduce(getMax); // 100\n\n// callback is not invoked\n[50].reduce(getMax); // 50\n[].reduce(getMax, 1); // 1\n\n[].reduce(getMax); // TypeError\n```\n\n## [Examples](#examples)\n\n### [How reduce() works without an initial value](#how_reduce_works_without_an_initial_value)\n\nThe code below shows what happens if we call `reduce()` with an array and no initial value.\n\n```\nconst array = [15, 16, 17, 18, 19];\n\nfunction reducer(accumulator, currentValue, index) {\n  const returns = accumulator + currentValue;\n  console.log(\n    `accumulator: ${accumulator}, currentValue: ${currentValue}, index: ${index}, returns: ${returns}`,\n  );\n  return returns;\n}\n\narray.reduce(reducer);\n```\n\nThe callback would be invoked four times, with the arguments and return values in each call being as follows:\n\n|     | `accumulator` | `currentValue` | `index` | Return value |\n| --- | --- | --- | --- | --- |\n| First call | `15` | `16` | `1` | `31` |\n| Second call | `31` | `17` | `2` | `48` |\n| Third call | `48` | `18` | `3` | `66` |\n| Fourth call | `66` | `19` | `4` | `85` |\n\nThe `array` parameter never changes through the process — it's always `[15, 16, 17, 18, 19]`. The value returned by `reduce()` would be that of the last callback invocation (`85`).\n\n### [How reduce() works with an initial value](#how_reduce_works_with_an_initial_value)\n\nHere we reduce the same array using the same algorithm, but with an `initialValue` of `10` passed as the second argument to `reduce()`:\n\n```\n[15, 16, 17, 18, 19].reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  10,\n);\n```\n\nThe callback would be invoked five times, with the arguments and return values in each call being as follows:\n\n|     | `accumulator` | `currentValue` | `index` | Return value |\n| --- | --- | --- | --- | --- |\n| First call | `10` | `15` | `0` | `25` |\n| Second call | `25` | `16` | `1` | `41` |\n| Third call | `41` | `17` | `2` | `58` |\n| Fourth call | `58` | `18` | `3` | `76` |\n| Fifth call | `76` | `19` | `4` | `95` |\n\nThe value returned by `reduce()` in this case would be `95`.\n\n### [Sum of values in an object array](#sum_of_values_in_an_object_array)\n\nTo sum up the values contained in an array of objects, you **must** supply an `initialValue`, so that each item passes through your function.\n\n```\nconst objects = [{ x: 1 }, { x: 2 }, { x: 3 }];\nconst sum = objects.reduce(\n  (accumulator, currentValue) => accumulator + currentValue.x,\n  0,\n);\n\nconsole.log(sum); // 6\n```\n\n### [Function sequential piping](#function_sequential_piping)\n\nThe `pipe` function takes a sequence of functions and returns a new function. When the new function is called with an argument, the sequence of functions are called in order, which each one receiving the return value of the previous function.\n\n```\nconst pipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce((acc, fn) => fn(acc), initialValue);\n\n// Building blocks to use for composition\nconst double = (x) => 2 * x;\nconst triple = (x) => 3 * x;\nconst quadruple = (x) => 4 * x;\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple);\nconst multiply9 = pipe(triple, triple);\nconst multiply16 = pipe(quadruple, quadruple);\nconst multiply24 = pipe(double, triple, quadruple);\n\n// Usage\nmultiply6(6); // 36\nmultiply9(9); // 81\nmultiply16(16); // 256\nmultiply24(10); // 240\n```\n\n### [Running promises in sequence](#running_promises_in_sequence)\n\n[Promise sequencing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#composition) is essentially function piping demonstrated in the previous section, except done asynchronously.\n\n```\n// Compare this with pipe: fn(acc) is changed to acc.then(fn),\n// and initialValue is ensured to be a promise\nconst asyncPipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce((acc, fn) => acc.then(fn), Promise.resolve(initialValue));\n\n// Building blocks to use for composition\nconst p1 = async (a) => a * 5;\nconst p2 = async (a) => a * 2;\n// The composed functions can also return non-promises, because the values are\n// all eventually wrapped in promises\nconst f3 = (a) => a * 3;\nconst p4 = async (a) => a * 4;\n\nasyncPipe(p1, p2, f3, p4)(10).then(console.log); // 1200\n```\n\n`asyncPipe` can also be implemented using `async`/`await`, which better demonstrates its similarity with `pipe`:\n\n```\nconst asyncPipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce(async (acc, fn) => fn(await acc), initialValue);\n```\n\n### [Using reduce() with sparse arrays](#using_reduce_with_sparse_arrays)\n\n`reduce()` skips missing elements in sparse arrays, but it does not skip `undefined` values.\n\n```\nconsole.log([1, 2, , 4].reduce((a, b) => a + b)); // 7\nconsole.log([1, 2, undefined, 4].reduce((a, b) => a + b)); // NaN\n```\n\n### [Calling reduce() on non-array objects](#calling_reduce_on_non-array_objects)\n\nThe `reduce()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 99, // ignored by reduce() since length is 3\n};\nconsole.log(Array.prototype.reduce.call(arrayLike, (x, y) => x + y));\n// 9\n```\n\n### [When to not use reduce()](#when_to_not_use_reduce)\n\nMultipurpose higher-order functions like `reduce()` can be powerful but sometimes difficult to understand, especially for less-experienced JavaScript developers. If code becomes clearer when using other array methods, developers must weigh the readability tradeoff against the other benefits of using `reduce()`.\n\nNote that `reduce()` is always equivalent to a `for...of` loop, except that instead of mutating a variable in the upper scope, we now return the new value for each iteration:\n\n```\nconst val = array.reduce((acc, cur) => update(acc, cur), initialValue);\n\n// Is equivalent to:\nlet val = initialValue;\nfor (const cur of array) {\n  val = update(val, cur);\n}\n```\n\nAs previously stated, the reason why people may want to use `reduce()` is to mimic functional programming practices of immutable data. Therefore, developers who uphold the immutability of the accumulator often copy the entire accumulator for each iteration, like this:\n\n```\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = names.reduce((allNames, name) => {\n  const currCount = Object.hasOwn(allNames, name) ? allNames[name] : 0;\n  return {\n    ...allNames,\n    [name]: currCount + 1,\n  };\n}, {});\n```\n\nThis code is ill-performing, because each iteration has to copy the entire `allNames` object, which could be big, depending how many unique names there are. This code has worst-case `O(N^2)` performance, where `N` is the length of `names`.\n\nA better alternative is to _mutate_ the `allNames` object on each iteration. However, if `allNames` gets mutated anyway, you may want to convert the `reduce()` to a simple `for` loop instead, which is much clearer:\n\n```\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = names.reduce((allNames, name) => {\n  const currCount = allNames[name] ?? 0;\n  allNames[name] = currCount + 1;\n  // return allNames, otherwise the next iteration receives undefined\n  return allNames;\n}, Object.create(null));\n```\n\n```\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = Object.create(null);\nfor (const name of names) {\n  const currCount = countedNames[name] ?? 0;\n  countedNames[name] = currCount + 1;\n}\n```\n\nTherefore, if your accumulator is an array or an object and you are copying the array or object on each iteration, you may accidentally introduce quadratic complexity into your code, causing performance to quickly degrade on large data. This has happened in real-world code — see for example [Making Tanstack Table 1000x faster with a 1 line change](https://jpcamara.com/2023/03/07/making-tanstack-table.html).\n\nSome of the acceptable use cases of `reduce()` are given above (most notably, summing an array, promise sequencing, and function piping). There are other cases where better alternatives than `reduce()` exist.\n\n*   Flattening an array of arrays. Use [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) instead.\n    \n    ```\n    const flattened = array.reduce((acc, cur) => acc.concat(cur), []);\n    ```\n    \n    ```\n    const flattened = array.flat();\n    ```\n    \n*   Grouping objects by a property. Use [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy) instead.\n    \n    ```\n    const groups = array.reduce((acc, obj) => {\n      const key = obj.name;\n      const curGroup = acc[key] ?? [];\n      return { ...acc, [key]: [...curGroup, obj] };\n    }, {});\n    ```\n    \n    ```\n    const groups = Object.groupBy(array, (obj) => obj.name);\n    ```\n    \n*   Concatenating arrays contained in an array of objects. Use [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) instead.\n    \n    ```\n    const friends = [\n      { name: \"Anna\", books: [\"Bible\", \"Harry Potter\"] },\n      { name: \"Bob\", books: [\"War and peace\", \"Romeo and Juliet\"] },\n      { name: \"Alice\", books: [\"The Lord of the Rings\", \"The Shining\"] },\n    ];\n    const allBooks = friends.reduce((acc, cur) => [...acc, ...cur.books], []);\n    ```\n    \n    ```\n    const allBooks = friends.flatMap((person) => person.books);\n    ```\n    \n*   Removing duplicate items in an array. Use [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) instead.\n    \n    ```\n    const uniqArray = array.reduce(\n      (acc, cur) => (acc.includes(cur) ? acc : [...acc, cur]),\n      [],\n    );\n    ```\n    \n    ```\n    const uniqArray = Array.from(new Set(array));\n    ```\n    \n*   Eliminating or adding elements in an array. Use [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) instead.\n    \n    ```\n    // Takes an array of numbers and splits perfect squares into its square roots\n    const roots = array.reduce((acc, cur) => {\n      if (cur < 0) return acc;\n      const root = Math.sqrt(cur);\n      if (Number.isInteger(root)) return [...acc, root, root];\n      return [...acc, cur];\n    }, []);\n    ```\n    \n    ```\n    const roots = array.flatMap((val) => {\n      if (val < 0) return [];\n      const root = Math.sqrt(val);\n      if (Number.isInteger(root)) return [root, root];\n      return [val];\n    });\n    ```\n    \n    If you are only eliminating elements from an array, you also can use [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n*   Searching for elements or testing if elements satisfy a condition. Use [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) and [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), or [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) and [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) instead. These methods have the additional benefit that they return as soon as the result is certain, without iterating the entire array.\n    \n    ```\n    const allEven = array.reduce((acc, cur) => acc && cur % 2 === 0, true);\n    ```\n    \n    ```\n    const allEven = array.every((val) => val % 2 === 0);\n    ```\n    \n\nIn cases where `reduce()` is the best choice, documentation and semantic variable naming can help mitigate readability drawbacks.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.reduce](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.reduce) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.reduce() - JavaScript | MDN",
    "description": "The reduce() method of Array instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice",
    "markdown": "# ArrayBuffer.prototype.slice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`slice()`** method of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `start`, inclusive, up to `end`, exclusive. If either `start` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nslice()\nslice(start)\nslice(start, end)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start) Optional\n\nZero-based index at which to start extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the buffer — if `-buffer.length <= start < 0`, `start + buffer.length` is used.\n*   If `start < -buffer.length` or `start` is omitted, `0` is used.\n*   If `start >= buffer.length`, an empty buffer is returned.\n\n[`end`](#end) Optional\n\nZero-based index at which to end extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n\n*   Negative index counts back from the end of the buffer — if `-buffer.length <= end < 0`, `end + buffer.length` is used.\n*   If `end < -buffer.length`, `0` is used.\n*   If `end >= buffer.length` or `end` is omitted, `buffer.length` is used, causing all elements until the end to be extracted.\n*   If `end` implies a position before or at the position that `start` implies, an empty buffer is returned.\n\n### [Return value](#return_value)\n\nA new [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) containing the extracted elements.\n\n## [Examples](#examples)\n\n### [Copying an ArrayBuffer](#copying_an_arraybuffer)\n\n```\nconst buf1 = new ArrayBuffer(8);\nconst buf2 = buf1.slice(0);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arraybuffer.prototype.slice](https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer.prototype.slice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.slice() - JavaScript | MDN",
    "description": "The slice() method of ArrayBuffer instances returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from start, inclusive, up to end, exclusive. If either start or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",
    "markdown": "# Array.prototype.reduceRight() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reduceRight()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.\n\nSee also [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) for left-to-right.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreduceRight(callbackFn)\nreduceRight(callbackFn, initialValue)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduceRight()`. The function is called with the following arguments:\n\n[`accumulator`](#accumulator)\n\nThe value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the last element of the array.\n\n[`currentValue`](#currentvalue)\n\nThe value of the current element. On the first call, its value is the last element if `initialValue` is specified; otherwise its value is the second-to-last element.\n\n[`currentIndex`](#currentindex)\n\nThe index position of `currentValue` in the array. On the first call, its value is `array.length - 1` if `initialValue` is specified, otherwise `array.length - 2`.\n\n[`array`](#array)\n\nThe array `reduceRight()` was called upon.\n\n[`initialValue`](#initialvalue) Optional\n\nValue to use as accumulator to the first call of the `callbackFn`. If no initial value is supplied, the last element in the array will be used and skipped. Calling `reduceRight()` on an empty array without an initial value creates a `TypeError`.\n\n### [Return value](#return_value)\n\nThe value that results from the reduction.\n\n## [Description](#description)\n\nThe `reduceRight()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It runs a \"reducer\" callback function over all elements in the array, in descending-index order, and accumulates them into a single value. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nUnlike other [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), `reduceRight()` does not accept a `thisArg` argument. `callbackFn` is always called with `undefined` as `this`, which gets substituted with `globalThis` if `callbackFn` is non-strict.\n\nThe `reduceRight()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nAll caveats about `reduce` discussed in [when to not use reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#when_to_not_use_reduce) apply to `reduceRight` as well. Because JavaScript has no lazy evaluation semantics, there is no performance difference between `reduce` and `reduceRight`.\n\n## [Examples](#examples)\n\n### [How reduceRight() works without an initial value](#how_reduceright_works_without_an_initial_value)\n\nThe call to the reduceRight `callbackFn` would look something like this:\n\n```\narr.reduceRight((accumulator, currentValue, index, array) => {\n  // …\n});\n```\n\nThe first time the function is called, the `accumulator` and `currentValue` can be one of two values. If an `initialValue` was provided in the call to `reduceRight`, then `accumulator` will be equal to `initialValue` and `currentValue` will be equal to the last value in the array. If no `initialValue` was provided, then `accumulator` will be equal to the last value in the array and `currentValue` will be equal to the second-to-last value.\n\nIf the array is empty and no `initialValue` was provided, [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) would be thrown. If the array has only one element (regardless of position) and no `initialValue` was provided, or if `initialValue` is provided but the array is empty, the solo value would be returned without calling `callbackFn`.\n\nSome example run-throughs of the function would look like this:\n\n```\n[0, 1, 2, 3, 4].reduceRight(\n  (accumulator, currentValue, index, array) => accumulator + currentValue,\n);\n```\n\nThe callback would be invoked four times, with the arguments and return values in each call being as follows:\n\n|     | `accumulator` | `currentValue` | `index` | Return value |\n| --- | --- | --- | --- | --- |\n| First call | `4` | `3` | `3` | `7` |\n| Second call | `7` | `2` | `2` | `9` |\n| Third call | `9` | `1` | `1` | `10` |\n| Fourth call | `10` | `0` | `0` | `10` |\n\nThe `array` parameter never changes through the process — it's always `[0, 1, 2, 3, 4]`. The value returned by `reduceRight` would be that of the last callback invocation (`10`).\n\n### [How reduceRight() works with an initial value](#how_reduceright_works_with_an_initial_value)\n\nHere we reduce the same array using the same algorithm, but with an `initialValue` of `10` passed as the second argument to `reduceRight()`:\n\n```\n[0, 1, 2, 3, 4].reduceRight(\n  (accumulator, currentValue, index, array) => accumulator + currentValue,\n  10,\n);\n```\n\n|     | `accumulator` | `currentValue` | `index` | Return value |\n| --- | --- | --- | --- | --- |\n| First call | `10` | `4` | `4` | `14` |\n| Second call | `14` | `3` | `3` | `17` |\n| Third call | `17` | `2` | `2` | `19` |\n| Fourth call | `19` | `1` | `1` | `20` |\n| Fifth call | `20` | `0` | `0` | `20` |\n\nThe value returned by `reduceRight` this time would be, of course, `20`.\n\n### [Sum up all values within an array](#sum_up_all_values_within_an_array)\n\n```\nconst sum = [0, 1, 2, 3].reduceRight((a, b) => a + b);\n// sum is 6\n```\n\n### [Run a list of asynchronous functions with callbacks in series each passing their results to the next](#run_a_list_of_asynchronous_functions_with_callbacks_in_series_each_passing_their_results_to_the_next)\n\n```\nconst waterfall =\n  (...functions) =>\n  (callback, ...args) =>\n    functions.reduceRight(\n      (composition, fn) =>\n        (...results) =>\n          fn(composition, ...results),\n      callback,\n    )(...args);\n\nconst randInt = (max) => Math.floor(Math.random() * max);\n\nconst add5 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x + 5);\n};\nconst mult3 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x * 3);\n};\nconst sub2 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x - 2);\n};\nconst split = (callback, x) => {\n  setTimeout(callback, randInt(1000), x, x);\n};\nconst add = (callback, x, y) => {\n  setTimeout(callback, randInt(1000), x + y);\n};\nconst div4 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x / 4);\n};\n\nconst computation = waterfall(add5, mult3, sub2, split, add, div4);\ncomputation(console.log, 5); // Logs 14\n\n// same as:\n\nconst computation2 = (input, callback) => {\n  const f6 = (x) => div4(callback, x);\n  const f5 = (x, y) => add(f6, x, y);\n  const f4 = (x) => split(f5, x);\n  const f3 = (x) => sub2(f4, x);\n  const f2 = (x) => mult3(f3, x);\n  add5(f2, input);\n};\n```\n\n### [Difference between reduce and reduceRight](#difference_between_reduce_and_reduceright)\n\n```\nconst a = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nconst left = a.reduce((prev, cur) => prev + cur);\nconst right = a.reduceRight((prev, cur) => prev + cur);\n\nconsole.log(left); // \"12345\"\nconsole.log(right); // \"54321\"\n```\n\n### [Defining composable functions](#defining_composable_functions)\n\nFunction composition is a mechanism for combining functions, in which the output of each function is passed into the next one, and the output of the last function is the final result. In this example we use `reduceRight()` to implement function composition.\n\nSee also [Function composition](https://en.wikipedia.org/wiki/Function_composition_(computer_science)) on Wikipedia.\n\n```\nconst compose =\n  (...args) =>\n  (value) =>\n    args.reduceRight((acc, fn) => fn(acc), value);\n\n// Increment passed number\nconst inc = (n) => n + 1;\n\n// Doubles the passed value\nconst double = (n) => n * 2;\n\n// using composition function\nconsole.log(compose(double, inc)(2)); // 6\n\n// using composition function\nconsole.log(compose(inc, double)(2)); // 5\n```\n\n### [Using reduceRight() with sparse arrays](#using_reduceright_with_sparse_arrays)\n\n`reduceRight()` skips missing elements in sparse arrays, but it does not skip `undefined` values.\n\n```\nconsole.log([1, 2, , 4].reduceRight((a, b) => a + b)); // 7\nconsole.log([1, 2, undefined, 4].reduceRight((a, b) => a + b)); // NaN\n```\n\n### [Calling reduceRight() on non-array objects](#calling_reduceright_on_non-array_objects)\n\nThe `reduceRight()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 99, // ignored by reduceRight() since length is 3\n};\nconsole.log(Array.prototype.reduceRight.call(arrayLike, (x, y) => x - y));\n// -1, which is 4 - 3 - 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.reduceright](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.reduceright) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.reduceRight() - JavaScript | MDN",
    "description": "The reduceRight() method of Array instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/detached",
    "markdown": "# ArrayBuffer.prototype.detached - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`detached`** accessor property of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances returns a boolean indicating whether or not this buffer has been detached (transferred).\n\n## [Description](#description)\n\nThe `detached` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is `false` when the `ArrayBuffer` is first created. The value becomes `true` if the `ArrayBuffer` is [transferred](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers), which detaches the instance from its underlying memory. Once a buffer becomes detached, it is no longer usable.\n\n## [Examples](#examples)\n\n### [Using detached](#using_detached)\n\n```\nconst buffer = new ArrayBuffer(8);\nconsole.log(buffer.detached); // false\nconst newBuffer = buffer.transfer();\nconsole.log(buffer.detached); // true\nconsole.log(newBuffer.detached); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ArrayBuffer transfer  <br>\\# sec-get-arraybuffer.prototype.detached](https://tc39.es/proposal-arraybuffer-transfer/#sec-get-arraybuffer.prototype.detached) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.detached - JavaScript | MDN",
    "description": "The detached accessor property of ArrayBuffer instances returns a boolean indicating whether or not this buffer has been detached (transferred).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength",
    "markdown": "# ArrayBuffer.prototype.byteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`byteLength`** accessor property of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances returns the length (in bytes) of this array buffer.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this `ArrayBuffer` has been detached.\n\n## [Examples](#examples)\n\n### [Using byteLength](#using_bytelength)\n\n```\nconst buffer = new ArrayBuffer(8);\nbuffer.byteLength; // 8\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-arraybuffer.prototype.bytelength](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-arraybuffer.prototype.bytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.byteLength - JavaScript | MDN",
    "description": "The byteLength accessor property of ArrayBuffer instances returns the length (in bytes) of this array buffer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
    "markdown": "# Array.prototype.shift() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`shift()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances removes the **first** element from an array and returns that removed element. This method changes the length of the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe removed element from the array; [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if the array is empty.\n\n## [Description](#description)\n\nThe `shift()` method removes the element at the zeroth index and shifts the values at consecutive indexes down, then returns the removed value. If the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property is 0, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\nThe [`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) method has similar behavior to `shift()`, but applied to the last element in an array.\n\nThe `shift()` method is a [mutating method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with the first element removed, you can use [`arr.slice(1)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) instead.\n\nThe `shift()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Removing an element from an array](#removing_an_element_from_an_array)\n\nThe following code displays the `myFish` array before and after removing its first element. It also displays the removed element:\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\n\nconsole.log(\"myFish before:\", myFish);\n// myFish before: ['angel', 'clown', 'mandarin', 'surgeon']\n\nconst shifted = myFish.shift();\n\nconsole.log(\"myFish after:\", myFish);\n// myFish after: ['clown', 'mandarin', 'surgeon']\n\nconsole.log(\"Removed this element:\", shifted);\n// Removed this element: angel\n```\n\n### [Using shift() method in while loop](#using_shift_method_in_while_loop)\n\nThe shift() method is often used in condition inside while loop. In the following example every iteration will remove the next element from an array, until it is empty:\n\n```\nconst names = [\"Andrew\", \"Tyrone\", \"Paul\", \"Maria\", \"Gayatri\"];\n\nwhile (typeof (i = names.shift()) !== \"undefined\") {\n  console.log(i);\n}\n// Andrew, Tyrone, Paul, Maria, Gayatri\n```\n\n### [Calling shift() on non-array objects](#calling_shift_on_non-array_objects)\n\nThe `shift()` method reads the `length` property of `this`. If the [normalized length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) is 0, `length` is set to `0` again (whereas it may be negative or `undefined` before). Otherwise, the property at `0` is returned, and the rest of the properties are shifted left by one. The `length` property is decremented by one.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.shift.call(arrayLike));\n// undefined, because it is an empty slot\nconsole.log(arrayLike);\n// { '1': 4, length: 2, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.shift.call(plainObj);\nconsole.log(plainObj);\n// { length: 0 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.shift](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.shift) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.shift() - JavaScript | MDN",
    "description": "The shift() method of Array instances removes the first\n  element from an array and returns that removed element. This method changes the length\n  of the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",
    "markdown": "# Array.prototype.reverse() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reverse()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances reverses an array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.\n\nTo reverse the elements in an array without mutating the original array, use [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe reference to the original array, now reversed. Note that the array is reversed _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## [Description](#description)\n\nThe `reverse()` method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.\n\nThe `reverse()` method preserves empty slots. If the source array is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots' corresponding new indices are [deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) and also become empty slots.\n\nThe `reverse()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Reversing the elements in an array](#reversing_the_elements_in_an_array)\n\nThe following example creates an array `items`, containing three elements, then reverses the array. The call to `reverse()` returns a reference to the reversed array `items`.\n\n```\nconst items = [1, 2, 3];\nconsole.log(items); // [1, 2, 3]\n\nitems.reverse();\nconsole.log(items); // [3, 2, 1]\n```\n\n### [The reverse() method returns the reference to the same array](#the_reverse_method_returns_the_reference_to_the_same_array)\n\nThe `reverse()` method returns reference to the original array, so mutating the returned array will mutate the original array as well.\n\n```\nconst numbers = [3, 2, 4, 1, 5];\nconst reversed = numbers.reverse();\n// numbers and reversed are both in reversed order [5, 1, 4, 2, 3]\nreversed[0] = 5;\nconsole.log(numbers[0]); // 5\n```\n\nIn case you want `reverse()` to not mutate the original array, but return a [shallow-copied](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) array like other array methods (e.g. [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) do, use the [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed) method. Alternatively, you can do a shallow copy before calling `reverse()`, using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n```\nconst numbers = [3, 2, 4, 1, 5];\n// [...numbers] creates a shallow copy, so reverse() does not mutate the original\nconst reverted = [...numbers].reverse();\nreverted[0] = 5;\nconsole.log(numbers[0]); // 3\n```\n\n### [Using reverse() on sparse arrays](#using_reverse_on_sparse_arrays)\n\nSparse arrays remain sparse after calling `reverse()`. Empty slots are copied over to their respective new indices as empty slots.\n\n```\nconsole.log([1, , 3].reverse()); // [3, empty, 1]\nconsole.log([1, , 3, 4].reverse()); // [4, 3, empty, 1]\n```\n\n### [Calling reverse() on non-array objects](#calling_reverse_on_non-array_objects)\n\nThe `reverse()` method reads the `length` property of `this`. It then visits each property having an integer key between `0` and `length / 2`, and swaps the two corresponding indices on both ends, [deleting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) any destination property for which the source property did not exist.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n  3: 33, // ignored by reverse() since length is 3\n};\nconsole.log(Array.prototype.reverse.call(arrayLike));\n// { 0: 4, 3: 33, length: 3, unrelated: 'foo' }\n// The index 2 is deleted because there was no index 0 present originally\n// The index 3 is unchanged since the length is 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.reverse](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.reverse) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.reverse() - JavaScript | MDN",
    "description": "The reverse() method of Array instances reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",
    "markdown": "# Array.prototype.slice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`slice()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) of a portion of an array into a new array object selected from `start` to `end` (`end` not included) where `start` and `end` represent the index of items in that array. The original array will not be modified.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nslice()\nslice(start)\nslice(start, end)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start) Optional\n\nZero-based index at which to start extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n*   If `start < -array.length` or `start` is omitted, `0` is used.\n*   If `start >= array.length`, an empty array is returned.\n\n[`end`](#end) Optional\n\nZero-based index at which to end extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n\n*   Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n*   If `end < -array.length`, `0` is used.\n*   If `end >= array.length` or `end` is omitted, `array.length` is used, causing all elements until the end to be extracted.\n*   If `end` implies a position before or at the position that `start` implies, an empty array is returned.\n\n### [Return value](#return_value)\n\nA new array containing the extracted elements.\n\n## [Description](#description)\n\nThe `slice()` method is a [copying method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` but instead returns a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) that contains some of the same elements as the ones from the original array.\n\nThe `slice()` method preserves empty slots. If the sliced portion is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the returned array is sparse as well.\n\nThe `slice()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Return a portion of an existing array](#return_a_portion_of_an_existing_array)\n\n```\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1, 3);\n\n// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']\n// citrus contains ['Orange','Lemon']\n```\n\n### [Using slice](#using_slice)\n\nIn the following example, `slice` creates a new array, `newCar`, from `myCar`. Both include a reference to the object `myHonda`. When the color of `myHonda` is changed to purple, both arrays reflect the change.\n\n```\n// Using slice, create newCar from myCar.\nconst myHonda = {\n  color: \"red\",\n  wheels: 4,\n  engine: { cylinders: 4, size: 2.2 },\n};\nconst myCar = [myHonda, 2, \"cherry condition\", \"purchased 1997\"];\nconst newCar = myCar.slice(0, 2);\n\nconsole.log(\"myCar =\", myCar);\nconsole.log(\"newCar =\", newCar);\nconsole.log(\"myCar[0].color =\", myCar[0].color);\nconsole.log(\"newCar[0].color =\", newCar[0].color);\n\n// Change the color of myHonda.\nmyHonda.color = \"purple\";\nconsole.log(\"The new color of my Honda is\", myHonda.color);\n\nconsole.log(\"myCar[0].color =\", myCar[0].color);\nconsole.log(\"newCar[0].color =\", newCar[0].color);\n```\n\nThis script writes:\n\nmyCar = \\[\n  { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } },\n  2,\n  'cherry condition',\n  'purchased 1997'\n\\]\nnewCar = \\[ { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } }, 2 \\]\nmyCar\\[0\\].color = red\nnewCar\\[0\\].color = red\nThe new color of my Honda is purple\nmyCar\\[0\\].color = purple\nnewCar\\[0\\].color = purple\n\n### [Calling slice() on non-array objects](#calling_slice_on_non-array_objects)\n\nThe `slice()` method reads the `length` property of `this`. It then reads the integer-keyed properties from `start` to `end` and defines them on a newly created array.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 33, // ignored by slice() since length is 3\n};\nconsole.log(Array.prototype.slice.call(arrayLike, 1, 3));\n// [ 3, 4 ]\n```\n\n### [Using slice() to convert array-like objects to arrays](#using_slice_to_convert_array-like_objects_to_arrays)\n\nThe `slice()` method is often used with [`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) and [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) to create a utility method that converts an array-like object into an array.\n\n```\n// slice() is called with `this` passed as the first argument\nconst slice = Function.prototype.call.bind(Array.prototype.slice);\n\nfunction list() {\n  return slice(arguments);\n}\n\nconst list1 = list(1, 2, 3); // [1, 2, 3]\n```\n\n### [Using slice() on sparse arrays](#using_slice_on_sparse_arrays)\n\nThe array returned from `slice()` may be sparse if the source is sparse.\n\n```\nconsole.log([1, 2, , 4, 5].slice(1, 4)); // [2, empty, 4]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.slice](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.slice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.slice() - JavaScript | MDN",
    "description": "The slice() method of Array instances returns a shallow copy of a portion of\n  an array into a new array object selected from start to end\n  (end not included) where start and end represent\n  the index of items in that array. The original array will not be modified.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength",
    "markdown": "# ArrayBuffer.prototype.transferToFixedLength() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`transferToFixedLength()`** method of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances creates a new non-resizable `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## [Syntax](#syntax)\n\n```\ntransferToFixedLength()\ntransferToFixedLength(newByteLength)\n```\n\n### [Parameters](#parameters)\n\n[`newByteLength`](#newbytelength)\n\nThe [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength) of the new `ArrayBuffer`. Defaults to the `byteLength` of this `ArrayBuffer`.\n\n*   If `newByteLength` is smaller than the `byteLength` of this `ArrayBuffer`, the \"overflowing\" bytes are dropped.\n*   If `newByteLength` is larger than the `byteLength` of this `ArrayBuffer`, the extra bytes are filled with zeros.\n\n### [Return value](#return_value)\n\nA new [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) object. Its contents are initialized to the contents of this `ArrayBuffer`, and extra bytes, if any, are filled with zeros. The new `ArrayBuffer` is always non-resizable. The original `ArrayBuffer` is detached.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this `ArrayBuffer` is already detached.\n\n## [Description](#description)\n\nUnlike [`transfer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer), `transferToFixedLength()` always creates a non-resizable `ArrayBuffer`. This means `newByteLength` can be larger than the `maxByteLength`, even if this `ArrayBuffer` is resizable. See [transferring ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers) for more information.\n\n## [Examples](#examples)\n\n### [Transferring a resizable ArrayBuffer to fixed-length](#transferring_a_resizable_arraybuffer_to_fixed-length)\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\nconst buffer2 = buffer.transferToFixedLength();\nconsole.log(buffer2.byteLength); // 8\nconsole.log(buffer2.resizable); // false\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n```\n\nUsing `transferToFixedLength`, `newByteLength` can be larger than the `maxByteLength` of the original `ArrayBuffer`.\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\nconst buffer2 = buffer.transferToFixedLength(20);\nconsole.log(buffer2.byteLength); // 20\nconsole.log(buffer2.resizable); // false\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ArrayBuffer transfer  <br>\\# sec-arraybuffer.prototype.transfertofixedlength](https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfertofixedlength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.transferToFixedLength() - JavaScript | MDN",
    "description": "The transferToFixedLength() method of ArrayBuffer instances creates a new non-resizable ArrayBuffer with the same byte content as this buffer, then detaches this buffer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer",
    "markdown": "# ArrayBuffer.prototype.transfer() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`transfer()`** method of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances creates a new `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## [Syntax](#syntax)\n\n```\ntransfer()\ntransfer(newByteLength)\n```\n\n### [Parameters](#parameters)\n\n[`newByteLength`](#newbytelength) Optional\n\nThe [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength) of the new `ArrayBuffer`. Defaults to the `byteLength` of this `ArrayBuffer`.\n\n*   If `newByteLength` is smaller than the `byteLength` of this `ArrayBuffer`, the \"overflowing\" bytes are dropped.\n*   If `newByteLength` is larger than the `byteLength` of this `ArrayBuffer`, the extra bytes are filled with zeros.\n*   If this `ArrayBuffer` is resizable, `newByteLength` must not be greater than its [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength).\n\n### [Return value](#return_value)\n\nA new [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) object. Its contents are initialized to the contents of this `ArrayBuffer`, and extra bytes, if any, are filled with zeros. The new `ArrayBuffer` is resizable if and only if this `ArrayBuffer` is resizable, in which case its [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) is the same as this `ArrayBuffer`'s. The original `ArrayBuffer` is detached.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if this `ArrayBuffer` is resizable and `newByteLength` is greater than the [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) of this `ArrayBuffer`.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this `ArrayBuffer` is already detached.\n\n## [Description](#description)\n\nThe `transfer()` method performs the same operation as the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). It copies the bytes of this `ArrayBuffer` into a new `ArrayBuffer` object, then detaches this `ArrayBuffer` object. See [transferring ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers) for more information.\n\n`transfer()` preserves the resizability of this `ArrayBuffer`. If you want the new `ArrayBuffer` to be non-resizable, use [`transferToFixedLength()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength) instead. There's no way to transfer a buffer that makes a fixed-length buffer become resizable.\n\n`transfer()` is very efficient because implementations may implement this method as a zero-copy move or a `realloc` — there does not need to be an actual copy of the data.\n\n## [Examples](#examples)\n\n### [Transferring an ArrayBuffer](#transferring_an_arraybuffer)\n\n```\n// Create an ArrayBuffer and write a few bytes\nconst buffer = new ArrayBuffer(8);\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\n// Copy the buffer to the same size\nconst buffer2 = buffer.transfer();\nconsole.log(buffer.detached); // true\nconsole.log(buffer2.byteLength); // 8\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n\n// Copy the buffer to a smaller size\nconst buffer3 = buffer2.transfer(4);\nconsole.log(buffer3.byteLength); // 4\nconst view3 = new Uint8Array(buffer3);\nconsole.log(view3[1]); // 2\nconsole.log(view3[7]); // undefined\n\n// Copy the buffer to a larger size\nconst buffer4 = buffer3.transfer(8);\nconsole.log(buffer4.byteLength); // 8\nconst view4 = new Uint8Array(buffer4);\nconsole.log(view4[1]); // 2\nconsole.log(view4[7]); // 0\n\n// Already detached, throws TypeError\nbuffer.transfer(); // TypeError: Cannot perform ArrayBuffer.prototype.transfer on a detached ArrayBuffer\n```\n\n### [Transferring a resizable ArrayBuffer](#transferring_a_resizable_arraybuffer)\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\n// Copy the buffer to a smaller size\nconst buffer2 = buffer.transfer(4);\nconsole.log(buffer2.byteLength); // 4\nconsole.log(buffer2.maxByteLength); // 16\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // undefined\nbuffer2.resize(8);\nconsole.log(view2[7]); // 0\n\n// Copy the buffer to a larger size within maxByteLength\nconst buffer3 = buffer2.transfer(12);\nconsole.log(buffer3.byteLength); // 12\n\n// Copy the buffer to a larger size than maxByteLength\nbuffer3.transfer(20); // RangeError: Invalid array buffer length\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ArrayBuffer transfer  <br>\\# sec-arraybuffer.prototype.transfer](https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.transfer() - JavaScript | MDN",
    "description": "The transfer() method of ArrayBuffer instances creates a new ArrayBuffer with the same byte content as this buffer, then detaches this buffer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",
    "markdown": "# Array.prototype.some() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`some()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsome(callbackFn)\nsome(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `some()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n`false` unless `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value for an array element, in which case `true` is immediately returned.\n\n## [Description](#description)\n\nThe `some()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, until the `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. If such an element is found, `some()` immediately returns `true` and stops iterating through the array. Otherwise, if `callbackFn` returns a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value for all elements, `some()` returns `false`. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`some()` acts like the \"there exists\" quantifier in mathematics. In particular, for an empty array, it returns `false` for any condition.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\n`some()` does not mutate the array on which it is called, but the function provided as `callbackFn` can. Note, however, that the length of the array is saved _before_ the first invocation of `callbackFn`. Therefore:\n\n*   `callbackFn` will not visit any elements added beyond the array's initial length when the call to `some()` began.\n*   Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\n*   If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn` will be the value at the time that element gets visited. [Deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) elements are not visited.\n\n**Warning:** Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases).\n\nThe `some()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Testing value of array elements](#testing_value_of_array_elements)\n\nThe following example tests whether any element in the array is bigger than 10.\n\n```\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10); // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n\n### [Testing array elements using arrow functions](#testing_array_elements_using_arrow_functions)\n\n[Arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) provide a shorter syntax for the same test.\n\n```\n[2, 5, 8, 1, 4].some((x) => x > 10); // false\n[12, 5, 8, 1, 4].some((x) => x > 10); // true\n```\n\n### [Checking whether a value exists in an array](#checking_whether_a_value_exists_in_an_array)\n\nTo mimic the function of the `includes()` method, this custom function returns `true` if the element exists in the array:\n\n```\nconst fruits = [\"apple\", \"banana\", \"mango\", \"guava\"];\n\nfunction checkAvailability(arr, val) {\n  return arr.some((arrVal) => val === arrVal);\n}\n\ncheckAvailability(fruits, \"kela\"); // false\ncheckAvailability(fruits, \"banana\"); // true\n```\n\n### [Converting any value to Boolean](#converting_any_value_to_boolean)\n\n```\nconst TRUTHY_VALUES = [true, \"true\", 1];\n\nfunction getBoolean(value) {\n  if (typeof value === \"string\") {\n    value = value.toLowerCase().trim();\n  }\n\n  return TRUTHY_VALUES.some((t) => t === value);\n}\n\ngetBoolean(false); // false\ngetBoolean(\"false\"); // false\ngetBoolean(1); // true\ngetBoolean(\"true\"); // true\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `some()` to check whether the array is strictly increasing.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5];\nconst isIncreasing = !numbers\n  .filter((num) => num > 0)\n  .some((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === 0) return false;\n    return num <= arr[idx - 1];\n  });\nconsole.log(isIncreasing); // false\n```\n\n### [Using some() on sparse arrays](#using_some_on_sparse_arrays)\n\n`some()` will not run its predicate on empty slots.\n\n```\nconsole.log([1, , 3].some((x) => x === undefined)); // false\nconsole.log([1, , 1].some((x) => x !== 1)); // false\nconsole.log([1, undefined, 1].some((x) => x !== 1)); // true\n```\n\n### [Calling some() on non-array objects](#calling_some_on_non-array_objects)\n\nThe `some()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length` until they all have been accessed or `callbackFn` returns `true`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: 3, // ignored by some() since length is 3\n};\nconsole.log(Array.prototype.some.call(arrayLike, (x) => typeof x === \"number\"));\n// false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.some](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.some) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.some() - JavaScript | MDN",
    "description": "The some() method of Array instances tests whether\n  at least one element in the array passes the test implemented by the provided\n  function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength",
    "markdown": "# ArrayBuffer.prototype.maxByteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`maxByteLength`** accessor property of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances returns the maximum length (in bytes) that this array buffer can be resized to.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `maxByteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed, set via the `maxByteLength` option of the [`ArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) constructor, and cannot be changed.\n\nThis property returns 0 if this `ArrayBuffer` has been detached. If this `ArrayBuffer` was constructed without specifying a `maxByteLength` value, this property returns a value equal to the value of the `ArrayBuffer`'s [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength).\n\n## [Examples](#examples)\n\n### [Using maxByteLength](#using_maxbytelength)\n\nIn this example, we create an 8-byte buffer that is resizable to a max length of 16 bytes, then return its `maxByteLength`:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.maxByteLength; // 16\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-arraybuffer.prototype.maxbytelength](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-arraybuffer.prototype.maxbytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.maxByteLength - JavaScript | MDN",
    "description": "The maxByteLength accessor property of ArrayBuffer instances returns the maximum length (in bytes) that this array buffer can be resized to.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString",
    "markdown": "# Array.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toLocaleString()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a string representing the elements of the array. The elements are converted to strings using their `toLocaleString` methods and these strings are separated by a locale-specific string (such as a comma \",\").\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object with configuration properties. For numbers, see [`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString); for dates, see [`Date.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString).\n\n### [Return value](#return_value)\n\nA string representing the elements of the array.\n\n## [Description](#description)\n\nThe `Array.prototype.toLocaleString` method traverses its content, calling the `toLocaleString` method of every element with the `locales` and `options` parameters provided, and concatenates them with an implementation-defined separator (such as a comma \",\"). Note that the method itself does not consume the two parameters — it only passes them to the `toLocaleString()` of each element. The choice of the separator string depends on the host's current locale, not the `locales` parameter.\n\nIf an element is `undefined`, `null`, it is converted to an empty string instead of the string `\"null\"` or `\"undefined\"`.\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toLocaleString()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toLocaleString()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Using locales and options](#using_locales_and_options)\n\nThe elements of the array are converted to strings using their `toLocaleString` methods.\n\n*   `Object`: [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString)\n*   `Number`: [`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString)\n*   `Date`: [`Date.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\n\nAlways display the currency for the strings and numbers in the `prices` array:\n\n```\nconst prices = [\"￥7\", 500, 8123, 12];\nprices.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" });\n\n// \"￥7,￥500,￥8,123,￥12\"\n```\n\nFor more examples, see also the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) pages.\n\n### [Using toLocaleString() on sparse arrays](#using_tolocalestring_on_sparse_arrays)\n\n`toLocaleString()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```\nconsole.log([1, , 3].toLocaleString()); // '1,,3'\n```\n\n### [Calling toLocaleString() on non-array objects](#calling_tolocalestring_on_non-array_objects)\n\nThe `toLocaleString()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4, // ignored by toLocaleString() since length is 3\n};\nconsole.log(Array.prototype.toLocaleString.call(arrayLike));\n// 1,2,3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.tolocalestring](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.tolocalestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-array.prototype.tolocalestring](https://tc39.es/ecma402/#sup-array.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.toLocaleString() - JavaScript | MDN",
    "description": "The toLocaleString() method of Array instances returns a string representing\n  the elements of the array. The elements are converted to strings using their\n  toLocaleString methods and these strings are separated by a locale-specific\n  string (such as a comma \",\").",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
    "markdown": "# Array.prototype.splice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`splice()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances changes the contents of an array by removing or replacing existing elements and/or adding new elements [in place](https://en.wikipedia.org/wiki/In-place_algorithm).\n\nTo create a new array with a segment removed and/or replaced without mutating the original array, use [`toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced). To access part of an array without modifying it, see [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsplice(start)\nsplice(start, deleteCount)\nsplice(start, deleteCount, item1)\nsplice(start, deleteCount, item1, item2)\nsplice(start, deleteCount, item1, item2, /* …, */ itemN)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start)\n\nZero-based index at which to start changing the array, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n*   If `start < -array.length`, `0` is used.\n*   If `start >= array.length`, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.\n*   If `start` is omitted (and `splice()` is called with no arguments), nothing is deleted. This is different from passing `undefined`, which is converted to `0`.\n\n[`deleteCount`](#deletecount) Optional\n\nAn integer indicating the number of elements in the array to remove from `start`.\n\nIf `deleteCount` is omitted, or if its value is greater than or equal to the number of elements after the position specified by `start`, then all the elements from `start` to the end of the array will be deleted. However, if you wish to pass any `itemN` parameter, you should pass `Infinity` as `deleteCount` to delete all elements after `start`, because an explicit `undefined` gets [converted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) to `0`.\n\nIf `deleteCount` is `0` or negative, no elements are removed. In this case, you should specify at least one new element (see below).\n\n[`item1`](#item1), …, `itemN` Optional\n\nThe elements to add to the array, beginning from `start`.\n\nIf you do not specify any elements, `splice()` will only remove elements from the array.\n\n### [Return value](#return_value)\n\nAn array containing the deleted elements.\n\nIf only one element is removed, an array of one element is returned.\n\nIf no elements are removed, an empty array is returned.\n\n## [Description](#description)\n\nThe `splice()` method is a [mutating method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It may change the content of `this`. If the specified number of elements to insert differs from the number of elements being removed, the array's `length` will be changed as well. At the same time, it uses [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species) to create a new array instance to be returned.\n\nIf the deleted portion is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the array returned by `splice()` is sparse as well, with those corresponding indices being empty slots.\n\nThe `splice()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Remove 0 (zero) elements before index 2, and insert \"drum\"](#remove_0_zero_elements_before_index_2_and_insert_drum)\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2, 0, \"drum\");\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n// removed is [], no elements removed\n```\n\n### [Remove 0 (zero) elements before index 2, and insert \"drum\" and \"guitar\"](#remove_0_zero_elements_before_index_2_and_insert_drum_and_guitar)\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2, 0, \"drum\", \"guitar\");\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"guitar\", \"mandarin\", \"sturgeon\"]\n// removed is [], no elements removed\n```\n\n### [Remove 0 (zero) elements at index 0, and insert \"angel\"](#remove_0_zero_elements_at_index_0_and_insert_angel)\n\n`splice(0, 0, ...elements)` inserts elements at the start of the array like [`unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift).\n\n```\nconst myFish = [\"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(0, 0, \"angel\");\n\n// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n// no items removed\n```\n\n### [Remove 0 (zero) elements at last index, and insert \"sturgeon\"](#remove_0_zero_elements_at_last_index_and_insert_sturgeon)\n\n`splice(array.length, 0, ...elements)` inserts elements at the end of the array like [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push).\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\"];\nconst removed = myFish.splice(myFish.length, 0, \"sturgeon\");\n\n// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n// no items removed\n```\n\n### [Remove 1 element at index 3](#remove_1_element_at_index_3)\n\n```\nconst myFish = [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(3, 1);\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n// removed is [\"mandarin\"]\n```\n\n### [Remove 1 element at index 2, and insert \"trumpet\"](#remove_1_element_at_index_2_and_insert_trumpet)\n\n```\nconst myFish = [\"angel\", \"clown\", \"drum\", \"sturgeon\"];\nconst removed = myFish.splice(2, 1, \"trumpet\");\n\n// myFish is [\"angel\", \"clown\", \"trumpet\", \"sturgeon\"]\n// removed is [\"drum\"]\n```\n\n### [Remove 2 elements from index 0, and insert \"parrot\", \"anemone\" and \"blue\"](#remove_2_elements_from_index_0_and_insert_parrot_anemone_and_blue)\n\n```\nconst myFish = [\"angel\", \"clown\", \"trumpet\", \"sturgeon\"];\nconst removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\");\n\n// myFish is [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"]\n// removed is [\"angel\", \"clown\"]\n```\n\n### [Remove 2 elements, starting from index 2](#remove_2_elements_starting_from_index_2)\n\n```\nconst myFish = [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"];\nconst removed = myFish.splice(2, 2);\n\n// myFish is [\"parrot\", \"anemone\", \"sturgeon\"]\n// removed is [\"blue\", \"trumpet\"]\n```\n\n### [Remove 1 element from index -2](#remove_1_element_from_index_-2)\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(-2, 1);\n\n// myFish is [\"angel\", \"clown\", \"sturgeon\"]\n// removed is [\"mandarin\"]\n```\n\n### [Remove all elements, starting from index 2](#remove_all_elements_starting_from_index_2)\n\n```\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2);\n\n// myFish is [\"angel\", \"clown\"]\n// removed is [\"mandarin\", \"sturgeon\"]\n```\n\n### [Using splice() on sparse arrays](#using_splice_on_sparse_arrays)\n\nThe `splice()` method preserves the array's sparseness.\n\n```\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.splice(1, 2)); // [empty, 3]\nconsole.log(arr); // [1, 4, empty, 6]\n```\n\n### [Calling splice() on non-array objects](#calling_splice_on_non-array_objects)\n\nThe `splice()` method reads the `length` property of `this`. It then updates the integer-keyed properties and the `length` property as needed.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.splice.call(arrayLike, 0, 1, 2, 3));\n// [ 5 ]\nconsole.log(arrayLike);\n// { '0': 2, '1': 3, '3': 4, length: 4, unrelated: 'foo' }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.splice](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.splice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.splice() - JavaScript | MDN",
    "description": "The splice() method of Array instances changes the contents of an array by\n  removing or replacing existing elements and/or adding new elements in place.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable",
    "markdown": "# ArrayBuffer.prototype.resizable - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`resizable`** accessor property of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances returns whether this array buffer can be resized or not.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `resizable` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed. If the `maxByteLength` option was set in the constructor, `resizable` will return `true`; if not, it will return `false`.\n\n## [Examples](#examples)\n\n### [Using resizable](#using_resizable)\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then check its `resizable` property, resizing it if `resizable` returns `true`:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.resizable) {\n  console.log(\"Buffer is resizable!\");\n  buffer.resize(12);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-arraybuffer.prototype.resizable](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-arraybuffer.prototype.resizable) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer.prototype.resizable - JavaScript | MDN",
    "description": "The resizable accessor property of ArrayBuffer instances returns whether this array buffer can be resized or not.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
    "markdown": "# Array.prototype.sort() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`sort()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances sorts the elements of an array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.\n\nThe time and space complexity of the sort cannot be guaranteed as it depends on the implementation.\n\nTo sort the elements in an array without mutating the original array, use [`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`compareFn`](#comparefn) Optional\n\nA function that determines the order of the elements. The function is called with the following arguments:\n\n[`a`](#a)\n\nThe first element for comparison. Will never be `undefined`.\n\n[`b`](#b)\n\nThe second element for comparison. Will never be `undefined`.\n\nIt should return a number where:\n\n*   A negative value indicates that `a` should come before `b`.\n*   A positive value indicates that `a` should come after `b`.\n*   Zero or `NaN` indicates that `a` and `b` are considered equal.\n\nTo memorize this, remember that `(a, b) => a - b` sorts numbers in ascending order.\n\nIf omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.\n\n### [Return value](#return_value)\n\nThe reference to the original array, now sorted. Note that the array is sorted _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## [Description](#description)\n\nIf `compareFn` is not supplied, all non-`undefined` array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, \"banana\" comes before \"cherry\". In a numeric sort, 9 comes before 80, but because numbers are converted to strings, \"80\" comes before \"9\" in the Unicode order. All `undefined` elements are sorted to the end of the array.\n\nThe `sort()` method preserves empty slots. If the source array is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots are moved to the end of the array, and always come after all the `undefined`.\n\n**Note:** In UTF-16, Unicode characters above `\\uFFFF` are encoded as two surrogate code units, of the range `\\uD800` - `\\uDFFF`. The value of each code unit is taken separately into account for the comparison. Thus the character formed by the surrogate pair `\\uD855\\uDE51` will be sorted before the character `\\uFF3A`.\n\nIf `compareFn` is supplied, all non-`undefined` array elements are sorted according to the return value of the compare function (all `undefined` elements are sorted to the end of the array, with no call to `compareFn`).\n\n| `compareFn(a, b)` return value | sort order |\n| --- | --- |\n| \\> 0 | sort `a` after `b`, e.g. `[b, a]` |\n| < 0 | sort `a` before `b`, e.g. `[a, b]` |\n| \\=== 0 | keep original order of `a` and `b` |\n\nSo, the compare function has the following form:\n\n```\nfunction compareFn(a, b) {\n  if (a is less than b by some ordering criterion) {\n    return -1;\n  } else if (a is greater than b by the ordering criterion) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}\n```\n\nMore formally, the comparator is expected to have the following properties, in order to ensure proper sort behavior:\n\n*   _Pure_: The comparator does not mutate the objects being compared or any external state. (This is important because there's no guarantee _when_ and _how_ the comparator will be called, so any particular call should not produce visible effects to the outside.)\n*   _Stable_: The comparator returns the same result with the same pair of input.\n*   _Reflexive_: `compareFn(a, a) === 0`.\n*   _Anti-symmetric_: `compareFn(a, b)` and `compareFn(b, a)` must both be `0` or have opposite signs.\n*   _Transitive_: If `compareFn(a, b)` and `compareFn(b, c)` are both positive, zero, or negative, then `compareFn(a, c)` has the same positivity as the previous two.\n\nA comparator conforming to the constraints above will always be able to return all of `1`, `0`, and `-1`, or consistently return `0`. For example, if a comparator only returns `1` and `0`, or only returns `0` and `-1`, it will not be able to sort reliably because _anti-symmetry_ is broken. A comparator that always returns `0` will cause the array to not be changed at all, but is reliable nonetheless.\n\nThe default lexicographic comparator satisfies all constraints above.\n\nTo compare numbers instead of strings, the compare function can subtract `b` from `a`. The following function will sort the array in ascending order (if it doesn't contain `NaN`):\n\n```\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n```\n\nThe `sort()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Creating, displaying, and sorting an array](#creating_displaying_and_sorting_an_array)\n\nThe following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without a compare function, then sorted using one.\n\n```\nconst stringArray = [\"Blue\", \"Humpback\", \"Beluga\"];\nconst numberArray = [40, 1, 5, 200];\nconst numericStringArray = [\"80\", \"9\", \"700\"];\nconst mixedNumericArray = [\"80\", \"9\", \"700\", 40, 1, 5, 200];\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nstringArray.join(); // 'Blue,Humpback,Beluga'\nstringArray.sort(); // ['Beluga', 'Blue', 'Humpback']\n\nnumberArray.join(); // '40,1,5,200'\nnumberArray.sort(); // [1, 200, 40, 5]\nnumberArray.sort(compareNumbers); // [1, 5, 40, 200]\n\nnumericStringArray.join(); // '80,9,700'\nnumericStringArray.sort(); // ['700', '80', '9']\nnumericStringArray.sort(compareNumbers); // ['9', '80', '700']\n\nmixedNumericArray.join(); // '80,9,700,40,1,5,200'\nmixedNumericArray.sort(); // [1, 200, 40, 5, '700', '80', '9']\nmixedNumericArray.sort(compareNumbers); // [1, 5, '9', 40, '80', 200, '700']\n```\n\n### [Sorting array of objects](#sorting_array_of_objects)\n\nArrays of objects can be sorted by comparing the value of one of their properties.\n\n```\nconst items = [\n  { name: \"Edward\", value: 21 },\n  { name: \"Sharpe\", value: 37 },\n  { name: \"And\", value: 45 },\n  { name: \"The\", value: -12 },\n  { name: \"Magnetic\", value: 13 },\n  { name: \"Zeros\", value: 37 },\n];\n\n// sort by value\nitems.sort((a, b) => a.value - b.value);\n\n// sort by name\nitems.sort((a, b) => {\n  const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  // names must be equal\n  return 0;\n});\n```\n\n### [Sorting non-ASCII characters](#sorting_non-ascii_characters)\n\nFor sorting strings with non-[ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) characters, i.e. strings with accented characters (e, é, è, a, ä, etc.), strings from languages other than English, use [`String.prototype.localeCompare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare). This function can compare those characters so they appear in the right order.\n\n```\nconst items = [\"réservé\", \"premier\", \"communiqué\", \"café\", \"adieu\", \"éclair\"];\nitems.sort((a, b) => a.localeCompare(b));\n\n// items is ['adieu', 'café', 'communiqué', 'éclair', 'premier', 'réservé']\n```\n\n### [Sorting with map](#sorting_with_map)\n\nThe `compareFn` can be invoked multiple times per element within the array. Depending on the `compareFn`'s nature, this may yield a high overhead. The more work a `compareFn` does and the more elements there are to sort, it may be more efficient to use [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) for sorting. The idea is to traverse the array once to extract the actual values used for sorting into a temporary array, sort the temporary array, and then traverse the temporary array to achieve the right order.\n\n```\n// the array to be sorted\nconst data = [\"delta\", \"alpha\", \"charlie\", \"bravo\"];\n\n// temporary array holds objects with position and sort-value\nconst mapped = data.map((v, i) => {\n  return { i, value: someSlowOperation(v) };\n});\n\n// sorting the mapped array containing the reduced values\nmapped.sort((a, b) => {\n  if (a.value > b.value) {\n    return 1;\n  }\n  if (a.value < b.value) {\n    return -1;\n  }\n  return 0;\n});\n\nconst result = mapped.map((v) => data[v.i]);\n```\n\nThere is an open source library available called [mapsort](https://github.com/Pimm/mapsort) which applies this approach.\n\n### [sort() returns the reference to the same array](#sort_returns_the_reference_to_the_same_array)\n\nThe `sort()` method returns a reference to the original array, so mutating the returned array will mutate the original array as well.\n\n```\nconst numbers = [3, 1, 4, 1, 5];\nconst sorted = numbers.sort((a, b) => a - b);\n// numbers and sorted are both [1, 1, 3, 4, 5]\nsorted[0] = 10;\nconsole.log(numbers[0]); // 10\n```\n\nIn case you want `sort()` to not mutate the original array, but return a [shallow-copied](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) array like other array methods (e.g. [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) do, use the [`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted) method. Alternatively, you can do a shallow copy before calling `sort()`, using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n```\nconst numbers = [3, 1, 4, 1, 5];\n// [...numbers] creates a shallow copy, so sort() does not mutate the original\nconst sorted = [...numbers].sort((a, b) => a - b);\nsorted[0] = 10;\nconsole.log(numbers[0]); // 3\n```\n\n### [Sort stability](#sort_stability)\n\nSince version 10 (or ECMAScript 2019), the specification dictates that `Array.prototype.sort` is stable.\n\nFor example, say you had a list of students alongside their grades. Note that the list of students is already pre-sorted by name in alphabetical order:\n\n```\nconst students = [\n  { name: \"Alex\", grade: 15 },\n  { name: \"Devlin\", grade: 15 },\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n];\n```\n\nAfter sorting this array by `grade` in ascending order:\n\n```\nstudents.sort((firstItem, secondItem) => firstItem.grade - secondItem.grade);\n```\n\nThe `students` variable will then have the following value:\n\n```\n[\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n  { name: \"Alex\", grade: 15 }, // original maintained for similar grade (stable sorting)\n  { name: \"Devlin\", grade: 15 }, // original maintained for similar grade (stable sorting)\n];\n```\n\nIt's important to note that students that have the same grade (for example, Alex and Devlin), will remain in the same order as before calling the sort. This is what a stable sorting algorithm guarantees.\n\nBefore version 10 (or ECMAScript 2019), sort stability was not guaranteed, meaning that you could end up with the following:\n\n```\n[\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n  { name: \"Devlin\", grade: 15 }, // original order not maintained\n  { name: \"Alex\", grade: 15 }, // original order not maintained\n];\n```\n\n### [Sorting with non-well-formed comparator](#sorting_with_non-well-formed_comparator)\n\nIf a comparing function does not satisfy all of purity, stability, reflexivity, anti-symmetry, and transitivity rules, as explained in the [description](#description), the program's behavior is not well-defined.\n\nFor example, consider this code:\n\n```\nconst arr = [3, 1, 4, 1, 5, 9];\nconst compareFn = (a, b) => (a > b ? 1 : 0);\narr.sort(compareFn);\n```\n\nThe `compareFn` function here is not well-formed, because it does not satisfy anti-symmetry: if `a > b`, it returns `1`; but by swapping `a` and `b`, it returns `0` instead of a negative value. Therefore, the resulting array will be different across engines. For example, V8 (used by Chrome, Node.js, etc.) and JavaScriptCore (used by Safari) would not sort the array at all and return `[3, 1, 4, 1, 5, 9]`, while SpiderMonkey (used by Firefox) will return the array sorted ascendingly, as `[1, 1, 3, 4, 5, 9]`.\n\nHowever, if the `compareFn` function is changed slightly so that it returns `-1` or `0`:\n\n```\nconst arr = [3, 1, 4, 1, 5, 9];\nconst compareFn = (a, b) => (a > b ? -1 : 0);\narr.sort(compareFn);\n```\n\nThen V8 and JavaScriptCore sorts it descendingly, as `[9, 5, 4, 3, 1, 1]`, while SpiderMonkey returns it as-is: `[3, 1, 4, 1, 5, 9]`.\n\nDue to this implementation inconsistency, you are always advised to make your comparator well-formed by following the five constraints.\n\n### [Using sort() on sparse arrays](#using_sort_on_sparse_arrays)\n\nEmpty slots are moved to the end of the array.\n\n```\nconsole.log([\"a\", \"c\", , \"b\"].sort()); // ['a', 'b', 'c', empty]\nconsole.log([, undefined, \"a\", \"b\"].sort()); // [\"a\", \"b\", undefined, empty]\n```\n\n### [Calling sort() on non-array objects](#calling_sort_on_non-array_objects)\n\nThe `sort()` method reads the `length` property of `this`. It then collects all existing integer-keyed properties in the range of `0` to `length - 1`, sorts them, and writes them back. If there are missing properties in the range, the corresponding trailing properties are [deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete), as if the non-existent properties are sorted towards the end.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.sort.call(arrayLike));\n// { '0': 4, '1': 5, length: 3, unrelated: 'foo' }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.sort](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.sort) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.sort() - JavaScript | MDN",
    "description": "The sort() method of Array instances sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed",
    "markdown": "# Array.prototype.toReversed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`toReversed()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) counterpart of the [`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) method. It returns a new array with the elements in reversed order.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new array containing the elements in reversed order.\n\n## [Description](#description)\n\nThe `toReversed()` method transposes the elements of the calling array object in reverse order and returns a new array.\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toReversed()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toReversed()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Reversing the elements in an array](#reversing_the_elements_in_an_array)\n\nThe following example creates an array `items`, containing three elements, then creates a new array that's the reverse of `items`. The `items` array remains unchanged.\n\n```\nconst items = [1, 2, 3];\nconsole.log(items); // [1, 2, 3]\n\nconst reversedItems = items.toReversed();\nconsole.log(reversedItems); // [3, 2, 1]\nconsole.log(items); // [1, 2, 3]\n```\n\n### [Using toReversed() on sparse arrays](#using_toreversed_on_sparse_arrays)\n\nThe return value of `toReversed()` is never sparse. Empty slots become `undefined` in the returned array.\n\n```\nconsole.log([1, , 3].toReversed()); // [3, undefined, 1]\nconsole.log([1, , 3, 4].toReversed()); // [4, 3, undefined, 1]\n```\n\n### [Calling toReversed() on non-array objects](#calling_toreversed_on_non-array_objects)\n\nThe `toReversed()` method reads the `length` property of `this`. It then visits each property having an integer key between `length - 1` and `0` in descending order, adding the value of the current property to the end of the array to be returned.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.toReversed.call(arrayLike));\n// [4, undefined, undefined]\n// The '0' and '1' indices are not present so they become undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.toreversed](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.toreversed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.toReversed() - JavaScript | MDN",
    "description": "The toReversed() method of Array instances is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted",
    "markdown": "# Array.prototype.toSorted() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`toSorted()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method. It returns a new array with the elements sorted in ascending order.\n\n## [Syntax](#syntax)\n\n```\ntoSorted()\ntoSorted(compareFn)\n```\n\n### [Parameters](#parameters)\n\n[`compareFn`](#comparefn) Optional\n\nA function that determines the order of the elements. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. See [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for more information.\n\n### [Return value](#return_value)\n\nA new array with the elements sorted in ascending order.\n\n## [Description](#description)\n\nSee [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for more information on the `compareFn` parameter.\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toSorted()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toSorted()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Sorting an array](#sorting_an_array)\n\n```\nconst months = [\"Mar\", \"Jan\", \"Feb\", \"Dec\"];\nconst sortedMonths = months.toSorted();\nconsole.log(sortedMonths); // ['Dec', 'Feb', 'Jan', 'Mar']\nconsole.log(months); // ['Mar', 'Jan', 'Feb', 'Dec']\n\nconst values = [1, 10, 21, 2];\nconst sortedValues = values.toSorted((a, b) => a - b);\nconsole.log(sortedValues); // [1, 2, 10, 21]\nconsole.log(values); // [1, 10, 21, 2]\n```\n\nFor more usage examples, see [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\n### [Using toSorted() on sparse arrays](#using_tosorted_on_sparse_arrays)\n\nEmpty slots are sorted as if they have the value `undefined`. They are always sorted to the end of the array and `compareFn` is not called for them.\n\n```\nconsole.log([\"a\", \"c\", , \"b\"].toSorted()); // ['a', 'b', 'c', undefined]\nconsole.log([, undefined, \"a\", \"b\"].toSorted()); // [\"a\", \"b\", undefined, undefined]\n```\n\n### [Calling toSorted() on non-array objects](#calling_tosorted_on_non-array_objects)\n\nThe `toSorted()` method reads the `length` property of `this`. It then collects all existing integer-keyed properties in the range of `0` to `length - 1`, sorts them, and writes them into a new array.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n  3: 3, // ignored by toSorted() since length is 3\n};\nconsole.log(Array.prototype.toSorted.call(arrayLike));\n// [4, 5, undefined]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.tosorted](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.tosorted) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.toSorted() - JavaScript | MDN",
    "description": "The toSorted() method of Array instances is the copying version of the sort() method. It returns a new array with the elements sorted in ascending order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced",
    "markdown": "# Array.prototype.toSpliced() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`toSpliced()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method. It returns a new array with some elements removed and/or replaced at a given index.\n\n## [Syntax](#syntax)\n\n```\ntoSpliced(start)\ntoSpliced(start, deleteCount)\ntoSpliced(start, deleteCount, item1)\ntoSpliced(start, deleteCount, item1, item2)\ntoSpliced(start, deleteCount, item1, item2, /* …, */ itemN)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start)\n\nZero-based index at which to start changing the array, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n*   If `start < -array.length` or `start` is omitted, `0` is used.\n*   If `start >= array.length`, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.\n\n[`deleteCount`](#deletecount) Optional\n\nAn integer indicating the number of elements in the array to remove from `start`.\n\nIf `deleteCount` is omitted, or if its value is greater than or equal to the number of elements after the position specified by `start`, then all the elements from `start` to the end of the array will be deleted. However, if you wish to pass any `itemN` parameter, you should pass `Infinity` as `deleteCount` to delete all elements after `start`, because an explicit `undefined` gets [converted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) to `0`.\n\nIf `deleteCount` is `0` or negative, no elements are removed. In this case, you should specify at least one new element (see below).\n\n[`item1`](#item1), …, `itemN` Optional\n\nThe elements to add to the array, beginning from `start`.\n\nIf you do not specify any elements, `toSpliced()` will only remove elements from the array.\n\n### [Return value](#return_value)\n\nA new array that consists of all elements before `start`, `item1`, `item2`, …, `itemN`, and all elements after `start + deleteCount`.\n\n## [Description](#description)\n\nThe `toSpliced()` method, like `splice()`, does multiple things at once: it removes the given number of elements from the array, starting at a given index, and then inserts the given elements at the same index. However, it returns a new array instead of modifying the original array. The deleted elements therefore are not returned from this method.\n\nThe `toSpliced()` method never produces a [sparse array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). If the source array is sparse, the empty slots will be replaced with `undefined` in the new array.\n\nThe `toSpliced()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Deleting, adding, and replacing elements](#deleting_adding_and_replacing_elements)\n\nYou can use `toSpliced()` to delete, add, and replace elements in an array and create a new array more efficiently than using `slice()` and `concat()`.\n\n```\nconst months = [\"Jan\", \"Mar\", \"Apr\", \"May\"];\n\n// Inserting an element at index 1\nconst months2 = months.toSpliced(1, 0, \"Feb\");\nconsole.log(months2); // [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\n\n// Deleting two elements starting from index 2\nconst months3 = months2.toSpliced(2, 2);\nconsole.log(months3); // [\"Jan\", \"Feb\", \"May\"]\n\n// Replacing one element at index 1 with two new elements\nconst months4 = months3.toSpliced(1, 1, \"Feb\", \"Mar\");\nconsole.log(months4); // [\"Jan\", \"Feb\", \"Mar\", \"May\"]\n\n// Original array is not modified\nconsole.log(months); // [\"Jan\", \"Mar\", \"Apr\", \"May\"]\n```\n\n### [Using toSpliced() on sparse arrays](#using_tospliced_on_sparse_arrays)\n\nThe `toSpliced()` method always creates a dense array.\n\n```\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.toSpliced(1, 2)); // [1, 4, undefined, 6]\n```\n\n### [Calling toSpliced() on non-array objects](#calling_tospliced_on_non-array_objects)\n\nThe `toSpliced()` method reads the `length` property of `this`. It then reads the integer-keyed properties needed and writes them into the new array.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.toSpliced.call(arrayLike, 0, 1, 2, 3));\n// [2, 3, undefined, 4]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.tospliced](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.tospliced) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.toSpliced() - JavaScript | MDN",
    "description": "The toSpliced() method of Array instances is the copying version of the splice() method. It returns a new array with some elements removed and/or replaced at a given index.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag",
    "markdown": "# Symbol.toStringTag - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.toStringTag`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@toStringTag`. [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) looks up this symbol on the `this` value for the property containing a string that represents the type of the object.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@toStringTag`.\n\n| Property attributes of `Symbol.toStringTag` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [Default tags](#default_tags)\n\nSome values do not have `Symbol.toStringTag`, but have special `toString()` representations. For a complete list, see [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n```\nObject.prototype.toString.call(\"foo\"); // \"[object String]\"\nObject.prototype.toString.call([1, 2]); // \"[object Array]\"\nObject.prototype.toString.call(3); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call(undefined); // \"[object Undefined]\"\nObject.prototype.toString.call(null); // \"[object Null]\"\n// ... and more\n```\n\n### [Built-in toStringTag symbols](#built-in_tostringtag_symbols)\n\nMost built-in objects provide their own `@@toStringTag` property. Almost all built-in objects' `@@toStringTag` property is not writable, not enumerable, and configurable; the exception is [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator), which is writable for compatibility reasons.\n\nFor constructor objects like [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), the property is installed on `Constructor.prototype`, so that all instances of the constructor inherit `@@toStringTag` and can be stringified. For non-constructor objects like [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) and [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON), the property is installed as a static property, so that the namespace object itself can be stringified. Sometimes, the constructor also provides its own `toString` method (for example, [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)), in which case the `@@toStringTag` property is only used when you explicitly call `Object.prototype.toString` on it.\n\n```\nObject.prototype.toString.call(new Map()); // \"[object Map]\"\nObject.prototype.toString.call(function* () {}); // \"[object GeneratorFunction]\"\nObject.prototype.toString.call(Promise.resolve()); // \"[object Promise]\"\n// ... and more\n```\n\n### [Custom tag with toStringTag](#custom_tag_with_tostringtag)\n\nWhen creating your own class, JavaScript defaults to the \"Object\" tag:\n\n```\nclass ValidatorClass {}\n\nObject.prototype.toString.call(new ValidatorClass()); // \"[object Object]\"\n```\n\nNow, with the help of `toStringTag`, you are able to set your own custom tag:\n\n```\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return \"Validator\";\n  }\n}\n\nObject.prototype.toString.call(new ValidatorClass()); // \"[object Validator]\"\n```\n\n### [toStringTag available on all DOM prototype objects](#tostringtag_available_on_all_dom_prototype_objects)\n\nDue to a [WebIDL spec change](https://github.com/whatwg/webidl/pull/357) in mid-2020, browsers are adding a `Symbol.toStringTag` property to all DOM prototype objects. For example, to access the `Symbol.toStringTag` property on [`HTMLButtonElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement):\n\n```\nconst test = document.createElement(\"button\");\ntest.toString(); // \"[object HTMLButtonElement]\"\ntest[Symbol.toStringTag]; // \"HTMLButtonElement\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.tostringtag](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.tostringtag) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Symbol.toStringTag - JavaScript | MDN",
    "description": "The Symbol.toStringTag static data property represents the well-known symbol @@toStringTag. Object.prototype.toString() looks up this symbol on the this value for the property containing a string that represents the type of the object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",
    "markdown": "# Array.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toString()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a string representing the specified array and its elements.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the elements of the array.\n\n## [Description](#description)\n\nThe [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). The `toString` method of arrays calls [`join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) internally, which joins the array and returns one string containing each array element separated by commas. If the `join` method is unavailable or is not a function, [`Object.prototype.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) is used instead, returning `[object Array]`.\n\n```\nconst arr = [];\narr.join = 1; // re-assign `join` with a non-function\nconsole.log(arr.toString()); // [object Array]\n\nconsole.log(Array.prototype.toString.call({ join: () => 1 })); // 1\n```\n\nJavaScript calls the `toString` method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.\n\n`Array.prototype.toString` recursively converts each element, including other arrays, to strings. Because the string returned by `Array.prototype.toString` does not have delimiters, nested arrays look like they are flattened.\n\n```\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrix.toString()); // 1,2,3,4,5,6,7,8,9\n```\n\nWhen an array is cyclic (it contains an element that is itself), browsers avoid infinite recursion by ignoring the cyclic reference.\n\n```\nconst arr = [];\narr.push(1, [3, arr, 4], 2);\nconsole.log(arr.toString()); // 1,3,,4,2\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nconst array1 = [1, 2, \"a\", \"1a\"];\n\nconsole.log(array1.toString()); // \"1,2,a,1a\"\n```\n\n### [Using toString() on sparse arrays](#using_tostring_on_sparse_arrays)\n\nFollowing the behavior of `join()`, `toString()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```\nconsole.log([1, , 3].toString()); // '1,,3'\n```\n\n### [Calling toString() on non-array objects](#calling_tostring_on_non-array_objects)\n\n`toString()` is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It expects `this` to have a `join()` method; or, failing that, uses `Object.prototype.toString()` instead.\n\n```\nconsole.log(Array.prototype.toString.call({ join: () => 1 }));\n// 1; a number\nconsole.log(Array.prototype.toString.call({ join: () => undefined }));\n// undefined\nconsole.log(Array.prototype.toString.call({ join: \"not function\" }));\n// \"[object Object]\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.tostring](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of Array instances returns a string representing the\n  specified array and its elements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array",
    "markdown": "# Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Array()`** constructor creates [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Array()\nnew Array(element1)\nnew Array(element1, element2)\nnew Array(element1, element2, /* …, */ elementN)\nnew Array(arrayLength)\n\nArray()\nArray(element1)\nArray(element1, element2)\nArray(element1, element2, /* …, */ elementN)\nArray(arrayLength)\n```\n\n**Note:** `Array()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Array` instance.\n\n### [Parameters](#parameters)\n\n[`element1`](#element1), …, `elementN`\n\nA JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the `Array` constructor and that argument is a number (see the `arrayLength` parameter below). Note that this special case only applies to JavaScript arrays created with the `Array` constructor, not array literals created with the square bracket syntax.\n\n[`arrayLength`](#arraylength)\n\nIf the only argument passed to the `Array` constructor is an integer between 0 and 232 - 1 (inclusive), this returns a new JavaScript array with its `length` property set to that number (**Note:** this implies an array of `arrayLength` empty slots, not slots with actual `undefined` values — see [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays)).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if there's only one argument (`arrayLength`) that is a number, but its value is not an integer or not between 0 and 232 - 1 (inclusive).\n\n## [Examples](#examples)\n\n### [Array literal notation](#array_literal_notation)\n\nArrays can be created using the [literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) notation:\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\n\nconsole.log(fruits.length); // 2\nconsole.log(fruits[0]); // \"Apple\"\n```\n\n### [Array constructor with a single parameter](#array_constructor_with_a_single_parameter)\n\nArrays can be created using a constructor with a single number parameter. An array is created with its `length` property set to that number, and the array elements are empty slots.\n\n```\nconst arrayEmpty = new Array(2);\n\nconsole.log(arrayEmpty.length); // 2\nconsole.log(arrayEmpty[0]); // undefined; actually, it is an empty slot\nconsole.log(0 in arrayEmpty); // false\nconsole.log(1 in arrayEmpty); // false\n```\n\n```\nconst arrayOfOne = new Array(\"2\"); // Not the number 2 but the string \"2\"\n\nconsole.log(arrayOfOne.length); // 1\nconsole.log(arrayOfOne[0]); // \"2\"\n```\n\n### [Array constructor with multiple parameters](#array_constructor_with_multiple_parameters)\n\nIf more than one argument is passed to the constructor, a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) with the given elements is created.\n\n```\nconst fruits = new Array(\"Apple\", \"Banana\");\n\nconsole.log(fruits.length); // 2\nconsole.log(fruits[0]); // \"Apple\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array-constructor](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array() constructor - JavaScript | MDN",
    "description": "The Array() constructor creates Array objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from",
    "markdown": "# Array.from() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Array.from()`** static method creates a new, shallow-copied `Array` instance from an [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) or [array-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nArray.from(arrayLike)\nArray.from(arrayLike, mapFn)\nArray.from(arrayLike, mapFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`arrayLike`](#arraylike)\n\nAn iterable or array-like object to convert to an array.\n\n[`mapFn`](#mapfn) Optional\n\nA function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the array instead. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`thisArg`](#thisarg) Optional\n\nValue to use as `this` when executing `mapFn`.\n\n### [Return value](#return_value)\n\nA new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance.\n\n## [Description](#description)\n\n`Array.from()` lets you create `Array`s from:\n\n*   [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) (objects such as [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)); or, if the object is not iterable,\n*   array-like objects (objects with a `length` property and indexed elements).\n\nTo convert an ordinary object that's not iterable or array-like to an array (by enumerating its property keys, values, or both), use [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), [`Object.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values), or [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries). To convert an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) to an array, use [`Array.fromAsync()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync).\n\n`Array.from()` never creates a sparse array. If the `arrayLike` object is missing some index properties, they become `undefined` in the new array.\n\n`Array.from()` has an optional parameter `mapFn`, which allows you to execute a function on each element of the array being created, similar to [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). More clearly, `Array.from(obj, mapFn, thisArg)` has the same result as `Array.from(obj).map(mapFn, thisArg)`, except that it does not create an intermediate array, and `mapFn` only receives two arguments (`element`, `index`) without the whole array, because the array is still under construction.\n\n**Note:** This behavior is more important for [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays), since the intermediate array would necessarily have values truncated to fit into the appropriate type. `Array.from()` is implemented to have the same signature as [`TypedArray.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from).\n\nThe `Array.from()` method is a generic factory method. For example, if a subclass of `Array` inherits the `from()` method, the inherited `from()` method will return new instances of the subclass instead of `Array` instances. In fact, the `this` value can be any constructor function that accepts a single argument representing the length of the new array. When an iterable is passed as `arrayLike`, the constructor is called with no arguments; when an array-like object is passed, the constructor is called with the [normalized length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) of the array-like object. The final `length` will be set again when iteration finishes. If the `this` value is not a constructor function, the plain `Array` constructor is used instead.\n\n## [Examples](#examples)\n\n### [Array from a String](#array_from_a_string)\n\n```\nArray.from(\"foo\");\n// [ \"f\", \"o\", \"o\" ]\n```\n\n### [Array from a Set](#array_from_a_set)\n\n```\nconst set = new Set([\"foo\", \"bar\", \"baz\", \"foo\"]);\nArray.from(set);\n// [ \"foo\", \"bar\", \"baz\" ]\n```\n\n### [Array from a Map](#array_from_a_map)\n\n```\nconst map = new Map([\n  [1, 2],\n  [2, 4],\n  [4, 8],\n]);\nArray.from(map);\n// [[1, 2], [2, 4], [4, 8]]\n\nconst mapper = new Map([\n  [\"1\", \"a\"],\n  [\"2\", \"b\"],\n]);\nArray.from(mapper.values());\n// ['a', 'b'];\n\nArray.from(mapper.keys());\n// ['1', '2'];\n```\n\n### [Array from a NodeList](#array_from_a_nodelist)\n\n```\n// Create an array based on a property of DOM Elements\nconst images = document.querySelectorAll(\"img\");\nconst sources = Array.from(images, (image) => image.src);\nconst insecureSources = sources.filter((link) => link.startsWith(\"http://\"));\n```\n\n### [Array from an Array-like object (arguments)](#array_from_an_array-like_object_arguments)\n\n```\nfunction f() {\n  return Array.from(arguments);\n}\n\nf(1, 2, 3);\n\n// [ 1, 2, 3 ]\n```\n\n### [Using arrow functions and Array.from()](#using_arrow_functions_and_array.from)\n\n```\n// Using an arrow function as the map function to\n// manipulate the elements\nArray.from([1, 2, 3], (x) => x + x);\n// [2, 4, 6]\n\n// Generate a sequence of numbers\n// Since the array is initialized with `undefined` on each position,\n// the value of `v` below will be `undefined`\nArray.from({ length: 5 }, (v, i) => i);\n// [0, 1, 2, 3, 4]\n```\n\n### [Sequence generator (range)](#sequence_generator_range)\n\n```\n// Sequence generator function (commonly referred to as \"range\", e.g. Clojure, PHP, etc.)\nconst range = (start, stop, step) =>\n  Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);\n\n// Generate numbers range 0..4\nrange(0, 4, 1);\n// [0, 1, 2, 3, 4]\n\n// Generate numbers range 1..10 with step of 2\nrange(1, 10, 2);\n// [1, 3, 5, 7, 9]\n\n// Generate the alphabet using Array.from making use of it being ordered as a sequence\nrange(\"A\".charCodeAt(0), \"Z\".charCodeAt(0), 1).map((x) =>\n  String.fromCharCode(x),\n);\n// [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n```\n\n### [Calling from() on non-array constructors](#calling_from_on_non-array_constructors)\n\nThe `from()` method can be called on any constructor function that accepts a single argument representing the length of the new array.\n\n```\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\n// Iterable\nconsole.log(Array.from.call(NotArray, new Set([\"foo\", \"bar\", \"baz\"])));\n// NotArray called with length undefined\n// NotArray { '0': 'foo', '1': 'bar', '2': 'baz', length: 3 }\n\n// Array-like\nconsole.log(Array.from.call(NotArray, { length: 1, 0: \"foo\" }));\n// NotArray called with length 1\n// NotArray { '0': 'foo', length: 1 }\n```\n\nWhen the `this` value is not a constructor, a plain `Array` object is returned.\n\n```\nconsole.log(Array.from.call({}, { length: 1, 0: \"foo\" })); // [ 'foo' ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.from](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.from) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.from() - JavaScript | MDN",
    "description": "The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",
    "markdown": "# Array.prototype.unshift() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`unshift()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances adds the specified elements to the beginning of an array and returns the new length of the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nunshift()\nunshift(element1)\nunshift(element1, element2)\nunshift(element1, element2, /* …, */ elementN)\n```\n\n### [Parameters](#parameters)\n\n[`element1`](#element1), …, `elementN`\n\nThe elements to add to the front of the `arr`.\n\n### [Return value](#return_value)\n\nThe new [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property of the object upon which the method was called.\n\n## [Description](#description)\n\nThe `unshift()` method inserts the given values to the beginning of an array-like object.\n\n[`Array.prototype.push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) has similar behavior to `unshift()`, but applied to the end of an array.\n\nPlease note that, if multiple elements are passed as parameters, they're inserted in chunk at the beginning of the object, in the exact same order they were passed as parameters. Hence, calling `unshift()` with `n` arguments **once**, or calling it `n` times with **1** argument (with a loop, for example), don't yield the same results.\n\nSee example:\n\n```\nlet arr = [4, 5, 6];\n\narr.unshift(1, 2, 3);\nconsole.log(arr);\n// [1, 2, 3, 4, 5, 6]\n\narr = [4, 5, 6]; // resetting the array\n\narr.unshift(1);\narr.unshift(2);\narr.unshift(3);\n\nconsole.log(arr);\n// [3, 2, 1, 4, 5, 6]\n```\n\nThe `unshift()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Using unshift()](#using_unshift)\n\n```\nconst arr = [1, 2];\n\narr.unshift(0); // result of the call is 3, which is the new array length\n// arr is [0, 1, 2]\n\narr.unshift(-2, -1); // the new array length is 5\n// arr is [-2, -1, 0, 1, 2]\n\narr.unshift([-4, -3]); // the new array length is 6\n// arr is [[-4, -3], -2, -1, 0, 1, 2]\n\narr.unshift([-7, -6], [-5]); // the new array length is 8\n// arr is [ [-7, -6], [-5], [-4, -3], -2, -1, 0, 1, 2 ]\n```\n\n### [Calling unshift() on non-array objects](#calling_unshift_on_non-array_objects)\n\nThe `unshift()` method reads the `length` property of `this`. It shifts all indices in the range `0` to `length - 1` right by the number of arguments (incrementing their values by this number). Then, it sets each index starting at `0` with the arguments passed to `unshift()`. Finally, it sets the `length` to the previous length plus the number of prepended elements.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nArray.prototype.unshift.call(arrayLike, 1, 2);\nconsole.log(arrayLike);\n// { '0': 1, '1': 2, '4': 4, length: 5, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.unshift.call(plainObj, 1, 2);\nconsole.log(plainObj);\n// { '0': 1, '1': 2, length: 2 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.unshift](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.unshift) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.unshift() - JavaScript | MDN",
    "description": "The unshift() method of Array instances adds the specified elements to the\n  beginning of an array and returns the new length of the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values",
    "markdown": "# Array.prototype.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`values()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that iterates the value of each item in the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\n`Array.prototype.values()` is the default implementation of [`Array.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator).\n\n```\nArray.prototype.values === Array.prototype[Symbol.iterator]; // true\n```\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `values()` method iterates empty slots as if they have the value `undefined`.\n\nThe `values()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nBecause `values()` returns an iterable iterator, you can use a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to iterate it.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\n\nfor (const letter of iterator) {\n  console.log(letter);\n} // \"a\" \"b\" \"c\" \"d\" \"e\"\n```\n\n### [Iteration using next()](#iteration_using_next)\n\nBecause the return value is also an iterator, you can directly call its `next()` method.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\niterator.next(); // { value: \"a\", done: false }\niterator.next(); // { value: \"b\", done: false }\niterator.next(); // { value: \"c\", done: false }\niterator.next(); // { value: \"d\", done: false }\niterator.next(); // { value: \"e\", done: false }\niterator.next(); // { value: undefined, done: true }\nconsole.log(iterator.next().value); // undefined\n```\n\n### [Reusing the iterable](#reusing_the_iterable)\n\n**Warning:** The array iterator object should be a one-time use object. Do not reuse it.\n\nThe iterable returned from `values()` is not reusable. When `next().done = true` or `currentIndex > length`, [the `for...of` loop ends](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#interactions_between_the_language_and_iteration_protocols), and further iterating it has no effect.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst values = arr.values();\nfor (const letter of values) {\n  console.log(letter);\n}\n// \"a\" \"b\" \"c\" \"d\" \"e\"\nfor (const letter of values) {\n  console.log(letter);\n}\n// undefined\n```\n\nIf you use a [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to end the iteration early, the iterator can resume from the current position when continuing to iterate it.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst values = arr.values();\nfor (const letter of values) {\n  console.log(letter);\n  if (letter === \"b\") {\n    break;\n  }\n}\n// \"a\" \"b\"\n\nfor (const letter of values) {\n  console.log(letter);\n}\n// \"c\" \"d\" \"e\"\n```\n\n### [Mutations during iteration](#mutations_during_iteration)\n\nThere are no values stored in the array iterator object returned from `values()`; instead, it stores the address of the array used in its creation, and reads the currently visited index on each iteration. Therefore, its iteration output depends on the value stored in that index at the time of stepping. If the values in the array changed, the array iterator object's values change too.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\nconsole.log(iterator); // Array Iterator { }\nconsole.log(iterator.next().value); // \"a\"\narr[1] = \"n\";\nconsole.log(iterator.next().value); // \"n\"\n```\n\nUnlike [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), the array iterator object does not save the array's length at the time of its creation, but reads it once on each iteration. Therefore, if the array grows during iteration, the iterator will visit the new elements too. This may lead to infinite loops.\n\n```\nconst arr = [1, 2, 3];\nfor (const e of arr) {\n  arr.push(e * 10);\n}\n// RangeError: invalid array length\n```\n\n### [Iterating sparse arrays](#iterating_sparse_arrays)\n\n`values()` will visit empty slots as if they are `undefined`.\n\n```\nfor (const element of [, \"a\"].values()) {\n  console.log(element);\n}\n// undefined\n// 'a'\n```\n\n### [Calling values() on non-array objects](#calling_values_on_non-array_objects)\n\nThe `values()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"d\", // ignored by values() since length is 3\n};\nfor (const entry of Array.prototype.values.call(arrayLike)) {\n  console.log(entry);\n}\n// a\n// b\n// c\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.values](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.values() - JavaScript | MDN",
    "description": "The values() method of Array instances returns a new array iterator object that iterates the value of each item in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of",
    "markdown": "# Array.of() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Array.of()`** static method creates a new `Array` instance from a variable number of arguments, regardless of number or type of the arguments.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nArray.of()\nArray.of(element1)\nArray.of(element1, element2)\nArray.of(element1, element2, /* …, */ elementN)\n```\n\n### [Parameters](#parameters)\n\n[`element1`](#element1), …, `elementN`\n\nElements used to create the array.\n\n### [Return value](#return_value)\n\nA new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance.\n\n## [Description](#description)\n\nThe difference between `Array.of()` and the [`Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array) constructor is in the handling of single arguments: `Array.of(7)` creates an array with a single element, `7`, whereas `Array(7)` creates an empty array with a `length` property of `7`. (That implies an array of 7 empty slots, not slots with actual [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) values.)\n\n```\nArray.of(7); // [7]\nArray(7); // array of 7 empty slots\n\nArray.of(1, 2, 3); // [1, 2, 3]\nArray(1, 2, 3); // [1, 2, 3]\n```\n\nThe `Array.of()` method is a generic factory method. For example, if a subclass of `Array` inherits the `of()` method, the inherited `of()` method will return new instances of the subclass instead of `Array` instances. In fact, the `this` value can be any constructor function that accepts a single argument representing the length of the new array, and the constructor will be called with the number of arguments passed to `of()`. The final `length` will be set again when all elements are assigned. If the `this` value is not a constructor function, the plain `Array` constructor is used instead.\n\n## [Examples](#examples)\n\n### [Using Array.of()](#using_array.of)\n\n```\nArray.of(1); // [1]\nArray.of(1, 2, 3); // [1, 2, 3]\nArray.of(undefined); // [undefined]\n```\n\n### [Calling of() on non-array constructors](#calling_of_on_non-array_constructors)\n\nThe `of()` method can be called on any constructor function that accepts a single argument representing the length of the new array.\n\n```\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\nconsole.log(Array.of.call(NotArray, 1, 2, 3));\n// NotArray called with length 3\n// NotArray { '0': 1, '1': 2, '2': 3, length: 3 }\n\nconsole.log(Array.of.call(Object)); // [Number: 0] { length: 0 }\n```\n\nWhen the `this` value is not a constructor, a plain `Array` object is returned.\n\n```\nconsole.log(Array.of.call({}, 1)); // [ 1 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.of](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.of) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.of() - JavaScript | MDN",
    "description": "The Array.of() static method creates a new Array\n  instance from a variable number of arguments, regardless of number or type of the\n  arguments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species",
    "markdown": "# Array\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Array[@@species]`** static accessor property returns the constructor used to construct return values from array methods.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible. Modern array methods, such as [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed), do not use `@@species` and always return a new `Array` base class instance.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array methods that create new arrays.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `Array` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```\n// Hypothetical underlying implementation for illustration\nclass Array {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```\nclass SubArray extends Array {}\nSubArray[Symbol.species] === SubArray; // true\n```\n\nWhen calling array methods that do not mutate the existing array but return a new array instance (for example, [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)), the array's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array method. This makes it technically possible to make array methods return objects unrelated to arrays.\n\n```\nclass NotAnArray {\n  constructor(length) {\n    this.length = length;\n  }\n}\n\nconst arr = [0, 1, 2];\narr.constructor = { [Symbol.species]: NotAnArray };\narr.map((i) => i); // NotAnArray { '0': 0, '1': 1, '2': 2, length: 3 }\narr.filter((i) => i); // NotAnArray { '0': 1, '1': 2, length: 0 }\narr.concat([1, 2]); // NotAnArray { '0': 0, '1': 1, '2': 2, '3': 1, '4': 2, length: 5 }\n```\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `Array` constructor for `Array`.\n\n```\nArray[Symbol.species]; // [Function: Array]\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `Array` subclass, such as `MyArray`, the `MyArray` species is the `MyArray` constructor. However, you might want to overwrite this, in order to return parent `Array` objects in your derived class methods:\n\n```\nclass MyArray extends Array {\n  // Overwrite MyArray species to the parent Array constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-array-@@species](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-array-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array[@@species] - JavaScript | MDN",
    "description": "The Array[@@species] static accessor property returns the constructor used to construct return values from array methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables",
    "markdown": "# Array.prototype\\[@@unscopables\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`@@unscopables`** data property of `Array.prototype` is shared by all [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\n## [Value](#value)\n\nA [`null`\\-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) with property names given below and their values set to `true`.\n\n| Property attributes of `Array.prototype[@@unscopables]` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThe default `Array` properties that are ignored for `with` statement-binding purposes are:\n\n*   [`at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at)\n*   [`copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n*   [`entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)\n*   [`fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n*   [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n*   [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n*   [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)\n*   [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)\n*   [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n*   [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n*   [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n*   [`keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)\n*   [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed)\n*   [`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted)\n*   [`toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced)\n*   [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)\n\n`Array.prototype[@@unscopables]` is an empty object only containing all the above property names with the value `true`. Its [prototype is `null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), so `Object.prototype` properties like [`toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) won't accidentally be made unscopable, and a `toString()` within the `with` statement will continue to be called on the array.\n\nSee [`Symbol.unscopables`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables) for how to set unscopable properties for your own objects.\n\n## [Examples](#examples)\n\nImagine the `values.push('something')` call below is in code that was written prior to ECMAScript 2015.\n\n```\nvar values = [];\n\nwith (values) {\n  values.push(\"something\");\n}\n```\n\nWhen ECMAScript 2015 introduced the [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) method, the `with` statement in the above code started to interpret `values` as the `values.values` array method instead of the external `values` variable. The `values.push('something')` call would break because it's now accessing `push` on the `values.values` method. This caused a bug to be reported to Firefox ([Firefox Bug 883914](https://bugzil.la/883914)).\n\nSo the `@@unscopables` data property for `Array.prototype` causes the `Array` properties introduced in ECMAScript 2015 to be ignored for `with` statement-binding purposes — allowing code that was written prior to ECMAScript 2015 to continue working as expected, rather than breaking.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype-@@unscopables](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype-@@unscopables) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype[@@unscopables] - JavaScript | MDN",
    "description": "The @@unscopables data property of Array.prototype is shared by all Array instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for with statement-binding purposes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with",
    "markdown": "# Array.prototype.with() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`with()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of using the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.\n\n## [Syntax](#syntax)\n\n```\narrayInstance.with(index, value)\n```\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index at which to change the array, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= index < 0`, `index + array.length` is used.\n*   If the index after normalization is out of bounds, a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown.\n\n[`value`](#value)\n\nAny value to be assigned to the given index.\n\n### [Return value](#return_value)\n\nA new array with the element at `index` replaced with `value`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index >= array.length` or `index < -array.length`.\n\n## [Description](#description)\n\nThe `with()` method changes the value of a given index in the array, returning a new array with the element at the given index replaced with the given value. The original array is not modified. This allows you to chain array methods while doing manipulations.\n\nBy combining `with()` with [`at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at), you can both write and read (respectively) an array using negative indices.\n\nThe `with()` method never produces a [sparse array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). If the source array is sparse, the empty slots will be replaced with `undefined` in the new array.\n\nThe `with()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Creating a new array with a single element changed](#creating_a_new_array_with_a_single_element_changed)\n\n```\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(arr.with(2, 6)); // [1, 2, 6, 4, 5]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n```\n\n### [Chaining array methods](#chaining_array_methods)\n\nWith the `with()` method, you can update a single element in an array and then apply other array methods.\n\n```\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(arr.with(2, 6).map((x) => x ** 2)); // [1, 4, 36, 16, 25]\n```\n\n### [Using with() on sparse arrays](#using_with_on_sparse_arrays)\n\nThe `with()` method always creates a dense array.\n\n```\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.with(0, 2)); // [2, undefined, 3, 4, undefined, 6]\n```\n\n### [Calling with() on non-array objects](#calling_with_on_non-array_objects)\n\nThe `with()` method creates and returns a new array. It reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. As each property of `this` is accessed, the array element having an index equal to the key of the property is set to the value of the property. Finally, the array value at `index` is set to `value`.\n\n```\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n  3: 3, // ignored by with() since length is 3\n};\nconsole.log(Array.prototype.with.call(arrayLike, 0, 1));\n// [ 1, undefined, 4 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.with](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.with) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.with() - JavaScript | MDN",
    "description": "The with() method of Array instances is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync",
    "markdown": "# Array.fromAsync() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`Array.fromAsync()`** static method creates a new, shallow-copied `Array` instance from an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols), [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), or [array-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) object.\n\n## [Syntax](#syntax)\n\n```\nArray.fromAsync(arrayLike)\nArray.fromAsync(arrayLike, mapFn)\nArray.fromAsync(arrayLike, mapFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`arrayLike`](#arraylike)\n\nAn async iterable, iterable, or array-like object to convert to an array.\n\n[`mapFn`](#mapfn) Optional\n\nA function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the array instead (after being [awaited](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)). The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array. Because all elements are first [awaited](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await), this value will never be a [thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables).\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`thisArg`](#thisarg) Optional\n\nValue to use as `this` when executing `mapFn`.\n\n### [Return value](#return_value)\n\nA new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) whose fulfillment value is a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance.\n\n## [Description](#description)\n\n`Array.fromAsync()` lets you create arrays from:\n\n*   [async iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) (objects such as [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) and [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)); or, if the object is not async iterable,\n*   [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (objects such as [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)); or, if the object is not iterable,\n*   array-like objects (objects with a `length` property and indexed elements).\n\n`Array.fromAsync()` iterates the async iterable in a fashion very similar to [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of). `Array.fromAsync()` is almost equivalent to [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) in terms of behavior, except the following:\n\n*   `Array.fromAsync()` handles async iterable objects.\n*   `Array.fromAsync()` returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that fulfills to the array instance.\n*   If `Array.fromAsync()` is called with a non-async iterable object, each element to be added to the array is first [awaited](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await).\n*   If a `mapFn` is provided, its input and output are internally awaited.\n\n`Array.fromAsync()` and [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) can both turn an iterable of promises into a promise of an array. However, there are two key differences:\n\n*   `Array.fromAsync()` awaits each value yielded from the object sequentially. `Promise.all()` awaits all values concurrently.\n*   `Array.fromAsync()` iterates the iterable lazily, and doesn't retrieve the next value until the current one is settled. `Promise.all()` retrieves all values in advance and awaits them all.\n\n## [Examples](#examples)\n\n### [Array from an async iterable](#array_from_an_async_iterable)\n\n```\nconst asyncIterable = (async function* () {\n  for (let i = 0; i < 5; i++) {\n    await new Promise((resolve) => setTimeout(resolve, 10 * i));\n    yield i;\n  }\n})();\n\nArray.fromAsync(asyncIterable).then((array) => console.log(array));\n// [0, 1, 2, 3, 4]\n```\n\n### [Array from a sync iterable](#array_from_a_sync_iterable)\n\n```\nArray.fromAsync(\n  new Map([\n    [1, 2],\n    [3, 4],\n  ]),\n).then((array) => console.log(array));\n// [[1, 2], [3, 4]]\n```\n\n### [Array from a sync iterable that yields promises](#array_from_a_sync_iterable_that_yields_promises)\n\n```\nArray.fromAsync(\n  new Set([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]),\n).then((array) => console.log(array));\n// [1, 2, 3]\n```\n\n### [Array from an array-like object of promises](#array_from_an_array-like_object_of_promises)\n\n```\nArray.fromAsync({\n  length: 3,\n  0: Promise.resolve(1),\n  1: Promise.resolve(2),\n  2: Promise.resolve(3),\n}).then((array) => console.log(array));\n// [1, 2, 3]\n```\n\n### [Using mapFn](#using_mapfn)\n\nBoth the input and output of `mapFn` are awaited internally by `Array.fromAsync()`.\n\n```\nfunction delayedValue(v) {\n  return new Promise((resolve) => setTimeout(() => resolve(v), 100));\n}\n\nArray.fromAsync(\n  [delayedValue(1), delayedValue(2), delayedValue(3)],\n  (element) => delayedValue(element * 2),\n).then((array) => console.log(array));\n// [2, 4, 6]\n```\n\n### [Comparison with Promise.all()](#comparison_with_promise.all)\n\n`Array.fromAsync()` awaits each value yielded from the object sequentially. `Promise.all()` awaits all values concurrently.\n\n```\nfunction* makeIterableOfPromises() {\n  for (let i = 0; i < 5; i++) {\n    yield new Promise((resolve) => setTimeout(resolve, 100));\n  }\n}\n\n(async () => {\n  console.time(\"Array.fromAsync() time\");\n  await Array.fromAsync(makeIterableOfPromises());\n  console.timeEnd(\"Array.fromAsync() time\");\n  // Array.fromAsync() time: 503.610ms\n\n  console.time(\"Promise.all() time\");\n  await Promise.all(makeIterableOfPromises());\n  console.timeEnd(\"Promise.all() time\");\n  // Promise.all() time: 101.728ms\n})();\n```\n\n### [No error handling for sync iterables](#no_error_handling_for_sync_iterables)\n\nSimilar to [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of#iterating_over_sync_iterables_and_generators), if the object being iterated is a sync iterable, and an error is thrown while iterating, the `return()` method of the underlying iterator will not be called, so the iterator is not closed.\n\n```\nfunction* generatorWithRejectedPromises() {\n  try {\n    yield 0;\n    yield Promise.reject(3);\n  } finally {\n    console.log(\"called finally\");\n  }\n}\n\n(async () => {\n  try {\n    await Array.fromAsync(generatorWithRejectedPromises());\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// caught 3\n// No \"called finally\" message\n```\n\nIf you need to close the iterator, you need to use a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop instead, and `await` each value yourself.\n\n```\n(async () => {\n  const arr = [];\n  try {\n    for (const val of generatorWithRejectedPromises()) {\n      arr.push(await val);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// called finally\n// caught 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ES Array.fromAsync (2022)  <br>\\# sec-array.fromAsync](https://tc39.es/proposal-array-from-async/#sec-array.fromAsync) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.fromAsync() - JavaScript | MDN",
    "description": "The Array.fromAsync() static method creates a new, shallow-copied Array instance from an async iterable, iterable, or array-like object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",
    "markdown": "# Array.isArray() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Array.isArray()`** static method determines whether the passed value is an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be checked.\n\n### [Return value](#return_value)\n\n`true` if `value` is an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array); otherwise, `false`. `false` is always returned if `value` is a [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\n\n## [Description](#description)\n\n`Array.isArray()` checks if the passed value is an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). It does not check the value's prototype chain, nor does it rely on the `Array` constructor it is attached to. It returns `true` for any value that was created using the array literal syntax or the `Array` constructor. This makes it safe to use with cross-realm objects, where the identity of the `Array` constructor is different and would therefore cause [`instanceof Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) to fail.\n\nSee the article [\"Determining with absolute accuracy whether or not a JavaScript object is an array\"](https://web.mit.edu/jwalden/www/isArray.html) for more details.\n\n`Array.isArray()` also rejects objects with `Array.prototype` in its prototype chain but aren't actual arrays, which `instanceof Array` would accept.\n\n## [Examples](#examples)\n\n### [Using Array.isArray()](#using_array.isarray)\n\n```\n// all following calls return true\nArray.isArray([]);\nArray.isArray([1]);\nArray.isArray(new Array());\nArray.isArray(new Array(\"a\", \"b\", \"c\", \"d\"));\nArray.isArray(new Array(3));\n// Little known fact: Array.prototype itself is an array:\nArray.isArray(Array.prototype);\n\n// all following calls return false\nArray.isArray();\nArray.isArray({});\nArray.isArray(null);\nArray.isArray(undefined);\nArray.isArray(17);\nArray.isArray(\"Array\");\nArray.isArray(true);\nArray.isArray(false);\nArray.isArray(new Uint8Array(32));\n// This is not an array, because it was not created using the\n// array literal syntax or the Array constructor\nArray.isArray({ __proto__: Array.prototype });\n```\n\n### [instanceof vs. Array.isArray()](#instanceof_vs._array.isarray)\n\nWhen checking for `Array` instance, `Array.isArray()` is preferred over `instanceof` because it works across realms.\n\n```\nconst iframe = document.createElement(\"iframe\");\ndocument.body.appendChild(iframe);\nconst xArray = window.frames[window.frames.length - 1].Array;\nconst arr = new xArray(1, 2, 3); // [1, 2, 3]\n\n// Correctly checking for Array\nArray.isArray(arr); // true\n// The prototype of arr is xArray.prototype, which is a\n// different object from Array.prototype\narr instanceof Array; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.isarray](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.isarray) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.isArray() - JavaScript | MDN",
    "description": "The Array.isArray() static method determines whether the passed value is an Array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length",
    "markdown": "# Array: length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`length`** data property of an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA nonnegative integer less than 232.\n\n| Property attributes of `Array: length` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe value of the `length` property is a nonnegative integer with a value less than 232.\n\n```\nconst listA = [1, 2, 3];\nconst listB = new Array(6);\n\nconsole.log(listA.length);\n// 3\n\nconsole.log(listB.length);\n// 6\n\nlistB.length = 2 ** 32; // 4294967296\n// RangeError: Invalid array length\n\nconst listC = new Array(-100); // Negative numbers are not allowed\n// RangeError: Invalid array length\n```\n\nThe array object observes the `length` property, and automatically syncs the `length` value with the array's content. This means:\n\n*   Setting `length` to a value smaller than the current length truncates the array — elements beyond the new `length` are deleted.\n*   Setting any array index (a nonnegative integer smaller than 232) beyond the current `length` extends the array — the `length` property is increased to reflect the new highest index.\n*   Setting `length` to an invalid value (e.g. a negative number or a non-integer) throws a `RangeError` exception.\n\nWhen `length` is set to a bigger value than the current length, the array is extended by adding [empty slots](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), not actual `undefined` values. Empty slots have some special interactions with array methods; see [array methods and empty slots](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots).\n\n```\nconst arr = [1, 2];\nconsole.log(arr);\n// [ 1, 2 ]\n\narr.length = 5; // set array length to 5 while currently 2.\nconsole.log(arr);\n// [ 1, 2, <3 empty items> ]\n\narr.forEach((element) => console.log(element));\n// 1\n// 2\n```\n\nSee also [Relationship between `length` and numerical properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#relationship_between_length_and_numerical_properties).\n\n## [Examples](#examples)\n\n### [Iterating over an array](#iterating_over_an_array)\n\nIn the following example, the array `numbers` is iterated through by looking at the `length` property. The value in each element is then doubled.\n\n```\nconst numbers = [1, 2, 3, 4, 5];\nconst length = numbers.length;\nfor (let i = 0; i < length; i++) {\n  numbers[i] *= 2;\n}\n// numbers is now [2, 4, 6, 8, 10]\n```\n\n### [Shortening an array](#shortening_an_array)\n\nThe following example shortens the array `numbers` to a length of 3 if the current length is greater than 3.\n\n```\nconst numbers = [1, 2, 3, 4, 5];\n\nif (numbers.length > 3) {\n  numbers.length = 3;\n}\n\nconsole.log(numbers); // [1, 2, 3]\nconsole.log(numbers.length); // 3\nconsole.log(numbers[3]); // undefined; the extra elements are deleted\n```\n\n### [Create empty array of fixed length](#create_empty_array_of_fixed_length)\n\nSetting `length` to a value greater than the current length creates a [sparse array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\n```\nconst numbers = [];\nnumbers.length = 3;\nconsole.log(numbers); // [empty x 3]\n```\n\n### [Array with non-writable length](#array_with_non-writable_length)\n\nThe `length` property is automatically updated by the array when elements are added beyond the current length. If the `length` property is made non-writable, the array will not be able to update it. This causes an error in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```\n\"use strict\";\n\nconst numbers = [1, 2, 3, 4, 5];\nObject.defineProperty(numbers, \"length\", { writable: false });\nnumbers[5] = 6; // TypeError: Cannot assign to read only property 'length' of object '[object Array]'\nnumbers.push(5); // // TypeError: Cannot assign to read only property 'length' of object '[object Array]'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-properties-of-array-instances-length](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-properties-of-array-instances-length) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array: length - JavaScript | MDN",
    "description": "The length data property of an Array instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator",
    "markdown": "# Array.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`[@@iterator]()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows arrays to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns an [array iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the array.\n\nThe initial value of this property is the same function object as the initial value of the [`Array.prototype.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) property.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the array.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes arrays [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n#### HTML\n\n```\n<ul id=\"letterResult\"></ul>\n```\n\n#### JavaScript\n\n```\nconst arr = [\"a\", \"b\", \"c\"];\nconst letterResult = document.getElementById(\"letterResult\");\nfor (const letter of arr) {\n  const li = document.createElement(\"li\");\n  li.textContent = letter;\n  letterResult.appendChild(li);\n}\n```\n\n#### Result\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst arrIter = arr[Symbol.iterator]();\nconsole.log(arrIter.next().value); // a\nconsole.log(arrIter.next().value); // b\nconsole.log(arrIter.next().value); // c\nconsole.log(arrIter.next().value); // d\nconsole.log(arrIter.next().value); // e\n```\n\n### [Handling strings and string arrays with the same function](#handling_strings_and_string_arrays_with_the_same_function)\n\nBecause both [strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) and arrays implement the iterable protocol, a generic function can be designed to handle both inputs in the same fashion. This is better than calling [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) directly, which requires the input to be an array, or at least an object with such a method.\n\n```\nfunction logIterable(it) {\n  if (typeof it[Symbol.iterator] !== \"function\") {\n    console.log(it, \"is not iterable.\");\n    return;\n  }\n  for (const letter of it) {\n    console.log(letter);\n  }\n}\n\n// Array\nlogIterable([\"a\", \"b\", \"c\"]);\n// a\n// b\n// c\n\n// String\nlogIterable(\"abc\");\n// a\n// b\n// c\n\n// Number\nlogIterable(123);\n// 123 is not iterable.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype-@@iterator](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype[@@iterator]() - JavaScript | MDN",
    "description": "The [@@iterator]() method of Array instances implements the iterable protocol and allows arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at",
    "markdown": "# Array.prototype.at() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`at()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index of the array element to be returned, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). Negative index counts back from the end of the array — if `index < 0`, `index + array.length` is accessed.\n\n### [Return value](#return_value)\n\nThe element in the array matching the given index. Always returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if `index < -array.length` or `index >= array.length` without attempting to access the corresponding property.\n\n## [Description](#description)\n\nThe `at()` method is equivalent to the bracket notation when `index` is non-negative. For example, `array[0]` and `array.at(0)` both return the first item. However, when counting elements from the end of the array, you cannot use `array[-1]` like you may in Python or R, because all values inside the square brackets are treated literally as string properties, so you will end up reading `array[\"-1\"]`, which is just a normal string property instead of an array index.\n\nThe usual practice is to access [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) and calculate the index from that — for example, `array[array.length - 1]`. The `at()` method allows relative indexing, so this can be shortened to `array.at(-1)`.\n\nBy combining `at()` with [`with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with), you can both read and write (respectively) an array using negative indices.\n\nThe `at()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Return the last value of an array](#return_the_last_value_of_an_array)\n\nThe following example provides a function which returns the last element found in a specified array.\n\n```\n// Our array with items\nconst cart = [\"apple\", \"banana\", \"pear\"];\n\n// A function which returns the last item of a given array\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\n// Get the last item of our array 'cart'\nconst item1 = returnLast(cart);\nconsole.log(item1); // 'pear'\n\n// Add an item to our 'cart' array\ncart.push(\"orange\");\nconst item2 = returnLast(cart);\nconsole.log(item2); // 'orange'\n```\n\n### [Comparing methods](#comparing_methods)\n\nThis example compares different ways to select the penultimate (last but one) item of an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). While all the methods shown below are valid, this example highlights the succinctness and readability of the `at()` method.\n\n```\n// Our array with items\nconst colors = [\"red\", \"green\", \"blue\"];\n\n// Using length property\nconst lengthWay = colors[colors.length - 2];\nconsole.log(lengthWay); // 'green'\n\n// Using slice() method. Note an array is returned\nconst sliceWay = colors.slice(-2, -1);\nconsole.log(sliceWay[0]); // 'green'\n\n// Using at() method\nconst atWay = colors.at(-2);\nconsole.log(atWay); // 'green'\n```\n\n### [Calling at() on non-array objects](#calling_at_on_non-array_objects)\n\nThe `at()` method reads the `length` property of `this` and calculates the index to access.\n\n```\nconst arrayLike = {\n  length: 2,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\", // ignored by at() since length is 2\n};\nconsole.log(Array.prototype.at.call(arrayLike, 0)); // \"a\"\nconsole.log(Array.prototype.at.call(arrayLike, 2)); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.at](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.at) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.at() - JavaScript | MDN",
    "description": "The at() method of Array instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER",
    "markdown": "# Number.MAX\\_SAFE\\_INTEGER - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.MAX_SAFE_INTEGER`** static data property represents the maximum safe integer in JavaScript (253 – 1).\n\nFor larger integers, consider using [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n`9007199254740991` (9,007,199,254,740,991, or ~9 quadrillion).\n\n| Property attributes of `Number.MAX_SAFE_INTEGER` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n[Double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), so it can only safely represent integers between -(253 – 1) and 253 – 1. \"Safe\" in this context refers to the ability to represent integers exactly and to compare them correctly. For example, `Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2` will evaluate to true, which is mathematically incorrect. See [`Number.isSafeInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger) for more information.\n\nBecause `MAX_SAFE_INTEGER` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.MAX_SAFE_INTEGER`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Return value of MAX\\_SAFE\\_INTEGER](#return_value_of_max_safe_integer)\n\n```\nNumber.MAX_SAFE_INTEGER; // 9007199254740991\n```\n\n### [Relationship between MAX\\_SAFE\\_INTEGER and EPSILON](#relationship_between_max_safe_integer_and_epsilon)\n\n[`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON) is 2\\-52, while `MAX_SAFE_INTEGER` is 253 – 1 — both of them are derived from the width of the mantissa, which is 53 bits (with the highest bit always being 1). Multiplying them will give a value very close — but not equal — to 2.\n\n```\nNumber.MAX_SAFE_INTEGER * Number.EPSILON; // 1.9999999999999998\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.max\\_safe\\_integer](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.max_safe_integer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.MAX_SAFE_INTEGER - JavaScript | MDN",
    "description": "The Number.MAX_SAFE_INTEGER static data property represents the maximum safe integer in JavaScript (253 – 1).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split",
    "markdown": "# String.prototype.split() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`split()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsplit(separator)\nsplit(separator, limit)\n```\n\n### [Parameters](#parameters)\n\n[`separator`](#separator)\n\nThe pattern describing where each split should occur. Can be `undefined`, a string, or an object with a [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method — the typical example being a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). Omitting `separator` or passing `undefined` causes `split()` to return an array with the calling string as a single element. All values that are not `undefined` or objects with a `@@split` method are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\n[`limit`](#limit) Optional\n\nA non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified `separator`, but stops when `limit` entries have been placed in the array. Any leftover text is not included in the array at all.\n\n*   The array may contain fewer entries than `limit` if the end of the string is reached before the limit is reached.\n*   If `limit` is `0`, `[]` is returned.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of strings, split at each point where the `separator` occurs in the given string.\n\n## [Description](#description)\n\nIf `separator` is a non-empty string, the target string is split by all matches of the `separator` without including `separator` in the results. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like `myString.split(\"\\t\")`. If `separator` contains multiple characters, that entire character sequence must be found in order to split. If `separator` appears at the beginning (or end) of the string, it still has the effect of splitting, resulting in an empty (i.e. zero length) string appearing at the first (or last) position of the returned array. If `separator` does not occur in `str`, the returned array contains one element consisting of the entire string.\n\nIf `separator` is an empty string (`\"\"`), `str` is converted to an array of each of its UTF-16 \"characters\", without empty strings on either ends of the resulting string.\n\n**Note:** `\"\".split(\"\")` is therefore the only way to produce an empty array when a string is passed as `separator` and `limit` is not `0`.\n\nIf `separator` is a regexp that matches empty strings, whether the match is split by UTF-16 code units or Unicode code points depends on if the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode).\n\n```\n\"😄😄\".split(/(?:)/); // [ \"\\ud83d\", \"\\ude04\", \"\\ud83d\", \"\\ude04\" ]\n\"😄😄\".split(/(?:)/u); // [ \"😄\", \"😄\" ]\n```\n\nIf `separator` is a regular expression with capturing groups, then each time `separator` matches, the captured groups (including any `undefined` results) are spliced into the output array. This behavior is specified by the regexp's [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method.\n\nIf `separator` is an object with a [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method, that method is called with the target string and `limit` as arguments, and `this` set to the object. Its return value becomes the return value of `split`.\n\nAny other value will be coerced to a string before being used as separator.\n\n## [Examples](#examples)\n\n### [Using split()](#using_split)\n\nWhen the string is empty and a non-empty separator is specified, `split()` returns `[\"\"]`. If the string and separator are both empty strings, an empty array is returned.\n\n```\nconst emptyString = \"\";\n\n// string is empty and separator is non-empty\nconsole.log(emptyString.split(\"a\"));\n// [\"\"]\n\n// string and separator are both empty strings\nconsole.log(emptyString.split(emptyString));\n// []\n```\n\nThe following example defines a function that splits a string into an array of strings using `separator`. After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.\n\n```\nfunction splitString(stringToSplit, separator) {\n  const arrayOfStrings = stringToSplit.split(separator);\n\n  console.log(\"The original string is:\", stringToSplit);\n  console.log(\"The separator is:\", separator);\n  console.log(\n    \"The array has\",\n    arrayOfStrings.length,\n    \"elements:\",\n    arrayOfStrings.join(\" / \"),\n  );\n}\n\nconst tempestString = \"Oh brave new world that has such people in it.\";\nconst monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";\n\nconst space = \" \";\nconst comma = \",\";\n\nsplitString(tempestString, space);\nsplitString(tempestString);\nsplitString(monthString, comma);\n```\n\nThis example produces the following output:\n\nThe original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \" \"\nThe array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it.\n\nThe original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \"undefined\"\nThe array has 1 elements: Oh brave new world that has such people in it.\n\nThe original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"\nThe separator is: \",\"\nThe array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec\n\n### [Removing spaces from a string](#removing_spaces_from_a_string)\n\nIn the following example, `split()` looks for zero or more spaces, followed by a semicolon, followed by zero or more spaces—and, when found, removes the spaces and the semicolon from the string. `nameList` is the array returned as a result of `split()`.\n\n```\nconst names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \";\n\nconsole.log(names);\n\nconst re = /\\s*(?:;|$)\\s*/;\nconst nameList = names.split(re);\n\nconsole.log(nameList);\n```\n\nThis logs two lines; the first line logs the original string, and the second line logs the resulting array.\n\nHarry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand\n\\[ \"Harry Trump\", \"Fred Barney\", \"Helen Rigby\", \"Bill Abel\", \"Chris Hand\", \"\" \\]\n\n### [Returning a limited number of splits](#returning_a_limited_number_of_splits)\n\nIn the following example, `split()` looks for spaces in a string and returns the first 3 splits that it finds.\n\n```\nconst myString = \"Hello World. How are you doing?\";\nconst splits = myString.split(\" \", 3);\n\nconsole.log(splits); // [ \"Hello\", \"World.\", \"How\" ]\n```\n\n### [Splitting with a `RegExp` to include parts of the separator in the result](#splitting_with_a_regexp_to_include_parts_of_the_separator_in_the_result)\n\nIf `separator` is a regular expression that contains capturing parentheses `( )`, matched results are included in the array.\n\n```\nconst myString = \"Hello 1 word. Sentence number 2.\";\nconst splits = myString.split(/(\\d)/);\n\nconsole.log(splits);\n// [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]\n```\n\n**Note:** `\\d` matches the [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) for digits between 0 and 9.\n\n### [Using a custom splitter](#using_a_custom_splitter)\n\nAn object with a `Symbol.split` method can be used as a splitter with custom behavior.\n\nThe following example splits a string using an internal state consisting of an incrementing number:\n\n```\nconst splitByNumber = {\n  [Symbol.split](str) {\n    let num = 1;\n    let pos = 0;\n    const result = [];\n    while (pos < str.length) {\n      const matchPos = str.indexOf(num, pos);\n      if (matchPos === -1) {\n        result.push(str.substring(pos));\n        break;\n      }\n      result.push(str.substring(pos, matchPos));\n      pos = matchPos + String(num).length;\n      num++;\n    }\n    return result;\n  },\n};\n\nconst myString = \"a1bc2c5d3e4f\";\nconsole.log(myString.split(splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\n```\n\nThe following example uses an internal state to enforce certain behavior, and to ensure a \"valid\" result is produced.\n\n```\nconst DELIMITER = \";\";\n\n// Split the commands, but remove any invalid or unnecessary values.\nconst splitCommands = {\n  [Symbol.split](str, lim) {\n    const results = [];\n    const state = {\n      on: false,\n      brightness: {\n        current: 2,\n        min: 1,\n        max: 3,\n      },\n    };\n    let pos = 0;\n    let matchPos = str.indexOf(DELIMITER, pos);\n\n    while (matchPos !== -1) {\n      const subString = str.slice(pos, matchPos).trim();\n\n      switch (subString) {\n        case \"light on\":\n          // If the `on` state is already true, do nothing.\n          if (!state.on) {\n            state.on = true;\n            results.push(subString);\n          }\n          break;\n\n        case \"light off\":\n          // If the `on` state is already false, do nothing.\n          if (state.on) {\n            state.on = false;\n            results.push(subString);\n          }\n          break;\n\n        case \"brightness up\":\n          // Enforce a brightness maximum.\n          if (state.brightness.current < state.brightness.max) {\n            state.brightness.current += 1;\n            results.push(subString);\n          }\n          break;\n\n        case \"brightness down\":\n          // Enforce a brightness minimum.\n          if (state.brightness.current > state.brightness.min) {\n            state.brightness.current -= 1;\n            results.push(subString);\n          }\n          break;\n      }\n\n      if (results.length === lim) {\n        break;\n      }\n\n      pos = matchPos + DELIMITER.length;\n      matchPos = str.indexOf(DELIMITER, pos);\n    }\n\n    // If we broke early due to reaching the split `lim`, don't add the remaining commands.\n    if (results.length < lim) {\n      results.push(str.slice(pos).trim());\n    }\n\n    return results;\n  },\n};\n\nconst commands =\n  \"light on; brightness up; brightness up; brightness up; light on; brightness down; brightness down; light off\";\nconsole.log(commands.split(splitCommands, 3)); // [\"light on\", \"brightness up\", \"brightness down\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.split](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.split) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.split() - JavaScript | MDN",
    "description": "The split() method of String values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
    "markdown": "# JSON.stringify() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`JSON.stringify()`** static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nJSON.stringify(value)\nJSON.stringify(value, replacer)\nJSON.stringify(value, replacer, space)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to convert to a JSON string.\n\n[`replacer`](#replacer) Optional\n\nA function that alters the behavior of the stringification process, or an array of strings and numbers that specifies properties of `value` to be included in the output. If `replacer` is an array, all elements in this array that are not strings or numbers (either primitives or wrapper objects), including [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values, are completely ignored. If `replacer` is anything other than a function or an array (e.g. [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or not provided), all string-keyed properties of the object are included in the resulting JSON string.\n\n[`space`](#space) Optional\n\nA string or number that's used to insert white space (including indentation, line break characters, etc.) into the output JSON string for readability purposes.\n\nIf this is a number, it indicates the number of space characters to be used as indentation, clamped to 10 (that is, any number greater than `10` is treated as if it were `10`). Values less than 1 indicate that no space should be used.\n\nIf this is a string, the string (or the first 10 characters of the string, if it's longer than that) is inserted before every nested object or array.\n\nIf `space` is anything other than a string or number (can be either a primitive or a wrapper object) — for example, is [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or not provided — no white space is used.\n\n### [Return value](#return_value)\n\nA JSON string representing the given value, or undefined.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   `value` contains a circular reference.\n*   A [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) value is encountered.\n\n## [Description](#description)\n\n`JSON.stringify()` converts a value to the JSON notation that the value represents. Values are stringified in the following manner:\n\n*   [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), and [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) (obtainable via [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object)) objects are converted to the corresponding primitive values during stringification, in accordance with the traditional conversion semantics. [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) objects (obtainable via [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object)) are treated as plain objects.\n*   Attempting to serialize [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values will throw. However, if the BigInt has a `toJSON()` method (through monkey patching: `BigInt.prototype.toJSON = ...`), that method can provide the serialization result. This constraint ensures that a proper serialization (and, very likely, its accompanying deserialization) behavior is always explicitly provided by the user.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function), and [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values are not valid JSON values. If any such values are encountered during conversion, they are either omitted (when found in an object) or changed to [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) (when found in an array). `JSON.stringify()` can return `undefined` when passing in \"pure\" values like `JSON.stringify(() => {})` or `JSON.stringify(undefined)`.\n*   The numbers [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) and [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), as well as the value [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), are all considered `null`. (But unlike the values in the previous point, they would never be omitted.)\n*   Arrays are serialized as arrays (enclosed by square brackets). Only array indices between 0 and `length - 1` (inclusive) are serialized; other properties are ignored.\n*   The special raw JSON object created with [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON) is serialized as the raw JSON text it contains (by accessing its `rawJSON` property).\n*   For other objects:\n    *   All [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\\-keyed properties will be completely ignored, even when using the [`replacer`](#the_replacer_parameter) parameter.\n    *   If the value has a `toJSON()` method, it's responsible to define what data will be serialized. Instead of the object being serialized, the value returned by the `toJSON()` method when called will be serialized. `JSON.stringify()` calls `toJSON` with one parameter, the `key`, which has the same semantic as the `key` parameter of the [`replacer`](#the_replacer_parameter) function:\n        \n        *   if this object is a property value, the property name\n        *   if it is in an array, the index in the array, as a string\n        *   if `JSON.stringify()` was directly called on this object, an empty string\n        \n        [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects implement the [`toJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON) method which returns a string (the same as [`date.toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)). Thus, they will be stringified as strings.\n    *   Only [enumerable own properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) are visited. This means [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), etc. will become `\"{}\"`. You can use the [`replacer`](#the_replacer_parameter) parameter to serialize them to something more useful. Properties are visited using the same algorithm as [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), which has a well-defined order and is stable across implementations. For example, `JSON.stringify` on the same object will always produce the same string, and `JSON.parse(JSON.stringify(obj))` would produce an object with the same key ordering as the original (assuming the object is completely JSON-serializable).\n\n### [The replacer parameter](#the_replacer_parameter)\n\nThe `replacer` parameter can be either a function or an array.\n\nAs an array, its elements indicate the names of the properties in the object that should be included in the resulting JSON string. Only string and number values are taken into account; symbol keys are ignored.\n\nAs a function, it takes two parameters: the `key` and the `value` being stringified. The object in which the key was found is provided as the `replacer`'s `this` context.\n\nThe `replacer` function is called for the initial object being stringified as well, in which case the `key` is an empty string (`\"\"`). It is then called for each property on the object or array being stringified. Array indices will be provided in its string form as `key`. The current property value will be replaced with the `replacer`'s return value for stringification. This means:\n\n*   If you return a number, string, boolean, or `null`, that value is directly serialized and used as the property's value. (Returning a BigInt will throw as well.)\n*   If you return a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function), [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), the property is not included in the output.\n*   If you return any other object, the object is recursively stringified, calling the `replacer` function on each property.\n\n**Note:** When parsing JSON generated with `replacer` functions, you would likely want to use the [`reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter) parameter to perform the reverse operation.\n\nTypically, array elements' index would never shift (even when the element is an invalid value like a function, it will become `null` instead of omitted). Using the `replacer` function allows you to control the order of the array elements by returning a different array.\n\n### [The space parameter](#the_space_parameter)\n\nThe `space` parameter may be used to control spacing in the final string.\n\n*   If it is a number, successive levels in the stringification will each be indented by this many space characters.\n*   If it is a string, successive levels will be indented by this string.\n\nEach level of indentation will never be longer than 10. Number values of `space` are clamped to 10, and string values are truncated to 10 characters.\n\n## [Examples](#examples)\n\n### [Using JSON.stringify](#using_json.stringify)\n\n```\nJSON.stringify({}); // '{}'\nJSON.stringify(true); // 'true'\nJSON.stringify(\"foo\"); // '\"foo\"'\nJSON.stringify([1, \"false\", false]); // '[1,\"false\",false]'\nJSON.stringify([NaN, null, Infinity]); // '[null,null,null]'\nJSON.stringify({ x: 5 }); // '{\"x\":5}'\n\nJSON.stringify(new Date(1906, 0, 2, 15, 4, 5));\n// '\"1906-01-02T15:04:05.000Z\"'\n\nJSON.stringify({ x: 5, y: 6 });\n// '{\"x\":5,\"y\":6}'\nJSON.stringify([new Number(3), new String(\"false\"), new Boolean(false)]);\n// '[3,\"false\",false]'\n\n// String-keyed array elements are not enumerable and make no sense in JSON\nconst a = [\"foo\", \"bar\"];\na[\"baz\"] = \"quux\"; // a: [ 0: 'foo', 1: 'bar', baz: 'quux' ]\nJSON.stringify(a);\n// '[\"foo\",\"bar\"]'\n\nJSON.stringify({ x: [10, undefined, function () {}, Symbol(\"\")] });\n// '{\"x\":[10,null,null,null]}'\n\n// Standard data structures\nJSON.stringify([\n  new Set([1]),\n  new Map([[1, 2]]),\n  new WeakSet([{ a: 1 }]),\n  new WeakMap([[{ a: 1 }, 2]]),\n]);\n// '[{},{},{},{}]'\n\n// TypedArray\nJSON.stringify([new Int8Array([1]), new Int16Array([1]), new Int32Array([1])]);\n// '[{\"0\":1},{\"0\":1},{\"0\":1}]'\nJSON.stringify([\n  new Uint8Array([1]),\n  new Uint8ClampedArray([1]),\n  new Uint16Array([1]),\n  new Uint32Array([1]),\n]);\n// '[{\"0\":1},{\"0\":1},{\"0\":1},{\"0\":1}]'\nJSON.stringify([new Float32Array([1]), new Float64Array([1])]);\n// '[{\"0\":1},{\"0\":1}]'\n\n// toJSON()\nJSON.stringify({\n  x: 5,\n  y: 6,\n  toJSON() {\n    return this.x + this.y;\n  },\n});\n// '11'\n\n// Symbols:\nJSON.stringify({ x: undefined, y: Object, z: Symbol(\"\") });\n// '{}'\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" });\n// '{}'\nJSON.stringify({ [Symbol.for(\"foo\")]: \"foo\" }, [Symbol.for(\"foo\")]);\n// '{}'\nJSON.stringify({ [Symbol.for(\"foo\")]: \"foo\" }, (k, v) => {\n  if (typeof k === \"symbol\") {\n    return \"a symbol\";\n  }\n});\n// undefined\n\n// Non-enumerable properties:\nJSON.stringify(\n  Object.create(null, {\n    x: { value: \"x\", enumerable: false },\n    y: { value: \"y\", enumerable: true },\n  }),\n);\n// '{\"y\":\"y\"}'\n\n// BigInt values throw\nJSON.stringify({ x: 2n });\n// TypeError: BigInt value can't be serialized in JSON\n```\n\n### [Using a function as replacer](#using_a_function_as_replacer)\n\n```\nfunction replacer(key, value) {\n  // Filtering out properties\n  if (typeof value === \"string\") {\n    return undefined;\n  }\n  return value;\n}\n\nconst foo = {\n  foundation: \"Mozilla\",\n  model: \"box\",\n  week: 45,\n  transport: \"car\",\n  month: 7,\n};\nJSON.stringify(foo, replacer);\n// '{\"week\":45,\"month\":7}'\n```\n\nIf you wish the `replacer` to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).\n\n```\nfunction makeReplacer() {\n  let isInitial = true;\n\n  return (key, value) => {\n    if (isInitial) {\n      isInitial = false;\n      return value;\n    }\n    if (key === \"\") {\n      // Omit all properties with name \"\" (except the initial object)\n      return undefined;\n    }\n    return value;\n  };\n}\n\nconst replacer = makeReplacer();\nconsole.log(JSON.stringify({ \"\": 1, b: 2 }, replacer)); // \"{\"b\":2}\"\n```\n\n### [Using an array as replacer](#using_an_array_as_replacer)\n\n```\nconst foo = {\n  foundation: \"Mozilla\",\n  model: \"box\",\n  week: 45,\n  transport: \"car\",\n  month: 7,\n};\n\nJSON.stringify(foo, [\"week\", \"month\"]);\n// '{\"week\":45,\"month\":7}', only keep \"week\" and \"month\" properties\n```\n\n### [Using the space parameter](#using_the_space_parameter)\n\nIndent the output with one space:\n\n```\nconsole.log(JSON.stringify({ a: 2 }, null, \" \"));\n/*\n{\n \"a\": 2\n}\n*/\n```\n\nUsing a tab character mimics standard pretty-print appearance:\n\n```\nconsole.log(JSON.stringify({ uno: 1, dos: 2 }, null, \"\\t\"));\n/*\n{\n\t\"uno\": 1,\n\t\"dos\": 2\n}\n*/\n```\n\n### [toJSON() behavior](#tojson_behavior)\n\nDefining `toJSON()` for an object allows overriding its serialization behavior.\n\n```\nconst obj = {\n  data: \"data\",\n\n  toJSON(key) {\n    return key ? `Now I am a nested object under key '${key}'` : this;\n  },\n};\n\nJSON.stringify(obj);\n// '{\"data\":\"data\"}'\n\nJSON.stringify({ obj });\n// '{\"obj\":\"Now I am a nested object under key 'obj'\"}'\n\nJSON.stringify([obj]);\n// '[\"Now I am a nested object under key '0'\"]'\n```\n\n### [Issue with serializing circular references](#issue_with_serializing_circular_references)\n\nSince the [JSON format](https://www.json.org/) doesn't support object references (although an [IETF draft exists](https://datatracker.ietf.org/doc/html/draft-pbryan-zyp-json-ref-03)), a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown if one attempts to encode an object with circular references.\n\n```\nconst circularReference = {};\ncircularReference.myself = circularReference;\n\n// Serializing circular references throws \"TypeError: cyclic object value\"\nJSON.stringify(circularReference);\n```\n\nTo serialize circular references, you can use a library that supports them (e.g. [cycle.js](https://github.com/douglascrockford/JSON-js/blob/master/cycle.js) by Douglas Crockford) or implement a solution yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.\n\nIf you are using `JSON.stringify()` to deep-copy an object, you may instead want to use [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone), which supports circular references. JavaScript engine APIs for binary serialization, such as [`v8.serialize()`](https://nodejs.org/api/v8.html#v8serializevalue), also support circular references.\n\n### [Using JSON.stringify() with localStorage](#using_json.stringify_with_localstorage)\n\nIn a case where you want to store an object created by your user and allow it to be restored even after the browser has been closed, the following example is a model for the applicability of `JSON.stringify()`:\n\n```\n// Creating an example of JSON\nconst session = {\n  screens: [],\n  state: true,\n};\nsession.screens.push({ name: \"screenA\", width: 450, height: 250 });\nsession.screens.push({ name: \"screenB\", width: 650, height: 350 });\nsession.screens.push({ name: \"screenC\", width: 750, height: 120 });\nsession.screens.push({ name: \"screenD\", width: 250, height: 60 });\nsession.screens.push({ name: \"screenE\", width: 390, height: 120 });\nsession.screens.push({ name: \"screenF\", width: 1240, height: 650 });\n\n// Converting the JSON string with JSON.stringify()\n// then saving with localStorage in the name of session\nlocalStorage.setItem(\"session\", JSON.stringify(session));\n\n// Example of how to transform the String generated through\n// JSON.stringify() and saved in localStorage in JSON object again\nconst restoredSession = JSON.parse(localStorage.getItem(\"session\"));\n\n// Now restoredSession variable contains the object that was saved\n// in localStorage\nconsole.log(restoredSession);\n```\n\n### [Well-formed JSON.stringify()](#well-formed_json.stringify)\n\nEngines implementing the [well-formed JSON.stringify specification](https://github.com/tc39/proposal-well-formed-stringify) will stringify lone surrogates (any code point from U+D800 to U+DFFF) using Unicode escape sequences rather than literally (outputting lone surrogates). Before this change, such strings could not be encoded in valid UTF-8 or UTF-16:\n\n```\nJSON.stringify(\"\\uD800\"); // '\"�\"'\n```\n\nBut with this change `JSON.stringify()` represents lone surrogates using JSON escape sequences that _can_ be encoded in valid UTF-8 or UTF-16:\n\n```\nJSON.stringify(\"\\uD800\"); // '\"\\\\ud800\"'\n```\n\nThis change should be backwards-compatible as long as you pass the result of `JSON.stringify()` to APIs such as `JSON.parse()` that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves. _Only_ if you are directly interpreting the result of `JSON.stringify()` do you need to carefully handle `JSON.stringify()`'s two possible encodings of these code points.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-json.stringify](https://tc39.es/ecma262/multipage/structured-data.html#sec-json.stringify) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "JSON.stringify() - JavaScript | MDN",
    "description": "The JSON.stringify() static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",
    "markdown": "# Array.prototype.copyWithin() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`copyWithin()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncopyWithin(target, start)\ncopyWithin(target, start, end)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nZero-based index at which to copy the sequence to, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). This corresponds to where the element at `start` will be copied to, and all elements between `start` and `end` are copied to succeeding indices.\n\n*   Negative index counts back from the end of the array — if `-array.length <= target < 0`, `target + array.length` is used.\n*   If `target < -array.length`, `0` is used.\n*   If `target >= array.length`, nothing is copied.\n*   If `target` is positioned after `start` after normalization, copying only happens until the end of `array.length` (in other words, `copyWithin()` never extends the array).\n\n[`start`](#start)\n\nZero-based index at which to start copying elements from, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n*   If `start < -array.length`, `0` is used.\n*   If `start >= array.length`, nothing is copied.\n\n[`end`](#end) Optional\n\nZero-based index at which to end copying elements from, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `copyWithin()` copies up to but not including `end`.\n\n*   Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n*   If `end < -array.length`, `0` is used.\n*   If `end >= array.length` or `end` is omitted, `array.length` is used, causing all elements until the end to be copied.\n*   If `end` implies a position before or at the position that `start` implies, nothing is copied.\n\n### [Return value](#return_value)\n\nThe modified array.\n\n## [Description](#description)\n\nThe `copyWithin()` method works like C and C++'s `memmove`, and is a high-performance method to shift the data of an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). This especially applies to the [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin) method of the same name. The sequence is copied and pasted as one operation; the pasted sequence will have the copied values even when the copy and paste region overlap.\n\nBecause `undefined` becomes `0` when converted to an integer, omitting the `start` parameter has the same effect as passing `0`, which copies the entire array to the target position, equivalent to a right shift where the right boundary is clipped off and the left boundary is duplicated. This behavior may confuse readers of your code, so you should explicitly pass `0` as `start` instead.\n\n```\nconsole.log([1, 2, 3, 4, 5].copyWithin(2));\n// [1, 2, 1, 2, 3]; move all elements to the right by 2 positions\n```\n\nThe `copyWithin()` method is a [mutating method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter the length of `this`, but it will change the content of `this` and create new properties or delete existing properties, if necessary.\n\nThe `copyWithin()` method preserves empty slots. If the region to be copied from is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots' corresponding new indices are [deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) and also become empty slots.\n\nThe `copyWithin()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## [Examples](#examples)\n\n### [Using copyWithin()](#using_copywithin)\n\n```\nconsole.log([1, 2, 3, 4, 5].copyWithin(0, 3));\n// [4, 5, 3, 4, 5]\n\nconsole.log([1, 2, 3, 4, 5].copyWithin(0, 3, 4));\n// [4, 2, 3, 4, 5]\n\nconsole.log([1, 2, 3, 4, 5].copyWithin(-2, -3, -1));\n// [1, 2, 3, 3, 4]\n```\n\n### [Using copyWithin() on sparse arrays](#using_copywithin_on_sparse_arrays)\n\n`copyWithin()` will propagate empty slots.\n\n```\nconsole.log([1, , 3].copyWithin(2, 1, 2)); // [1, empty, empty]\n```\n\n### [Calling copyWithin() on non-array objects](#calling_copywithin_on_non-array_objects)\n\nThe `copyWithin()` method reads the `length` property of `this` and then manipulates the integer indices involved.\n\n```\nconst arrayLike = {\n  length: 5,\n  3: 1,\n};\nconsole.log(Array.prototype.copyWithin.call(arrayLike, 0, 3));\n// { '0': 1, '3': 1, length: 5 }\nconsole.log(Array.prototype.copyWithin.call(arrayLike, 3, 1));\n// { '0': 1, length: 5 }\n// The '3' property is deleted because the copied source is an empty slot\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.copywithin](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.copywithin) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.copyWithin() - JavaScript | MDN",
    "description": "The copyWithin() method of Array instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
    "markdown": "# Array.prototype.concat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`concat()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nconcat()\nconcat(value1)\nconcat(value1, value2)\nconcat(value1, value2, /* …, */ valueN)\n```\n\n### [Parameters](#parameters)\n\n[`value1`](#value1), …, `valueN` Optional\n\nArrays and/or values to concatenate into a new array. If all `valueN` parameters are omitted, `concat` returns a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) of the existing array on which it is called. See the description below for more details.\n\n### [Return value](#return_value)\n\nA new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance.\n\n## [Description](#description)\n\nThe `concat` method creates a new array. The array will first be populated by the elements in the object on which it is called. Then, for each argument, its value will be concatenated into the array — for normal objects or primitives, the argument itself will become an element of the final array; for arrays or array-like objects with the property [`Symbol.isConcatSpreadable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable) set to a truthy value, each element of the argument will be independently added to the final array. The `concat` method does not recurse into nested array arguments.\n\nThe `concat()` method is a [copying method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` or any of the arrays provided as arguments but instead returns a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) that contains the same elements as the ones from the original arrays.\n\nThe `concat()` method preserves empty slots if any of the source arrays is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `concat()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). The `this` value is treated in the same way as the other arguments (except it will be converted to an object first), which means plain objects will be directly prepended to the resulting array, while array-like objects with truthy `@@isConcatSpreadable` will be spread into the resulting array.\n\n## [Examples](#examples)\n\n### [Concatenating two arrays](#concatenating_two_arrays)\n\nThe following code concatenates two arrays:\n\n```\nconst letters = [\"a\", \"b\", \"c\"];\nconst numbers = [1, 2, 3];\n\nconst alphaNumeric = letters.concat(numbers);\nconsole.log(alphaNumeric);\n// results in ['a', 'b', 'c', 1, 2, 3]\n```\n\n### [Concatenating three arrays](#concatenating_three_arrays)\n\nThe following code concatenates three arrays:\n\n```\nconst num1 = [1, 2, 3];\nconst num2 = [4, 5, 6];\nconst num3 = [7, 8, 9];\n\nconst numbers = num1.concat(num2, num3);\n\nconsole.log(numbers);\n// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### [Concatenating values to an array](#concatenating_values_to_an_array)\n\nThe following code concatenates three values to an array:\n\n```\nconst letters = [\"a\", \"b\", \"c\"];\n\nconst alphaNumeric = letters.concat(1, [2, 3]);\n\nconsole.log(alphaNumeric);\n// results in ['a', 'b', 'c', 1, 2, 3]\n```\n\n### [Concatenating nested arrays](#concatenating_nested_arrays)\n\nThe following code concatenates nested arrays and demonstrates retention of references:\n\n```\nconst num1 = [[1]];\nconst num2 = [2, [3]];\n\nconst numbers = num1.concat(num2);\n\nconsole.log(numbers);\n// results in [[1], 2, [3]]\n\n// modify the first element of num1\nnum1[0].push(4);\n\nconsole.log(numbers);\n// results in [[1, 4], 2, [3]]\n```\n\n### [Concatenating array-like objects with Symbol.isConcatSpreadable](#concatenating_array-like_objects_with_symbol.isconcatspreadable)\n\n`concat` does not treat all array-like objects as arrays by default — only if `Symbol.isConcatSpreadable` is set to a truthy value (e.g. `true`).\n\n```\nconst obj1 = { 0: 1, 1: 2, 2: 3, length: 3 };\nconst obj2 = { 0: 1, 1: 2, 2: 3, length: 3, [Symbol.isConcatSpreadable]: true };\nconsole.log([0].concat(obj1, obj2));\n// [ 0, { '0': 1, '1': 2, '2': 3, length: 3 }, 1, 2, 3 ]\n```\n\n### [Using concat() on sparse arrays](#using_concat_on_sparse_arrays)\n\nIf any of the source arrays is sparse, the resulting array will also be sparse:\n\n```\nconsole.log([1, , 3].concat([4, 5])); // [1, empty, 3, 4, 5]\nconsole.log([1, 2].concat([3, , 5])); // [1, 2, 3, empty, 5]\n```\n\n### [Calling concat() on non-array objects](#calling_concat_on_non-array_objects)\n\nIf the `this` value is not an array, it is converted to an object and then treated in the same way as the arguments for `concat()`. In this case the return value is always a plain new array.\n\n```\nconsole.log(Array.prototype.concat.call({}, 1, 2, 3)); // [{}, 1, 2, 3]\nconsole.log(Array.prototype.concat.call(1, 2, 3)); // [ [Number: 1], 2, 3 ]\nconst arrayLike = {\n  [Symbol.isConcatSpreadable]: true,\n  length: 2,\n  0: 1,\n  1: 2,\n  2: 99, // ignored by concat() since length is 2\n};\nconsole.log(Array.prototype.concat.call(arrayLike, 3, 4)); // [1, 2, 3, 4]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.concat](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.concat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.concat() - JavaScript | MDN",
    "description": "The concat() method of Array instances is used to merge two or more arrays.\n  This method does not change the existing arrays, but instead returns a new array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse",
    "markdown": "# JSON.parse() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`JSON.parse()`** static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional _reviver_ function can be provided to perform a transformation on the resulting object before it is returned.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nJSON.parse(text)\nJSON.parse(text, reviver)\n```\n\n### [Parameters](#parameters)\n\n[`text`](#text)\n\nThe string to parse as JSON. See the [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) object for a description of JSON syntax.\n\n[`reviver`](#reviver) Optional\n\nIf a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments:\n\n[`key`](#key)\n\nThe key associated with the value.\n\n[`value`](#value)\n\nThe value produced by parsing.\n\n[`context`](#context) Optional\n\nA context object that holds state relevant to the current expression being revived. It is a new object for each invocation of the reviver function. It is only passed when reviving primitive values, but not when `value` is an object or array. It contains the following property:\n\n[`source`](#source)\n\nThe original JSON string representing this value.\n\n### [Return value](#return_value)\n\nThe [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), string, number, boolean, or `null` value corresponding to the given JSON `text`.\n\n### [Exceptions](#exceptions)\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nThrown if the string to parse is not valid JSON.\n\n## [Description](#description)\n\n`JSON.parse()` parses a JSON string according to the [JSON grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#full_json_grammar), then evaluates the string as if it's a JavaScript expression. The only instance where a piece of JSON text represents a different value from the same JavaScript expression is when dealing with the `\"__proto__\"` key — see [Object literal syntax vs. JSON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#object_literal_syntax_vs._json).\n\n### [The reviver parameter](#the_reviver_parameter)\n\nIf a `reviver` is specified, the value computed by parsing is _transformed_ before being returned. Specifically, the computed value and all its properties (in a [depth-first](https://en.wikipedia.org/wiki/Depth-first_search) fashion, beginning with the most nested properties and proceeding to the original value itself) are individually run through the `reviver`.\n\nThe `reviver` is called with the object containing the property being processed as `this` (unless you define the `reviver` as an arrow function, in which case there's no separate `this` binding) and two arguments: `key` and `value`, representing the property name as a string (even for arrays) and the property value. For primitive values, an additional `context` parameter is passed, which contains the source text of this value. If the `reviver` function returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) (or returns no value — for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value. If the `reviver` only transforms some values and not others, be certain to return all untransformed values as-is — otherwise, they will be deleted from the resulting object.\n\nSimilar to the `replacer` parameter of [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify), for arrays and objects, `reviver` will be last called on the root value with an empty string as the `key` and the root object as the `value`. For other valid JSON values, `reviver` works similarly and is called once with an empty string as the `key` and the value itself as the `value`.\n\nIf you return another value from `reviver`, that value will completely replace the originally parsed value. This even applies to the root value. For example:\n\n```\nconst transformedObj1 = JSON.parse('[1,5,{\"s\":1}]', (key, value) => {\n  return typeof value === \"object\" ? undefined : value;\n});\n\nconsole.log(transformedObj1); // undefined\n```\n\nThere is no way to work around this generically. You cannot specially handle the case where `key` is an empty string, because JSON objects can also contain keys that are empty strings. You need to know very precisely what kind of transformation is needed for each key when implementing the reviver.\n\nNote that `reviver` is run after the value is parsed. So, for example, numbers in JSON text will have already been converted to JavaScript numbers, and may lose precision in the process. One way to transfer large numbers without loss of precision is to serialize them as strings, and revive them to [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), or other appropriate arbitrary precision formats.\n\nYou can also use the `context.source` property to access the original JSON source text representing the value, as shown below:\n\n```\nconst bigJSON = '{\"gross_gdp\": 12345678901234567890}';\nconst bigObj = JSON.parse(bigJSON, (key, value, context) => {\n  if (key === \"gross_gdp\") {\n    // Ignore the value because it has already lost precision\n    return BigInt(context.source);\n  }\n  return value;\n});\n```\n\n## [Examples](#examples)\n\n### [Using JSON.parse()](#using_json.parse)\n\n```\nJSON.parse(\"{}\"); // {}\nJSON.parse(\"true\"); // true\nJSON.parse('\"foo\"'); // \"foo\"\nJSON.parse('[1, 5, \"false\"]'); // [1, 5, \"false\"]\nJSON.parse(\"null\"); // null\n```\n\n### [Using the reviver parameter](#using_the_reviver_parameter)\n\n```\nJSON.parse(\n  '{\"p\": 5}',\n  (key, value) =>\n    typeof value === \"number\"\n      ? value * 2 // return value * 2 for numbers\n      : value, // return everything else unchanged\n);\n// { p: 10 }\n\nJSON.parse('{\"1\": 1, \"2\": 2, \"3\": {\"4\": 4, \"5\": {\"6\": 6}}}', (key, value) => {\n  console.log(key);\n  return value;\n});\n// 1\n// 2\n// 4\n// 6\n// 5\n// 3\n// \"\"\n```\n\n### [Using reviver when paired with the replacer of JSON.stringify()](#using_reviver_when_paired_with_the_replacer_of_json.stringify)\n\nIn order for a value to properly round-trip (that is, it gets deserialized to the same original object), the serialization process must preserve the type information. For example, you can use the `replacer` parameter of [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) for this purpose:\n\n```\n// Maps are normally serialized as objects with no properties.\n// We can use the replacer to specify the entries to be serialized.\nconst map = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst jsonText = JSON.stringify(map, (key, value) =>\n  value instanceof Map ? Array.from(value.entries()) : value,\n);\n\nconsole.log(jsonText);\n// [[1,\"one\"],[2,\"two\"],[3,\"three\"]]\n\nconst map2 = JSON.parse(jsonText, (key, value) =>\n  Array.isArray(value) ? new Map(value) : value,\n);\n\nconsole.log(map2);\n// Map { 1 => \"one\", 2 => \"two\", 3 => \"three\" }\n```\n\nBecause JSON has no syntax space for annotating type metadata, in order to revive values that are not plain objects, you have to consider one of the following:\n\n*   Serialize the entire object to a string and prefix it with a type tag.\n*   \"Guess\" based on the structure of the data (for example, an array of two-member arrays)\n*   If the shape of the payload is fixed, based on the property name (for example, all properties called `registry` hold `Map` objects).\n\n### [Illegal JSON](#illegal_json)\n\nWhen `JSON.parse` receives a string that does not conform to the JSON grammar, it throws a `SyntaxError`.\n\nArrays and objects cannot have [trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas) in JSON:\n\n```\nJSON.parse(\"[1, 2, 3, 4, ]\");\n// SyntaxError: Unexpected token ] in JSON at position 13\n\nJSON.parse('{\"foo\": 1, }');\n// SyntaxError: Unexpected token } in JSON at position 12\n```\n\nJSON strings must be delimited by double (not single) quotes:\n\n```\nJSON.parse(\"{'foo': 1}\");\n// SyntaxError: Unexpected token ' in JSON at position 1\n\nJSON.parse(\"'string'\");\n// SyntaxError: Unexpected token ' in JSON at position 0\n```\n\nIf you are writing JSON inside a JavaScript string literal, you should either use single quotes to delimit the JavaScript string literal, or escape the double quotes that delimit the JSON string:\n\n```\nJSON.parse('{\"foo\": 1}'); // OK\nJSON.parse(\"{\\\"foo\\\": 1}\"); // OK\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-json.parse](https://tc39.es/ecma262/multipage/structured-data.html#sec-json.parse) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "JSON.parse() - JavaScript | MDN",
    "description": "The JSON.parse() static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
    "markdown": "# Array.prototype.filter() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`filter()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances creates a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to keep the element in the resulting array, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `filter()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nA [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) of the given array containing just the elements that pass the test. If no elements pass the test, an empty array is returned.\n\n## [Description](#description)\n\nThe `filter()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, and constructs a new array of all the values for which `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. Array elements which do not pass the `callbackFn` test are not included in the new array. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `filter()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Filtering out all small values](#filtering_out_all_small_values)\n\nThe following example uses `filter()` to create a filtered array that has all elements with values less than 10 removed.\n\n```\nfunction isBigEnough(value) {\n  return value >= 10;\n}\n\nconst filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n### [Find all prime numbers in an array](#find_all_prime_numbers_in_an_array)\n\nThe following example returns all prime numbers in the array:\n\n```\nconst array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n\nfunction isPrime(num) {\n  for (let i = 2; num > i; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\nconsole.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\n```\n\n### [Filtering invalid entries from JSON](#filtering_invalid_entries_from_json)\n\nThe following example uses `filter()` to create a filtered JSON of all elements with non-zero, numeric `id`.\n\n```\nconst arr = [\n  { id: 15 },\n  { id: -1 },\n  { id: 0 },\n  { id: 3 },\n  { id: 12.2 },\n  {},\n  { id: null },\n  { id: NaN },\n  { id: \"undefined\" },\n];\n\nlet invalidEntries = 0;\n\nfunction filterByID(item) {\n  if (Number.isFinite(item.id) && item.id !== 0) {\n    return true;\n  }\n  invalidEntries++;\n  return false;\n}\n\nconst arrByID = arr.filter(filterByID);\n\nconsole.log(\"Filtered Array\\n\", arrByID);\n// Filtered Array\n// [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n\nconsole.log(\"Number of Invalid Entries =\", invalidEntries);\n// Number of Invalid Entries = 5\n```\n\n### [Searching in array](#searching_in_array)\n\nFollowing example uses `filter()` to filter array content based on search criteria.\n\n```\nconst fruits = [\"apple\", \"banana\", \"grapes\", \"mango\", \"orange\"];\n\n/**\n * Filter array items based on search criteria (query)\n */\nfunction filterItems(arr, query) {\n  return arr.filter((el) => el.toLowerCase().includes(query.toLowerCase()));\n}\n\nconsole.log(filterItems(fruits, \"ap\")); // ['apple', 'grapes']\nconsole.log(filterItems(fruits, \"an\")); // ['banana', 'mango', 'orange']\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `map()` to extract the numerical ID from each name and then uses `filter()` to select the ones that are greater than its neighbors.\n\n```\nconst names = [\"JC63\", \"Bob132\", \"Ursula89\", \"Ben96\"];\nconst greatIDs = names\n  .map((name) => parseInt(name.match(/[0-9]+/)[0], 10))\n  .filter((id, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && id <= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && id <= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(greatIDs); // [132, 96]\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### [Using filter() on sparse arrays](#using_filter_on_sparse_arrays)\n\n`filter()` will skip empty slots.\n\n```\nconsole.log([1, , undefined].filter((x) => x === undefined)); // [undefined]\nconsole.log([1, , undefined].filter((x) => x !== 2)); // [1, undefined]\n```\n\n### [Calling filter() on non-array objects](#calling_filter_on_non-array_objects)\n\nThe `filter()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"a\", // ignored by filter() since length is 3\n};\nconsole.log(Array.prototype.filter.call(arrayLike, (x) => x <= \"b\"));\n// [ 'a', 'b' ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.filter](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.filter) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.filter() - JavaScript | MDN",
    "description": "The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",
    "markdown": "# Array.prototype.every() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`every()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nevery(callbackFn)\nevery(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `every()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n`true` unless `callbackFn` returns a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value for an array element, in which case `false` is immediately returned.\n\n## [Description](#description)\n\nThe `every()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, until the `callbackFn` returns a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value. If such an element is found, `every()` immediately returns `false` and stops iterating through the array. Otherwise, if `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value for all elements, `every()` returns `true`. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`every` acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns `true`. (It is [vacuously true](https://en.wikipedia.org/wiki/Vacuous_truth) that all elements of the [empty set](https://en.wikipedia.org/wiki/Empty_set#Properties) satisfy any given condition.)\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `every()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Testing size of all array elements](#testing_size_of_all_array_elements)\n\nThe following example tests whether all elements in the array are 10 or bigger.\n\n```\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\n[12, 5, 8, 130, 44].every(isBigEnough); // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n```\n\n### [Check if one array is a subset of another array](#check_if_one_array_is_a_subset_of_another_array)\n\nThe following example tests if all the elements of an array are present in another array.\n\n```\nconst isSubset = (array1, array2) =>\n  array2.every((element) => array1.includes(element));\n\nconsole.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6])); // true\nconsole.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7])); // false\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array. The following example first uses `filter()` to extract the positive values and then uses `every()` to check whether the array is strictly increasing.\n\n```\nconst numbers = [-2, 4, -8, 16, -32];\nconst isIncreasing = numbers\n  .filter((num) => num > 0)\n  .every((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === 0) return true;\n    return num > arr[idx - 1];\n  });\nconsole.log(isIncreasing); // true\n```\n\n### [Using every() on sparse arrays](#using_every_on_sparse_arrays)\n\n`every()` will not run its predicate on empty slots.\n\n```\nconsole.log([1, , 3].every((x) => x !== undefined)); // true\nconsole.log([2, , 2].every((x) => x === 2)); // true\n```\n\n### [Calling every() on non-array objects](#calling_every_on_non-array_objects)\n\nThe `every()` method reads the `length` property of `this` and then accesses each property with a nonnegative integer key less than `length` until they all have been accessed or `callbackFn` returns `false`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: 345, // ignored by every() since length is 3\n};\nconsole.log(\n  Array.prototype.every.call(arrayLike, (x) => typeof x === \"string\"),\n); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.every](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.every) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.every() - JavaScript | MDN",
    "description": "The every() method of Array instances tests whether\n  all elements in the array pass the test implemented by the provided function. It\n  returns a Boolean value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
    "markdown": "# Array.prototype.fill() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`fill()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances changes all elements within a range of indices in an array to a static value. It returns the modified array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfill(value)\nfill(value, start)\nfill(value, start, end)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nValue to fill the array with. Note all elements in the array will be this exact value: if `value` is an object, each slot in the array will reference that object.\n\n[`start`](#start) Optional\n\nZero-based index at which to start filling, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n*   If `start < -array.length` or `start` is omitted, `0` is used.\n*   If `start >= array.length`, no index is filled.\n\n[`end`](#end) Optional\n\nZero-based index at which to end filling, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `fill()` fills up to but not including `end`.\n\n*   Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n*   If `end < -array.length`, `0` is used.\n*   If `end >= array.length` or `end` is omitted, `array.length` is used, causing all indices until the end to be filled.\n*   If `end` implies a position before or at the position that `start` implies, nothing is filled.\n\n### [Return value](#return_value)\n\nThe modified array, filled with `value`.\n\n## [Description](#description)\n\nThe `fill()` method is a [mutating method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter the length of `this`, but it will change the content of `this`.\n\nThe `fill()` method fills empty slots in [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) arrays with `value` as well.\n\nThe `fill()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n**Note:** Using `Array.prototype.fill()` on an empty array (`length = 0`) would not modify it as the array has nothing to be modified. To use `Array.prototype.fill()` when declaring an array, make sure the array has non-zero `length`. [See example](#using_fill_to_populate_an_empty_array).\n\n## [Examples](#examples)\n\n### [Using fill()](#using_fill)\n\n```\nconsole.log([1, 2, 3].fill(4)); // [4, 4, 4]\nconsole.log([1, 2, 3].fill(4, 1)); // [1, 4, 4]\nconsole.log([1, 2, 3].fill(4, 1, 2)); // [1, 4, 3]\nconsole.log([1, 2, 3].fill(4, 1, 1)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, 3, 3)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, -3, -2)); // [4, 2, 3]\nconsole.log([1, 2, 3].fill(4, NaN, NaN)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, 3, 5)); // [1, 2, 3]\nconsole.log(Array(3).fill(4)); // [4, 4, 4]\n\n// A single object, referenced by each slot of the array:\nconst arr = Array(3).fill({}); // [{}, {}, {}]\narr[0].hi = \"hi\"; // [{ hi: \"hi\" }, { hi: \"hi\" }, { hi: \"hi\" }]\n```\n\n### [Using fill() to create a matrix of all 1](#using_fill_to_create_a_matrix_of_all_1)\n\nThis example shows how to create a matrix of all 1, like the `ones()` function of Octave or MATLAB.\n\n```\nconst arr = new Array(3);\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = new Array(4).fill(1); // Creating an array of size 4 and filled of 1\n}\narr[0][0] = 10;\nconsole.log(arr[0][0]); // 10\nconsole.log(arr[1][0]); // 1\nconsole.log(arr[2][0]); // 1\n```\n\n### [Using fill() to populate an empty array](#using_fill_to_populate_an_empty_array)\n\nThis example shows how to populate an array, setting all elements to a specific value. The `end` parameter does not have to be specified.\n\n```\nconst tempGirls = Array(5).fill(\"girl\", 0);\n```\n\nNote that the array was initially a [sparse array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) with no assigned indices. `fill()` is still able to fill this array.\n\n### [Calling fill() on non-array objects](#calling_fill_on_non-array_objects)\n\nThe `fill()` method reads the `length` property of `this` and sets the value of each integer-keyed property from `start` to `end`.\n\n```\nconst arrayLike = { length: 2 };\nconsole.log(Array.prototype.fill.call(arrayLike, 1));\n// { '0': 1, '1': 1, length: 2 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.fill](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.fill) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.fill() - JavaScript | MDN",
    "description": "The fill() method of Array instances changes all elements within a range of indices in an array to a static value. It returns the modified array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",
    "markdown": "# Array.prototype.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`entries()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the key/value pairs for each index in the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `entries()` method iterates empty slots as if they have the value `undefined`.\n\nThe `entries()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Iterating with index and element](#iterating_with_index_and_element)\n\n```\nconst a = [\"a\", \"b\", \"c\"];\n\nfor (const [index, element] of a.entries()) {\n  console.log(index, element);\n}\n\n// 0 'a'\n// 1 'b'\n// 2 'c'\n```\n\n### [Using a for...of loop](#using_a_for...of_loop)\n\n```\nconst array = [\"a\", \"b\", \"c\"];\nconst arrayEntries = array.entries();\n\nfor (const element of arrayEntries) {\n  console.log(element);\n}\n\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n### [Iterating sparse arrays](#iterating_sparse_arrays)\n\n`entries()` will visit empty slots as if they are `undefined`.\n\n```\nfor (const element of [, \"a\"].entries()) {\n  console.log(element);\n}\n// [0, undefined]\n// [1, 'a']\n```\n\n### [Calling entries() on non-array objects](#calling_entries_on_non-array_objects)\n\nThe `entries()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"d\", // ignored by entries() since length is 3\n};\nfor (const entry of Array.prototype.entries.call(arrayLike)) {\n  console.log(entry);\n}\n// [ 0, 'a' ]\n// [ 1, 'b' ]\n// [ 2, 'c' ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.entries](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.entries() - JavaScript | MDN",
    "description": "The entries() method of Array instances returns a new array iterator object that contains the key/value pairs for each index in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",
    "markdown": "# Array.prototype.findIndex() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`findIndex()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns the index of the first element in an array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.\n\nSee also the [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method, which returns the first element that satisfies the testing function (rather than its index).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindIndex(callbackFn)\nfindIndex(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `findIndex()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe index of the first element in the array that passes the test. Otherwise, `-1`.\n\n## [Description](#description)\n\nThe `findIndex()` is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order, until `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. `findIndex()` then returns the index of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findIndex()` returns `-1`. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findIndex()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Find the index of a prime number in an array](#find_the_index_of_a_prime_number_in_an_array)\n\nThe following example returns the index of the first element in the array that is a prime number, or `-1` if there is no prime number.\n\n```\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 9, 12].findIndex(isPrime)); // -1, not found\nconsole.log([4, 6, 7, 9, 12].findIndex(isPrime)); // 2 (array[2] is 7)\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findIndex()` to find the first element that is less than its neighbors.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst firstTrough = numbers\n  .filter((num) => num > 0)\n  .findIndex((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(firstTrough); // 1\n```\n\n### [Using findIndex() on sparse arrays](#using_findindex_on_sparse_arrays)\n\nYou can search for `undefined` in a sparse array and get the index of an empty slot.\n\n```\nconsole.log([1, , 3].findIndex((x) => x === undefined)); // 1\n```\n\n### [Calling findIndex() on non-array objects](#calling_findindex_on_non-array_objects)\n\nThe `findIndex()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  \"-1\": 0.1, // ignored by findIndex() since -1 < 0\n  0: 2,\n  1: 7.3,\n  2: 4,\n};\nconsole.log(\n  Array.prototype.findIndex.call(arrayLike, (x) => !Number.isInteger(x)),\n); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.findindex](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.findindex) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.findIndex() - JavaScript | MDN",
    "description": "The findIndex() method of Array instances returns the index of the first element in an array that satisfies the provided testing function.\n  If no elements satisfy the testing function, -1 is returned.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast",
    "markdown": "# Array.prototype.findLast() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`findLast()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\nIf you need to find:\n\n*   the _first_ element that matches, use [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n*   the _index_ of the last matching element in the array, use [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex).\n*   the _index of a value_, use [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf). (It's similar to [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex), but checks each element for equality with the value instead of using a testing function.)\n*   whether a value _exists_ in an array, use [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes). Again, it checks each element for equality with the value instead of using a testing function.\n*   if any element satisfies the provided testing function, use [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindLast(callbackFn)\nfindLast(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `findLast()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe last (highest-index) element in the array that satisfies the provided testing function; [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if no matching element is found.\n\n## [Description](#description)\n\nThe `findLast()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in descending-index order, until `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. `findLast()` then returns that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findLast()` returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findLast()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Find last object in an array matching on element properties](#find_last_object_in_an_array_matching_on_element_properties)\n\nThis example shows how you might create a test based on the properties of array elements.\n\n```\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"fish\", quantity: 1 },\n  { name: \"cherries\", quantity: 5 },\n];\n\n// return true inventory stock is low\nfunction isNotEnough(item) {\n  return item.quantity < 2;\n}\n\nconsole.log(inventory.findLast(isNotEnough));\n// { name: \"fish\", quantity: 1 }\n```\n\n#### Using arrow function and destructuring\n\nThe previous example might be written using an arrow function and [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring):\n\n```\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"fish\", quantity: 1 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nconst result = inventory.findLast(({ quantity }) => quantity < 2);\n\nconsole.log(result);\n// { name: \"fish\", quantity: 1 }\n```\n\n### [Find the last prime number in an array](#find_the_last_prime_number_in_an_array)\n\nThe following example returns the last element in the array that is a prime number, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no prime number.\n\n```\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 12].findLast(isPrime)); // undefined, not found\nconsole.log([4, 5, 7, 8, 9, 11, 12].findLast(isPrime)); // 11\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findLast()` to find the last element that is less than its neighbors.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst lastTrough = numbers\n  .filter((num) => num > 0)\n  .findLast((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(lastTrough); // 2\n```\n\n### [Using findLast() on sparse arrays](#using_findlast_on_sparse_arrays)\n\nEmpty slots in sparse arrays _are_ visited, and are treated the same as `undefined`.\n\n```\n// Declare array with no elements at indexes 2, 3, and 4\nconst array = [0, 1, , , , 5, 6];\n\n// Shows all indexes, not just those with assigned values\narray.findLast((value, index) => {\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value undefined\n// Visited index 3 with value undefined\n// Visited index 2 with value undefined\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n\n// Shows all indexes, including deleted\narray.findLast((value, index) => {\n  // Delete element 5 on first iteration\n  if (index === 6) {\n    console.log(`Deleting array[5] with value ${array[5]}`);\n    delete array[5];\n  }\n  // Element 5 is still visited even though deleted\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Deleting array[5] with value 5\n// Visited index 6 with value 6\n// Visited index 5 with value undefined\n// Visited index 4 with value undefined\n// Visited index 3 with value undefined\n// Visited index 2 with value undefined\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n```\n\n### [Calling findLast() on non-array objects](#calling_findlast_on_non-array_objects)\n\nThe `findLast()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 7.3,\n  2: 4,\n  3: 3, // ignored by findLast() since length is 3\n};\nconsole.log(\n  Array.prototype.findLast.call(arrayLike, (x) => Number.isInteger(x)),\n); // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.findlast](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.findlast) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.findLast() - JavaScript | MDN",
    "description": "The findLast() method of Array instances iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function.\n  If no elements satisfy the testing function, undefined is returned.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",
    "markdown": "# Array.prototype.find() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`find()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n*   If you need the **index** of the found element in the array, use [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n*   If you need to find the **index of a value**, use [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf). (It's similar to [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex), but checks each element for equality with the value instead of using a testing function.)\n*   If you need to find if a value **exists** in an array, use [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes). Again, it checks each element for equality with the value instead of using a testing function.\n*   If you need to find if any element satisfies the provided testing function, use [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n*   If you need to find all elements that satisfy the provided testing function, use [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfind(callbackFn)\nfind(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `find()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe first element in the array that satisfies the provided testing function. Otherwise, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n## [Description](#description)\n\nThe `find()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order, until `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. `find()` then returns that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `find()` returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `find()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Find an object in an array by one of its properties](#find_an_object_in_an_array_by_one_of_its_properties)\n\n```\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nfunction isCherries(fruit) {\n  return fruit.name === \"cherries\";\n}\n\nconsole.log(inventory.find(isCherries));\n// { name: 'cherries', quantity: 5 }\n```\n\n#### Using arrow function and destructuring\n\n```\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nconst result = inventory.find(({ name }) => name === \"cherries\");\n\nconsole.log(result); // { name: 'cherries', quantity: 5 }\n```\n\n### [Find a prime number in an array](#find_a_prime_number_in_an_array)\n\nThe following example finds an element in the array that is a prime number (or returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no prime number):\n\n```\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\nconsole.log([4, 5, 8, 12].find(isPrime)); // 5\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `find()` to find the first element that is less than its neighbors.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst firstTrough = numbers\n  .filter((num) => num > 0)\n  .find((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(firstTrough); // 1\n```\n\n### [Using find() on sparse arrays](#using_find_on_sparse_arrays)\n\nEmpty slots in sparse arrays _are_ visited, and are treated the same as `undefined`.\n\n```\n// Declare array with no elements at indexes 2, 3, and 4\nconst array = [0, 1, , , , 5, 6];\n\n// Shows all indexes, not just those with assigned values\narray.find((value, index) => {\n  console.log(\"Visited index\", index, \"with value\", value);\n});\n// Visited index 0 with value 0\n// Visited index 1 with value 1\n// Visited index 2 with value undefined\n// Visited index 3 with value undefined\n// Visited index 4 with value undefined\n// Visited index 5 with value 5\n// Visited index 6 with value 6\n\n// Shows all indexes, including deleted\narray.find((value, index) => {\n  // Delete element 5 on first iteration\n  if (index === 0) {\n    console.log(\"Deleting array[5] with value\", array[5]);\n    delete array[5];\n  }\n  // Element 5 is still visited even though deleted\n  console.log(\"Visited index\", index, \"with value\", value);\n});\n// Deleting array[5] with value 5\n// Visited index 0 with value 0\n// Visited index 1 with value 1\n// Visited index 2 with value undefined\n// Visited index 3 with value undefined\n// Visited index 4 with value undefined\n// Visited index 5 with value undefined\n// Visited index 6 with value 6\n```\n\n### [Calling find() on non-array objects](#calling_find_on_non-array_objects)\n\nThe `find()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  \"-1\": 0.1, // ignored by find() since -1 < 0\n  0: 2,\n  1: 7.3,\n  2: 4,\n};\nconsole.log(Array.prototype.find.call(arrayLike, (x) => !Number.isInteger(x)));\n// 7.3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.find](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.find() - JavaScript | MDN",
    "description": "The find() method of Array instances returns the first element in the provided array that satisfies the provided testing function.\n  If no values satisfy the testing function, undefined is returned.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex",
    "markdown": "# Array.prototype.findLastIndex() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`findLastIndex()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.\n\nSee also the [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) method, which returns the value of last element that satisfies the testing function (rather than its index).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindLastIndex(callbackFn)\nfindLastIndex(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `findLastIndex()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe index of the last (highest-index) element in the array that passes the test. Otherwise `-1` if no matching element is found.\n\n## [Description](#description)\n\nThe `findLastIndex()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in descending-index order, until `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. `findLastIndex()` then returns the index of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findLastIndex()` returns `-1`. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findLastIndex()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Find the index of the last prime number in an array](#find_the_index_of_the_last_prime_number_in_an_array)\n\nThe following example returns the index of the last element in the array that is a prime number, or `-1` if there is no prime number.\n\n```\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 12].findLastIndex(isPrime)); // -1, not found\nconsole.log([4, 5, 7, 8, 9, 11, 12].findLastIndex(isPrime)); // 5\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findLastIndex()` to find the last element that is less than its neighbors.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst lastTrough = numbers\n  .filter((num) => num > 0)\n  .findLastIndex((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(lastTrough); // 6\n```\n\n### [Using findLastIndex() on sparse arrays](#using_findlastindex_on_sparse_arrays)\n\nYou can search for `undefined` in a sparse array and get the index of an empty slot.\n\n```\nconsole.log([1, , 3].findLastIndex((x) => x === undefined)); // 1\n```\n\n### [Calling findLastIndex() on non-array objects](#calling_findlastindex_on_non-array_objects)\n\nThe `findLastIndex()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 7.3,\n  2: 4,\n  3: 3, // ignored by findLastIndex() since length is 3\n};\nconsole.log(\n  Array.prototype.findLastIndex.call(arrayLike, (x) => Number.isInteger(x)),\n); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.findlastindex](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.findlastindex) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.findLastIndex() - JavaScript | MDN",
    "description": "The findLastIndex() method of Array instances iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function.\n  If no elements satisfy the testing function, -1 is returned.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",
    "markdown": "# Array.prototype.flat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`flat()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`depth`](#depth) Optional\n\nThe depth level specifying how deep a nested array structure should be flattened. Defaults to 1.\n\n### [Return value](#return_value)\n\nA new array with the sub-array elements concatenated into it.\n\n## [Description](#description)\n\nThe `flat()` method is a [copying method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` but instead returns a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) that contains the same elements as the ones from the original array.\n\nThe `flat()` method ignores empty slots if the array being flattened is [sparse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). For example, if `depth` is 1, both empty slots in the root array and in the first level of nested arrays are ignored, but empty slots in further nested arrays are preserved with the arrays themselves.\n\nThe `flat()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. However, its elements must be arrays if they are to be flattened.\n\n## [Examples](#examples)\n\n### [Flattening nested arrays](#flattening_nested_arrays)\n\n```\nconst arr1 = [1, 2, [3, 4]];\narr1.flat();\n// [1, 2, 3, 4]\n\nconst arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nconst arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]\n\nconst arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\narr4.flat(Infinity);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### [Using flat() on sparse arrays](#using_flat_on_sparse_arrays)\n\nThe `flat()` method removes empty slots in arrays:\n\n```\nconst arr5 = [1, 2, , 4, 5];\nconsole.log(arr5.flat()); // [1, 2, 4, 5]\n\nconst array = [1, , 3, [\"a\", , \"c\"]];\nconsole.log(array.flat()); // [ 1, 3, \"a\", \"c\" ]\n\nconst array2 = [1, , 3, [\"a\", , [\"d\", , \"e\"]]];\nconsole.log(array2.flat()); // [ 1, 3, \"a\", [\"d\", empty, \"e\"] ]\nconsole.log(array2.flat(2)); // [ 1, 3, \"a\", \"d\", \"e\"]\n```\n\n### [Calling flat() on non-array objects](#calling_flat_on_non-array_objects)\n\nThe `flat()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. If the element is not an array, it's directly appended to the result. If the element is an array, it's flattened according to the `depth` parameter.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: [1, 2],\n  // Array-like objects aren't flattened\n  1: { length: 2, 0: 3, 1: 4 },\n  2: 5,\n  3: 3, // ignored by flat() since length is 3\n};\nconsole.log(Array.prototype.flat.call(arrayLike));\n// [ 1, 2, { '0': 3, '1': 4, length: 2 }, 5 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.flat](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.flat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.flat() - JavaScript | MDN",
    "description": "The flat() method of Array instances creates a new array with all sub-array\n  elements concatenated into it recursively up to the specified depth.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
    "markdown": "# Array.prototype.includes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`includes()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances determines whether an array includes a certain value among its entries, returning `true` or `false` as appropriate.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nincludes(searchElement)\nincludes(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nThe value to search for.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used. However, the array is still searched from front to back in this case.\n*   If `fromIndex < -array.length` or `fromIndex` is omitted, `0` is used, causing the entire array to be searched.\n*   If `fromIndex >= array.length`, the array is not searched and `false` is returned.\n\n### [Return value](#return_value)\n\nA boolean value which is `true` if the value `searchElement` is found within the array (or the part of the array indicated by the index `fromIndex`, if specified).\n\n## [Description](#description)\n\nThe `includes()` method compares `searchElement` to elements of the array using the [SameValueZero](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. Values of zero are all considered to be equal, regardless of sign. (That is, `-0` is equal to `0`), but `false` is _not_ considered to be the same as `0`. [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) can be correctly searched for.\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `includes()` method iterates empty slots as if they have the value `undefined`.\n\nThe `includes()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Using includes()](#using_includes)\n\n```\n[1, 2, 3].includes(2); // true\n[1, 2, 3].includes(4); // false\n[1, 2, 3].includes(3, 3); // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n[\"1\", \"2\", \"3\"].includes(3); // false\n```\n\n### [fromIndex is greater than or equal to the array length](#fromindex_is_greater_than_or_equal_to_the_array_length)\n\nIf `fromIndex` is greater than or equal to the length of the array, `false` is returned. The array will not be searched.\n\n```\nconst arr = [\"a\", \"b\", \"c\"];\n\narr.includes(\"c\", 3); // false\narr.includes(\"c\", 100); // false\n```\n\n### [Computed index is less than 0](#computed_index_is_less_than_0)\n\nIf `fromIndex` is negative, the computed index is calculated to be used as a position in the array at which to begin searching for `searchElement`. If the computed index is less than or equal to `0`, the entire array will be searched.\n\n```\n// array length is 3\n// fromIndex is -100\n// computed index is 3 + (-100) = -97\n\nconst arr = [\"a\", \"b\", \"c\"];\n\narr.includes(\"a\", -100); // true\narr.includes(\"b\", -100); // true\narr.includes(\"c\", -100); // true\narr.includes(\"a\", -2); // false\n```\n\n### [Using includes() on sparse arrays](#using_includes_on_sparse_arrays)\n\nYou can search for `undefined` in a sparse array and get `true`.\n\n```\nconsole.log([1, , 3].includes(undefined)); // true\n```\n\n### [Calling includes() on non-array objects](#calling_includes_on_non-array_objects)\n\nThe `includes()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 1, // ignored by includes() since length is 3\n};\nconsole.log(Array.prototype.includes.call(arrayLike, 2));\n// true\nconsole.log(Array.prototype.includes.call(arrayLike, 1));\n// false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.includes](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.includes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.includes() - JavaScript | MDN",
    "description": "The includes() method of Array instances determines whether an array\n  includes a certain value among its entries, returning true or\n  false as appropriate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",
    "markdown": "# Array.prototype.flatMap() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`flatMap()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) followed by a [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) of depth 1 (`arr.map(...args).flat()`), but slightly more efficient than calling those two methods separately.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nflatMap(callbackFn)\nflatMap(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `flatMap()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nA new array with each element being the result of the callback function and flattened by a depth of 1.\n\n## [Description](#description)\n\nThe `flatMap()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). See [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) for a detailed description of the callback function. The `flatMap()` method is identical to [`map(callbackFn, thisArg)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) followed by [`flat(1)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) — for each element, it produces an array of new elements, and concatenates the resulting arrays together to form a new array. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\nThe `flatMap()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. However, the value returned from `callbackFn` must be an array if it is to be flattened.\n\n### [Alternative](#alternative)\n\n#### Pre-allocate and explicitly iterate\n\n```\nconst arr = [1, 2, 3, 4];\n\narr.flatMap((x) => [x, x * 2]);\n// is equivalent to\nconst n = arr.length;\nconst acc = new Array(n * 2);\nfor (let i = 0; i < n; i++) {\n  const x = arr[i];\n  acc[i * 2] = x;\n  acc[i * 2 + 1] = x * 2;\n}\n// [1, 2, 2, 4, 3, 6, 4, 8]\n```\n\nNote that in this particular case the `flatMap` approach is slower than the for-loop approach — due to the creation of temporary arrays that must be garbage collected, as well as the return array not needing to be frequently resized. However, `flatMap` may still be the correct solution in cases where its flexibility and readability are desired.\n\n## [Examples](#examples)\n\n### [map() and flatMap()](#map_and_flatmap)\n\n```\nconst arr1 = [1, 2, 3, 4];\n\narr1.map((x) => [x * 2]);\n// [[2], [4], [6], [8]]\n\narr1.flatMap((x) => [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap((x) => [[x * 2]]);\n// [[2], [4], [6], [8]]\n```\n\nWhile the above could have been achieved by using map itself, here is an example that better showcases the use of `flatMap()`.\n\nLet's generate a list of words from a list of sentences.\n\n```\nconst arr1 = [\"it's Sunny in\", \"\", \"California\"];\n\narr1.map((x) => x.split(\" \"));\n// [[\"it's\",\"Sunny\",\"in\"],[\"\"],[\"California\"]]\n\narr1.flatMap((x) => x.split(\" \"));\n// [\"it's\",\"Sunny\",\"in\", \"\", \"California\"]\n```\n\nNotice, the output list length can be different from the input list length.\n\n### [For adding and removing items during a map()](#for_adding_and_removing_items_during_a_map)\n\n`flatMap` can be used as a way to add and remove items (modify the number of items) during a `map`. In other words, it allows you to map _many items to many items_ (by handling each input item separately), rather than always _one-to-one_. In this sense, it works like the opposite of [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter). Return a 1-element array to keep the item, a multiple-element array to add items, or a 0-element array to remove the item.\n\n```\n// Let's say we want to remove all the negative numbers\n// and split the odd numbers into an even number and a 1\nconst a = [5, 4, -3, 20, 17, -33, -4, 18];\n//         |\\  \\  x   |  | \\   x   x   |\n//        [4,1, 4,   20, 16, 1,       18]\n\nconst result = a.flatMap((n) => {\n  if (n < 0) {\n    return [];\n  }\n  return n % 2 === 0 ? [n] : [n - 1, 1];\n});\nconsole.log(result); // [4, 1, 4, 20, 16, 1, 18]\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract operational stations and then uses `flatMap()` to create a new array where each element contains a station and its next station. On the last station, it returns an empty array to exclude it from the final array.\n\n```\nconst stations = [\"New Haven\", \"West Haven\", \"Milford (closed)\", \"Stratford\"];\nconst line = stations\n  .filter((name) => !name.endsWith(\"(closed)\"))\n  .flatMap((name, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === arr.length - 1) return []; // last station has no next station\n    return [`${name} - ${arr[idx + 1]}`];\n  });\nconsole.log(line); // ['New Haven - West Haven', 'West Haven - Stratford']\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### [Using flatMap() on sparse arrays](#using_flatmap_on_sparse_arrays)\n\nThe `callbackFn` won't be called for empty slots in the source array because `map()` doesn't, while `flat()` ignores empty slots in the returned arrays.\n\n```\nconsole.log([1, 2, , 4, 5].flatMap((x) => [x, x * 2])); // [1, 2, 2, 4, 4, 8, 5, 10]\nconsole.log([1, 2, 3, 4].flatMap((x) => [, x * 2])); // [2, 4, 6, 8]\n```\n\n### [Calling flatMap() on non-array objects](#calling_flatmap_on_non-array_objects)\n\nThe `flatMap()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. If the return value of the callback function is not an array, it is always directly appended to the result array.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4, // ignored by flatMap() since length is 3\n};\nconsole.log(Array.prototype.flatMap.call(arrayLike, (x) => [x, x * 2]));\n// [1, 2, 2, 4, 3, 6]\n\n// Array-like objects returned from the callback won't be flattened\nconsole.log(\n  Array.prototype.flatMap.call(arrayLike, (x) => ({\n    length: 1,\n    0: x,\n  })),\n);\n// [ { '0': 1, length: 1 }, { '0': 2, length: 1 }, { '0': 3, length: 1 } ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.flatmap](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.flatmap) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.flatMap() - JavaScript | MDN",
    "description": "The flatMap() method of Array instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 (arr.map(...args).flat()), but slightly more efficient than calling those two methods separately.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
    "markdown": "# Array.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`forEach()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances executes a provided function once for each array element.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array `forEach()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nThe `forEach()` method is an [iterative method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order. Unlike [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), `forEach()` always returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and is not chainable. The typical use case is to execute side effects at the end of a chain. Read the [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `forEach()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nThere is no way to stop or break a `forEach()` loop other than by throwing an exception. If you need such behavior, the `forEach()` method is the wrong tool.\n\nEarly termination may be accomplished with looping statements like [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for), [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), and [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in). Array methods like [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some), [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), and [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) also stops iteration immediately when further iteration is not necessary.\n\n`forEach()` expects a synchronous function — it does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as `forEach` callbacks.\n\n```\nconst ratings = [5, 4, 5];\nlet sum = 0;\n\nconst sumFunction = async (a, b) => a + b;\n\nratings.forEach(async (rating) => {\n  sum = await sumFunction(sum, rating);\n});\n\nconsole.log(sum);\n// Naively expected output: 14\n// Actual output: 0\n```\n\nTo run a series of asynchronous operations sequentially or concurrently, see [promise composition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#composition).\n\n## [Examples](#examples)\n\n### [Converting a for loop to forEach](#converting_a_for_loop_to_foreach)\n\n```\nconst items = [\"item1\", \"item2\", \"item3\"];\nconst copyItems = [];\n\n// before\nfor (let i = 0; i < items.length; i++) {\n  copyItems.push(items[i]);\n}\n\n// after\nitems.forEach((item) => {\n  copyItems.push(item);\n});\n```\n\n### [Printing the contents of an array](#printing_the_contents_of_an_array)\n\n**Note:** In order to display the content of an array in the console, you can use [`console.table()`](https://developer.mozilla.org/en-US/docs/Web/API/console/table_static \"console.table()\"), which prints a formatted version of the array.\n\nThe following example illustrates an alternative approach, using `forEach()`.\n\nThe following code logs a line for each element in an array:\n\n```\nconst logArrayElements = (element, index /*, array */) => {\n  console.log(`a[${index}] = ${element}`);\n};\n\n// Notice that index 2 is skipped, since there is no item at\n// that position in the array.\n[2, 5, , 9].forEach(logArrayElements);\n// Logs:\n// a[0] = 2\n// a[1] = 5\n// a[3] = 9\n```\n\n### [Using thisArg](#using_thisarg)\n\nThe following (contrived) example updates an object's properties from each entry in the array:\n\n```\nclass Counter {\n  constructor() {\n    this.sum = 0;\n    this.count = 0;\n  }\n  add(array) {\n    // Only function expressions have their own this bindings.\n    array.forEach(function countEntry(entry) {\n      this.sum += entry;\n      ++this.count;\n    }, this);\n  }\n}\n\nconst obj = new Counter();\nobj.add([2, 5, 9]);\nconsole.log(obj.count); // 3\nconsole.log(obj.sum); // 16\n```\n\nSince the `thisArg` parameter (`this`) is provided to `forEach()`, it is passed to `callback` each time it's invoked. The callback uses it as its `this` value.\n\n**Note:** If passing the callback function used an [arrow function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), the `thisArg` parameter could be omitted, since all arrow functions lexically bind the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value.\n\n### [An object copy function](#an_object_copy_function)\n\nThe following code creates a copy of a given object.\n\nThere are different ways to create a copy of an object. The following is just one way and is presented to explain how `Array.prototype.forEach()` works by using `Object.*` utility functions.\n\n```\nconst copy = (obj) => {\n  const copy = Object.create(Object.getPrototypeOf(obj));\n  const propNames = Object.getOwnPropertyNames(obj);\n  propNames.forEach((name) => {\n    const desc = Object.getOwnPropertyDescriptor(obj, name);\n    Object.defineProperty(copy, name, desc);\n  });\n  return copy;\n};\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = copy(obj1); // obj2 looks like obj1 now\n```\n\n### [Flatten an array](#flatten_an_array)\n\nThe following example is only here for learning purpose. If you want to flatten an array using built-in methods, you can use [`Array.prototype.flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat).\n\n```\nconst flatten = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (Array.isArray(item)) {\n      result.push(...flatten(item));\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n// Usage\nconst nested = [1, 2, 3, [4, 5, [6, 7], 8, 9]];\nconsole.log(flatten(nested)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### [Using the third argument of callbackFn](#using_the_third_argument_of_callbackfn)\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `forEach()` to log its neighbors.\n\n```\nconst numbers = [3, -1, 1, 4, 1, 5];\nnumbers\n  .filter((num) => num > 0)\n  .forEach((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    console.log(arr[idx - 1], num, arr[idx + 1]);\n  });\n// undefined 3 1\n// 3 1 4\n// 1 4 1\n// 4 1 5\n// 1 5 undefined\n```\n\n### [Using forEach() on sparse arrays](#using_foreach_on_sparse_arrays)\n\n```\nconst arraySparse = [1, 3, /* empty */, 7];\nlet numCallbackRuns = 0;\n\narraySparse.forEach((element) => {\n  console.log({ element });\n  numCallbackRuns++;\n});\n\nconsole.log({ numCallbackRuns });\n\n// { element: 1 }\n// { element: 3 }\n// { element: 7 }\n// { numCallbackRuns: 3 }\n```\n\nThe callback function is not invoked for the missing value at index 2.\n\n### [Calling forEach() on non-array objects](#calling_foreach_on_non-array_objects)\n\nThe `forEach()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by forEach() since length is 3\n};\nArray.prototype.forEach.call(arrayLike, (x) => console.log(x));\n// 2\n// 3\n// 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.foreach](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.forEach() - JavaScript | MDN",
    "description": "The forEach() method of Array instances executes a provided function once\n  for each array element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",
    "markdown": "# Array.prototype.keys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`keys()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each index in the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `keys()` method iterates empty slots as if they have the value `undefined`.\n\nThe `keys()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Using keys() on sparse arrays](#using_keys_on_sparse_arrays)\n\nUnlike [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), which only includes keys that actually exist in the array, the `keys()` iterator doesn't ignore holes representing missing properties.\n\n```\nconst arr = [\"a\", , \"c\"];\nconst sparseKeys = Object.keys(arr);\nconst denseKeys = [...arr.keys()];\nconsole.log(sparseKeys); // ['0', '2']\nconsole.log(denseKeys); // [0, 1, 2]\n```\n\n### [Calling keys() on non-array objects](#calling_keys_on_non-array_objects)\n\nThe `keys()` method reads the `length` property of `this` and then yields all integer indices between 0 and `length - 1`. No index access actually happens.\n\n```\nconst arrayLike = {\n  length: 3,\n};\nfor (const entry of Array.prototype.keys.call(arrayLike)) {\n  console.log(entry);\n}\n// 0\n// 1\n// 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.keys](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.keys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.keys() - JavaScript | MDN",
    "description": "The keys() method of Array instances returns a new array iterator object that contains the keys for each index in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
    "markdown": "# Array.prototype.indexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`indexOf()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances returns the first index at which a given element can be found in the array, or -1 if it is not present.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nindexOf(searchElement)\nindexOf(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nElement to locate in the array.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used. Note, the array is still searched from front to back in this case.\n*   If `fromIndex < -array.length` or `fromIndex` is omitted, `0` is used, causing the entire array to be searched.\n*   If `fromIndex >= array.length`, the array is not searched and `-1` is returned.\n\n### [Return value](#return_value)\n\nThe first index of `searchElement` in the array; `-1` if not found.\n\n## [Description](#description)\n\nThe `indexOf()` method compares `searchElement` to elements of the array using [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (the same algorithm used by the `===` operator). [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values are never compared as equal, so `indexOf()` always returns `-1` when `searchElement` is `NaN`.\n\nThe `indexOf()` method skips empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `indexOf()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Using indexOf()](#using_indexof)\n\nThe following example uses `indexOf()` to locate values in an array.\n\n```\nconst array = [2, 9, 9];\narray.indexOf(2); // 0\narray.indexOf(7); // -1\narray.indexOf(9, 2); // 2\narray.indexOf(2, -1); // -1\narray.indexOf(2, -3); // 0\n```\n\nYou cannot use `indexOf()` to search for `NaN`.\n\n```\nconst array = [NaN];\narray.indexOf(NaN); // -1\n```\n\n### [Finding all the occurrences of an element](#finding_all_the_occurrences_of_an_element)\n\n```\nconst indices = [];\nconst array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\nconst element = \"a\";\nlet idx = array.indexOf(element);\nwhile (idx !== -1) {\n  indices.push(idx);\n  idx = array.indexOf(element, idx + 1);\n}\nconsole.log(indices);\n// [0, 2, 4]\n```\n\n### [Finding if an element exists in the array or not and updating the array](#finding_if_an_element_exists_in_the_array_or_not_and_updating_the_array)\n\n```\nfunction updateVegetablesCollection(veggies, veggie) {\n  if (veggies.indexOf(veggie) === -1) {\n    veggies.push(veggie);\n    console.log(`New veggies collection is: ${veggies}`);\n  } else {\n    console.log(`${veggie} already exists in the veggies collection.`);\n  }\n}\n\nconst veggies = [\"potato\", \"tomato\", \"chillies\", \"green-pepper\"];\n\nupdateVegetablesCollection(veggies, \"spinach\");\n// New veggies collection is: potato,tomato,chillies,green-pepper,spinach\nupdateVegetablesCollection(veggies, \"spinach\");\n// spinach already exists in the veggies collection.\n```\n\n### [Using indexOf() on sparse arrays](#using_indexof_on_sparse_arrays)\n\nYou cannot use `indexOf()` to search for empty slots in sparse arrays.\n\n```\nconsole.log([1, , 3].indexOf(undefined)); // -1\n```\n\n### [Calling indexOf() on non-array objects](#calling_indexof_on_non-array_objects)\n\nThe `indexOf()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by indexOf() since length is 3\n};\nconsole.log(Array.prototype.indexOf.call(arrayLike, 2));\n// 0\nconsole.log(Array.prototype.indexOf.call(arrayLike, 5));\n// -1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.indexof](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.indexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.indexOf() - JavaScript | MDN",
    "description": "The indexOf() method of Array instances returns the first index at which a\n  given element can be found in the array, or -1 if it is not present.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
    "markdown": "# Array.prototype.join() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`join()`** method of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances creates and returns a new string by concatenating all of the elements in this array, separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`separator`](#separator) Optional\n\nA string to separate each pair of adjacent elements of the array. If omitted, the array elements are separated with a comma (\",\").\n\n### [Return value](#return_value)\n\nA string with all array elements joined. If `array.length` is `0`, the empty string is returned.\n\n## [Description](#description)\n\nThe string conversions of all array elements are joined into one string. If an element is `undefined` or `null`, it is converted to an empty string instead of the string `\"null\"` or `\"undefined\"`.\n\nThe `join` method is accessed internally by [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) with no arguments. Overriding `join` of an array instance will override its `toString` behavior as well.\n\n`Array.prototype.join` recursively converts each element, including other arrays, to strings. Because the string returned by `Array.prototype.toString` (which is the same as calling `join()`) does not have delimiters, nested arrays look like they are flattened. You can only control the separator of the first level, while deeper levels always use the default comma.\n\n```\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrix.join()); // 1,2,3,4,5,6,7,8,9\nconsole.log(matrix.join(\";\")); // 1,2,3;4,5,6;7,8,9\n```\n\nWhen an array is cyclic (it contains an element that is itself), browsers avoid infinite recursion by ignoring the cyclic reference.\n\n```\nconst arr = [];\narr.push(1, [3, arr, 4], 2);\nconsole.log(arr.join(\";\")); // 1;3,,4;2\n```\n\nWhen used on [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `join()` method iterates empty slots as if they have the value `undefined`.\n\nThe `join()` method is [generic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## [Examples](#examples)\n\n### [Joining an array four different ways](#joining_an_array_four_different_ways)\n\nThe following example creates an array, `a`, with three elements, then joins the array four times: using the default separator, then a comma and a space, then a plus and an empty string.\n\n```\nconst a = [\"Wind\", \"Water\", \"Fire\"];\na.join(); // 'Wind,Water,Fire'\na.join(\", \"); // 'Wind, Water, Fire'\na.join(\" + \"); // 'Wind + Water + Fire'\na.join(\"\"); // 'WindWaterFire'\n```\n\n### [Using join() on sparse arrays](#using_join_on_sparse_arrays)\n\n`join()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```\nconsole.log([1, , 3].join()); // '1,,3'\nconsole.log([1, undefined, 3].join()); // '1,,3'\n```\n\n### [Calling join() on non-array objects](#calling_join_on_non-array_objects)\n\nThe `join()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by join() since length is 3\n};\nconsole.log(Array.prototype.join.call(arrayLike));\n// 2,3,4\nconsole.log(Array.prototype.join.call(arrayLike, \".\"));\n// 2.3.4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-array.prototype.join](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.join) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array.prototype.join() - JavaScript | MDN",
    "description": "The join() method of Array instances creates and\n  returns a new string by concatenating all of the elements in this array,\n  separated by commas or a specified separator string. If the array has\n  only one item, then that item will be returned without using the separator.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee",
    "markdown": "# arguments.callee - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`arguments.callee`** data property contains the currently executing function that the arguments belong to.\n\n## [Value](#value)\n\nA reference to the currently executing function.\n\n| Property attributes of `arguments.callee` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n**Note:** `callee` is a data property only in non-strict functions with simple parameters (in which case the `arguments` object is also [auto-syncing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#assigning_to_indices)). Otherwise, it is an accessor property whose getter and setter both throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n## [Description](#description)\n\n`callee` is a property of the `arguments` object. It can be used to refer to the currently executing function inside the function body of that function. This is useful when the name of the function is unknown, such as within a function expression with no name (also called \"anonymous functions\").\n\n(The text below is largely adapted from [a Stack Overflow answer by olliej](https://stackoverflow.com/questions/103598/why-was-the-arguments-callee-caller-property-deprecated-in-javascript/235760))\n\nEarly versions of JavaScript did not allow named function expressions, and for this reason you could not make a recursive function expression.\n\nFor example, this syntax worked:\n\n```\nfunction factorial(n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\n[1, 2, 3, 4, 5].map(factorial);\n```\n\nbut:\n\n```\n[1, 2, 3, 4, 5].map(function (n) {\n  return n <= 1 ? 1 : /* what goes here? */ (n - 1) * n;\n});\n```\n\ndid not. To get around this `arguments.callee` was added so you could do\n\n```\n[1, 2, 3, 4, 5].map(function (n) {\n  return n <= 1 ? 1 : arguments.callee(n - 1) * n;\n});\n```\n\nHowever, the design of `arguments.callee` has multiple issues. The first problem is that the recursive call will get a different `this` value. For example:\n\n```\nconst global = this;\n\nconst sillyFunction = function (recursed) {\n  if (this !== global) {\n    console.log(\"This is:\", this);\n  } else {\n    console.log(\"This is the global\");\n  }\n\n  if (!recursed) {\n    return arguments.callee(true);\n  }\n};\n\nsillyFunction();\n// This is the global\n// This is: [object Arguments]\n```\n\nIn addition, references to `arguments.callee` make inlining and tail recursion impossible in the general case. (You can achieve it in select cases through tracing, etc., but even the best code is suboptimal due to checks that would not otherwise be necessary.)\n\nECMAScript 3 resolved these issues by allowing named function expressions. For example:\n\n```\n[1, 2, 3, 4, 5].map(function factorial(n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n});\n```\n\nThis has numerous benefits:\n\n*   the function can be called like any other from inside your code\n*   it does not create a variable in the outer scope ([except for IE 8 and below](https://kangax.github.io/nfe/#example_1_function_expression_identifier_leaks_into_an_enclosing_scope))\n*   it has better performance than accessing the arguments object\n\nStrict mode has banned other properties that leak stack information, like the [`caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) property of functions. This is because looking at the call stack has one single major effect: it makes a large number of optimizations impossible, or much more difficult. For example, if you cannot guarantee that a function `f` will not call an unknown function, it is not possible to inline `f`.\n\n```\nfunction f(a, b, c, d, e) {\n  return a ? b * c : d * e;\n}\n```\n\nIf the JavaScript interpreter cannot guarantee that all the provided arguments are numbers at the point that the call is made, it needs to either insert checks for all the arguments before the inlined code, or it cannot inline the function. This means any call site that may have been trivially inlinable accumulates a large number of guards. Now in this particular case a smart interpreter should be able to rearrange the checks to be more optimal and not check any values that would not be used. However in many cases that's just not possible and therefore it becomes impossible to inline.\n\n## [Examples](#examples)\n\n### [Using arguments.callee in an anonymous recursive function](#using_arguments.callee_in_an_anonymous_recursive_function)\n\nA recursive function must be able to refer to itself. Typically, a function refers to itself by its name. However, an anonymous function (which can be created by a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) or the [`Function` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)) does not have a name. Therefore if there is no accessible variable referring to it, the only way the function can refer to itself is by `arguments.callee`.\n\nThe following example defines a function, which, in turn, defines and returns a factorial function. This example isn't very practical, and there are nearly no cases where the same result cannot be achieved with [named function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function).\n\n```\nfunction create() {\n  return function (n) {\n    if (n <= 1) {\n      return 1;\n    }\n    return n * arguments.callee(n - 1);\n  };\n}\n\nconst result = create()(5); // returns 120 (5 * 4 * 3 * 2 * 1)\n```\n\n### [Recursion of anonymous functions with a Y-combinator](#recursion_of_anonymous_functions_with_a_y-combinator)\n\nAlthough function expressions can now be named, [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) always remain anonymous, which means they cannot reference themselves without being assigned to a variable first. Fortunately, in Lambda calculus there's a very good solution which allows a function to both be anonymous and self-referential. The technique is called a [Y-combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator). Here we will not explain _how_ it works, only _that_ it works.\n\n```\n// The Y-combinator: a utility function!\nconst Y = (hof) => ((x) => x(x))((x) => hof((y) => x(x)(y)));\n\nconsole.log(\n  [1, 2, 3, 4, 5].map(\n    // Wrap the higher-order function in the Y-combinator\n    // \"factorial\" is not a function's name: it's introduced as a parameter\n    Y((factorial) => (n) => (n <= 1 ? 1 : factorial(n - 1) * n)),\n  ),\n);\n// [ 1, 2, 6, 24, 120 ]\n```\n\n**Note:** This method allocates a new closure for every iteration, which may significantly increase memory usage. It's only here to demonstrate the possibility, but should be avoided in production. Use a temporary variable or a named function expression instead.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arguments-exotic-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arguments-exotic-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "arguments.callee - JavaScript | MDN",
    "description": "The arguments.callee data property contains the currently executing function that the arguments belong to.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw",
    "markdown": "# AsyncGenerator.prototype.throw() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`throw()`** method of [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) instances acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## [Syntax](#syntax)\n\n```\nasyncGeneratorInstance.throw(exception)\n```\n\n### [Parameters](#parameters)\n\n[`exception`](#exception)\n\nThe exception to throw. For debugging purposes, it is useful to make it an `instanceof` [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n### [Return value](#return_value)\n\nIf the thrown error is not caught, it will return a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which rejects with the exception passed in.\n\nIf the exception is caught by a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) and the generator resumes to yield more values, it will return a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which resolves with an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator function's control flow has reached the end.\n*   `false` if the generator function is able to produce more values.\n\n[`value`](#value)\n\nThe value yielded from the next `yield` expression.\n\n## [Examples](#examples)\n\n### [Using throw()](#using_throw)\n\nThe following example shows a simple generator and an error that is thrown using the `throw` method. An error can be caught by a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block as usual.\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  while (true) {\n    try {\n      await sleep(500);\n      yield 42;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next(1).then((res) => console.log(res)); // { value: 42, done: false }\nasyncGen\n  .throw(new Error(\"Something went wrong\")) // Error: Something went wrong\n  .then((res) => console.log(res)); // { value: 42, done: false }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgenerator-prototype-throw](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgenerator-prototype-throw) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGenerator.prototype.throw() - JavaScript | MDN",
    "description": "The throw() method of AsyncGenerator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function",
    "markdown": "# Function() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Function()`** constructor creates [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval). However, unlike `eval` (which may have access to the local scope), the `Function` constructor creates functions which execute in the global scope only.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Function(functionBody)\nnew Function(arg1, functionBody)\nnew Function(arg1, arg2, functionBody)\nnew Function(arg1, arg2, /* …, */ argN, functionBody)\n\nFunction(functionBody)\nFunction(arg1, functionBody)\nFunction(arg1, arg2, functionBody)\nFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n**Note:** `Function()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Function` instance.\n\n### [Parameters](#parameters)\n\n[`arg1`](#arg1), …, `argN` Optional\n\nNames to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain [identifier](https://developer.mozilla.org/en-US/docs/Glossary/Identifier), [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), or [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) parameter, optionally with a [default](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)), or a list of such strings separated with commas.\n\nAs the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: `\"x\", \"theValue = 42\", \"[a, b] /* numbers */\"` — or `\"x, theValue = 42, [a, b] /* numbers */\"`. (`\"x, theValue = 42\", \"[a, b]\"` is also correct, though very confusing to read.)\n\n[`functionBody`](#functionbody)\n\nA string containing the JavaScript statements comprising the function definition.\n\n## [Description](#description)\n\n`Function` objects created with the `Function` constructor are parsed when the function is created. This is less efficient than creating a function with a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) or [function declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) and calling it within your code, because such functions are parsed with the rest of the code.\n\nAll arguments passed to the function, except the last, are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed. The function will be dynamically compiled as a function expression, with the source assembled in the following fashion:\n\n```\n`function anonymous(${args.join(\",\")}\n) {\n${functionBody}\n}`;\n```\n\nThis is observable by calling the function's [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString) method.\n\nHowever, unlike normal [function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function), the name `anonymous` is not added to the `functionBody`'s scope, since `functionBody` only has access the global scope. If `functionBody` is not in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) (the body itself needs to have the `\"use strict\"` directive since it doesn't inherit the strictness from the context), you may use [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) to refer to the function itself. Alternatively, you can define the recursive part as an inner function:\n\n```\nconst recursiveFn = new Function(\n  \"count\",\n  `\n(function recursiveFn(count) {\n  if (count < 0) {\n    return;\n  }\n  console.log(count);\n  recursiveFn(count - 1);\n})(count);\n`,\n);\n```\n\nNote that the two dynamic parts of the assembled source — the parameters list `args.join(\",\")` and `functionBody` — will first be parsed separately to ensure they are each syntactically valid. This prevents injection-like attempts.\n\n```\nnew Function(\"/*\", \"*/) {\");\n// SyntaxError: Unexpected end of arg string\n// Doesn't become \"function anonymous(/*) {*/) {}\"\n```\n\n## [Examples](#examples)\n\n### [Specifying arguments with the Function constructor](#specifying_arguments_with_the_function_constructor)\n\nThe following code creates a `Function` object that takes two arguments.\n\n```\n// Example can be run directly in your JavaScript console\n\n// Create a function that takes two arguments, and returns the sum of those arguments\nconst adder = new Function(\"a\", \"b\", \"return a + b\");\n\n// Call the function\nadder(2, 6);\n// 8\n```\n\nThe arguments `a` and `b` are formal argument names that are used in the function body, `return a + b`.\n\n### [Creating a function object from a function declaration or function expression](#creating_a_function_object_from_a_function_declaration_or_function_expression)\n\n```\n// The function constructor can take in multiple statements separated by a semicolon. Function expressions require a return statement with the function's name\n\n// Observe that new Function is called. This is so we can call the function we created directly afterwards\nconst sumOfArray = new Function(\n  \"const sumArray = (arr) => arr.reduce((previousValue, currentValue) => previousValue + currentValue); return sumArray\",\n)();\n\n// call the function\nsumOfArray([1, 2, 3, 4]);\n// 10\n\n// If you don't call new Function at the point of creation, you can use the Function.call() method to call it\nconst findLargestNumber = new Function(\n  \"function findLargestNumber (arr) { return Math.max(...arr) }; return findLargestNumber\",\n);\n\n// call the function\nfindLargestNumber.call({}).call({}, [2, 4, 1, 8, 5]);\n// 8\n\n// Function declarations do not require a return statement\nconst sayHello = new Function(\n  \"return function (name) { return `Hello, ${name}` }\",\n)();\n\n// call the function\nsayHello(\"world\");\n// Hello, world\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function() constructor - JavaScript | MDN",
    "description": "The Function() constructor creates Function objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as eval(). However, unlike eval (which may have access to the local scope), the Function constructor creates functions which execute in the global scope only.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next",
    "markdown": "# AsyncGenerator.prototype.next() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`next()`** method of [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) instances returns the next value in the sequence.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nAn optional value used to modify the internal state of the generator. A value passed to the `next()` method will be received by `yield`\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which when resolved returns an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator is past the end of its control flow. In this case `value` specifies the _return value_ of the generator (which may be undefined).\n*   `false` if the generator is able to produce more values.\n\n[`value`](#value_2)\n\nAny JavaScript value yielded or returned by the generator.\n\n## [Examples](#examples)\n\n### [Using next()](#using_next)\n\nThe following example shows a simple generator and the object that the `next` method returns:\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  yield delayedValue(500, 1);\n  yield delayedValue(500, 2);\n  yield delayedValue(500, 3);\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }\n```\n\n### [Sending values to the generator](#sending_values_to_the_generator)\n\nIn this example, `next` is called with a value.\n\n**Note:** The first call does not log anything, because the generator was not yielding anything initially.\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  while (true) {\n    await sleep(500);\n    const value = yield;\n    console.log(value);\n  }\n}\n\nasync function main() {\n  const asyncGen = createAsyncGenerator();\n  // No log at this step: the first value sent through `next` is lost\n  console.log(await asyncGen.next(1)); // { value: undefined, done: false }\n  // Logs 2: the value sent through `next`\n  console.log(await asyncGen.next(2)); // { value: undefined, done: false }\n}\n\nmain();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgenerator-prototype-next](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgenerator-prototype-next) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGenerator.prototype.next() - JavaScript | MDN",
    "description": "The next() method of AsyncGenerator instances returns the next value in the sequence.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction",
    "markdown": "# AsyncFunction() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`AsyncFunction()`** constructor creates [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction) objects.\n\nNote that `AsyncFunction` is _not_ a global object. It can be obtained with the following code:\n\n```\nconst AsyncFunction = async function () {}.constructor;\n```\n\nThe `AsyncFunction()` constructor is not intended to be used directly, and all caveats mentioned in the [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) description apply to `AsyncFunction()`.\n\n## [Syntax](#syntax)\n\n```\nnew AsyncFunction(functionBody)\nnew AsyncFunction(arg1, functionBody)\nnew AsyncFunction(arg1, arg2, functionBody)\nnew AsyncFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nAsyncFunction(functionBody)\nAsyncFunction(arg1, functionBody)\nAsyncFunction(arg1, arg2, functionBody)\nAsyncFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n**Note:** `AsyncFunction()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AsyncFunction` instance.\n\n### [Parameters](#parameters)\n\n## [Examples](#examples)\n\n### [Creating an async function from an AsyncFunction() constructor](#creating_an_async_function_from_an_asyncfunction_constructor)\n\n```\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nconst AsyncFunction = async function () {}.constructor;\n\nconst fn = new AsyncFunction(\n  \"a\",\n  \"b\",\n  \"return await resolveAfter2Seconds(a) + await resolveAfter2Seconds(b);\",\n);\n\nfn(10, 20).then((v) => {\n  console.log(v); // prints 30 after 4 seconds\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-constructor](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-async-function-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncFunction() constructor - JavaScript | MDN",
    "description": "The AsyncFunction() constructor creates AsyncFunction objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return",
    "markdown": "# AsyncGenerator.prototype.return() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`return()`** method of [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) instances acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n## [Syntax](#syntax)\n\n```\nasyncGeneratorInstance.return()\nasyncGeneratorInstance.return(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nThe value to return.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which resolves with an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator function's control flow has reached the end.\n*   `false` if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the `return` is captured in a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) and there are more `yield` expressions in the `finally` block.\n\n[`value`](#value_2)\n\nThe value that is given as an argument, or, if the `yield` expression is wrapped in a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block), the value yielded/returned from the `finally` block.\n\n## [Description](#description)\n\nThe `return()` method, when called, can be seen as if a `return value;` statement is inserted in the generator's body at the current suspended position, where `value` is the value passed to the `return()` method. Therefore, in a typical flow, calling `return(value)` will return `{ done: true, value: value }`. However, if the `yield` expression is wrapped in a `try...finally` block, the control flow doesn't exit the function body, but proceeds to the `finally` block instead. In this case, the value returned may be different, and `done` may even be `false`, if there are more `yield` expressions within the `finally` block.\n\n## [Examples](#examples)\n\n### [Using return()](#using_return)\n\nThe following example shows a simple async generator and the `return` method.\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  yield delayedValue(500, 1);\n  yield delayedValue(500, 2);\n  yield delayedValue(500, 3);\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.return(\"foo\").then((res) => console.log(res)); // { value: \"foo\", done: true }\nasyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }\n```\n\n### [Using return() once a generator is complete](#using_return_once_a_generator_is_complete)\n\nIf no `value` argument is passed into the `return()` method, the promise will resolve as if the [next()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next) method has been called. In this example the generator has completed, so the value returned is `undefined`.\n\n`return()` can still be called after the generator is in a \"completed\" state, however the generator will stay in this state.\n\n```\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }\n// value is returned undefined, as no value is passed and generator is 'done'\nasyncGen.return().then((res) => console.log(res)); // { value: undefined, done: true }\n// we can still return a value once the generator is complete\nasyncGen.return(1).then((res) => console.log(res)); // { value: 1, done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgenerator-prototype-return](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgenerator-prototype-return) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGenerator.prototype.return() - JavaScript | MDN",
    "description": "The return() method of AsyncGenerator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator",
    "markdown": "# AsyncIterator.prototype\\[@@asyncIterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@asyncIterator]()`** method of [`AsyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator) instances implements the [async iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loops. It returns the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the async iterator object itself.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nasyncIterator[Symbol.asyncIterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the async iterator object itself.\n\n## [Examples](#examples)\n\n### [Iteration using for await...of loop](#iteration_using_for_await...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@asyncIterator` method makes all built-in async iterators [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols), and iterating syntaxes like the `for await...of` loop automatically calls this method to obtain the async iterator to loop over.\n\n```\nconst asyncIterator = (async function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n(async () => {\n  for await (const value of asyncIterator) {\n    console.log(value);\n  }\n})();\n// Logs: 1, 2, 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asynciteratorprototype-asynciterator](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asynciteratorprototype-asynciterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncIterator.prototype[@@asyncIterator]() - JavaScript | MDN",
    "description": "The [@@asyncIterator]() method of AsyncIterator instances implements the async iterable protocol and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as for await...of loops. It returns the value of this, which is the async iterator object itself.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/prototype",
    "markdown": "# AsyncGeneratorFunction.prototype.prototype - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`prototype`** property of `AsyncGeneratorFunction.prototype` is shared by all async generator functions. Its value is [`AsyncGenerator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator). Each async generator function created with the `async function*` syntax or the `AsyncGeneratorFunction()` constructor also has its own `prototype` property, whose prototype is `AsyncGeneratorFunction.prototype.prototype`. When the async generator function is called, its `prototype` property becomes the prototype of the returned async generator object.\n\n## [Value](#value)\n\nThe same object as [`AsyncGenerator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator). `AsyncGeneratorFunction.prototype.prototype` is the technically more accurate name, but `AsyncGenerator.prototype` appeals to the intuition that it's the prototype of async generator objects.\n\n| Property attributes of `AsyncGeneratorFunction.prototype.prototype` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | yes |\n\nThe `prototype` property of each `AsyncGeneratorFunction` instance is an empty object with no properties, whose prototype is `AsyncGeneratorFunction.prototype.prototype`. It has the following property attributes:\n\n| Property attributes of `AsyncGeneratorFunction.prototype.prototype` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nAn async generator function instance has two `prototype` properties. The first one is its own `prototype` property. The second one is the `prototype` property on its prototype, which is `AsyncGeneratorFunction.prototype`. (Remember that every async generator function is an instance of `AsyncGeneratorFunction`, so it has `AsyncGeneratorFunction.prototype` as its prototype.)\n\n```\nasync function* genFunc() {}\nconst AsyncGeneratorFunctionPrototype = Object.getPrototypeOf(genFunc);\nconsole.log(Object.hasOwn(genFunc, \"prototype\")); // true\nconsole.log(Object.hasOwn(AsyncGeneratorFunctionPrototype, \"prototype\")); // true\n```\n\nWhen an async generator function is called, the async generator function's `prototype` property becomes the prototype of the returned async generator object.\n\n```\nconst gen = genFunc();\nconst proto = Object.getPrototypeOf;\nconsole.log(proto(gen) === genFunc.prototype); // true\nconsole.log(proto(proto(gen)) === AsyncGeneratorFunctionPrototype.prototype); // true\n```\n\nThe following diagram illustrates the prototype chain of an async generator function and its instances. Each hollow arrow indicates an inheritance relationship (i.e. a prototype link), and each solid arrow indicates a property relationship. Note that there's no way to access `genFunc` from `gen` — they only have an `instanceof` relationship.\n\n![The inheritance diagram of async generators and async generator functions](https://mdn.github.io/shared-assets/images/diagrams/javascript/asyncgeneratorfunction/prototype-chain.svg)\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgeneratorfunction-prototype-prototype](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgeneratorfunction-prototype-prototype) |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgeneratorfunction-instances-prototype](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgeneratorfunction-instances-prototype) |\n\n## [See also](#see_also)",
    "title": "AsyncGeneratorFunction.prototype.prototype - JavaScript | MDN",
    "description": "The prototype property of AsyncGeneratorFunction.prototype is shared by all async generator functions. Its value is AsyncGenerator.prototype. Each async generator function created with the async function* syntax or the AsyncGeneratorFunction() constructor also has its own prototype property, whose prototype is AsyncGeneratorFunction.prototype.prototype. When the async generator function is called, its prototype property becomes the prototype of the returned async generator object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE",
    "markdown": "# Number.MAX\\_VALUE - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.MAX_VALUE`** static data property represents the maximum numeric value representable in JavaScript.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n21024 - 2971, or approximately `1.7976931348623157E+308`.\n\n| Property attributes of `Number.MAX_VALUE` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nValues larger than `MAX_VALUE` are represented as [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) and will lose their actual value.\n\nBecause `MAX_VALUE` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.MAX_VALUE`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Using MAX\\_VALUE](#using_max_value)\n\nThe following code multiplies two numeric values. If the result is less than or equal to `MAX_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.\n\n```\nif (num1 * num2 <= Number.MAX_VALUE) {\n  func1();\n} else {\n  func2();\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.max\\_value](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.max_value) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.MAX_VALUE - JavaScript | MDN",
    "description": "The Number.MAX_VALUE static data property represents the maximum numeric value representable in JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE",
    "markdown": "# Number.MIN\\_VALUE - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.MIN_VALUE`** static data property represents the smallest positive numeric value representable in JavaScript.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n2\\-1074, or `5E-324`.\n\n| Property attributes of `Number.MIN_VALUE` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Number.MIN_VALUE` is the smallest positive number (not the most negative number) that can be represented within float precision — in other words, the number closest to 0. The ECMAScript spec doesn't define a precise value that implementations are required to support — instead the spec says, _\"must be the smallest non-zero positive value that can actually be represented by the implementation\"_. This is because small IEEE-754 floating point numbers are [denormalized](https://en.wikipedia.org/wiki/Subnormal_number), but implementations are not required to support this representation, in which case `Number.MIN_VALUE` may be larger.\n\nIn practice, its precise value in mainstream engines like V8 (used by Chrome, Edge, Node.js), SpiderMonkey (used by Firefox), and JavaScriptCore (used by Safari) is 2\\-1074, or `5E-324`.\n\nBecause `MIN_VALUE` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.MIN_VALUE`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Using MIN\\_VALUE](#using_min_value)\n\nThe following code divides two numeric values. If the result is greater than or equal to `MIN_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.\n\n```\nif (num1 / num2 >= Number.MIN_VALUE) {\n  func1();\n} else {\n  func2();\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.min\\_value](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.min_value) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.MIN_VALUE - JavaScript | MDN",
    "description": "The Number.MIN_VALUE static data property represents the smallest positive numeric value representable in JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN",
    "markdown": "# Number.NaN - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.NaN`** static data property represents Not-A-Number, which is equivalent to [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). For more information about the behaviors of `NaN`, see the [description for the global property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe number value [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n| Property attributes of `Number.NaN` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `NaN` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.NaN`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Checking whether values are numeric](#checking_whether_values_are_numeric)\n\n```\nfunction sanitize(x) {\n  if (isNaN(x)) {\n    return Number.NaN;\n  }\n  return x;\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.nan](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.nan) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.NaN - JavaScript | MDN",
    "description": "The Number.NaN static data property represents Not-A-Number, which is equivalent to NaN. For more information about the behaviors of NaN, see the description for the global property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY",
    "markdown": "# Number.NEGATIVE\\_INFINITY - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.NEGATIVE_INFINITY`** static data property represents the negative Infinity value.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe same as the negative value of the global [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) property.\n\n| Property attributes of `Number.NEGATIVE_INFINITY` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `Number.NEGATIVE_INFINITY` value behaves slightly differently than mathematical infinity:\n\n*   Any positive value, including [`POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY), multiplied by `NEGATIVE_INFINITY` is `NEGATIVE_INFINITY`.\n*   Any negative value, including `NEGATIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is [`POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY).\n*   Any positive value divided by `NEGATIVE_INFINITY` is [negative zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n*   Any negative value divided by `NEGATIVE_INFINITY` is [positive zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n*   Zero multiplied by `NEGATIVE_INFINITY` is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) multiplied by `NEGATIVE_INFINITY` is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   `NEGATIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is [`POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY).\n*   `NEGATIVE_INFINITY`, divided by any positive value except [`POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY), is `NEGATIVE_INFINITY`.\n*   `NEGATIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or [`POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY), is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   `x > Number.NEGATIVE_INFINITY` is true for any number _x_ that isn't `NEGATIVE_INFINITY`.\n\nYou might use the `Number.NEGATIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) would be more appropriate in such a case.\n\nBecause `NEGATIVE_INFINITY` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.NEGATIVE_INFINITY`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Using NEGATIVE\\_INFINITY](#using_negative_infinity)\n\nIn the following example, the variable `smallNumber` is assigned a value that is smaller than the minimum value. When the [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement executes, `smallNumber` has the value `-Infinity`, so `smallNumber` is set to a more manageable value before continuing.\n\n```\nlet smallNumber = -Number.MAX_VALUE * 2;\n\nif (smallNumber === Number.NEGATIVE_INFINITY) {\n  smallNumber = returnFinite();\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.negative\\_infinity](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.negative_infinity) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.NEGATIVE_INFINITY - JavaScript | MDN",
    "description": "The Number.NEGATIVE_INFINITY static data property represents the negative Infinity value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY",
    "markdown": "# Number.POSITIVE\\_INFINITY - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.POSITIVE_INFINITY`** static data property represents the positive Infinity value.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe same as the value of the global [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) property.\n\n| Property attributes of `Number.POSITIVE_INFINITY` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `Number.POSITIVE_INFINITY` value behaves slightly differently than mathematical infinity:\n\n*   Any positive value, including `POSITIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `POSITIVE_INFINITY`.\n*   Any negative value, including [`NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY), multiplied by `POSITIVE_INFINITY` is [`NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY).\n*   Any positive number divided by `POSITIVE_INFINITY` is [positive zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n*   Any negative number divided by `POSITIVE_INFINITY` is [negative zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754).\n*   Zero multiplied by `POSITIVE_INFINITY` is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) multiplied by `POSITIVE_INFINITY` is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   `POSITIVE_INFINITY`, divided by any negative value except [`NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY), is [`NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY).\n*   `POSITIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `POSITIVE_INFINITY`.\n*   `POSITIVE_INFINITY`, divided by either [`NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) or `POSITIVE_INFINITY`, is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   `Number.POSITIVE_INFINITY > x` is true for any number _x_ that isn't `POSITIVE_INFINITY`.\n\nYou might use the `Number.POSITIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) would be more appropriate in such a case.\n\nBecause `POSITIVE_INFINITY` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.POSITIVE_INFINITY`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Using POSITIVE\\_INFINITY](#using_positive_infinity)\n\nIn the following example, the variable `bigNumber` is assigned a value that is larger than the maximum value. When the [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement executes, `bigNumber` has the value `Infinity`, so `bigNumber` is set to a more manageable value before continuing.\n\n```\nlet bigNumber = Number.MAX_VALUE * 2;\n\nif (bigNumber === Number.POSITIVE_INFINITY) {\n  bigNumber = returnFinite();\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.positive\\_infinity](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.positive_infinity) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.POSITIVE_INFINITY - JavaScript | MDN",
    "description": "The Number.POSITIVE_INFINITY static data property represents the positive Infinity value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON",
    "markdown": "# Number.EPSILON - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.EPSILON`** static data property represents the difference between 1 and the smallest floating point number greater than 1.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n2\\-52, or approximately `2.2204460492503130808472633361816E-16`.\n\n| Property attributes of `Number.EPSILON` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Number.EPSILON` is the difference between 1 and the next greater number representable in the Number format, because [double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), and the lowest bit has a significance of 2\\-52.\n\nNote that the absolute accuracy of floating numbers decreases as the number gets larger, because the exponent grows while the mantissa's accuracy stays the same. [`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) is the smallest representable positive number, which is much smaller than `Number.EPSILON`.\n\nBecause `EPSILON` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.EPSILON`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Testing equality](#testing_equality)\n\nAny number encoding system occupying a finite number of bits, of whatever base you choose (e.g. decimal or binary), will _necessarily_ be unable to represent all numbers exactly, because you are trying to represent an infinite number of points on the number line using a finite amount of memory. For example, a base-10 (decimal) system cannot represent 1/3 exactly, and a base-2 (binary) system cannot represent `0.1` exactly. Thus, for example, `0.1 + 0.2` is not exactly equal to `0.3`:\n\n```\nconsole.log(0.1 + 0.2); // 0.30000000000000004\nconsole.log(0.1 + 0.2 === 0.3); // false\n```\n\nFor this reason, it is often advised that **floating point numbers should never be compared with `===`**. Instead, we can deem two numbers as equal if they are _close enough_ to each other. The `Number.EPSILON` constant is usually a reasonable threshold for errors if the arithmetic is around the magnitude of `1`, because `EPSILON`, in essence, specifies how accurate the number \"1\" is.\n\n```\nfunction equal(x, y) {\n  return Math.abs(x - y) < Number.EPSILON;\n}\n\nconst x = 0.2;\nconst y = 0.3;\nconst z = 0.1;\nconsole.log(equal(x + z, y)); // true\n```\n\nHowever, `Number.EPSILON` is inappropriate for any arithmetic operating on a larger magnitude. If your data is on the 103 order of magnitude, the decimal part will have a much smaller accuracy than `Number.EPSILON`:\n\n```\nfunction equal(x, y) {\n  return Math.abs(x - y) < Number.EPSILON;\n}\n\nconst x = 1000.1;\nconst y = 1000.2;\nconst z = 2000.3;\nconsole.log(x + y); // 2000.3000000000002; error of 10^-13 instead of 10^-16\nconsole.log(equal(x + y, z)); // false\n```\n\nIn this case, a larger tolerance is required. As the numbers compared have a magnitude of approximately `2000`, a multiplier such as `2000 * Number.EPSILON` creates enough tolerance for this instance.\n\n```\nfunction equal(x, y, tolerance = Number.EPSILON) {\n  return Math.abs(x - y) < tolerance;\n}\n\nconst x = 1000.1;\nconst y = 1000.2;\nconst z = 2000.3;\nconsole.log(equal(x + y, z, 2000 * Number.EPSILON)); // true\n```\n\nIn addition to magnitude, it is important to consider the _accuracy_ of your input. For example, if the numbers are collected from a form input and the input value can only be adjusted by steps of `0.1` (i.e. [`<input type=\"number\" step=\"0.1\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)), it usually makes sense to allow a much larger tolerance, such as `0.01`, since the data only has a precision of `0.1`.\n\n**Note:** Important takeaway: do not simply use `Number.EPSILON` as a threshold for equality testing. Use a threshold that is appropriate for the magnitude and accuracy of the numbers you are comparing.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.epsilon](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.epsilon) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.EPSILON - JavaScript | MDN",
    "description": "The Number.EPSILON static data property represents the difference between 1 and the smallest floating point number greater than 1.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat",
    "markdown": "# Number.parseFloat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.parseFloat()`** static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nNumber.parseFloat(string)\n```\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nThe value to parse, [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading [whitespace](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) in this argument is ignored.\n\n### [Return value](#return_value)\n\nA floating point number parsed from the given `string`.\n\nOr [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) when the first non-whitespace character cannot be converted to a number.\n\n## [Examples](#examples)\n\n### [Number.parseFloat vs. parseFloat](#number.parsefloat_vs._parsefloat)\n\nThis method has the same functionality as the global [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) function:\n\n```\nNumber.parseFloat === parseFloat; // true\n```\n\nIts purpose is modularization of globals.\n\nSee [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) for more detail and examples.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.parsefloat](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.parsefloat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.parseFloat() - JavaScript | MDN",
    "description": "The Number.parseFloat() static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns NaN.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt",
    "markdown": "# Number.parseInt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.parseInt()`** static method parses a string argument and returns an integer of the specified radix or base.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nNumber.parseInt(string)\nNumber.parseInt(string, radix)\n```\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nThe value to parse, [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading whitespace in this argument is ignored.\n\n[`radix`](#radix) Optional\n\nAn integer between `2` and `36` that represents the _radix_ (the base in mathematical numeral systems) of the `string`.\n\nIf `radix` is undefined or `0`, it is assumed to be `10` except when the number begins with the code unit pairs `0x` or `0X`, in which case a radix of `16` is assumed.\n\n### [Return value](#return_value)\n\nAn integer parsed from the given `string`.\n\nIf the `radix` is smaller than `2` or bigger than `36`, or the first non-whitespace character cannot be converted to a number, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is returned.\n\n## [Examples](#examples)\n\n### [Number.parseInt vs. parseInt](#number.parseint_vs._parseint)\n\nThis method has the same functionality as the global [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) function:\n\n```\nNumber.parseInt === parseInt; // true\n```\n\nIts purpose is modularization of globals. Please see [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) for more detail and examples.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.parseint](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.parseint) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.parseInt() - JavaScript | MDN",
    "description": "The Number.parseInt() static method parses a string argument and\n  returns an integer of the specified radix or base.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER",
    "markdown": "# Number.MIN\\_SAFE\\_INTEGER - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.MIN_SAFE_INTEGER`** static data property represents the minimum safe integer in JavaScript, or -(253 - 1).\n\nTo represent integers smaller than this, consider using [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n`-9007199254740991` (-9,007,199,254,740,991, or about -9 quadrillion).\n\n| Property attributes of `Number.MIN_SAFE_INTEGER` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n[Double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), so it can only safely represent integers between -(253 – 1) and 253 – 1. Safe in this context refers to the ability to represent integers exactly and to correctly compare them. For example, `Number.MIN_SAFE_INTEGER - 1 === Number.MIN_SAFE_INTEGER - 2` will evaluate to true, which is mathematically incorrect. See [`Number.isSafeInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger) for more information.\n\nBecause `MIN_SAFE_INTEGER` is a static property of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), you always use it as `Number.MIN_SAFE_INTEGER`, rather than as a property of a number value.\n\n## [Examples](#examples)\n\n### [Using MIN\\_SAFE\\_INTEGER](#using_min_safe_integer)\n\n```\nNumber.MIN_SAFE_INTEGER; // -9007199254740991\n-(2 ** 53 - 1); // -9007199254740991\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.min\\_safe\\_integer](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.min_safe_integer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.MIN_SAFE_INTEGER - JavaScript | MDN",
    "description": "The Number.MIN_SAFE_INTEGER static data property represents the minimum safe integer in JavaScript, or -(253 - 1).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite",
    "markdown": "# Number.isFinite() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.isFinite()`** static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), negative `Infinity`, nor [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be tested for finiteness.\n\n### [Return value](#return_value)\n\nThe boolean value `true` if the given value is a finite number. Otherwise `false`.\n\n## [Examples](#examples)\n\n### [Using isFinite()](#using_isfinite)\n\n```\nNumber.isFinite(Infinity); // false\nNumber.isFinite(NaN); // false\nNumber.isFinite(-Infinity); // false\n\nNumber.isFinite(0); // true\nNumber.isFinite(2e64); // true\n```\n\n### [Difference between Number.isFinite() and global isFinite()](#difference_between_number.isfinite_and_global_isfinite)\n\nIn comparison to the global [`isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite) function, this method doesn't first convert the parameter to a number. This means only values of the type number _and_ are finite return `true`, and non-numbers always return `false`.\n\n```\nisFinite(\"0\"); // true; coerced to number 0\nNumber.isFinite(\"0\"); // false\nisFinite(null); // true; coerced to number 0\nNumber.isFinite(null); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.isfinite](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.isfinite) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.isFinite() - JavaScript | MDN",
    "description": "The Number.isFinite() static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive Infinity, negative Infinity, nor NaN.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger",
    "markdown": "# Number.isSafeInteger() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.isSafeInteger()`** static method determines whether the provided value is a number that is a _safe integer_.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nNumber.isSafeInteger(testValue)\n```\n\n### [Parameters](#parameters)\n\n[`testValue`](#testvalue)\n\nThe value to be tested for being a safe integer.\n\n### [Return value](#return_value)\n\nThe boolean value `true` if the given value is a number that is a safe integer. Otherwise `false`.\n\n## [Description](#description)\n\nThe safe integers consist of all integers from -(253 - 1) to 253 - 1, inclusive (±9,007,199,254,740,991). A safe integer is an integer that:\n\n*   can be exactly represented as an IEEE-754 double precision number, and\n*   whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.\n\nFor example, 253 - 1 is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, 253 is _not_ a safe integer: it can be exactly represented in IEEE-754, but the integer 253 + 1 can't be directly represented in IEEE-754 but instead rounds to 253 under round-to-nearest and round-to-zero rounding.\n\nHandling values larger or smaller than ~9 quadrillion with full precision requires using an [arbitrary precision arithmetic library](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic). See [What Every Programmer Needs to Know about Floating Point Arithmetic](https://floating-point-gui.de/) for more information on floating point representations of numbers.\n\nFor larger integers, consider using the [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type.\n\n## [Examples](#examples)\n\n### [Using isSafeInteger()](#using_issafeinteger)\n\n```\nNumber.isSafeInteger(3); // true\nNumber.isSafeInteger(2 ** 53); // false\nNumber.isSafeInteger(2 ** 53 - 1); // true\nNumber.isSafeInteger(NaN); // false\nNumber.isSafeInteger(Infinity); // false\nNumber.isSafeInteger(\"3\"); // false\nNumber.isSafeInteger(3.1); // false\nNumber.isSafeInteger(3.0); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.issafeinteger](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.issafeinteger) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.isSafeInteger() - JavaScript | MDN",
    "description": "The Number.isSafeInteger() static method determines whether the provided value is a number that is a safe integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger",
    "markdown": "# Number.isInteger() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.isInteger()`** static method determines whether the passed value is an integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be tested for being an integer.\n\n### [Return value](#return_value)\n\nThe boolean value `true` if the given value is an integer. Otherwise `false`.\n\n## [Description](#description)\n\nIf the target value is an integer, return `true`, otherwise return `false`. If the value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) or [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), return `false`. The method will also return `true` for floating point numbers that can be represented as integer. It will always return `false` if the value is not a number.\n\nNote that some number literals, while looking like non-integers, actually represent integers — due to the precision limit of ECMAScript floating-point number encoding (IEEE-754). For example, `5.0000000000000001` only differs from `5` by `1e-16`, which is too small to be represented. (For reference, [`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON) stores the distance between 1 and the next representable floating-point number greater than 1, and that is about `2.22e-16`.) Therefore, `5.0000000000000001` will be represented with the same encoding as `5`, thus making `Number.isInteger(5.0000000000000001)` return `true`.\n\nIn a similar sense, numbers around the magnitude of [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) will suffer from loss of precision and make `Number.isInteger` return `true` even when it's not an integer. (The actual threshold varies based on how many bits are needed to represent the decimal — for example, `Number.isInteger(4500000000000000.1)` is `true`, but `Number.isInteger(4500000000000000.5)` is `false`.)\n\n## [Examples](#examples)\n\n### [Using isInteger](#using_isinteger)\n\n```\nNumber.isInteger(0); // true\nNumber.isInteger(1); // true\nNumber.isInteger(-100000); // true\nNumber.isInteger(99999999999999999999999); // true\n\nNumber.isInteger(0.1); // false\nNumber.isInteger(Math.PI); // false\n\nNumber.isInteger(NaN); // false\nNumber.isInteger(Infinity); // false\nNumber.isInteger(-Infinity); // false\nNumber.isInteger(\"10\"); // false\nNumber.isInteger(true); // false\nNumber.isInteger(false); // false\nNumber.isInteger([1]); // false\n\nNumber.isInteger(5.0); // true\nNumber.isInteger(5.000000000000001); // false\nNumber.isInteger(5.0000000000000001); // true, because of loss of precision\nNumber.isInteger(4500000000000000.1); // true, because of loss of precision\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.isinteger](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.isinteger) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.isInteger() - JavaScript | MDN",
    "description": "The Number.isInteger() static method determines whether the passed value is an integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential",
    "markdown": "# Number.prototype.toExponential() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toExponential()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string representing this number in exponential notation.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoExponential()\ntoExponential(fractionDigits)\n```\n\n### [Parameters](#parameters)\n\n[`fractionDigits`](#fractiondigits) Optional\n\nOptional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.\n\n### [Return value](#return_value)\n\nA string representing the given [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object in exponential notation with one digit before the decimal point, rounded to `fractionDigits` digits after the decimal point.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `fractionDigits` is not between `0` and `100` (inclusive).\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this method is invoked on an object that is not a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\n\n## [Description](#description)\n\nIf the `fractionDigits` argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.\n\nIf you use the `toExponential()` method for a numeric literal and the numeric literal has no exponent and no decimal point, leave whitespace(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.\n\nIf a number has more digits than requested by the `fractionDigits` parameter, the number is rounded to the nearest number represented by `fractionDigits` digits. See the discussion of rounding in the description of the [`toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) method, which also applies to `toExponential()`.\n\n## [Examples](#examples)\n\n### [Using toExponential](#using_toexponential)\n\n```\nconst numObj = 77.1234;\n\nconsole.log(numObj.toExponential()); // 7.71234e+1\nconsole.log(numObj.toExponential(4)); // 7.7123e+1\nconsole.log(numObj.toExponential(2)); // 7.71e+1\nconsole.log((77.1234).toExponential()); // 7.71234e+1\nconsole.log((77).toExponential()); // 7.7e+1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.toexponential](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.toexponential) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.prototype.toExponential() - JavaScript | MDN",
    "description": "The toExponential() method of Number values returns a string representing\n  this number in exponential notation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN",
    "markdown": "# Number.isNaN() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number.isNaN()`** static method determines whether the passed value is the number value [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), and returns `false` if the input is not of the Number type. It is a more robust version of the original, global [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be tested for [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n### [Return value](#return_value)\n\nThe boolean value `true` if the given value is a number with value [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). Otherwise, `false`.\n\n## [Description](#description)\n\nThe function `Number.isNaN()` provides a convenient way to check for equality with `NaN`. Note that you cannot test for equality with `NaN` using either the [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) or [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operators, because unlike all other value comparisons in JavaScript, these evaluate to `false` whenever one operand is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), even if the other operand is also [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\nSince `x !== x` is only true for `NaN` among all possible JavaScript values, `Number.isNaN(x)` can also be replaced with a test for `x !== x`, despite the latter being less readable.\n\nAs opposed to the global [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) function, the `Number.isNaN()` method doesn't force-convert the parameter to a number. This makes it safe to pass values that would normally convert to [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) but aren't actually the same value as [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). This also means that only values of the Number type that are also [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) return `true`.\n\n## [Examples](#examples)\n\n### [Using isNaN()](#using_isnan)\n\n```\nNumber.isNaN(NaN); // true\nNumber.isNaN(Number.NaN); // true\nNumber.isNaN(0 / 0); // true\nNumber.isNaN(37); // false\n```\n\n### [Difference between Number.isNaN() and global isNaN()](#difference_between_number.isnan_and_global_isnan)\n\n`Number.isNaN()` doesn't attempt to convert the parameter to a number, so non-numbers always return `false`. The following are all `false`:\n\n```\nNumber.isNaN(\"NaN\");\nNumber.isNaN(undefined);\nNumber.isNaN({});\nNumber.isNaN(\"blabla\");\nNumber.isNaN(true);\nNumber.isNaN(null);\nNumber.isNaN(\"37\");\nNumber.isNaN(\"37.37\");\nNumber.isNaN(\"\");\nNumber.isNaN(\" \");\n```\n\nThe global [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) coerces its parameter to a number:\n\n```\nisNaN(\"NaN\"); // true\nisNaN(undefined); // true\nisNaN({}); // true\nisNaN(\"blabla\"); // true\nisNaN(true); // false, this is coerced to 1\nisNaN(null); // false, this is coerced to 0\nisNaN(\"37\"); // false, this is coerced to 37\nisNaN(\"37.37\"); // false, this is coerced to 37.37\nisNaN(\"\"); // false, this is coerced to 0\nisNaN(\" \"); // false, this is coerced to 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.isnan](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.isnan) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.isNaN() - JavaScript | MDN",
    "description": "The Number.isNaN() static method determines whether the passed value is the number value NaN, and returns false if the input is not of the Number type. It is a more robust version of the original, global isNaN() function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt",
    "markdown": "# BigInt() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`BigInt()`** function returns primitive values of type BigInt.\n\n## [Syntax](#syntax)\n\n**Note:** `BigInt()` can only be called without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to construct it with `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be converted to a BigInt value. It may be a string, an integer, a boolean, or another `BigInt`.\n\n### [Return value](#return_value)\n\nA [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) value. Number values must be integers and are converted to BigInts. The boolean value `true` becomes `1n`, and `false` becomes `0n`. Strings are parsed as if they are source text for integer literals, which means they can have leading and trailing whitespaces and can be prefixed with `0b`, `0o`, or `0x`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the parameter is a non-integral number.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   The parameter cannot be converted to a primitive.\n*   After conversion to a primitive, the result is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), [`symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol).\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nThrown if the parameter is a string that cannot be parsed as a `BigInt`.\n\n## [Examples](#examples)\n\n### [Using BigInt() to convert a number to a BigInt](#using_bigint_to_convert_a_number_to_a_bigint)\n\n`BigInt()` is the only case where a number can be converted to a BigInt without throwing, because it's very explicit. However, only integers are allowed.\n\n```\nBigInt(123); // 123n\nBigInt(123.3); // RangeError: The number 123.3 cannot be converted to a BigInt because it is not an integer\n```\n\n### [Using string values](#using_string_values)\n\n```\nBigInt(\"123\"); // 123n\nBigInt(\"0b10101\"); // 21n, which is 10101 in binary\nBigInt(\"0o123\"); // 83n, which is 123 in octal\nBigInt(\"0x123\"); // 291n, which is 123 in hexadecimal\nBigInt(\"  123  \"); // 123n, leading and trailing whitespaces are allowed\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint-constructor](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt() constructor - JavaScript | MDN",
    "description": "The BigInt() function returns primitive values of type BigInt.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh",
    "markdown": "# Math.cosh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.cosh()`** static method returns the hyperbolic cosine of a number. That is,\n\n𝙼𝚊𝚝𝚑.𝚌𝚘𝚜𝚑 ( 𝚡 ) \\= cosh ( x ) \\= e x + e − x 2 \\\\mathtt{\\\\operatorname{Math.cosh}(x)} = \\\\cosh(x) = \\\\frac{\\\\mathrm{e}^x + \\\\mathrm{e}^{-x}}{2}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe hyperbolic cosine of `x`.\n\n## [Description](#description)\n\nBecause `cosh()` is a static method of `Math`, you always use it as `Math.cosh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.cosh()](#using_math.cosh)\n\n```\nMath.cosh(-Infinity); // Infinity\nMath.cosh(-1); // 1.5430806348152437\nMath.cosh(-0); // 1\nMath.cosh(0); // 1\nMath.cosh(1); // 1.5430806348152437\nMath.cosh(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.cosh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.cosh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.cosh() - JavaScript | MDN",
    "description": "The Math.cosh() static method returns the hyperbolic cosine of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision",
    "markdown": "# Number.prototype.toPrecision() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toPrecision()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string representing this number to the specified number of significant digits.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoPrecision()\ntoPrecision(precision)\n```\n\n### [Parameters](#parameters)\n\n[`precision`](#precision) Optional\n\nAn integer specifying the number of significant digits.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this method is invoked on an object that is not a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\n\n### [Return value](#return_value)\n\nA string representing the given number, using the given number of significant digits. Scientific notation is used if the exponent is greater than or equal to `precision` or less than -6. Has the same behavior as [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) if the `precision` argument is omitted.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `precision` is not between `1` and `100` (inclusive).\n\n## [Examples](#examples)\n\n### [Using `toPrecision`](#using_toprecision)\n\n```\n// This number has exponent 0, so it will never use exponential notation\nlet num = 5.123456;\n\nconsole.log(num.toPrecision()); // '5.123456'\nconsole.log(num.toPrecision(5)); // '5.1235'\nconsole.log(num.toPrecision(2)); // '5.1'\nconsole.log(num.toPrecision(1)); // '5'\n\n// This number has exponent -4, so it will never use exponential notation\nnum = 0.000123;\n\nconsole.log(num.toPrecision()); // '0.000123'\nconsole.log(num.toPrecision(5)); // '0.00012300'\nconsole.log(num.toPrecision(2)); // '0.00012'\nconsole.log(num.toPrecision(1)); // '0.0001'\n\n// This number has exponent 3, so it will use exponential notation if precision is less than 4\nnum = 1234.5;\nconsole.log(num.toPrecision(1)); // '1e+3'\nconsole.log(num.toPrecision(2)); // '1.2e+3'\nconsole.log(num.toPrecision(6)); // '1234.50'\n\n// This number has exponent -7, so it will always use exponential notation\nnum = 0.00000012345;\nconsole.log(num.toPrecision(1)); // '1e-7'\nconsole.log(num.toPrecision(10)); // '1.234500000e-7'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.toprecision](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.toprecision) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.prototype.toPrecision() - JavaScript | MDN",
    "description": "The toPrecision() method of Number values returns a string representing this number to the specified number of significant digits.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed",
    "markdown": "# Number.prototype.toFixed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toFixed()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string representing this number using [fixed-point notation](https://en.wikipedia.org/wiki/Fixed-point_arithmetic) with the specified number of decimal places.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoFixed()\ntoFixed(digits)\n```\n\n### [Parameters](#parameters)\n\n[`digits`](#digits) Optional\n\nThe number of digits to appear after the decimal point; should be a value between `0` and `100`, inclusive. If this argument is omitted, it is treated as `0`.\n\n### [Return value](#return_value)\n\nA string representing the given number using fixed-point notation. Scientific notation is used if the number's magnitude (ignoring sign) is greater than or equal to 1021 (same return value as [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `digits` is not between `0` and `100` (inclusive).\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this method is invoked on an object that is not a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\n\n## [Description](#description)\n\nThe `toFixed()` method returns a string representation of a number without using [exponential notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) and with exactly `digits` digits after the decimal point. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length.\n\nIf the absolute value of the number is greater or equal to 1021, this method uses the same algorithm as [`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) and returns a string in exponential notation. `toFixed()` returns `\"Infinity\"`, `\"NaN\"`, or `\"-Infinity\"` if the value of the number is non-finite.\n\nThe output of `toFixed()` may be more precise than [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) for some values, because `toString()` only prints enough significant digits to distinguish the number from adjacent number values. For example:\n\n```\n(1000000000000000128).toString(); // '1000000000000000100'\n(1000000000000000128).toFixed(0); // '1000000000000000128'\n```\n\nHowever, choosing a `digits` precision that's too high can return unexpected results, because decimal fractional numbers cannot be represented precisely in floating point. For example:\n\n```\n(0.3).toFixed(50); // '0.29999999999999998889776975374843459576368331909180'\n```\n\n## [Examples](#examples)\n\n### [Using toFixed()](#using_tofixed)\n\n```\nconst numObj = 12345.6789;\n\nnumObj.toFixed(); // '12346'; rounding, no fractional part\nnumObj.toFixed(1); // '12345.7'; it rounds up\nnumObj.toFixed(6); // '12345.678900'; additional zeros\n(1.23e20).toFixed(2); // '123000000000000000000.00'\n(1.23e-10).toFixed(2); // '0.00'\n(2.34).toFixed(1); // '2.3'\n(2.35).toFixed(1); // '2.4'; it rounds up\n(2.55).toFixed(1); // '2.5'\n// it rounds down as it can't be represented exactly by a float and the\n// closest representable float is lower\n(2.449999999999999999).toFixed(1); // '2.5'\n// it rounds up as it's less than Number.EPSILON away from 2.45.\n// This literal actually encodes the same number value as 2.45\n\n(6.02 * 10 ** 23).toFixed(50); // 6.019999999999999e+23; large numbers still use exponential notation\n```\n\n### [Using toFixed() with negative numbers](#using_tofixed_with_negative_numbers)\n\nBecause member access has higher [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) than unary minus, you need to group the negative number expression to get a string.\n\n```\n-2.34.toFixed(1); // -2.3, a number\n(-2.34).toFixed(1); // '-2.3'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.tofixed](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.tofixed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number.prototype.toFixed() - JavaScript | MDN",
    "description": "The toFixed() method of Number values returns a string representing this number using fixed-point notation with the specified number of decimal places.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin",
    "markdown": "# Math.sin() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.sin()`** static method returns the sine of a number in radians.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number representing an angle in radians.\n\n### [Return value](#return_value)\n\nThe sine of `x`, between -1 and 1, inclusive. If `x` is [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), `-Infinity`, or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `sin()` is a static method of `Math`, you always use it as `Math.sin()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.sin()](#using_math.sin)\n\n```\nMath.sin(-Infinity); // NaN\nMath.sin(-0); // -0\nMath.sin(0); // 0\nMath.sin(1); // 0.8414709848078965\nMath.sin(Math.PI / 2); // 1\nMath.sin(Infinity); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sin](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sin) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.sin() - JavaScript | MDN",
    "description": "The Math.sin() static method returns the sine of a number in radians.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh",
    "markdown": "# Math.tanh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.tanh()`** static method returns the hyperbolic tangent of a number. That is,\n\n𝙼𝚊𝚝𝚑.𝚝𝚊𝚗𝚑 ( 𝚡 ) \\= tanh ( x ) \\= sinh ( x ) cosh ( x ) \\= e x − e − x e x + e − x \\= e 2 x − 1 e 2 x + 1 \\\\mathtt{\\\\operatorname{Math.tanh}(x)} = \\\\tanh(x) = \\\\frac{\\\\sinh(x)}{\\\\cosh(x)} = \\\\frac{\\\\mathrm{e}^x - \\\\mathrm{e}^{-x}}{\\\\mathrm{e}^x + \\\\mathrm{e}^{-x}} = \\\\frac{\\\\mathrm{e}^{2x} - 1}{\\\\mathrm{e}^{2x}+1}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe hyperbolic tangent of `x`.\n\n## [Description](#description)\n\nBecause `tanh()` is a static method of `Math`, you always use it as `Math.tanh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.tanh()](#using_math.tanh)\n\n```\nMath.tanh(-Infinity); // -1\nMath.tanh(-0); // -0\nMath.tanh(0); // 0\nMath.tanh(1); // 0.7615941559557649\nMath.tanh(Infinity); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.tanh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.tanh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.tanh() - JavaScript | MDN",
    "description": "The Math.tanh() static method returns the hyperbolic tangent of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs",
    "markdown": "# Math.abs() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.abs()`** static method returns the absolute value of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe absolute value of `x`. If `x` is negative (including `-0`), returns `-x`. Otherwise, returns `x`. The result is therefore always a positive number or `0`.\n\n## [Description](#description)\n\nBecause `abs()` is a static method of `Math`, you always use it as `Math.abs()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.abs()](#using_math.abs)\n\n```\nMath.abs(-Infinity); // Infinity\nMath.abs(-1); // 1\nMath.abs(-0); // 0\nMath.abs(0); // 0\nMath.abs(1); // 1\nMath.abs(Infinity); // Infinity\n```\n\n### [Coercion of parameter](#coercion_of_parameter)\n\n`Math.abs()` [coerces its parameter to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Non-coercible values will become `NaN`, making `Math.abs()` also return `NaN`.\n\n```\nMath.abs(\"-1\"); // 1\nMath.abs(-2); // 2\nMath.abs(null); // 0\nMath.abs(\"\"); // 0\nMath.abs([]); // 0\nMath.abs([2]); // 2\nMath.abs([1, 2]); // NaN\nMath.abs({}); // NaN\nMath.abs(\"string\"); // NaN\nMath.abs(); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.abs](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.abs) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.abs() - JavaScript | MDN",
    "description": "The Math.abs() static method returns the absolute value of a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh",
    "markdown": "# Math.asinh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.asinh()`** static method returns the inverse hyperbolic sine of a number. That is,\n\n𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗𝚑 ( 𝚡 ) \\= arsinh ( x ) \\= the unique  y  such that  sinh ( y ) \\= x \\= ln ( x + x 2 + 1 ) \\\\begin{aligned}\\\\mathtt{\\\\operatorname{Math.asinh}(x)} &= \\\\operatorname{arsinh}(x) = \\\\text{the unique } y \\\\text{ such that } \\\\sinh(y) = x \\\\&= \\\\ln\\\\left(x + \\\\sqrt{x^2 + 1}\\\\right)\\\\end{aligned}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe inverse hyperbolic sine of `x`.\n\n## [Description](#description)\n\nBecause `asinh()` is a static method of `Math`, you always use it as `Math.asinh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.asinh()](#using_math.asinh)\n\n```\nMath.asinh(-Infinity); // -Infinity\nMath.asinh(-1); // -0.881373587019543\nMath.asinh(-0); // -0\nMath.asinh(0); // 0\nMath.asinh(1); // 0.881373587019543\nMath.asinh(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.asinh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.asinh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.asinh() - JavaScript | MDN",
    "description": "The Math.asinh() static method returns the inverse hyperbolic sine of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh",
    "markdown": "# Math.acosh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.acosh()`** static method returns the inverse hyperbolic cosine of a number. That is,\n\n∀ x ≥ 1 , 𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜𝚑 ( 𝚡 ) \\= arcosh ( x ) \\= the unique  y ≥ 0  such that  cosh ( y ) \\= x \\= ln ( x + x 2 − 1 ) \\\\begin{aligned}\\\\forall x \\\\geq 1,;\\\\mathtt{\\\\operatorname{Math.acosh}(x)} &= \\\\operatorname{arcosh}(x) = \\\\text{the unique } y \\\\geq 0 \\\\text{ such that } \\\\cosh(y) = x\\\\&= \\\\ln\\\\left(x + \\\\sqrt{x^2 - 1}\\\\right)\\\\end{aligned}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to 1.\n\n### [Return value](#return_value)\n\nThe inverse hyperbolic cosine of `x`. If `x` is less than 1, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `acosh()` is a static method of `Math`, you always use it as `Math.acosh()`, rather than as a method of a `Math` object you created (`Math` is no constructor).\n\n## [Examples](#examples)\n\n### [Using Math.acosh()](#using_math.acosh)\n\n```\nMath.acosh(0); // NaN\nMath.acosh(1); // 0\nMath.acosh(2); // 1.3169578969248166\nMath.acosh(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.acosh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.acosh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.acosh() - JavaScript | MDN",
    "description": "The Math.acosh() static method returns the inverse hyperbolic cosine of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh",
    "markdown": "# Math.atanh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.atanh()`** static method returns the inverse hyperbolic tangent of a number. That is,\n\n∀ x ∊ ( − 1 , 1 ) , 𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗𝚑 ( 𝚡 ) \\= artanh ( x ) \\= the unique  y  such that  tanh ( y ) \\= x \\= 1 2 ln ( 1 + x 1 − x ) \\\\begin{aligned}\\\\forall x \\\\in ({-1}, 1),;\\\\mathtt{\\\\operatorname{Math.atanh}(x)} &= \\\\operatorname{artanh}(x) = \\\\text{the unique } y \\\\text{ such that } \\\\tanh(y) = x \\\\&= \\\\frac{1}{2},\\\\ln\\\\left(\\\\frac{1+x}{1-x}\\\\right)\\\\end{aligned}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number between -1 and 1, inclusive.\n\n### [Return value](#return_value)\n\nThe inverse hyperbolic tangent of `x`. If `x` is 1, returns [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity). If `x` is -1, returns `-Infinity`. If `x` is less than -1 or greater than 1, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `atanh()` is a static method of `Math`, you always use it as `Math.atanh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.atanh()](#using_math.atanh)\n\n```\nMath.atanh(-2); // NaN\nMath.atanh(-1); // -Infinity\nMath.atanh(-0); // -0\nMath.atanh(0); // 0\nMath.atanh(0.5); // 0.5493061443340548\nMath.atanh(1); // Infinity\nMath.atanh(2); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.atanh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.atanh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.atanh() - JavaScript | MDN",
    "description": "The Math.atanh() static method returns the inverse hyperbolic tangent of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin",
    "markdown": "# Math.asin() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.asin()`** static method returns the inverse sine (in radians) of a number. That is,\n\n∀ x ∊ \\[ − 1 , 1 \\] , 𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗 ( 𝚡 ) \\= arcsin ( x ) \\= the unique  y ∊ \\[ − π 2 , π 2 \\]  such that  sin ( y ) \\= x \\\\forall x \\\\in \\[{-1}, 1\\],;\\\\mathtt{\\\\operatorname{Math.asin}(x)} = \\\\arcsin(x) = \\\\text{the unique } y \\\\in \\\\left\\[-\\\\frac{\\\\pi}{2}, \\\\frac{\\\\pi}{2}\\\\right\\] \\\\text{ such that } \\\\sin(y) = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number between -1 and 1, inclusive, representing the angle's sine value.\n\n### [Return value](#return_value)\n\nThe inverse sine (angle in radians between \\- π 2 \\-\\\\frac{\\\\pi}{2} and π 2 \\\\frac{\\\\pi}{2} , inclusive) of `x`. If `x` is less than -1 or greater than 1, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `asin()` is a static method of `Math`, you always use it as `Math.asin()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.asin()](#using_math.asin)\n\n```\nMath.asin(-2); // NaN\nMath.asin(-1); // -1.5707963267948966 (-π/2)\nMath.asin(-0); // -0\nMath.asin(0); // 0\nMath.asin(0.5); // 0.5235987755982989 (π/6)\nMath.asin(1); // 1.5707963267948966 (π/2)\nMath.asin(2); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.asin](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.asin) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.asin() - JavaScript | MDN",
    "description": "The Math.asin() static method returns the inverse sine (in radians) of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos",
    "markdown": "# Math.cos() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.cos()`** static method returns the cosine of a number in radians.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number representing an angle in radians.\n\n### [Return value](#return_value)\n\nThe cosine of `x`, between -1 and 1, inclusive. If `x` is [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), `-Infinity`, or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `cos()` is a static method of `Math`, you always use it as `Math.cos()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.cos()](#using_math.cos)\n\n```\nMath.cos(-Infinity); // NaN\nMath.cos(-0); // 1\nMath.cos(0); // 1\nMath.cos(1); // 0.5403023058681398\nMath.cos(Math.PI); // -1\nMath.cos(2 * Math.PI); // 1\nMath.cos(Infinity); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.cos](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.cos) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.cos() - JavaScript | MDN",
    "description": "The Math.cos() static method returns the cosine of a number in radians.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow",
    "markdown": "# Math.pow() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.pow()`** static method returns the value of a base raised to a power. That is\n\n𝙼𝚊𝚝𝚑.𝚙𝚘𝚠 ( 𝚡 , 𝚢 ) \\= x y \\\\mathtt{\\\\operatorname{Math.pow}(x, y)} = x^y\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`base`](#base)\n\nThe base number.\n\n[`exponent`](#exponent)\n\nThe exponent number.\n\n### [Return value](#return_value)\n\nA number representing `base` taken to the power of `exponent`. Returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) in one of the following cases:\n\n*   `exponent` is `NaN`.\n*   `base` is `NaN` and `exponent` is not `0`.\n*   `base` is ±1 and `exponent` is ±`Infinity`.\n*   `base < 0` and `exponent` is not an integer.\n\n## [Description](#description)\n\n`Math.pow()` is equivalent to the [`**`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) operator, except `Math.pow()` only accepts numbers.\n\n`Math.pow(NaN, 0)` (and the equivalent `NaN ** 0`) is the only case where [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) doesn't propagate through mathematical operations — it returns `1` despite the operand being `NaN`. In addition, the behavior where `base` is 1 and `exponent` is non-finite (±Infinity or `NaN`) is different from IEEE 754, which specifies that the result should be 1, whereas JavaScript returns `NaN` to preserve backward compatibility with its original behavior.\n\nBecause `pow()` is a static method of `Math`, use it as `Math.pow()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.pow()](#using_math.pow)\n\n```\n// Simple cases\nMath.pow(7, 2); // 49\nMath.pow(7, 3); // 343\nMath.pow(2, 10); // 1024\n\n// Fractional exponents\nMath.pow(4, 0.5); // 2 (square root of 4)\nMath.pow(8, 1 / 3); // 2 (cube root of 8)\nMath.pow(2, 0.5); // 1.4142135623730951 (square root of 2)\nMath.pow(2, 1 / 3); // 1.2599210498948732 (cube root of 2)\n\n// Signed exponents\nMath.pow(7, -2); // 0.02040816326530612 (1/49)\nMath.pow(8, -1 / 3); // 0.5\n\n// Signed bases\nMath.pow(-7, 2); // 49 (squares are positive)\nMath.pow(-7, 3); // -343 (cubes can be negative)\nMath.pow(-7, 0.5); // NaN (negative numbers don't have a real square root)\n// Due to \"even\" and \"odd\" roots laying close to each other,\n// and limits in the floating number precision,\n// negative bases with fractional exponents always return NaN,\n// even when the mathematical result is real\nMath.pow(-7, 1 / 3); // NaN\n\n// Zero and infinity\nMath.pow(0, 0); // 1 (anything ** ±0 is 1)\nMath.pow(Infinity, 0.1); // Infinity (positive exponent)\nMath.pow(Infinity, -1); // 0 (negative exponent)\nMath.pow(-Infinity, 1); // -Infinity (positive odd integer exponent)\nMath.pow(-Infinity, 1.5); // Infinity (positive exponent)\nMath.pow(-Infinity, -1); // -0 (negative odd integer exponent)\nMath.pow(-Infinity, -1.5); // 0 (negative exponent)\nMath.pow(0, 1); // 0 (positive exponent)\nMath.pow(0, -1); // Infinity (negative exponent)\nMath.pow(-0, 1); // -0 (positive odd integer exponent)\nMath.pow(-0, 1.5); // 0 (positive exponent)\nMath.pow(-0, -1); // -Infinity (negative odd integer exponent)\nMath.pow(-0, -1.5); // Infinity (negative exponent)\nMath.pow(0.9, Infinity); // 0\nMath.pow(1, Infinity); // NaN\nMath.pow(1.1, Infinity); // Infinity\nMath.pow(0.9, -Infinity); // Infinity\nMath.pow(1, -Infinity); // NaN\nMath.pow(1.1, -Infinity); // 0\n\n// NaN: only Math.pow(NaN, 0) does not result in NaN\nMath.pow(NaN, 0); // 1\nMath.pow(NaN, 1); // NaN\nMath.pow(1, NaN); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.pow](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.pow) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.pow() - JavaScript | MDN",
    "description": "The Math.pow() static method returns the value of a base raised to a power. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos",
    "markdown": "# Math.acos() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.acos()`** static method returns the inverse cosine (in radians) of a number. That is,\n\n∀ x ∊ \\[ − 1 , 1 \\] , 𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜 ( 𝚡 ) \\= arccos ( x ) \\= the unique  y ∊ \\[ 0 , π \\]  such that  cos ( y ) \\= x \\\\forall x \\\\in \\[{-1}, 1\\],;\\\\mathtt{\\\\operatorname{Math.acos}(x)} = \\\\arccos(x) = \\\\text{the unique } y \\\\in \\[0, \\\\pi\\] \\\\text{ such that } \\\\cos(y) = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number between -1 and 1, inclusive, representing the angle's cosine value.\n\n### [Return value](#return_value)\n\nThe inverse cosine (angle in radians between 0 and π, inclusive) of `x`. If `x` is less than -1 or greater than 1, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `acos()` is a static method of `Math`, you always use it as `Math.acos()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.acos()](#using_math.acos)\n\n```\nMath.acos(-2); // NaN\nMath.acos(-1); // 3.141592653589793 (π)\nMath.acos(0); // 1.5707963267948966 (π/2)\nMath.acos(0.5); // 1.0471975511965979 (π/3)\nMath.acos(1); // 0\nMath.acos(2); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.acos](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.acos) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.acos() - JavaScript | MDN",
    "description": "The Math.acos() static method returns the inverse cosine (in radians) of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan",
    "markdown": "# Math.tan() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.tan()`** static method returns the tangent of a number in radians.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number representing an angle in radians.\n\n### [Return value](#return_value)\n\nThe tangent of `x`. If `x` is [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), `-Infinity`, or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n**Note:** Due to floating point precision, it's not possible to obtain the exact value π/2, so the result is always finite if not `NaN`.\n\n## [Description](#description)\n\nBecause `tan()` is a static method of `Math`, you always use it as `Math.tan()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.tan()](#using_math.tan)\n\n```\nMath.tan(-Infinity); // NaN\nMath.tan(-0); // -0\nMath.tan(0); // 0\nMath.tan(1); // 1.5574077246549023\nMath.tan(Math.PI / 4); // 0.9999999999999999 (Floating point error)\nMath.tan(Infinity); // NaN\n```\n\n### [Math.tan() and π/2](#math.tan_and_π2)\n\nIt's not possible to calculate `tan(π/2)` exactly.\n\n```\nMath.tan(Math.PI / 2); // 16331239353195370\nMath.tan(Math.PI / 2 + Number.EPSILON); // -6218431163823738\n```\n\n### [Using Math.tan() with a degree value](#using_math.tan_with_a_degree_value)\n\nBecause the `Math.tan()` function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.\n\n```\nfunction getTanDeg(deg) {\n  const rad = (deg * Math.PI) / 180;\n  return Math.tan(rad);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.tan](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.tan) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.tan() - JavaScript | MDN",
    "description": "The Math.tan() static method returns the tangent of a number in radians.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp",
    "markdown": "# Math.exp() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.exp()`** static method returns [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E) raised to the power of a number. That is\n\n𝙼𝚊𝚝𝚑.𝚎𝚡𝚙 ( 𝚡 ) \\= e x \\\\mathtt{\\\\operatorname{Math.exp}(x)} = \\\\mathrm{e}^x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nA nonnegative number representing ex, where e is [the base of the natural logarithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E).\n\n## [Description](#description)\n\nBecause `exp()` is a static method of `Math`, you always use it as `Math.exp()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nBeware that `e` to the power of a number very close to 0 will be very close to 1 and suffer from loss of precision. In this case, you may want to use [`Math.expm1`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1) instead, and obtain a much higher-precision fractional part of the answer.\n\n## [Examples](#examples)\n\n### [Using Math.exp()](#using_math.exp)\n\n```\nMath.exp(-Infinity); // 0\nMath.exp(-1); // 0.36787944117144233\nMath.exp(0); // 1\nMath.exp(1); // 2.718281828459045\nMath.exp(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.exp](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.exp) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.exp() - JavaScript | MDN",
    "description": "The Math.exp() static method returns e raised to the power of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1",
    "markdown": "# Math.expm1() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.expm1()`** static method returns [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E) raised to the power of a number, subtracted by 1. That is\n\n𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷 ( 𝚡 ) \\= e x − 1 \\\\mathtt{\\\\operatorname{Math.expm1}(x)} = \\\\mathrm{e}^x - 1\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nA number representing ex - 1, where e is [the base of the natural logarithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E).\n\n## [Description](#description)\n\nFor very small values of _x_, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.\n\nWhen you calculate e x \\\\mathrm{e}^x , where x is a number very close to 0, you should get an answer very close to 1 + x because: lim x → 0 e x − 1 x \\= 1 \\\\lim\\_{x \\\\to 0} \\\\frac{\\\\mathrm{e}^x - 1}{x} = 1 . If you calculate `Math.exp(1.1111111111e-15) - 1`, you should get an answer close to `1.1111111111e-15`. Instead, due to the highest significant figure in the result of `Math.exp` being the units digit `1`, the final value ends up being `1.1102230246251565e-15`, with only 3 correct digits. If you calculate `Math.exp1m(1.1111111111e-15)` instead, you will get a much more accurate answer, `1.1111111111000007e-15`, with 11 correct digits of precision.\n\nBecause `expm1()` is a static method of `Math`, you always use it as `Math.expm1()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.expm1()](#using_math.expm1)\n\n```\nMath.expm1(-Infinity); // -1\nMath.expm1(-1); // -0.6321205588285577\nMath.expm1(-0); // -0\nMath.expm1(0); // 0\nMath.expm1(1); // 1.718281828459045\nMath.expm1(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.expm1](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.expm1) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.expm1() - JavaScript | MDN",
    "description": "The Math.expm1() static method returns e raised to the power of a number, subtracted by 1. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10",
    "markdown": "# Math.log10() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.log10()`** static method returns the base 10 logarithm of a number. That is\n\n∀ x \\> 0 , 𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝟶 ( 𝚡 ) \\= log 10 ( x ) \\= the unique  y  such that  10 y \\= x \\\\forall x > 0,;\\\\mathtt{\\\\operatorname{Math.log10}(x)} = \\\\log\\_{10}(x) = \\\\text{the unique } y \\\\text{ such that } 10^y = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to 0.\n\n### [Return value](#return_value)\n\nThe base 10 logarithm of `x`. If `x < 0`, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `log10()` is a static method of `Math`, you always use it as `Math.log10()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nThis function is the equivalent of `Math.log(x) / Math.log(10)`. For `log10(e)`, use the constant [`Math.LOG10E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E), which is 1 / [`Math.LN10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10).\n\n## [Examples](#examples)\n\n### [Using Math.log10()](#using_math.log10)\n\n```\nMath.log10(-2); // NaN\nMath.log10(-0); // -Infinity\nMath.log10(0); // -Infinity\nMath.log10(1); // 0\nMath.log10(2); // 0.3010299956639812\nMath.log10(100000); // 5\nMath.log10(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log10](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log10) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.log10() - JavaScript | MDN",
    "description": "The Math.log10() static method returns the base 10 logarithm of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log",
    "markdown": "# Math.log() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.log()`** static method returns the natural logarithm (base [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of a number. That is\n\n∀ x \\> 0 , 𝙼𝚊𝚝𝚑.𝚕𝚘𝚐 ( 𝚡 ) \\= ln ( x ) \\= the unique  y  such that  e y \\= x \\\\forall x > 0,;\\\\mathtt{\\\\operatorname{Math.log}(x)} = \\\\ln(x) = \\\\text{the unique } y \\\\text{ such that } e^y = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to 0.\n\n### [Return value](#return_value)\n\nThe natural logarithm (base [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `x`. If `x` is ±0, returns [`-Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY). If `x < 0`, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `log()` is a static method of `Math`, you always use it as `Math.log()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nIf you need the natural log of 2 or 10, use the constants [`Math.LN2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2) or [`Math.LN10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10). If you need a logarithm to base 2 or 10, use [`Math.log2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2) or [`Math.log10()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10). If you need a logarithm to other bases, use `Math.log(x) / Math.log(otherBase)` as in the example below; you might want to precalculate `1 / Math.log(otherBase)` since multiplication in `Math.log(x) * constant` is much faster.\n\nBeware that positive numbers very close to 1 can suffer from loss of precision and make its natural logarithm less accurate. In this case, you may want to use [`Math.log1p`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p) instead.\n\n## [Examples](#examples)\n\n### [Using Math.log()](#using_math.log)\n\n```\nMath.log(-1); // NaN\nMath.log(-0); // -Infinity\nMath.log(0); // -Infinity\nMath.log(1); // 0\nMath.log(10); // 2.302585092994046\nMath.log(Infinity); // Infinity\n```\n\n### [Using Math.log() with a different base](#using_math.log_with_a_different_base)\n\nThe following function returns the logarithm of `y` with base `x` (i.e. log x y \\\\log\\_x y ):\n\n```\nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}\n```\n\nIf you run `getBaseLog(10, 1000)`, it returns `2.9999999999999996` due to floating-point rounding, but still very close to the actual answer of 3.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.log() - JavaScript | MDN",
    "description": "The Math.log() static method returns the natural logarithm (base e) of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh",
    "markdown": "# Math.sinh() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.sinh()`** static method returns the hyperbolic sine of a number. That is,\n\n𝙼𝚊𝚝𝚑.𝚜𝚒𝚗𝚑 ( 𝚡 ) \\= sinh ( x ) \\= e x − e − x 2 \\\\mathtt{\\\\operatorname{Math.sinh}(x)} = \\\\sinh(x) = \\\\frac{\\\\mathrm{e}^x - \\\\mathrm{e}^{-x}}{2}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe hyperbolic sine of `x`.\n\n## [Description](#description)\n\nBecause `sinh()` is a static method of `Math`, you always use it as `Math.sinh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.sinh()](#using_math.sinh)\n\n```\nMath.sinh(-Infinity); // -Infinity\nMath.sinh(-0); // -0\nMath.sinh(0); // 0\nMath.sinh(1); // 1.1752011936438014\nMath.sinh(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sinh](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sinh) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.sinh() - JavaScript | MDN",
    "description": "The Math.sinh() static method returns the hyperbolic sine of a number. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan",
    "markdown": "# Math.atan() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.atan()`** static method returns the inverse tangent (in radians) of a number, that is\n\n𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗 ( 𝚡 ) \\= arctan ( x ) \\= the unique  y ∊ \\[ − π 2 , π 2 \\]  such that  tan ( y ) \\= x \\\\mathtt{\\\\operatorname{Math.atan}(x)} = \\\\arctan(x) = \\\\text{the unique } y \\\\in \\\\left\\[-\\\\frac{\\\\pi}{2}, \\\\frac{\\\\pi}{2}\\\\right\\] \\\\text{ such that } \\\\tan(y) = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe inverse tangent (angle in radians between \\- π 2 \\-\\\\frac{\\\\pi}{2} and π 2 \\\\frac{\\\\pi}{2} , inclusive) of `x`. If `x` is [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), it returns π 2 \\\\frac{\\\\pi}{2} . If `x` is `-Infinity`, it returns \\- π 2 \\-\\\\frac{\\\\pi}{2} .\n\n## [Description](#description)\n\nBecause `atan()` is a static method of `Math`, you always use it as `Math.atan()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.atan()](#using_math.atan)\n\n```\nMath.atan(-Infinity); // -1.5707963267948966 (-π/2)\nMath.atan(-0); // -0\nMath.atan(0); // 0\nMath.atan(1); // 0.7853981633974483  (π/4)\nMath.atan(Infinity); // 1.5707963267948966  (π/2)\n\n// The angle that the line (0,0) -- (x,y) forms with the x-axis in a Cartesian coordinate system\nconst theta = (x, y) => Math.atan(y / x);\n```\n\nNote that you may want to avoid the `theta` function and use [`Math.atan2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2) instead, which has a wider range (between -π and π) and avoids outputting `NaN` for cases such as when `x` is `0`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.atan](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.atan) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.atan() - JavaScript | MDN",
    "description": "The Math.atan() static method returns the inverse tangent (in radians) of a number, that is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2",
    "markdown": "# Math.atan2() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.atan2()`** static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for `Math.atan2(y, x)`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`y`](#y)\n\nThe y coordinate of the point.\n\n[`x`](#x)\n\nThe x coordinate of the point.\n\n### [Return value](#return_value)\n\nThe angle in radians (between -π and π, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y).\n\n## [Description](#description)\n\nThe `Math.atan2()` method measures the counterclockwise angle θ, in radians, between the positive x-axis and the point `(x, y)`. Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.\n\n![A simple diagram showing the angle returned by atan2(y, x)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2/atan2.png)\n\n`Math.atan2()` is passed separate `x` and `y` arguments, while [`Math.atan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan) is passed the ratio of those two arguments. `Math.atan2(y, x)` differs from `Math.atan(y / x)` in the following cases:\n\n| `x` | `y` | `Math.atan2(y, x)` | `Math.atan(y / x)` |\n| --- | --- | --- | --- |\n| `Infinity` | `Infinity` | π / 4 | `NaN` |\n| `Infinity` | `-Infinity` | \\-π / 4 | `NaN` |\n| `-Infinity` | `Infinity` | 3π / 4 | `NaN` |\n| `-Infinity` | `-Infinity` | \\-3π / 4 | `NaN` |\n| 0   | 0   | 0   | `NaN` |\n| 0   | \\-0 | \\-0 | `NaN` |\n| < 0 (including `-0`) | 0   | π   | 0   |\n| < 0 (including `-0`) | \\-0 | \\-π | 0   |\n| `-Infinity` | \\> 0 | π   | \\-0 |\n| \\-0 | \\> 0 | π / 2 | \\-π / 2 |\n| `-Infinity` | < 0 | \\-π | 0   |\n| \\-0 | < 0 | \\-π / 2 | π / 2 |\n\nIn addition, for points in the second and third quadrants (`x < 0`), `Math.atan2()` would output an angle less than \\- π 2 \\-\\\\frac{\\\\pi}{2} or greater than π 2 \\\\frac{\\\\pi}{2} .\n\nBecause `atan2()` is a static method of `Math`, you always use it as `Math.atan2()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.atan2()](#using_math.atan2)\n\n```\nMath.atan2(90, 15); // 1.4056476493802699\nMath.atan2(15, 90); // 0.16514867741462683\n```\n\n### [Difference between Math.atan2(y, x) and Math.atan(y / x)](#difference_between_math.atan2y_x_and_math.atany_x)\n\nThe following script prints all inputs that produce a difference between `Math.atan2(y, x)` and `Math.atan(y / x)`.\n\n```\nconst formattedNumbers = new Map([\n  [-Math.PI, \"-π\"],\n  [(-3 * Math.PI) / 4, \"-3π/4\"],\n  [-Math.PI / 2, \"-π/2\"],\n  [-Math.PI / 4, \"-π/4\"],\n  [Math.PI / 4, \"π/4\"],\n  [Math.PI / 2, \"π/2\"],\n  [(3 * Math.PI) / 4, \"3π/4\"],\n  [Math.PI, \"π\"],\n  [-Infinity, \"-∞\"],\n  [Infinity, \"∞\"],\n]);\n\nfunction format(template, ...args) {\n  return String.raw(\n    { raw: template },\n    ...args.map((num) =>\n      (Object.is(num, -0)\n        ? \"-0\"\n        : formattedNumbers.get(num) ?? String(num)\n      ).padEnd(5),\n    ),\n  );\n}\n\nconsole.log(`| x     | y     | atan2 | atan  |\n|-------|-------|-------|-------|`);\n\nfor (const x of [-Infinity, -1, -0, 0, 1, Infinity]) {\n  for (const y of [-Infinity, -1, -0, 0, 1, Infinity]) {\n    const atan2 = Math.atan2(y, x);\n    const atan = Math.atan(y / x);\n    if (!Object.is(atan2, atan)) {\n      console.log(format`| ${x} | ${y} | ${atan2} | ${atan} |`);\n    }\n  }\n}\n```\n\nThe output is:\n\n| x     | y     | atan2 | atan  |\n|-------|-------|-------|-------|\n| -∞    | -∞    | -3π/4 | NaN   |\n| -∞    | -1    | -π    | 0     |\n| -∞    | -0    | -π    | 0     |\n| -∞    | 0     | π     | -0    |\n| -∞    | 1     | π     | -0    |\n| -∞    | ∞     | 3π/4  | NaN   |\n| -1    | -∞    | -π/2  | π/2   |\n| -1    | -1    | -3π/4 | π/4   |\n| -1    | -0    | -π    | 0     |\n| -1    | 0     | π     | -0    |\n| -1    | 1     | 3π/4  | -π/4  |\n| -1    | ∞     | π/2   | -π/2  |\n| -0    | -∞    | -π/2  | π/2   |\n| -0    | -1    | -π/2  | π/2   |\n| -0    | -0    | -π    | NaN   |\n| -0    | 0     | π     | NaN   |\n| -0    | 1     | π/2   | -π/2  |\n| -0    | ∞     | π/2   | -π/2  |\n| 0     | -0    | -0    | NaN   |\n| 0     | 0     | 0     | NaN   |\n| ∞     | -∞    | -π/4  | NaN   |\n| ∞     | ∞     | π/4   | NaN   |\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.atan2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.atan2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.atan2() - JavaScript | MDN",
    "description": "The Math.atan2() static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p",
    "markdown": "# Math.log1p() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.log1p()`** static method returns the natural logarithm (base [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `1 + x`, where `x` is the argument. That is:\n\n∀ x \\> − 1 , 𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙 ( 𝚡 ) \\= ln ( 1 + x ) \\\\forall x > -1,;\\\\mathtt{\\\\operatorname{Math.log1p}(x)} = \\\\ln(1 + x)\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to -1.\n\n### [Return value](#return_value)\n\nThe natural logarithm (base [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `x + 1`. If `x` is -1, returns [`-Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY). If `x < -1`, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nFor very small values of _x_, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.\n\nWhen you calculate log(1 + _x_), where _x_ is a small positive number, you should get an answer very close to _x_ because: lim x → 0 log ⁡ ( 1 + x ) x \\= 1 \\\\lim\\_{x \\\\to 0} \\\\frac{\\\\log(1+x)}{x} = 1 . If you calculate `Math.log(1 + 1.1111111111e-15)`, you should get an answer close to `1.1111111111e-15`. Instead, you will end up taking the logarithm of `1.00000000000000111022` (the roundoff is in binary, so sometimes it gets ugly), and get the answer 1.11022…e-15, with only 3 correct digits. If you calculate `Math.log1p(1.1111111111e-15)` instead, you will get a much more accurate answer, `1.1111111110999995e-15`, with 15 correct digits of precision (actually 16 in this case).\n\nIf the value of `x` is less than -1, the return value is always [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\nBecause `log1p()` is a static method of `Math`, you always use it as `Math.log1p()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.log1p()](#using_math.log1p)\n\n```\nMath.log1p(-2); // NaN\nMath.log1p(-1); // -Infinity\nMath.log1p(-0); // -0\nMath.log1p(0); // 0\nMath.log1p(1); // 0.6931471805599453\nMath.log1p(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log1p](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log1p) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.log1p() - JavaScript | MDN",
    "description": "The Math.log1p() static method returns the natural logarithm (base e) of 1 + x, where x is the argument. That is:",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2",
    "markdown": "# Math.log2() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.log2()`** static method returns the base 2 logarithm of a number. That is\n\n∀ x \\> 0 , 𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟸 ( 𝚡 ) \\= log 2 ( x ) \\= the unique  y  such that  2 y \\= x \\\\forall x > 0,;\\\\mathtt{\\\\operatorname{Math.log2}(x)} = \\\\log\\_2(x) = \\\\text{the unique } y \\\\text{ such that } 2^y = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to 0.\n\n### [Return value](#return_value)\n\nThe base 2 logarithm of `x`. If `x < 0`, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `log2()` is a static method of `Math`, you always use it as `Math.log2()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nThis function is the equivalent of `Math.log(x) / Math.log(2)`. For `log2(e)`, use the constant [`Math.LOG2E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E), which is 1 / [`Math.LN2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2).\n\n## [Examples](#examples)\n\n### [Using Math.log2()](#using_math.log2)\n\n```\nMath.log2(-2); // NaN\nMath.log2(-0); // -Infinity\nMath.log2(0); // -Infinity\nMath.log2(1); // 0\nMath.log2(2); // 1\nMath.log2(3); // 1.584962500721156\nMath.log2(1024); // 10\nMath.log2(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.log2() - JavaScript | MDN",
    "description": "The Math.log2() static method returns the base 2 logarithm of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor",
    "markdown": "# Math.floor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.floor()`** static method always rounds down and returns the largest integer less than or equal to a given number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe largest integer smaller than or equal to `x`. It's the same value as [`-Math.ceil(-x)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil).\n\n## [Description](#description)\n\nBecause `floor()` is a static method of `Math`, you always use it as `Math.floor()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.floor()](#using_math.floor)\n\n```\nMath.floor(-Infinity); // -Infinity\nMath.floor(-45.95); // -46\nMath.floor(-45.05); // -46\nMath.floor(-0); // -0\nMath.floor(0); // 0\nMath.floor(4); // 4\nMath.floor(45.05); // 45\nMath.floor(45.95); // 45\nMath.floor(Infinity); // Infinity\n```\n\n### [Decimal adjustment](#decimal_adjustment)\n\nIn this example, we implement a method called `decimalAdjust()` that is an enhancement method of `Math.floor()`, [`Math.ceil()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil), and [`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round). While the three `Math` functions always adjust the input to the units digit, `decimalAdjust` accepts an `exp` parameter that specifies the number of digits to the left of the decimal point to which the number should be adjusted. For example, `-1` means it would leave one digit after the decimal point (as in \"× 10\\-1\"). In addition, it allows you to select the means of adjustment — `round`, `floor`, or `ceil` — through the `type` parameter.\n\nIt does so by multiplying the number by a power of 10, then rounding the result to the nearest integer, then dividing by the power of 10. To better preserve precision, it takes advantage of Number's [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) method, which represents large or small numbers in scientific notation (like `6.02e23`).\n\n```\n/**\n * Adjusts a number to the specified digit.\n *\n * @param {\"round\" | \"floor\" | \"ceil\"} type The type of adjustment.\n * @param {number} value The number.\n * @param {number} exp The exponent (the 10 logarithm of the adjustment base).\n * @returns {number} The adjusted value.\n */\nfunction decimalAdjust(type, value, exp) {\n  type = String(type);\n  if (![\"round\", \"floor\", \"ceil\"].includes(type)) {\n    throw new TypeError(\n      \"The type of decimal adjustment must be one of 'round', 'floor', or 'ceil'.\",\n    );\n  }\n  exp = Number(exp);\n  value = Number(value);\n  if (exp % 1 !== 0 || Number.isNaN(value)) {\n    return NaN;\n  } else if (exp === 0) {\n    return Math[type](value);\n  }\n  const [magnitude, exponent = 0] = value.toString().split(\"e\");\n  const adjustedValue = Math[type](`${magnitude}e${exponent - exp}`);\n  // Shift back\n  const [newMagnitude, newExponent = 0] = adjustedValue.toString().split(\"e\");\n  return Number(`${newMagnitude}e${+newExponent + exp}`);\n}\n\n// Decimal round\nconst round10 = (value, exp) => decimalAdjust(\"round\", value, exp);\n// Decimal floor\nconst floor10 = (value, exp) => decimalAdjust(\"floor\", value, exp);\n// Decimal ceil\nconst ceil10 = (value, exp) => decimalAdjust(\"ceil\", value, exp);\n\n// Round\nround10(55.55, -1); // 55.6\nround10(55.549, -1); // 55.5\nround10(55, 1); // 60\nround10(54.9, 1); // 50\nround10(-55.55, -1); // -55.5\nround10(-55.551, -1); // -55.6\nround10(-55, 1); // -50\nround10(-55.1, 1); // -60\n// Floor\nfloor10(55.59, -1); // 55.5\nfloor10(59, 1); // 50\nfloor10(-55.51, -1); // -55.6\nfloor10(-51, 1); // -60\n// Ceil\nceil10(55.51, -1); // 55.6\nceil10(51, 1); // 60\nceil10(-55.59, -1); // -55.5\nceil10(-59, 1); // -50\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.floor](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.floor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.floor() - JavaScript | MDN",
    "description": "The Math.floor() static method always rounds down and returns the largest integer less than or equal to a given number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil",
    "markdown": "# Math.ceil() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.ceil()`** static method always rounds up and returns the smallest integer greater than or equal to a given number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe smallest integer greater than or equal to `x`. It's the same value as [`-Math.floor(-x)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor).\n\n## [Description](#description)\n\nBecause `ceil()` is a static method of `Math`, you always use it as `Math.ceil()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.ceil()](#using_math.ceil)\n\n```\nMath.ceil(-Infinity); // -Infinity\nMath.ceil(-7.004); // -7\nMath.ceil(-4); // -4\nMath.ceil(-0.95); // -0\nMath.ceil(-0); // -0\nMath.ceil(0); // 0\nMath.ceil(0.95); // 1\nMath.ceil(4); // 4\nMath.ceil(7.004); // 8\nMath.ceil(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.ceil](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.ceil) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.ceil() - JavaScript | MDN",
    "description": "The Math.ceil() static method always rounds up and returns the smallest integer greater than or equal to a given number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
    "markdown": "# Math.random() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.random()`** static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.\n\n**Note:** `Math.random()` _does not_ provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the [`Crypto.getRandomValues()`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).\n\n## [Examples](#examples)\n\nNote that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, the ranges claimed for the functions below (excluding the one for `Math.random()` itself) aren't exact. If extremely large bounds are chosen (253 or higher), it's possible in _extremely_ rare cases to reach the usually-excluded upper bound.\n\n### [Getting a random number between 0 (inclusive) and 1 (exclusive)](#getting_a_random_number_between_0_inclusive_and_1_exclusive)\n\n```\nfunction getRandom() {\n  return Math.random();\n}\n```\n\n### [Getting a random number between two values](#getting_a_random_number_between_two_values)\n\nThis example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) `min`, and is less than (and not equal) `max`.\n\n```\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n```\n\n### [Getting a random integer between two values](#getting_a_random_integer_between_two_values)\n\nThis example returns a random _integer_ between the specified values. The value is no lower than `min` (or the next integer greater than `min` if `min` isn't an integer), and is less than (but not equal to) `max`.\n\n```\nfunction getRandomInt(min, max) {\n  const minCeiled = Math.ceil(min);\n  const maxFloored = Math.floor(max);\n  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\n}\n```\n\n**Note:** It might be tempting to use [`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round) to accomplish that, but doing so would cause your random numbers to follow a non-uniform distribution, which may not be acceptable for your needs.\n\n### [Getting a random integer between two values, inclusive](#getting_a_random_integer_between_two_values_inclusive)\n\nWhile the `getRandomInt()` function above is inclusive at the minimum, it's exclusive at the maximum. What if you need the results to be inclusive at both the minimum and the maximum? The `getRandomIntInclusive()` function below accomplishes that.\n\n```\nfunction getRandomIntInclusive(min, max) {\n  const minCeiled = Math.ceil(min);\n  const maxFloored = Math.floor(max);\n  return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled); // The maximum is inclusive and the minimum is inclusive\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.random](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.random) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.random() - JavaScript | MDN",
    "description": "The Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max",
    "markdown": "# Math.max() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.max()`** static method returns the largest of the numbers given as input parameters, or -[`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) if there are no parameters.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMath.max()\nMath.max(value1)\nMath.max(value1, value2)\nMath.max(value1, value2, /* …, */ valueN)\n```\n\n### [Parameters](#parameters)\n\n[`value1`](#value1), …, `valueN`\n\nZero or more numbers among which the largest value will be selected and returned.\n\n### [Return value](#return_value)\n\nThe largest of the given numbers. Returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) if any of the parameters is or is converted into `NaN`. Returns -[`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) if no parameters are provided.\n\n## [Description](#description)\n\nBecause `max()` is a static method of `Math`, you always use it as `Math.max()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n[`Math.max.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\n## [Examples](#examples)\n\n### [Using Math.max()](#using_math.max)\n\n```\nMath.max(10, 20); // 20\nMath.max(-10, -20); // -10\nMath.max(-10, 20); // 20\n```\n\n### [Getting the maximum element of an array](#getting_the_maximum_element_of_an_array)\n\n[`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) can be used to find the maximum element in a numeric array, by comparing each value:\n\n```\nconst arr = [1, 2, 3];\nconst max = arr.reduce((a, b) => Math.max(a, b), -Infinity);\n```\n\nThe following function uses [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) to get the maximum of an array. `getMaxOfArray([1, 2, 3])` is equivalent to `Math.max(1, 2, 3)`, but you can use `getMaxOfArray()` on programmatically constructed arrays. This should only be used for arrays with relatively few elements.\n\n```\nfunction getMaxOfArray(numArray) {\n  return Math.max.apply(null, numArray);\n}\n```\n\nThe [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) is a shorter way of writing the `apply` solution to get the maximum of an array:\n\n```\nconst arr = [1, 2, 3];\nconst max = Math.max(...arr);\n```\n\nHowever, both spread (`...`) and `apply` will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See [Using apply and built-in functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_and_built-in_functions) for more details. The `reduce` solution does not have this problem.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.max](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.max) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.max() - JavaScript | MDN",
    "description": "The Math.max() static method returns the largest of the numbers given as input parameters, or -Infinity if there are no parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min",
    "markdown": "# Math.min() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.min()`** static method returns the smallest of the numbers given as input parameters, or [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) if there are no parameters.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMath.min()\nMath.min(value1)\nMath.min(value1, value2)\nMath.min(value1, value2, /* …, */ valueN)\n```\n\n### [Parameters](#parameters)\n\n[`value1`](#value1), …, `valueN`\n\nZero or more numbers among which the lowest value will be selected and returned.\n\n### [Return value](#return_value)\n\nThe smallest of the given numbers. Returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) if any of the parameters is or is converted into `NaN`. Returns [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) if no parameters are provided.\n\n## [Description](#description)\n\nBecause `min()` is a static method of `Math`, you always use it as `Math.min()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n[`Math.min.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\n## [Examples](#examples)\n\n### [Using Math.min()](#using_math.min)\n\nThis finds the min of `x` and `y` and assigns it to `z`:\n\n```\nconst x = 10;\nconst y = -20;\nconst z = Math.min(x, y); // -20\n```\n\n### [Clipping a value with Math.min()](#clipping_a_value_with_math.min)\n\n`Math.min()` is often used to clip a value so that it is always less than or equal to a boundary. For instance, this\n\n```\nlet x = f(foo);\n\nif (x > boundary) {\n  x = boundary;\n}\n```\n\nmay be written as this\n\n```\nconst x = Math.min(f(foo), boundary);\n```\n\n[`Math.max()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) can be used in a similar way to clip a value at the other end.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.min](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.min) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.min() - JavaScript | MDN",
    "description": "The Math.min() static method returns the smallest of the numbers given as input parameters, or Infinity if there are no parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round",
    "markdown": "# Math.round() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.round()`** static method returns the value of a number rounded to the nearest integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe value of `x` rounded to the nearest integer.\n\n## [Description](#description)\n\nIf the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +∞.\n\n**Note:** This differs from many languages' `round()` functions, which often round half-increments _away from zero_, giving a different result in the case of negative numbers with a fractional part of exactly 0.5.\n\n`Math.round(x)` is not exactly the same as [`Math.floor(x + 0.5)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor). When `x` is -0, or -0.5 ≤ x < 0, `Math.round(x)` returns -0, while `Math.floor(x + 0.5)` returns 0. However, neglecting that difference and potential precision errors, `Math.round(x)` and `Math.floor(x + 0.5)` are generally equivalent.\n\nBecause `round()` is a static method of `Math`, you always use it as `Math.round()`, rather than as a method of a `Math` object you created (`Math` has no constructor).\n\n## [Examples](#examples)\n\n### [Using round](#using_round)\n\n```\nMath.round(-Infinity); // -Infinity\nMath.round(-20.51); // -21\nMath.round(-20.5); // -20\nMath.round(-0.1); // -0\nMath.round(0); // 0\nMath.round(20.49); // 20\nMath.round(20.5); // 21\nMath.round(42); // 42\nMath.round(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.round](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.round) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.round() - JavaScript | MDN",
    "description": "The Math.round() static method returns the value of a number rounded to the nearest integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt",
    "markdown": "# Math.sqrt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.sqrt()`** static method returns the square root of a number. That is\n\n∀ x ≥ 0 , 𝙼𝚊𝚝𝚑.𝚜𝚚𝚛𝚝 ( 𝚡 ) \\= x \\= the unique  y ≥ 0  such that  y 2 \\= x \\\\forall x \\\\geq 0,;\\\\mathtt{\\\\operatorname{Math.sqrt}(x)} = \\\\sqrt{x} = \\\\text{the unique } y \\\\geq 0 \\\\text{ such that } y^2 = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA number greater than or equal to 0.\n\n### [Return value](#return_value)\n\nThe square root of `x`, a nonnegative number. If `x < 0`, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `sqrt()` is a static method of `Math`, you always use it as `Math.sqrt()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.sqrt()](#using_math.sqrt)\n\n```\nMath.sqrt(-1); // NaN\nMath.sqrt(-0); // -0\nMath.sqrt(0); // 0\nMath.sqrt(1); // 1\nMath.sqrt(2); // 1.414213562373095\nMath.sqrt(9); // 3\nMath.sqrt(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sqrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.sqrt() - JavaScript | MDN",
    "description": "The Math.sqrt() static method returns the square root of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt",
    "markdown": "# Math.cbrt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.cbrt()`** static method returns the cube root of a number. That is\n\n𝙼𝚊𝚝𝚑.𝚌𝚋𝚛𝚝 ( 𝚡 ) \\= x 3 \\= the unique  y  such that  y 3 \\= x \\\\mathtt{\\\\operatorname{Math.cbrt}(x)} = \\\\sqrt\\[3\\]{x} = \\\\text{the unique } y \\\\text{ such that } y^3 = x\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe cube root of `x`.\n\n## [Description](#description)\n\nBecause `cbrt()` is a static method of `Math`, you always use it as `Math.cbrt()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.cbrt()](#using_math.cbrt)\n\n```\nMath.cbrt(-Infinity); // -Infinity\nMath.cbrt(-1); // -1\nMath.cbrt(-0); // -0\nMath.cbrt(0); // 0\nMath.cbrt(1); // 1\nMath.cbrt(2); // 1.2599210498948732\nMath.cbrt(Infinity); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.cbrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.cbrt) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.cbrt() - JavaScript | MDN",
    "description": "The Math.cbrt() static method returns the cube root of a number. That is",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot",
    "markdown": "# Math.hypot() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.hypot()`** static method returns the square root of the sum of squares of its arguments. That is,\n\n𝙼𝚊𝚝𝚑.𝚑𝚢𝚙𝚘𝚝 ( v 1 , v 2 , … , v n ) \\= ∑ i \\= 1 n v i 2 \\= v 1 2 + v 2 2 + … + v n 2 \\\\mathtt{\\\\operatorname{Math.hypot}(v\\_1, v\\_2, \\\\dots, v\\_n)} = \\\\sqrt{\\\\sum\\_{i=1}^n v\\_i^2} = \\\\sqrt{v\\_1^2 + v\\_2^2 + \\\\dots + v\\_n^2}\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMath.hypot()\nMath.hypot(value1)\nMath.hypot(value1, value2)\nMath.hypot(value1, value2, /* …, */ valueN)\n```\n\n### [Parameters](#parameters)\n\n[`value1`](#value1), …, `valueN`\n\nNumbers.\n\n### [Return value](#return_value)\n\nThe square root of the sum of squares of the given arguments. Returns [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) if any of the arguments is ±Infinity. Otherwise, if at least one of the arguments is or is converted to [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). Returns `0` if no arguments are given or all arguments are ±0.\n\n## [Description](#description)\n\nCalculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula `Math.sqrt(v1*v1 + v2*v2)`, where v1 and v2 are the lengths of the triangle's legs, or the complex number's real and complex components. The corresponding distance in 2 or more dimensions can be calculated by adding more squares under the square root: `Math.sqrt(v1*v1 + v2*v2 + v3*v3 + v4*v4)`.\n\nThis function makes this calculation easier and faster; you call `Math.hypot(v1, v2)`, or `Math.hypot(v1, /* …, */, vN)`.\n\n`Math.hypot` also avoids overflow/underflow problems if the magnitude of your numbers is very large. The largest number you can represent in JS is [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE), which is around 10308. If your numbers are larger than about 10154, taking the square of them will result in Infinity. For example, `Math.sqrt(1e200*1e200 + 1e200*1e200) = Infinity`. If you use `hypot()` instead, you get a better answer: `Math.hypot(1e200, 1e200) = 1.4142...e+200` . This is also true with very small numbers. `Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) = 0`, but `Math.hypot(1e-200, 1e-200) = 1.4142...e-200`.\n\nWith one argument, `Math.hypot()` is equivalent to [`Math.abs()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs). [`Math.hypot.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\nBecause `hypot()` is a static method of `Math`, you always use it as `Math.hypot()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.hypot()](#using_math.hypot)\n\n```\nMath.hypot(3, 4); // 5\nMath.hypot(3, 4, 5); // 7.0710678118654755\nMath.hypot(); // 0\nMath.hypot(NaN); // NaN\nMath.hypot(NaN, Infinity); // Infinity\nMath.hypot(3, 4, \"foo\"); // NaN, since +'foo' => NaN\nMath.hypot(3, 4, \"5\"); // 7.0710678118654755, +'5' => 5\nMath.hypot(-3); // 3, the same as Math.abs(-3)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.hypot](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.hypot) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.hypot() - JavaScript | MDN",
    "description": "The Math.hypot() static method returns the square root of the sum of squares of its arguments. That is,",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround",
    "markdown": "# Math.fround() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.fround()`** static method returns the nearest [32-bit single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe nearest [32-bit single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of `doubleFloat`.\n\n## [Description](#description)\n\nJavaScript uses 64-bit double floating-point numbers internally, which offer a very high precision. However, sometimes you may be working with 32-bit floating-point numbers, for example if you are reading values from a [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array). This can create confusion: checking a 64-bit float and a 32-bit float for equality may fail even though the numbers are seemingly identical.\n\nTo solve this, `Math.fround()` can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a \"round to even\" on the 23rd bit of the mantissa, and sets all following mantissa bits to `0`. If the number is outside the range of a 32-bit float, [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) or `-Infinity` is returned.\n\nBecause `fround()` is a static method of `Math`, you always use it as `Math.fround()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.fround()](#using_math.fround)\n\nThe number 1.5 can be precisely represented in the binary numeral system, and is identical in 32-bit and 64-bit:\n\n```\nMath.fround(1.5); // 1.5\nMath.fround(1.5) === 1.5; // true\n```\n\nHowever, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:\n\n```\nMath.fround(1.337); // 1.3370000123977661\nMath.fround(1.337) === 1.337; // false\n```\n\n2 150 2^150 is too big for a 32-bit float, so `Infinity` is returned:\n\n```\n2 ** 150; // 1.42724769270596e+45\nMath.fround(2 ** 150); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.fround](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.fround) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.fround() - JavaScript | MDN",
    "description": "The Math.fround() static method returns the nearest 32-bit single precision float representation of a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32",
    "markdown": "# Math.clz32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.clz32()`** static method returns the number of leading zero bits in the 32-bit binary representation of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe number of leading zero bits in the 32-bit binary representation of `x`.\n\n## [Description](#description)\n\n`clz32` is short for **C**ount**L**eading**Z**eros**32**.\n\nIf `x` is not a number, it will be converted to a number first, then converted to a 32-bit unsigned integer.\n\nIf the converted 32-bit unsigned integer is `0`, `32` is returned, because all bits are `0`. If the most significant bit is `1` (i.e. the number is greater than or equal to 231), `0` is returned.\n\nThis function is particularly useful for systems that compile to JS, like [Emscripten](https://emscripten.org/).\n\n## [Examples](#examples)\n\n### [Using Math.clz32()](#using_math.clz32)\n\n```\nMath.clz32(1); // 31\nMath.clz32(1000); // 22\nMath.clz32(); // 32\n\nconst stuff = [\n  NaN,\n  Infinity,\n  -Infinity,\n  0,\n  -0,\n  false,\n  null,\n  undefined,\n  \"foo\",\n  {},\n  [],\n];\nstuff.every((n) => Math.clz32(n) === 32); // true\n\nMath.clz32(true); // 31\nMath.clz32(3.5); // 30\n```\n\n### [Implementing Count Leading Ones and beyond](#implementing_count_leading_ones_and_beyond)\n\nAt present, there is no `Math.clon` for \"Count Leading Ones\" (named \"clon\", not \"clo\", because \"clo\" and \"clz\" are too similar especially for non-English-speaking people). However, a `clon` function can easily be created by inverting the bits of a number and passing the result to `Math.clz32`. Doing this will work because the inverse of 1 is 0 and vice versa. Thus, inverting the bits will inverse the measured quantity of 0's (from `Math.clz32`), thereby making `Math.clz32` count the number of ones instead of counting the number of zeros.\n\nConsider the following 32-bit word:\n\n```\nconst a = 32776; // 00000000000000001000000000001000 (16 leading zeros)\nMath.clz32(a); // 16\n\nconst b = ~32776; // 11111111111111110111111111110111 (32776 inverted, 0 leading zeros)\nMath.clz32(b); // 0 (this is equal to how many leading one's there are in a)\n```\n\nUsing this logic, a `clon` function can be created as follows:\n\n```\nconst clz = Math.clz32;\n\nfunction clon(integer) {\n  return clz(~integer);\n}\n```\n\nFurther, this technique could be extended to create a jumpless \"Count Trailing Zeros\" function, as seen below. The `ctrz` function takes a bitwise AND of the integer with its two's complement. By how two's complement works, all trailing zeros will be converted to ones, and then when adding 1, it would be carried over until the first `0` (which was originally a `1`) is reached. All bits higher than this one stay the same and are inverses of the original integer's bits. Therefore, when doing bitwise AND with the original integer, all higher bits become `0`, which can be counted with `clz`. The number of trailing zeros, plus the first `1` bit, plus the leading bits that were counted by `clz`, total to 32.\n\n```\nfunction ctrz(integer) {\n  integer >>>= 0; // coerce to Uint32\n  if (integer === 0) {\n    // skipping this step would make it return -1\n    return 32;\n  }\n  integer &= -integer; // equivalent to `int = int & (~int + 1)`\n  return 31 - clz(integer);\n}\n```\n\nThen we can define a \"Count Trailing Ones\" function like so:\n\n```\nfunction ctron(integer) {\n  return ctrz(~integer);\n}\n```\n\nThese helper functions can be made into an [asm.js](https://developer.mozilla.org/en-US/docs/Games/Tools/asm.js) module for a potential performance improvement.\n\n```\nconst countTrailsMethods = (function (stdlib, foreign, heap) {\n  \"use asm\";\n  const clz = stdlib.Math.clz32;\n\n  // count trailing zeros\n  function ctrz(integer) {\n    integer = integer | 0; // coerce to an integer\n    if ((integer | 0) == 0) {\n      // skipping this step would make it return -1\n      return 32;\n    }\n    // Note: asm.js doesn't have compound assignment operators such as &=\n    integer = integer & -integer; // equivalent to `int = int & (~int + 1)`\n    return (31 - clz(integer)) | 0;\n  }\n\n  // count trailing ones\n  function ctron(integer) {\n    integer = integer | 0; // coerce to an integer\n    return ctrz(~integer) | 0;\n  }\n\n  // asm.js demands plain objects:\n  return { ctrz: ctrz, ctron: ctron };\n})(window, null, null);\n\nconst { ctrz, ctron } = countTrailsMethods;\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.clz32](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.clz32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.clz32() - JavaScript | MDN",
    "description": "The Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign",
    "markdown": "# Math.sign() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.sign()`** static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nA number representing the sign of `x`:\n\n*   If `x` is positive, returns `1`.\n*   If `x` is negative, returns `-1`.\n*   If `x` is positive zero, returns `0`.\n*   If `x` is negative zero, returns `-0`.\n*   Otherwise, returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nBecause `sign()` is a static method of `Math`, you always use it as `Math.sign()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.sign()](#using_math.sign)\n\n```\nMath.sign(3); // 1\nMath.sign(-3); // -1\nMath.sign(\"-3\"); // -1\nMath.sign(0); // 0\nMath.sign(-0); // -0\nMath.sign(NaN); // NaN\nMath.sign(\"foo\"); // NaN\nMath.sign(); // NaN\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sign](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sign) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.sign() - JavaScript | MDN",
    "description": "The Math.sign() static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul",
    "markdown": "# Math.imul() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.imul()`** static method returns the result of the C-like 32-bit multiplication of the two parameters.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`a`](#a)\n\nFirst number.\n\n[`b`](#b)\n\nSecond number.\n\n### [Return value](#return_value)\n\nThe result of the C-like 32-bit multiplication of the given arguments.\n\n## [Description](#description)\n\n`Math.imul()` allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like [Emscripten](https://en.wikipedia.org/wiki/Emscripten).\n\nBecause `imul()` is a static method of `Math`, you always use it as `Math.imul()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nIf you use normal JavaScript floating point numbers in `imul()`, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. However, with [asm.js](https://developer.mozilla.org/en-US/docs/Games/Tools/asm.js), which allows JIT-optimizers to more confidently use integers in JavaScript, multiplying two numbers stored internally as integers (which is only possible with asm.js) with `imul()` could be potentially more performant.\n\n## [Examples](#examples)\n\n### [Using Math.imul()](#using_math.imul)\n\n```\nMath.imul(2, 4); // 8\nMath.imul(-1, 8); // -8\nMath.imul(-2, -2); // 4\nMath.imul(0xffffffff, 5); // -5\nMath.imul(0xfffffffe, 5); // -10\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.imul](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.imul) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math.imul() - JavaScript | MDN",
    "description": "The Math.imul() static method returns the result of the C-like 32-bit multiplication of the two parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",
    "markdown": "# String.fromCodePoint() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`String.fromCodePoint()`** static method returns a string created from the specified sequence of code points.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nString.fromCodePoint()\nString.fromCodePoint(num1)\nString.fromCodePoint(num1, num2)\nString.fromCodePoint(num1, num2, /* …, */ numN)\n```\n\n### [Parameters](#parameters)\n\n[`num1`](#num1), …, `numN`\n\nAn integer between `0` and `0x10FFFF` (inclusive) representing a Unicode code point.\n\n### [Return value](#return_value)\n\nA string created by using the specified sequence of code points.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `numN` is not an integer, is less than `0`, or is greater than `0x10FFFF` after being converted to a number.\n\n## [Description](#description)\n\nBecause `fromCodePoint()` is a static method of `String`, you always use it as `String.fromCodePoint()`, rather than as a method of a `String` value you created.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). In UTF-16, each string index is a code unit with value `0` – `65535`. Higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, `fromCodePoint()` may return a string whose [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) (in UTF-16 code units) is larger than the number of arguments passed. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Examples](#examples)\n\n### [Using fromCodePoint()](#using_fromcodepoint)\n\nValid input:\n\n```\nString.fromCodePoint(42); // \"*\"\nString.fromCodePoint(65, 90); // \"AZ\"\nString.fromCodePoint(0x404); // \"\\u0404\" === \"Є\"\nString.fromCodePoint(0x2f804); // \"\\uD87E\\uDC04\"\nString.fromCodePoint(194564); // \"\\uD87E\\uDC04\"\nString.fromCodePoint(0x1d306, 0x61, 0x1d307); // \"\\uD834\\uDF06a\\uD834\\uDF07\"\n```\n\nInvalid input:\n\n```\nString.fromCodePoint(\"_\"); // RangeError\nString.fromCodePoint(Infinity); // RangeError\nString.fromCodePoint(-1); // RangeError\nString.fromCodePoint(3.14); // RangeError\nString.fromCodePoint(3e-2); // RangeError\nString.fromCodePoint(NaN); // RangeError\n```\n\n### [Compared to fromCharCode()](#compared_to_fromcharcode)\n\n[`String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) cannot return supplementary characters (i.e. code points `0x010000` – `0x10FFFF`) by specifying their code point. Instead, it requires the UTF-16 surrogate pair in order to return a supplementary character:\n\n```\nString.fromCharCode(0xd83c, 0xdf03); // Code Point U+1F303 \"Night with\nString.fromCharCode(55356, 57091); // Stars\" === \"\\uD83C\\uDF03\"\n```\n\n`String.fromCodePoint()`, on the other hand, can return 4-byte supplementary characters, as well as the more common 2-byte BMP characters, by specifying their code point (which is equivalent to the UTF-32 code unit):\n\n```\nString.fromCodePoint(0x1f303); // or 127747 in decimal\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.fromcodepoint](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.fromcodepoint) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.fromCodePoint() - JavaScript | MDN",
    "description": "The String.fromCodePoint() static method returns a string created from the specified sequence of code points.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt",
    "markdown": "# String.prototype.codePointAt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`codePointAt()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index of the character to be returned. [Converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### [Return value](#return_value)\n\nA non-negative integer representing the code point value of the character at the given `index`.\n\n*   If `index` is out of the range of `0` – `str.length - 1`, `codePointAt()` returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n*   If the element at `index` is a UTF-16 leading surrogate, returns the code point of the surrogate _pair_.\n*   If the element at `index` is a UTF-16 trailing surrogate, returns _only_ the trailing surrogate code unit.\n\n## [Description](#description)\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). In UTF-16, each string index is a code unit with value `0` – `65535`. Higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, `codePointAt()` returns a code point that may span two string indices. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Examples](#examples)\n\n### [Using codePointAt()](#using_codepointat)\n\n```\n\"ABC\".codePointAt(0); // 65\n\"ABC\".codePointAt(0).toString(16); // 41\n\n\"😍\".codePointAt(0); // 128525\n\"\\ud83d\\ude0d\".codePointAt(0); // 128525\n\"\\ud83d\\ude0d\".codePointAt(0).toString(16); // 1f60d\n\n\"😍\".codePointAt(1); // 56845\n\"\\ud83d\\ude0d\".codePointAt(1); // 56845\n\"\\ud83d\\ude0d\".codePointAt(1).toString(16); // de0d\n\n\"ABC\".codePointAt(42); // undefined\n```\n\n### [Looping with codePointAt()](#looping_with_codepointat)\n\nBecause using string indices for looping causes the same code point to be visited twice (once for the leading surrogate, once for the trailing surrogate), and the second time `codePointAt()` returns _only_ the trailing surrogate, it's better to avoid looping by index.\n\n```\nconst str = \"\\ud83d\\udc0e\\ud83d\\udc71\\u2764\";\n\nfor (let i = 0; i < str.length; i++) {\n  console.log(str.codePointAt(i).toString(16));\n}\n// '1f40e', 'dc0e', '1f471', 'dc71', '2764'\n```\n\nInstead, use a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement) statement or [spread the string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), both of which invoke the string's [`@@iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator), which iterates by code points. Then, use `codePointAt(0)` to get the code point of each element.\n\n```\nfor (const codePoint of str) {\n  console.log(codePoint.codePointAt(0).toString(16));\n}\n// '1f40e', '1f471', '2764'\n\n[...str].map((cp) => cp.codePointAt(0).toString(16));\n// ['1f40e', '1f471', '2764']\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.codepointat](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.codepointat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.codePointAt() - JavaScript | MDN",
    "description": "The codePointAt() method of String values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt",
    "markdown": "# String.prototype.charAt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`charAt()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a new string consisting of the single UTF-16 code unit at the given index.\n\n`charAt()` always indexes the string as a sequence of [UTF-16 code units](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters), so it may return lone surrogates. To get the full Unicode code point at the given index, use [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) and [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index of the character to be returned. [Converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### [Return value](#return_value)\n\nA string representing the character (exactly one UTF-16 code unit) at the specified `index`. If `index` is out of the range of `0` – `str.length - 1`, `charAt()` returns an empty string.\n\n## [Description](#description)\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charAt()` always returns a character whose value is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to get a full character with value greater than `65535`, it is necessary to retrieve not only `charAt(i)`, but also `charAt(i + 1)` (as if manipulating a string with two characters), or to use [`codePointAt(i)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) and [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) instead. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n`charAt()` is very similar to using [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to access a character at the specified index. The main differences are:\n\n*   `charAt()` attempts to convert `index` to an integer, while bracket notation does not, and directly uses `index` as a property name.\n*   `charAt()` returns an empty string if `index` is out of range, while bracket notation returns `undefined`.\n\n## [Examples](#examples)\n\n### [Using charAt()](#using_charat)\n\nThe following example displays characters at different locations in the string `\"Brave new world\"`:\n\n```\nconst anyString = \"Brave new world\";\nconsole.log(`The character at index 0   is '${anyString.charAt()}'`);\n// No index was provided, used 0 as default\n\nconsole.log(`The character at index 0   is '${anyString.charAt(0)}'`);\nconsole.log(`The character at index 1   is '${anyString.charAt(1)}'`);\nconsole.log(`The character at index 2   is '${anyString.charAt(2)}'`);\nconsole.log(`The character at index 3   is '${anyString.charAt(3)}'`);\nconsole.log(`The character at index 4   is '${anyString.charAt(4)}'`);\nconsole.log(`The character at index 999 is '${anyString.charAt(999)}'`);\n```\n\nThese lines display the following:\n\nThe character at index 0   is 'B'\n\nThe character at index 0   is 'B'\nThe character at index 1   is 'r'\nThe character at index 2   is 'a'\nThe character at index 3   is 'v'\nThe character at index 4   is 'e'\nThe character at index 999 is ''\n\n`charAt()` may return lone surrogates, which are not valid Unicode characters.\n\n```\nconst str = \"𠮷𠮾\";\nconsole.log(str.charAt(0)); // \"\\ud842\", which is not a valid Unicode character\nconsole.log(str.charAt(1)); // \"\\udfb7\", which is not a valid Unicode character\n```\n\nTo get the full Unicode code point at the given index, use an indexing method that splits by Unicode code points, such as [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) and [spreading strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) into an array of Unicode code points.\n\n```\nconst str = \"𠮷𠮾\";\nconsole.log(String.fromCodePoint(str.codePointAt(0))); // \"𠮷\"\nconsole.log([...str][0]); // \"𠮷\"\n```\n\n**Note:** Avoid re-implementing the solutions above using `charAt()`. The detection of lone surrogates and their pairing is complex, and built-in APIs may be more performant as they directly use the internal representation of the string. Install a polyfill for the APIs mentioned above if necessary.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.charat](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.charat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.charAt() - JavaScript | MDN",
    "description": "The charAt() method of String values returns a new string consisting of the single UTF-16 code unit at the given index.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf",
    "markdown": "# String.prototype.indexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`indexOf()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nindexOf(searchString)\nindexOf(searchString, position)\n```\n\n### [Parameters](#parameters)\n\n[`searchString`](#searchstring)\n\nSubstring to search for. All values are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `indexOf()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n[`position`](#position) Optional\n\nThe method returns the index of the first occurrence of the specified substring at a position greater than or equal to `position`, which defaults to `0`. If `position` is greater than the length of the calling string, the method doesn't search the calling string at all. If `position` is less than zero, the method behaves as it would if `position` were `0`.\n\n*   `'hello world hello'.indexOf('o', -5)` returns `4` — because it causes the method to behave as if the second argument were `0`, and the first occurrence of `o` at a position greater or equal to `0` is at position `4`.\n*   `'hello world hello'.indexOf('world', 12)` returns `-1` — because, while it's true the substring `world` occurs at index `6`, that position is not greater than or equal to `12`.\n*   `'hello world hello'.indexOf('o', 99)` returns `-1` — because `99` is greater than the length of `hello world hello`, which causes the method to not search the string at all.\n\n### [Return value](#return_value)\n\nThe index of the first occurrence of `searchString` found, or `-1` if not found.\n\n#### Return value when using an empty search string\n\nSearching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument:\n\n```\n\"hello world\".indexOf(\"\"); // returns 0\n\"hello world\".indexOf(\"\", 0); // returns 0\n\"hello world\".indexOf(\"\", 3); // returns 3\n\"hello world\".indexOf(\"\", 8); // returns 8\n```\n\nHowever, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length:\n\n```\n\"hello world\".indexOf(\"\", 11); // returns 11\n\"hello world\".indexOf(\"\", 13); // returns 11\n\"hello world\".indexOf(\"\", 22); // returns 11\n```\n\nIn the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string.\n\n## [Description](#description)\n\nStrings are zero-indexed: The index of a string's first character is `0`, and the index of a string's last character is the length of the string minus 1.\n\n```\n\"Blue Whale\".indexOf(\"Blue\"); // returns  0\n\"Blue Whale\".indexOf(\"Blute\"); // returns -1\n\"Blue Whale\".indexOf(\"Whale\", 0); // returns  5\n\"Blue Whale\".indexOf(\"Whale\", 5); // returns  5\n\"Blue Whale\".indexOf(\"Whale\", 7); // returns -1\n\"Blue Whale\".indexOf(\"\"); // returns  0\n\"Blue Whale\".indexOf(\"\", 9); // returns  9\n\"Blue Whale\".indexOf(\"\", 10); // returns 10\n\"Blue Whale\".indexOf(\"\", 11); // returns 10\n```\n\nThe `indexOf()` method is case sensitive. For example, the following expression returns `-1`:\n\n```\n\"Blue Whale\".indexOf(\"blue\"); // returns -1\n```\n\n### [Checking occurrences](#checking_occurrences)\n\nWhen checking if a specific substring occurs within a string, the correct way to check is test whether the return value is `-1`:\n\n```\n\"Blue Whale\".indexOf(\"Blue\") !== -1; // true; found 'Blue' in 'Blue Whale'\n\"Blue Whale\".indexOf(\"Bloe\") !== -1; // false; no 'Bloe' in 'Blue Whale'\n```\n\n## [Examples](#examples)\n\n### [Using indexOf()](#using_indexof)\n\nThe following example uses `indexOf()` to locate substrings in the string `\"Brave new world\"`.\n\n```\nconst str = \"Brave new world\";\n\nconsole.log(str.indexOf(\"w\")); // 8\nconsole.log(str.indexOf(\"new\")); // 6\n```\n\n### [indexOf() and case-sensitivity](#indexof_and_case-sensitivity)\n\nThe following example defines two string variables.\n\nThe variables contain the same string, except that the second string contains uppercase letters. The first [`console.log()`](https://developer.mozilla.org/en-US/docs/Web/API/console/log_static \"console.log()\") method displays `19`. But because the `indexOf()` method is case sensitive, the string `\"cheddar\"` is not found in `myCapString`, so the second `console.log()` method displays `-1`.\n\n```\nconst myString = \"brie, pepper jack, cheddar\";\nconst myCapString = \"Brie, Pepper Jack, Cheddar\";\n\nconsole.log(myString.indexOf(\"cheddar\")); // 19\nconsole.log(myCapString.indexOf(\"cheddar\")); // -1\n```\n\n### [Using indexOf() to count occurrences of a letter in a string](#using_indexof_to_count_occurrences_of_a_letter_in_a_string)\n\nThe following example sets `count` to the number of occurrences of the letter `e` in the string `str`:\n\n```\nconst str = \"To be, or not to be, that is the question.\";\nlet count = 0;\nlet position = str.indexOf(\"e\");\n\nwhile (position !== -1) {\n  count++;\n  position = str.indexOf(\"e\", position + 1);\n}\n\nconsole.log(count); // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.indexof](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.indexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.indexOf() - JavaScript | MDN",
    "description": "The indexOf() method of String values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf",
    "markdown": "# String.prototype.lastIndexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`lastIndexOf()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nlastIndexOf(searchString)\nlastIndexOf(searchString, position)\n```\n\n### [Parameters](#parameters)\n\n[`searchString`](#searchstring)\n\nSubstring to search for. All values are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `lastIndexOf()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n[`position`](#position) Optional\n\nThe method returns the index of the last occurrence of the specified substring at a position less than or equal to `position`, which defaults to `+Infinity`. If `position` is greater than the length of the calling string, the method searches the entire string. If `position` is less than `0`, the behavior is the same as for `0` — that is, the method looks for the specified substring only at index `0`.\n\n*   `'hello world hello'.lastIndexOf('world', 4)` returns `-1` — because, while the substring `world` does occurs at index `6`, that position is not less than or equal to `4`.\n*   `'hello world hello'.lastIndexOf('hello', 99)` returns `12` — because the last occurrence of `hello` at a position less than or equal to `99` is at position `12`.\n*   `'hello world hello'.lastIndexOf('hello', 0)` and `'hello world hello'.lastIndexOf('hello', -5)` both return `0` — because both cause the method to only look for `hello` at index `0`.\n\n### [Return value](#return_value)\n\nThe index of the last occurrence of `searchString` found, or `-1` if not found.\n\n## [Description](#description)\n\nStrings are zero-indexed: The index of a string's first character is `0`, and the index of a string's last character is the length of the string minus 1.\n\n```\n\"canal\".lastIndexOf(\"a\"); // returns 3\n\"canal\".lastIndexOf(\"a\", 2); // returns 1\n\"canal\".lastIndexOf(\"a\", 0); // returns -1\n\"canal\".lastIndexOf(\"x\"); // returns -1\n\"canal\".lastIndexOf(\"c\", -5); // returns 0\n\"canal\".lastIndexOf(\"c\", 0); // returns 0\n\"canal\".lastIndexOf(\"\"); // returns 5\n\"canal\".lastIndexOf(\"\", 2); // returns 2\n```\n\n### [Case-sensitivity](#case-sensitivity)\n\nThe `lastIndexOf()` method is case sensitive. For example, the following expression returns `-1`:\n\n```\n\"Blue Whale, Killer Whale\".lastIndexOf(\"blue\"); // returns -1\n```\n\n## [Examples](#examples)\n\n### [Using indexOf() and lastIndexOf()](#using_indexof_and_lastindexof)\n\nThe following example uses [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) and `lastIndexOf()` to locate values in the string `\"Brave, Brave New World\"`.\n\n```\nconst anyString = \"Brave, Brave New World\";\n\nconsole.log(anyString.indexOf(\"Brave\")); // 0\nconsole.log(anyString.lastIndexOf(\"Brave\")); // 7\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.lastindexof](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.lastindexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.lastIndexOf() - JavaScript | MDN",
    "description": "The lastIndexOf() method of String values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",
    "markdown": "# String.prototype.startsWith() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`startsWith()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values determines whether this string begins with the characters of a specified string, returning `true` or `false` as appropriate.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nstartsWith(searchString)\nstartsWith(searchString, position)\n```\n\n### [Parameters](#parameters)\n\n[`searchString`](#searchstring)\n\nThe characters to be searched for at the start of this string. Cannot [be a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `startsWith()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n[`position`](#position) Optional\n\nThe start position at which `searchString` is expected to be found (the index of `searchString`'s first character). Defaults to `0`.\n\n### [Return value](#return_value)\n\n**`true`** if the given characters are found at the beginning of the string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `searchString` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## [Description](#description)\n\nThis method lets you determine whether or not a string begins with another string. This method is case-sensitive.\n\n## [Examples](#examples)\n\n### [Using startsWith()](#using_startswith)\n\n```\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.startsWith(\"To be\")); // true\nconsole.log(str.startsWith(\"not to be\")); // false\nconsole.log(str.startsWith(\"not to be\", 10)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.startswith](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.startswith) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.startsWith() - JavaScript | MDN",
    "description": "The startsWith() method of String values determines whether this string begins with the characters of a specified string, returning true or false as appropriate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
    "markdown": "# String.prototype.endsWith() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`endsWith()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values determines whether a string ends with the characters of this string, returning `true` or `false` as appropriate.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nendsWith(searchString)\nendsWith(searchString, endPosition)\n```\n\n### [Parameters](#parameters)\n\n[`searchString`](#searchstring)\n\nThe characters to be searched for at the end of `str`. Cannot [be a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `endsWith()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n[`endPosition`](#endposition) Optional\n\nThe end position at which `searchString` is expected to be found (the index of `searchString`'s last character plus 1). Defaults to `str.length`.\n\n### [Return value](#return_value)\n\n**`true`** if the given characters are found at the end of the string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `searchString` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## [Description](#description)\n\nThis method lets you determine whether or not a string ends with another string. This method is case-sensitive.\n\n## [Examples](#examples)\n\n### [Using endsWith()](#using_endswith)\n\n```\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.endsWith(\"question.\")); // true\nconsole.log(str.endsWith(\"to be\")); // false\nconsole.log(str.endsWith(\"to be\", 19)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.endswith](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.endswith) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.endsWith() - JavaScript | MDN",
    "description": "The endsWith() method of String values determines whether a string ends with the characters of this string, returning true or false as appropriate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",
    "markdown": "# String.prototype.charCodeAt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`charCodeAt()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns an integer between `0` and `65535` representing the UTF-16 code unit at the given index.\n\n`charCodeAt()` always indexes the string as a sequence of [UTF-16 code units](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters), so it may return lone surrogates. To get the full Unicode code point at the given index, use [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index of the character to be returned. [Converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### [Return value](#return_value)\n\nAn integer between `0` and `65535` representing the UTF-16 code unit value of the character at the specified `index`. If `index` is out of range of `0` – `str.length - 1`, `charCodeAt()` returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n## [Description](#description)\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charCodeAt()` always returns a value that is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to get a full character with value greater than `65535`, it is necessary to retrieve not only `charCodeAt(i)`, but also `charCodeAt(i + 1)` (as if manipulating a string with two characters), or to use [`codePointAt(i)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) instead. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Examples](#examples)\n\n### [Using charCodeAt()](#using_charcodeat)\n\nThe following example returns `65`, the Unicode value for A.\n\n```\n\"ABC\".charCodeAt(0); // returns 65\n```\n\n`charCodeAt()` may return lone surrogates, which are not valid Unicode characters.\n\n```\nconst str = \"𠮷𠮾\";\nconsole.log(str.charCodeAt(0)); // 55362, or d842, which is not a valid Unicode character\nconsole.log(str.charCodeAt(1)); // 57271, or dfb7, which is not a valid Unicode character\n```\n\nTo get the full Unicode code point at the given index, use [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt).\n\n```\nconst str = \"𠮷𠮾\";\nconsole.log(str.codePointAt(0)); // 134071\n```\n\n**Note:** Avoid re-implementing `codePointAt()` using `charCodeAt()`. The translation from UTF-16 surrogates to Unicode code points is complex, and `codePointAt()` may be more performant as it directly uses the internal representation of the string. Install a polyfill for `codePointAt()` if necessary.\n\nBelow is a possible algorithm to convert a pair of UTF-16 code units into a Unicode code point, adapted from the [Unicode FAQ](https://unicode.org/faq/utf_bom.html#utf16-3):\n\n```\n// constants\nconst LEAD_OFFSET = 0xd800 - (0x10000 >> 10);\nconst SURROGATE_OFFSET = 0x10000 - (0xd800 << 10) - 0xdc00;\n\nfunction utf16ToUnicode(lead, trail) {\n  return (lead << 10) + trail + SURROGATE_OFFSET;\n}\nfunction unicodeToUTF16(codePoint) {\n  const lead = LEAD_OFFSET + (codePoint >> 10);\n  const trail = 0xdc00 + (codePoint & 0x3ff);\n  return [lead, trail];\n}\n\nconst str = \"𠮷\";\nconsole.log(utf16ToUnicode(str.charCodeAt(0), str.charCodeAt(1))); // 134071\nconsole.log(str.codePointAt(0)); // 134071\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.charcodeat](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.charcodeat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.charCodeAt() - JavaScript | MDN",
    "description": "The charCodeAt() method of String values returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",
    "markdown": "# String.prototype.includes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`includes()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values performs a case-sensitive search to determine whether a given string may be found within this string, returning `true` or `false` as appropriate.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nincludes(searchString)\nincludes(searchString, position)\n```\n\n### [Parameters](#parameters)\n\n[`searchString`](#searchstring)\n\nA string to be searched for within `str`. Cannot [be a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `includes()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n[`position`](#position) Optional\n\nThe position within the string at which to begin searching for `searchString`. (Defaults to `0`.)\n\n### [Return value](#return_value)\n\n**`true`** if the search string is found anywhere within the given string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `searchString` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## [Description](#description)\n\nThis method lets you determine whether or not a string includes another string.\n\n### [Case-sensitivity](#case-sensitivity)\n\nThe `includes()` method is case sensitive. For example, the following expression returns `false`:\n\n```\n\"Blue Whale\".includes(\"blue\"); // returns false\n```\n\nYou can work around this constraint by transforming both the original string and the search string to all lowercase:\n\n```\n\"Blue Whale\".toLowerCase().includes(\"blue\"); // returns true\n```\n\n## [Examples](#examples)\n\n### [Using includes()](#using_includes)\n\n```\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.includes(\"To be\")); // true\nconsole.log(str.includes(\"question\")); // true\nconsole.log(str.includes(\"nonexistent\")); // false\nconsole.log(str.includes(\"To be\", 1)); // false\nconsole.log(str.includes(\"TO BE\")); // false\nconsole.log(str.includes(\"\")); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.includes](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.includes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.includes() - JavaScript | MDN",
    "description": "The includes() method of String values performs a case-sensitive search to determine whether a given string may be found within this string, returning true or false as appropriate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat",
    "markdown": "# String.prototype.concat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`concat()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values concatenates the string arguments to this string and returns a new string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nconcat()\nconcat(str1)\nconcat(str1, str2)\nconcat(str1, str2, /* …, */ strN)\n```\n\n### [Parameters](#parameters)\n\n[`str1`](#str1), …, `strN`\n\nOne or more strings to concatenate to `str`.\n\n### [Return value](#return_value)\n\nA new string containing the combined text of the strings provided.\n\n## [Description](#description)\n\nThe `concat()` function concatenates the string arguments to the calling string and returns a new string.\n\nIf the arguments are not of the type string, they are converted to string values before concatenating.\n\nThe `concat()` method is very similar to the [addition/string concatenation operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) (`+`, `+=`), except that `concat()` [coerces its arguments directly to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), while addition coerces its operands to primitives first. For more information, see the reference page for the [`+` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition).\n\n## [Examples](#examples)\n\n### [Using concat()](#using_concat)\n\nThe following example combines strings into a new string.\n\n```\nconst hello = \"Hello, \";\nconsole.log(hello.concat(\"Kevin\", \". Have a nice day.\"));\n// Hello, Kevin. Have a nice day.\n\nconst greetList = [\"Hello\", \" \", \"Venkat\", \"!\"];\n\"\".concat(...greetList); // \"Hello Venkat!\"\n\n\"\".concat({}); // \"[object Object]\"\n\"\".concat([]); // \"\"\n\"\".concat(null); // \"null\"\n\"\".concat(true); // \"true\"\n\"\".concat(4, 5); // \"45\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.concat](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.concat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.concat() - JavaScript | MDN",
    "description": "The concat() method of String values concatenates\n  the string arguments to this string and returns a new string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
    "markdown": "# String.prototype.slice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`slice()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values extracts a section of this string and returns it as a new string, without modifying the original string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nslice(indexStart)\nslice(indexStart, indexEnd)\n```\n\n### [Parameters](#parameters)\n\n[`indexStart`](#indexstart)\n\nThe index of the first character to include in the returned substring.\n\n[`indexEnd`](#indexend) Optional\n\nThe index of the first character to exclude from the returned substring.\n\n### [Return value](#return_value)\n\nA new string containing the extracted section of the string.\n\n## [Description](#description)\n\n`slice()` extracts the text from one string and returns a new string.\n\n`slice()` extracts up to but not including `indexEnd`. For example, `str.slice(4, 8)` extracts the fifth character through the eighth character (characters indexed `4`, `5`, `6`, and `7`):\n\n              indexStart        indexEnd\n                  ↓               ↓\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| T | h | e |   | m | i | r | r | o | r |\n\n                  m   i   r   r\n                 \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n                      ↑\n                    Result\n\n*   If `indexStart >= str.length`, an empty string is returned.\n*   If `indexStart < 0`, the index is counted from the end of the string. More formally, in this case, the substring starts at `max(indexStart + str.length, 0)`.\n*   If `indexStart` is omitted, undefined, or cannot be [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), it's treated as `0`.\n*   If `indexEnd` is omitted, undefined, or cannot be [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), or if `indexEnd >= str.length`, `slice()` extracts to the end of the string.\n*   If `indexEnd < 0`, the index is counted from the end of the string. More formally, in this case, the substring ends at `max(indexEnd + str.length, 0)`.\n*   If `indexEnd <= indexStart` after normalizing negative values (i.e. `indexEnd` represents a character that's before `indexStart`), an empty string is returned.\n\n## [Examples](#examples)\n\n### [Using slice() to create a new string](#using_slice_to_create_a_new_string)\n\nThe following example uses `slice()` to create a new string.\n\n```\nconst str1 = \"The morning is upon us.\"; // The length of str1 is 23.\nconst str2 = str1.slice(1, 8);\nconst str3 = str1.slice(4, -2);\nconst str4 = str1.slice(12);\nconst str5 = str1.slice(30);\nconsole.log(str2); // he morn\nconsole.log(str3); // morning is upon u\nconsole.log(str4); // is upon us.\nconsole.log(str5); // \"\"\n```\n\n### [Using slice() with negative indexes](#using_slice_with_negative_indexes)\n\nThe following example uses `slice()` with negative indexes.\n\n```\nconst str = \"The morning is upon us.\";\nstr.slice(-3); // 'us.'\nstr.slice(-3, -1); // 'us'\nstr.slice(0, -1); // 'The morning is upon us'\nstr.slice(4, -1); // 'morning is upon us'\n```\n\nThis example counts backwards from the end of the string by `11` to find the start index and forwards from the start of the string by `16` to find the end index.\n\n```\nconsole.log(str.slice(-11, 16)); // \"is u\"\n```\n\nHere it counts forwards from the start by `11` to find the start index and backwards from the end by `7` to find the end index.\n\n```\nconsole.log(str.slice(11, -7)); // \" is u\"\n```\n\nThese arguments count backwards from the end by `5` to find the start index and backwards from the end by `1` to find the end index.\n\n```\nconsole.log(str.slice(-5, -1)); // \"n us\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.slice](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.slice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.slice() - JavaScript | MDN",
    "description": "The slice() method of String values extracts a section of this string and\n  returns it as a new string, without modifying the original string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr",
    "markdown": "# String.prototype.substr() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`substr()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a portion of this string, starting at the specified index and extending for a given number of characters afterwards.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsubstr(start)\nsubstr(start, length)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start)\n\nThe index of the first character to include in the returned substring.\n\n[`length`](#length) Optional\n\nThe number of characters to extract.\n\n### [Return value](#return_value)\n\nA new string containing the specified part of the given string.\n\n## [Description](#description)\n\nA string's `substr()` method extracts `length` characters from the string, counting from the `start` index.\n\n*   If `start >= str.length`, an empty string is returned.\n*   If `start < 0`, the index starts counting from the end of the string. More formally, in this case the substring starts at `max(start + str.length, 0)`.\n*   If `start` is omitted or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), it's treated as `0`.\n*   If `length` is omitted or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), or if `start + length >= str.length`, `substr()` extracts characters to the end of the string.\n*   If `length < 0`, an empty string is returned.\n*   For both `start` and `length`, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is treated as `0`.\n\nAlthough you are encouraged to avoid using `substr()`, there is no trivial way to migrate `substr()` to either `slice()` or `substring()` in legacy code without essentially writing a polyfill for `substr()`. For example, `str.substr(a, l)`, `str.slice(a, a + l)`, and `str.substring(a, a + l)` all have different results when `str = \"01234\", a = 1, l = -2` — `substr()` returns an empty string, `slice()` returns `\"123\"`, while `substring()` returns `\"0\"`. The actual refactoring path depends on the knowledge of the range of `a` and `l`.\n\n## [Examples](#examples)\n\n### [Using substr()](#using_substr)\n\n```\nconst aString = \"Mozilla\";\n\nconsole.log(aString.substr(0, 1)); // 'M'\nconsole.log(aString.substr(1, 0)); // ''\nconsole.log(aString.substr(-1, 1)); // 'a'\nconsole.log(aString.substr(1, -1)); // ''\nconsole.log(aString.substr(-3)); // 'lla'\nconsole.log(aString.substr(1)); // 'ozilla'\nconsole.log(aString.substr(-20, 2)); // 'Mo'\nconsole.log(aString.substr(20, 2)); // ''\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.substr](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.substr) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.substr() - JavaScript | MDN",
    "description": "The substr() method of String values returns a portion of this string, starting at the specified index and extending for a given number of characters afterwards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll",
    "markdown": "# String.prototype.replaceAll() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`replaceAll()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a new string with all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a string or a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), and the `replacement` can be a string or a function to be called for each match. The original string is left unchanged.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreplaceAll(pattern, replacement)\n```\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nCan be a string or an object with a [`Symbol.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method — the typical example being a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). Any value that doesn't have the `Symbol.replace` method will be coerced to a string.\n\nIf `pattern` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes), then it must have the global (`g`) flag set, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n\n[`replacement`](#replacement)\n\nCan be a string or a function. The replacement has the same semantics as that of [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace).\n\n### [Return value](#return_value)\n\nA new string, with all matches of a pattern replaced by a replacement.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `pattern` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes) that does not have the global (`g`) flag set (its [`flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) property does not contain `\"g\"`).\n\n## [Description](#description)\n\nThis method does not mutate the string value it's called on. It returns a new string.\n\nUnlike [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), this method would replace all occurrences of a string, not just the first one. This is especially useful if the string is not statically known, as calling the [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor without escaping special characters may unintentionally change its semantics.\n\n```\nfunction unsafeRedactName(text, name) {\n  return text.replace(new RegExp(name, \"g\"), \"[REDACTED]\");\n}\nfunction safeRedactName(text, name) {\n  return text.replaceAll(name, \"[REDACTED]\");\n}\n\nconst report =\n  \"A hacker called ha.*er used special characters in their name to breach the system.\";\n\nconsole.log(unsafeRedactName(report, \"ha.*er\")); // \"A [REDACTED]s in their name to breach the system.\"\nconsole.log(safeRedactName(report, \"ha.*er\")); // \"A hacker called [REDACTED] used special characters in their name to breach the system.\"\n```\n\nIf `pattern` is an object with a [`Symbol.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method (including `RegExp` objects), that method is called with the target string and `replacement` as arguments. Its return value becomes the return value of `replaceAll()`. In this case the behavior of `replaceAll()` is entirely encoded by the `@@replace` method, and therefore will have the same result as `replace()` (apart from the extra input validation that the regex is global).\n\nIf the `pattern` is an empty string, the replacement will be inserted in between every UTF-16 code unit, similar to [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) behavior.\n\n```\n\"xxx\".replaceAll(\"\", \"_\"); // \"_x_x_x_\"\n```\n\nFor more information about how regex properties (especially the [sticky](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flag) interact with `replaceAll()`, see [`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\n## [Examples](#examples)\n\n### [Using replaceAll()](#using_replaceall)\n\n```\n\"aabbcc\".replaceAll(\"b\", \".\");\n// 'aa..cc'\n```\n\n### [Non-global regex throws](#non-global_regex_throws)\n\nWhen using a regular expression search value, it must be global. This won't work:\n\n```\n\"aabbcc\".replaceAll(/b/, \".\");\n// TypeError: replaceAll must be called with a global RegExp\n```\n\nThis will work:\n\n```\n\"aabbcc\".replaceAll(/b/g, \".\");\n(\"aa..cc\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.replaceall](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.replaceall) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.replaceAll() - JavaScript | MDN",
    "description": "The replaceAll() method of String values returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
    "markdown": "# String.prototype.replace() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`replace()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a new string with one, some, or all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a string or a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), and the `replacement` can be a string or a function called for each match. If `pattern` is a string, only the first occurrence will be replaced. The original string is left unchanged.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreplace(pattern, replacement)\n```\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nCan be a string or an object with a [`Symbol.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method — the typical example being a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). Any value that doesn't have the `Symbol.replace` method will be coerced to a string.\n\n[`replacement`](#replacement)\n\nCan be a string or a function.\n\n*   If it's a string, it will replace the substring matched by `pattern`. A number of special replacement patterns are supported; see the [Specifying a string as the replacement](#specifying_a_string_as_the_replacement) section below.\n*   If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the [Specifying a function as the replacement](#specifying_a_function_as_the_replacement) section below.\n\n### [Return value](#return_value)\n\nA new string, with one, some, or all matches of the pattern replaced by the specified replacement.\n\n## [Description](#description)\n\nThis method does not mutate the string value it's called on. It returns a new string.\n\nA string pattern will only be replaced once. To perform a global search and replace, use a regular expression with the `g` flag, or use [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) instead.\n\nIf `pattern` is an object with a [`Symbol.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method (including `RegExp` objects), that method is called with the target string and `replacement` as arguments. Its return value becomes the return value of `replace()`. In this case the behavior of `replace()` is entirely encoded by the `@@replace` method — for example, any mention of \"capturing groups\" in the description below is actually functionality provided by [`RegExp.prototype[@@replace]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\nIf the `pattern` is an empty string, the replacement is prepended to the start of the string.\n\n```\n\"xxx\".replace(\"\", \"_\"); // \"_xxx\"\n```\n\nA regexp with the `g` flag is the only case where `replace()` replaces more than once. For more information about how regex properties (especially the [sticky](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flag) interact with `replace()`, see [`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\n### [Specifying a string as the replacement](#specifying_a_string_as_the_replacement)\n\nThe replacement string can include the following special replacement patterns:\n\n| Pattern | Inserts |\n| --- | --- |\n| `$$` | Inserts a `\"$\"`. |\n| `$&` | Inserts the matched substring. |\n| `` $` `` | Inserts the portion of the string that precedes the matched substring. |\n| `$'` | Inserts the portion of the string that follows the matched substring. |\n| `$n` | Inserts the `n`th (`1`\\-indexed) capturing group where `n` is a positive integer less than 100. |\n| `$<Name>` | Inserts the named capturing group where `Name` is the group name. |\n\n`$n` and `$<Name>` are only available if the `pattern` argument is a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object. If the `pattern` is a string, or if the corresponding capturing group isn't present in the regex, then the pattern will be replaced as a literal. If the group is present but isn't matched (because it's part of a disjunction), it will be replaced with an empty string.\n\n```\n\"foo\".replace(/(f)/, \"$2\");\n// \"$2oo\"; the regex doesn't have the second group\n\n\"foo\".replace(\"f\", \"$1\");\n// \"$1oo\"; the pattern is a string, so it doesn't have any groups\n\n\"foo\".replace(/(f)|(g)/, \"$2\");\n// \"oo\"; the second group exists but isn't matched\n```\n\n### [Specifying a function as the replacement](#specifying_a_function_as_the_replacement)\n\nYou can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n**Note:** The above-mentioned special replacement patterns do _not_ apply for strings returned from the replacer function.\n\nThe function has the following signature:\n\n```\nfunction replacer(match, p1, p2, /* …, */ pN, offset, string, groups) {\n  return replacement;\n}\n```\n\nThe arguments to the function are as follows:\n\n[`match`](#match)\n\nThe matched substring. (Corresponds to `$&` above.)\n\n[`p1, p2, …, pN`](#p1_p2_%E2%80%A6_pn)\n\nThe `n`th string found by a capture group (including named capturing groups), provided the first argument to `replace()` is a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object. (Corresponds to `$1`, `$2`, etc. above.) For example, if the `pattern` is `/(\\a+)(\\b+)/`, then `p1` is the match for `\\a+`, and `p2` is the match for `\\b+`. If the group is part of a disjunction (e.g. `\"abc\".replace(/(a)|(b)/, replacer)`), the unmatched alternative will be `undefined`.\n\n[`offset`](#offset)\n\nThe offset of the matched substring within the whole string being examined. For example, if the whole string was `'abcd'`, and the matched substring was `'bc'`, then this argument will be `1`.\n\n[`string`](#string)\n\nThe whole string being examined.\n\n[`groups`](#groups)\n\nAn object whose keys are the used group names, and whose values are the matched portions (`undefined` if not matched). Only present if the `pattern` contains at least one named capturing group.\n\nThe exact number of arguments depends on whether the first argument is a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object — and, if so, how many capture groups it has.\n\nThe following example will set `newString` to `'abc - 12345 - #$*%'`:\n\n```\nfunction replacer(match, p1, p2, p3, offset, string) {\n  // p1 is non-digits, p2 digits, and p3 non-alphanumerics\n  return [p1, p2, p3].join(\" - \");\n}\nconst newString = \"abc12345#$*%\".replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer);\nconsole.log(newString); // abc - 12345 - #$*%\n```\n\nThe function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.\n\n## [Examples](#examples)\n\n### [Defining the regular expression in replace()](#defining_the_regular_expression_in_replace)\n\nIn the following example, the regular expression is defined in `replace()` and includes the ignore case flag.\n\n```\nconst str = \"Twas the night before Xmas...\";\nconst newstr = str.replace(/xmas/i, \"Christmas\");\nconsole.log(newstr); // Twas the night before Christmas...\n```\n\nThis logs `'Twas the night before Christmas...'`.\n\n### [Using the global and ignoreCase flags with replace()](#using_the_global_and_ignorecase_flags_with_replace)\n\nGlobal replace can only be done with a regular expression. In the following example, the regular expression includes the [global and ignore case flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) which permits `replace()` to replace each occurrence of `'apples'` in the string with `'oranges'`.\n\n```\nconst re = /apples/gi;\nconst str = \"Apples are round, and apples are juicy.\";\nconst newstr = str.replace(re, \"oranges\");\nconsole.log(newstr); // oranges are round, and oranges are juicy.\n```\n\nThis logs `'oranges are round, and oranges are juicy'`.\n\n### [Switching words in a string](#switching_words_in_a_string)\n\nThe following script switches the words in the string. For the replacement text, the script uses [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) and the `$1` and `$2` replacement patterns.\n\n```\nconst re = /(\\w+)\\s(\\w+)/;\nconst str = \"Maria Cruz\";\nconst newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr); // Cruz, Maria\n```\n\nThis logs `'Cruz, Maria'`.\n\n### [Using an inline function that modifies the matched characters](#using_an_inline_function_that_modifies_the_matched_characters)\n\nIn this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.\n\nThe replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.\n\n```\nfunction styleHyphenFormat(propertyName) {\n  function upperToHyphenLower(match, offset, string) {\n    return (offset > 0 ? \"-\" : \"\") + match.toLowerCase();\n  }\n  return propertyName.replace(/[A-Z]/g, upperToHyphenLower);\n}\n```\n\nGiven `styleHyphenFormat('borderTop')`, this returns `'border-top'`.\n\nBecause we want to further transform the _result_ of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) method. If we had tried to do this using the match without a function, the [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) would have no effect.\n\n```\n// Won't work\nconst newString = propertyName.replace(/[A-Z]/g, \"-\" + \"$&\".toLowerCase());\n```\n\nThis is because `'$&'.toLowerCase()` would first be evaluated as a string literal (resulting in the same `'$&'`) before using the characters as a pattern.\n\n### [Replacing a Fahrenheit degree with its Celsius equivalent](#replacing_a_fahrenheit_degree_with_its_celsius_equivalent)\n\nThe following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with `\"F\"`. The function returns the Celsius number ending with `\"C\"`. For example, if the input number is `\"212F\"`, the function returns `\"100C\"`. If the number is `\"0F\"`, the function returns `\"-17.77777777777778C\"`.\n\nThe regular expression `test` checks for any number that ends with `F`. The number of Fahrenheit degrees is accessible to the function through its second parameter, `p1`. The function sets the Celsius number based on the number of Fahrenheit degrees passed in a string to the `f2c()` function. `f2c()` then returns the Celsius number. This function approximates Perl's `s///e` flag.\n\n```\nfunction f2c(x) {\n  function convert(str, p1, offset, s) {\n    return `${((p1 - 32) * 5) / 9}C`;\n  }\n  const s = String(x);\n  const test = /(-?\\d+(?:\\.\\d*)?)F\\b/g;\n  return s.replace(test, convert);\n}\n```\n\n### [Making a generic replacer](#making_a_generic_replacer)\n\nSuppose we want to create a replacer that appends the offset data to every matched string. Because the replacer function already receives the `offset` parameter, it will be trivial if the regex is statically known.\n\n```\n\"abcd\".replace(/(bc)/, (match, p1, offset) => `${match} (${offset}) `);\n// \"abc (1) d\"\n```\n\nHowever, this replacer would be hard to generalize if we want it to work with any regex pattern. The replacer is _variadic_ — the number of arguments it receives depends on the number of capturing groups present. We can use [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), but it would also collect `offset`, `string`, etc. into the array. The fact that `groups` may or may not be passed depending on the identity of the regex would also make it hard to generically know which argument corresponds to the `offset`.\n\n```\nfunction addOffset(match, ...args) {\n  const offset = args.at(-2);\n  return `${match} (${offset}) `;\n}\n\nconsole.log(\"abcd\".replace(/(bc)/, addOffset)); // \"abc (1) d\"\nconsole.log(\"abcd\".replace(/(?<group>bc)/, addOffset)); // \"abc (abcd) d\"\n```\n\nThe `addOffset` example above doesn't work when the regex contains a named group, because in this case `args.at(-2)` would be the `string` instead of the `offset`.\n\nInstead, you need to extract the last few arguments based on type, because `groups` is an object while `string` is a string.\n\n```\nfunction addOffset(match, ...args) {\n  const hasNamedGroups = typeof args.at(-1) === \"object\";\n  const offset = hasNamedGroups ? args.at(-3) : args.at(-2);\n  return `${match} (${offset}) `;\n}\n\nconsole.log(\"abcd\".replace(/(bc)/, addOffset)); // \"abc (1) d\"\nconsole.log(\"abcd\".replace(/(?<group>bc)/, addOffset)); // \"abc (1) d\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.replace](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.replace) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.replace() - JavaScript | MDN",
    "description": "The replace() method of String values returns a new string with one, some, or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",
    "markdown": "# String.prototype.matchAll() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`matchAll()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns an iterator of all results matching this string against a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions), including [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`regexp`](#regexp)\n\nA regular expression object, or any object that has a [`Symbol.matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll) method.\n\nIf `regexp` is not a `RegExp` object and does not have a `Symbol.matchAll` method, it is implicitly converted to a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) by using `new RegExp(regexp, 'g')`.\n\nIf `regexp` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes), then it must have the global (`g`) flag set, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n\n### [Return value](#return_value)\n\nAn [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) (which is not restartable) of matches or an empty iterator if no matches are found. Each value yielded by the iterator is an array with the same shape as the return value of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `regexp` [is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes) that does not have the global (`g`) flag set (its [`flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) property does not contain `\"g\"`).\n\n## [Description](#description)\n\nThe implementation of `String.prototype.matchAll` itself is very simple — it simply calls the `Symbol.matchAll` method of the argument with the string as the first parameter (apart from the extra input validation that the regex is global). The actual implementation comes from [`RegExp.prototype[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll).\n\n## [Examples](#examples)\n\n### [Regexp.prototype.exec() and matchAll()](#regexp.prototype.exec_and_matchall)\n\nWithout `matchAll()`, it's possible to use calls to [`regexp.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) (and regexes with the `g` flag) in a loop to obtain all the matches:\n\n```\nconst regexp = /foo[a-z]*/g;\nconst str = \"table football, foosball\";\nlet match;\n\nwhile ((match = regexp.exec(str)) !== null) {\n  console.log(\n    `Found ${match[0]} start=${match.index} end=${regexp.lastIndex}.`,\n  );\n}\n// Found football start=6 end=14.\n// Found foosball start=16 end=24.\n```\n\nWith `matchAll()` available, you can avoid the [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loop and `exec` with `g`. Instead, you get an iterator to use with the more convenient [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), [array spreading](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), or [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) constructs:\n\n```\nconst regexp = /foo[a-z]*/g;\nconst str = \"table football, foosball\";\nconst matches = str.matchAll(regexp);\n\nfor (const match of matches) {\n  console.log(\n    `Found ${match[0]} start=${match.index} end=${\n      match.index + match[0].length\n    }.`,\n  );\n}\n// Found football start=6 end=14.\n// Found foosball start=16 end=24.\n\n// matches iterator is exhausted after the for...of iteration\n// Call matchAll again to create a new iterator\nArray.from(str.matchAll(regexp), (m) => m[0]);\n// [ \"football\", \"foosball\" ]\n```\n\n`matchAll` will throw an exception if the `g` flag is missing.\n\n```\nconst regexp = /[a-c]/;\nconst str = \"abc\";\nstr.matchAll(regexp);\n// TypeError\n```\n\n`matchAll` internally makes a clone of the `regexp` — so, unlike [`regexp.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), `lastIndex` does not change as the string is scanned.\n\n```\nconst regexp = /[a-c]/g;\nregexp.lastIndex = 1;\nconst str = \"abc\";\nArray.from(str.matchAll(regexp), (m) => `${regexp.lastIndex} ${m[0]}`);\n// [ \"1 b\", \"1 c\" ]\n```\n\nHowever, this means that unlike using [`regexp.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) in a loop, you can't mutate `lastIndex` to make the regex advance or rewind.\n\n### [Better access to capturing groups (than String.prototype.match())](#better_access_to_capturing_groups_than_string.prototype.match)\n\nAnother compelling reason for `matchAll` is the improved access to capture groups.\n\nCapture groups are ignored when using [`match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) with the global `g` flag:\n\n```\nconst regexp = /t(e)(st(\\d?))/g;\nconst str = \"test1test2\";\n\nstr.match(regexp); // ['test1', 'test2']\n```\n\nUsing `matchAll`, you can access capture groups easily:\n\n```\nconst array = [...str.matchAll(regexp)];\n\narray[0];\n// ['test1', 'e', 'st1', '1', index: 0, input: 'test1test2', length: 4]\narray[1];\n// ['test2', 'e', 'st2', '2', index: 5, input: 'test1test2', length: 4]\n```\n\n### [Using matchAll() with a non-RegExp implementing @@matchAll](#using_matchall_with_a_non-regexp_implementing_matchall)\n\nIf an object has a `Symbol.matchAll` method, it can be used as a custom matcher. The return value of `Symbol.matchAll` becomes the return value of `matchAll()`.\n\n```\nconst str = \"Hmm, this is interesting.\";\n\nstr.matchAll({\n  [Symbol.matchAll](str) {\n    return [[\"Yes, it's interesting.\"]];\n  },\n}); // returns [[\"Yes, it's interesting.\"]]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.matchall](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.matchall) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.matchAll() - JavaScript | MDN",
    "description": "The matchAll() method of String values returns an iterator of all results matching this string against a regular expression, including capturing groups.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",
    "markdown": "# String.prototype.substring() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`substring()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsubstring(indexStart)\nsubstring(indexStart, indexEnd)\n```\n\n### [Parameters](#parameters)\n\n[`indexStart`](#indexstart)\n\nThe index of the first character to include in the returned substring.\n\n[`indexEnd`](#indexend) Optional\n\nThe index of the first character to exclude from the returned substring.\n\n### [Return value](#return_value)\n\nA new string containing the specified part of the given string.\n\n## [Description](#description)\n\n`substring()` extracts characters from `indexStart` up to _but not including_ `indexEnd`. In particular:\n\n*   If `indexEnd` is omitted, `substring()` extracts characters to the end of the string.\n*   If `indexStart` is equal to `indexEnd`, `substring()` returns an empty string.\n*   If `indexStart` is greater than `indexEnd`, then the effect of `substring()` is as if the two arguments were swapped; see example below.\n\nAny argument value that is less than `0` or greater than `str.length` is treated as if it were `0` and `str.length`, respectively.\n\nAny argument value that is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is treated as if it were `0`.\n\n## [Examples](#examples)\n\n### [Using substring()](#using_substring)\n\nThe following example uses `substring()` to display characters from the string `\"Mozilla\"`:\n\n```\nconst anyString = \"Mozilla\";\n\nconsole.log(anyString.substring(0, 1)); // \"M\"\nconsole.log(anyString.substring(1, 0)); // \"M\"\n\nconsole.log(anyString.substring(0, 6)); // \"Mozill\"\n\nconsole.log(anyString.substring(4)); // \"lla\"\nconsole.log(anyString.substring(4, 7)); // \"lla\"\nconsole.log(anyString.substring(7, 4)); // \"lla\"\n\nconsole.log(anyString.substring(0, 7)); // \"Mozilla\"\nconsole.log(anyString.substring(0, 10)); // \"Mozilla\"\n```\n\n### [Using substring() with length property](#using_substring_with_length_property)\n\nThe following example uses the `substring()` method and [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) property to extract the last characters of a particular string. This method may be easier to remember, given that you don't need to know the starting and ending indices as you would in the above examples.\n\n```\nconst text = \"Mozilla\";\n\n// Takes 4 last characters of string\nconsole.log(text.substring(text.length - 4)); // prints \"illa\"\n\n// Takes 5 last characters of string\nconsole.log(text.substring(text.length - 5)); // prints \"zilla\"\n```\n\n### [The difference between substring() and substr()](#the_difference_between_substring_and_substr)\n\nThere are subtle differences between the `substring()` and [`substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) methods, so you should be careful not to get them confused.\n\n*   The two parameters of `substr()` are `start` and `length`, while for `substring()`, they are `start` and `end`.\n*   `substr()`'s `start` index will wrap to the end of the string if it is negative, while `substring()` will clamp it to `0`.\n*   Negative lengths in `substr()` are treated as zero, while `substring()` will swap the two indexes if `end` is less than `start`.\n\nFurthermore, `substr()` is considered a _legacy feature in ECMAScript_, so it is best to avoid using it if possible.\n\n```\nconst text = \"Mozilla\";\nconsole.log(text.substring(2, 5)); // \"zil\"\nconsole.log(text.substr(2, 3)); // \"zil\"\n```\n\n### [Differences between substring() and slice()](#differences_between_substring_and_slice)\n\nThe `substring()` and [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) methods are almost identical, but there are a couple of subtle differences between the two, especially in the way negative arguments are dealt with.\n\nThe `substring()` method swaps its two arguments if `indexStart` is greater than `indexEnd`, meaning that a string is still returned. The [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) method returns an empty string if this is the case.\n\n```\nconst text = \"Mozilla\";\nconsole.log(text.substring(5, 2)); // \"zil\"\nconsole.log(text.slice(5, 2)); // \"\"\n```\n\nIf either or both of the arguments are negative or `NaN`, the `substring()` method treats them as if they were `0`.\n\n```\nconsole.log(text.substring(-5, 2)); // \"Mo\"\nconsole.log(text.substring(-5, -2)); // \"\"\n```\n\n`slice()` also treats `NaN` arguments as `0`, but when it is given negative values it counts backwards from the end of the string to find the indexes.\n\n```\nconsole.log(text.slice(-5, 2)); // \"\"\nconsole.log(text.slice(-5, -2)); // \"zil\"\n```\n\nSee the [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) page for more examples with negative numbers.\n\n### [Replacing a substring within a string](#replacing_a_substring_within_a_string)\n\nThe following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example creates a string `Brave New Web` from the original string `Brave New World`.\n\n```\n// Replaces oldS with newS in the string fullS\nfunction replaceString(oldS, newS, fullS) {\n  for (let i = 0; i < fullS.length; ++i) {\n    if (fullS.substring(i, i + oldS.length) === oldS) {\n      fullS =\n        fullS.substring(0, i) +\n        newS +\n        fullS.substring(i + oldS.length, fullS.length);\n    }\n  }\n  return fullS;\n}\n\nreplaceString(\"World\", \"Web\", \"Brave New World\");\n```\n\nNote that this can result in an infinite loop if `oldS` is itself a substring of `newS` — for example, if you attempted to replace `\"World\"` with `\"OtherWorld\"` here.\n\nA better method for replacing strings is as follows:\n\n```\nfunction replaceString(oldS, newS, fullS) {\n  return fullS.split(oldS).join(newS);\n}\n```\n\nThe code above serves as an example for substring operations. If you need to replace substrings, most of the time you will want to use [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.substring](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.substring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.substring() - JavaScript | MDN",
    "description": "The substring() method of String values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search",
    "markdown": "# String.prototype.search() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`search()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values executes a search for a match between a regular expression and this string, returning the index of the first match in the string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`regexp`](#regexp)\n\nA regular expression object, or any object that has a [`Symbol.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search) method.\n\nIf `regexp` is not a `RegExp` object and does not have a `Symbol.search` method, it is implicitly converted to a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) by using `new RegExp(regexp)`.\n\n### [Return value](#return_value)\n\nThe index of the first match between the regular expression and the given string, or `-1` if no match was found.\n\n## [Description](#description)\n\nThe implementation of `String.prototype.search()` itself is very simple — it simply calls the `Symbol.search` method of the argument with the string as the first parameter. The actual implementation comes from [`RegExp.prototype[@@search]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search).\n\nThe `g` flag of `regexp` has no effect on the `search()` result, and the search always happens as if the regex's `lastIndex` is 0. For more information on the behavior of `search()`, see [`RegExp.prototype[@@search]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search).\n\nWhen you want to know whether a pattern is found, and _also_ know its index within a string, use `search()`.\n\n*   If you only want to know if it exists, use the [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) method, which returns a boolean.\n*   If you need the content of the matched text, use [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) or [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec).\n\n## [Examples](#examples)\n\n### [Using search()](#using_search)\n\nThe following example searches a string with two different regex objects to show a successful search (positive value) vs. an unsuccessful search (`-1`).\n\n```\nconst str = \"hey JudE\";\nconst re = /[A-Z]/;\nconst reDot = /[.]/;\nconsole.log(str.search(re)); // returns 4, which is the index of the first capital letter \"J\"\nconsole.log(str.search(reDot)); // returns -1 cannot find '.' dot punctuation\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.search](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.search) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.search() - JavaScript | MDN",
    "description": "The search() method of String values executes a search for a match between a regular expression and this string, returning the index of the first match in the string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase",
    "markdown": "# String.prototype.toLowerCase() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLowerCase()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string converted to lower case.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string representing the calling string converted to lower case.\n\n## [Description](#description)\n\nThe `toLowerCase()` method returns the value of the string converted to lower case. `toLowerCase()` does not affect the value of the string `str` itself.\n\n## [Examples](#examples)\n\n### [Using `toLowerCase()`](#using_tolowercase)\n\n```\nconsole.log(\"ALPHABET\".toLowerCase()); // 'alphabet'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.tolowercase](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.tolowercase) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.toLowerCase() - JavaScript | MDN",
    "description": "The toLowerCase() method of String values returns this string converted to lower case.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim",
    "markdown": "# String.prototype.trim() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`trim()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values removes whitespace from both ends of this string and returns a new string, without modifying the original string.\n\nTo return a new string with whitespace trimmed from just one end, use [`trimStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart) or [`trimEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string representing `str` stripped of whitespace from both its beginning and end. Whitespace is defined as [white space](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf neither the beginning or end of `str` has any whitespace, a new string is still returned (essentially a copy of `str`).\n\n## [Examples](#examples)\n\n### [Using trim()](#using_trim)\n\nThe following example trims whitespace from both ends of `str`.\n\n```\nconst str = \"   foo  \";\nconsole.log(str.trim()); // 'foo'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.trim](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.trim) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.trim() - JavaScript | MDN",
    "description": "The trim() method of String values removes whitespace from both ends of this string and returns a new string, without modifying the original string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",
    "markdown": "# String.prototype.repeat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`repeat()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values constructs and returns a new string which contains the specified number of copies of this string, concatenated together.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`count`](#count)\n\nAn integer between `0` and [`+Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY), indicating the number of times to repeat the string.\n\n### [Return value](#return_value)\n\nA new string containing the specified number of copies of the given string.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `count` is negative or if `count` overflows maximum string length.\n\n## [Examples](#examples)\n\n### [Using repeat()](#using_repeat)\n\n```\n\"abc\".repeat(-1); // RangeError\n\"abc\".repeat(0); // ''\n\"abc\".repeat(1); // 'abc'\n\"abc\".repeat(2); // 'abcabc'\n\"abc\".repeat(3.5); // 'abcabcabc' (count will be converted to integer)\n\"abc\".repeat(1 / 0); // RangeError\n\n({ toString: () => \"abc\", repeat: String.prototype.repeat }).repeat(2);\n// 'abcabc' (repeat() is a generic method)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.repeat](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.repeat) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.repeat() - JavaScript | MDN",
    "description": "The repeat() method of String values constructs and returns a new string\n  which contains the specified number of copies of this string, concatenated together.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize",
    "markdown": "# String.prototype.normalize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`normalize()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns the Unicode Normalization Form of this string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnormalize()\nnormalize(form)\n```\n\n### [Parameters](#parameters)\n\n[`form`](#form) Optional\n\nOne of `\"NFC\"`, `\"NFD\"`, `\"NFKC\"`, or `\"NFKD\"`, specifying the Unicode Normalization Form. If omitted or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), `\"NFC\"` is used.\n\nThese values have the following meanings:\n\n[`\"NFC\"`](#nfc)\n\nCanonical Decomposition, followed by Canonical Composition.\n\n[`\"NFD\"`](#nfd)\n\nCanonical Decomposition.\n\n[`\"NFKC\"`](#nfkc)\n\nCompatibility Decomposition, followed by Canonical Composition.\n\n[`\"NFKD\"`](#nfkd)\n\nCompatibility Decomposition.\n\n### [Return value](#return_value)\n\nA string containing the Unicode Normalization Form of the given string.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `form` isn't one of the values specified above.\n\n## [Description](#description)\n\nUnicode assigns a unique numerical value, called a _code point_, to each character. For example, the code point for `\"A\"` is given as U+0041. However, sometimes more than one code point, or sequence of code points, can represent the same abstract character — the character `\"ñ\"` for example can be represented by either of:\n\n*   The single code point U+00F1.\n*   The code point for `\"n\"` (U+006E) followed by the code point for the combining tilde (U+0303).\n\n```\nconst string1 = \"\\u00F1\";\nconst string2 = \"\\u006E\\u0303\";\n\nconsole.log(string1); // ñ\nconsole.log(string2); // ñ\n```\n\nHowever, since the code points are different, string comparison will not treat them as equal. And since the number of code points in each version is different, they even have different lengths.\n\n```\nconst string1 = \"\\u00F1\"; // ñ\nconst string2 = \"\\u006E\\u0303\"; // ñ\n\nconsole.log(string1 === string2); // false\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 2\n```\n\nThe `normalize()` method helps solve this problem by converting a string into a normalized form common for all sequences of code points that represent the same characters. There are two main normalization forms, one based on **canonical equivalence** and the other based on **compatibility**.\n\n### [Canonical equivalence normalization](#canonical_equivalence_normalization)\n\nIn Unicode, two sequences of code points have canonical equivalence if they represent the same abstract characters, and should always have the same visual appearance and behavior (for example, they should always be sorted in the same way).\n\nYou can use `normalize()` using the `\"NFD\"` or `\"NFC\"` arguments to produce a form of the string that will be the same for all canonically equivalent strings. In the example below we normalize two representations of the character `\"ñ\"`:\n\n```\nlet string1 = \"\\u00F1\"; // ñ\nlet string2 = \"\\u006E\\u0303\"; // ñ\n\nstring1 = string1.normalize(\"NFD\");\nstring2 = string2.normalize(\"NFD\");\n\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 2\nconsole.log(string2.length); // 2\n```\n\n#### Composed and decomposed forms\n\nNote that the length of the normalized form under `\"NFD\"` is `2`. That's because `\"NFD\"` gives you the **decomposed** version of the canonical form, in which single code points are split into multiple combining ones. The decomposed canonical form for `\"ñ\"` is `\"\\u006E\\u0303\"`.\n\nYou can specify `\"NFC\"` to get the **composed** canonical form, in which multiple code points are replaced with single code points where possible. The composed canonical form for `\"ñ\"` is `\"\\u00F1\"`:\n\n```\nlet string1 = \"\\u00F1\"; // ñ\nlet string2 = \"\\u006E\\u0303\"; // ñ\n\nstring1 = string1.normalize(\"NFC\");\nstring2 = string2.normalize(\"NFC\");\n\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 1\nconsole.log(string2.codePointAt(0).toString(16)); // f1\n```\n\n### [Compatibility normalization](#compatibility_normalization)\n\nIn Unicode, two sequences of code points are compatible if they represent the same abstract characters, and should be treated alike in some — but not necessarily all — applications.\n\nAll canonically equivalent sequences are also compatible, but not vice versa.\n\nFor example:\n\n*   the code point U+FB00 represents the [ligature](https://developer.mozilla.org/en-US/docs/Glossary/Ligature) `\"ﬀ\"`. It is compatible with two consecutive U+0066 code points (`\"ff\"`).\n*   the code point U+24B9 represents the symbol `\"Ⓓ\"`. It is compatible with the U+0044 code point (`\"D\"`).\n\nIn some respects (such as sorting) they should be treated as equivalent—and in some (such as visual appearance) they should not, so they are not canonically equivalent.\n\nYou can use `normalize()` using the `\"NFKD\"` or `\"NFKC\"` arguments to produce a form of the string that will be the same for all compatible strings:\n\n```\nlet string1 = \"\\uFB00\";\nlet string2 = \"\\u0066\\u0066\";\n\nconsole.log(string1); // ﬀ\nconsole.log(string2); // ff\nconsole.log(string1 === string2); // false\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 2\n\nstring1 = string1.normalize(\"NFKD\");\nstring2 = string2.normalize(\"NFKD\");\n\nconsole.log(string1); // ff <- visual appearance changed\nconsole.log(string2); // ff\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 2\nconsole.log(string2.length); // 2\n```\n\nWhen applying compatibility normalization it's important to consider what you intend to do with the strings, since the normalized form may not be appropriate for all applications. In the example above the normalization is appropriate for search, because it enables a user to find the string by searching for `\"f\"`. But it may not be appropriate for display, because the visual representation is different.\n\nAs with canonical normalization, you can ask for decomposed or composed compatible forms by passing `\"NFKD\"` or `\"NFKC\"`, respectively.\n\n## [Examples](#examples)\n\n### [Using normalize()](#using_normalize)\n\n```\n// Initial string\n\n// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n// U+0323: COMBINING DOT BELOW\nconst str = \"\\u1E9B\\u0323\";\n\n// Canonically-composed form (NFC)\n\n// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n// U+0323: COMBINING DOT BELOW\nstr.normalize(\"NFC\"); // '\\u1E9B\\u0323'\nstr.normalize(); // same as above\n\n// Canonically-decomposed form (NFD)\n\n// U+017F: LATIN SMALL LETTER LONG S\n// U+0323: COMBINING DOT BELOW\n// U+0307: COMBINING DOT ABOVE\nstr.normalize(\"NFD\"); // '\\u017F\\u0323\\u0307'\n\n// Compatibly-composed (NFKC)\n\n// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE\nstr.normalize(\"NFKC\"); // '\\u1E69'\n\n// Compatibly-decomposed (NFKD)\n\n// U+0073: LATIN SMALL LETTER S\n// U+0323: COMBINING DOT BELOW\n// U+0307: COMBINING DOT ABOVE\nstr.normalize(\"NFKD\"); // '\\u0073\\u0323\\u0307'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.normalize](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.normalize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.normalize() - JavaScript | MDN",
    "description": "The normalize() method of String values returns the Unicode Normalization\n  Form of this string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction",
    "markdown": "# AsyncGeneratorFunction() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`AsyncGeneratorFunction()`** constructor creates [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction) objects.\n\nNote that `AsyncGeneratorFunction` is not a global object. It could be obtained by evaluating the following code.\n\n```\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n\nThe `AsyncGeneratorFunction()` constructor is not intended to be used directly, and all caveats mentioned in the [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) description apply to `AsyncGeneratorFunction()`.\n\n## [Syntax](#syntax)\n\n```\nnew AsyncGeneratorFunction(functionBody)\nnew AsyncGeneratorFunction(arg1, functionBody)\nnew AsyncGeneratorFunction(arg1, arg2, functionBody)\nnew AsyncGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nAsyncGeneratorFunction(functionBody)\nAsyncGeneratorFunction(arg1, functionBody)\nAsyncGeneratorFunction(arg1, arg2, functionBody)\nAsyncGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n**Note:** `AsyncGeneratorFunction()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AsyncGeneratorFunction` instance.\n\n### [Parameters](#parameters)\n\n## [Examples](#examples)\n\n### [Using the constructor](#using_the_constructor)\n\nThe following example uses the `AsyncGeneratorFunction` constructor to create an async generator function.\n\n```\nconst AsyncGeneratorFunction = async function* () {}.constructor;\nconst createAsyncGenerator = new AsyncGeneratorFunction(\"a\", \"yield a * 2\");\nconst asyncGen = createAsyncGenerator(10);\nasyncGen.next().then((res) => console.log(res.value)); // 20\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgeneratorfunction-constructor](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgeneratorfunction-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGeneratorFunction() constructor - JavaScript | MDN",
    "description": "The AsyncGeneratorFunction() constructor creates AsyncGeneratorFunction objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",
    "markdown": "# RegExp.prototype.test() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`test()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances executes a search with this regular expression for a match between a regular expression and a specified string. Returns `true` if there is a match; `false` otherwise.\n\nJavaScript [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) objects are **stateful** when they have the [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) or [`sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flags set (e.g., `/foo/g` or `/foo/y`). They store a [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) from the previous match. Using this internally, `test()` can be used to iterate over multiple matches in a string of text (with capture groups).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nThe string against which to match the regular expression. All values are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `test()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n### [Return value](#return_value)\n\n`true` if there is a match between the regular expression and the string `str`. Otherwise, `false`.\n\n## [Description](#description)\n\nUse `test()` whenever you want to know whether a pattern is found in a string. `test()` returns a boolean, unlike the [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) method (which returns the index of a match, or `-1` if not found).\n\nTo get more information (but with slower execution), use the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method. (This is similar to the [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) method.)\n\nAs with `exec()` (or in combination with it), `test()` called multiple times on the same global regular expression instance will advance past the previous match.\n\n## [Examples](#examples)\n\n### [Using test()](#using_test)\n\nSimple example that tests if `\"hello\"` is contained at the very beginning of a string, returning a boolean result.\n\n```\nconst str = \"hello world!\";\nconst result = /^hello/.test(str);\n\nconsole.log(result); // true\n```\n\nThe following example logs a message which depends on the success of the test:\n\n```\nfunction testInput(re, str) {\n  const midstring = re.test(str) ? \"contains\" : \"does not contain\";\n  console.log(`${str} ${midstring} ${re.source}`);\n}\n```\n\n### [Using test() on a regex with the \"global\" flag](#using_test_on_a_regex_with_the_global_flag)\n\nWhen a regex has the [global flag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) set, `test()` will advance the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) of the regex. ([`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) also advances the `lastIndex` property.)\n\nFurther calls to `test(str)` will resume searching `str` starting from `lastIndex`. The `lastIndex` property will continue to increase each time `test()` returns `true`.\n\n**Note:** As long as `test()` returns `true`, `lastIndex` will _not_ reset—even when testing a different string!\n\nWhen `test()` returns `false`, the calling regex's `lastIndex` property will reset to `0`.\n\nThe following example demonstrates this behavior:\n\n```\nconst regex = /foo/g; // the \"global\" flag is set\n\n// regex.lastIndex is at 0\nregex.test(\"foo\"); // true\n\n// regex.lastIndex is now at 3\nregex.test(\"foo\"); // false\n\n// regex.lastIndex is at 0\nregex.test(\"barfoo\"); // true\n\n// regex.lastIndex is at 6\nregex.test(\"foobar\"); // false\n\n// regex.lastIndex is at 0\nregex.test(\"foobarfoo\"); // true\n\n// regex.lastIndex is at 3\nregex.test(\"foobarfoo\"); // true\n\n// regex.lastIndex is at 9\nregex.test(\"foobarfoo\"); // false\n\n// regex.lastIndex is at 0\n// (...and so on)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype.test](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype.test) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.test() - JavaScript | MDN",
    "description": "The test() method of RegExp instances executes a search with this regular expression for a match between a regular expression and a specified string. Returns true if there is a match; false otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
    "markdown": "# String.prototype.toUpperCase() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toUpperCase()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string converted to uppercase.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string representing the calling string converted to upper case.\n\n## [Description](#description)\n\nThe `toUpperCase()` method returns the value of the string converted to uppercase. This method does not affect the value of the string itself since JavaScript strings are immutable.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\nconsole.log(\"alphabet\".toUpperCase()); // 'ALPHABET'\n```\n\n### [Conversion of non-string `this` values to strings](#conversion_of_non-string_this_values_to_strings)\n\nThis method will convert any non-string value to a string, when you set its `this` to a value that is not a string:\n\n```\nconst a = String.prototype.toUpperCase.call({\n  toString() {\n    return \"abcdef\";\n  },\n});\n\nconst b = String.prototype.toUpperCase.call(true);\n\n// prints out 'ABCDEF TRUE'.\nconsole.log(a, b);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.touppercase](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.touppercase) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String.prototype.toUpperCase() - JavaScript | MDN",
    "description": "The toUpperCase() method of String values returns this string converted to uppercase.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
    "markdown": "# Groups and backreferences - JavaScript\n\nGroups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.\n\n## [Try it](#try_it)\n\n## [Types](#types)\n\n| Characters | Meaning |\n| --- | --- |\n| `(_x_)` | [**Capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) Matches `_x_` and remembers the match. For example, `/(foo)/` matches and remembers \"foo\" in \"foo bar\".<br><br>A regular expression may have multiple capturing groups. In results, matches to capturing groups typically in an array whose members are in the same order as the left parentheses in the capturing group. This is usually just the order of the capturing groups themselves. This becomes important when capturing groups are nested. Matches are accessed using the index of the result's elements (`[1], …, [n]`) or from the predefined `RegExp` object's properties (`$1, …, $9`).<br><br>Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses (see below).<br><br>`[String.prototype.match()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)` won't return groups if the `/.../g` flag is set. However, you can still use `[String.prototype.matchAll()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)` to get all matches. |\n| `(?<Name>x)` | [**Named capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) Matches \"x\" and stores it on the groups property of the returned matches under the name specified by `<Name>`. The angle brackets (`<` and `>`) are required for group name.<br><br>For example, to extract the United States area code from a phone number, we could use `/\\((?<area>\\d\\d\\d)\\)/`. The resulting number would appear under `matches.groups.area`. |\n| `(?:_x_)` | [**Non-capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group) Matches \"x\" but does not remember the match. The matched substring cannot be recalled from the resulting array's elements (`[1], …, [n]`) or from the predefined `RegExp` object's properties (`$1, …, $9`). |\n| `\\_n_` | [**Backreference:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) Where \"n\" is a positive integer. Matches the same substring matched by the nth capturing group in the regular expression (counting left parentheses). For example, `/apple(,)\\sorange\\1/` matches \"apple, orange,\" in \"apple, orange, cherry, peach\". |\n| `\\k<Name>` | [**Named backreference:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference) A back reference to the last substring matching the **Named capture group** specified by `<Name>`.<br><br>For example, `/(?<title>\\w+), yes \\k<title>/` matches \"Sir, yes Sir\" in \"Do you copy? Sir, yes Sir!\".<br><br>**Note:** `\\k` is used literally here to indicate the beginning of a back reference to a Named capture group. |\n\n## [Examples](#examples)\n\n### [Using groups](#using_groups)\n\nIn this example, we match two words in a structured format by using capturing groups to remember them. `\\w+` matches one or more word characters, and the parentheses `()` create a capturing group. The `g` flag is used to match all occurrences.\n\n```\nconst personList = `First_Name: John, Last_Name: Doe\nFirst_Name: Jane, Last_Name: Smith`;\n\nconst regexpNames = /First_Name: (\\w+), Last_Name: (\\w+)/g;\nfor (const match of personList.matchAll(regexpNames)) {\n  console.log(`Hello ${match[1]} ${match[2]}`);\n}\n```\n\nSee more examples in the [capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) reference.\n\n### [Using named groups](#using_named_groups)\n\nThis example is the same as above, but we use named capturing groups to remember the matched words instead. This way, we can access the matched words by their meanings.\n\n```\nconst personList = `First_Name: John, Last_Name: Doe\nFirst_Name: Jane, Last_Name: Smith`;\n\nconst regexpNames =\n  /First_Name: (?<firstname>\\w+), Last_Name: (?<lastname>\\w+)/g;\nfor (const match of personList.matchAll(regexpNames)) {\n  console.log(`Hello ${match.groups.firstname} ${match.groups.lastname}`);\n}\n```\n\nSee more examples in the [named capturing group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) reference.\n\n### [Using groups and back references](#using_groups_and_back_references)\n\nIn this example, we first match a single or double quote character with `['\"]`, remember it, match an arbitrary number of characters wih `.*?` (`*?` is a [non-greedy quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)), until we match the remembered quote character again with `\\1`. The `\\1` is a backreference to the first capturing group, which matches the same type of quote. The result will therefore be two strings: `\"'\"` and `'\"'`.\n\n```\nconst quote = `Single quote \"'\" and double quote '\"'`;\nconst regexpQuotes = /(['\"]).*?\\1/g;\nfor (const match of quote.matchAll(regexpQuotes)) {\n  console.log(match[0]);\n}\n```\n\nSee more examples in the [backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) reference.\n\n### [Using groups and match indices](#using_groups_and_match_indices)\n\nBy providing the `d` flag, the indices of each capturing group is returned. This is especially useful if you are correlating each matched group with the original text — for example, to provide compiler diagnostics.\n\n```\nconst code = `function add(x, y) {\n  return x + y;\n}`;\nconst functionRegexp =\n  /(function\\s+)(?<name>[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*)/du;\nconst match = functionRegexp.exec(code);\nconst lines = code.split(\"\\n\");\nlines.splice(\n  1,\n  0,\n  \" \".repeat(match.indices[1][1] - match.indices[1][0]) +\n    \"^\".repeat(match.indices.groups.name[1] - match.indices.groups.name[0]),\n);\nconsole.log(lines.join(\"\\n\"));\n// function add(x, y) {\n//          ^^^\n//   return x + y;\n// }\n```\n\n## [See also](#see_also)",
    "title": "Groups and backreferences - JavaScript | MDN",
    "description": "Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers",
    "markdown": "# Quantifiers - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nQuantifiers indicate numbers of characters or expressions to match.\n\n## [Try it](#try_it)\n\n## [Types](#types)\n\n| Characters | Meaning |\n| --- | --- |\n| `_x_*` | Matches the preceding item \"x\" 0 or more times. For example, `/bo*/` matches \"boooo\" in \"A ghost booooed\" and \"b\" in \"A bird warbled\", but nothing in \"A goat grunted\". |\n| `_x_+` | Matches the preceding item \"x\" 1 or more times. Equivalent to `{1,}`. For example, `/a+/` matches the \"a\" in \"candy\" and all the \"a\"'s in \"caaaaaaandy\". |\n| `_x_?` | Matches the preceding item \"x\" 0 or 1 times. For example, `/e?le?/` matches the \"el\" in \"angel\" and the \"le\" in \"angle.\"<br><br>If used immediately after any of the quantifiers `*`, `+`, `?`, or `{}`, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). |\n| `_x_{_n_}` | Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of the preceding item \"x\". For example, `/a{2}/` doesn't match the \"a\" in \"candy\", but it matches all of the \"a\"'s in \"caandy\", and the first two \"a\"'s in \"caaandy\". |\n| `_x_{_n_,}` | Where \"n\" is a non-negative integer, matches at least \"n\" occurrences of the preceding item \"x\". For example, `/a{2,}/` doesn't match the \"a\" in \"candy\", but matches all of the a's in \"caandy\" and in \"caaaaaaandy\". |\n| `_x_{_n_,_m_}` | Where \"n\" and \"m\" are non-negative integers and `m >= n`, matches at least \"n\" and at most \"m\" occurrences of the preceding item \"x\". For example, `/a{1,3}/` matches nothing in \"cndy\", the \"a\" in \"candy\", the two \"a\"'s in \"caandy\", and the first three \"a\"'s in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\", the match is \"aaa\", even though the original string had more \"a\"s in it. |\n| `_x_*?`  <br>`_x_+?`  <br>`_x_??`  <br>`_x_{n}?`  <br>`_x_{n,}?`  <br>`_x_{n,m}?` | By default quantifiers like `*` and `+` are \"greedy\", meaning that they try to match as much of the string as possible. The `?` character after the quantifier makes the quantifier \"non-greedy\": meaning that it will stop as soon as it finds a match. For example, given a string like \"some <foo> <bar> new </bar> </foo> thing\":<br><br>*   `/<.*>/` will match \"<foo> <bar> new </bar> </foo>\"<br>*   `/<.*?>/` will match \"<foo>\" |\n\n## [Examples](#examples)\n\n### [Repeated pattern](#repeated_pattern)\n\nIn this example, we match one or more word characters with `\\w+`, then one or more characters \"a\" with `a+`, and finally end at a word boundary with `\\b`.\n\n```\nconst wordEndingWithAs = /\\w+a+\\b/;\nconst delicateMessage = \"This is Spartaaaaaaa\";\n\nconsole.table(delicateMessage.match(wordEndingWithAs)); // [ \"Spartaaaaaaa\" ]\n```\n\n### [Counting characters](#counting_characters)\n\nIn this example, we match words that have a single letter, words that have between 2 and 6 letters, and words that have 13 or more letters.\n\n```\nconst singleLetterWord = /\\b\\w\\b/g;\nconst notSoLongWord = /\\b\\w{2,6}\\b/g;\nconst longWord = /\\b\\w{13,}\\b/g;\n\nconst sentence = \"Why do I have to learn multiplication table?\";\n\nconsole.table(sentence.match(singleLetterWord)); // [\"I\"]\nconsole.table(sentence.match(notSoLongWord)); // [ \"Why\", \"do\", \"have\", \"to\", \"learn\", \"table\" ]\nconsole.table(sentence.match(longWord)); // [\"multiplication\"]\n```\n\n### [Optional character](#optional_character)\n\nIn this example, we match words that either end with \"our\" or \"or\".\n\n```\nconst britishText = \"He asked his neighbour a favour.\";\nconst americanText = \"He asked his neighbor a favor.\";\n\nconst regexpEnding = /\\w+ou?r/g;\n// \\w+ One or several letters\n// o   followed by an \"o\",\n// u?  optionally followed by a \"u\"\n// r   followed by an \"r\"\n\nconsole.table(britishText.match(regexpEnding));\n// [\"neighbour\", \"favour\"]\n\nconsole.table(americanText.match(regexpEnding));\n// [\"neighbor\", \"favor\"]\n```\n\n### [Greedy versus non-greedy](#greedy_versus_non-greedy)\n\nIn this example, we match one or more word characters or spaces with `[\\w ]+` and `[\\w ]+?`. The first one is greedy and the second one is non-greedy. Note how the second one stops as soon as it meets the minimal requirement.\n\n```\nconst text = \"I must be getting somewhere near the center of the earth.\";\nconst greedyRegexp = /[\\w ]+/;\n\nconsole.log(text.match(greedyRegexp)[0]);\n// \"I must be getting somewhere near the center of the earth\"\n// almost all of the text matches (leaves out the dot character)\n\nconst nonGreedyRegexp = /[\\w ]+?/; // Notice the question mark\nconsole.log(text.match(nonGreedyRegexp));\n// \"I\"\n// The match is the smallest one possible\n```\n\n## [See also](#see_also)",
    "title": "Quantifiers - JavaScript | MDN",
    "description": "Quantifiers indicate numbers of characters or expressions to match.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes",
    "markdown": "# Character classes - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nCharacter classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\n## [Try it](#try_it)\n\n## [Types](#types)\n\n| Characters | Meaning |\n| --- | --- |\n| `[xyz]   [a-c]` | [**Character class:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first or last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character.<br><br>For example, `[abcd]` is the same as `[a-d]`. They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".<br><br>For example, `[abcd-]` and `[-abcd]` match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in \"non-profit\".<br><br>For example, `[\\w-]` is the same as `[A-Za-z0-9_-]`. They both match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"n\" in \"non-profit\".<br><br>When the [`unicodeSets`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) (`v`) flag is enabled, the character class has some additional features. See the [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) reference for more information. |\n| `[^xyz]   [^a-c]` | [**Negated character class:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) Matches anything that is not enclosed in the square brackets. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first character after the `^` or the last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character. For example, `[^abc]` is the same as `[^a-c]`. They initially match \"o\" in \"bacon\" and \"h\" in \"chop\".<br><br>**Note:** The ^ character may also indicate the [beginning of input](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions). |\n| `.` | [**Wildcard:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard) Matches any single character _except_ line terminators: `\\n`, `\\r`, `\\u2028` or `\\u2029`. For example, `/.y/` matches \"my\" and \"ay\", but not \"yes\", in \"yes make my day\", as there is no character before \"y\" in \"yes\". If the [`dotAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) (s) flag is enabled, also matches line terminators. Inside a character class, the dot loses its special meaning and matches a literal dot. |\n| `\\d` | [**Digit character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any digit (Arabic numeral). Equivalent to `[0-9]`. For example, `/\\d/` or `/[0-9]/` matches \"2\" in \"B2 is the suite number\". |\n| `\\D` | [**Non-digit character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any character that is not a digit (Arabic numeral). Equivalent to `[^0-9]`. For example, `/\\D/` or `/[^0-9]/` matches \"B\" in \"B2 is the suite number\". |\n| `\\w` | [**Word character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to `[A-Za-z0-9_]`. For example, `/\\w/` matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\" in \"3D\" and \"m\" in \"Émanuel\". |\n| `\\W` | [**Non-word character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any character that is not a word character from the basic Latin alphabet. Equivalent to `[^A-Za-z0-9_]`. For example, `/\\W/` or `/[^A-Za-z0-9_]/` matches \"%\" in \"50%\" and \"É\" in \"Émanuel\". |\n| `\\s` | [**White space character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to `[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]`. For example, `/\\s\\w*/` matches \" bar\" in \"foo bar\". |\n| `\\S` | [**Non-white space character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches a single character other than white space. Equivalent to `[^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]`. For example, `/\\S\\w*/` matches \"foo\" in \"foo bar\". |\n| `\\t` | Matches a horizontal tab. |\n| `\\r` | Matches a carriage return. |\n| `\\n` | Matches a linefeed. |\n| `\\v` | Matches a vertical tab. |\n| `\\f` | Matches a form-feed. |\n| `[\\b]` | Matches a backspace. If you're looking for the word-boundary assertion (`\\b`), see [Assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions). |\n| `\\0` | Matches a NUL character. Do not follow this with another digit. |\n| `\\c_X_` | Matches a control character using [caret notation](https://en.wikipedia.org/wiki/Caret_notation), where \"X\" is a letter from A–Z (corresponding to code points `U+0001`_–_`U+001A`). For example, `/\\cM\\cJ/` matches \"\\\\r\\\\n\". |\n| `\\x_hh_` | Matches the character with the code `_hh_` (two hexadecimal digits). |\n| `\\u_hhhh_` | Matches a UTF-16 code-unit with the value `_hhhh_` (four hexadecimal digits). |\n| `\\u_{hhhh}_ or _\\u{hhhhh}_` | (Only when the `u` flag is set.) Matches the character with the Unicode value `U+_hhhh_` or `U+_hhhhh_` (hexadecimal digits). |\n| `\\p{_UnicodeProperty_}`, `\\P{_UnicodeProperty_}` | [**Unicode character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) Matches a character based on its Unicode character properties: for example, emoji characters, or Japanese _katakana_ characters, or Chinese/Japanese Han/Kanji characters, etc.). |\n| `\\` | Indicates that the following character should be treated specially, or \"escaped\". It behaves one of two ways.<br><br>*   For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, `/b/` matches the character \"b\". By placing a backslash in front of \"b\", that is by using `/\\b/`, the character becomes special to mean match a word boundary.<br>*   For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, \"\\*\" is a special character that means 0 or more occurrences of the preceding character should be matched; for example, `/a*/` means match 0 or more \"a\"s. To match `*` literally, precede it with a backslash; for example, `/a\\*/` matches \"a\\*\".<br><br>**Note:** To match this character literally, escape it with itself. In other words to search for `\\` use `/\\\\/`. |\n| `_x_\\|_y_` | [**Disjunction:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) Matches either \"x\" or \"y\". Each component, separated by a pipe (`\\|`), is called an _alternative_. For example, `/green\\|red/` matches \"green\" in \"green apple\" and \"red\" in \"red apple\".<br><br>**Note:** A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) to make it part of a bigger pattern. `[abc]` is functionally equivalent to `(?:a\\|b\\|c)`. |\n\n## [Examples](#examples)\n\n### [Looking for a series of digits](#looking_for_a_series_of_digits)\n\nIn this example, we match a sequence of 4 digits with `\\d{4}`. `\\b` indicates a [word boundary](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) (i.e. do not start or end matching in the middle of a number sequence).\n\n```\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\nSee more examples in the [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) reference.\n\n### [Looking for a word (from the latin alphabet) starting with A](#looking_for_a_word_from_the_latin_alphabet_starting_with_a)\n\nIn this example, we match a word starting with the letter A. `\\b` indicates a [word boundary](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) (i.e. do not start matching in the middle of a word). `[aA]` indicates the letter \"a\" or \"A\". `\\w+` indicates any character _from the Latin alphabet_, multiple times (`+` is a [quantifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)). Note that because we already match until there are no more word characters, an end `\\b` boundary is not necessary.\n\n```\nconst aliceExcerpt =\n  \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\nSee more examples in the [character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) reference.\n\n### [Looking for a word (from Unicode characters)](#looking_for_a_word_from_unicode_characters)\n\nInstead of the Latin alphabet, we can use a range of Unicode characters to identify a word (thus being able to deal with text in other languages like Russian or Arabic). The \"Basic Multilingual Plane\" of Unicode contains most of the characters used around the world and we can use character classes and ranges to match words written with those characters.\n\n```\nconst nonEnglishText = \"Приключения Алисы в Стране чудес\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// BMP goes through U+0000 to U+FFFF but space is U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[\"Приключения\", \"Алисы\", \"в\", \"Стране\", \"чудес\"];\n```\n\nSee more examples in the [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) reference.\n\n### [Counting vowels](#counting_vowels)\n\nIn this example, we count the number of vowels (A, E, I, O, U, Y) in a text. The `g` flag is used to match all occurrences of the pattern in the text. The `i` flag is used to make the pattern case-insensitive, so it matches both uppercase and lowercase vowels.\n\n```\nconst aliceExcerpt =\n  \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[aeiouy]/gi;\n\nconsole.log(\"Number of vowels:\", aliceExcerpt.match(regexpVowels).length);\n// Number of vowels: 26\n```\n\n## [See also](#see_also)",
    "title": "Character classes - JavaScript | MDN",
    "description": "Character classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions",
    "markdown": "# Assertions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAssertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).\n\n## [Try it](#try_it)\n\n## [Types](#types)\n\n### [Boundary-type assertions](#boundary-type_assertions)\n\n| Characters | Meaning |\n| --- | --- |\n| `^` | [**Input boundary beginning assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) Matches the beginning of input. If the [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) (m) flag is enabled, also matches immediately after a line break character. For example, `/^A/` does not match the \"A\" in \"an A\", but does match the first \"A\" in \"An A\".<br><br>**Note:** This character has a different meaning when it appears at the start of a [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes). |\n| `$` | [**Input boundary end assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) Matches the end of input. If the [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) (m) flag is enabled, also matches immediately before a line break character. For example, `/t$/` does not match the \"t\" in \"eater\", but does match it in \"eat\". |\n| `\\b` | [**Word boundary assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) Matches a word boundary. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space. Note that a matched word boundary is not included in the match. In other words, the length of a matched word boundary is zero.<br><br>Examples:<br><br>*   `/\\bm/` matches the \"m\" in \"moon\".<br>*   `/oo\\b/` does not match the \"oo\" in \"moon\", because \"oo\" is followed by \"n\" which is a word character.<br>*   `/oon\\b/` matches the \"oon\" in \"moon\", because \"oon\" is the end of the string, thus not followed by a word character.<br>*   `/\\w\\b\\w/` will never match anything, because a word character can never be followed by both a non-word and a word character.<br><br>To match a backspace character (`[\\b]`), see [Character Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes). |\n| `\\B` | [**Non-word-boundary assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) Matches a non-word boundary. This is a position where the previous and next character are of the same type: Either both must be words, or both must be non-words, for example between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match. For example, `/\\Bon/` matches \"on\" in \"at noon\", and `/ye\\B/` matches \"ye\" in \"possibly yesterday\". |\n\n### [Other assertions](#other_assertions)\n\n**Note:** The `?` character may also be used as a quantifier.\n\n| Characters | Meaning |\n| --- | --- |\n| `x(?=y)` | [**Lookahead assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) Matches \"x\" only if \"x\" is followed by \"y\". For example, `/Jack(?=Sprat)/` matches \"Jack\" only if it is followed by \"Sprat\".  <br>`/Jack(?=Sprat\\|Frost)/` matches \"Jack\" only if it is followed by \"Sprat\" or \"Frost\". However, neither \"Sprat\" nor \"Frost\" is part of the match results. |\n| `x(?!y)` | [**Negative lookahead assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) Matches \"x\" only if \"x\" is not followed by \"y\". For example, `/\\d+(?!\\.)/` matches a number only if it is not followed by a decimal point. `/\\d+(?!\\.)/.exec('3.141')` matches \"141\" but not \"3\". |\n| `(?<=y)x` | [**Lookbehind assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) Matches \"x\" only if \"x\" is preceded by \"y\". For example, `/(?<=Jack)Sprat/` matches \"Sprat\" only if it is preceded by \"Jack\". `/(?<=Jack\\|Tom)Sprat/` matches \"Sprat\" only if it is preceded by \"Jack\" or \"Tom\". However, neither \"Jack\" nor \"Tom\" is part of the match results. |\n| `(?<!y)x` | [**Negative lookbehind assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) Matches \"x\" only if \"x\" is not preceded by \"y\". For example, `/(?<!-)\\d+/` matches a number only if it is not preceded by a minus sign. `/(?<!-)\\d+/.exec('3')` matches \"3\". `/(?<!-)\\d+/.exec('-3')` match is not found because the number is preceded by the minus sign. |\n\n## [Examples](#examples)\n\n### [General boundary-type overview example](#general_boundary-type_overview_example)\n\n```\n// Using Regex boundaries to fix buggy string.\nbuggyMultiline = `tey, ihe light-greon apple\ntangs on ihe greon traa`;\n\n// 1) Use ^ to fix the matching at the beginning of the string, and right after newline.\nbuggyMultiline = buggyMultiline.replace(/^t/gim, \"h\");\nconsole.log(1, buggyMultiline); // fix 'tey' => 'hey' and 'tangs' => 'hangs' but do not touch 'traa'.\n\n// 2) Use $ to fix matching at the end of the text.\nbuggyMultiline = buggyMultiline.replace(/aa$/gim, \"ee.\");\nconsole.log(2, buggyMultiline); // fix 'traa' => 'tree.'.\n\n// 3) Use \\b to match characters right on border between a word and a space.\nbuggyMultiline = buggyMultiline.replace(/\\bi/gim, \"t\");\nconsole.log(3, buggyMultiline); // fix 'ihe' => 'the' but do not touch 'light'.\n\n// 4) Use \\B to match characters inside borders of an entity.\nfixedMultiline = buggyMultiline.replace(/\\Bo/gim, \"e\");\nconsole.log(4, fixedMultiline); // fix 'greon' => 'green' but do not touch 'on'.\n```\n\n### [Matching the beginning of input using a ^ control character](#matching_the_beginning_of_input_using_a_control_character)\n\nUse `^` for matching at the beginning of input. In this example, we can get the fruits that start with 'A' by a `/^A/` regex. For selecting appropriate fruits we can use the [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method with an [arrow](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) function.\n\n```\nconst fruits = [\"Apple\", \"Watermelon\", \"Orange\", \"Avocado\", \"Strawberry\"];\n\n// Select fruits started with 'A' by /^A/ Regex.\n// Here '^' control symbol used only in one role: Matching beginning of an input.\n\nconst fruitsStartsWithA = fruits.filter((fruit) => /^A/.test(fruit));\nconsole.log(fruitsStartsWithA); // [ 'Apple', 'Avocado' ]\n```\n\nIn the second example `^` is used both for matching at the beginning of input and for creating negated or complemented character class when used within [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n\n```\nconst fruits = [\"Apple\", \"Watermelon\", \"Orange\", \"Avocado\", \"Strawberry\"];\n\n// Selecting fruits that do not start by 'A' with a /^[^A]/ regex.\n// In this example, two meanings of '^' control symbol are represented:\n// 1) Matching beginning of the input\n// 2) A negated or complemented character class: [^A]\n// That is, it matches anything that is not enclosed in the square brackets.\n\nconst fruitsStartsWithNotA = fruits.filter((fruit) => /^[^A]/.test(fruit));\n\nconsole.log(fruitsStartsWithNotA); // [ 'Watermelon', 'Orange', 'Strawberry' ]\n```\n\nSee more examples in the [input boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) reference.\n\n### [Matching a word boundary](#matching_a_word_boundary)\n\nIn this example, we match fruit names containing a word that ends in \"en\" or \"ed\".\n\n```\nconst fruitsWithDescription = [\"Red apple\", \"Orange orange\", \"Green Avocado\"];\n\n// Select descriptions that contains 'en' or 'ed' words endings:\nconst enEdSelection = fruitsWithDescription.filter((descr) =>\n  /(en|ed)\\b/.test(descr),\n);\n\nconsole.log(enEdSelection); // [ 'Red apple', 'Green Avocado' ]\n```\n\nSee more examples in the [word boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) reference.\n\n### [Lookahead assertion](#lookahead_assertion)\n\nIn this example, we match the word \"First\" only if it is followed by the word \"test\", but we do not include \"test\" in the match results.\n\n```\nconst regex = /First(?= test)/g;\n\nconsole.log(\"First test\".match(regex)); // [ 'First' ]\nconsole.log(\"First peach\".match(regex)); // null\nconsole.log(\"This is a First test in a year.\".match(regex)); // [ 'First' ]\nconsole.log(\"This is a First peach in a month.\".match(regex)); // null\n```\n\nSee more examples in the [lookahead assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) reference.\n\n### [Basic negative lookahead assertion](#basic_negative_lookahead_assertion)\n\nFor example, `/\\d+(?!\\.)/` matches a number only if it is not followed by a decimal point. `/\\d+(?!\\.)/.exec('3.141')` matches \"141\" but not \"3.\n\n```\nconsole.log(/\\d+(?!\\.)/g.exec(\"3.141\")); // [ '141', index: 2, input: '3.141' ]\n```\n\nSee more examples in the [lookahead assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) reference.\n\n### [Different meaning of '?!' combination usage in assertions and character classes](#different_meaning_of_!_combination_usage_in_assertions_and_character_classes)\n\nThe `?!` combination has different meanings in assertions like `/x(?!y)/` and [character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) like `[^?!]`.\n\n```\nconst orangeNotLemon =\n  \"Do you want to have an orange? Yes, I do not want to have a lemon!\";\n\n// Different meaning of '?!' combination usage in Assertions /x(?!y)/ and Ranges /[^?!]/\nconst selectNotLemonRegex = /[^?!]+have(?! a lemon)[^?!]+[?!]/gi;\nconsole.log(orangeNotLemon.match(selectNotLemonRegex)); // [ 'Do you want to have an orange?' ]\n\nconst selectNotOrangeRegex = /[^?!]+have(?! an orange)[^?!]+[?!]/gi;\nconsole.log(orangeNotLemon.match(selectNotOrangeRegex)); // [ ' Yes, I do not want to have a lemon!' ]\n```\n\n### [Lookbehind assertion](#lookbehind_assertion)\n\nIn this example, we replace the word \"orange\" with \"apple\" only if it is preceded by the word \"ripe\".\n\n```\nconst oranges = [\"ripe orange A\", \"green orange B\", \"ripe orange C\"];\n\nconst newFruits = oranges.map((fruit) =>\n  fruit.replace(/(?<=ripe )orange/, \"apple\"),\n);\nconsole.log(newFruits); // ['ripe apple A', 'green orange B', 'ripe apple C']\n```\n\nSee more examples in the [lookbehind assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) reference.\n\n## [See also](#see_also)",
    "title": "Assertions - JavaScript | MDN",
    "description": "Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
    "markdown": "# Regular expression syntax cheat sheet - JavaScript\n\nThis page provides an overall cheat sheet of all the capabilities of `RegExp` syntax by aggregating the content of the articles in the `RegExp` guide. If you need more information on a specific topic, please follow the link on the corresponding heading to access the full article or head to [the guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions).\n\n## [Character classes](#character_classes)\n\n[Character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\n| Characters | Meaning |\n| --- | --- |\n| `[xyz]   [a-c]` | [**Character class:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first or last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character.<br><br>For example, `[abcd]` is the same as `[a-d]`. They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".<br><br>For example, `[abcd-]` and `[-abcd]` match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in \"non-profit\".<br><br>For example, `[\\w-]` is the same as `[A-Za-z0-9_-]`. They both match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"n\" in \"non-profit\". |\n| `[^xyz]   [^a-c]` | [**Negated character class:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) Matches anything that is not enclosed in the square brackets. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first character after the `^` or the last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character. For example, `[^abc]` is the same as `[^a-c]`. They initially match \"o\" in \"bacon\" and \"h\" in \"chop\".<br><br>**Note:** The ^ character may also indicate the [beginning of input](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions). |\n| `.` | [**Wildcard:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard) Matches any single character _except_ line terminators: `\\n`, `\\r`, `\\u2028` or `\\u2029`. For example, `/.y/` matches \"my\" and \"ay\", but not \"yes\", in \"yes make my day\", as there is no character before \"y\" in \"yes\". If the [`dotAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) (s) flag is enabled, also matches line terminators. Inside a character class, the dot loses its special meaning and matches a literal dot. |\n| `\\d` | [**Digit character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any digit (Arabic numeral). Equivalent to `[0-9]`. For example, `/\\d/` or `/[0-9]/` matches \"2\" in \"B2 is the suite number\". |\n| `\\D` | [**Non-digit character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any character that is not a digit (Arabic numeral). Equivalent to `[^0-9]`. For example, `/\\D/` or `/[^0-9]/` matches \"B\" in \"B2 is the suite number\". |\n| `\\w` | [**Word character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to `[A-Za-z0-9_]`. For example, `/\\w/` matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\" in \"3D\" and \"m\" in \"Émanuel\". |\n| `\\W` | [**Non-word character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches any character that is not a word character from the basic Latin alphabet. Equivalent to `[^A-Za-z0-9_]`. For example, `/\\W/` or `/[^A-Za-z0-9_]/` matches \"%\" in \"50%\" and \"É\" in \"Émanuel\". |\n| `\\s` | [**White space character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to `[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]`. For example, `/\\s\\w*/` matches \" bar\" in \"foo bar\". |\n| `\\S` | [**Non-white space character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) Matches a single character other than white space. Equivalent to `[^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]`. For example, `/\\S\\w*/` matches \"foo\" in \"foo bar\". |\n| `\\t` | Matches a horizontal tab. |\n| `\\r` | Matches a carriage return. |\n| `\\n` | Matches a linefeed. |\n| `\\v` | Matches a vertical tab. |\n| `\\f` | Matches a form-feed. |\n| `[\\b]` | Matches a backspace. If you're looking for the word-boundary assertion (`\\b`), see [Assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions). |\n| `\\0` | Matches a NUL character. Do not follow this with another digit. |\n| `\\c_X_` | Matches a control character using [caret notation](https://en.wikipedia.org/wiki/Caret_notation), where \"X\" is a letter from A–Z (corresponding to code points `U+0001`_–_`U+001A`). For example, `/\\cM\\cJ/` matches \"\\\\r\\\\n\". |\n| `\\x_hh_` | Matches the character with the code `_hh_` (two hexadecimal digits). |\n| `\\u_hhhh_` | Matches a UTF-16 code-unit with the value `_hhhh_` (four hexadecimal digits). |\n| `\\u_{hhhh}_ or _\\u{hhhhh}_` | (Only when the `u` flag is set.) Matches the character with the Unicode value `U+_hhhh_` or `U+_hhhhh_` (hexadecimal digits). |\n| `\\p{_UnicodeProperty_}`, `\\P{_UnicodeProperty_}` | [**Unicode character class escape:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) Matches a character based on its Unicode character properties: for example, emoji characters, or Japanese _katakana_ characters, or Chinese/Japanese Han/Kanji characters, etc.). |\n| `\\` | Indicates that the following character should be treated specially, or \"escaped\". It behaves one of two ways.<br><br>*   For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, `/b/` matches the character \"b\". By placing a backslash in front of \"b\", that is by using `/\\b/`, the character becomes special to mean match a word boundary.<br>*   For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, \"\\*\" is a special character that means 0 or more occurrences of the preceding character should be matched; for example, `/a*/` means match 0 or more \"a\"s. To match `*` literally, precede it with a backslash; for example, `/a\\*/` matches \"a\\*\".<br><br>**Note:** To match this character literally, escape it with itself. In other words to search for `\\` use `/\\\\/`. |\n| `_x_\\|_y_` | [**Disjunction:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) Matches either \"x\" or \"y\". Each component, separated by a pipe (`\\|`), is called an _alternative_. For example, `/green\\|red/` matches \"green\" in \"green apple\" and \"red\" in \"red apple\".<br><br>**Note:** A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a [group](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) to make it part of a bigger pattern. `[abc]` is functionally equivalent to `(?:a\\|b\\|c)`. |\n\n## [Assertions](#assertions)\n\n[Assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).\n\n### [Boundary-type assertions](#boundary-type_assertions)\n\n| Characters | Meaning |\n| --- | --- |\n| `^` | [**Input boundary beginning assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) Matches the beginning of input. If the [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) (m) flag is enabled, also matches immediately after a line break character. For example, `/^A/` does not match the \"A\" in \"an A\", but does match the first \"A\" in \"An A\".<br><br>**Note:** This character has a different meaning when it appears at the start of a [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes). |\n| `$` | [**Input boundary end assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) Matches the end of input. If the [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) (m) flag is enabled, also matches immediately before a line break character. For example, `/t$/` does not match the \"t\" in \"eater\", but does match it in \"eat\". |\n| `\\b` | [**Word boundary assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) Matches a word boundary. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space. Note that a matched word boundary is not included in the match. In other words, the length of a matched word boundary is zero.<br><br>Examples:<br><br>*   `/\\bm/` matches the \"m\" in \"moon\".<br>*   `/oo\\b/` does not match the \"oo\" in \"moon\", because \"oo\" is followed by \"n\" which is a word character.<br>*   `/oon\\b/` matches the \"oon\" in \"moon\", because \"oon\" is the end of the string, thus not followed by a word character.<br>*   `/\\w\\b\\w/` will never match anything, because a word character can never be followed by both a non-word and a word character.<br><br>To match a backspace character (`[\\b]`), see [Character Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes). |\n| `\\B` | [**Non-word-boundary assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) Matches a non-word boundary. This is a position where the previous and next character are of the same type: Either both must be words, or both must be non-words, for example between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match. For example, `/\\Bon/` matches \"on\" in \"at noon\", and `/ye\\B/` matches \"ye\" in \"possibly yesterday\". |\n\n### [Other assertions](#other_assertions)\n\n**Note:** The `?` character may also be used as a quantifier.\n\n| Characters | Meaning |\n| --- | --- |\n| `x(?=y)` | [**Lookahead assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) Matches \"x\" only if \"x\" is followed by \"y\". For example, `/Jack(?=Sprat)/` matches \"Jack\" only if it is followed by \"Sprat\".  <br>`/Jack(?=Sprat\\|Frost)/` matches \"Jack\" only if it is followed by \"Sprat\" or \"Frost\". However, neither \"Sprat\" nor \"Frost\" is part of the match results. |\n| `x(?!y)` | [**Negative lookahead assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) Matches \"x\" only if \"x\" is not followed by \"y\". For example, `/\\d+(?!\\.)/` matches a number only if it is not followed by a decimal point. `/\\d+(?!\\.)/.exec('3.141')` matches \"141\" but not \"3\". |\n| `(?<=y)x` | [**Lookbehind assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) Matches \"x\" only if \"x\" is preceded by \"y\". For example, `/(?<=Jack)Sprat/` matches \"Sprat\" only if it is preceded by \"Jack\". `/(?<=Jack\\|Tom)Sprat/` matches \"Sprat\" only if it is preceded by \"Jack\" or \"Tom\". However, neither \"Jack\" nor \"Tom\" is part of the match results. |\n| `(?<!y)x` | [**Negative lookbehind assertion:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) Matches \"x\" only if \"x\" is not preceded by \"y\". For example, `/(?<!-)\\d+/` matches a number only if it is not preceded by a minus sign. `/(?<!-)\\d+/.exec('3')` matches \"3\". `/(?<!-)\\d+/.exec('-3')` match is not found because the number is preceded by the minus sign. |\n\n## [Groups and backreferences](#groups_and_backreferences)\n\n[Groups and backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) indicate groups of expression characters.\n\n| Characters | Meaning |\n| --- | --- |\n| `(_x_)` | [**Capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) Matches `_x_` and remembers the match. For example, `/(foo)/` matches and remembers \"foo\" in \"foo bar\".<br><br>A regular expression may have multiple capturing groups. In results, matches to capturing groups typically in an array whose members are in the same order as the left parentheses in the capturing group. This is usually just the order of the capturing groups themselves. This becomes important when capturing groups are nested. Matches are accessed using the index of the result's elements (`[1], …, [n]`) or from the predefined `RegExp` object's properties (`$1, …, $9`).<br><br>Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses (see below).<br><br>`[String.prototype.match()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)` won't return groups if the `/.../g` flag is set. However, you can still use `[String.prototype.matchAll()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)` to get all matches. |\n| `(?<Name>x)` | [**Named capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) Matches \"x\" and stores it on the groups property of the returned matches under the name specified by `<Name>`. The angle brackets (`<` and `>`) are required for group name.<br><br>For example, to extract the United States area code from a phone number, we could use `/\\((?<area>\\d\\d\\d)\\)/`. The resulting number would appear under `matches.groups.area`. |\n| `(?:_x_)` | [**Non-capturing group:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group) Matches \"x\" but does not remember the match. The matched substring cannot be recalled from the resulting array's elements (`[1], …, [n]`) or from the predefined `RegExp` object's properties (`$1, …, $9`). |\n| `\\_n_` | [**Backreference:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) Where \"n\" is a positive integer. Matches the same substring matched by the nth capturing group in the regular expression (counting left parentheses). For example, `/apple(,)\\sorange\\1/` matches \"apple, orange,\" in \"apple, orange, cherry, peach\". |\n| `\\k<Name>` | [**Named backreference:**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference) A back reference to the last substring matching the **Named capture group** specified by `<Name>`.<br><br>For example, `/(?<title>\\w+), yes \\k<title>/` matches \"Sir, yes Sir\" in \"Do you copy? Sir, yes Sir!\".<br><br>**Note:** `\\k` is used literally here to indicate the beginning of a back reference to a Named capture group. |\n\n## [Quantifiers](#quantifiers)\n\n[Quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) indicate numbers of characters or expressions to match.\n\n| Characters | Meaning |\n| --- | --- |\n| `_x_*` | Matches the preceding item \"x\" 0 or more times. For example, `/bo*/` matches \"boooo\" in \"A ghost booooed\" and \"b\" in \"A bird warbled\", but nothing in \"A goat grunted\". |\n| `_x_+` | Matches the preceding item \"x\" 1 or more times. Equivalent to `{1,}`. For example, `/a+/` matches the \"a\" in \"candy\" and all the \"a\"'s in \"caaaaaaandy\". |\n| `_x_?` | Matches the preceding item \"x\" 0 or 1 times. For example, `/e?le?/` matches the \"el\" in \"angel\" and the \"le\" in \"angle.\"<br><br>If used immediately after any of the quantifiers `*`, `+`, `?`, or `{}`, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). |\n| `_x_{_n_}` | Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of the preceding item \"x\". For example, `/a{2}/` doesn't match the \"a\" in \"candy\", but it matches all of the \"a\"'s in \"caandy\", and the first two \"a\"'s in \"caaandy\". |\n| `_x_{_n_,}` | Where \"n\" is a non-negative integer, matches at least \"n\" occurrences of the preceding item \"x\". For example, `/a{2,}/` doesn't match the \"a\" in \"candy\", but matches all of the a's in \"caandy\" and in \"caaaaaaandy\". |\n| `_x_{_n_,_m_}` | Where \"n\" and \"m\" are non-negative integers and `m >= n`, matches at least \"n\" and at most \"m\" occurrences of the preceding item \"x\". For example, `/a{1,3}/` matches nothing in \"cndy\", the \"a\" in \"candy\", the two \"a\"'s in \"caandy\", and the first three \"a\"'s in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\", the match is \"aaa\", even though the original string had more \"a\"s in it. |\n| `_x_*?`  <br>`_x_+?`  <br>`_x_??`  <br>`_x_{n}?`  <br>`_x_{n,}?`  <br>`_x_{n,m}?` | By default quantifiers like `*` and `+` are \"greedy\", meaning that they try to match as much of the string as possible. The `?` character after the quantifier makes the quantifier \"non-greedy\": meaning that it will stop as soon as it finds a match. For example, given a string like \"some <foo> <bar> new </bar> </foo> thing\":<br><br>*   `/<.*>/` will match \"<foo> <bar> new </bar> </foo>\"<br>*   `/<.*?>/` will match \"<foo>\" |",
    "title": "Regular expression syntax cheat sheet - JavaScript | MDN",
    "description": "This page provides an overall cheat sheet of all the capabilities of RegExp syntax by aggregating the content of the articles in the RegExp guide. If you need more information on a specific topic, please follow the link on the corresponding heading to access the full article or head to the guide.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices",
    "markdown": "# RegExp.prototype.hasIndices - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`hasIndices`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `d` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.hasIndices` has the value `true` if the `d` flag was used; otherwise, `false`. The `d` flag indicates that the result of a regular expression match should contain the start and end indices of the substrings of each capture group. It does not change the regex's interpretation or matching behavior in any way, but only provides additional information in the matching result.\n\nThis flag primarily affects the return value of [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec). If the `d` flag is present, the array returned by `exec()` has an additional `indices` property as described in the `exec()` method's [return value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#return_value). Because all other regex-related methods (such as [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)) call `exec()` internally, they will also return the indices if the regex has the `d` flag.\n\nThe set accessor of `hasIndices` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using hasIndices](#using_hasindices)\n\n```\nconst str1 = \"foo bar foo\";\n\nconst regex1 = /foo/dg;\n\nconsole.log(regex1.hasIndices); // true\n\nconsole.log(regex1.exec(str1).indices[0]); // [0, 3]\nconsole.log(regex1.exec(str1).indices[0]); // [8, 11]\n\nconst str2 = \"foo bar foo\";\n\nconst regex2 = /foo/;\n\nconsole.log(regex2.hasIndices); // false\n\nconsole.log(regex2.exec(str2).indices); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.hasIndices](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.hasIndices) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.hasIndices - JavaScript | MDN",
    "description": "The hasIndices accessor property of RegExp instances returns whether or not the d flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase",
    "markdown": "# RegExp.prototype.ignoreCase - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n`RegExp.prototype.ignoreCase` has the value `true` if the `i` flag was used; otherwise, `false`. The `i` flag indicates that case should be ignored while attempting a match in a string. Case-insensitive matching is done by mapping both the expected character set and the matched string to the same casing.\n\nIf the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), the case mapping happens through _simple case folding_ specified in [`CaseFolding.txt`](https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt). The mapping always maps to a single code point, so it does not map, for example, `ß` (U+00DF LATIN SMALL LETTER SHARP S) to `ss` (which is _full case folding_, not _simple case folding_). It may however map code points outside the Basic Latin block to code points within it — for example, `ſ` (U+017F LATIN SMALL LETTER LONG S) case-folds to `s` (U+0073 LATIN SMALL LETTER S) and `K` (U+212A KELVIN SIGN) case-folds to `k` (U+006B LATIN SMALL LETTER K). Therefore, `ſ` and `K` can be matched by `/[a-z]/ui`.\n\nIf the regex is Unicode-unaware, case mapping uses the [Unicode Default Case Conversion](https://unicode-org.github.io/icu/userguide/transforms/casemappings.html) — the same algorithm used in [`String.prototype.toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase). For example, `Ω` (U+2126 OHM SIGN) and `Ω` (U+03A9 GREEK CAPITAL LETTER OMEGA) are both mapped by Default Case Conversion to themselves but by simple case folding to `ω` (U+03C9 GREEK SMALL LETTER OMEGA), so `\"ω\"` is matched by `/[\\u2126]/ui` and `/[\\u03a9]/ui` but not by `/[\\u2126]/i` or `/[\\u03a9]/i`. This algorithm prevents code points outside the Basic Latin block to be mapped to code points within it, so `ſ` and `K` mentioned previously are not matched by `/[a-z]/i`.\n\nThe set accessor of `ignoreCase` is `undefined`. You cannot change this property directly.",
    "title": "RegExp.prototype.ignoreCase - JavaScript | MDN",
    "description": "The ignoreCase accessor property of RegExp instances returns whether or not the i flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global",
    "markdown": "# RegExp.prototype.global - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`global`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `g` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.global` has the value `true` if the `g` flag was used; otherwise, `false`. The `g` flag indicates that the regular expression should be tested against all possible matches in a string. Each call to [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) will update its [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property, so that the next call to `exec()` will start at the next character.\n\nSome methods, such as [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll), will validate that, if the parameter is a regex, it is global. The regex's [`@@match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) and [`@@replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace) methods (called by [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) and [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)) would also have different behaviors when the regex is global.\n\nThe set accessor of `global` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using global](#using_global)\n\n```\nconst regex = /foo/g;\nconsole.log(regex.global); // true\n\nconst str = \"fooexamplefoo\";\nconst str1 = str.replace(regex, \"\");\nconsole.log(str1); // example\n\nconst regex1 = /foo/;\nconst str2 = str.replace(regex1, \"\");\nconsole.log(str2); // examplefoo\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.global](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.global) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.global - JavaScript | MDN",
    "description": "The global accessor property of RegExp instances returns whether or not the g flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll",
    "markdown": "# RegExp.prototype.dotAll - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`dotAll`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `s` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.dotAll` has the value `true` if the `s` flag was used; otherwise, `false`. The `s` flag indicates that the dot special character (`.`) should additionally match the following line terminator (\"newline\") characters in a string, which it would not match otherwise:\n\n*   U+000A LINE FEED (LF) (`\\n`)\n*   U+000D CARRIAGE RETURN (CR) (`\\r`)\n*   U+2028 LINE SEPARATOR\n*   U+2029 PARAGRAPH SEPARATOR\n\nThis effectively means the dot will match any character on the Unicode Basic Multilingual Plane (BMP). To allow it to match astral characters, the `u` (unicode) flag should be used. Using both flags in conjunction allows the dot to match any Unicode character, without exceptions.\n\nThe set accessor of `dotAll` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using dotAll](#using_dotall)\n\n```\nconst str1 = \"bar\\nexample foo example\";\n\nconst regex1 = /bar.example/s;\n\nconsole.log(regex1.dotAll); // true\n\nconsole.log(str1.replace(regex1, \"\")); // foo example\n\nconst str2 = \"bar\\nexample foo example\";\n\nconst regex2 = /bar.example/;\n\nconsole.log(regex2.dotAll); // false\n\nconsole.log(str2.replace(regex2, \"\"));\n// bar\n// example foo example\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.dotAll](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.dotAll) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.dotAll - JavaScript | MDN",
    "description": "The dotAll accessor property of RegExp instances returns whether or not the s flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode",
    "markdown": "# RegExp.prototype.unicode - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`unicode`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `u` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.unicode` has the value `true` if the `u` flag was used; otherwise, `false`. The `u` flag enables various Unicode-related features. With the \"u\" flag:\n\n*   Any [Unicode code point escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) (`\\u{xxxx}`, `\\p{UnicodePropertyValue}`) will be interpreted as such instead of identity escapes. For example `/\\u{61}/u` matches `\"a\"`, but `/\\u{61}/` (without `u` flag) matches `\"u\".repeat(61)`, where the `\\u` is equivalent to a single `u`.\n*   Surrogate pairs will be interpreted as whole characters instead of two separate characters. For example, `/[😄]/u` would only match `\"😄\"` but not `\"\\ud83d\"`.\n*   When [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) is automatically advanced (such as when calling [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)), unicode regexes advance by Unicode code points instead of UTF-16 code units.\n\nThere are other changes to the parsing behavior that prevent possible syntax mistakes (which are analogous to [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) for regex syntax). These syntaxes are all [deprecated and only kept for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on them.\n\nThe set accessor of `unicode` is `undefined`. You cannot change this property directly.\n\n### [Unicode-aware mode](#unicode-aware_mode)\n\nWhen we refer to _Unicode-aware mode_, we mean the regex has either the `u` or the [`v`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag, in which case the regex enables Unicode-related features (such as [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape)) and has much stricter syntax rules. Because `u` and `v` interpret the same regex in incompatible ways, using both flags results in a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\nSimilarly, a regex is _Unicode-unaware_ if it has neither the `u` nor the `v` flag. In this case, the regex is interpreted as a sequence of UTF-16 code units, and there are many legacy syntaxes that do not become syntax errors.\n\n## [Examples](#examples)\n\n### [Using the unicode property](#using_the_unicode_property)\n\n```\nconst regex = /\\u{61}/u;\n\nconsole.log(regex.unicode); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.unicode](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.unicode) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.unicode - JavaScript | MDN",
    "description": "The unicode accessor property of RegExp instances returns whether or not the u flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets",
    "markdown": "# RegExp.prototype.unicodeSets - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`unicodeSets`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `v` flag is used with this regular expression.\n\n## [Description](#description)\n\n`RegExp.prototype.unicodeSets` has the value `true` if the `v` flag was used; otherwise, `false`. The `v` flag is an \"upgrade\" to the [`u`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) flag that enables more Unicode-related features. (\"v\" is the next letter after \"u\" in the alphabet.) Because `u` and `v` interpret the same regex in incompatible ways, using both flags results in a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). With the `v` flag, you get all features mentioned in the `u` flag description, plus:\n\n*   The [`\\p`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) escape sequence can be additionally used to match properties of strings, instead of just characters.\n*   The [character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) syntax is upgraded to allow intersection, union, and subtraction syntaxes, as well as matching multiple Unicode characters.\n*   The character class complement syntax `[^...]` constructs a complement class instead of negating the match result, avoiding some confusing behaviors with case-insensitive matching. For more information, see [Complement classes and case-insensitive matching](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#complement_classes_and_case-insensitive_matching).\n\nSome valid `u`\\-mode regexes become invalid in `v`\\-mode. Specifically, the character class syntax is different and some characters can no longer appear literally. For more information, see [`v`\\-mode character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class).\n\n**Note:** The `v` mode does not interpret grapheme clusters as single characters; they are still multiple code points. For example, `/[🇺🇳]/v` is still able to match `\"🇺\"`.\n\nThe set accessor of `unicodeSets` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using the unicodeSets property](#using_the_unicodesets_property)\n\n```\nconst regex = /[\\p{Script_Extensions=Greek}&&\\p{Letter}]/v;\n\nconsole.log(regex.unicodeSets); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.unicodesets](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.unicodesets) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.unicodeSets - JavaScript | MDN",
    "description": "The unicodeSets accessor property of RegExp instances returns whether or not the v flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky",
    "markdown": "# RegExp.prototype.sticky - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`sticky`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `y` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.sticky` has the value `true` if the `y` flag was used; otherwise, `false`. The `y` flag indicates that the regex attempts to match the target string only from the index indicated by the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property (and unlike a global regex, does not attempt to match from any later indexes).\n\nThe set accessor of `sticky` is `undefined`. You cannot change this property directly.\n\nFor both sticky regexes and [global](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) regexes:\n\n*   They start matching at `lastIndex`.\n*   When the match succeeds, `lastIndex` is advanced to the end of the match.\n*   When `lastIndex` is out of bounds of the currently matched string, `lastIndex` is reset to 0.\n\nHowever, for the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method, the behavior when matching fails is different:\n\n*   When the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method is called on a sticky regex, if the regex fails to match at `lastIndex`, the regex immediately returns `null` and resets `lastIndex` to 0.\n*   When the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method is called on a global regex, if the regex fails to match at `lastIndex`, it tries to match from the next character, and so on until a match is found or the end of the string is reached.\n\nFor the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method, a regex that's both sticky and global behaves the same as a sticky and non-global regex. Because [`test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) is a simple wrapper around `exec()`, `test()` would ignore the global flag and perform sticky matches as well. However, due to many other methods special-casing the behavior of global regexes, the global flag is, in general, orthogonal to the sticky flag.\n\n*   [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) (which calls [`RegExp.prototype[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)): `y`, `g` and `gy` are all different.\n    *   For `y` regexes: `matchAll()` throws; `[@@matchAll]()` yields the `exec()` result exactly once, without updating the regex's `lastIndex`.\n    *   For `g` or `gy` regexes: returns an iterator that yields a sequence of `exec()` results.\n*   [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) (which calls [`RegExp.prototype[@@match]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)): `y`, `g` and `gy` are all different.\n    *   For `y` regexes: returns the `exec()` result and updates the regex's `lastIndex`.\n    *   For `g` or `gy` regexes: returns an array of all `exec()` results.\n*   [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) (which calls [`RegExp.prototype[@@search]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)): the `g` flag is always irrelevant.\n    *   For `y` or `gy` regexes: always returns `0` (if the very beginning of the string matches) or `-1` (if the beginning doesn't match), without updating the regex's `lastIndex` when it exits.\n    *   For `g` regexes: returns the index of the first match in the string, or `-1` if no match is found.\n*   [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) (which calls [`RegExp.prototype[@@split]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)): `y`, `g`, and `gy` all have the same behavior.\n*   [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) (which calls [`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)): `y`, `g` and `gy` are all different.\n    *   For `y` regexes: replaces once at the current `lastIndex` and updates `lastIndex`.\n    *   For `g` and `gy` regexes: replaces all occurrences matched by `exec()`.\n*   [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) (which calls [`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)): `y`, `g` and `gy` are all different.\n    *   For `y` regexes: `replaceAll()` throws.\n    *   For `g` and `gy` regexes: replaces all occurrences matched by `exec()`.\n\n## [Examples](#examples)\n\n### [Using a regular expression with the sticky flag](#using_a_regular_expression_with_the_sticky_flag)\n\n```\nconst str = \"#foo#\";\nconst regex = /foo/y;\n\nregex.lastIndex = 1;\nregex.test(str); // true\nregex.lastIndex = 5;\nregex.test(str); // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex; // 0 (reset after match failure)\n```\n\n### [Anchored sticky flag](#anchored_sticky_flag)\n\nFor several versions, Firefox's SpiderMonkey engine had [a bug](https://bugzil.la/773687) with regard to the `^` assertion and the sticky flag which allowed expressions starting with the `^` assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the specification [specifically calls out](https://tc39.es/ecma262/multipage/text-processing.html#sec-compileassertion) the fact that:\n\n> Even when the `y` flag is used with a pattern, `^` always matches only at the beginning of _Input_, or (if _rer_.\\[\\[Multiline\\]\\] is `true`) at the beginning of a line.\n\nExamples of correct behavior:\n\n```\nconst regex = /^foo/y;\nregex.lastIndex = 2;\nregex.test(\"..foo\"); // false - index 2 is not the beginning of the string\n\nconst regex2 = /^foo/my;\nregex2.lastIndex = 2;\nregex2.test(\"..foo\"); // false - index 2 is not the beginning of the string or line\nregex2.lastIndex = 2;\nregex2.test(\".\\nfoo\"); // true - index 2 is the beginning of a line\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.sticky](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.sticky) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.sticky - JavaScript | MDN",
    "description": "The sticky accessor property of RegExp instances returns whether or not the y flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline",
    "markdown": "# RegExp.prototype.multiline - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`multiline`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns whether or not the `m` flag is used with this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.multiline` has the value `true` if the `m` flag was used; otherwise, `false`. The `m` flag indicates that a multiline input string should be treated as multiple lines. For example, if `m` is used, `^` and `$` change from matching at only the start or end of the entire string to the start or end of any line within the string.\n\nThe set accessor of `multiline` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using multiline](#using_multiline)\n\n```\nconst regex = /foo/m;\n\nconsole.log(regex.multiline); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.multiline](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.multiline) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RegExp.prototype.multiline - JavaScript | MDN",
    "description": "The multiline accessor property of RegExp instances returns whether or not the m flag is used with this regular expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator",
    "markdown": "# Symbol.iterator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.iterator`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@iterator`. The [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an `@@iterator` key.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@iterator`.\n\n| Property attributes of `Symbol.iterator` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nWhenever an object needs to be iterated (such as at the beginning of a `for...of` loop), its `@@iterator` method is called with no arguments, and the returned **iterator** is used to obtain the values to be iterated.\n\nSome built-in types have a default iteration behavior, while other types (such as [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)) do not. Some built-in types with a `@@iterator` method are:\n\n*   [`Array.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n*   [`TypedArray.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n*   [`String.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n*   [`Map.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator)\n*   [`Set.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator)\n\nSee also [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for more information.\n\n## [Examples](#examples)\n\n### [User-defined iterables](#user-defined_iterables)\n\nWe can make our own iterables like this:\n\n```\nconst myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n[...myIterable]; // [1, 2, 3]\n```\n\nOr iterables can be defined directly inside a class or object using a [computed property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names):\n\n```\nclass Foo {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n\nconst someObj = {\n  *[Symbol.iterator]() {\n    yield \"a\";\n    yield \"b\";\n  },\n};\n\nconsole.log(...new Foo()); // 1, 2, 3\nconsole.log(...someObj); // 'a', 'b'\n```\n\n### [Non-well-formed iterables](#non-well-formed_iterables)\n\nIf an iterable's `@@iterator` method does not return an iterator object, then it is a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:\n\n```\nconst nonWellFormedIterable = {};\nnonWellFormedIterable[Symbol.iterator] = () => 1;\n[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.iterator](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Symbol.iterator - JavaScript | MDN",
    "description": "The Symbol.iterator static data property represents the well-known symbol @@iterator. The iterable protocol looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an @@iterator key.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator",
    "markdown": "# Symbol.asyncIterator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.asyncIterator`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@asyncIterator`. The [async iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an `@@asyncIterator` key.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@asyncIterator`.\n\n| Property attributes of `Symbol.asyncIterator` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [User-defined async iterables](#user-defined_async_iterables)\n\nYou can define your own async iterable by setting the `[Symbol.asyncIterator]` property on an object.\n\n```\nconst myAsyncIterable = {\n  async *[Symbol.asyncIterator]() {\n    yield \"hello\";\n    yield \"async\";\n    yield \"iteration!\";\n  },\n};\n\n(async () => {\n  for await (const x of myAsyncIterable) {\n    console.log(x);\n  }\n})();\n// Logs:\n// \"hello\"\n// \"async\"\n// \"iteration!\"\n```\n\nWhen creating an API, remember that async iterables are designed to represent something _iterable_ — like a stream of data or a list —, not to completely replace callbacks and events in most situations.\n\n### [Built-in async iterables](#built-in_async_iterables)\n\nThere is no object in the core JavaScript language that is async iterable. Some web APIs, such as [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), have the `Symbol.asyncIterator` method set by default.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.asynciterator](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.asynciterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Symbol.asyncIterator - JavaScript | MDN",
    "description": "The Symbol.asyncIterator static data property represents the well-known symbol @@asyncIterator. The async iterable protocol looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an @@asyncIterator key.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add",
    "markdown": "# Atomics.add() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.add()`** static method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.add(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to add a `value` to.\n\n[`value`](#value)\n\nThe number to add.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using add()](#using_add)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.add(ta, 0, 12); // returns 0, the old value\nAtomics.load(ta, 0); // 12\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.add](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.add) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.add() - JavaScript | MDN",
    "description": "The Atomics.add() static\n  method adds a given value at a given position in the array and returns the old value at\n  that position. This atomic operation guarantees that no other write happens until the\n  modified value is written back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree",
    "markdown": "# Atomics.isLockFree() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.isLockFree()`** static method is used to determine whether the `Atomics` methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It is intended as an optimization primitive, so that high-performance algorithms can determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free, it is often more efficient for an algorithm to provide its own locking.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`size`](#size)\n\nThe size in bytes to check.\n\n### [Return value](#return_value)\n\nA `true` or `false` value indicating whether the operation is lock free.\n\n*   Always `true` if `size` is 4, because all known platforms support 4-byte atomic operations.\n*   Always `false` if the given size is not one of the [`BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT) property of integer TypedArray types.\n\n## [Examples](#examples)\n\n### [Using isLockFree](#using_islockfree)\n\n```\nAtomics.isLockFree(1); // true (platform-dependent)\nAtomics.isLockFree(2); // true (platform-dependent)\nAtomics.isLockFree(3); // false\nAtomics.isLockFree(4); // true\nAtomics.isLockFree(5); // false\nAtomics.isLockFree(6); // false\nAtomics.isLockFree(7); // false\nAtomics.isLockFree(8); // true (platform-dependent)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.islockfree](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.islockfree) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.isLockFree() - JavaScript | MDN",
    "description": "The Atomics.isLockFree() static method is used to determine whether the Atomics methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It is intended as an optimization primitive, so that high-performance algorithms can determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free, it is often more efficient for an algorithm to provide its own locking.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and",
    "markdown": "# Atomics.and() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.and()`** static method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.and(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to compute the bitwise AND.\n\n[`value`](#value)\n\nThe number to compute the bitwise AND with.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Description](#description)\n\nThe bitwise AND operation only yields 1, if both `a` and `b` are 1. The truth table for the AND operation is:\n\n| `a` | `b` | `a & b` |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 0   |\n| 1   | 0   | 0   |\n| 1   | 1   | 1   |\n\nFor example, a bitwise AND of `5 & 1` results in `0001` which is 1 in decimal.\n\n5  0101\n1  0001\n   ----\n1  0001\n\n## [Examples](#examples)\n\n### [Using and()](#using_and)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 5;\n\nAtomics.and(ta, 0, 1); // returns 5, the old value\nAtomics.load(ta, 0); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.and](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.and) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.and() - JavaScript | MDN",
    "description": "The Atomics.and() static\n  method computes a bitwise AND with a given value at a given position in the array, and\n  returns the old value at that position. This atomic operation guarantees that no other\n  write happens until the modified value is written back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange",
    "markdown": "# Atomics.compareExchange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.compareExchange()`** static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.compareExchange(typedArray, index, expectedValue, replacementValue)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to exchange a `replacementValue`.\n\n[`expectedValue`](#expectedvalue)\n\nThe value to check for equality.\n\n[`replacementValue`](#replacementvalue)\n\nThe number to exchange.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`). If the return value is equal to `expectedValue`, the exchange was successful; otherwise, the exchange failed.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using compareExchange()](#using_compareexchange)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 7;\n\nAtomics.compareExchange(ta, 0, 7, 12); // returns 7, the old value\nAtomics.load(ta, 0); // 12\n```\n\n### [Checking the return value](#checking_the_return_value)\n\n[Compare-and-swap](https://en.wikipedia.org/wiki/Compare-and-swap) guarantees that the new value is calculated based on up-to-date information; if the value had been updated by another thread in the meantime, the write would fail. Therefore, you should check the return value of `compareExchange()` to check if it has failed, and retry if necessary.\n\nHere is one example of an atomic adder (same functionality as [`Atomics.add()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add)), adapted from the linked Wikipedia article:\n\n```\nfunction add(mem, index, value) {\n  let done = false;\n  while (!done) {\n    const value = Atomics.load(mem, index);\n    done = Atomics.compareExchange(p, value, value + a) === value;\n  }\n  return value + a;\n}\n```\n\nIt first reads the value at the given index, then tries to update it with the new value. It keeps retrying until it successfully updates the value.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.compareexchange](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.compareexchange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.compareExchange() - JavaScript | MDN",
    "description": "The Atomics.compareExchange() static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange",
    "markdown": "# Atomics.exchange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.exchange()`** static method exchanges a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.exchange(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to exchange a `value`.\n\n[`value`](#value)\n\nThe number to exchange.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using exchange()](#using_exchange)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.exchange(ta, 0, 12); // returns 0, the old value\nAtomics.load(ta, 0); // 12\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.exchange](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.exchange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.exchange() - JavaScript | MDN",
    "description": "The Atomics.exchange() static method exchanges a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load",
    "markdown": "# Atomics.load() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.load()`** static method returns a value at a given position in the array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.load(typedArray, index)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to load from.\n\n### [Return value](#return_value)\n\nThe value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using `load`](#using_load)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.add(ta, 0, 12);\nAtomics.load(ta, 0); // 12\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.load](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.load) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.load() - JavaScript | MDN",
    "description": "The Atomics.load() static\n  method returns a value at a given position in the array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify",
    "markdown": "# Atomics.notify() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.notify()`** static method notifies up some agents that are sleeping in the wait queue.\n\n## [Syntax](#syntax)\n\n```\nAtomics.notify(typedArray, index, count)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n[`index`](#index)\n\nThe position in the `typedArray` to wake up on.\n\n[`count`](#count) Optional\n\nThe number of sleeping agents to notify. Defaults to [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity).\n\n### [Return value](#return_value)\n\n*   Returns the number of woken up agents.\n*   Returns `0`, if a non-shared [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) object is used.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not an [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using `notify`](#using_notify)\n\nGiven a shared `Int32Array`:\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).\n\n```\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has written:\n\n```\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.notify](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.notify) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.notify() - JavaScript | MDN",
    "description": "The Atomics.notify() static\n  method notifies up some agents that are sleeping in the wait queue.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store",
    "markdown": "# Atomics.store() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.store()`** static method stores a given value at the given position in the array and returns that value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.store(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to store a `value` in.\n\n[`value`](#value)\n\nThe number to store.\n\n### [Return value](#return_value)\n\nThe value that has been stored.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using store()](#using_store)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.store(ta, 0, 12); // 12\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.store](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.store) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.store() - JavaScript | MDN",
    "description": "The Atomics.store() static\n  method stores a given value at the given position in the array and returns that value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub",
    "markdown": "# Atomics.sub() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.sub()`** static method subtracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.sub(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to subtract a `value` from.\n\n[`value`](#value)\n\nThe number to subtract.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using sub](#using_sub)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 48;\n\nAtomics.sub(ta, 0, 12); // returns 48, the old value\nAtomics.load(ta, 0); // 36\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.sub](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.sub) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.sub() - JavaScript | MDN",
    "description": "The Atomics.sub() static method subtracts a given value\n  at a given position in the array and returns the old value at that position. This atomic\n  operation guarantees that no other write happens until the modified value is written\n  back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or",
    "markdown": "# Atomics.or() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.or()`** static method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.or(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to compute the bitwise OR.\n\n[`value`](#value)\n\nThe number to compute the bitwise OR with.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Description](#description)\n\nThe bitwise OR operation yields 1, if either `a` or `b` are 1. The truth table for the OR operation is:\n\n| `a` | `b` | `a \\| b` |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 1   |\n| 1   | 0   | 1   |\n| 1   | 1   | 1   |\n\nFor example, a bitwise OR of `5 | 1` results in `0101` which is 5 in decimal.\n\n5  0101\n1  0001\n   ----\n5  0101\n\n## [Examples](#examples)\n\n### [Using or](#using_or)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 2;\n\nAtomics.or(ta, 0, 1); // returns 2, the old value\nAtomics.load(ta, 0); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.or](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.or) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.or() - JavaScript | MDN",
    "description": "The Atomics.or() static\n  method computes a bitwise OR with a given value at a given position in the array, and\n  returns the old value at that position. This atomic operation guarantees that no other\n  write happens until the modified value is written back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait",
    "markdown": "# Atomics.wait() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.wait()`** static method verifies that a shared memory location still contains a given value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which is either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`.\n\n## [Syntax](#syntax)\n\n```\nAtomics.wait(typedArray, index, value)\nAtomics.wait(typedArray, index, value, timeout)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n[`index`](#index)\n\nThe position in the `typedArray` to wait on.\n\n[`value`](#value)\n\nThe expected value to test.\n\n[`timeout`](#timeout) Optional\n\nTime to wait in milliseconds. [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) (and values that get converted to `NaN`, such as `undefined`) becomes [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity). Negative values become `0`.\n\n### [Return value](#return_value)\n\nA string which is either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   If `typedArray` is not an [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n*   If the current thread cannot be blocked (for example, because it's the main thread).\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using wait()](#using_wait)\n\nGiven a shared `Int32Array`:\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).\n\n```\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has written:\n\n```\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.wait](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.wait) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.wait() - JavaScript | MDN",
    "description": "The Atomics.wait() static\n  method verifies that a shared memory location still contains a\n  given value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which\n  is either \"ok\", \"not-equal\", or \"timed-out\".",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync",
    "markdown": "# Atomics.waitAsync() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.waitAsync()`** static method waits asynchronously on a shared memory location and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nUnlike [`Atomics.wait()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait), `waitAsync` is non-blocking and usable on the main thread.\n\n## [Syntax](#syntax)\n\n```\nAtomics.waitAsync(typedArray, index, value)\nAtomics.waitAsync(typedArray, index, value, timeout)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n[`index`](#index)\n\nThe position in the `typedArray` to wait on.\n\n[`value`](#value)\n\nThe expected value to test.\n\n[`timeout`](#timeout) Optional\n\nTime to wait in milliseconds. [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) (and values that get converted to `NaN`, such as `undefined`) becomes [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity). Negative values become `0`.\n\n### [Return value](#return_value)\n\nAn [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with the following properties:\n\n[`async`](#async)\n\nA boolean indicating whether the `value` property is a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) or not.\n\n[`value`](#value_2)\n\nIf `async` is `false`, it will be a string which is either `\"not-equal\"` or `\"timed-out\"` (only when the `timeout` parameter is `0`). If `async` is `true`, it will be a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which is fulfilled with a string value, either `\"ok\"` or `\"timed-out\"`. The promise is never rejected.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not an [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) or [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) that views a [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Examples](#examples)\n\n### [Using waitAsync()](#using_waitasync)\n\nGiven a shared `Int32Array`.\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. The `result.value` will be a promise.\n\n```\nconst result = Atomics.waitAsync(int32, 0, 0, 1000);\n// { async: true, value: Promise {<pending>} }\n```\n\nIn the reading thread or in another thread, the memory location 0 is called and the promise can be resolved with `\"ok\"`.\n\n```\nAtomics.notify(int32, 0);\n// { async: true, value: Promise {<fulfilled>: 'ok'} }\n```\n\nIf it isn't resolving to `\"ok\"`, the value in the shared memory location wasn't the expected (the `value` would be `\"not-equal\"` instead of a promise) or the timeout was reached (the promise will resolve to `\"time-out\"`).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.waitasync](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.waitasync) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.waitAsync() - JavaScript | MDN",
    "description": "The Atomics.waitAsync() static method waits asynchronously on a shared memory location and returns a Promise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor",
    "markdown": "# Atomics.xor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics.xor()`** static method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nAtomics.xor(typedArray, index, value)\n```\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nAn integer typed array. One of [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array), [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array), [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array), [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array), [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array), [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array), or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n[`index`](#index)\n\nThe position in the `typedArray` to compute the bitwise XOR.\n\n[`value`](#value)\n\nThe number to compute the bitwise XOR with.\n\n### [Return value](#return_value)\n\nThe old value at the given position (`typedArray[index]`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `typedArray` is not one of the allowed integer types.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index` is out of bounds in the `typedArray`.\n\n## [Description](#description)\n\nThe bitwise XOR operation yields 1, if `a` and `b` are different. The truth table for the XOR operation is:\n\n| `a` | `b` | `a ^ b` |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 1   |\n| 1   | 0   | 1   |\n| 1   | 1   | 0   |\n\nFor example, a bitwise XOR of `5 ^ 1` results in `0100` which is 4 in decimal.\n\n5  0101\n1  0001\n   ----\n4  0100\n\n## [Examples](#examples)\n\n### [Using xor](#using_xor)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 5;\n\nAtomics.xor(ta, 0, 1); // returns 5, the old value\nAtomics.load(ta, 0); // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics.xor](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.xor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics.xor() - JavaScript | MDN",
    "description": "The Atomics.xor() static\n  method computes a bitwise XOR with a given value at a given position in the array, and\n  returns the old value at that position. This atomic operation guarantees that no other\n  write happens until the modified value is written back.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN",
    "markdown": "# BigInt.asIntN() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`BigInt.asIntN()`** static method truncates a `BigInt` value to the given number of least significant bits and returns that value as a signed integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nBigInt.asIntN(bits, bigint)\n```\n\n### [Parameters](#parameters)\n\n[`bits`](#bits)\n\nThe amount of bits available for the returned BigInt. Should be an integer between 0 and 253 - 1, inclusive.\n\n[`bigint`](#bigint)\n\nThe BigInt value to truncate to fit into the supplied bits.\n\n### [Return value](#return_value)\n\nThe value of `bigint` modulo 2^`bits`, as a signed integer.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `bits` is negative or greater than 253 - 1.\n\n## [Description](#description)\n\nThe `BigInt.asIntN` method truncates a `BigInt` value to the given number of bits, and interprets the result as a signed integer. For example, for `BigInt.asIntN(3, 25n)`, the value `25n` is truncated to `1n`:\n\n25n = 00011001 (base 2)\n          ^=== Use only the three remaining bits\n===>       001 (base 2) = 1n\n\nIf the leading bit of the remaining number is `1`, the result is negative. For example, `BigInt.asIntN(4, 25n)` yields `-7n`, because `1001` is the encoding of `-7` under two's complement:\n\n25n = 00011001 (base 2)\n         ^==== Use only the four remaining bits\n===>      1001 (base 2) = -7n\n\n**Note:** `BigInt` values are always encoded as two's complement in binary.\n\nUnlike similar language APIs such as [`Number.prototype.toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential), `asIntN` is a static property of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), so you always use it as `BigInt.asIntN()`, rather than as a method of a BigInt value. Exposing `asIntN()` as a \"standard library function\" allows [interop with asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n\n## [Examples](#examples)\n\n### [Staying in 64-bit ranges](#staying_in_64-bit_ranges)\n\nThe `BigInt.asIntN()` method can be useful to stay in the range of 64-bit arithmetic.\n\n```\nconst max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(64, max); // 9223372036854775807n\n\nBigInt.asIntN(64, max + 1n); // -9223372036854775808n\n// negative because the 64th bit of 2^63 is 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint.asintn](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint.asintn) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt.asIntN() - JavaScript | MDN",
    "description": "The BigInt.asIntN() static method truncates a BigInt value to the given number of least significant bits and returns that value as a signed integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN",
    "markdown": "# BigInt.asUintN() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`BigInt.asUintN()`** static method truncates a `BigInt` value to the given number of least significant bits and returns that value as an unsigned integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nBigInt.asUintN(bits, bigint)\n```\n\n### [Parameters](#parameters)\n\n[`bits`](#bits)\n\nThe amount of bits available for the returned BigInt. Should be an integer between 0 and 253 - 1, inclusive.\n\n[`bigint`](#bigint)\n\nThe BigInt value to truncate to fit into the supplied bits.\n\n### [Return value](#return_value)\n\nThe value of `bigint` modulo 2^`bits`, as an unsigned integer.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `bits` is negative or greater than 253 - 1.\n\n## [Description](#description)\n\nThe `BigInt.asUintN` method truncates a `BigInt` value to the given number of bits, and interprets the result as an unsigned integer. Unsigned integers have no sign bits and are always non-negative. For example, for `BigInt.asUintN(4, 25n)`, the value `25n` is truncated to `9n`:\n\n25n = 00011001 (base 2)\n         ^==== Use only the four remaining bits\n===>      1001 (base 2) = 9n\n\n**Note:** `BigInt` values are always encoded as two's complement in binary.\n\nUnlike similar language APIs such as [`Number.prototype.toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential), `asUintN` is a static property of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), so you always use it as `BigInt.asUintN()`, rather than as a method of a BigInt value. Exposing `asUintN()` as a \"standard library function\" allows [interop with asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n\n## [Examples](#examples)\n\n### [Staying in 64-bit ranges](#staying_in_64-bit_ranges)\n\nThe `BigInt.asUintN()` method can be useful to stay in the range of 64-bit arithmetic.\n\n```\nconst max = 2n ** 64n - 1n;\n\nBigInt.asUintN(64, max); // 18446744073709551615n\n\nBigInt.asUintN(64, max + 1n); // 0n\n// zero because of overflow: the lowest 64 bits are all zeros\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint.asuintn](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint.asuintn) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt.asUintN() - JavaScript | MDN",
    "description": "The BigInt.asUintN() static method truncates a BigInt value to the given number of least significant bits and returns that value as an unsigned integer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString",
    "markdown": "# BigInt.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toLocaleString()`** method of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values returns a string with a language-sensitive representation of this BigInt. In implementations with [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) support, this method simply calls `Intl.NumberFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) method, because a `NumberFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), these parameters correspond exactly to the [`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor's parameters. Implementations without `Intl.NumberFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored.\n\nSee the [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the given BigInt according to language-specific conventions.\n\nIn implementations with `Intl.NumberFormat`, this is equivalent to `new Intl.NumberFormat(locales, options).format(number)`.\n\n**Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleString()](#using_tolocalestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst bigint = 3500n;\n\nconsole.log(bigint.toLocaleString());\n// \"3,500\" if in U.S. English locale\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.NumberFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst bigint = 123456789123456789n;\n\n// German uses period for thousands\nconsole.log(bigint.toLocaleString(\"de-DE\"));\n// 123.456.789.123.456.789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(bigint.toLocaleString(\"ar-EG\"));\n// ١٢٣٬٤٥٦٬٧٨٩٬١٢٣٬٤٥٦٬٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(bigint.toLocaleString(\"en-IN\"));\n// 1,23,45,67,89,12,34,56,789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(bigint.toLocaleString(\"zh-Hans-CN-u-nu-hanidec\"));\n// 一二三,四五六,七八九,一二三,四五六,七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(bigint.toLocaleString([\"ban\", \"id\"]));\n// 123.456.789.123.456.789\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```\nconst bigint = 123456789123456789n;\n\n// request a currency format\nconsole.log(\n  bigint.toLocaleString(\"de-DE\", { style: \"currency\", currency: \"EUR\" }),\n);\n// 123.456.789.123.456.789,00 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  bigint.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }),\n);\n// ￥123,456,789,123,456,789\n\n// limit to three significant digits\nconsole.log(bigint.toLocaleString(\"en-IN\", { maximumSignificantDigits: 3 }));\n// 1,23,00,00,00,00,00,00,000\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-bigint.prototype.tolocalestring](https://tc39.es/ecma402/#sup-bigint.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt.prototype.toLocaleString() - JavaScript | MDN",
    "description": "The toLocaleString() method of BigInt values returns a string with a language-sensitive representation of this BigInt. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString",
    "markdown": "# BigInt.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toString()`** method of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values returns a string representing the specified [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) value. The trailing \"n\" is not part of the string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoString()\ntoString(radix)\n```\n\n### [Parameters](#parameters)\n\n[`radix`](#radix) Optional\n\nAn integer in the range 2 through 36 specifying the base to use for representing the BigInt value. Defaults to 10.\n\n### [Return value](#return_value)\n\nA string representing the specified [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) value.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `radix` is less than 2 or greater than 36.\n\n## [Description](#description)\n\nThe [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values, the `toString()` method returns a string representation of the value in the specified radix.\n\nFor radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) `a` through `f` are used.\n\nIf the specified BigInt value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the BigInt value preceded by a `-` sign, **not** the two's complement of the BigInt value.\n\nThe `toString()` method requires its `this` value to be a `BigInt` primitive or wrapper object. It throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for other `this` values without attempting to coerce them to BigInt values.\n\nBecause `BigInt` doesn't have a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `BigInt` _object_ is used in a context expecting a string, such as in a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). However, BigInt _primitive_ values do not consult the `toString()` method to be [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```\nBigInt.prototype.toString = () => \"Overridden\";\nconsole.log(`${1n}`); // \"1\"\nconsole.log(`${Object(1n)}`); // \"Overridden\"\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\n17n.toString(); // \"17\"\n66n.toString(2); // \"1000010\"\n254n.toString(16); // \"fe\"\n(-10n).toString(2); // \"-1010\"\n(-0xffn).toString(2); // \"-11111111\"\n```\n\n### [Negative-zero BigInt](#negative-zero_bigint)\n\nThere is no negative-zero `BigInt` as there are no negative zeros in integers. `-0.0` is an IEEE floating-point concept that only appears in the JavaScript [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type) type.\n\n```\n(-0n).toString(); // \"0\"\nBigInt(-0).toString(); // \"0\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint.prototype.tostring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of BigInt values returns a string representing the specified BigInt value. The trailing \"n\" is not part of the string.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf",
    "markdown": "# BigInt.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`valueOf()`** method of [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values returns the wrapped primitive value of a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA BigInt representing the primitive value of the specified [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) object.\n\n## [Examples](#examples)\n\n### [Using `valueOf`](#using_valueof)\n\n```\ntypeof Object(1n); // object\ntypeof Object(1n).valueOf(); // bigint\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint.prototype.valueof](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt.prototype.valueOf() - JavaScript | MDN",
    "description": "The valueOf() method of BigInt values returns the wrapped primitive value\n  of a BigInt object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive",
    "markdown": "# Symbol.toPrimitive - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.toPrimitive`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@toPrimitive`. All [type coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion) algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's `valueOf()` and `toString()` methods.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@toPrimitive`.\n\n| Property attributes of `Symbol.toPrimitive` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nWith the help of the `Symbol.toPrimitive` property (used as a function value), an object can be converted to a primitive value. The function is called with a string argument `hint`, which specifies the preferred type of the result primitive value. The `hint` argument can be one of `\"number\"`, `\"string\"`, and `\"default\"`.\n\nThe `\"number\"` hint is used by [numeric coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) algorithms. The `\"string\"` hint is used by the [string coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) algorithm. The `\"default\"` hint is used by the [primitive coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) algorithm. The `hint` only acts as a weak signal of preference, and the implementation is free to ignore it (as [`Symbol.prototype[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) does). The language does not enforce alignment between the `hint` and the result type, although `[@@toPrimitive]()` must return a primitive, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n\nObjects without the `@@toPrimitive` property are converted to primitives by calling the `valueOf()` and `toString()` methods in different orders, which is explained in more detail in the [type coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion) section. `@@toPrimitive` allows full control over the primitive conversion process. For example, [`Date.prototype[@@toPrimitive]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) treats `\"default\"` as if it's `\"string\"` and calls `toString()` instead of `valueOf()`. [`Symbol.prototype[@@toPrimitive]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) ignores the hint and always returns a symbol, which means even in string contexts, [`Symbol.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString) won't be called, and `Symbol` objects must always be explicitly converted to strings through [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String).\n\n## [Examples](#examples)\n\n### [Modifying primitive values converted from an object](#modifying_primitive_values_converted_from_an_object)\n\nFollowing example describes how `Symbol.toPrimitive` property can modify the primitive value converted from an object.\n\n```\n// An object without Symbol.toPrimitive property.\nconst obj1 = {};\nconsole.log(+obj1); // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// An object with Symbol.toPrimitive property.\nconst obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"number\") {\n      return 10;\n    }\n    if (hint === \"string\") {\n      return \"hello\";\n    }\n    return true;\n  },\n};\nconsole.log(+obj2); // 10        — hint is \"number\"\nconsole.log(`${obj2}`); // \"hello\"   — hint is \"string\"\nconsole.log(obj2 + \"\"); // \"true\"    — hint is \"default\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.toprimitive](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.toprimitive) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Symbol.toPrimitive - JavaScript | MDN",
    "description": "The Symbol.toPrimitive static data property represents the well-known symbol @@toPrimitive. All type coercion algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's valueOf() and toString() methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set",
    "markdown": "# TypedArray.prototype.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`set()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances stores multiple values in the typed array, reading input values from a specified array.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nset(array)\nset(array, targetOffset)\n\nset(typedarray)\nset(typedarray, targetOffset)\n```\n\n### [Parameters](#parameters)\n\n[`array`](#array)\n\nThe array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the target offset exceeds the length of the target array, in which case an exception is thrown.\n\n[`typedarray`](#typedarray)\n\nIf the source array is a typed array, the two arrays may share the same underlying [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer); the JavaScript engine will intelligently **copy** the source range of the buffer to the destination range.\n\n[`targetOffset`](#targetoffset) Optional\n\nThe offset into the target array at which to begin writing values from the source array. If this value is omitted, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown in one of the following cases:\n\n*   An element will be stored beyond the end of the typed array, either because `targetOffset` is too large or because `array` or `typedarray` is too large.\n*   `targetOffset` is negative.\n\n## [Examples](#examples)\n\n### [Using set()](#using_set)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\n\nuint8.set([1, 2, 3], 3);\n\nconsole.log(uint8); // Uint8Array [ 0, 0, 0, 1, 2, 3, 0, 0 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.set](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.set() - JavaScript | MDN",
    "description": "The set() method of TypedArray instances stores multiple values in the typed\n  array, reading input values from a specified array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse",
    "markdown": "# TypedArray.prototype.reverse() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reverse()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances reverses a typed array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as [`Array.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe reference to the original typed array, now reversed. Note that the typed array is reversed _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## [Description](#description)\n\nSee [`Array.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using reverse()](#using_reverse)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.reverse();\n\nconsole.log(uint8); // Uint8Array [3, 2, 1]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.reverse](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.reverse) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.reverse() - JavaScript | MDN",
    "description": "The reverse() method of TypedArray instances reverses a typed array in place and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as Array.prototype.reverse().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice",
    "markdown": "# TypedArray.prototype.slice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`slice()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a copy of a portion of a typed array into a new typed array object selected from `start` to `end` (`end` not included) where `start` and `end` represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nslice()\nslice(start)\nslice(start, end)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start) Optional\n\nZero-based index at which to start extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n[`end`](#end) Optional\n\nZero-based index at which to end extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n\n### [Return value](#return_value)\n\nA new typed array containing the extracted elements.\n\n## [Description](#description)\n\nSee [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Return a portion of an existing typed array](#return_a_portion_of_an_existing_typed_array)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.slice(1); // Uint8Array [ 2, 3 ]\nuint8.slice(2); // Uint8Array [ 3 ]\nuint8.slice(-2); // Uint8Array [ 2, 3 ]\nuint8.slice(0, 1); // Uint8Array [ 1 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.slice](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.slice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.slice() - JavaScript | MDN",
    "description": "The slice() method of TypedArray instances returns a copy of a portion of a typed array into a new typed array object selected from start to end (end not included) where start and end represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as Array.prototype.slice().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray",
    "markdown": "# TypedArray.prototype.subarray() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`subarray()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a new typed array on the same [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) store and with the same element types as for this typed array. The begin offset is **inclusive** and the end offset is **exclusive**.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsubarray()\nsubarray(begin)\nsubarray(begin, end)\n```\n\n### [Parameters](#parameters)\n\n[`begin`](#begin) Optional\n\nElement to begin at. The offset is inclusive. The whole array will be included in the new view if this value is not specified.\n\n[`end`](#end) Optional\n\nElement to end at. The offset is exclusive. If not specified, all elements from the one specified by `begin` to the end of the array are included in the new view.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nThe range specified by `begin` and `end` is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either `begin` or `end` is negative, it refers to an index from the end of the array instead of from the beginning.\n\nAlso note that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\n\n## [Examples](#examples)\n\n### [Using the subarray() method](#using_the_subarray_method)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\nuint8.set([1, 2, 3]);\n\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\n\nconst sub = uint8.subarray(0, 4);\n\nconsole.log(sub); // Uint8Array [ 1, 2, 3, 0 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.subarray](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.subarray) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.subarray() - JavaScript | MDN",
    "description": "The subarray() method of TypedArray instances returns a new typed array\n  on the same ArrayBuffer store and with the same element types as for this\n  typed array. The begin offset is inclusive and the end\n  offset is exclusive.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some",
    "markdown": "# TypedArray.prototype.some() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`some()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsome(callbackFn)\nsome(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `some()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n`false` unless `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value for a typed array element, in which case `true` is immediately returned.\n\n## [Description](#description)\n\nSee [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Testing size of all typed array elements](#testing_size_of_all_typed_array_elements)\n\nThe following example tests whether any element in the typed array is bigger than 10.\n\n```\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\nnew Uint8Array([2, 5, 8, 1, 4]).some(isBiggerThan10); // false\nnew Uint8Array([12, 5, 8, 1, 4]).some(isBiggerThan10); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.some](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.some) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.some() - JavaScript | MDN",
    "description": "The some() method of TypedArray instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as Array.prototype.some().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort",
    "markdown": "# TypedArray.prototype.sort() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`sort()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances sorts the elements of a typed array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same typed array, now sorted. This method has the same algorithm as [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), except that it sorts the values numerically instead of as strings by default.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`compareFn`](#comparefn) Optional\n\nA function that determines the order of the elements. The function is called with the following arguments:\n\n[`a`](#a)\n\nThe first element for comparison.\n\n[`b`](#b)\n\nThe second element for comparison.\n\nIt should return a number where:\n\n*   A negative value indicates that `a` should come before `b`.\n*   A positive value indicates that `a` should come after `b`.\n*   Zero or `NaN` indicates that `a` and `b` are considered equal.\n\nTo memorize this, remember that `(a, b) => a - b` sorts numbers in ascending order.\n\nIf omitted, the typed array elements are sorted according to numeric value.\n\n### [Return value](#return_value)\n\nThe reference to the original typed array, now sorted. Note that the typed array is sorted _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## [Description](#description)\n\nSee [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using sort()](#using_sort)\n\nFor more examples, see also the [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method.\n\n```\nlet numbers = new Uint8Array([40, 1, 5, 200]);\nnumbers.sort();\n// Uint8Array [ 1, 5, 40, 200 ]\n// Unlike plain Arrays, a compare function is not required\n// to sort the numbers numerically.\n\n// Regular Arrays require a compare function to sort numerically:\nnumbers = [40, 1, 5, 200];\nnumbers.sort();\n// [1, 200, 40, 5]\n\nnumbers.sort((a, b) => a - b); // compare numbers\n// [ 1, 5, 40, 200 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.sort](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.sort) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.sort() - JavaScript | MDN",
    "description": "The sort() method of TypedArray instances sorts the elements of a typed array in place and returns the reference to the same typed array, now sorted. This method has the same algorithm as Array.prototype.sort(), except that it sorts the values numerically instead of as strings by default.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toReversed",
    "markdown": "# TypedArray.prototype.toReversed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`toReversed()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) counterpart of the [`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse) method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as [`Array.prototype.toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new typed array containing the elements in reversed order.\n\n## [Description](#description)\n\nSee [`Array.prototype.toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using toReversed()](#using_toreversed)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nconst reversedUint8 = uint8.toReversed();\nconsole.log(reversedUint8); // Uint8Array [3, 2, 1]\nconsole.log(uint8); // Uint8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.toreversed](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.toreversed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.toReversed() - JavaScript | MDN",
    "description": "The toReversed() method of TypedArray instances is the copying counterpart of the reverse() method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as Array.prototype.toReversed().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString",
    "markdown": "# TypedArray.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toLocaleString()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a string representing the elements of the typed array. The elements are converted to strings using their `toLocaleString` methods and these strings are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as [`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object with configuration properties. See [`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString).\n\n### [Return value](#return_value)\n\nA string representing the elements of the typed array.\n\n## [Description](#description)\n\nSee [`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using toLocaleString()](#using_tolocalestring)\n\n```\nconst uint = new Uint32Array([2000, 500, 8123, 12, 4212]);\n\nuint.toLocaleString();\n// if run in a de-DE locale\n// \"2.000,500,8.123,12,4.212\"\n\nuint.toLocaleString(\"en-US\");\n// \"2,000,500,8,123,12,4,212\"\n\nuint.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" });\n// \"￥2,000,￥500,￥8,123,￥12,￥4,212\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.tolocalestring](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.toLocaleString() - JavaScript | MDN",
    "description": "The toLocaleString() method of TypedArray instances returns a string representing the elements of the typed array. The elements are converted to strings using their toLocaleString methods and these strings are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as Array.prototype.toLocaleString().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted",
    "markdown": "# TypedArray.prototype.toSorted() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`toSorted()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort) method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as [`Array.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted), except that it sorts the values numerically instead of as strings by default.\n\n## [Syntax](#syntax)\n\n```\ntoSorted()\ntoSorted(compareFn)\n```\n\n### [Parameters](#parameters)\n\n[`compareFn`](#comparefn) Optional\n\nA function that determines the order of the elements. If omitted, the typed array elements are sorted according to numeric value. See [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort) for more information.\n\n### [Return value](#return_value)\n\nA new typed array with the elements sorted in ascending order.\n\n## [Description](#description)\n\nSee [`Array.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Sorting an array](#sorting_an_array)\n\nFor more examples, see also the [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method.\n\n```\nconst numbers = new Uint8Array([40, 1, 5, 200]);\nconst numberSorted = numbers.toSorted();\nconsole.log(numberSorted); // Uint8Array [ 1, 5, 40, 200 ]\n// Unlike plain Arrays, a compare function is not required\n// to sort the numbers numerically.\nconsole.log(numbers); // Uint8Array [ 40, 1, 5, 200 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.tosorted](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.tosorted) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.toSorted() - JavaScript | MDN",
    "description": "The toSorted() method of TypedArray instances is the copying version of the sort() method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as Array.prototype.toSorted(), except that it sorts the values numerically instead of as strings by default.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString",
    "markdown": "# TypedArray.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`toString()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a string representing the specified typed array and its elements. This method has the same algorithm as [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the elements of the typed array.\n\n## [Description](#description)\n\nSee [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Converting a typed array to a string](#converting_a_typed_array_to_a_string)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\n// Explicit conversion\nconsole.log(uint8.toString()); // 1,2,3\n// Implicit conversion\nconsole.log(`${uint8}`); // 1,2,3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.tostring](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.toString() - JavaScript | MDN",
    "description": "The toString() method of TypedArray instances returns a string representing the specified typed array and its elements. This method has the same algorithm as Array.prototype.toString().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/with",
    "markdown": "# TypedArray.prototype.with() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2023\n\nNewly available\n\nThe **`with()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances is the [copying](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of using the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as [`Array.prototype.with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with).\n\n## [Syntax](#syntax)\n\n```\narrayInstance.with(index, value)\n```\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index at which to change the typed array, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n[`value`](#value)\n\nAny value to be assigned to the given index.\n\n### [Return value](#return_value)\n\nA new typed array with the element at `index` replaced with `value`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `index >= array.length` or `index < -array.length`.\n\n## [Description](#description)\n\nSee [`Array.prototype.with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using with()](#using_with)\n\n```\nconst arr = new Uint8Array([1, 2, 3, 4, 5]);\nconsole.log(arr.with(2, 6)); // Uint8Array [1, 2, 6, 4, 5]\nconsole.log(arr); // Uint8Array [1, 2, 3, 4, 5]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.with](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.with) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.with() - JavaScript | MDN",
    "description": "The with() method of TypedArray instances is the copying version of using the bracket notation to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as Array.prototype.with().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer",
    "markdown": "# TypedArray.prototype.buffer - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`buffer`** accessor property of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) referenced by this typed array at construction time.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `buffer` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the _TypedArray_ is constructed and cannot be changed. _TypedArray_ is one of the [TypedArray objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\nBecause a typed array is a _view_ of a buffer, the underlying buffer may be longer than the typed array itself.\n\n## [Examples](#examples)\n\n### [Using the buffer property](#using_the_buffer_property)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint16 = new Uint16Array(buffer);\nuint16.buffer; // ArrayBuffer { byteLength: 8 }\n```\n\n### [Accessing the underlying buffer from a sliced array view](#accessing_the_underlying_buffer_from_a_sliced_array_view)\n\n```\nconst buffer = new ArrayBuffer(1024);\nconst arr = new Uint8Array(buffer, 64, 128);\nconsole.log(arr.byteLength); // 128\nconsole.log(arr.buffer.byteLength); // 1024\nconsole.log(arr.buffer === buffer); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-%typedarray%.prototype.buffer](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-%typedarray%.prototype.buffer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.buffer - JavaScript | MDN",
    "description": "The buffer accessor property of TypedArray instances returns the ArrayBuffer or SharedArrayBuffer referenced by this typed array at construction time.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values",
    "markdown": "# TypedArray.prototype.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`values()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that iterates the value of each item in the typed array. This method has the same algorithm as [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nSee [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\n```\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst values = arr.values();\nfor (const n of values) {\n  console.log(n);\n}\n```\n\n### [Alternative iteration](#alternative_iteration)\n\n```\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst values = arr.values();\nconsole.log(values.next().value); // 10\nconsole.log(values.next().value); // 20\nconsole.log(values.next().value); // 30\nconsole.log(values.next().value); // 40\nconsole.log(values.next().value); // 50\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.values](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.values() - JavaScript | MDN",
    "description": "The values() method of TypedArray instances returns a new array iterator object that iterates the value of each item in the typed array. This method has the same algorithm as Array.prototype.values().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset",
    "markdown": "# TypedArray.prototype.byteOffset - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`byteOffset`** accessor property of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the offset (in bytes) of this typed array from the start of its [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n## [Description](#description)\n\nThe `byteOffset` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. _TypedArray_ is one of the [TypedArray objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## [Examples](#examples)\n\n### [Using the byteOffset property](#using_the_byteoffset_property)\n\n```\nconst buffer = new ArrayBuffer(8);\n\nconst uint8array1 = new Uint8Array(buffer);\nuint8array1.byteOffset; // 0 (no offset specified)\n\nconst uint8array2 = new Uint8Array(buffer, 3);\nuint8array2.byteOffset; // 3 (as specified when constructing Uint8Array)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-%typedarray%.prototype.byteoffset](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-%typedarray%.prototype.byteoffset) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.byteOffset - JavaScript | MDN",
    "description": "The byteOffset accessor property of TypedArray instances returns the offset (in bytes) of this typed array from the start of its ArrayBuffer or SharedArrayBuffer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length",
    "markdown": "# TypedArray.prototype.length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`length`** accessor property of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the length (in elements) of this typed array.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `length` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. If the _TypedArray_ is not specifying a `byteOffset` or a `length`, the length of the referenced [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) will be returned. _TypedArray_ is one of the [TypedArray objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## [Examples](#examples)\n\n### [Using the `length` property](#using_the_length_property)\n\n```\nconst buffer = new ArrayBuffer(8);\n\nlet uint8 = new Uint8Array(buffer);\nuint8.length; // 8 (matches the length of the buffer)\n\nuint8 = new Uint8Array(buffer, 1, 5);\nuint8.length; // 5 (as specified when constructing the Uint8Array)\n\nuint8 = new Uint8Array(buffer, 2);\nuint8.length; // 6 (due to the offset of the constructed Uint8Array)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-%typedarray%.prototype.length](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-%typedarray%.prototype.length) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.length - JavaScript | MDN",
    "description": "The length accessor property of TypedArray instances returns the length (in elements) of this typed array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array",
    "markdown": "# BigInt64Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`BigInt64Array()`** constructor creates [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) objects. The contents are initialized to `0n` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew BigInt64Array()\nnew BigInt64Array(length)\nnew BigInt64Array(typedArray)\nnew BigInt64Array(object)\n\nnew BigInt64Array(buffer)\nnew BigInt64Array(buffer, byteOffset)\nnew BigInt64Array(buffer, byteOffset, length)\n```\n\n**Note:** `BigInt64Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a BigInt64Array](#different_ways_to_create_a_bigint64array)\n\n```\n// From a length\nconst bigint64 = new BigInt64Array(2);\nbigint64[0] = 42n;\nconsole.log(bigint64[0]); // 42n\nconsole.log(bigint64.length); // 2\nconsole.log(bigint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigInt64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigInt64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigInt64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst bigint64FromIterable = new BigInt64Array(iterable);\nconsole.log(bigint64FromIterable);\n// BigInt64Array [1n, 2n, 3n]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt64Array() constructor - JavaScript | MDN",
    "description": "The BigInt64Array() constructor creates BigInt64Array objects. The contents are initialized to 0n unless initialization data is explicitly provided.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from",
    "markdown": "# TypedArray.from() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`TypedArray.from()`** static method creates a new [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) from an array-like or iterable object. This method is nearly the same as [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`arrayLike`](#arraylike)\n\nAn iterable or array-like object to convert to a typed array.\n\n[`mapFn`](#mapfn) Optional\n\nA function to call on every element of the typed array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the typed array instead. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`thisArg`](#thisarg) Optional\n\nValue to use as `this` when executing `mapFn`.\n\n### [Return value](#return_value)\n\nA new [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\n\n## [Description](#description)\n\nSee [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) for more details.\n\nThere are some subtle distinctions between [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) and `TypedArray.from()` (note: the `this` value mentioned below is the `this` value that `TypedArray.from()` was called with, not the `thisArg` argument used to invoke `mapFn`):\n\n*   If the `this` value of `TypedArray.from()` is not a constructor, `TypedArray.from()` will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), while `Array.from()` defaults to creating a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n*   The object constructed by `this` must be a `TypedArray` instance, while `Array.from()` allows its `this` value to be constructed to any object.\n*   When the `source` parameter is an iterator, `TypedArray.from()` first collects all the values from the iterator, then creates an instance of `this` using the count, and finally sets the values on the instance. `Array.from()` sets each value as it receives them from the iterator, then sets its `length` at the end.\n*   `TypedArray.from()` uses `[[Set]]` while `Array.from()` uses `[[DefineOwnProperty]]`. Hence, when working with [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) objects, it calls [`handler.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) to create new elements rather than [`handler.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty).\n*   When `Array.from()` gets an array-like which isn't an iterator, it respects holes. `TypedArray.from()` will ensure the result is dense.\n\n## [Examples](#examples)\n\n### [From an iterable object (Set)](#from_an_iterable_object_set)\n\n```\nconst s = new Set([1, 2, 3]);\nUint8Array.from(s);\n// Uint8Array [ 1, 2, 3 ]\n```\n\n### [From a string](#from_a_string)\n\n```\nInt16Array.from(\"123\");\n// Int16Array [ 1, 2, 3 ]\n```\n\n### [Use with arrow function and map](#use_with_arrow_function_and_map)\n\nUsing an arrow function as the map function to manipulate the elements\n\n```\nFloat32Array.from([1, 2, 3], (x) => x + x);\n// Float32Array [ 2, 4, 6 ]\n```\n\n### [Generate a sequence of numbers](#generate_a_sequence_of_numbers)\n\n```\nUint8Array.from({ length: 5 }, (v, k) => k);\n// Uint8Array [ 0, 1, 2, 3, 4 ]\n```\n\n### [Calling from() on non-TypedArray constructors](#calling_from_on_non-typedarray_constructors)\n\nThe `this` value of `from()` must be a constructor that returns a `TypedArray` instance.\n\n```\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\nInt8Array.from.call({}, []); // TypeError: #<Object> is not a constructor\nInt8Array.from.call(NotArray, []);\n// NotArray called with length 0\n// TypeError: Method %TypedArray%.from called on incompatible receiver #<NotArray>\n```\n\n```\nfunction NotArray2(len) {\n  console.log(\"NotArray2 called with length\", len);\n  return new Uint8Array(len);\n}\nconsole.log(Int8Array.from.call(NotArray2, [1, 2, 3]));\n// NotArray2 called with length 3\n// Uint8Array(3) [ 1, 2, 3 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.from](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.from) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.from() - JavaScript | MDN",
    "description": "The TypedArray.from() static method creates a new\n  typed array\n  from an array-like or iterable object. This method is nearly the same as\n  Array.from().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of",
    "markdown": "# TypedArray.of() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`TypedArray.of()`** static method creates a new [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) from a variable number of arguments. This method is nearly the same as [`Array.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nTypedArray.of()\nTypedArray.of(element1)\nTypedArray.of(element1, element2)\nTypedArray.of(element1, element2, /* …, */ elementN)\n```\n\nWhere `TypedArray` is one of:\n\n*   [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)\n*   [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n*   [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)\n*   [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)\n*   [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array)\n*   [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)\n*   [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)\n*   [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array)\n*   [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)\n*   [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)\n*   [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)\n*   [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)\n\n### [Parameters](#parameters)\n\n[`element1`](#element1), …, `elementN`\n\nElements used to create the typed array.\n\n### [Return value](#return_value)\n\nA new [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\n\n## [Description](#description)\n\nSee [`Array.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of) for more details. There are some subtle distinctions between [`Array.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of) and `TypedArray.of()`:\n\n*   If the `this` value passed to `TypedArray.of()` is not a constructor, `TypedArray.from()` will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), while `Array.of()` defaults to creating a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n*   `TypedArray.of()` uses `[[Set]]` while `Array.of()` uses `[[DefineOwnProperty]]`. Hence, when working with [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) objects, it calls [`handler.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) to create new elements rather than [`handler.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty).\n\n## [Examples](#examples)\n\n### [Using of()](#using_of)\n\n```\nUint8Array.of(1); // Uint8Array [ 1 ]\nInt8Array.of(\"1\", \"2\", \"3\"); // Int8Array [ 1, 2, 3 ]\nFloat32Array.of(1, 2, 3); // Float32Array [ 1, 2, 3 ]\nInt16Array.of(undefined); // Int16Array [ 0 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.of](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.of) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.of() - JavaScript | MDN",
    "description": "The TypedArray.of() static method creates a new\n  typed array from a variable number of arguments. This method is nearly the same as\n  Array.of().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength",
    "markdown": "# TypedArray.prototype.byteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`byteLength`** accessor property of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the length (in bytes) of this typed array.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. If the _TypedArray_ is not specifying a `byteOffset` or a `length`, the `length` of the referenced `ArrayBuffer` will be returned. _TypedArray_ is one of the [TypedArray objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## [Examples](#examples)\n\n### [Using the byteLength property](#using_the_bytelength_property)\n\n```\nconst buffer = new ArrayBuffer(8);\n\nconst uint8 = new Uint8Array(buffer);\nuint8.byteLength; // 8 (matches the byteLength of the buffer)\n\nconst uint8newLength = new Uint8Array(buffer, 1, 5);\nuint8newLength.byteLength; // 5 (as specified when constructing the Uint8Array)\n\nconst uint8offSet = new Uint8Array(buffer, 2);\nuint8offSet.byteLength; // 6 (due to the offset of the constructed Uint8Array)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-%typedarray%.prototype.bytelength](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-%typedarray%.prototype.bytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.prototype.byteLength - JavaScript | MDN",
    "description": "The byteLength accessor property of TypedArray instances returns the length (in bytes) of this typed array.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT",
    "markdown": "# TypedArray.BYTES\\_PER\\_ELEMENT - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`TypedArray.BYTES_PER_ELEMENT`** static data property represents the size in bytes of each element in a typed array.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA number whose value depends on the type of `TypedArray`.\n\n| Property attributes of `TypedArray.BYTES_PER_ELEMENT` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`TypedArray` objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The `BYTES_PER_ELEMENT` constant contains the number of bytes each element in the given `TypedArray` has.\n\nThe `BYTES_PER_ELEMENT` property is both an _instance property_ and a _static property_. It's available on both `TypedArray` subclass constructors and on instances of those constructors.\n\nAs an instance property, `BYTES_PER_ELEMENT` is defined on the constructor's `prototype`.\n\n```\nconsole.log(Object.hasOwn(Int8Array.prototype, \"BYTES_PER_ELEMENT\")); // true\n```\n\n## [Examples](#examples)\n\n### [Using BYTES\\_PER\\_ELEMENT](#using_bytes_per_element)\n\nAs a static property:\n\n```\nInt8Array.BYTES_PER_ELEMENT; // 1\nUint8Array.BYTES_PER_ELEMENT; // 1\nUint8ClampedArray.BYTES_PER_ELEMENT; // 1\nInt16Array.BYTES_PER_ELEMENT; // 2\nUint16Array.BYTES_PER_ELEMENT; // 2\nFloat16Array.BYTES_PER_ELEMENT; // 2\nInt32Array.BYTES_PER_ELEMENT; // 4\nUint32Array.BYTES_PER_ELEMENT; // 4\nFloat32Array.BYTES_PER_ELEMENT; // 4\nFloat64Array.BYTES_PER_ELEMENT; // 8\nBigInt64Array.BYTES_PER_ELEMENT; // 8\nBigUint64Array.BYTES_PER_ELEMENT; // 8\n```\n\nAs an instance property:\n\n```\nnew Int8Array([]).BYTES_PER_ELEMENT; // 1\nnew Uint8Array([]).BYTES_PER_ELEMENT; // 1\nnew Uint8ClampedArray([]).BYTES_PER_ELEMENT; // 1\nnew Int16Array([]).BYTES_PER_ELEMENT; // 2\nnew Uint16Array([]).BYTES_PER_ELEMENT; // 2\nnew Float16Array([]).BYTES_PER_ELEMENT; // 2\nnew Int32Array([]).BYTES_PER_ELEMENT; // 4\nnew Uint32Array([]).BYTES_PER_ELEMENT; // 4\nnew Float32Array([]).BYTES_PER_ELEMENT; // 4\nnew Float64Array([]).BYTES_PER_ELEMENT; // 8\nnew BigInt64Array([]).BYTES_PER_ELEMENT; // 8\nnew BigUint64Array([]).BYTES_PER_ELEMENT; // 8\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray.bytes\\_per\\_element](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray.bytes_per_element) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray.BYTES_PER_ELEMENT - JavaScript | MDN",
    "description": "The TypedArray.BYTES_PER_ELEMENT static data property represents the size in bytes of each element in a typed array.",
    "languageCode": "en-US"
  }
]