[
  {
    "url": "https://docs.docker.com/engine/release-notes/17.06/",
    "markdown": "# Docker Engine 17.06 release notes\n\n2017-09-05\n\n### [Client](#client)\n\n*   Enable TCP keepalive in the client to prevent loss of connection [docker/cli#415](https://github.com/docker/cli/pull/415)\n\n### [Runtime](#runtime)\n\n*   Devmapper: ensure UdevWait is called after calls to setCookie [moby/moby#33732](https://github.com/moby/moby/pull/33732)\n*   Aufs: ensure diff layers are correctly removed to prevent leftover files from using up storage [moby/moby#34587](https://github.com/moby/moby/pull/34587)\n\n### [Swarm mode](#swarm-mode)\n\n*   Ignore PullOptions for running tasks [docker/swarmkit#2351](https://github.com/docker/swarmkit/pull/2351)\n\n2017-08-15\n\n### [Builder](#builder)\n\n*   Fix a regression, where `ADD` from remote URL's extracted archives [#89](https://github.com/docker/docker-ce/pull/89)\n*   Fix handling of remote \"git@\" notation [#100](https://github.com/docker/docker-ce/pull/100)\n*   Fix copy `--from` conflict with force pull [#86](https://github.com/docker/docker-ce/pull/86)\n\n### [Client](#client-1)\n\n*   Make pruning volumes optional when running `docker system prune`, and add a `--volumes` flag [#109](https://github.com/docker/docker-ce/pull/109)\n*   Show progress of replicated tasks before they are assigned [#97](https://github.com/docker/docker-ce/pull/97)\n*   Fix `docker wait` hanging if the container does not exist [#106](https://github.com/docker/docker-ce/pull/106)\n*   If `docker swarm ca` is called without the `--rotate` flag, warn if other flags are passed [#110](https://github.com/docker/docker-ce/pull/110)\n*   Fix API version negotiation not working if the daemon returns an error [#115](https://github.com/docker/docker-ce/pull/115)\n*   Print an error if \"until\" filter is combined with \"--volumes\" on system prune [#154](https://github.com/docker/docker-ce/pull/154)\n\n### [Logging](#logging)\n\n*   Fix stderr logging for `journald` and `syslog` [#95](https://github.com/docker/docker-ce/pull/95)\n*   Fix log readers can block writes indefinitely [#98](https://github.com/docker/docker-ce/pull/98)\n*   Fix `awslogs` driver repeating last event [#151](https://github.com/docker/docker-ce/pull/151)\n\n### [Networking](#networking)\n\n*   Fix issue with driver options not received by network drivers [#127](https://github.com/docker/docker-ce/pull/127)\n\n### [Plugins](#plugins)\n\n*   Make plugin removes more resilient to failure [#91](https://github.com/docker/docker-ce/pull/91)\n\n### [Runtime](#runtime-1)\n\n*   Prevent a `goroutine` leak when `healthcheck` gets stopped [#90](https://github.com/docker/docker-ce/pull/90)\n*   Do not error on relabel when relabel not supported [#92](https://github.com/docker/docker-ce/pull/92)\n*   Limit max backoff delay to 2 seconds for GRPC connection [#94](https://github.com/docker/docker-ce/pull/94)\n*   Fix issue preventing containers to run when memory cgroup was specified due to bug in certain kernels [#102](https://github.com/docker/docker-ce/pull/102)\n*   Fix container not responding to SIGKILL when paused [#102](https://github.com/docker/docker-ce/pull/102)\n*   Improve error message if an image for an incompatible OS is loaded [#108](https://github.com/docker/docker-ce/pull/108)\n*   Fix a handle leak in `go-winio` [#112](https://github.com/docker/docker-ce/pull/112)\n*   Fix issue upon upgrade, preventing docker from showing running containers when `--live-restore` is enabled [#117](https://github.com/docker/docker-ce/pull/117)\n*   Fix bug where services using secrets would fail to start on daemons using the `userns-remap` feature [#121](https://github.com/docker/docker-ce/pull/121)\n*   Fix error handling with `not-exist` errors on remove [#142](https://github.com/docker/docker-ce/pull/142)\n*   Fix REST API Swagger representation cannot be loaded with SwaggerUI [#156](https://github.com/docker/docker-ce/pull/156)\n\n### [Security](#security)\n\n*   Redact secret data on secret creation [#99](https://github.com/docker/docker-ce/pull/99)\n\n### [Swarm mode](#swarm-mode-1)\n\n*   Do not add duplicate platform information to service spec [#107](https://github.com/docker/docker-ce/pull/107)\n*   Cluster update and memory issue fixes [#114](https://github.com/docker/docker-ce/pull/114)\n*   Changing get network request to return predefined network in swarm [#150](https://github.com/docker/docker-ce/pull/150)\n\n2017-06-28\n\n> **Note**: Docker 17.06.0 has an issue in the image builder causing a change in the behavior of the `ADD` instruction of Dockerfile when referencing a remote `.tar.gz` file. The issue will be fixed in Docker 17.06.1.\n\n> **Note**: Starting with Docker CE 17.06, Ubuntu packages are also available for IBM Z using the s390x architecture.\n\n> **Note**: Docker 17.06 by default disables communication with legacy (v1) registries. If you require interaction with registries that have not yet migrated to the v2 protocol, set the `--disable-legacy-registry=false` daemon option. Interaction with v1 registries will be removed in Docker 17.12.\n\n### [Builder](#builder-1)\n\n*   Add `--iidfile` option to docker build. It allows specifying a location where to save the resulting image ID\n*   Allow specifying any remote ref in git checkout URLs [#32502](https://github.com/moby/moby/pull/32502)\n\n### [Client](#client-2)\n\n*   Add `--format` option to `docker stack ls` [#31557](https://github.com/moby/moby/pull/31557)\n*   Add support for labels in compose initiated builds [#32632](https://github.com/moby/moby/pull/32632) [#32972](https://github.com/moby/moby/pull/32972)\n*   Add `--format` option to `docker history` [#30962](https://github.com/moby/moby/pull/30962)\n*   Add `--format` option to `docker system df` [#31482](https://github.com/moby/moby/pull/31482)\n*   Allow specifying Nameservers and Search Domains in stack files [#32059](https://github.com/moby/moby/pull/32059)\n*   Add support for `read_only` service to `docker stack deploy` [#docker/cli/73](https://github.com/docker/cli/pull/73)\n\n*   Display Swarm cluster and node TLS information [#docker/cli/44](https://github.com/docker/cli/pull/44)\n\n*   Add support for placement preference to `docker stack deploy` [#docker/cli/35](https://github.com/docker/cli/pull/35)\n*   Add new `ca` subcommand to `docker swarm` to allow managing a swarm CA [#docker/cli/48](https://github.com/docker/cli/pull/48)\n*   Add credential-spec to compose [#docker/cli/71](https://github.com/docker/cli/pull/71)\n*   Add support for csv format options to `--network` and `--network-add` [#docker/cli/62](https://github.com/docker/cli/pull/62) [#33130](https://github.com/moby/moby/pull/33130)\n\n*   Fix stack compose bind-mount volumes on Windows [#docker/cli/136](https://github.com/docker/cli/pull/136)\n*   Correctly handle a Docker daemon without registry info [#docker/cli/126](https://github.com/docker/cli/pull/126)\n\n*   Allow `--detach` and `--quiet` flags when using --rollback [#docker/cli/144](https://github.com/docker/cli/pull/144)\n*   Remove deprecated `--email` flag from `docker login` [#docker/cli/143](https://github.com/docker/cli/pull/143)\n\n*   Adjusted `docker stats` memory output [#docker/cli/80](https://github.com/docker/cli/pull/80)\n\n### [Distribution](#distribution)\n\n*   Select digest over tag when both are provided during a pull [#33214](https://github.com/moby/moby/pull/33214)\n\n### [Logging](#logging-1)\n\n*   Add monitored resource type metadata for GCP logging driver [#32930](https://github.com/moby/moby/pull/32930)\n*   Add multiline processing to the AWS CloudWatch logs driver [#30891](https://github.com/moby/moby/pull/30891)\n\n### [Networking](#networking-1)\n\n*   Add Support swarm-mode services with node-local networks such as macvlan, ipvlan, bridge, host [#32981](https://github.com/moby/moby/pull/32981)\n*   Pass driver-options to network drivers on service creation [#32981](https://github.com/moby/moby/pull/33130)\n*   Isolate Swarm Control-plane traffic from Application data traffic using --data-path-addr [#32717](https://github.com/moby/moby/pull/32717)\n\n*   Several improvements to Service Discovery [#docker/libnetwork/1796](https://github.com/docker/libnetwork/pull/1796)\n\n### [Packaging](#packaging)\n\n*   Rely on `container-selinux` on Centos/Fedora/RHEL when available [#32437](https://github.com/moby/moby/pull/32437)\n\n### [Runtime](#runtime-2)\n\n*   Add build & engine info prometheus metrics [#32792](https://github.com/moby/moby/pull/32792)\n\n*   Update containerd to d24f39e203aa6be4944f06dd0fe38a618a36c764 [#33007](https://github.com/moby/moby/pull/33007)\n*   Update runc to 992a5be178a62e026f4069f443c6164912adbf09 [#33007](https://github.com/moby/moby/pull/33007)\n\n*   Add option to auto-configure blkdev for devmapper [#31104](https://github.com/moby/moby/pull/31104)\n*   Add log driver list to `docker info` [#32540](https://github.com/moby/moby/pull/32540)\n*   Add API endpoint to allow retrieving an image manifest [#32061](https://github.com/moby/moby/pull/32061)\n\n*   Do not remove container from memory on error with `forceremove` [#31012](https://github.com/moby/moby/pull/31012)\n\n*   Add support for metric plugins [#32874](https://github.com/moby/moby/pull/32874)\n\n*   Return an error when an invalid filter is given to `prune` commands [#33023](https://github.com/moby/moby/pull/33023)\n\n*   Add daemon option to allow pushing foreign layers [#33151](https://github.com/moby/moby/pull/33151)\n\n*   Fix an issue preventing containerd to be restarted after it died [#32986](https://github.com/moby/moby/pull/32986)\n\n*   Add cluster events to Docker event stream. [#32421](https://github.com/moby/moby/pull/32421)\n*   Add support for DNS search on windows [#33311](https://github.com/moby/moby/pull/33311)\n\n*   Upgrade to Go 1.8.3 [#33387](https://github.com/moby/moby/pull/33387)\n\n*   Prevent a containerd crash when journald is restarted [#containerd/930](https://github.com/containerd/containerd/pull/930)\n*   Fix healthcheck failures due to invalid environment variables [#33249](https://github.com/moby/moby/pull/33249)\n*   Prevent a directory to be created in lieu of the daemon socket when a container mounting it is to be restarted during a shutdown [#30348](https://github.com/moby/moby/pull/33330)\n*   Prevent a container to be restarted upon stop if its stop signal is set to `SIGKILL` [#33335](https://github.com/moby/moby/pull/33335)\n*   Ensure log drivers get passed the same filename to both StartLogging and StopLogging endpoints [#33583](https://github.com/moby/moby/pull/33583)\n*   Remove daemon data structure dump on `SIGUSR1` to avoid a panic [#33598](https://github.com/moby/moby/pull/33598)\n\n### [Security](#security-1)\n\n*   Allow personality with UNAME26 bit set in default seccomp profile [#32965](https://github.com/moby/moby/pull/32965)\n\n### [Swarm Mode](#swarm-mode-2)\n\n*   Add an option to allow specifying a different interface for the data traffic (as opposed to control traffic) [#32717](https://github.com/moby/moby/pull/32717)\n\n*   Allow specifying a secret location within the container [#32571](https://github.com/moby/moby/pull/32571)\n\n*   Add support for secrets on Windows [#32208](https://github.com/moby/moby/pull/32208)\n*   Add TLS Info to swarm info and node info endpoint [#32875](https://github.com/moby/moby/pull/32875)\n*   Add support for services to carry arbitrary config objects [#32336](https://github.com/moby/moby/pull/32336), [#docker/cli/45](https://github.com/docker/cli/pull/45), [#33169](https://github.com/moby/moby/pull/33169)\n*   Add API to rotate swarm CA certificate [#32993](https://github.com/moby/moby/pull/32993)\n\n*   Service digest pining is now handled client side [#32388](https://github.com/moby/moby/pull/32388), [#33239](https://github.com/moby/moby/pull/33239)\n\n*   Placement now also take platform in account [#33144](https://github.com/moby/moby/pull/33144)\n\n*   Fix possible hang when joining fails [#docker-ce/19](https://github.com/docker/docker-ce/pull/19)\n*   Fix an issue preventing external CA to be accepted [#33341](https://github.com/moby/moby/pull/33341)\n*   Fix possible orchestration panic in mixed version clusters [#swarmkit/2233](https://github.com/docker/swarmkit/pull/2233)\n*   Avoid assigning duplicate IPs during initialization [#swarmkit/2237](https://github.com/docker/swarmkit/pull/2237)\n\n### [Deprecation](#deprecation)\n\n*   Disable legacy registry (v1) by default [#33629](https://github.com/moby/moby/pull/33629)",
    "title": "Docker Engine 17.06 release notes | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/cache/backends/gha/",
    "markdown": "# GitHub Actions cache | Docker Docs\n\n> **Experimental**\n> \n> This is an experimental feature. The interface and behavior are unstable and may change in future releases.\n\nThe GitHub Actions cache utilizes the [GitHub-provided Action's cache](https://github.com/actions/cache) or other cache services supporting the GitHub Actions cache protocol. This is the recommended cache to use inside your GitHub Actions workflows, as long as your use case falls within the [size and usage limits set by GitHub](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy).\n\nThis cache storage backend is not supported with the default `docker` driver. To use this feature, create a new builder using a different driver. See [Build drivers](https://docs.docker.com/build/drivers/) for more information.\n\nThe following table describes the available CSV parameters that you can pass to `--cache-to` and `--cache-from`.\n\n| Name | Option | Type | Default | Description |\n| --- | --- | --- | --- | --- |\n| `url` | `cache-to`,`cache-from` | String | `$ACTIONS_CACHE_URL` | Cache server URL, see [authentication](#authentication). |\n| `token` | `cache-to`,`cache-from` | String | `$ACTIONS_RUNTIME_TOKEN` | Access token, see [authentication](#authentication). |\n| `scope` | `cache-to`,`cache-from` | String | `buildkit` | Which scope cache object belongs to, see [scope](#scope) |\n| `mode` | `cache-to` | `min`,`max` | `min` | Cache layers to export, see [cache mode](https://docs.docker.com/build/cache/backends/#cache-mode). |\n| `ignore-error` | `cache-to` | Boolean | `false` | Ignore errors caused by failed cache exports. |\n| `timeout` | `cache-to`,`cache-from` | String | `10m` | Max duration for importing or exporting cache before it's timed out. |\n| `repository` | `cache-to` | String |     | GitHub repository used for cache storage. |\n| `ghtoken` | `cache-to` | String |     | GitHub token required for accessing the GitHub API. |\n\nIf the `url` or `token` parameters are left unspecified, the `gha` cache backend will fall back to using environment variables. If you invoke the `docker buildx` command manually from an inline step, then the variables must be manually exposed. Consider using the [`crazy-max/ghaction-github-runtime`](https://github.com/crazy-max/ghaction-github-runtime), GitHub Action as a helper for exposing the variables.\n\nScope is a key used to identify the cache object. By default, it is set to `buildkit`. If you build multiple images, each build will overwrite the cache of the previous, leaving only the final cache.\n\nTo preserve the cache for multiple builds, you can specify this scope attribute with a specific name. In the following example, the cache is set to the image name, to ensure each image gets its own cache:\n\nGitHub's [cache access restrictions](https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache), still apply. Only the cache for the current branch, the base branch and the default branch is accessible by a workflow.\n\n### [Using `docker/build-push-action`](#using-dockerbuild-push-action)\n\nWhen using the [`docker/build-push-action`](https://github.com/docker/build-push-action), the `url` and `token` parameters are automatically populated. No need to manually specify them, or include any additional workarounds.\n\nFor example:\n\nGitHub's [usage limits and eviction policy](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy) causes stale cache entries to be removed after a certain period of time. By default, the `gha` cache backend uses the GitHub Actions cache API to check the status of cache entries.\n\nThe GitHub Actions cache API is subject to rate limiting if you make too many requests in a short period of time, which may happen as a result of cache lookups during a build using the `gha` cache backend.\n\nTo mitigate this issue, you can supply a GitHub token to BuildKit. This lets BuildKit utilize the standard GitHub API for checking cache keys, thereby reducing the number of requests made to the cache API.\n\nTo provide a GitHub token, you can use the `ghtoken` parameter, and a `repository` parameter to specify the repository to use for cache storage. The `ghtoken` parameter is a GitHub token with the `repo` scope, which is required to access the GitHub Actions cache API.\n\nThe `ghtoken` parameter is automatically set to the value of `secrets.GITHUB_TOKEN` when you build with the `docker/build-push-action` action. You can also set the `ghtoken` parameter manually using the `github-token` input, as shown in the following example:\n\nFor an introduction to caching see [Docker build cache](https://docs.docker.com/build/cache/).\n\nFor more information on the `gha` cache backend, see the [BuildKit README](https://github.com/moby/buildkit#github-actions-cache-experimental).\n\nFor more information about using GitHub Actions with Docker, see [Introduction to GitHub Actions](https://docs.docker.com/build/ci/github-actions/)",
    "title": "GitHub Actions cache | Docker Docs\n",
    "description": "Use the GitHub Actions cache to manage your build cache in CI",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/cache/backends/azblob/",
    "markdown": "# Azure Blob Storage cache | Docker Docs\n\n> **Experimental**\n> \n> This is an experimental feature. The interface and behavior are unstable and may change in future releases.\n\nThe `azblob` cache store uploads your resulting build cache to [Azure's blob storage service](https://azure.microsoft.com/en-us/services/storage/blobs/).\n\nThis cache storage backend is not supported with the default `docker` driver. To use this feature, create a new builder using a different driver. See [Build drivers](https://docs.docker.com/build/drivers/) for more information.\n\nThe following table describes the available CSV parameters that you can pass to `--cache-to` and `--cache-from`.\n\n| Name | Option | Type | Default | Description |\n| --- | --- | --- | --- | --- |\n| `name` | `cache-to`,`cache-from` | String |     | Required. The name of the cache image. |\n| `account_url` | `cache-to`,`cache-from` | String |     | Base URL of the storage account. |\n| `secret_access_key` | `cache-to`,`cache-from` | String |     | Blob storage account key, see [authentication](#authentication). |\n| `mode` | `cache-to` | `min`,`max` | `min` | Cache layers to export, see [cache mode](https://docs.docker.com/build/cache/backends/#cache-mode). |\n| `ignore-error` | `cache-to` | Boolean | `false` | Ignore errors caused by failed cache exports. |\n\nThe `secret_access_key`, if left unspecified, is read from environment variables on the BuildKit server following the scheme for the [Azure Go SDK](https://docs.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication). The environment variables are read from the server, not the Buildx client.\n\nFor an introduction to caching see [Docker build cache](https://docs.docker.com/build/cache/).\n\nFor more information on the `azblob` cache backend, see the [BuildKit README](https://github.com/moby/buildkit#azure-blob-storage-cache-experimental).",
    "title": "Azure Blob Storage cache | Docker Docs\n",
    "description": "Manage build cache with Azure blob storage",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/release-notes/17.05/",
    "markdown": "# Docker Engine 17.05 release notes\n\n2017-05-04\n\n### [Builder](#builder)\n\n*   Add multi-stage build support [#31257](https://github.com/docker/docker/pull/31257) [#32063](https://github.com/docker/docker/pull/32063)\n*   Allow using build-time args (`ARG`) in `FROM` [#31352](https://github.com/docker/docker/pull/31352)\n*   Add an option for specifying build target [#32496](https://github.com/docker/docker/pull/32496)\n\n*   Accept `-f -` to read Dockerfile from `stdin`, but use local context for building [#31236](https://github.com/docker/docker/pull/31236)\n*   The values of default build time arguments (e.g `HTTP_PROXY`) are no longer displayed in docker image history unless a corresponding `ARG` instruction is written in the Dockerfile. [#31584](https://github.com/docker/docker/pull/31584)\n\n*   Fix setting command if a custom shell is used in a parent image [#32236](https://github.com/docker/docker/pull/32236)\n*   Fix `docker build --label` when the label includes single quotes and a space [#31750](https://github.com/docker/docker/pull/31750)\n\n### [Client](#client)\n\n*   Add `--mount` flag to `docker run` and `docker create` [#32251](https://github.com/docker/docker/pull/32251)\n*   Add `--type=secret` to `docker inspect` [#32124](https://github.com/docker/docker/pull/32124)\n*   Add `--format` option to `docker secret ls` [#31552](https://github.com/docker/docker/pull/31552)\n*   Add `--filter` option to `docker secret ls` [#30810](https://github.com/docker/docker/pull/30810)\n*   Add `--filter scope=<swarm|local>` to `docker network ls` [#31529](https://github.com/docker/docker/pull/31529)\n*   Add `--cpus` support to `docker update` [#31148](https://github.com/docker/docker/pull/31148)\n*   Add label filter to `docker system prune` and other `prune` commands [#30740](https://github.com/docker/docker/pull/30740)\n*   `docker stack rm` now accepts multiple stacks as input [#32110](https://github.com/docker/docker/pull/32110)\n*   Improve `docker version --format` option when the client has downgraded the API version [#31022](https://github.com/docker/docker/pull/31022)\n*   Prompt when using an encrypted client certificate to connect to a docker daemon [#31364](https://github.com/docker/docker/pull/31364)\n*   Display created tags on successful `docker build` [#32077](https://github.com/docker/docker/pull/32077)\n*   Cleanup compose convert error messages [#32087](https://github.com/moby/moby/pull/32087)\n\n### [Contrib](#contrib)\n\n*   Add support for building docker debs for Ubuntu 17.04 Zesty on amd64 [#32435](https://github.com/docker/docker/pull/32435)\n\n### [Daemon](#daemon)\n\n*   Fix `--api-cors-header` being ignored if `--api-enable-cors` is not set [#32174](https://github.com/docker/docker/pull/32174)\n*   Cleanup docker tmp dir on start [#31741](https://github.com/docker/docker/pull/31741)\n*   Deprecate `--graph` flag in favor or `--data-root` [#28696](https://github.com/docker/docker/pull/28696)\n\n### [Logging](#logging)\n\n*   Add support for logging driver plugins [#28403](https://github.com/docker/docker/pull/28403)\n\n*   Add support for showing logs of individual tasks to `docker service logs`, and add `/task/{id}/logs` REST endpoint [#32015](https://github.com/docker/docker/pull/32015)\n*   Add `--log-opt env-regex` option to match environment variables using a regular expression [#27565](https://github.com/docker/docker/pull/27565)\n\n### [Networking](#networking)\n\n*   Allow user to replace, and customize the ingress network [#31714](https://github.com/docker/docker/pull/31714)\n\n*   Fix UDP traffic in containers not working after the container is restarted [#32505](https://github.com/docker/docker/pull/32505)\n*   Fix files being written to `/var/lib/docker` if a different data-root is set [#32505](https://github.com/docker/docker/pull/32505)\n\n### [Runtime](#runtime)\n\n*   Ensure health probe is stopped when a container exits [#32274](https://github.com/docker/docker/pull/32274)\n\n### [Swarm Mode](#swarm-mode)\n\n*   Add update/rollback order for services (`--update-order` / `--rollback-order`) [#30261](https://github.com/docker/docker/pull/30261)\n*   Add support for synchronous `service create` and `service update` [#31144](https://github.com/docker/docker/pull/31144)\n*   Add support for \"grace periods\" on healthchecks through the `HEALTHCHECK --start-period` and `--health-start-period` flag to `docker service create`, `docker service update`, `docker create`, and `docker run` to support containers with an initial startup time [#28938](https://github.com/docker/docker/pull/28938)\n\n*   `docker service create` now omits fields that are not specified by the user, when possible. This will allow defaults to be applied inside the manager [#32284](https://github.com/docker/docker/pull/32284)\n*   `docker service inspect` now shows default values for fields that are not specified by the user [#32284](https://github.com/docker/docker/pull/32284)\n*   Move `docker service logs` out of experimental [#32462](https://github.com/docker/docker/pull/32462)\n*   Add support for Credential Spec and SELinux to services to the API [#32339](https://github.com/docker/docker/pull/32339)\n*   Add `--entrypoint` flag to `docker service create` and `docker service update` [#29228](https://github.com/docker/docker/pull/29228)\n*   Add `--network-add` and `--network-rm` to `docker service update` [#32062](https://github.com/docker/docker/pull/32062)\n*   Add `--credential-spec` flag to `docker service create` and `docker service update` [#32339](https://github.com/docker/docker/pull/32339)\n*   Add `--filter mode=<global|replicated>` to `docker service ls` [#31538](https://github.com/docker/docker/pull/31538)\n*   Resolve network IDs on the client side, instead of in the daemon when creating services [#32062](https://github.com/docker/docker/pull/32062)\n*   Add `--format` option to `docker node ls` [#30424](https://github.com/docker/docker/pull/30424)\n*   Add `--prune` option to `docker stack deploy` to remove services that are no longer defined in the docker-compose file [#31302](https://github.com/docker/docker/pull/31302)\n*   Add `PORTS` column for `docker service ls` when using `ingress` mode [#30813](https://github.com/docker/docker/pull/30813)\n\n*   Fix unnescessary re-deploying of tasks when environment-variables are used [#32364](https://github.com/docker/docker/pull/32364)\n*   Fix `docker stack deploy` not supporting `endpoint_mode` when deploying from a docker compose file [#32333](https://github.com/docker/docker/pull/32333)\n*   Proceed with startup if cluster component cannot be created to allow recovering from a broken swarm setup [#31631](https://github.com/docker/docker/pull/31631)\n\n### [Security](#security)\n\n*   Allow setting SELinux type or MCS labels when using `--ipc=container:` or `--ipc=host` [#30652](https://github.com/docker/docker/pull/30652)\n\n### [Deprecation](#deprecation)\n\n*   Deprecate `--api-enable-cors` daemon flag. This flag was marked deprecated in Docker 1.6.0 but not listed in deprecated features [#32352](https://github.com/docker/docker/pull/32352)\n*   Remove Ubuntu 12.04 (Precise Pangolin) as supported platform. Ubuntu 12.04 is EOL, and no longer receives updates [#32520](https://github.com/docker/docker/pull/32520)",
    "title": "Docker Engine 17.05 release notes | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/release-notes/17.03/",
    "markdown": "# Docker Engine 17.03 release notes\n\n2018-08-30\n\n### [Runtime](#runtime)\n\n*   Update go-connections to d217f8e [#28](https://github.com/docker/engine/pull/28)\n\n2017-05-29\n\n### [Networking](#networking)\n\n*   Fix a concurrency issue preventing network creation [#33273](https://github.com/moby/moby/pull/33273)\n\n### [Runtime](#runtime-1)\n\n*   Relabel secrets path to avoid a Permission Denied on selinux enabled systems [#33236](https://github.com/moby/moby/pull/33236) (ref [#32529](https://github.com/moby/moby/pull/32529)\n*   Fix cases where local volume were not properly relabeled if needed [#33236](https://github.com/moby/moby/pull/33236) (ref [#29428](https://github.com/moby/moby/pull/29428))\n*   Fix an issue while upgrading if a plugin rootfs was still mounted [#33236](https://github.com/moby/moby/pull/33236) (ref [#32525](https://github.com/moby/moby/pull/32525))\n*   Fix an issue where volume wouldn't default to the `rprivate` propagation mode [#33236](https://github.com/moby/moby/pull/33236) (ref [#32851](https://github.com/moby/moby/pull/32851))\n*   Fix a panic that could occur when a volume driver could not be retrieved [#33236](https://github.com/moby/moby/pull/33236) (ref [#32347](https://github.com/moby/moby/pull/32347))\n\n*   Add a warning in `docker info` when the `overlay` or `overlay2` graphdriver is used on a filesystem without `d_type` support [#33236](https://github.com/moby/moby/pull/33236) (ref [#31290](https://github.com/moby/moby/pull/31290))\n\n*   Fix an issue with backporting mount spec to older volumes [#33207](https://github.com/moby/moby/pull/33207)\n*   Fix issue where a failed unmount can lead to data loss on local volume remove [#33120](https://github.com/moby/moby/pull/33120)\n\n### [Swarm Mode](#swarm-mode)\n\n*   Fix a case where tasks could get killed unexpectedly [#33118](https://github.com/moby/moby/pull/33118)\n*   Fix an issue preventing to deploy services if the registry cannot be reached despite the needed images being locally present [#33117](https://github.com/moby/moby/pull/33117)\n\n2017-03-27\n\n### [Remote API (v1.27) & Client](#remote-api-v127--client)\n\n*   Fix autoremove on older api [#31692](https://github.com/docker/docker/pull/31692)\n*   Fix default network customization for a stack [#31258](https://github.com/docker/docker/pull/31258/)\n*   Correct CPU usage calculation in presence of offline CPUs and newer Linux [#31802](https://github.com/docker/docker/pull/31802)\n*   Fix issue where service healthcheck is `{}` in remote API [#30197](https://github.com/docker/docker/pull/30197)\n\n### [Runtime](#runtime-2)\n\n*   Update runc to 54296cf40ad8143b62dbcaa1d90e520a2136ddfe [#31666](https://github.com/docker/docker/pull/31666)\n*   Ignore cgroup2 mountpoints [opencontainers/runc#1266](https://github.com/opencontainers/runc/pull/1266)\n*   Update containerd to 4ab9917febca54791c5f071a9d1f404867857fcc [#31662](https://github.com/docker/docker/pull/31662) [#31852](https://github.com/docker/docker/pull/31852)\n*   Register healtcheck service before calling restore() [docker/containerd#609](https://github.com/docker/containerd/pull/609)\n*   Fix `docker exec` not working after unattended upgrades that reload apparmor profiles [#31773](https://github.com/docker/docker/pull/31773)\n*   Fix unmounting layer without merge dir with Overlay2 [#31069](https://github.com/docker/docker/pull/31069)\n*   Do not ignore \"volume in use\" errors when force-delete [#31450](https://github.com/docker/docker/pull/31450)\n\n### [Swarm Mode](#swarm-mode-1)\n\n*   Update swarmkit to 17756457ad6dc4d8a639a1f0b7a85d1b65a617bb [#31807](https://github.com/docker/docker/pull/31807)\n*   Scheduler now correctly considers tasks which have been assigned to a node but aren't yet running [docker/swarmkit#1980](https://github.com/docker/swarmkit/pull/1980)\n*   Allow removal of a network when only dead tasks reference it [docker/swarmkit#2018](https://github.com/docker/swarmkit/pull/2018)\n*   Retry failed network allocations less aggressively [docker/swarmkit#2021](https://github.com/docker/swarmkit/pull/2021)\n*   Avoid network allocation for tasks that are no longer running [docker/swarmkit#2017](https://github.com/docker/swarmkit/pull/2017)\n*   Bookkeeping fixes inside network allocator allocator [docker/swarmkit#2019](https://github.com/docker/swarmkit/pull/2019) [docker/swarmkit#2020](https://github.com/docker/swarmkit/pull/2020)\n\n### [Windows](#windows)\n\n*   Cleanup HCS on restore [#31503](https://github.com/docker/docker/pull/31503)\n\n2017-03-01\n\n**IMPORTANT**: Starting with this release, Docker is on a monthly release cycle and uses a new YY.MM versioning scheme to reflect this. Two channels are available: monthly and quarterly. Any given monthly release will only receive security and bugfixes until the next monthly release is available. Quarterly releases receive security and bugfixes for 4 months after initial release. This release includes bugfixes for 1.13.1 but there are no major feature additions and the API version stays the same. Upgrading from Docker 1.13.1 to 17.03.0 is expected to be simple and low-risk.\n\n### [Client](#client)\n\n*   Fix panic in `docker stats --format` [#30776](https://github.com/docker/docker/pull/30776)\n\n### [Contrib](#contrib)\n\n*   Update various `bash` and `zsh` completion scripts [#30823](https://github.com/docker/docker/pull/30823), [#30945](https://github.com/docker/docker/pull/30945) and more...\n*   Block obsolete socket families in default seccomp profile - mitigates unpatched kernels' CVE-2017-6074 [#29076](https://github.com/docker/docker/pull/29076)\n\n### [Networking](#networking-1)\n\n*   Fix bug on overlay encryption keys rotation in cross-datacenter swarm [#30727](https://github.com/docker/docker/pull/30727)\n*   Fix side effect panic in overlay encryption and network control plane communication failure (\"No installed keys could decrypt the message\") on frequent swarm leader re-election [#25608](https://github.com/docker/docker/pull/25608)\n*   Several fixes around system responsiveness and datapath programming when using overlay network with external kv-store [docker/libnetwork#1639](https://github.com/docker/libnetwork/pull/1639), [docker/libnetwork#1632](https://github.com/docker/libnetwork/pull/1632) and more...\n*   Discard incoming plain vxlan packets for encrypted overlay network [#31170](https://github.com/docker/docker/pull/31170)\n*   Release the network attachment on allocation failure [#31073](https://github.com/docker/docker/pull/31073)\n*   Fix port allocation when multiple published ports map to the same target port [docker/swarmkit#1835](https://github.com/docker/swarmkit/pull/1835)\n\n### [Runtime](#runtime-3)\n\n*   Fix a deadlock in docker logs [#30223](https://github.com/docker/docker/pull/30223)\n*   Fix CPU spin waiting for log write events [#31070](https://github.com/docker/docker/pull/31070)\n*   Fix a possible crash when using journald [#31231](https://github.com/docker/docker/pull/31231) [#31263](https://github.com/docker/docker/pull/31263)\n*   Fix a panic on close of nil channel [#31274](https://github.com/docker/docker/pull/31274)\n*   Fix duplicate mount point for `--volumes-from` in `docker run` [#29563](https://github.com/docker/docker/pull/29563)\n*   Fix `--cache-from` does not cache last step [#31189](https://github.com/docker/docker/pull/31189)\n\n### [Swarm Mode](#swarm-mode-2)\n\n*   Shutdown leaks an error when the container was never started [#31279](https://github.com/docker/docker/pull/31279)\n*   Fix possibility of tasks getting stuck in the \"NEW\" state during a leader failover [docker/swarmkit#1938](https://github.com/docker/swarmkit/pull/1938)\n*   Fix extraneous task creations for global services that led to confusing replica counts in `docker service ls` [docker/swarmkit#1957](https://github.com/docker/swarmkit/pull/1957)\n*   Fix problem that made rolling updates slow when `task-history-limit` was set to 1 [docker/swarmkit#1948](https://github.com/docker/swarmkit/pull/1948)\n*   Restart tasks elsewhere, if appropriate, when they are shut down as a result of nodes no longer satisfying constraints [docker/swarmkit#1958](https://github.com/docker/swarmkit/pull/1958)\n*   (experimental)",
    "title": "Docker Engine 17.03 release notes | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/",
    "markdown": "# Buildx Bake | Docker Docs\n\n> **Experimental**\n> \n> Bake is an experimental feature, and we are looking for [feedback from users](https://github.com/docker/buildx/issues).\n\nBake is a feature of Docker Buildx that lets you define your build configuraton using a declarative file, as opposed to specifying a complex CLI expression. It also lets you run multiple builds concurrently with a single invocation.\n\nA Bake file can be written in HCL, JSON, or YAML formats, where the YAML format is an extension of a Docker Compose file. Here's an example Bake file in HCL format:\n\nThe `group` block defines a group of targets that can be built concurrently. Each `target` block defines a build target with its own configuration, such as the build context, Dockerfile, and tags.\n\nTo invoke a build using the above Bake file, you can run:\n\nThis executes the `default` group, which builds the `frontend` and `backend` targets concurrently.\n\nTo learn how to get started with Bake, head over to the [Bake introduction](https://docs.docker.com/build/bake/introduction/).",
    "title": "Buildx Bake | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/cache/backends/s3/",
    "markdown": "# Amazon S3 cache | Docker Docs\n\n> **Experimental**\n> \n> This is an experimental feature. The interface and behavior are unstable and may change in future releases.\n\nThe `s3` cache storage uploads your resulting build cache to [Amazon S3 file storage service](https://aws.amazon.com/s3/) or other S3-compatible services, such as [MinIO](https://min.io/).\n\nThis cache storage backend is not supported with the default `docker` driver. To use this feature, create a new builder using a different driver. See [Build drivers](https://docs.docker.com/build/drivers/) for more information.\n\nThe following table describes the available CSV parameters that you can pass to `--cache-to` and `--cache-from`.\n\n| Name | Option | Type | Default | Description |\n| --- | --- | --- | --- | --- |\n| `region` | `cache-to`,`cache-from` | String |     | Required. Geographic location. |\n| `bucket` | `cache-to`,`cache-from` | String |     | Required. Name of the S3 bucket. |\n| `name` | `cache-to`,`cache-from` | String |     | Name of the cache image. |\n| `endpoint_url` | `cache-to`,`cache-from` | String |     | Endpoint of the S3 bucket. |\n| `blobs_prefix` | `cache-to`,`cache-from` | String |     | Prefix to prepend to blob filenames. |\n| `manifests_prefix` | `cache-to`,`cache-from` | String |     | Prefix to prepend on manifest filenames. |\n| `use_path_style` | `cache-to`,`cache-from` | Boolean | `false` | When `true`, uses `bucket` in the URL instead of hostname. |\n| `access_key_id` | `cache-to`,`cache-from` | String |     | See [authentication](#authentication). |\n| `secret_access_key` | `cache-to`,`cache-from` | String |     | See [authentication](#authentication). |\n| `session_token` | `cache-to`,`cache-from` | String |     | See [authentication](#authentication). |\n| `mode` | `cache-to` | `min`,`max` | `min` | Cache layers to export, see [cache mode](https://docs.docker.com/build/cache/backends/#cache-mode). |\n| `ignore-error` | `cache-to` | Boolean | `false` | Ignore errors caused by failed cache exports. |\n\nBuildx can reuse existing AWS credentials, configured either using a credentials file or environment variables, for pushing and pulling cache to S3. Alternatively, you can use the `access_key_id`, `secret_access_key`, and `session_token` attributes to specify credentials directly on the CLI.\n\nRefer to [AWS Go SDK, Specifying Credentials](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials) for details about authentication using environment variables and credentials file.\n\nFor an introduction to caching see [Docker build cache](https://docs.docker.com/build/cache/).\n\nFor more information on the `s3` cache backend, see the [BuildKit README](https://github.com/moby/buildkit#s3-cache-experimental).",
    "title": "Amazon S3 cache | Docker Docs\n",
    "description": "Manage build cache with Amazon S3 buckets",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/release-notes/17.04/",
    "markdown": "# Docker Engine 17.04 release notes\n\n2017-04-05\n\n### [Builder](#builder)\n\n*   Disable container logging for build containers [#29552](https://github.com/docker/docker/pull/29552)\n*   Fix use of `**/` in `.dockerignore` [#29043](https://github.com/docker/docker/pull/29043)\n\n### [Client](#client)\n\n*   Sort `docker stack ls` by name [#31085](https://github.com/docker/docker/pull/31085)\n*   Flags for specifying bind mount consistency [#31047](https://github.com/docker/docker/pull/31047)\n\n*   Output of docker CLI --help is now wrapped to the terminal width [#28751](https://github.com/docker/docker/pull/28751)\n*   Suppress image digest in docker ps [#30848](https://github.com/docker/docker/pull/30848)\n*   Hide command options that are related to Windows [#30788](https://github.com/docker/docker/pull/30788)\n*   Fix `docker plugin install` prompt to accept \"enter\" for the \"N\" default [#30769](https://github.com/docker/docker/pull/30769)\n\n*   Add `truncate` function for Go templates [#30484](https://github.com/docker/docker/pull/30484)\n\n*   Support expanded syntax of ports in `stack deploy` [#30476](https://github.com/docker/docker/pull/30476)\n*   Support expanded syntax of mounts in `stack deploy` [#30597](https://github.com/docker/docker/pull/30597) [#31795](https://github.com/docker/docker/pull/31795)\n\n*   Add `--add-host` for docker build [#30383](https://github.com/docker/docker/pull/30383)\n*   Add `.CreatedAt` placeholder for `docker network ls --format` [#29900](https://github.com/docker/docker/pull/29900)\n\n*   Update order of `--secret-rm` and `--secret-add` [#29802](https://github.com/docker/docker/pull/29802)\n\n*   Add `--filter enabled=true` for `docker plugin ls` [#28627](https://github.com/docker/docker/pull/28627)\n*   Add `--format` to `docker service ls` [#28199](https://github.com/docker/docker/pull/28199)\n*   Add `publish` and `expose` filter for `docker ps --filter` [#27557](https://github.com/docker/docker/pull/27557)\n\n*   Support multiple service IDs on `docker service ps` [#25234](https://github.com/docker/docker/pull/25234)\n\n*   Allow swarm join with `--availability=drain` [#24993](https://github.com/docker/docker/pull/24993)\n\n*   Docker inspect now shows \"docker-default\" when AppArmor is enabled and no other profile was defined [#27083](https://github.com/docker/docker/pull/27083)\n\n### [Logging](#logging)\n\n*   Implement optional ring buffer for container logs [#28762](https://github.com/docker/docker/pull/28762)\n*   Add `--log-opt awslogs-create-group=<true|false>` for awslogs (CloudWatch) to support creation of log groups as needed [#29504](https://github.com/docker/docker/pull/29504)\n\n*   Fix segfault when using the gcplogs logging driver with a \"static\" binary [#29478](https://github.com/docker/docker/pull/29478)\n\n### [Networking](#networking)\n\n*   Check parameter `--ip`, `--ip6` and `--link-local-ip` in `docker network connect` [#30807](https://github.com/docker/docker/pull/30807)\n\n*   Added support for `dns-search` [#30117](https://github.com/docker/docker/pull/30117)\n*   Added --verbose option for docker network inspect to show task details from all swarm nodes [#31710](https://github.com/docker/docker/pull/31710)\n\n*   Clear stale datapath encryption states when joining the cluster [docker/libnetwork#1354](https://github.com/docker/libnetwork/pull/1354)\n\n*   Ensure iptables initialization only happens once [docker/libnetwork#1676](https://github.com/docker/libnetwork/pull/1676)\n\n*   Fix bad order of iptables filter rules [docker/libnetwork#961](https://github.com/docker/libnetwork/pull/961)\n\n*   Add anonymous container alias to service record on attachable network [docker/libnetwork#1651](https://github.com/docker/libnetwork/pull/1651)\n*   Support for `com.docker.network.container_iface_prefix` driver label [docker/libnetwork#1667](https://github.com/docker/libnetwork/pull/1667)\n*   Improve network list performance by omitting network details that are not used [#30673](https://github.com/docker/docker/pull/30673)\n\n### [Runtime](#runtime)\n\n*   Handle paused container when restoring without live-restore set [#31704](https://github.com/docker/docker/pull/31704)\n\n*   Do not allow sub second in healthcheck options in Dockerfile [#31177](https://github.com/docker/docker/pull/31177)\n\n*   Support name and id prefix in `secret update` [#30856](https://github.com/docker/docker/pull/30856)\n*   Use binary frame for websocket attach endpoint [#30460](https://github.com/docker/docker/pull/30460)\n*   Fix linux mount calls not applying propagation type changes [#30416](https://github.com/docker/docker/pull/30416)\n*   Fix ExecIds leak on failed `exec -i` [#30340](https://github.com/docker/docker/pull/30340)\n*   Prune named but untagged images if `danglingOnly=true` [#30330](https://github.com/docker/docker/pull/30330)\n\n*   Add daemon flag to set `no_new_priv` as default for unprivileged containers [#29984](https://github.com/docker/docker/pull/29984)\n*   Add daemon option `--default-shm-size` [#29692](https://github.com/docker/docker/pull/29692)\n*   Support registry mirror config reload [#29650](https://github.com/docker/docker/pull/29650)\n\n*   Ignore the daemon log config when building images [#29552](https://github.com/docker/docker/pull/29552)\n\n*   Move secret name or ID prefix resolving from client to daemon [#29218](https://github.com/docker/docker/pull/29218)\n\n*   Allow adding rules to `cgroup devices.allow` on container create/run [#22563](https://github.com/docker/docker/pull/22563)\n\n*   Fix `cpu.cfs_quota_us` being reset when running `systemd daemon-reload` [#31736](https://github.com/docker/docker/pull/31736)\n\n### [Swarm Mode](#swarm-mode)\n\n*   Topology-aware scheduling [#30725](https://github.com/docker/docker/pull/30725)\n*   Automatic service rollback on failure [#31108](https://github.com/docker/docker/pull/31108)\n*   Worker and manager on the same node are now connected through a UNIX socket [docker/swarmkit#1828](https://github.com/docker/swarmkit/pull/1828), [docker/swarmkit#1850](https://github.com/docker/swarmkit/pull/1850), [docker/swarmkit#1851](https://github.com/docker/swarmkit/pull/1851)\n\n*   Improve raft transport package [docker/swarmkit#1748](https://github.com/docker/swarmkit/pull/1748)\n*   No automatic manager shutdown on demotion/removal [docker/swarmkit#1829](https://github.com/docker/swarmkit/pull/1829)\n*   Use TransferLeadership to make leader demotion safer [docker/swarmkit#1939](https://github.com/docker/swarmkit/pull/1939)\n*   Decrease default monitoring period [docker/swarmkit#1967](https://github.com/docker/swarmkit/pull/1967)\n\n*   Add Service logs formatting [#31672](https://github.com/docker/docker/pull/31672)\n\n*   Fix service logs API to be able to specify stream [#31313](https://github.com/docker/docker/pull/31313)\n\n*   Add `--stop-signal` for `service create` and `service update` [#30754](https://github.com/docker/docker/pull/30754)\n*   Add `--read-only` for `service create` and `service update` [#30162](https://github.com/docker/docker/pull/30162)\n*   Renew the context after communicating with the registry [#31586](https://github.com/docker/docker/pull/31586)\n*   (experimental) Add `--tail` and `--since` options to `docker service logs` [#31500](https://github.com/docker/docker/pull/31500)\n*   (experimental) Add `--no-task-ids` and `--no-trunc` options to `docker service logs` [#31672](https://github.com/docker/docker/pull/31672)\n\n### [Windows](#windows)\n\n*   Block pulling Windows images on non-Windows daemons [#29001](https://github.com/docker/docker/pull/29001)",
    "title": "Docker Engine 17.04 release notes | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/packaging/",
    "markdown": "# Packaging your software | Docker Docs\n\nIt all starts with a Dockerfile.\n\nDocker builds images by reading the instructions from a Dockerfile. A Dockerfile is a text file containing instructions for building your source code. The Dockerfile instruction syntax is defined by the specification reference in the [Dockerfile reference](https://docs.docker.com/reference/dockerfile/).\n\nHere are the most common types of instructions:\n\n| Instruction | Description |\n| --- | --- |\n| [`FROM <image>`](https://docs.docker.com/reference/dockerfile/#from) | Defines a base for your image. |\n| [`RUN <command>`](https://docs.docker.com/reference/dockerfile/#run) | Executes any commands in a new layer on top of the current image and commits the result. `RUN` also has a shell form for running commands. |\n| [`WORKDIR <directory>`](https://docs.docker.com/reference/dockerfile/#workdir) | Sets the working directory for any `RUN`, `CMD`, `ENTRYPOINT`, `COPY`, and `ADD` instructions that follow it in the Dockerfile. |\n| [`COPY <src> <dest>`](https://docs.docker.com/reference/dockerfile/#copy) | Copies new files or directories from `<src>` and adds them to the filesystem of the container at the path `<dest>`. |\n| [`CMD <command>`](https://docs.docker.com/reference/dockerfile/#cmd) | Lets you define the default program that is run once you start the container based on this image. Each Dockerfile only has one `CMD`, and only the last `CMD` instance is respected when multiple exist. |\n\nDockerfiles are crucial inputs for image builds and can facilitate automated, multi-layer image builds based on your unique configurations. Dockerfiles can start simple and grow with your needs to support more complex scenarios.\n\n### [Filename](#filename)\n\nThe default filename to use for a Dockerfile is `Dockerfile`, without a file extension. Using the default name allows you to run the `docker build` command without having to specify additional command flags.\n\nSome projects may need distinct Dockerfiles for specific purposes. A common convention is to name these `<something>.Dockerfile`. You can specify the Dockerfile filename using the `--file` flag for the `docker build` command. Refer to the [`docker build` CLI reference](https://docs.docker.com/reference/cli/docker/image/build/#file) to learn about the `--file` flag.\n\n> **Note**\n> \n> We recommend using the default (`Dockerfile`) for your project's primary Dockerfile.\n\nDocker images consist of layers. Each layer is the result of a build instruction in the Dockerfile. Layers are stacked sequentially, and each one is a delta representing the changes applied to the previous layer.\n\n### [Example](#example)\n\nHere's what a typical workflow for building applications with Docker looks like.\n\nThe following example code shows a small \"Hello World\" application written in Python, using the Flask framework.\n\nIn order to ship and deploy this application without Docker Build, you would need to make sure that:\n\n*   The required runtime dependencies are installed on the server\n*   The Python code gets uploaded to the server's filesystem\n*   The server starts your application, using the necessary parameters\n\nThe following Dockerfile creates a container image, which has all the dependencies installed and that automatically starts your application.\n\nHere's a breakdown of what this Dockerfile does:\n\n*   [Dockerfile syntax](#dockerfile-syntax)\n*   [Base image](#base-image)\n*   [Environment setup](#environment-setup)\n*   [Comments](#comments)\n*   [Installing dependencies](#installing-dependencies)\n*   [Copying files](#copying-files)\n*   [Setting environment variables](#setting-environment-variables)\n*   [Exposed ports](#exposed-ports)\n*   [Starting the application](#starting-the-application)\n\n### [Dockerfile syntax](#dockerfile-syntax)\n\nThe first line to add to a Dockerfile is a [`# syntax` parser directive](https://docs.docker.com/reference/dockerfile/#syntax). While optional, this directive instructs the Docker builder what syntax to use when parsing the Dockerfile, and allows older Docker versions with [BuildKit enabled](https://docs.docker.com/build/buildkit/#getting-started) to use a specific [Dockerfile frontend](https://docs.docker.com/build/dockerfile/frontend/) before starting the build. [Parser directives](https://docs.docker.com/reference/dockerfile/#parser-directives) must appear before any other comment, whitespace, or Dockerfile instruction in your Dockerfile, and should be the first line in Dockerfiles.\n\n> **Tip**\n> \n> We recommend using `docker/dockerfile:1`, which always points to the latest release of the version 1 syntax. BuildKit automatically checks for updates of the syntax before building, making sure you are using the most current version.\n\n### [Base image](#base-image)\n\nThe line following the syntax directive defines what base image to use:\n\nThe [`FROM` instruction](https://docs.docker.com/reference/dockerfile/#from) sets your base image to the 22.04 release of Ubuntu. All instructions that follow are executed in this base image: an Ubuntu environment. The notation `ubuntu:22.04`, follows the `name:tag` standard for naming Docker images. When you build images, you use this notation to name your images. There are many public images you can leverage in your projects, by importing them into your build steps using the Dockerfile `FROM` instruction.\n\n[Docker Hub](https://hub.docker.com/search?image_filter=official&q=&type=image) contains a large set of official images that you can use for this purpose.\n\n### [Environment setup](#environment-setup)\n\nThe following line executes a build command inside the base image.\n\nThis [`RUN` instruction](https://docs.docker.com/reference/dockerfile/#run) executes a shell in Ubuntu that updates the APT package index and installs Python tools in the container.\n\nNote the `# install app dependencies` line. This is a comment. Comments in Dockerfiles begin with the `#` symbol. As your Dockerfile evolves, comments can be instrumental to document how your Dockerfile works for any future readers and editors of the file, including your future self!\n\n> **Note**\n> \n> You might've noticed that comments are denoted using the same symbol as the [syntax directive](#dockerfile-syntax) on the first line of the file. The symbol is only interpreted as a directive if the pattern matches a directive and appears at the beginning of the Dockerfile. Otherwise, it's treated as a comment.\n\n### [Installing dependencies](#installing-dependencies)\n\nThe second `RUN` instruction installs the `flask` dependency required by the Python application.\n\nA prerequisite for this instruction is that `pip` is installed into the build container. The first `RUN` command installs `pip`, which ensures that we can use the command to install the flask web framework.\n\n### [Copying files](#copying-files)\n\nThe next instruction uses the [`COPY` instruction](https://docs.docker.com/reference/dockerfile/#copy) to copy the `hello.py` file from the local build context into the root directory of our image.\n\nA [build context](https://docs.docker.com/build/building/context/) is the set of files that you can access in Dockerfile instructions such as `COPY` and `ADD`.\n\nAfter the `COPY` instruction, the `hello.py` file is added to the filesystem of the build container.\n\n### [Setting environment variables](#setting-environment-variables)\n\nIf your application uses environment variables, you can set environment variables in your Docker build using the [`ENV` instruction](https://docs.docker.com/reference/dockerfile/#env).\n\nThis sets a Linux environment variable we'll need later. Flask, the framework used in this example, uses this variable to start the application. Without this, flask wouldn't know where to find our application to be able to run it.\n\n### [Exposed ports](#exposed-ports)\n\nThe [`EXPOSE` instruction](https://docs.docker.com/reference/dockerfile/#expose) marks that our final image has a service listening on port `8000`.\n\nThis instruction isn't required, but it is a good practice and helps tools and team members understand what this application is doing.\n\n### [Starting the application](#starting-the-application)\n\nFinally, [`CMD` instruction](https://docs.docker.com/reference/dockerfile/#cmd) sets the command that is run when the user starts a container based on this image.\n\nThis command starts the flask development server listening on all addresses on port `8000`. The example here uses the \"exec form\" version of `CMD`. It's also possible to use the \"shell form\":\n\nThere are subtle differences between these two versions, for example in how they trap signals like `SIGTERM` and `SIGKILL`. For more information about these differences, see [Shell and exec form](https://docs.docker.com/reference/dockerfile/#shell-and-exec-form)\n\nTo build a container image using the Dockerfile example from the [previous section](#example), you use the `docker build` command:\n\nThe `-t test:latest` option specifies the name and tag of the image.\n\nThe single dot (`.`) at the end of the command sets the [build context](https://docs.docker.com/build/building/context/) to the current directory. This means that the build expects to find the Dockerfile and the `hello.py` file in the directory where the command is invoked. If those files aren't there, the build fails.\n\nAfter the image has been built, you can run the application as a container with `docker run`, specifying the image name:\n\nThis publishes the container's port 8000 to `http://localhost:8000` on the Docker host.\n\nIf you are interested in examples in other languages, such as Go, check out our [language-specific guides](https://docs.docker.com/language/) in the Guides section.\n\nFor more information about building, including advanced use cases and patterns, refer to the [Build with Docker](https://docs.docker.com/build/guide/) guide.",
    "title": "Packaging your software | Docker Docs\n",
    "description": "Learn about Dockerfiles and how to use them with Docker Images to build and package your software",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/architecture/",
    "markdown": "# Docker Build architecture | Docker Docs\n\nDocker Build implements a client-server architecture, where:\n\n*   Buildx is the client and the user interface for running and managing builds\n*   BuildKit is the server, or builder, that handles the build execution.\n\n![Build high-level architecture](https://docs.docker.com/build/images/build-high-level-arch.png)\n\nAs of Docker Engine 23.0 and Docker Desktop 4.19, Buildx is the default build client.\n\nBuildx is a CLI tool that provides a user interface for working with builds. Buildx is a drop-in replacement for the legacy build client used in earlier versions of Docker Engine and Docker Desktop. In newer versions of Docker Desktop and Docker Engine, you're using Buildx by default when you invoke the `docker build` command. In earlier versions, to build using Buildx you would use the `docker buildx build` command.\n\nBuildx is more than just an updated `build` command. It also contains utilities for creating and managing [builders](#builders).\n\n### [Install Buildx](#install-buildx)\n\nDocker Buildx is installed by default with Docker Desktop. Docker Engine version 23.0 and later requires that you install Buildx from a separate package. Buildx is included in the Docker Engine installation instructions, see [Install Docker Engine](https://docs.docker.com/engine/install/).\n\nYou can also build the CLI plugin from source, or grab a binary from the GitHub repository and install it manually. See [docker/buildx README](https://github.com/docker/buildx#manual-download) for more information\n\n\"Builder\" is a term used to describe an instance of a BuildKit backend.\n\nA builder may run on the same system as the Buildx client, or it may run remotely, on a different system. You can run it as a single node, or as a cluster of nodes. Builder nodes may be containers, virtual machines, or physical machines.\n\nFor more information, see [Builders](https://docs.docker.com/build/builders/).\n\nBuildKit, or `buildkitd`, is the daemon process that executes the build workloads.\n\nA build execution starts with the invocation of a `docker build` command. Buildx interprets your build command and sends a build request to the BuildKit backend. The build request includes:\n\n*   The Dockerfile\n*   Build arguments\n*   Export options\n*   Caching options\n\nBuildKit resolves the build instruction and executes the build steps. For the duration of the build, Buildx monitors the build status and prints the progress to the terminal.\n\nIf the build requires resources from the client, such as local files or build secrets, BuildKit requests the resources that it needs from Buildx.\n\nThis is one way in which BuildKit is more efficient compared to the legacy builder it replaces. BuildKit only requests the resources that the build needs, when they're needed. The legacy builder, in comparison, always takes a copy of the local filesystem.\n\nExamples of resources that BuildKit can request from Buildx include:\n\n*   Local filesystem build contexts\n*   Build secrets\n*   SSH sockets\n*   Registry authentication tokens\n\nFor more information about BuildKit, see [BuildKit](https://docs.docker.com/build/buildkit/).\n\nThe following diagram shows an example build sequence involving Buildx and BuildKit.\n\n![Buildx and BuildKit sequence diagram](https://docs.docker.com/build/images/build-execution.png)",
    "title": "Docker Build architecture | Docker Docs\n",
    "description": "Learn about Docker Build and its components.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/introduction/",
    "markdown": "# Introduction to Bake | Docker Docs\n\nBake is an abstraction for the `docker build` command that lets you more easily manage your build configuration (CLI flags, environment variables, etc.) in a consistent way for everyone on your team.\n\nBake is a command built into the Buildx CLI, so as long as you have Buildx installed, you also have access to bake, via the `docker buildx bake` command.\n\nHere's a simple example of a `docker build` command:\n\nThis command builds the Dockerfile in the current directory and tags the resulting image as `myapp:latest`.\n\nTo express the same build configuration using Bake:\n\nBake provides a structured way to manage your build configuration, and it saves you from having to remember all the CLI flags for `docker build` every time. With this file, building the image is as simple as running:\n\nFor simple builds, the difference between `docker build` and `docker buildx bake` is minimal. However, as your build configuration grows more complex, Bake provides a more structured way to manage that complexity, that would be difficult to manage with CLI flags for the `docker build`. It also provides a way to share build configurations across your team, so that everyone is building images in a consistent way, with the same configuration.\n\nYou can write Bake files in HCL, YAML (Docker Compose files), or JSON. In general, HCL is the most expressive and flexible format, which is why you'll see it used in most of the examples in this documentation, and in projects that use Bake.\n\nThe properties that can be set for a target closely resemble the CLI flags for `docker build`. For instance, consider the following `docker build` command:\n\nThe Bake equivalent would be:\n\nTo learn more about using Bake, see the following topics:\n\n*   Learn how to define and use [targets](https://docs.docker.com/build/bake/targets/) in Bake\n*   To see all the properties that can be set for a target, refer to the [Bake file reference](https://docs.docker.com/build/bake/reference/).",
    "title": "Introduction to Bake | Docker Docs\n",
    "description": "Get started with using Bake to build your project",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/variables/",
    "markdown": "# Build variables | Docker Docs\n\nIn Docker Build, build arguments (`ARG`) and environment variables (`ENV`) both serve as a means to pass information into the build process. You can use them to parameterize the build, allowing for more flexible and configurable builds.\n\n> **Warning**\n> \n> Build arguments and environment variables are inappropriate for passing secrets to your build, because they're exposed in the final image. Instead, use secret mounts or SSH mounts, which expose secrets to your builds securely.\n> \n> See [Build secrets](https://docs.docker.com/build/building/secrets/) for more information.\n\nBuild arguments and environment variables are similar. They're both declared in the Dockerfile and can be set using flags for the `docker build` command. Both can be used to parametrize the build. But they each serve a distinct purpose.\n\n### [Build arguments](#build-arguments)\n\nBuild arguments are variables for the Dockerfile itself. Use them to parametrize values of Dockerfile instructions. For example, you might use a build argument to specify the version of a dependency to install.\n\nBuild arguments have no effect on the build unless it's used in an instruction. They're not accessible or present in containers instantiated from the image unless explicitly passed through from the Dockerfile into the image filesystem or configuration. They may persist in the image metadata, as provenance attestations and in the image history, which is why they're not suitable for holding secrets.\n\nThey make Dockerfiles more flexible, and easier to maintain.\n\nFor an example on how you can use build arguments, see [`ARG` usage example](#arg-usage-example).\n\n### [Environment variables](#environment-variables)\n\nEnvironment variables are passed through to the build execution environment, and persist in containers instantiated from the image.\n\nEnvironment variables are primarily used to:\n\n*   Configure the execution environment for builds\n*   Set default environment variables for containers\n\nEnvironment variables, if set, can directly influence the execution of your build, and the behavior or configuration of the application.\n\nYou can't override or set an environment variable at build-time. Values for environment variables must be declared in the Dockerfile. You can combine environment variables and build arguments to allow environment variables to be configured at build-time.\n\nFor an example on how to use environment variables for configuring builds, see [`ENV` usage example](#env-usage-example).\n\nBuild arguments are commonly used to specify versions of components, such as image variants or package versions, used in a build.\n\nSpecifying versions as build arguments lets build with different versions without having to manually update the Dockerfile. It also makes it easier to maintain the Dockerfile, since it lets you declare versions at the top of the file.\n\nBuild arguments can also be a way to reuse a value in multiple places. For example, if you use multiple flavors of `alpine` in your build, you can ensure you're using the same version of `alpine` everywhere:\n\n*   `golang:1.22-alpine${ALPINE_VERSION}`\n*   `python:3.12-alpine${ALPINE_VERSION}`\n*   `nginx:1-alpine${ALPINE_VERSION}`\n\nThe following example defines the version of `node` and `alpine` using build arguments.\n\nIn this case, the build arguments have default values. Specifying their values when you invoke a build is optional. To override the defaults, you would use the `--build-arg` CLI flag:\n\nFor more information on how to use build arguments, refer to:\n\n*   [`ARG` Dockerfile reference](https://docs.docker.com/reference/dockerfile/#arg)\n*   [`docker build --build-arg` reference](https://docs.docker.com/reference/cli/docker/image/build/#build-arg)\n\nDeclaring an environment variable with `ENV` makes the variable available to all subsequent instructions in the build stage. The following example shows an example setting `NODE_ENV` to `production` before installing JavaScript dependencies with `npm`. Setting the variable makes `npm` omits packages needed only for local development.\n\nEnvironment variables aren't configurable at build-time by default. If you want to change the value of an `ENV` at build-time, you can combine environment variables and build arguments:\n\nWith this Dockerfile, you can use `--build-arg` to override the default value of `ENV`:\n\nNote that, because the environment variables you set persist in containers, using them can lead to unintended side-effects for the application's runtime.\n\nFor more information on how to use environment variables in builds, refer to:\n\n*   [`ENV` Dockerfile reference](https://docs.docker.com/reference/dockerfile/#env)\n\nBuild arguments declared in the global scope of a Dockerfile aren't automatically inherited into the build stages. They're only accessible in the global scope.\n\nThe `echo` command in this example evaluates to `hello !` because the value of the `NAME` build argument is out of scope. To inherit global build arguments into a stage, you must consume them:\n\nOnce a build argument is declared or consumed in a stage, it's automatically inherited by child stages.\n\nThe following diagram further exemplifies how build argument and environment variable inheritance works for multi-stage builds.\n\n![](https://docs.docker.com/build/images/build-variables.svg)\n\nThis section describes pre-defined build arguments available to all builds by default.\n\n### [Multi-platform build arguments](#multi-platform-build-arguments)\n\nMulti-platform build arguments describe the build and target platforms for the build.\n\nThe build platform is the operating system, architecture, and platform variant of the host system where the builder (the BuildKit daemon) is running.\n\n*   `BUILDPLATFORM`\n*   `BUILDOS`\n*   `BUILDARCH`\n*   `BUILDVARIANT`\n\nThe target platform arguments hold the same values for the target platforms for the build, specified using the `--platform` flag for the `docker build` command.\n\n*   `TARGETPLATFORM`\n*   `TARGETOS`\n*   `TARGETARCH`\n*   `TARGETVARIANT`\n\nThese arguments are useful for doing cross-compilation in multi-platform builds. They're available in the global scope of the Dockerfile, but they aren't automatically inherited by build stages. To use them inside stage, you must declare them:\n\nFor more information about multi-platform build arguments, refer to [Multi-platform arguments](https://docs.docker.com/reference/dockerfile/#automatic-platform-args-in-the-global-scope)\n\n### [Proxy arguments](#proxy-arguments)\n\nProxy build arguments let you specify proxies to use for your build. You don't need to declare or reference these arguments in the Dockerfile. Specifying a proxy with `--build-arg` is enough to make your build use the proxy.\n\nProxy arguments are automatically excluded from the build cache and the output of `docker history` by default. If you do reference the arguments in your Dockerfile, the proxy configuration ends up in the build cache.\n\nThe builder respects the following proxy build arguments. The variables are case insensitive.\n\n*   `HTTP_PROXY`\n*   `HTTPS_PROXY`\n*   `FTP_PROXY`\n*   `NO_PROXY`\n*   `ALL_PROXY`\n\nTo configure a proxy for your build:\n\nFor more information about proxy build arguments, refer to [Proxy arguments](https://docs.docker.com/reference/dockerfile/#predefined-args).\n\nThe following environment variables enable, disable, or change the behavior of Buildx and BuildKit. Note that these variables aren't used to configure the build container; they aren't available inside the build and they have no relation to the `ENV` instruction. They're used to configure the Buildx client, or the BuildKit daemon.\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| [BUILDKIT\\_COLORS](#buildkit_colors) | String | Configure text color for the terminal output. |\n| [BUILDKIT\\_HOST](#buildkit_host) | String | Specify host to use for remote builders. |\n| [BUILDKIT\\_PROGRESS](#buildkit_progress) | String | Configure type of progress output. |\n| [BUILDKIT\\_TTY\\_LOG\\_LINES](#buildkit_tty_log_lines) | String | Number of log lines (for active steps in tty mode). |\n| [BUILDX\\_BAKE\\_GIT\\_AUTH\\_HEADER](#buildx_bake_git_auth_header) | String | HTTP authentication scheme for remote Bake files. |\n| [BUILDX\\_BAKE\\_GIT\\_AUTH\\_TOKEN](#buildx_bake_git_auth_token) | String | HTTP authentication token for remote Bake files. |\n| [BUILDX\\_BAKE\\_GIT\\_SSH](#buildx_bake_git_ssh) | String | SSH authentication for remote Bake files. |\n| [BUILDX\\_BUILDER](#buildx_builder) | String | Specify the builder instance to use. |\n| [BUILDX\\_CONFIG](#buildx_config) | String | Specify location for configuration, state, and logs. |\n| [BUILDX\\_EXPERIMENTAL](#buildx_experimental) | Boolean | Turn on experimental features. |\n| [BUILDX\\_GIT\\_CHECK\\_DIRTY](#buildx_git_check_dirty) | Boolean | Enable dirty Git checkout detection. |\n| [BUILDX\\_GIT\\_INFO](#buildx_git_info) | Boolean | Remove Git information in provenance attestations. |\n| [BUILDX\\_GIT\\_LABELS](#buildx_git_labels) | String \\| Boolean | Add Git provenance labels to images. |\n| [BUILDX\\_NO\\_DEFAULT\\_ATTESTATIONS](#buildx_no_default_attestations) | Boolean | Turn off default provenance attestations. |\n| [BUILDX\\_NO\\_DEFAULT\\_LOAD](#buildx_no_default_load) | Boolean | Turn off loading images to image store by default. |\n| [EXPERIMENTAL\\_BUILDKIT\\_SOURCE\\_POLICY](#experimental_buildkit_source_policy) | String | Specify a BuildKit source policy file. |\n\nBuildKit also supports a few additional configuration parameters. Refer to [BuildKit built-in build args](https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args).\n\nYou can express Boolean values for environment variables in different ways. For example, `true`, `1`, and `T` all evaluate to true. Evaluation is done using the `strconv.ParseBool` function in the Go standard library. See the [reference documentation](https://pkg.go.dev/strconv#ParseBool) for details.\n\n### [BUILDKIT\\_COLORS](#buildkit_colors)\n\nChanges the colors of the terminal output. Set `BUILDKIT_COLORS` to a CSV string in the following format:\n\nColor values can be any valid RGB hex code, or one of the [BuildKit predefined colors](https://github.com/moby/buildkit/blob/master/util/progress/progressui/colors.go).\n\nSetting `NO_COLOR` to anything turns off colorized output, as recommended by [no-color.org](https://no-color.org/).\n\n### [BUILDKIT\\_HOST](#buildkit_host)\n\nYou use the `BUILDKIT_HOST` to specify the address of a BuildKit daemon to use as a remote builder. This is the same as specifying the address as a positional argument to `docker buildx create`.\n\nUsage:\n\nIf you specify both the `BUILDKIT_HOST` environment variable and a positional argument, the argument takes priority.\n\n### [BUILDKIT\\_PROGRESS](#buildkit_progress)\n\nSets the type of the BuildKit progress output. Valid values are:\n\n*   `auto` (default)\n*   `plain`\n*   `tty`\n*   `rawjson`\n\nUsage:\n\n### [BUILDKIT\\_TTY\\_LOG\\_LINES](#buildkit_tty_log_lines)\n\nYou can change how many log lines are visible for active steps in tty mode by setting `BUILDKIT_TTY_LOG_LINES` to a number (default to `6`).\n\n### [EXPERIMENTAL\\_BUILDKIT\\_SOURCE\\_POLICY](#experimental_buildkit_source_policy)\n\nLets you specify a [BuildKit source policy](https://github.com/moby/buildkit/blob/master/docs/build-repro.md#reproducing-the-pinned-dependencies) file for creating reproducible builds with pinned dependencies.\n\nExample:\n\nIntroduced in Buildx version 0.14.0\n\nSets the HTTP authentication scheme when using a remote Bake definition in a private Git repository. This is equivalent to the [`GIT_AUTH_HEADER` secret](https://docs.docker.com/build/building/secrets/#http-authentication-scheme), but facilitates the pre-flight authentication in Bake when loading the remote Bake file. Supported values are `bearer` (default) and `basic`.\n\nUsage:\n\n### [BUILDX\\_BAKE\\_GIT\\_AUTH\\_TOKEN](#buildx_bake_git_auth_token)\n\nIntroduced in Buildx version 0.14.0\n\nSets the HTTP authentication token when using a remote Bake definition in a private Git repository. This is equivalent to the [`GIT_AUTH_TOKEN` secret](https://docs.docker.com/build/building/secrets/#git-authentication-for-remote-contexts), but facilitates the pre-flight authentication in Bake when loading the remote Bake file.\n\nUsage:\n\n### [BUILDX\\_BAKE\\_GIT\\_SSH](#buildx_bake_git_ssh)\n\nIntroduced in Buildx version 0.14.0\n\nLets you specify a list of SSH agent socket filepaths to forward to Bake for authenticating to a Git server when using a remote Bake definition in a private repository. This is similar to SSH mounts for builds, but facilitates the pre-flight authentication in Bake when resolving the build definition.\n\nSetting this environment is typically not necessary, because Bake will use the `SSH_AUTH_SOCK` agent socket by default. You only need to specify this variable if you want to use a socket with a different filepath. This variable can take multiple paths using a comma-separated string.\n\nUsage:\n\n### [BUILDX\\_BUILDER](#buildx_builder)\n\nOverrides the configured builder instance. Same as the `docker buildx --builder` CLI flag.\n\nUsage:\n\n### [BUILDX\\_CONFIG](#buildx_config)\n\nYou can use `BUILDX_CONFIG` to specify the directory to use for build configuration, state, and logs. The lookup order for this directory is as follows:\n\n*   `$BUILDX_CONFIG`\n*   `$DOCKER_CONFIG/buildx`\n*   `~/.docker/buildx` (default)\n\nUsage:\n\n### [BUILDX\\_EXPERIMENTAL](#buildx_experimental)\n\nEnables experimental build features.\n\nUsage:\n\n### [BUILDX\\_GIT\\_CHECK\\_DIRTY](#buildx_git_check_dirty)\n\nIntroduced in Buildx version [0.10.4](https://docs.docker.com/build/release-notes/#0104)\n\nWhen set to true, checks for dirty state in source control information for [provenance attestations](https://docs.docker.com/build/attestations/slsa-provenance/).\n\nUsage:\n\n### [BUILDX\\_GIT\\_INFO](#buildx_git_info)\n\nIntroduced in Buildx version [0.10.0](https://docs.docker.com/build/release-notes/#0100)\n\nWhen set to false, removes source control information from [provenance attestations](https://docs.docker.com/build/attestations/slsa-provenance/).\n\nUsage:\n\n### [BUILDX\\_GIT\\_LABELS](#buildx_git_labels)\n\nIntroduced in Buildx version [0.10.0](https://docs.docker.com/build/release-notes/#0100)\n\nAdds provenance labels, based on Git information, to images that you build. The labels are:\n\n*   `com.docker.image.source.entrypoint`: Location of the Dockerfile relative to the project root\n*   `org.opencontainers.image.revision`: Git commit revision\n*   `org.opencontainers.image.source`: SSH or HTTPS address of the repository\n\nExample:\n\nUsage:\n\n*   Set `BUILDX_GIT_LABELS=1` to include the `entrypoint` and `revision` labels.\n*   Set `BUILDX_GIT_LABELS=full` to include all labels.\n\nIf the repository is in a dirty state, the `revision` gets a `-dirty` suffix.\n\n### [BUILDX\\_NO\\_DEFAULT\\_ATTESTATIONS](#buildx_no_default_attestations)\n\nIntroduced in Buildx version [0.10.4](https://docs.docker.com/build/release-notes/#0104)\n\nBy default, BuildKit v0.11 and later adds [provenance attestations](https://docs.docker.com/build/attestations/slsa-provenance/) to images you build. Set `BUILDX_NO_DEFAULT_ATTESTATIONS=1` to disable the default provenance attestations.\n\nUsage:\n\n### [BUILDX\\_NO\\_DEFAULT\\_LOAD](#buildx_no_default_load)\n\nWhen you build an image using the `docker` driver, the image is automatically loaded to the image store when the build finishes. Set `BUILDX_NO_DEFAULT_LOAD` to disable automatic loading of images to the local container store.\n\nUsage:",
    "title": "Build variables | Docker Docs\n",
    "description": "Using build arguments and environment variables to configure builds",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/context/",
    "markdown": "# Build context | Docker Docs\n\nThe `docker build` and `docker buildx build` commands build Docker images from a [Dockerfile](https://docs.docker.com/reference/dockerfile/) and a context.\n\n## [What is a build context?](#what-is-a-build-context)\n\nThe build context is the set of files that your build can access. The positional argument that you pass to the build command specifies the context that you want to use for the build:\n\nYou can pass any of the following inputs as the context for a build:\n\n*   The relative or absolute path to a local directory\n*   A remote URL of a Git repository, tarball, or plain-text file\n*   A plain-text file or tarball piped to the `docker build` command through standard input\n\n### [Filesystem contexts](#filesystem-contexts)\n\nWhen your build context is a local directory, a remote Git repository, or a tar file, then that becomes the set of files that the builder can access during the build. Build instructions such as `COPY` and `ADD` can refer to any of the files and directories in the context.\n\nA filesystem build context is processed recursively:\n\n*   When you specify a local directory or a tarball, all subdirectories are included\n*   When you specify a remote Git repository, the repository and all submodules are included\n\nFor more information about the different types of filesystem contexts that you can use with your builds, see:\n\n*   [Local files](#local-context)\n*   [Git repositories](#git-repositories)\n*   [Remote tarballs](#remote-tarballs)\n\n### [Text file contexts](#text-file-contexts)\n\nWhen your build context is a plain-text file, the builder interprets the file as a Dockerfile. With this approach, the build doesn't use a filesystem context.\n\nFor more information, see [empty build context](#empty-context).\n\n## [Local context](#local-context)\n\nTo use a local build context, you can specify a relative or absolute filepath to the `docker build` command. The following example shows a build command that uses the current directory (`.`) as a build context:\n\nThis makes files and directories in the current working directory available to the builder. The builder loads the files it needs from the build context when needed.\n\nYou can also use local tarballs as build context, by piping the tarball contents to the `docker build` command. See [Tarballs](#local-tarballs).\n\n### [Local directories](#local-directories)\n\nConsider the following directory structure:\n\nDockerfile instructions can reference and include these files in the build if you pass this directory as a context.\n\n### [Local context with Dockerfile from stdin](#local-context-with-dockerfile-from-stdin)\n\nUse the following syntax to build an image using files on your local filesystem, while using a Dockerfile from stdin.\n\nThe syntax uses the -f (or --file) option to specify the Dockerfile to use, and it uses a hyphen (-) as filename to instruct Docker to read the Dockerfile from stdin.\n\nThe following example uses the current directory (.) as the build context, and builds an image using a Dockerfile passed through stdin using a here-document.\n\n### [Local tarballs](#local-tarballs)\n\nWhen you pipe a tarball to the build command, the build uses the contents of the tarball as a filesystem context.\n\nFor example, given the following project directory:\n\nYou can create a tarball of the directory and pipe it to the build for use as a context:\n\nThe build resolves the Dockerfile from the tarball context. You can use the `--file` flag to specify the name and location of the Dockerfile relative to the root of the tarball. The following command builds using `test.Dockerfile` in the tarball:\n\n## [Remote context](#remote-context)\n\nYou can specify the address of a remote Git repository, tarball, or plain-text file as your build context.\n\n*   For Git repositories, the builder automatically clones the repository. See [Git repositories](#git-repositories).\n*   For tarballs, the builder downloads and extracts the contents of the tarball. See [Tarballs](#remote-tarballs).\n\nIf the remote tarball is a text file, the builder receives no [filesystem context](#filesystem-contexts), and instead assumes that the remote file is a Dockerfile. See [Empty build context](#empty-context).\n\n### [Git repositories](#git-repositories)\n\nWhen you pass a URL pointing to the location of a Git repository as an argument to `docker build`, the builder uses the repository as the build context.\n\nThe builder performs a shallow clone of the repository, downloading only the HEAD commit, not the entire history.\n\nThe builder recursively clones the repository and any submodules it contains.\n\nBy default, the builder clones the latest commit on the default branch of the repository that you specify.\n\n#### [URL fragments](#url-fragments)\n\nYou can append URL fragments to the Git repository address to make the builder clone a specific branch, tag, and subdirectory of a repository.\n\nThe format of the URL fragment is `#ref:dir`, where:\n\n*   `ref` is the name of the branch, tag, or commit hash\n*   `dir` is a subdirectory inside the repository\n\nFor example, the following command uses the `container` branch, and the `docker` subdirectory in that branch, as the build context:\n\nThe following table represents all the valid suffixes with their build contexts:\n\n| Build Syntax Suffix | Commit Used | Build Context Used |\n| --- | --- | --- |\n| `myrepo.git` | `refs/heads/<default branch>` | `/` |\n| `myrepo.git#mytag` | `refs/tags/mytag` | `/` |\n| `myrepo.git#mybranch` | `refs/heads/mybranch` | `/` |\n| `myrepo.git#pull/42/head` | `refs/pull/42/head` | `/` |\n| `myrepo.git#:myfolder` | `refs/heads/<default branch>` | `/myfolder` |\n| `myrepo.git#master:myfolder` | `refs/heads/master` | `/myfolder` |\n| `myrepo.git#mytag:myfolder` | `refs/tags/mytag` | `/myfolder` |\n| `myrepo.git#mybranch:myfolder` | `refs/heads/mybranch` | `/myfolder` |\n\nWhen you use a commit hash as the `ref` in the URL fragment, use the full, 40-character string SHA-1 hash of the commit. A short hash, for example a hash truncated to 7 characters, is not supported.\n\n#### [Keep `.git` directory](#keep-git-directory)\n\nBy default, BuildKit doesn't keep the `.git` directory when using Git contexts. You can configure BuildKit to keep the directory by setting the [`BUILDKIT_CONTEXT_KEEP_GIT_DIR` build argument](https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args). This can be useful to if you want to retrieve Git information during your build:\n\n#### [Private repositories](#private-repositories)\n\nWhen you specify a Git context that's also a private repository, the builder needs you to provide the necessary authentication credentials. You can use either SSH or token-based authentication.\n\nBuildx automatically detects and uses SSH credentials if the Git context you specify is an SSH or Git address. By default, this uses `$SSH_AUTH_SOCK`. You can configure the SSH credentials to use with the [`--ssh` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#ssh).\n\nIf you want to use token-based authentication instead, you can pass the token using the [`--secret` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#secret).\n\n> **Note**\n> \n> Don't use `--build-arg` for secrets.\n\n### [Remote context with Dockerfile from stdin](#remote-context-with-dockerfile-from-stdin)\n\nUse the following syntax to build an image using files on your local filesystem, while using a Dockerfile from stdin.\n\nThe syntax uses the -f (or --file) option to specify the Dockerfile to use, and it uses a hyphen (-) as filename to instruct Docker to read the Dockerfile from stdin.\n\nThis can be useful in situations where you want to build an image from a repository that doesn't contain a Dockerfile. Or if you want to build with a custom Dockerfile, without maintaining your own fork of the repository.\n\nThe following example builds an image using a Dockerfile from stdin, and adds the `hello.c` file from the [hello-world](https://github.com/docker-library/hello-world) repository on GitHub.\n\n### [Remote tarballs](#remote-tarballs)\n\nIf you pass the URL to a remote tarball, the URL itself is sent to the builder.\n\nThe download operation will be performed on the host where the BuildKit daemon is running. Note that if you're using a remote Docker context or a remote builder, that's not necessarily the same machine as where you issue the build command. BuildKit fetches the `context.tar.gz` and uses it as the build context. Tarball contexts must be tar archives conforming to the standard `tar` Unix format and can be compressed with any one of the `xz`, `bzip2`, `gzip` or `identity` (no compression) formats.\n\n## [Empty context](#empty-context)\n\nWhen you use a text file as the build context, the builder interprets the file as a Dockerfile. Using a text file as context means that the build has no filesystem context.\n\nYou can build with an empty build context when your Dockerfile doesn't depend on any local files.\n\n### [How to build without a context](#how-to-build-without-a-context)\n\nYou can pass the text file using a standard input stream, or by pointing at the URL of a remote text file.\n\nWhen you build without a filesystem context, Dockerfile instructions such as `COPY` can't refer to local files:\n\nYou can use a `.dockerignore` file to exclude files or directories from the build context.\n\nThis helps avoid sending unwanted files and directories to the builder, improving build speed, especially when using a remote builder.\n\n### [Filename and location](#filename-and-location)\n\nWhen you run a build command, the build client looks for a file named `.dockerignore` in the root directory of the context. If this file exists, the files and directories that match patterns in the files are removed from the build context before it's sent to the builder.\n\nIf you use multiple Dockerfiles, you can use different ignore-files for each Dockerfile. You do so using a special naming convention for the ignore-files. Place your ignore-file in the same directory as the Dockerfile, and prefix the ignore-file with the name of the Dockerfile, as shown in the following example.\n\nA Dockerfile-specific ignore-file takes precedence over the `.dockerignore` file at the root of the build context if both exist.\n\n### [Syntax](#syntax)\n\nThe `.dockerignore` file is a newline-separated list of patterns similar to the file globs of Unix shells. Leading and trailing slashes in ignore patterns are disregarded. The following patterns all exclude a file or directory named `bar` in the subdirectory `foo` under the root of the build context:\n\n*   `/foo/bar/`\n*   `/foo/bar`\n*   `foo/bar/`\n*   `foo/bar`\n\nIf a line in `.dockerignore` file starts with `#` in column 1, then this line is considered as a comment and is ignored before interpreted by the CLI.\n\nIf you're interested in learning the precise details of the `.dockerignore` pattern matching logic, check out the [moby/patternmatcher repository](https://github.com/moby/patternmatcher/tree/main/ignorefile) on GitHub, which contains the source code.\n\n#### [Matching](#matching)\n\nThe following code snippet shows an example `.dockerignore` file.\n\nThis file causes the following build behavior:\n\n| Rule | Behavior |\n| --- | --- |\n| `# comment` | Ignored. |\n| `*/temp*` | Exclude files and directories whose names start with `temp` in any immediate subdirectory of the root. For example, the plain file `/somedir/temporary.txt` is excluded, as is the directory `/somedir/temp`. |\n| `*/*/temp*` | Exclude files and directories starting with `temp` from any subdirectory that is two levels below the root. For example, `/somedir/subdir/temporary.txt` is excluded. |\n| `temp?` | Exclude files and directories in the root directory whose names are a one-character extension of `temp`. For example, `/tempa` and `/tempb` are excluded. |\n\nMatching is done using Go's [`filepath.Match` function](https://golang.org/pkg/path/filepath#Match) rules. A preprocessing step uses Go's [`filepath.Clean` function](https://golang.org/pkg/path/filepath/#Clean) to trim whitespace and remove `.` and `..`. Lines that are blank after preprocessing are ignored.\n\n> **Note**\n> \n> For historical reasons, the pattern `.` is ignored.\n\nBeyond Go's `filepath.Match` rules, Docker also supports a special wildcard string `**` that matches any number of directories (including zero). For example, `**/*.go` excludes all files that end with `.go` found anywhere in the build context.\n\nYou can use the `.dockerignore` file to exclude the `Dockerfile` and `.dockerignore` files. These files are still sent to the builder as they're needed for running the build. But you can't copy the files into the image using `ADD`, `COPY`, or bind mounts.\n\n#### [Negating matches](#negating-matches)\n\nYou can prepend lines with a `!` (exclamation mark) to make exceptions to exclusions. The following is an example `.dockerignore` file that uses this mechanism:\n\nAll markdown files right under the context directory _except_ `README.md` are excluded from the context. Note that markdown files under subdirectories are still included.\n\nThe placement of `!` exception rules influences the behavior: the last line of the `.dockerignore` that matches a particular file determines whether it's included or excluded. Consider the following example:\n\nNo markdown files are included in the context except README files other than `README-secret.md`.\n\nNow consider this example:\n\nAll of the README files are included. The middle line has no effect because `!README*.md` matches `README-secret.md` and comes last.",
    "title": "Build context | Docker Docs\n",
    "description": "Learn how to use the build context to access files from your Dockerfile",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/release-notes/prior-releases/",
    "markdown": "# Docker Engine release notes | Docker Docs\n\n**Important**: On Linux distributions where `devicemapper` was the default storage driver, the `overlay2`, or `overlay` is now used by default (if the kernel supports it). To use devicemapper, you can manually configure the storage driver to use through the `--storage-driver` daemon option, or by setting \"storage-driver\" in the `daemon.json` configuration file.\n\n**Important**: In Docker 1.13, the managed plugin api changed, as compared to the experimental version introduced in Docker 1.12. You must **uninstall** plugins which you installed with Docker 1.12 _before_ upgrading to Docker 1.13. You can uninstall plugins using the `docker plugin rm` command.\n\nIf you have already upgraded to Docker 1.13 without uninstalling previously-installed plugins, you may see this message when the Docker daemon starts:\n\n```\nError starting daemon: json: cannot unmarshal string into Go value of type types.PluginEnv\n```\n\nTo manually remove all plugins and resolve this problem, take the following steps:\n\n1.  Remove plugins.json from: `/var/lib/docker/plugins/`.\n2.  Restart Docker. Verify that the Docker daemon starts with no errors.\n3.  Reinstall your plugins.\n\n### [Contrib](#contrib)\n\n*   Do not require a custom build of tini [#28454](https://github.com/docker/docker/pull/28454)\n*   Upgrade to Go 1.7.5 [#30489](https://github.com/docker/docker/pull/30489)\n\n### [Remote API (v1.26) & Client](#remote-api-v126--client)\n\n*   Support secrets in docker stack deploy with compose file [#30144](https://github.com/docker/docker/pull/30144)\n\n### [Runtime](#runtime)\n\n*   Fix size issue in `docker system df` [#30378](https://github.com/docker/docker/pull/30378)\n*   Fix error on `docker inspect` when Swarm certificates were expired. [#29246](https://github.com/docker/docker/pull/29246)\n*   Fix deadlock on v1 plugin with activate error [#30408](https://github.com/docker/docker/pull/30408)\n*   Fix SELinux regression [#30649](https://github.com/docker/docker/pull/30649)\n\n### [Plugins](#plugins)\n\n*   Support global scoped network plugins (v2) in swarm mode [#30332](https://github.com/docker/docker/pull/30332)\n\n*   Add `docker plugin upgrade` [#29414](https://github.com/docker/docker/pull/29414)\n\n### [Windows](#windows)\n\n*   Fix small regression with old plugins in Windows [#30150](https://github.com/docker/docker/pull/30150)\n*   Fix warning on Windows [#30730](https://github.com/docker/docker/pull/30730)\n\n**Important**: On Linux distributions where `devicemapper` was the default storage driver, the `overlay2`, or `overlay` is now used by default (if the kernel supports it). To use devicemapper, you can manually configure the storage driver to use through the `--storage-driver` daemon option, or by setting \"storage-driver\" in the `daemon.json` configuration file.\n\n**Important**: In Docker 1.13, the managed plugin api changed, as compared to the experimental version introduced in Docker 1.12. You must **uninstall** plugins which you installed with Docker 1.12 _before_ upgrading to Docker 1.13. You can uninstall plugins using the `docker plugin rm` command.\n\nIf you have already upgraded to Docker 1.13 without uninstalling previously-installed plugins, you may see this message when the Docker daemon starts:\n\n```\nError starting daemon: json: cannot unmarshal string into Go value of type types.PluginEnv\n```\n\nTo manually remove all plugins and resolve this problem, take the following steps:\n\n1.  Remove plugins.json from: `/var/lib/docker/plugins/`.\n2.  Restart Docker. Verify that the Docker daemon starts with no errors.\n3.  Reinstall your plugins.\n\n### [Builder](#builder)\n\n*   Add capability to specify images used as a cache source on build. These images do not need to have local parent chain and can be pulled from other registries [#26839](https://github.com/docker/docker/pull/26839)\n*   (experimental) Add option to squash image layers to the FROM image after successful builds [#22641](https://github.com/docker/docker/pull/22641)\n\n*   Fix dockerfile parser with empty line after escape [#24725](https://github.com/docker/docker/pull/24725)\n\n*   Add step number on `docker build` [#24978](https://github.com/docker/docker/pull/24978)\n\n*   Add support for compressing build context during image build [#25837](https://github.com/docker/docker/pull/25837)\n*   add `--network` to `docker build` [#27702](https://github.com/docker/docker/pull/27702)\n\n*   Fix inconsistent behavior between `--label` flag on `docker build` and `docker run` [#26027](https://github.com/docker/docker/issues/26027)\n*   Fix image layer inconsistencies when using the overlay storage driver [#27209](https://github.com/docker/docker/pull/27209)\n\n*   Unused build-args are now allowed. A warning is presented instead of an error and failed build [#27412](https://github.com/docker/docker/pull/27412)\n\n*   Fix builder cache issue on Windows [#27805](https://github.com/docker/docker/pull/27805)\n\n*   Allow `USER` in builder on Windows [#28415](https://github.com/docker/docker/pull/28415)\n*   Handle env case-insensitive on Windows [#28725](https://github.com/docker/docker/pull/28725)\n\n### [Contrib](#contrib-1)\n\n*   Add support for building docker debs for Ubuntu 16.04 Xenial on PPC64LE [#23438](https://github.com/docker/docker/pull/23438)\n*   Add support for building docker debs for Ubuntu 16.04 Xenial on s390x [#26104](https://github.com/docker/docker/pull/26104)\n*   Add support for building docker debs for Ubuntu 16.10 Yakkety Yak on PPC64LE [#28046](https://github.com/docker/docker/pull/28046)\n\n*   Add RPM builder for VMWare Photon OS [#24116](https://github.com/docker/docker/pull/24116)\n\n*   Add shell completions to tgz [#27735](https://github.com/docker/docker/pull/27735)\n\n*   Update the install script to allow using the mirror in China [#27005](https://github.com/docker/docker/pull/27005)\n\n*   Add DEB builder for Ubuntu 16.10 Yakkety Yak [#27993](https://github.com/docker/docker/pull/27993)\n*   Add RPM builder for Fedora 25 [#28222](https://github.com/docker/docker/pull/28222)\n*   Add `make deb` support for aarch64 [#27625](https://github.com/docker/docker/pull/27625)\n\n### [Distribution](#distribution)\n\n*   Update notary dependency to 0.4.2 (full changelogs [here](https://github.com/docker/notary/releases/tag/v0.4.2)) [#27074](https://github.com/docker/docker/pull/27074)\n    *   Support for compilation on windows [docker/notary#970](https://github.com/docker/notary/pull/970)\n    *   Improved error messages for client authentication errors [docker/notary#972](https://github.com/docker/notary/pull/972)\n    *   Support for finding keys that are anywhere in the `~/.docker/trust/private` directory, not just under `~/.docker/trust/private/root_keys` or `~/.docker/trust/private/tuf_keys` [docker/notary#981](https://github.com/docker/notary/pull/981)\n    *   Previously, on any error updating, the client would fall back on the cache. Now we only do so if there is a network error or if the server is unavailable or missing the TUF data. Invalid TUF data will cause the update to fail - for example if there was an invalid root rotation. [docker/notary#982](https://github.com/docker/notary/pull/982)\n    *   Improve root validation and yubikey debug logging [docker/notary#858](https://github.com/docker/notary/pull/858) [docker/notary#891](https://github.com/docker/notary/pull/891)\n    *   Warn if certificates for root or delegations are near expiry [docker/notary#802](https://github.com/docker/notary/pull/802)\n    *   Warn if role metadata is near expiry [docker/notary#786](https://github.com/docker/notary/pull/786)\n    *   Fix passphrase retrieval attempt counting and terminal detection [docker/notary#906](https://github.com/docker/notary/pull/906)\n\n*   Avoid unnecessary blob uploads when different users push same layers to authenticated registry [#26564](https://github.com/docker/docker/pull/26564)\n\n*   Allow external storage for registry credentials [#26354](https://github.com/docker/docker/pull/26354)\n\n### [Logging](#logging)\n\n*   Standardize the default logging tag value in all logging drivers [#22911](https://github.com/docker/docker/pull/22911)\n\n*   Improve performance and memory use when logging of long log lines [#22982](https://github.com/docker/docker/pull/22982)\n\n*   Enable syslog driver for windows [#25736](https://github.com/docker/docker/pull/25736)\n*   Add Logentries Driver [#27471](https://github.com/docker/docker/pull/27471)\n*   Update of AWS log driver to support tags [#27707](https://github.com/docker/docker/pull/27707)\n*   Unix socket support for fluentd [#26088](https://github.com/docker/docker/pull/26088)\n\n*   Enable fluentd logging driver on Windows [#28189](https://github.com/docker/docker/pull/28189)\n\n*   Sanitize docker labels when used as journald field names [#23725](https://github.com/docker/docker/pull/23725)\n*   Fix an issue where `docker logs --tail` returned less lines than expected [#28203](https://github.com/docker/docker/pull/28203)\n*   Splunk Logging Driver: performance and reliability improvements [#26207](https://github.com/docker/docker/pull/26207)\n*   Splunk Logging Driver: configurable formats and skip for verifying connection [#25786](https://github.com/docker/docker/pull/25786)\n\n### [Networking](#networking)\n\n*   Add `--attachable` network support to enable `docker run` to work in swarm-mode overlay network [#25962](https://github.com/docker/docker/pull/25962)\n*   Add support for host port PublishMode in services using the `--publish` option in `docker service create` [#27917](https://github.com/docker/docker/pull/27917) and [#28943](https://github.com/docker/docker/pull/28943)\n*   Add support for Windows server 2016 overlay network driver (requires upcoming ws2016 update) [#28182](https://github.com/docker/docker/pull/28182)\n\n*   Change the default `FORWARD` policy to `DROP` [#28257](https://github.com/docker/docker/pull/28257)\n\n*   Add support for specifying static IP addresses for predefined network on windows [#22208](https://github.com/docker/docker/pull/22208)\n\n*   Fix `--publish` flag on `docker run` not working with IPv6 addresses [#27860](https://github.com/docker/docker/pull/27860)\n*   Fix inspect network show gateway with mask [#25564](https://github.com/docker/docker/pull/25564)\n*   Fix an issue where multiple addresses in a bridge may cause `--fixed-cidr` to not have the correct addresses [#26659](https://github.com/docker/docker/pull/26659)\n\n*   Add creation timestamp to `docker network inspect` [#26130](https://github.com/docker/docker/pull/26130)\n\n*   Show peer nodes in `docker network inspect` for swarm overlay networks [#28078](https://github.com/docker/docker/pull/28078)\n*   Enable ping for service VIP address [#28019](https://github.com/docker/docker/pull/28019)\n\n### [Plugins](#plugins-1)\n\n*   Move plugins out of experimental [#28226](https://github.com/docker/docker/pull/28226)\n*   Add `--force` on `docker plugin remove` [#25096](https://github.com/docker/docker/pull/25096)\n\n*   Add support for dynamically reloading authorization plugins [#22770](https://github.com/docker/docker/pull/22770)\n\n*   Add description in `docker plugin ls` [#25556](https://github.com/docker/docker/pull/25556)\n*   Add `-f`/`--format` to `docker plugin inspect` [#25990](https://github.com/docker/docker/pull/25990)\n*   Add `docker plugin create` command [#28164](https://github.com/docker/docker/pull/28164)\n\n*   Send request's TLS peer certificates to authorization plugins [#27383](https://github.com/docker/docker/pull/27383)\n*   Support for global-scoped network and ipam plugins in swarm-mode [#27287](https://github.com/docker/docker/pull/27287)\n*   Split `docker plugin install` into two API call `/privileges` and `/pull` [#28963](https://github.com/docker/docker/pull/28963)\n\n### [Remote API (v1.25) & Client](#remote-api-v125--client)\n\n*   Support `docker stack deploy` from a Compose file [#27998](https://github.com/docker/docker/pull/27998)\n*   (experimental) Implement checkpoint and restore [#22049](https://github.com/docker/docker/pull/22049)\n*   Add `--format` flag to `docker info` [#23808](https://github.com/docker/docker/pull/23808)\n\n*   Remove `--name` from `docker volume create` [#23830](https://github.com/docker/docker/pull/23830)\n\n*   Add `docker stack ls` [#23886](https://github.com/docker/docker/pull/23886)\n*   Add a new `is-task` ps filter [#24411](https://github.com/docker/docker/pull/24411)\n*   Add `--env-file` flag to `docker service create` [#24844](https://github.com/docker/docker/pull/24844)\n*   Add `--format` on `docker stats` [#24987](https://github.com/docker/docker/pull/24987)\n*   Make `docker node ps` default to `self` in swarm node [#25214](https://github.com/docker/docker/pull/25214)\n*   Add `--group` in `docker service create` [#25317](https://github.com/docker/docker/pull/25317)\n*   Add `--no-trunc` to service/node/stack ps output [#25337](https://github.com/docker/docker/pull/25337)\n*   Add Logs to `ContainerAttachOptions` so go clients can request to retrieve container logs as part of the attach process [#26718](https://github.com/docker/docker/pull/26718)\n*   Allow client to talk to an older server [#27745](https://github.com/docker/docker/pull/27745)\n\n*   Inform user client-side that a container removal is in progress [#26074](https://github.com/docker/docker/pull/26074)\n\n*   Add `Isolation` to the /info endpoint [#26255](https://github.com/docker/docker/pull/26255)\n*   Add `userns` to the /info endpoint [#27840](https://github.com/docker/docker/pull/27840)\n\n*   Do not allow more than one mode be requested at once in the services endpoint [#26643](https://github.com/docker/docker/pull/26643)\n\n*   Add capability to /containers/create API to specify mounts in a more granular and safer way [#22373](https://github.com/docker/docker/pull/22373)\n*   Add `--format` flag to `network ls` and `volume ls` [#23475](https://github.com/docker/docker/pull/23475)\n\n*   Allow the top-level `docker inspect` command to inspect any kind of resource [#23614](https://github.com/docker/docker/pull/23614)\n\n*   Add --cpus flag to control cpu resources for `docker run` and `docker create`, and add `NanoCPUs` to `HostConfig` [#27958](https://github.com/docker/docker/pull/27958)\n\n*   Allow unsetting the `--entrypoint` in `docker run` or `docker create` [#23718](https://github.com/docker/docker/pull/23718)\n\n*   Restructure CLI commands by adding `docker image` and `docker container` commands for more consistency [#26025](https://github.com/docker/docker/pull/26025)\n\n*   Remove `COMMAND` column from `service ls` output [#28029](https://github.com/docker/docker/pull/28029)\n\n*   Add `--format` to `docker events` [#26268](https://github.com/docker/docker/pull/26268)\n\n*   Allow specifying multiple nodes on `docker node ps` [#26299](https://github.com/docker/docker/pull/26299)\n*   Restrict fractional digits to 2 decimals in `docker images` output [#26303](https://github.com/docker/docker/pull/26303)\n\n*   Add `--dns-option` to `docker run` [#28186](https://github.com/docker/docker/pull/28186)\n*   Add Image ID to container commit event [#28128](https://github.com/docker/docker/pull/28128)\n*   Add external binaries version to docker info [#27955](https://github.com/docker/docker/pull/27955)\n*   Add information for `Manager Addresses` in the output of `docker info` [#28042](https://github.com/docker/docker/pull/28042)\n*   Add a new reference filter for `docker images` [#27872](https://github.com/docker/docker/pull/27872)\n\n### [Runtime](#runtime-1)\n\n*   Add `--experimental` daemon flag to enable experimental features, instead of shipping them in a separate build [#27223](https://github.com/docker/docker/pull/27223)\n*   Add a `--shutdown-timeout` daemon flag to specify the default timeout (in seconds) to stop containers gracefully before daemon exit [#23036](https://github.com/docker/docker/pull/23036)\n*   Add `--stop-timeout` to specify the timeout value (in seconds) for individual containers to stop [#22566](https://github.com/docker/docker/pull/22566)\n*   Add a new daemon flag `--userland-proxy-path` to allow configuring the userland proxy instead of using the hardcoded `docker-proxy` from `$PATH` [#26882](https://github.com/docker/docker/pull/26882)\n*   Add boolean flag `--init` on `dockerd` and on `docker run` to use [tini](https://github.com/krallin/tini) a zombie-reaping init process as PID 1 [#26061](https://github.com/docker/docker/pull/26061) [#28037](https://github.com/docker/docker/pull/28037)\n*   Add a new daemon flag `--init-path` to allow configuring the path to the `docker-init` binary [#26941](https://github.com/docker/docker/pull/26941)\n*   Add support for live reloading insecure registry in configuration [#22337](https://github.com/docker/docker/pull/22337)\n*   Add support for storage-opt size on Windows daemons [#23391](https://github.com/docker/docker/pull/23391)\n\n*   Improve reliability of `docker run --rm` by moving it from the client to the daemon [#20848](https://github.com/docker/docker/pull/20848)\n\n*   Add support for `--cpu-rt-period` and `--cpu-rt-runtime` flags, allowing containers to run real-time threads when `CONFIG_RT_GROUP_SCHED` is enabled in the kernel [#23430](https://github.com/docker/docker/pull/23430)\n\n*   Allow parallel stop, pause, unpause [#24761](https://github.com/docker/docker/pull/24761) / [#26778](https://github.com/docker/docker/pull/26778)\n*   Implement XFS quota for overlay2 [#24771](https://github.com/docker/docker/pull/24771)\n\n*   Fix partial/full filter issue in `service tasks --filter` [#24850](https://github.com/docker/docker/pull/24850)\n*   Allow engine to run inside a user namespace [#25672](https://github.com/docker/docker/pull/25672)\n*   Fix a race condition between device deferred removal and resume device, when using the devicemapper graphdriver [#23497](https://github.com/docker/docker/pull/23497)\n*   Add `docker stats` support in Windows [#25737](https://github.com/docker/docker/pull/25737)\n*   Allow using `--pid=host` and `--net=host` when `--userns=host` [#25771](https://github.com/docker/docker/pull/25771)\n\n*   (experimental) Add metrics (Prometheus) output for basic `container`, `image`, and `daemon` operations [#25820](https://github.com/docker/docker/pull/25820)\n\n*   Fix issue in `docker stats` with `NetworkDisabled=true` [#25905](https://github.com/docker/docker/pull/25905)\n\n*   Add `docker top` support in Windows [#25891](https://github.com/docker/docker/pull/25891)\n*   Record pid of exec'd process [#27470](https://github.com/docker/docker/pull/27470)\n*   Add support for looking up user/groups via `getent` [#27599](https://github.com/docker/docker/pull/27599)\n*   Add new `docker system` command with `df` and `prune` subcommands for system resource management, as well as `docker {container,image,volume,network} prune` subcommands [#26108](https://github.com/docker/docker/pull/26108) [#27525](https://github.com/docker/docker/pull/27525) / [#27525](https://github.com/docker/docker/pull/27525)\n\n*   Fix an issue where containers could not be stopped or killed by setting xfs max\\_retries to 0 upon ENOSPC with devicemapper [#26212](https://github.com/docker/docker/pull/26212)\n*   Fix `docker cp` failing to copy to a container's volume dir on CentOS with devicemapper [#28047](https://github.com/docker/docker/pull/28047)\n\n*   Promote overlay(2) graphdriver [#27932](https://github.com/docker/docker/pull/27932)\n\n*   Add `--seccomp-profile` daemon flag to specify a path to a seccomp profile that overrides the default [#26276](https://github.com/docker/docker/pull/26276)\n\n*   Fix ulimits in `docker inspect` when `--default-ulimit` is set on daemon [#26405](https://github.com/docker/docker/pull/26405)\n*   Add workaround for overlay issues during build in older kernels [#28138](https://github.com/docker/docker/pull/28138)\n\n*   Add `TERM` environment variable on `docker exec -t` [#26461](https://github.com/docker/docker/pull/26461)\n\n*   Honor a container’s `--stop-signal` setting upon `docker kill` [#26464](https://github.com/docker/docker/pull/26464)\n\n### [Swarm Mode](#swarm-mode)\n\n*   Add secret management [#27794](https://github.com/docker/docker/pull/27794)\n*   Add support for templating service options (hostname, mounts, and environment variables) [#28025](https://github.com/docker/docker/pull/28025)\n\n*   Display the endpoint mode in the output of `docker service inspect --pretty` [#26906](https://github.com/docker/docker/pull/26906)\n*   Make `docker service ps` output more bearable by shortening service IDs in task names [#28088](https://github.com/docker/docker/pull/28088)\n*   Make `docker node ps` default to the current node [#25214](https://github.com/docker/docker/pull/25214)\n\n*   Add `--dns`, -`-dns-opt`, and `--dns-search` to service create. [#27567](https://github.com/docker/docker/pull/27567)\n*   Add `--force` to `docker service update` [#27596](https://github.com/docker/docker/pull/27596)\n*   Add `--health-*` and `--no-healthcheck` flags to `docker service create` and `docker service update` [#27369](https://github.com/docker/docker/pull/27369)\n*   Add `-q` to `docker service ps` [#27654](https://github.com/docker/docker/pull/27654)\n\n*   Display number of global services in `docker service ls` [#27710](https://github.com/docker/docker/pull/27710)\n\n*   Remove `--name` flag from `docker service update`. This flag is only functional on `docker service create`, so was removed from the `update` command [#26988](https://github.com/docker/docker/pull/26988)\n*   Fix worker nodes failing to recover because of transient networking issues [#26646](https://github.com/docker/docker/issues/26646)\n\n*   Add support for health aware load balancing and DNS records [#27279](https://github.com/docker/docker/pull/27279)\n\n*   Add `--hostname` to `docker service create` [#27857](https://github.com/docker/docker/pull/27857)\n*   Add `--host` to `docker service create`, and `--host-add`, `--host-rm` to `docker service update` [#28031](https://github.com/docker/docker/pull/28031)\n*   Add `--tty` flag to `docker service create`/`update` [#28076](https://github.com/docker/docker/pull/28076)\n\n*   Autodetect, store, and expose node IP address as seen by the manager [#27910](https://github.com/docker/docker/pull/27910)\n*   Encryption at rest of manager keys and raft data [#27967](https://github.com/docker/docker/pull/27967)\n\n*   Add `--update-max-failure-ratio`, `--update-monitor` and `--rollback` flags to `docker service update` [#26421](https://github.com/docker/docker/pull/26421)\n\n*   Fix an issue with address autodiscovery on `docker swarm init` running inside a container [#26457](https://github.com/docker/docker/pull/26457)\n\n*   (experimental) Add `docker service logs` command to view logs for a service [#28089](https://github.com/docker/docker/pull/28089)\n*   Pin images by digest for `docker service create` and `update` [#28173](https://github.com/docker/docker/pull/28173)\n\n*   Add short (`-f`) flag for `docker node rm --force` and `docker swarm leave --force` [#28196](https://github.com/docker/docker/pull/28196)\n\n*   Add options to customize Raft snapshots (`--max-snapshots`, `--snapshot-interval`) [#27997](https://github.com/docker/docker/pull/27997)\n\n*   Don't repull image if pinned by digest [#28265](https://github.com/docker/docker/pull/28265)\n\n*   Swarm-mode support for Windows [#27838](https://github.com/docker/docker/pull/27838)\n*   Allow hostname to be updated on service [#28771](https://github.com/docker/docker/pull/28771)\n*   Support v2 plugins [#29433](https://github.com/docker/docker/pull/29433)\n*   Add content trust for services [#29469](https://github.com/docker/docker/pull/29469)\n\n### [Volume](#volume)\n\n*   Add support for labels on volumes [#21270](https://github.com/docker/docker/pull/21270)\n*   Add support for filtering volumes by label [#25628](https://github.com/docker/docker/pull/25628)\n\n*   Add a `--force` flag in `docker volume rm` to forcefully purge the data of the volume that has already been deleted [#23436](https://github.com/docker/docker/pull/23436)\n*   Enhance `docker volume inspect` to show all options used when creating the volume [#26671](https://github.com/docker/docker/pull/26671)\n*   Add support for local NFS volumes to resolve hostnames [#27329](https://github.com/docker/docker/pull/27329)\n\n### [Security](#security)\n\n*   Fix selinux labeling of volumes shared in a container [#23024](https://github.com/docker/docker/pull/23024)\n*   Prohibit `/sys/firmware/**` from being accessed with apparmor [#26618](https://github.com/docker/docker/pull/26618)\n\n### [Deprecation](#deprecation)\n\n*   Marked the `docker daemon` command as deprecated. The daemon is moved to a separate binary (`dockerd`), and should be used instead [#26834](https://github.com/docker/docker/pull/26834)\n*   Deprecate unversioned API endpoints [#28208](https://github.com/docker/docker/pull/28208)\n*   Remove Ubuntu 15.10 (Wily Werewolf) as supported platform. Ubuntu 15.10 is EOL, and no longer receives updates [#27042](https://github.com/docker/docker/pull/27042)\n*   Remove Fedora 22 as supported platform. Fedora 22 is EOL, and no longer receives updates [#27432](https://github.com/docker/docker/pull/27432)\n*   Remove Fedora 23 as supported platform. Fedora 23 is EOL, and no longer receives updates [#29455](https://github.com/docker/docker/pull/29455)\n*   Deprecate the `repo:shortid` syntax on `docker pull` [#27207](https://github.com/docker/docker/pull/27207)\n*   Deprecate backing filesystem without `d_type` for overlay and overlay2 storage drivers [#27433](https://github.com/docker/docker/pull/27433)\n*   Deprecate `MAINTAINER` in Dockerfile [#25466](https://github.com/docker/docker/pull/25466)\n*   Deprecate `filter` param for endpoint `/images/json` [#27872](https://github.com/docker/docker/pull/27872)\n*   Deprecate setting duplicate engine labels [#24533](https://github.com/docker/docker/pull/24533)\n*   Deprecate \"top-level\" network information in `NetworkSettings` [#28437](https://github.com/docker/docker/pull/28437)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n**NOTE**: Docker 1.12.5 will correctly validate that either an IPv6 subnet is provided or that the IPAM driver can provide one when you specify the `--ipv6` option.\n\nIf you are currently using the `--ipv6` option _without_ specifying the `--fixed-cidr-v6` option, the Docker daemon will refuse to start with the following message:\n\nTo resolve this error, either remove the `--ipv6` flag (to preserve the same behavior as in Docker 1.12.3 and earlier), or provide an IPv6 subnet as the value of the `--fixed-cidr-v6` flag.\n\nIn a similar way, if you specify the `--ipv6` flag when creating a network with the default IPAM driver, without providing an IPv6 `--subnet`, network creation will fail with the following message:\n\nTo resolve this, either remove the `--ipv6` flag (to preserve the same behavior as in Docker 1.12.3 and earlier), or provide an IPv6 subnet as the value of the `--subnet` flag.\n\nThe network creation will instead succeed if you use an external IPAM driver which supports automatic allocation of IPv6 subnets.\n\n### [Runtime](#runtime-2)\n\n*   Fix runC privilege escalation (CVE-2016-9962)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n**NOTE**: Docker 1.12.5 will correctly validate that either an IPv6 subnet is provided or that the IPAM driver can provide one when you specify the `--ipv6` option.\n\nIf you are currently using the `--ipv6` option _without_ specifying the `--fixed-cidr-v6` option, the Docker daemon will refuse to start with the following message:\n\nTo resolve this error, either remove the `--ipv6` flag (to preserve the same behavior as in Docker 1.12.3 and earlier), or provide an IPv6 subnet as the value of the `--fixed-cidr-v6` flag.\n\nIn a similar way, if you specify the `--ipv6` flag when creating a network with the default IPAM driver, without providing an IPv6 `--subnet`, network creation will fail with the following message:\n\nTo resolve this, either remove the `--ipv6` flag (to preserve the same behavior as in Docker 1.12.3 and earlier), or provide an IPv6 subnet as the value of the `--subnet` flag.\n\nThe network network creation will instead succeed if you use an external IPAM driver which supports automatic allocation of IPv6 subnets.\n\n### [Runtime](#runtime-3)\n\n*   Fix race on sending stdin close event [#29424](https://github.com/docker/docker/pull/29424)\n\n### [Networking](#networking-1)\n\n*   Fix panic in docker network ls when a network was created with `--ipv6` and no ipv6 `--subnet` in older docker versions [#29416](https://github.com/docker/docker/pull/29416)\n\n### [Contrib](#contrib-2)\n\n*   Fix compilation on Darwin [#29370](https://github.com/docker/docker/pull/29370)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n### [Runtime](#runtime-4)\n\n*   Fix issue where volume metadata was not removed [#29083](https://github.com/docker/docker/pull/29083)\n*   Asynchronously close streams to prevent holding container lock [#29050](https://github.com/docker/docker/pull/29050)\n*   Fix selinux labels for newly created container volumes [#29050](https://github.com/docker/docker/pull/29050)\n*   Remove hostname validation [#28990](https://github.com/docker/docker/pull/28990)\n*   Fix deadlocks caused by IO races [#29095](https://github.com/docker/docker/pull/29095) [#29141](https://github.com/docker/docker/pull/29141)\n*   Return an empty stats if the container is restarting [#29150](https://github.com/docker/docker/pull/29150)\n*   Fix volume store locking [#29151](https://github.com/docker/docker/pull/29151)\n*   Ensure consistent status code in API [#29150](https://github.com/docker/docker/pull/29150)\n*   Fix incorrect opaque directory permission in overlay2 [#29093](https://github.com/docker/docker/pull/29093)\n*   Detect plugin content and error out on `docker pull` [#29297](https://github.com/docker/docker/pull/29297)\n\n### [Swarm Mode](#swarm-mode-1)\n\n*   Update Swarmkit [#29047](https://github.com/docker/docker/pull/29047)\n    *   orchestrator/global: Fix deadlock on updates [docker/swarmkit#1760](https://github.com/docker/swarmkit/pull/1760)\n    *   on leader switchover preserve the vxlan id for existing networks [docker/swarmkit#1773](https://github.com/docker/swarmkit/pull/1773)\n\n*   Refuse swarm spec not named \"default\" [#29152](https://github.com/docker/docker/pull/29152)\n\n### [Networking](#networking-2)\n\n*   Update libnetwork [#29004](https://github.com/docker/docker/pull/29004) [#29146](https://github.com/docker/docker/pull/29146)\n    \n    *   Fix panic in embedded DNS [docker/libnetwork#1561](https://github.com/docker/libnetwork/pull/1561)\n    *   Fix unmarhalling panic when passing --link-local-ip on global scope network [docker/libnetwork#1564](https://github.com/docker/libnetwork/pull/1564)\n    *   Fix panic when network plugin returns nil StaticRoutes [docker/libnetwork#1563](https://github.com/docker/libnetwork/pull/1563)\n    *   Fix panic in `osl.(*networkNamespace).DeleteNeighbor` [docker/libnetwork#1555](https://github.com/docker/libnetwork/pull/1555)\n    *   Fix panic in swarm networking concurrent map read/write [docker/libnetwork#1570](https://github.com/docker/libnetwork/pull/1570)\n    \n    *   Allow encrypted networks when running docker inside a container [docker/libnetwork#1502](https://github.com/docker/libnetwork/pull/1502)\n    \n    *   Do not block autoallocation of IPv6 pool [docker/libnetwork#1538](https://github.com/docker/libnetwork/pull/1538)\n    *   Set timeout for netlink calls [docker/libnetwork#1557](https://github.com/docker/libnetwork/pull/1557)\n    *   Increase networking local store timeout to one minute [docker/libkv#140](https://github.com/docker/libkv/pull/140)\n    *   Fix a panic in `libnetwork.(*sandbox).execFunc` [docker/libnetwork#1556](https://github.com/docker/libnetwork/pull/1556)\n    *   Honor icc=false for internal networks [docker/libnetwork#1525](https://github.com/docker/libnetwork/pull/1525)\n\n### [Logging](#logging-1)\n\n*   Update syslog log driver [#29150](https://github.com/docker/docker/pull/29150)\n\n### [Contrib](#contrib-3)\n\n*   Run \"dnf upgrade\" before installing in fedora [#29150](https://github.com/docker/docker/pull/29150)\n*   Add build-date back to RPM packages [#29150](https://github.com/docker/docker/pull/29150)\n*   deb package filename changed to include distro to distinguish between distro code names [#27829](https://github.com/docker/docker/pull/27829)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n### [Runtime](#runtime-5)\n\n*   Fix ambient capability usage in containers (CVE-2016-8867) [#27610](https://github.com/docker/docker/pull/27610)\n*   Prevent a deadlock in libcontainerd for Windows [#27136](https://github.com/docker/docker/pull/27136)\n*   Fix error reporting in CopyFileWithTar [#27075](https://github.com/docker/docker/pull/27075)\n\n*   Reset health status to starting when a container is restarted [#27387](https://github.com/docker/docker/pull/27387)\n*   Properly handle shared mount propagation in storage directory [#27609](https://github.com/docker/docker/pull/27609)\n\n*   Fix docker exec [#27610](https://github.com/docker/docker/pull/27610)\n*   Fix backward compatibility with containerd’s events log [#27693](https://github.com/docker/docker/pull/27693)\n\n### [Swarm Mode](#swarm-mode-2)\n\n*   Fix conversion of restart-policy [#27062](https://github.com/docker/docker/pull/27062)\n\n*   Update Swarmkit [#27554](https://github.com/docker/docker/pull/27554)\n*   Avoid restarting a task that has already been restarted [docker/swarmkit#1305](https://github.com/docker/swarmkit/pull/1305)\n*   Allow duplicate published ports when they use different protocols [docker/swarmkit#1632](https://github.com/docker/swarmkit/pull/1632)\n*   Allow multiple randomly assigned published ports on service [docker/swarmkit#1657](https://github.com/docker/swarmkit/pull/1657)\n\n*   Fix panic when allocations happen at init time [docker/swarmkit#1651](https://github.com/docker/swarmkit/pull/1651)\n\n### [Networking](#networking-3)\n\n*   Update libnetwork [#27559](https://github.com/docker/docker/pull/27559)\n\n*   Fix race in serializing sandbox to string [docker/libnetwork#1495](https://github.com/docker/libnetwork/pull/1495)\n*   Fix race during deletion [docker/libnetwork#1503](https://github.com/docker/libnetwork/pull/1503)\n\n*   Reset endpoint port info on connectivity revoke in bridge driver [docker/libnetwork#1504](https://github.com/docker/libnetwork/pull/1504)\n\n*   Fix a deadlock in networking code [docker/libnetwork#1507](https://github.com/docker/libnetwork/pull/1507)\n*   Fix a race in load balancer state [docker/libnetwork#1512](https://github.com/docker/libnetwork/pull/1512)\n\n### [Logging](#logging-2)\n\n*   Update fluent-logger-golang to v1.2.1 [#27474](https://github.com/docker/docker/pull/27474)\n\n### [Contrib](#contrib-4)\n\n*   Update buildtags for armhf ubuntu-trusty [#27327](https://github.com/docker/docker/pull/27327)\n*   Add AppArmor to runc buildtags for armhf [#27421](https://github.com/docker/docker/pull/27421)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n### [Runtime](#runtime-6)\n\n*   Fix a panic due to a race condition filtering `docker ps` [#26049](https://github.com/docker/docker/pull/26049)\n\n*   Implement retry logic to prevent \"Unable to remove filesystem\" errors when using the aufs storage driver [#26536](https://github.com/docker/docker/pull/26536)\n*   Prevent devicemapper from removing device symlinks if `dm.use_deferred_removal` is enabled [#24740](https://github.com/docker/docker/pull/24740)\n\n*   Fix an issue where the CLI did not return correct exit codes if a command was run with invalid options [#26777](https://github.com/docker/docker/pull/26777)\n*   Fix a panic due to a bug in stdout / stderr processing in health checks [#26507](https://github.com/docker/docker/pull/26507)\n*   Fix exec's children handling [#26874](https://github.com/docker/docker/pull/26874)\n*   Fix exec form of HEALTHCHECK CMD [#26208](https://github.com/docker/docker/pull/26208)\n\n### [Networking](#networking-4)\n\n*   Fix a daemon start panic on armv5 [#24315](https://github.com/docker/docker/issues/24315)\n\n*   Vendor libnetwork [#26879](https://github.com/docker/docker/pull/26879) [#26953](https://github.com/docker/docker/pull/26953)\n*   Avoid returning early on agent join failures [docker/libnetwork#1473](https://github.com/docker/libnetwork/pull/1473)\n\n*   Fix service published port cleanup issues [docker/libetwork#1432](https://github.com/docker/libnetwork/pull/1432) [docker/libnetwork#1433](https://github.com/docker/libnetwork/pull/1433)\n\n*   Recover properly from transient gossip failures [docker/libnetwork#1446](https://github.com/docker/libnetwork/pull/1446)\n*   Disambiguate node names known to gossip cluster to avoid node name collision [docker/libnetwork#1451](https://github.com/docker/libnetwork/pull/1451)\n*   Honor user provided listen address for gossip [docker/libnetwork#1460](https://github.com/docker/libnetwork/pull/1460)\n*   Allow reachability via published port across services on the same host [docker/libnetwork#1398](https://github.com/docker/libnetwork/pull/1398)\n*   Change the ingress sandbox name from random id to just `ingress_sbox` [docker/libnetwork#1449](https://github.com/docker/libnetwork/pull/1449)\n\n*   Disable service discovery in ingress network [docker/libnetwork#1489](https://github.com/docker/libnetwork/pull/1489)\n\n### [Swarm Mode](#swarm-mode-3)\n\n*   Fix remote detection of a node's address when it joins the cluster [#26211](https://github.com/docker/docker/pull/26211)\n*   Vendor SwarmKit [#26765](https://github.com/docker/docker/pull/26765)\n*   Bounce session after failed status update [docker/swarmkit#1539](https://github.com/docker/swarmkit/pull/1539)\n\n*   Fix possible raft deadlocks [docker/swarmkit#1537](https://github.com/docker/swarmkit/pull/1537)\n*   Fix panic and endpoint leak when a service is updated with no endpoints [docker/swarmkit#1481](https://github.com/docker/swarmkit/pull/1481)\n\n*   Produce an error if the same port is published twice on `service create` or `service update` [docker/swarmkit#1495](https://github.com/docker/swarmkit/pull/1495)\n\n*   Fix an issue where changes to a service were not detected, resulting in the service not being updated [docker/swarmkit#1497](https://github.com/docker/swarmkit/pull/1497)\n*   Do not allow service creation on ingress network [docker/swarmkit#1600](https://github.com/docker/swarmkit/pull/1600)\n\n### [Contrib](#contrib-5)\n\n*   Update the debian sysv-init script to use `dockerd` instead of `docker daemon` [#25869](https://github.com/docker/docker/pull/25869)\n*   Improve stability when running the docker client on MacOS Sierra [#26875](https://github.com/docker/docker/pull/26875)\n\n*   Fix installation on debian stretch [#27184](https://github.com/docker/docker/pull/27184)\n\n### [Windows](#windows-1)\n\n*   Fix an issue where arrow-navigation did not work when running the docker client in ConEmu [#25578](https://github.com/docker/docker/pull/25578)\n\n**IMPORTANT**: Docker 1.12 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n### [Client](#client)\n\n*   Add `Joined at` information in `node inspect --pretty` [#25512](https://github.com/docker/docker/pull/25512)\n\n*   Fix a crash on `service inspect` [#25454](https://github.com/docker/docker/pull/25454)\n*   Fix issue preventing `service update --env-add` to work as intended [#25427](https://github.com/docker/docker/pull/25427)\n*   Fix issue preventing `service update --publish-add` to work as intended [#25428](https://github.com/docker/docker/pull/25428)\n*   Remove `service update --network-add` and `service update --network-rm` flags because this feature is not yet implemented in 1.12, but was inadvertently added to the client in 1.12.0 [#25646](https://github.com/docker/docker/pull/25646)\n\n### [Contrib](#contrib-6)\n\n*   Official ARM installation for Debian Jessie, Ubuntu Trusty, and Raspbian Jessie [#24815](https://github.com/docker/docker/pull/24815) [#25591](https://github.com/docker/docker/pull/25637)\n\n*   Add selinux policy per distro/version, fixing issue preventing successful installation on Fedora 24, and Oracle Linux [#25334](https://github.com/docker/docker/pull/25334) [#25593](https://github.com/docker/docker/pull/25593)\n\n### [Networking](#networking-5)\n\n*   Fix issue that prevented containers to be accessed by hostname with Docker overlay driver in Swarm Mode [#25603](https://github.com/docker/docker/pull/25603) [#25648](https://github.com/docker/docker/pull/25648)\n*   Fix random network issues on service with published port [#25603](https://github.com/docker/docker/pull/25603)\n*   Fix unreliable inter-service communication after scaling down and up [#25603](https://github.com/docker/docker/pull/25603)\n*   Fix issue where removing all tasks on a node and adding them back breaks connectivity with other services [#25603](https://github.com/docker/docker/pull/25603)\n*   Fix issue where a task that fails to start results in a race, causing a `network xxx not found` error that masks the actual error [#25550](https://github.com/docker/docker/pull/25550)\n*   Relax validation of SRV records for external services that use SRV records not formatted according to RFC 2782 [#25739](https://github.com/docker/docker/pull/25739)\n\n### [Plugins (experimental)](#plugins-experimental)\n\n*   Make daemon events listen for plugin lifecycle events [#24760](https://github.com/docker/docker/pull/24760)\n*   Check for plugin state before enabling plugin [#25033](https://github.com/docker/docker/pull/25033)\n\n*   Remove plugin root from filesystem on `plugin rm` [#25187](https://github.com/docker/docker/pull/25187)\n*   Prevent deadlock when more than one plugin is installed [#25384](https://github.com/docker/docker/pull/25384)\n\n### [Runtime](#runtime-7)\n\n*   Mask join tokens in daemon logs [#25346](https://github.com/docker/docker/pull/25346)\n\n*   Fix `docker ps --filter` causing the results to no longer be sorted by creation time [#25387](https://github.com/docker/docker/pull/25387)\n*   Fix various crashes [#25053](https://github.com/docker/docker/pull/25053)\n\n### [Security](#security-1)\n\n*   Add `/proc/timer_list` to the masked paths list to prevent information leak from the host [#25630](https://github.com/docker/docker/pull/25630)\n*   Allow systemd to run with only `--cap-add SYS_ADMIN` rather than having to also add `--cap-add DAC_READ_SEARCH` or disabling seccomp filtering [#25567](https://github.com/docker/docker/pull/25567)\n\n### [Swarm](#swarm)\n\n*   Fix an issue where the swarm can get stuck electing a new leader after quorum is lost [#25055](https://github.com/docker/docker/issues/25055)\n*   Fix unwanted rescheduling of containers after a leader failover [#25017](https://github.com/docker/docker/issues/25017)\n*   Change swarm root CA key to P256 curve [swarmkit#1376](https://github.com/docker/swarmkit/pull/1376)\n*   Allow forced removal of a node from a swarm [#25159](https://github.com/docker/docker/pull/25159)\n*   Fix connection leak when a node leaves a swarm [swarmkit/#1277](https://github.com/docker/swarmkit/pull/1277)\n*   Backdate swarm certificates by one hour to tolerate more clock skew [swarmkit/#1243](https://github.com/docker/swarmkit/pull/1243)\n*   Avoid high CPU use with many unschedulable tasks [swarmkit/#1287](https://github.com/docker/swarmkit/pull/1287)\n*   Fix issue with global tasks not starting up [swarmkit/#1295](https://github.com/docker/swarmkit/pull/1295)\n*   Garbage collect raft logs [swarmkit/#1327](https://github.com/docker/swarmkit/pull/1327)\n\n### [Volume](#volume-1)\n\n*   Persist local volume options after a daemon restart [#25316](https://github.com/docker/docker/pull/25316)\n*   Fix an issue where the mount ID was not returned on volume unmount [#25333](https://github.com/docker/docker/pull/25333)\n*   Fix an issue where a volume mount could inadvertently create a bind mount [#25309](https://github.com/docker/docker/pull/25309)\n*   `docker service create --mount type=bind,...` now correctly validates if the source path exists, instead of creating it [#25494](https://github.com/docker/docker/pull/25494)\n\n**IMPORTANT**: Docker 1.12.0 ships with an updated systemd unit file for rpm based installs (which includes RHEL, Fedora, CentOS, and Oracle Linux 7). When upgrading from an older version of docker, the upgrade process may not automatically install the updated version of the unit file, or fail to start the docker service if;\n\n*   the systemd unit file (`/usr/lib/systemd/system/docker.service`) contains local changes, or\n*   a systemd drop-in file is present, and contains `-H fd://` in the `ExecStart` directive\n\nStarting the docker service will produce an error:\n\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nor\n\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nTo resolve this:\n\n*   Backup the current version of the unit file, and replace the file with the [version that ships with docker 1.12](https://raw.githubusercontent.com/docker/docker/v1.12.0/contrib/init/systemd/docker.service.rpm)\n*   Remove the `Requires=docker.socket` directive from the `/usr/lib/systemd/system/docker.service` file if present\n*   Remove `-H fd://` from the `ExecStart` directive (both in the main unit file, and in any drop-in files present).\n\nAfter making those changes, run `sudo systemctl daemon-reload`, and `sudo systemctl restart docker` to reload changes and (re)start the docker daemon.\n\n**IMPORTANT**: With Docker 1.12, a Linux docker installation now has two additional binaries; `dockerd`, and `docker-proxy`. If you have scripts for installing docker, make sure to update them accordingly.\n\n### [Builder](#builder-1)\n\n*   New `HEALTHCHECK` Dockerfile instruction to support user-defined healthchecks [#23218](https://github.com/docker/docker/pull/23218)\n*   New `SHELL` Dockerfile instruction to specify the default shell when using the shell form for commands in a Dockerfile [#22489](https://github.com/docker/docker/pull/22489)\n*   Add `#escape=` Dockerfile directive to support platform-specific parsing of file paths in Dockerfile [#22268](https://github.com/docker/docker/pull/22268)\n*   Add support for comments in `.dockerignore` [#23111](https://github.com/docker/docker/pull/23111)\n\n*   Support for UTF-8 in Dockerfiles [#23372](https://github.com/docker/docker/pull/23372)\n*   Skip UTF-8 BOM bytes from `Dockerfile` and `.dockerignore` if exist [#23234](https://github.com/docker/docker/pull/23234)\n*   Windows: support for `ARG` to match Linux [#22508](https://github.com/docker/docker/pull/22508)\n\n*   Fix error message when building using a daemon with the bridge network disabled [#22932](https://github.com/docker/docker/pull/22932)\n\n### [Contrib](#contrib-7)\n\n*   Enable seccomp for Centos 7 and Oracle Linux 7 [#22344](https://github.com/docker/docker/pull/22344)\n\n*   Remove MountFlags in systemd unit to allow shared mount propagation [#22806](https://github.com/docker/docker/pull/22806)\n\n### [Distribution](#distribution-1)\n\n*   Add `--max-concurrent-downloads` and `--max-concurrent-uploads` daemon flags useful for situations where network connections don't support multiple downloads/uploads [#22445](https://github.com/docker/docker/pull/22445)\n\n*   Registry operations now honor the `ALL_PROXY` environment variable [#22316](https://github.com/docker/docker/pull/22316)\n*   Provide more information to the user on `docker load` [#23377](https://github.com/docker/docker/pull/23377)\n*   Always save registry digest metadata about images pushed and pulled [#23996](https://github.com/docker/docker/pull/23996)\n\n### [Logging](#logging-3)\n\n*   Syslog logging driver now supports DGRAM sockets [#21613](https://github.com/docker/docker/pull/21613)\n*   Add `--details` option to `docker logs` to also display log tags [#21889](https://github.com/docker/docker/pull/21889)\n*   Enable syslog logger to have access to env and labels [#21724](https://github.com/docker/docker/pull/21724)\n*   An additional syslog-format option `rfc5424micro` to allow microsecond resolution in syslog timestamp [#21844](https://github.com/docker/docker/pull/21844)\n\n*   Inherit the daemon log options when creating containers [#21153](https://github.com/docker/docker/pull/21153)\n*   Remove `docker/` prefix from log messages tag and replace it with `{{.DaemonName}}` so that users have the option of changing the prefix [#22384](https://github.com/docker/docker/pull/22384)\n\n### [Networking](#networking-6)\n\n*   Built-in Virtual-IP based internal and ingress load-balancing using IPVS [#23361](https://github.com/docker/docker/pull/23361)\n*   Routing Mesh using ingress overlay network [#23361](https://github.com/docker/docker/pull/23361)\n*   Secured multi-host overlay networking using encrypted control-plane and Data-plane [#23361](https://github.com/docker/docker/pull/23361)\n*   MacVlan driver is out of experimental [#23524](https://github.com/docker/docker/pull/23524)\n*   Add `driver` filter to `network ls` [#22319](https://github.com/docker/docker/pull/22319)\n*   Adding `network` filter to `docker ps --filter` [#23300](https://github.com/docker/docker/pull/23300)\n*   Add `--link-local-ip` flag to `create`, `run` and `network connect` to specify a container's link-local address [#23415](https://github.com/docker/docker/pull/23415)\n*   Add network label filter support [#21495](https://github.com/docker/docker/pull/21495)\n\n*   Removed dependency on external KV-Store for Overlay networking in Swarm-Mode [#23361](https://github.com/docker/docker/pull/23361)\n*   Add container's short-id as default network alias [#21901](https://github.com/docker/docker/pull/21901)\n*   `run` options `--dns` and `--net=host` are no longer mutually exclusive [#22408](https://github.com/docker/docker/pull/22408)\n\n*   Fix DNS issue when renaming containers with generated names [#22716](https://github.com/docker/docker/pull/22716)\n*   Allow both `network inspect -f {{.Id}}` and `network inspect -f {{.ID}}` to address inconsistency with inspect output [#23226](https://github.com/docker/docker/pull/23226)\n\n### [Plugins (experimental)](#plugins-experimental-1)\n\n*   New `plugin` command to manager plugins with `install`, `enable`, `disable`, `rm`, `inspect`, `set` subcommands [#23446](https://github.com/docker/docker/pull/23446)\n\n### [Remote API (v1.24) & Client](#remote-api-v124--client)\n\n*   Split the binary into two: `docker` (client) and `dockerd` (daemon) [#20639](https://github.com/docker/docker/pull/20639)\n*   Add `before` and `since` filters to `docker images --filter` [#22908](https://github.com/docker/docker/pull/22908)\n*   Add `--limit` option to `docker search` [#23107](https://github.com/docker/docker/pull/23107)\n*   Add `--filter` option to `docker search` [#22369](https://github.com/docker/docker/pull/22369)\n*   Add security options to `docker info` output [#21172](https://github.com/docker/docker/pull/21172) [#23520](https://github.com/docker/docker/pull/23520)\n*   Add insecure registries to `docker info` output [#20410](https://github.com/docker/docker/pull/20410)\n*   Extend Docker authorization with TLS user information [#21556](https://github.com/docker/docker/pull/21556)\n*   devicemapper: expose Minimum Thin Pool Free Space through `docker info` [#21945](https://github.com/docker/docker/pull/21945)\n\n*   API now returns a JSON object when an error occurs making it more consistent [#22880](https://github.com/docker/docker/pull/22880)\n\n*   Prevent `docker run -i --restart` from hanging on exit [#22777](https://github.com/docker/docker/pull/22777)\n*   Fix API/CLI discrepancy on hostname validation [#21641](https://github.com/docker/docker/pull/21641)\n*   Fix discrepancy in the format of sizes in `stats` from HumanSize to BytesSize [#21773](https://github.com/docker/docker/pull/21773)\n*   authz: when request is denied return forbbiden exit code (403) [#22448](https://github.com/docker/docker/pull/22448)\n*   Windows: fix tty-related displaying issues [#23878](https://github.com/docker/docker/pull/23878)\n\n### [Runtime](#runtime-8)\n\n*   Split the userland proxy to a separate binary (`docker-proxy`) [#23312](https://github.com/docker/docker/pull/23312)\n*   Add `--live-restore` daemon flag to keep containers running when daemon shuts down, and regain control on startup [#23213](https://github.com/docker/docker/pull/23213)\n*   Ability to add OCI-compatible runtimes (via `--add-runtime` daemon flag) and select one with `--runtime` on `create` and `run` [#22983](https://github.com/docker/docker/pull/22983)\n*   New `overlay2` graphdriver for Linux 4.0+ with multiple lower directory support [#22126](https://github.com/docker/docker/pull/22126)\n*   New load/save image events [#22137](https://github.com/docker/docker/pull/22137)\n*   Add support for reloading daemon configuration through systemd [#22446](https://github.com/docker/docker/pull/22446)\n*   Add disk quota support for btrfs [#19651](https://github.com/docker/docker/pull/19651)\n*   Add disk quota support for zfs [#21946](https://github.com/docker/docker/pull/21946)\n*   Add support for `docker run --pid=container:<id>` [#22481](https://github.com/docker/docker/pull/22481)\n*   Align default seccomp profile with selected capabilities [#22554](https://github.com/docker/docker/pull/22554)\n*   Add a `daemon reload` event when the daemon reloads its configuration [#22590](https://github.com/docker/docker/pull/22590)\n*   Add `trace` capability in the pprof profiler to show execution traces in binary form [#22715](https://github.com/docker/docker/pull/22715)\n*   Add a `detach` event [#22898](https://github.com/docker/docker/pull/22898)\n*   Add support for setting sysctls with `--sysctl` [#19265](https://github.com/docker/docker/pull/19265)\n*   Add `--storage-opt` flag to `create` and `run` allowing to set `size` on devicemapper [#19367](https://github.com/docker/docker/pull/19367)\n*   Add `--oom-score-adjust` daemon flag with a default value of `-500` making the daemon less likely to be killed before containers [#24516](https://github.com/docker/docker/pull/24516)\n\n*   Undeprecate the `-c` short alias of `--cpu-shares` on `run`, `build`, `create`, `update` [#22621](https://github.com/docker/docker/pull/22621)\n*   Prevent from using aufs and overlay graphdrivers on an eCryptfs mount [#23121](https://github.com/docker/docker/pull/23121)\n\n*   Fix issues with tmpfs mount ordering [#22329](https://github.com/docker/docker/pull/22329)\n*   Created containers are no longer listed on `docker ps -a -f exited=0` [#21947](https://github.com/docker/docker/pull/21947)\n*   Fix an issue where containers are stuck in a \"Removal In Progress\" state [#22423](https://github.com/docker/docker/pull/22423)\n*   Fix bug that was returning an HTTP 500 instead of a 400 when not specifying a command on run/create [#22762](https://github.com/docker/docker/pull/22762)\n*   Fix bug with `--detach-keys` whereby input matching a prefix of the detach key was not preserved [#22943](https://github.com/docker/docker/pull/22943)\n*   SELinux labeling is now disabled when using `--privileged` mode [#22993](https://github.com/docker/docker/pull/22993)\n*   If volume-mounted into a container, `/etc/hosts`, `/etc/resolv.conf`, `/etc/hostname` are no longer SELinux-relabeled [#22993](https://github.com/docker/docker/pull/22993)\n*   Fix inconsistency in `--tmpfs` behavior regarding mount options [#22438](https://github.com/docker/docker/pull/22438)\n*   Fix an issue where daemon hangs at startup [#23148](https://github.com/docker/docker/pull/23148)\n*   Ignore SIGPIPE events to prevent journald restarts to crash docker in some cases [#22460](https://github.com/docker/docker/pull/22460)\n*   Containers are not removed from stats list on error [#20835](https://github.com/docker/docker/pull/20835)\n*   Fix `on-failure` restart policy when daemon restarts [#20853](https://github.com/docker/docker/pull/20853)\n*   Fix an issue with `stats` when a container is using another container's network [#21904](https://github.com/docker/docker/pull/21904)\n\n### [Swarm Mode](#swarm-mode-4)\n\n*   New `swarm` command to manage swarms with `init`, `join`, `join-token`, `leave`, `update` subcommands [#23361](https://github.com/docker/docker/pull/23361) [#24823](https://github.com/docker/docker/pull/24823)\n*   New `service` command to manage swarm-wide services with `create`, `inspect`, `update`, `rm`, `ps` subcommands [#23361](https://github.com/docker/docker/pull/23361) [#25140](https://github.com/docker/docker/pull/25140)\n*   New `node` command to manage nodes with `accept`, `promote`, `demote`, `inspect`, `update`, `ps`, `ls` and `rm` subcommands [#23361](https://github.com/docker/docker/pull/23361) [#25140](https://github.com/docker/docker/pull/25140)\n*   (experimental) New `stack` and `deploy` commands to manage and deploy multi-service applications [#23522](https://github.com/docker/docker/pull/23522) [#25140](https://github.com/docker/docker/pull/25140)\n\n### [Volume](#volume-2)\n\n*   Add support for local and global volume scopes (analogous to network scopes) [#22077](https://github.com/docker/docker/pull/22077)\n*   Allow volume drivers to provide a `Status` field [#21006](https://github.com/docker/docker/pull/21006)\n*   Add name/driver filter support for volume [#21361](https://github.com/docker/docker/pull/21361)\n\n*   Mount/Unmount operations now receives an opaque ID to allow volume drivers to differentiate between two callers [#21015](https://github.com/docker/docker/pull/21015)\n\n*   Fix issue preventing to remove a volume in a corner case [#22103](https://github.com/docker/docker/pull/22103)\n*   Windows: Enable auto-creation of host-path to match Linux [#22094](https://github.com/docker/docker/pull/22094)\n\n### [Deprecation](#deprecation-1)\n\n*   Environment variables `DOCKER_CONTENT_TRUST_OFFLINE_PASSPHRASE` and `DOCKER_CONTENT_TRUST_TAGGING_PASSPHRASE` have been renamed to `DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE` and `DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE` respectively [#22574](https://github.com/docker/docker/pull/22574)\n*   Remove deprecated `syslog-tag`, `gelf-tag`, `fluentd-tag` log option in favor of the more generic `tag` one [#22620](https://github.com/docker/docker/pull/22620)\n*   Remove deprecated feature of passing HostConfig at API container start [#22570](https://github.com/docker/docker/pull/22570)\n*   Remove deprecated `-f`/`--force` flag on docker tag [#23090](https://github.com/docker/docker/pull/23090)\n*   Remove deprecated `/containers/<id|name>/copy` endpoint [#22149](https://github.com/docker/docker/pull/22149)\n*   Remove deprecated `docker ps` flags `--since` and `--before` [#22138](https://github.com/docker/docker/pull/22138)\n*   Deprecate the old 3-args form of `docker import` [#23273](https://github.com/docker/docker/pull/23273)\n\n### [Networking](#networking-7)\n\n*   Fix a stale endpoint issue on overlay networks during ungraceful restart ( [#23015](https://github.com/docker/docker/pull/23015))\n*   Fix an issue where the wrong port could be reported by `docker inspect/ps/port` ( [#22997](https://github.com/docker/docker/pull/22997))\n\n### [Runtime](#runtime-9)\n\n*   Fix a potential panic when running `docker build` ( [#23032](https://github.com/docker/docker/pull/23032))\n*   Fix interpretation of `--user` parameter ( [#22998](https://github.com/docker/docker/pull/22998))\n*   Fix a bug preventing container statistics to be correctly reported ( [#22955](https://github.com/docker/docker/pull/22955))\n*   Fix an issue preventing container to be restarted after daemon restart ( [#22947](https://github.com/docker/docker/pull/22947))\n*   Fix issues when running 32 bit binaries on Ubuntu 16.04 ( [#22922](https://github.com/docker/docker/pull/22922))\n*   Fix a possible deadlock on image deletion and container attach ( [#22918](https://github.com/docker/docker/pull/22918))\n*   Fix an issue where containers fail to start after a daemon restart if they depend on a containerized cluster store ( [#22561](https://github.com/docker/docker/pull/22561))\n*   Fix an issue causing `docker ps` to hang on CentOS when using devicemapper ( [#22168](https://github.com/docker/docker/pull/22168), [#23067](https://github.com/docker/docker/pull/23067))\n*   Fix a bug preventing to `docker exec` into a container when using devicemapper ( [#22168](https://github.com/docker/docker/pull/22168), [#23067](https://github.com/docker/docker/pull/23067))\n\n### [Distribution](#distribution-2)\n\n*   Fix schema2 manifest media type to be of type `application/vnd.docker.container.image.v1+json` ( [#21949](https://github.com/docker/docker/pull/21949))\n\n### [Documentation](#documentation)\n\n*   Add missing API documentation for changes introduced with 1.11.0 ( [#22048](https://github.com/docker/docker/pull/22048))\n\n### [Builder](#builder-2)\n\n*   Append label passed to `docker build` as arguments as an implicit `LABEL` command at the end of the processed `Dockerfile` ( [#22184](https://github.com/docker/docker/pull/22184))\n\n### [Networking](#networking-8)\n\n*   Fix a panic that would occur when forwarding DNS query ( [#22261](https://github.com/docker/docker/pull/22261))\n*   Fix an issue where OS threads could end up within an incorrect network namespace when using user defined networks ( [#22261](https://github.com/docker/docker/pull/22261))\n\n### [Runtime](#runtime-10)\n\n*   Fix a bug preventing labels configuration to be reloaded via the config file ( [#22299](https://github.com/docker/docker/pull/22299))\n*   Fix a regression where container mounting `/var/run` would prevent other containers from being removed ( [#22256](https://github.com/docker/docker/pull/22256))\n*   Fix an issue where it would be impossible to update both `memory-swap` and `memory` value together ( [#22255](https://github.com/docker/docker/pull/22255))\n*   Fix a regression from 1.11.0 where the `/auth` endpoint would not initialize `serveraddress` if it is not provided ( [#22254](https://github.com/docker/docker/pull/22254))\n*   Add missing cleanup of container temporary files when cancelling a schedule restart ( [#22237](https://github.com/docker/docker/pull/22237))\n*   Remove scary error message when no restart policy is specified ( [#21993](https://github.com/docker/docker/pull/21993))\n*   Fix a panic that would occur when the plugins were activated via the json spec ( [#22191](https://github.com/docker/docker/pull/22191))\n*   Fix restart backoff logic to correctly reset delay if container ran for at least 10secs ( [#22125](https://github.com/docker/docker/pull/22125))\n*   Remove error message when a container restart get cancelled ( [#22123](https://github.com/docker/docker/pull/22123))\n*   Fix an issue where `docker` would not correctly clean up after `docker exec` ( [#22121](https://github.com/docker/docker/pull/22121))\n*   Fix a panic that could occur when serving concurrent `docker stats` commands ( [#22120](https://github.com/docker/docker/pull/22120))\\`\n*   Revert deprecation of non-existent host directories auto-creation ( [#22065](https://github.com/docker/docker/pull/22065))\n*   Hide misleading rpc error on daemon shutdown ( [#22058](https://github.com/docker/docker/pull/22058))\n\n**IMPORTANT**: With Docker 1.11, a Linux docker installation is now made of 4 binaries (`docker`, [`docker-containerd`](https://github.com/docker/containerd), [`docker-containerd-shim`](https://github.com/docker/containerd) and [`docker-runc`](https://github.com/opencontainers/runc)). If you have scripts relying on docker being a single static binaries, make sure to update them. Interaction with the daemon stay the same otherwise, the usage of the other binaries should be transparent. A Windows docker installation remains a single binary, `docker.exe`.\n\n### [Builder](#builder-3)\n\n*   Fix a bug where Docker would not use the correct uid/gid when processing the `WORKDIR` command ( [#21033](https://github.com/docker/docker/pull/21033))\n*   Fix a bug where copy operations with userns would not use the proper uid/gid ( [#20782](https://github.com/docker/docker/pull/20782), [#21162](https://github.com/docker/docker/pull/21162))\n\n### [Client](#client-1)\n\n*   Usage of the `:` separator for security option has been deprecated. `=` should be used instead ( [#21232](https://github.com/docker/docker/pull/21232))\n\n*   The client user agent is now passed to the registry on `pull`, `build`, `push`, `login` and `search` operations ( [#21306](https://github.com/docker/docker/pull/21306), [#21373](https://github.com/docker/docker/pull/21373))\n\n*   Allow setting the Domainname and Hostname separately through the API ( [#20200](https://github.com/docker/docker/pull/20200))\n*   Docker info will now warn users if it can not detect the kernel version or the operating system ( [#21128](https://github.com/docker/docker/pull/21128))\n\n*   Fix an issue where `docker stats --no-stream` output could be all 0s ( [#20803](https://github.com/docker/docker/pull/20803))\n*   Fix a bug where some newly started container would not appear in a running `docker stats` command ( [#20792](https://github.com/docker/docker/pull/20792))\n\n*   Post processing is no longer enabled for linux-cgo terminals ( [#20587](https://github.com/docker/docker/pull/20587))\n\n*   Values to `--hostname` are now refused if they do not comply with [RFC1123](https://tools.ietf.org/html/rfc1123) ( [#20566](https://github.com/docker/docker/pull/20566))\n\n*   Docker learned how to use a SOCKS proxy ( [#20366](https://github.com/docker/docker/pull/20366), [#18373](https://github.com/docker/docker/pull/18373))\n*   Docker now supports external credential stores ( [#20107](https://github.com/docker/docker/pull/20107))\n\n*   `docker ps` now supports displaying the list of volumes mounted inside a container ( [#20017](https://github.com/docker/docker/pull/20017))\n*   `docker info` now also reports Docker's root directory location ( [#19986](https://github.com/docker/docker/pull/19986))\n\n*   Docker now prohibits login in with an empty username (spaces are trimmed) ( [#19806](https://github.com/docker/docker/pull/19806))\n\n*   Docker events attributes are now sorted by key ( [#19761](https://github.com/docker/docker/pull/19761))\n*   `docker ps` no longer shows exported port for stopped containers ( [#19483](https://github.com/docker/docker/pull/19483))\n\n*   Docker now cleans after itself if a save/export command fails ( [#17849](https://github.com/docker/docker/pull/17849))\n\n*   Docker load learned how to display a progress bar ( [#17329](https://github.com/docker/docker/pull/17329), [#120078](https://github.com/docker/docker/pull/20078))\n\n### [Distribution](#distribution-3)\n\n*   Fix a panic that occurred when pulling an image with 0 layers ( [#21222](https://github.com/docker/docker/pull/21222))\n*   Fix a panic that could occur on error while pushing to a registry with a misconfigured token service ( [#21212](https://github.com/docker/docker/pull/21212))\n\n*   All first-level delegation roles are now signed when doing a trusted push ( [#21046](https://github.com/docker/docker/pull/21046))\n*   OAuth support for registries was added ( [#20970](https://github.com/docker/docker/pull/20970))\n\n*   `docker login` now handles token using the implementation found in [docker/distribution](https://github.com/docker/distribution) ( [#20832](https://github.com/docker/docker/pull/20832))\n*   `docker login` will no longer prompt for an email ( [#20565](https://github.com/docker/docker/pull/20565))\n*   Docker will now fallback to registry V1 if no basic auth credentials are available ( [#20241](https://github.com/docker/docker/pull/20241))\n*   Docker will now try to resume layer download where it left off after a network error/timeout ( [#19840](https://github.com/docker/docker/pull/19840))\n\n*   Fix generated manifest mediaType when pushing cross-repository ( [#19509](https://github.com/docker/docker/pull/19509))\n*   Fix docker requesting additional push credentials when pulling an image if Content Trust is enabled ( [#20382](https://github.com/docker/docker/pull/20382))\n\n### [Logging](#logging-4)\n\n*   Fix a race in the journald log driver ( [#21311](https://github.com/docker/docker/pull/21311))\n\n*   Docker syslog driver now uses the RFC-5424 format when emitting logs ( [#20121](https://github.com/docker/docker/pull/20121))\n*   Docker GELF log driver now allows to specify the compression algorithm and level via the `gelf-compression-type` and `gelf-compression-level` options ( [#19831](https://github.com/docker/docker/pull/19831))\n*   Docker daemon learned to output uncolorized logs via the `--raw-logs` options ( [#19794](https://github.com/docker/docker/pull/19794))\n\n*   Docker, on Windows platform, now includes an ETW (Event Tracing in Windows) logging driver named `etwlogs` ( [#19689](https://github.com/docker/docker/pull/19689))\n\n*   Journald log driver learned how to handle tags ( [#19564](https://github.com/docker/docker/pull/19564))\n\n*   The fluentd log driver learned the following options: `fluentd-address`, `fluentd-buffer-limit`, `fluentd-retry-wait`, `fluentd-max-retries` and `fluentd-async-connect` ( [#19439](https://github.com/docker/docker/pull/19439))\n*   Docker learned to send log to Google Cloud via the new `gcplogs` logging driver. ( [#18766](https://github.com/docker/docker/pull/18766))\n\n### [Misc](#misc)\n\n*   When saving linked images together with `docker save` a subsequent `docker load` will correctly restore their parent/child relationship ( [#21385](https://github.com/docker/docker/pull/21385))\n*   Support for building the Docker cli for OpenBSD was added ( [#21325](https://github.com/docker/docker/pull/21325))\n*   Labels can now be applied at network, volume and image creation ( [#21270](https://github.com/docker/docker/pull/21270))\n\n*   The `dockremap` is now created as a system user ( [#21266](https://github.com/docker/docker/pull/21266))\n\n*   Fix a few response body leaks ( [#21258](https://github.com/docker/docker/pull/21258))\n*   Docker, when run as a service with systemd, will now properly manage its processes cgroups ( [#20633](https://github.com/docker/docker/pull/20633))\n\n*   `docker info` now reports the value of cgroup KernelMemory or emits a warning if it is not supported ( [#20863](https://github.com/docker/docker/pull/20863))\n*   `docker info` now also reports the cgroup driver in use ( [#20388](https://github.com/docker/docker/pull/20388))\n*   Docker completion is now available on PowerShell ( [#19894](https://github.com/docker/docker/pull/19894))\n*   `dockerinit` is no more ( [#19490](https://github.com/docker/docker/pull/19490), [#19851](https://github.com/docker/docker/pull/19851))\n\n*   Support for building Docker on arm64 was added ( [#19013](https://github.com/docker/docker/pull/19013))\n*   Experimental support for building docker.exe in a native Windows Docker installation ( [#18348](https://github.com/docker/docker/pull/18348))\n\n### [Networking](#networking-9)\n\n*   Fix panic if a node is forcibly removed from the cluster ( [#21671](https://github.com/docker/docker/pull/21671))\n*   Fix \"error creating vxlan interface\" when starting a container in a Swarm cluster ( [#21671](https://github.com/docker/docker/pull/21671))\n\n*   `docker network inspect` will now report all endpoints whether they have an active container or not ( [#21160](https://github.com/docker/docker/pull/21160))\n\n*   Experimental support for the MacVlan and IPVlan network drivers has been added ( [#21122](https://github.com/docker/docker/pull/21122))\n\n*   Output of `docker network ls` is now sorted by network name ( [#20383](https://github.com/docker/docker/pull/20383))\n\n*   Fix a bug where Docker would allow a network to be created with the reserved `default` name ( [#19431](https://github.com/docker/docker/pull/19431))\n\n*   `docker network inspect` returns whether a network is internal or not ( [#19357](https://github.com/docker/docker/pull/19357))\n\n*   Control IPv6 via explicit option when creating a network (`docker network create --ipv6`). This shows up as a new `EnableIPv6` field in `docker network inspect` ( [#17513](https://github.com/docker/docker/pull/17513))\n\n*   Support for AAAA Records (aka IPv6 Service Discovery) in embedded DNS Server ( [#21396](https://github.com/docker/docker/pull/21396))\n\n*   Fix to not forward docker domain IPv6 queries to external servers ( [#21396](https://github.com/docker/docker/pull/21396))\n\n*   Multiple A/AAAA records from embedded DNS Server for DNS Round robin ( [#21019](https://github.com/docker/docker/pull/21019))\n\n*   Fix endpoint count inconsistency after an ungraceful dameon restart ( [#21261](https://github.com/docker/docker/pull/21261))\n*   Move the ownership of exposed ports and port-mapping options from Endpoint to Sandbox ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Fixed a bug which prevents docker reload when host is configured with ipv6.disable=1 ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Added inbuilt nil IPAM driver ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Fixed bug in iptables.Exists() logic [#21019](https://github.com/docker/docker/pull/21019)\n*   Fixed a Veth interface leak when using overlay network ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Fixed a bug which prevents docker reload after a network delete during shutdown ( [#20214](https://github.com/docker/docker/pull/20214))\n*   Make sure iptables chains are recreated on firewalld reload ( [#20419](https://github.com/docker/docker/pull/20419))\n*   Allow to pass global datastore during config reload ( [#20419](https://github.com/docker/docker/pull/20419))\n*   For anonymous containers use the alias name for IP to name mapping, ie:DNS PTR record ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Fix a panic when deleting an entry from /etc/hosts file ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Source the forwarded DNS queries from the container net namespace ( [#21019](https://github.com/docker/docker/pull/21019))\n*   Fix to retain the network internal mode config for bridge networks on daemon reload (\\[#21780\\] ( [https://github.com/docker/docker/pull/21780](https://github.com/docker/docker/pull/21780)))\n*   Fix to retain IPAM driver option configs on daemon reload (\\[#21914\\] ( [https://github.com/docker/docker/pull/21914](https://github.com/docker/docker/pull/21914)))\n\n### [Plugins](#plugins-2)\n\n*   Fix a file descriptor leak that would occur every time plugins were enumerated ( [#20686](https://github.com/docker/docker/pull/20686))\n*   Fix an issue where Authz plugin would corrupt the payload body when faced with a large amount of data ( [#20602](https://github.com/docker/docker/pull/20602))\n\n### [Runtime](#runtime-11)\n\n*   Fix a panic that could occur when cleanup after a container started with invalid parameters ( [#21716](https://github.com/docker/docker/pull/21716))\n*   Fix a race with event timers stopping early ( [#21692](https://github.com/docker/docker/pull/21692))\n*   Fix race conditions in the layer store, potentially corrupting the map and crashing the process ( [#21677](https://github.com/docker/docker/pull/21677))\n*   Un-deprecate auto-creation of host directories for mounts. This feature was marked deprecated in ( [#21666](https://github.com/docker/docker/pull/21666)) Docker 1.9, but was decided to be too much of a backward-incompatible change, so it was decided to keep the feature.\n\n*   It is now possible for containers to share the NET and IPC namespaces when `userns` is enabled ( [#21383](https://github.com/docker/docker/pull/21383))\n*   `docker inspect <image-id>` will now expose the rootfs layers ( [#21370](https://github.com/docker/docker/pull/21370))\n*   Docker Windows gained a minimal `top` implementation ( [#21354](https://github.com/docker/docker/pull/21354))\n\n*   Docker learned to report the faulty exe when a container cannot be started due to its condition ( [#21345](https://github.com/docker/docker/pull/21345))\n*   Docker with device mapper will now refuse to run if `udev sync` is not available ( [#21097](https://github.com/docker/docker/pull/21097))\n\n*   Fix a bug where Docker would not validate the config file upon configuration reload ( [#21089](https://github.com/docker/docker/pull/21089))\n*   Fix a hang that would happen on attach if initial start was to fail ( [#21048](https://github.com/docker/docker/pull/21048))\n*   Fix an issue where registry service options in the daemon configuration file were not properly taken into account ( [#21045](https://github.com/docker/docker/pull/21045))\n*   Fix a race between the exec and resize operations ( [#21022](https://github.com/docker/docker/pull/21022))\n*   Fix an issue where nanoseconds were not correctly taken in account when filtering Docker events ( [#21013](https://github.com/docker/docker/pull/21013))\n*   Fix the handling of Docker command when passed a 64 bytes id ( [#21002](https://github.com/docker/docker/pull/21002))\n\n*   Docker will now return a `204` (i.e http.StatusNoContent) code when it successfully deleted a network ( [#20977](https://github.com/docker/docker/pull/20977))\n\n*   Fix a bug where the daemon would wait indefinitely in case the process it was about to killed had already exited on its own ( [#20967](https://github.com/docker/docker/pull/20967)\n\n*   The devmapper driver learned the `dm.min_free_space` option. If the mapped device free space reaches the passed value, new device creation will be prohibited. ( [#20786](https://github.com/docker/docker/pull/20786))\n\n*   Docker can now prevent processes in container to gain new privileges via the `--security-opt=no-new-privileges` flag ( [#20727](https://github.com/docker/docker/pull/20727))\n\n*   Starting a container with the `--device` option will now correctly resolves symlinks ( [#20684](https://github.com/docker/docker/pull/20684))\n\n*   Docker now relies on [`containerd`](https://github.com/docker/containerd) and [`runc`](https://github.com/opencontainers/runc) to spawn containers. ( [#20662](https://github.com/docker/docker/pull/20662))\n\n*   Fix docker configuration reloading to only alter value present in the given config file ( [#20604](https://github.com/docker/docker/pull/20604))\n\n*   Docker now allows setting a container hostname via the `--hostname` flag when `--net=host` ( [#20177](https://github.com/docker/docker/pull/20177))\n*   Docker now allows executing privileged container while running with `--userns-remap` if both `--privileged` and the new `--userns=host` flag are specified ( [#20111](https://github.com/docker/docker/pull/20111))\n\n*   Fix Docker not cleaning up correctly old containers upon restarting after a crash ( [#19679](https://github.com/docker/docker/pull/19679))\n\n*   Docker will now error out if it doesn't recognize a configuration key within the config file ( [#19517](https://github.com/docker/docker/pull/19517))\n\n*   Fix container loading, on daemon startup, when they depends on a plugin running within a container ( [#19500](https://github.com/docker/docker/pull/19500))\n\n*   `docker update` learned how to change a container restart policy ( [#19116](https://github.com/docker/docker/pull/19116))\n*   `docker inspect` now also returns a new `State` field containing the container state in a human readable way (i.e. one of `created`, `restarting`, `running`, `paused`, `exited` or `dead`)( [#18966](https://github.com/docker/docker/pull/18966))\n\n*   Docker learned to limit the number of active pids (i.e. processes) within the container via the `pids-limit` flags. NOTE: This requires `CGROUP_PIDS=y` to be in the kernel configuration. ( [#18697](https://github.com/docker/docker/pull/18697))\n\n*   `docker load` now has a `--quiet` option to suppress the load output ( [#20078](https://github.com/docker/docker/pull/20078))\n*   Fix a bug in neighbor discovery for IPv6 peers ( [#20842](https://github.com/docker/docker/pull/20842))\n*   Fix a panic during cleanup if a container was started with invalid options ( [#21802](https://github.com/docker/docker/pull/21802))\n*   Fix a situation where a container cannot be stopped if the terminal is closed ( [#21840](https://github.com/docker/docker/pull/21840))\n\n### [Security](#security-2)\n\n*   Object with the `pcp_pmcd_t` selinux type were given management access to `/var/lib/docker(/.*)?` ( [#21370](https://github.com/docker/docker/pull/21370))\n*   `restart_syscall`, `copy_file_range`, `mlock2` joined the list of allowed calls in the default seccomp profile ( [#21117](https://github.com/docker/docker/pull/21117), [#21262](https://github.com/docker/docker/pull/21262))\n*   `send`, `recv` and `x32` were added to the list of allowed syscalls and arch in the default seccomp profile ( [#19432](https://github.com/docker/docker/pull/19432))\n*   Docker Content Trust now requests the server to perform snapshot signing ( [#21046](https://github.com/docker/docker/pull/21046))\n*   Support for using YubiKeys for Content Trust signing has been moved out of experimental ( [#21591](https://github.com/docker/docker/pull/21591))\n\n### [Volumes](#volumes)\n\n*   Output of `docker volume ls` is now sorted by volume name ( [#20389](https://github.com/docker/docker/pull/20389))\n*   Local volumes can now accept options similar to the unix `mount` tool ( [#20262](https://github.com/docker/docker/pull/20262))\n\n*   Fix an issue where one letter directory name could not be used as source for volumes ( [#21106](https://github.com/docker/docker/pull/21106))\n\n*   `docker run -v` now accepts a new flag `nocopy`. This tells the runtime not to copy the container path content into the volume (which is the default behavior) ( [#21223](https://github.com/docker/docker/pull/21223))\n\n### [Runtime](#runtime-12)\n\n*   Fix Docker client exiting with an \"Unrecognized input header\" error [#20706](https://github.com/docker/docker/pull/20706)\n*   Fix Docker exiting if Exec is started with both `AttachStdin` and `Detach` [#20647](https://github.com/docker/docker/pull/20647)\n\n### [Distribution](#distribution-4)\n\n*   Fix a crash when pushing multiple images sharing the same layers to the same repository in parallel [#20831](https://github.com/docker/docker/pull/20831)\n*   Fix a panic when pushing images to a registry which uses a misconfigured token service [#21030](https://github.com/docker/docker/pull/21030)\n\n### [Plugin system](#plugin-system)\n\n*   Fix issue preventing volume plugins to start when SELinux is enabled [#20834](https://github.com/docker/docker/pull/20834)\n*   Prevent Docker from exiting if a volume plugin returns a null response for Get requests [#20682](https://github.com/docker/docker/pull/20682)\n*   Fix plugin system leaking file descriptors if a plugin has an error [#20680](https://github.com/docker/docker/pull/20680)\n\n### [Security](#security-3)\n\n*   Fix linux32 emulation to fail during docker build [#20672](https://github.com/docker/docker/pull/20672) It was due to the `personality` syscall being blocked by the default seccomp profile.\n*   Fix Oracle XE 10g failing to start in a container [#20981](https://github.com/docker/docker/pull/20981) It was due to the `ipc` syscall being blocked by the default seccomp profile.\n*   Fix user namespaces not working on Linux From Scratch [#20685](https://github.com/docker/docker/pull/20685)\n*   Fix issue preventing daemon to start if userns is enabled and the `subuid` or `subgid` files contain comments [#20725](https://github.com/docker/docker/pull/20725)\n\n### [Runtime](#runtime-13)\n\n*   Prevent systemd from deleting containers' cgroups when its configuration is reloaded [#20518](https://github.com/docker/docker/pull/20518)\n*   Fix SELinux issues by disregarding `--read-only` when mounting `/dev/mqueue` [#20333](https://github.com/docker/docker/pull/20333)\n*   Fix chown permissions used during `docker cp` when userns is used [#20446](https://github.com/docker/docker/pull/20446)\n*   Fix configuration loading issue with all booleans defaulting to `true` [#20471](https://github.com/docker/docker/pull/20471)\n*   Fix occasional panic with `docker logs -f` [#20522](https://github.com/docker/docker/pull/20522)\n\n### [Distribution](#distribution-5)\n\n*   Keep layer reference if deletion failed to avoid a badly inconsistent state [#20513](https://github.com/docker/docker/pull/20513)\n*   Handle gracefully a corner case when canceling migration [#20372](https://github.com/docker/docker/pull/20372)\n*   Fix docker import on compressed data [#20367](https://github.com/docker/docker/pull/20367)\n*   Fix tar-split files corruption during migration that later cause docker push and docker save to fail [#20458](https://github.com/docker/docker/pull/20458)\n\n### [Networking](#networking-10)\n\n*   Fix daemon crash if embedded DNS is sent garbage [#20510](https://github.com/docker/docker/pull/20510)\n\n### [Volumes](#volumes-1)\n\n*   Fix issue with multiple volume references with same name [#20381](https://github.com/docker/docker/pull/20381)\n\n### [Security](#security-4)\n\n*   Fix potential cache corruption and delegation conflict issues [#20523](https://github.com/docker/docker/pull/20523)\n\n### [Runtime](#runtime-14)\n\n*   Do not stop daemon on migration hard failure [#20156](https://github.com/docker/docker/pull/20156)\n\n*   Fix various issues with migration to content-addressable images [#20058](https://github.com/docker/docker/pull/20058)\n*   Fix ZFS permission bug with user namespaces [#20045](https://github.com/docker/docker/pull/20045)\n*   Do not leak /dev/mqueue from the host to all containers, keep it container-specific [#19876](https://github.com/docker/docker/pull/19876) [#20133](https://github.com/docker/docker/pull/20133)\n*   Fix `docker ps --filter before=...` to not show stopped containers without providing `-a` flag [#20135](https://github.com/docker/docker/pull/20135)\n\n### [Security](#security-5)\n\n*   Fix issue preventing docker events to work properly with authorization plugin [#20002](https://github.com/docker/docker/pull/20002)\n\n### [Distribution](#distribution-6)\n\n*   Add additional verifications and prevent from uploading invalid data to registries [#20164](https://github.com/docker/docker/pull/20164)\n\n*   Fix regression preventing uppercase characters in image reference hostname [#20175](https://github.com/docker/docker/pull/20175)\n\n### [Networking](#networking-11)\n\n*   Fix embedded DNS for user-defined networks in the presence of firewalld [#20060](https://github.com/docker/docker/pull/20060)\n*   Fix issue where removing a network during shutdown left Docker inoperable [#20181](https://github.com/docker/docker/issues/20181) [#20235](https://github.com/docker/docker/issues/20235)\n*   Embedded DNS is now able to return compressed results [#20181](https://github.com/docker/docker/issues/20181)\n*   Fix port-mapping issue with `userland-proxy=false` [#20181](https://github.com/docker/docker/issues/20181)\n\n### [Logging](#logging-5)\n\n*   Fix bug where tcp+tls protocol would be rejected [#20109](https://github.com/docker/docker/pull/20109)\n\n### [Volumes](#volumes-2)\n\n*   Fix issue whereby older volume drivers would not receive volume options [#19983](https://github.com/docker/docker/pull/19983)\n\n### [Misc](#misc-1)\n\n*   Remove TasksMax from Docker systemd service [#20167](https://github.com/docker/docker/pull/20167)\n\n**IMPORTANT**: Docker 1.10 uses a new content-addressable storage for images and layers. A migration is performed the first time docker is run, and can take a significant amount of time depending on the number of images present. Refer to this page on the wiki for more information: [https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migration](https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migration) We also released a cool migration utility that enables you to perform the migration before updating to reduce downtime. Engine 1.10 migrator can be found on Docker Hub: [https://hub.docker.com/r/docker/v1.10-migrator/](https://hub.docker.com/r/docker/v1.10-migrator/)\n\n### [Runtime](#runtime-15)\n\n*   New `docker update` command that allows updating resource constraints on running containers [#15078](https://github.com/docker/docker/pull/15078)\n*   Add `--tmpfs` flag to `docker run` to create a tmpfs mount in a container [#13587](https://github.com/docker/docker/pull/13587)\n*   Add `--format` flag to `docker images` command [#17692](https://github.com/docker/docker/pull/17692)\n*   Allow to set daemon configuration in a file and hot-reload it with the `SIGHUP` signal [#18587](https://github.com/docker/docker/pull/18587)\n*   Updated docker events to include more meta-data and event types [#18888](https://github.com/docker/docker/pull/18888) This change is backward compatible in the API, but not on the CLI.\n*   Add `--blkio-weight-device` flag to `docker run` [#13959](https://github.com/docker/docker/pull/13959)\n*   Add `--device-read-bps` and `--device-write-bps` flags to `docker run` [#14466](https://github.com/docker/docker/pull/14466)\n*   Add `--device-read-iops` and `--device-write-iops` flags to `docker run` [#15879](https://github.com/docker/docker/pull/15879)\n*   Add `--oom-score-adj` flag to `docker run` [#16277](https://github.com/docker/docker/pull/16277)\n*   Add `--detach-keys` flag to `attach`, `run`, `start` and `exec` commands to override the default key sequence that detaches from a container [#15666](https://github.com/docker/docker/pull/15666)\n*   Add `--shm-size` flag to `run`, `create` and `build` to set the size of `/dev/shm` [#16168](https://github.com/docker/docker/pull/16168)\n*   Show the number of running, stopped, and paused containers in `docker info` [#19249](https://github.com/docker/docker/pull/19249)\n*   Show the `OSType` and `Architecture` in `docker info` [#17478](https://github.com/docker/docker/pull/17478)\n*   Add `--cgroup-parent` flag on `daemon` to set cgroup parent for all containers [#19062](https://github.com/docker/docker/pull/19062)\n*   Add `-L` flag to docker cp to follow symlinks [#16613](https://github.com/docker/docker/pull/16613)\n*   New `status=dead` filter for `docker ps` [#17908](https://github.com/docker/docker/pull/17908)\n\n*   Change `docker run` exit codes to distinguish between runtime and application errors [#14012](https://github.com/docker/docker/pull/14012)\n*   Enhance `docker events --since` and `--until` to support nanoseconds and timezones [#17495](https://github.com/docker/docker/pull/17495)\n*   Add `--all`/`-a` flag to `stats` to include both running and stopped containers [#16742](https://github.com/docker/docker/pull/16742)\n*   Change the default cgroup-driver to `cgroupfs` [#17704](https://github.com/docker/docker/pull/17704)\n*   Emit a \"tag\" event when tagging an image with `build -t` [#17115](https://github.com/docker/docker/pull/17115)\n*   Best effort for linked containers' start order when starting the daemon [#18208](https://github.com/docker/docker/pull/18208)\n*   Add ability to add multiple tags on `build` [#15780](https://github.com/docker/docker/pull/15780)\n*   Permit `OPTIONS` request against any url, thus fixing issue with CORS [#19569](https://github.com/docker/docker/pull/19569)\n\n*   Fix the `--quiet` flag on `docker build` to actually be quiet [#17428](https://github.com/docker/docker/pull/17428)\n*   Fix `docker images --filter dangling=false` to now show all non-dangling images [#19326](https://github.com/docker/docker/pull/19326)\n*   Fix race condition causing autorestart turning off on restart [#17629](https://github.com/docker/docker/pull/17629)\n*   Recognize GPFS filesystems [#19216](https://github.com/docker/docker/pull/19216)\n*   Fix obscure bug preventing to start containers [#19751](https://github.com/docker/docker/pull/19751)\n*   Forbid `exec` during container restart [#19722](https://github.com/docker/docker/pull/19722)\n*   devicemapper: Increasing `--storage-opt dm.basesize` will now increase the base device size on daemon restart [#19123](https://github.com/docker/docker/pull/19123)\n\n### [Security](#security-6)\n\n*   Add `--userns-remap` flag to `daemon` to support user namespaces (previously in experimental) [#19187](https://github.com/docker/docker/pull/19187)\n*   Add support for custom seccomp profiles in `--security-opt` [#17989](https://github.com/docker/docker/pull/17989)\n*   Add default seccomp profile [#18780](https://github.com/docker/docker/pull/18780)\n*   Add `--authorization-plugin` flag to `daemon` to customize ACLs [#15365](https://github.com/docker/docker/pull/15365)\n*   Docker Content Trust now supports the ability to read and write user delegations [#18887](https://github.com/docker/docker/pull/18887) This is an optional, opt-in feature that requires the explicit use of the Notary command-line utility in order to be enabled. Enabling delegation support in a specific repository will break the ability of Docker 1.9 and 1.8 to pull from that repository, if content trust is enabled.\n\n*   Allow SELinux to run in a container when using the BTRFS storage driver [#16452](https://github.com/docker/docker/pull/16452)\n\n### [Distribution](#distribution-7)\n\n*   Use content-addressable storage for images and layers [#17924](https://github.com/docker/docker/pull/17924) A migration is performed the first time docker is run; it can take a significant amount of time depending on the number of images and containers present. Images no longer depend on the parent chain but contain a list of layer references. `docker load`/`docker save` tarballs now also contain content-addressable image configurations. For more information: [https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migration](https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migration)\n*   Add support for the new [manifest format (\"schema2\")](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md) [#18785](https://github.com/docker/docker/pull/18785)\n*   Lots of improvements for push and pull: performance++, retries on failed downloads, cancelling on client disconnect [#18353](https://github.com/docker/docker/pull/18353), [#18418](https://github.com/docker/docker/pull/18418), [#19109](https://github.com/docker/docker/pull/19109), [#18353](https://github.com/docker/docker/pull/18353)\n*   Limit v1 protocol fallbacks [#18590](https://github.com/docker/docker/pull/18590)\n\n*   Fix issue where docker could hang indefinitely waiting for a nonexistent process to pull an image [#19743](https://github.com/docker/docker/pull/19743)\n\n### [Networking](#networking-12)\n\n*   Use DNS-based discovery instead of `/etc/hosts` [#19198](https://github.com/docker/docker/pull/19198)\n*   Support for network-scoped alias using `--net-alias` on `run` and `--alias` on `network connect` [#19242](https://github.com/docker/docker/pull/19242)\n*   Add `--ip` and `--ip6` on `run` and `network connect` to support custom IP addresses for a container in a network [#19001](https://github.com/docker/docker/pull/19001)\n*   Add `--ipam-opt` to `network create` for passing custom IPAM options [#17316](https://github.com/docker/docker/pull/17316)\n*   Add `--internal` flag to `network create` to restrict external access to and from the network [#19276](https://github.com/docker/docker/pull/19276)\n*   Add `kv.path` option to `--cluster-store-opt` [#19167](https://github.com/docker/docker/pull/19167)\n*   Add `discovery.heartbeat` and `discovery.ttl` options to `--cluster-store-opt` to configure discovery TTL and heartbeat timer [#18204](https://github.com/docker/docker/pull/18204)\n*   Add `--format` flag to `network inspect` [#17481](https://github.com/docker/docker/pull/17481)\n*   Add `--link` to `network connect` to provide a container-local alias [#19229](https://github.com/docker/docker/pull/19229)\n*   Support for Capability exchange with remote IPAM plugins [#18775](https://github.com/docker/docker/pull/18775)\n*   Add `--force` to `network disconnect` to force container to be disconnected from network [#19317](https://github.com/docker/docker/pull/19317)\n\n*   Support for multi-host networking using built-in overlay driver for all engine supported kernels: 3.10+ [#18775](https://github.com/docker/docker/pull/18775)\n*   `--link` is now supported on `docker run` for containers in user-defined network [#19229](https://github.com/docker/docker/pull/19229)\n*   Enhance `docker network rm` to allow removing multiple networks [#17489](https://github.com/docker/docker/pull/17489)\n*   Include container names in `network inspect` [#17615](https://github.com/docker/docker/pull/17615)\n*   Include auto-generated subnets for user-defined networks in `network inspect` [#17316](https://github.com/docker/docker/pull/17316)\n*   Add `--filter` flag to `network ls` to hide predefined networks [#17782](https://github.com/docker/docker/pull/17782)\n*   Add support for network connect/disconnect to stopped containers [#18906](https://github.com/docker/docker/pull/18906)\n*   Add network ID to container inspect [#19323](https://github.com/docker/docker/pull/19323)\n\n*   Fix MTU issue where Docker would not start with two or more default routes [#18108](https://github.com/docker/docker/pull/18108)\n*   Fix duplicate IP address for containers [#18106](https://github.com/docker/docker/pull/18106)\n*   Fix issue preventing sometimes docker from creating the bridge network [#19338](https://github.com/docker/docker/pull/19338)\n*   Do not substitute 127.0.0.1 name server when using `--net=host` [#19573](https://github.com/docker/docker/pull/19573)\n\n### [Logging](#logging-6)\n\n*   New logging driver for Splunk [#16488](https://github.com/docker/docker/pull/16488)\n*   Add support for syslog over TCP+TLS [#18998](https://github.com/docker/docker/pull/18998)\n\n*   Enhance `docker logs --since` and `--until` to support nanoseconds and time [#17495](https://github.com/docker/docker/pull/17495)\n*   Enhance AWS logs to auto-detect region [#16640](https://github.com/docker/docker/pull/16640)\n\n### [Volumes](#volumes-3)\n\n*   Add support to set the mount propagation mode for a volume [#17034](https://github.com/docker/docker/pull/17034)\n\n*   Add `ls` and `inspect` endpoints to volume plugin API [#16534](https://github.com/docker/docker/pull/16534) Existing plugins need to make use of these new APIs to satisfy users' expectation For that, use the new MIME type `application/vnd.docker.plugins.v1.2+json` [#19549](https://github.com/docker/docker/pull/19549)\n\n*   Fix data not being copied to named volumes [#19175](https://github.com/docker/docker/pull/19175)\n*   Fix issues preventing volume drivers from being containerized [#19500](https://github.com/docker/docker/pull/19500)\n*   Fix `docker volumes ls --dangling=false` to now show all non-dangling volumes [#19671](https://github.com/docker/docker/pull/19671)\n*   Do not remove named volumes on container removal [#19568](https://github.com/docker/docker/pull/19568)\n*   Allow external volume drivers to host anonymous volumes [#19190](https://github.com/docker/docker/pull/19190)\n\n### [Builder](#builder-4)\n\n*   Add support for `**` in `.dockerignore` to wildcard multiple levels of directories [#17090](https://github.com/docker/docker/pull/17090)\n\n*   Fix handling of UTF-8 characters in Dockerfiles [#17055](https://github.com/docker/docker/pull/17055)\n*   Fix permissions problem when reading from STDIN [#19283](https://github.com/docker/docker/pull/19283)\n\n### [Client](#client-2)\n\n*   Add support for overriding the API version to use via an `DOCKER_API_VERSION` environment-variable [#15964](https://github.com/docker/docker/pull/15964)\n\n*   Fix a bug preventing Windows clients to log in to Docker Hub [#19891](https://github.com/docker/docker/pull/19891)\n\n### [Misc](#misc-2)\n\n*   systemd: Set TasksMax in addition to LimitNPROC in systemd service file [#19391](https://github.com/docker/docker/pull/19391)\n\n### [Deprecations](#deprecations)\n\n*   Remove LXC support. The LXC driver was deprecated in Docker 1.8, and has now been removed [#17700](https://github.com/docker/docker/pull/17700)\n*   Remove `--exec-driver` daemon flag, because it is no longer in use [#17700](https://github.com/docker/docker/pull/17700)\n*   Remove old deprecated single-dashed long CLI flags (such as `-rm`; use `--rm` instead) [#17724](https://github.com/docker/docker/pull/17724)\n*   Deprecate HostConfig at API container start [#17799](https://github.com/docker/docker/pull/17799)\n*   Deprecate docker packages for newly EOL'd Linux distributions: Fedora 21 and Ubuntu 15.04 (Vivid) [#18794](https://github.com/docker/docker/pull/18794), [#18809](https://github.com/docker/docker/pull/18809)\n*   Deprecate `-f` flag for docker tag [#18350](https://github.com/docker/docker/pull/18350)\n\n### [Runtime](#runtime-16)\n\n*   Do not prevent daemon from booting if images could not be restored (#17695)\n*   Force IPC mount to unmount on daemon shutdown/init (#17539)\n*   Turn IPC unmount errors into warnings (#17554)\n*   Fix `docker stats` performance regression (#17638)\n*   Clarify cryptic error message upon `docker logs` if `--log-driver=none` (#17767)\n*   Fix seldom panics (#17639, #17634, #17703)\n*   Fix opq whiteouts problems for files with dot prefix (#17819)\n*   devicemapper: try defaulting to xfs instead of ext4 for performance reasons (#17903, #17918)\n*   devicemapper: fix displayed fs in docker info (#17974)\n*   selinux: only relabel if user requested so with the `z` option (#17450, #17834)\n*   Do not make network calls when normalizing names (#18014)\n\n### [Client](#client-3)\n\n*   Fix `docker login` on windows (#17738)\n*   Fix bug with `docker inspect` output when not connected to daemon (#17715)\n*   Fix `docker inspect -f {{.HostConfig.Dns}} somecontainer` (#17680)\n\n### [Builder](#builder-5)\n\n*   Fix regression with symlink behavior in ADD/COPY (#17710)\n\n### [Networking](#networking-13)\n\n*   Allow passing a network ID as an argument for `--net` (#17558)\n*   Fix connect to host and prevent disconnect from host for `host` network (#17476)\n*   Fix `--fixed-cidr` issue when gateway ip falls in ip-range and ip-range is not the first block in the network (#17853)\n*   Restore deterministic `IPv6` generation from `MAC` address on default `bridge` network (#17890)\n*   Allow port-mapping only for endpoints created on docker run (#17858)\n*   Fixed an endpoint delete issue with a possible stale sbox (#18102)\n\n### [Distribution](#distribution-8)\n\n*   Correct parent chain in v2 push when v1Compatibility files on the disk are inconsistent (#18047)\n\n### [Runtime](#runtime-17)\n\n*   `docker stats` now returns block IO metrics (#15005)\n*   `docker stats` now details network stats per interface (#15786)\n*   Add `ancestor=<image>` filter to `docker ps --filter` flag to filter containers based on their ancestor images (#14570)\n*   Add `label=<somelabel>` filter to `docker ps --filter` to filter containers based on label (#16530)\n*   Add `--kernel-memory` flag to `docker run` (#14006)\n*   Add `--message` flag to `docker import` allowing to specify an optional message (#15711)\n*   Add `--privileged` flag to `docker exec` (#14113)\n*   Add `--stop-signal` flag to `docker run` allowing to replace the container process stopping signal (#15307)\n*   Add a new `unless-stopped` restart policy (#15348)\n*   Inspecting an image now returns tags (#13185)\n*   Add container size information to `docker inspect` (#15796)\n*   Add `RepoTags` and `RepoDigests` field to `/images/{name:.*}/json` (#17275)\n\n*   Remove the deprecated `/container/ps` endpoint from the API (#15972)\n*   Send and document correct HTTP codes for `/exec/<name>/start` (#16250)\n*   Share shm and mqueue between containers sharing IPC namespace (#15862)\n*   Event stream now shows OOM status when `--oom-kill-disable` is set (#16235)\n*   Ensure special network files (/etc/hosts etc.) are read-only if bind-mounted with `ro` option (#14965)\n*   Improve `rmi` performance (#16890)\n*   Do not update /etc/hosts for the default bridge network, except for links (#17325)\n*   Fix conflict with duplicate container names (#17389)\n*   Fix an issue with incorrect template execution in `docker inspect` (#17284)\n*   DEPRECATE `-c` short flag variant for `--cpu-shares` in docker run (#16271)\n\n### [Client](#client-4)\n\n*   Allow `docker import` to import from local files (#11907)\n\n### [Builder](#builder-6)\n\n*   Add a `STOPSIGNAL` Dockerfile instruction allowing to set a different stop-signal for the container process (#15307)\n*   Add an `ARG` Dockerfile instruction and a `--build-arg` flag to `docker build` that allows to add build-time environment variables (#15182)\n\n*   Improve cache miss performance (#16890)\n\n### [Storage](#storage)\n\n*   devicemapper: Implement deferred deletion capability (#16381)\n\n### [Networking](#networking-14)\n\n*   `docker network` exits experimental and is part of standard release (#16645)\n*   New network top-level concept, with associated subcommands and API (#16645) WARNING: the API is different from the experimental API\n*   Support for multiple isolated/micro-segmented networks (#16645)\n*   Built-in multihost networking using VXLAN based overlay driver (#14071)\n*   Support for third-party network plugins (#13424)\n*   Ability to dynamically connect containers to multiple networks (#16645)\n*   Support for user-defined IP address management via pluggable IPAM drivers (#16910)\n*   Add daemon flags `--cluster-store` and `--cluster-advertise` for built-in nodes discovery (#16229)\n*   Add `--cluster-store-opt` for setting up TLS settings (#16644)\n*   Add `--dns-opt` to the daemon (#16031)\n\n*   DEPRECATE following container `NetworkSettings` fields in API v1.21: `EndpointID`, `Gateway`, `GlobalIPv6Address`, `GlobalIPv6PrefixLen`, `IPAddress`, `IPPrefixLen`, `IPv6Gateway` and `MacAddress`. Those are now specific to the `bridge` network. Use `NetworkSettings.Networks` to inspect the networking settings of a container per network.\n\n### [Volumes](#volumes-4)\n\n*   New top-level `volume` subcommand and API (#14242)\n\n*   Move API volume driver settings to host-specific config (#15798)\n*   Print an error message if volume name is not unique (#16009)\n*   Ensure volumes created from Dockerfiles always use the local volume driver (#15507)\n*   DEPRECATE auto-creating missing host paths for bind mounts (#16349)\n\n### [Logging](#logging-7)\n\n*   Add `awslogs` logging driver for Amazon CloudWatch (#15495)\n*   Add generic `tag` log option to allow customizing container/image information passed to driver (#15384)\n\n*   Implement the `docker logs` endpoint for the journald driver (#13707)\n*   DEPRECATE driver-specific log tags (#15384)\n\n### [Distribution](#distribution-9)\n\n*   `docker search` now works with partial names (#16509)\n\n*   Push optimization: avoid buffering to file (#15493)\n*   The daemon will display progress for images that were already being pulled by another client (#15489)\n*   Only permissions required for the current action being performed are requested (#)\n\n*   Renaming trust keys (and respective environment variables) from `offline` to `root` and `tagging` to `repository` (#16894)\n\n*   DEPRECATE trust key environment variables `DOCKER_CONTENT_TRUST_OFFLINE_PASSPHRASE` and `DOCKER_CONTENT_TRUST_TAGGING_PASSPHRASE` (#16894)\n\n### [Security](#security-7)\n\n*   Add SELinux profiles to the rpm package (#15832)\n\n*   Fix various issues with AppArmor profiles provided in the deb package (#14609)\n*   Add AppArmor policy that prevents writing to /proc (#15571)\n\n### [Distribution](#distribution-10)\n\n*   Fix layer IDs lead to local graph poisoning (CVE-2014-8178)\n*   Fix manifest validation and parsing logic errors allow pull-by-digest validation bypass (CVE-2014-8179)\n\n*   Add `--disable-legacy-registry` to prevent a daemon from using a v1 registry\n\n### [Distribution](#distribution-11)\n\n*   Fixes rare edge case of handling GNU LongLink and LongName entries.\n*   Fix ^C on docker pull.\n*   Fix docker pull issues on client disconnection.\n*   Fix issue that caused the daemon to panic when loggers weren't configured properly.\n*   Fix goroutine leak pulling images from registry V2.\n\n### [Runtime](#runtime-18)\n\n*   Fix a bug mounting cgroups for docker daemons running inside docker containers.\n*   Initialize log configuration properly.\n\n### [Client:](#client-5)\n\n*   Handle `-q` flag in `docker ps` properly when there is a default format.\n\n### [Networking](#networking-15)\n\n*   Fix several corner cases with netlink.\n\n### [Contrib](#contrib-8)\n\n*   Fix several issues with bash completion.\n\n### [Distribution](#distribution-12)\n\n*   Fix a bug where pushing multiple tags would result in invalid images\n\n### [Distribution](#distribution-13)\n\n*   Trusted pull, push and build, disabled by default\n\n*   Make tar layers deterministic between registries\n*   Don't allow deleting the image of running containers\n*   Check if a tag name to load is a valid digest\n*   Allow one character repository names\n*   Add a more accurate error description for invalid tag name\n*   Make build cache ignore mtime\n\n### [Cli](#cli)\n\n*   Add support for DOCKER\\_CONFIG/--config to specify config file dir\n*   Add --type flag for docker inspect command\n*   Add formatting options to `docker ps` with `--format`\n*   Replace `docker -d` with new subcommand `docker daemon`\n\n*   Zsh completion updates and improvements\n*   Add some missing events to bash completion\n*   Support daemon urls with base paths in `docker -H`\n*   Validate status= filter to docker ps\n*   Display when a container is in --net=host in docker ps\n*   Extend docker inspect to export image metadata related to graph driver\n*   Restore --default-gateway{,-v6} daemon options\n*   Add missing unpublished ports in docker ps\n*   Allow duration strings in `docker events` as --since/--until\n*   Expose more mounts information in `docker inspect`\n\n### [Runtime](#runtime-19)\n\n*   Add new Fluentd logging driver\n*   Allow `docker import` to load from local files\n*   Add logging driver for GELF via UDP\n*   Allow to copy files from host to containers with `docker cp`\n*   Promote volume drivers from experimental to master\n*   Add rollover options to json-file log driver, and --log-driver-opts flag\n*   Add memory swappiness tuning options\n\n*   Remove cgroup read-only flag when privileged\n*   Make /proc, /sys, & /dev readonly for readonly containers\n*   Add cgroup bind mount by default\n*   Overlay: Export metadata for container and image in `docker inspect`\n*   Devicemapper: external device activation\n*   Devicemapper: Compare uuid of base device on startup\n*   Remove RC4 from the list of registry cipher suites\n*   Add syslog-facility option\n*   LXC execdriver compatibility with recent LXC versions\n*   Mark LXC execriver as deprecated (to be removed with the migration to runc)\n\n### [Plugins](#plugins-3)\n\n*   Separate plugin sockets and specs locations\n*   Allow TLS connections to plugins\n\n### [Bug fixes](#bug-fixes)\n\n*   Add missing 'Names' field to /containers/json API output\n*   Make `docker rmi` of dangling images safe while pulling\n*   Devicemapper: Change default basesize to 100G\n*   Go Scheduler issue with sync.Mutex and gcc\n*   Fix issue where Search API endpoint would panic due to empty AuthConfig\n*   Set image canonical names correctly\n*   Check dockerinit only if lxc driver is used\n*   Fix ulimit usage of nproc\n*   Always attach STDIN if -i,--interactive is specified\n*   Show error messages when saving container state fails\n*   Fixed incorrect assumption on --bridge=none treated as disable network\n*   Check for invalid port specifications in host configuration\n*   Fix endpoint leave failure for --net=host mode\n*   Fix goroutine leak in the stats API if the container is not running\n*   Check for apparmor file before reading it\n*   Fix DOCKER\\_TLS\\_VERIFY being ignored\n*   Set umask to the default on startup\n*   Correct the message of pause and unpause a non-running container\n*   Adjust disallowed CpuShares in container creation\n*   ZFS: correctly apply selinux context\n*   Display empty string instead of when IP opt is nil\n*   `docker kill` returns error when container is not running\n*   Fix COPY/ADD quoted/json form\n*   Fix goroutine leak on logs -f with no output\n*   Remove panic in nat package on invalid hostport\n*   Fix container linking in Fedora 22\n*   Fix error caused using default gateways outside of the allocated range\n*   Format times in inspect command with a template as RFC3339Nano\n*   Make registry client to accept 2xx and 3xx http status responses as successful\n*   Fix race issue that caused the daemon to crash with certain layer downloads failed in a specific order.\n*   Fix error when the docker ps format was not valid.\n*   Remove redundant ip forward check.\n*   Fix issue trying to push images to repository mirrors.\n*   Fix error cleaning up network entrypoints when there is an initialization issue.\n\n### [Runtime](#runtime-20)\n\n*   Fix default user spawning exec process with `docker exec`\n*   Make `--bridge=none` not to configure the network bridge\n*   Publish networking stats properly\n*   Fix implicit devicemapper selection with static binaries\n*   Fix socket connections that hung intermittently\n*   Fix bridge interface creation on CentOS/RHEL 6.6\n*   Fix local dns lookups added to resolv.conf\n*   Fix copy command mounting volumes\n*   Fix read/write privileges in volumes mounted with --volumes-from\n\n### [Remote API](#remote-api)\n\n*   Fix unmarshalling of Command and Entrypoint\n*   Set limit for minimum client version supported\n*   Validate port specification\n*   Return proper errors when attach/reattach fail\n\n### [Distribution](#distribution-14)\n\n*   Fix pulling private images\n*   Fix fallback between registry V2 and V1\n\n### [Runtime](#runtime-21)\n\n*   Experimental feature: support for out-of-process volume plugins\n\n*   The userland proxy can be disabled in favor of hairpin NAT using the daemon’s `--userland-proxy=false` flag\n*   The `exec` command supports the `-u|--user` flag to specify the new process owner\n\n*   Default gateway for containers can be specified daemon-wide using the `--default-gateway` and `--default-gateway-v6` flags\n*   The CPU CFS (Completely Fair Scheduler) quota can be set in `docker run` using `--cpu-quota`\n*   Container block IO can be controlled in `docker run` using`--blkio-weight`\n*   ZFS support\n*   The `docker logs` command supports a `--since` argument\n*   UTS namespace can be shared with the host with `docker run --uts=host`\n\n### [Quality](#quality)\n\n*   Networking stack was entirely rewritten as part of the libnetwork effort\n*   Engine internals refactoring\n*   Volumes code was entirely rewritten to support the plugins effort\n\n*   Sending SIGUSR1 to a daemon will dump all goroutines stacks without exiting\n\n### [Build](#build)\n\n*   Support ${variable:-value} and ${variable:+value} syntax for environment variables\n*   Support resource management flags `--cgroup-parent`, `--cpu-period`, `--cpu-quota`, `--cpuset-cpus`, `--cpuset-mems`\n*   git context changes with branches and directories\n\n*   The .dockerignore file support exclusion rules\n\n### [Distribution](#distribution-15)\n\n*   Client support for v2 mirroring support for the official registry\n\n### [Bugfixes](#bugfixes)\n\n*   Firewalld is now supported and will automatically be used when available\n*   mounting --device recursively\n\n### [Runtime](#runtime-22)\n\n*   Revert change prohibiting mounting into /sys\n\n### [Security](#security-8)\n\n*   Fix read/write /proc paths (CVE-2015-3630)\n*   Prohibit VOLUME /proc and VOLUME / (CVE-2015-3631)\n*   Fix opening of file-descriptor 1 (CVE-2015-3627)\n*   Fix symlink traversal on container respawn allowing local privilege escalation (CVE-2015-3629)\n*   Prohibit mount of /sys\n\n### [Runtime](#runtime-23)\n\n*   Update AppArmor policy to not allow mounts\n\n### [Builder](#builder-7)\n\n*   Building images from an image ID\n*   Build containers with resource constraints, ie `docker build --cpu-shares=100 --memory=1024m...`\n*   `commit --change` to apply specified Dockerfile instructions while committing the image\n*   `import --change` to apply specified Dockerfile instructions while importing the image\n*   Builds no longer continue in the background when canceled with CTRL-C\n\n### [Client](#client-6)\n\n*   Windows Support\n\n### [Runtime](#runtime-24)\n\n*   Container and image Labels\n*   `--cgroup-parent` for specifying a parent cgroup to place container cgroup within\n*   Logging drivers, `json-file`, `syslog`, or `none`\n*   Pulling images by ID\n*   `--ulimit` to set the ulimit on a container\n*   `--default-ulimit` option on the daemon which applies to all created containers (and overwritten by `--ulimit` on run)\n\n### [Builder](#builder-8)\n\n*   Dockerfile to use for a given `docker build` can be specified with the `-f` flag\n\n*   Dockerfile and .dockerignore files can be themselves excluded as part of the .dockerignore file, thus preventing modifications to these files invalidating ADD or COPY instructions cache\n*   ADD and COPY instructions accept relative paths\n*   Dockerfile `FROM scratch` instruction is now interpreted as a no-base specifier\n*   Improve performance when exposing a large number of ports\n\n### [Hack](#hack)\n\n*   Allow client-side only integration tests for Windows\n\n*   Include docker-py integration tests against Docker daemon as part of our test suites\n\n### [Packaging](#packaging)\n\n*   Support for the new version of the registry HTTP API\n\n*   Speed up `docker push` for images with a majority of already existing layers\n\n*   Fixed contacting a private registry through a proxy\n\n### [Remote API](#remote-api-1)\n\n*   A new endpoint will stream live container resource metrics and can be accessed with the `docker stats` command\n*   Containers can be renamed using the new `rename` endpoint and the associated `docker rename` command\n\n*   Container `inspect` endpoint show the ID of `exec` commands running in this container\n*   Container `inspect` endpoint show the number of times Docker auto-restarted the container\n*   New types of event can be streamed by the `events` endpoint: ‘OOM’ (container died with out of memory), ‘exec\\_create’, and ‘exec\\_start'\n\n*   Fixed returned string fields which hold numeric characters incorrectly omitting surrounding double quotes\n\n### [Runtime](#runtime-25)\n\n*   Docker daemon has full IPv6 support\n*   The `docker run` command can take the `--pid=host` flag to use the host PID namespace, which makes it possible for example to debug host processes using containerized debugging tools\n*   The `docker run` command can take the `--read-only` flag to make the container’s root filesystem mounted as readonly, which can be used in combination with volumes to force a container’s processes to only write to locations that will be persisted\n*   Container total memory usage can be limited for `docker run` using the `--memory-swap` flag\n\n*   Major stability improvements for devicemapper storage driver\n*   Better integration with host system: containers will reflect changes to the host's `/etc/resolv.conf` file when restarted\n*   Better integration with host system: per-container iptable rules are moved to the DOCKER chain\n\n*   Fixed container exiting on out of memory to return an invalid exit code\n\n### [Other](#other)\n\n*   The HTTP\\_PROXY, HTTPS\\_PROXY, and NO\\_PROXY environment variables are properly taken into account by the client when connecting to the Docker daemon\n\n### [Runtime](#runtime-26)\n\n*   Fix issue with volumes-from and bind mounts not being honored after create\n\n### [Notable Features since 1.3.0](#notable-features-since-130)\n\n*   Set key=value labels to the daemon (displayed in `docker info`), applied with new `-label` daemon flag\n*   Add support for `ENV` in Dockerfile of the form: `ENV name=value name2=value2...`\n*   New Overlayfs Storage Driver\n*   `docker info` now returns an `ID` and `Name` field\n*   Filter events by event name, container, or image\n*   `docker cp` now supports copying from container volumes\n\n*   Fixed `docker tag`, so it honors `--force` when overriding a tag for existing image.\n\n### [Security](#security-9)\n\n*   Fix path traversal vulnerability in processing of absolute symbolic links (CVE-2014-9356)\n*   Fix decompression of xz image archives, preventing privilege escalation (CVE-2014-9357)\n*   Validate image IDs (CVE-2014-9358)\n\n### [Runtime](#runtime-27)\n\n*   Fix an issue when image archives are being read slowly\n\n### [Client](#client-7)\n\n*   Fix a regression related to stdin redirection\n*   Fix a regression with `docker cp` when destination is the current directory\n\n### [Security](#security-10)\n\n*   Fix tar breakout vulnerability\n\n*   Extractions are now sandboxed chroot\n\n*   Security options are no longer committed to images\n\n### [Runtime](#runtime-28)\n\n*   Fix deadlock in `docker ps -f exited=1`\n*   Fix a bug when `--volumes-from` references a container that failed to start\n\n### [Registry](#registry)\n\n*   `--insecure-registry` now accepts CIDR notation such as 10.1.0.0/16\n\n*   Private registries whose IPs fall in the 127.0.0.0/8 range do no need the `--insecure-registry` flag\n\n*   Skip the experimental registry v2 API when mirroring is enabled\n\n### [Security](#security-11)\n\n*   Prevent fallback to SSL protocols < TLS 1.0 for client, daemon and registry\n\n*   Secure HTTPS connection to registries with certificate verification and without HTTP fallback unless `--insecure-registry` is specified\n\n### [Runtime](#runtime-29)\n\n*   Fix issue where volumes would not be shared\n\n### [Client](#client-8)\n\n*   Fix issue with `--iptables=false` not automatically setting `--ip-masq=false`\n*   Fix docker run output to non-TTY stdout\n\n### [Builder](#builder-9)\n\n*   Fix escaping `$` for environment variables\n*   Fix issue with lowercase `onbuild` Dockerfile instruction\n*   Restrict environment variable expansion to `ENV`, `ADD`, `COPY`, `WORKDIR`, `EXPOSE`, `VOLUME` and `USER`\n\n### [Notable features since 1.2.0](#notable-features-since-120)\n\n*   Docker `exec` allows you to run additional processes inside existing containers\n*   Docker `create` gives you the ability to create a container via the CLI without executing a process\n*   `--security-opts` options to allow user to customize container labels and apparmor profiles\n*   Docker `ps` filters\n\n*   Wildcard support to COPY/ADD\n\n*   Move production URLs to get.docker.com from get.docker.io\n*   Allocate IP address on the bridge inside a valid CIDR\n*   Use drone.io for PR and CI testing\n*   Ability to setup an official registry mirror\n*   Ability to save multiple images with docker `save`\n\n### [Runtime](#runtime-30)\n\n*   Make /etc/hosts /etc/resolv.conf and /etc/hostname editable at runtime\n*   Auto-restart containers using policies\n*   Use /var/lib/docker/tmp for large temporary files\n*   `--cap-add` and `--cap-drop` to tweak what linux capability you want\n*   `--device` to use devices in containers\n\n### [Client](#client-9)\n\n*   `docker search` on private registries\n*   Add `exited` filter to `docker ps --filter`\n\n*   `docker rm -f` now kills instead of stop\n\n*   Support for IPv6 addresses in `--dns` flag\n\n### [Proxy](#proxy)\n\n*   Proxy instances in separate processes\n\n*   Small bug fix on UDP proxy\n\n### [Runtime](#runtime-31)\n\n*   Fix port allocation for existing containers\n*   Fix containers restart on daemon restart\n\n### [Packaging](#packaging-1)\n\n*   Fix /etc/init.d/docker issue on Debian\n\n### [Builder](#builder-10)\n\n*   Fix issue with ADD\n\n### [Notable features since 1.0.1](#notable-features-since-101)\n\n*   Add `.dockerignore` support\n*   Pause containers during `docker commit`\n*   Add `--tail` to `docker logs`\n\n### [Builder](#builder-11)\n\n*   Allow a tar file as context for `docker build`\n\n*   Fix issue with white-spaces and multi-lines in `Dockerfiles`\n\n### [Runtime](#runtime-32)\n\n*   Overall performance improvements\n*   Allow `/` as source of `docker run -v`\n*   Fix port allocation\n*   Fix bug in `docker save`\n*   Add links information to `docker inspect`\n\n### [Client](#client-10)\n\n*   Improve command line parsing for `docker commit`\n\n### [Remote API](#remote-api-2)\n\n*   Improve status code for the `start` and `stop` endpoints\n\n### [Notable features since 1.0.0](#notable-features-since-100)\n\n*   Enhance security for the LXC driver\n\n### [Builder](#builder-12)\n\n*   Fix `ONBUILD` instruction passed to grandchildren\n\n### [Runtime](#runtime-33)\n\n*   Fix events subscription\n*   Fix /etc/hostname file with host networking\n*   Allow `-h` and `--net=none`\n*   Fix issue with hotplug devices in `--privileged`\n\n### [Client](#client-11)\n\n*   Fix artifacts with events\n*   Fix a panic with empty flags\n*   Fix `docker cp` on Mac OS X\n\n### [Miscellaneous](#miscellaneous)\n\n*   Fix compilation on Mac OS X\n*   Fix several races\n\n### [Notable features since 0.12.0](#notable-features-since-0120)\n\n*   Production support\n\n### [Notable features since 0.11.0](#notable-features-since-0110)\n\n*   40+ various improvements to stability, performance and usability\n*   New `COPY` Dockerfile instruction to allow copying a local file from the context into the container without ever extracting if the file is a tar file\n*   Inherit file permissions from the host on `ADD`\n*   New `pause` and `unpause` commands to allow pausing and unpausing of containers using cgroup freezer\n*   The `images` command has a `-f`/`--filter` option to filter the list of images\n*   Add `--force-rm` to clean up after a failed build\n*   Standardize JSON keys in Remote API to CamelCase\n*   Pull from a docker run now assumes `latest` tag if not specified\n*   Enhance security on Linux capabilities and device nodes\n\n### [Registry](#registry-1)\n\n*   Fix push and pull to private registry\n\n### [Notable features since 0.10.0](#notable-features-since-0100)\n\n*   SELinux support for mount and process labels\n*   Linked containers can be accessed by hostname\n*   Use the net `--net` flag to allow advanced network configuration such as host networking so that containers can use the host's network interfaces\n*   Add a ping endpoint to the Remote API to do healthchecks of your docker daemon\n*   Logs can now be returned with an optional timestamp\n*   Docker now works with registries that support SHA-512\n*   Multiple registry endpoints are supported to allow registry mirrors\n\n### [Builder](#builder-13)\n\n*   Fix printing multiple messages on a single line. Fixes broken output during builds.\n*   Follow symlinks inside container's root for ADD build instructions.\n*   Fix EXPOSE caching.\n\n### [Documentation](#documentation-1)\n\n*   Add the new options of `docker ps` to the documentation.\n*   Add the options of `docker restart` to the documentation.\n*   Update daemon docs and help messages for --iptables and --ip-forward.\n*   Updated apt-cacher-ng docs example.\n*   Remove duplicate description of --mtu from docs.\n*   Add missing -t and -v for `docker images` to the docs.\n*   Add fixes to the cli docs.\n*   Update libcontainer docs.\n*   Update images in docs to remove references to AUFS and LXC.\n*   Update the nodejs\\_web\\_app in the docs to use the new epel RPM address.\n*   Fix external link on security of containers.\n*   Update remote API docs.\n*   Add image size to history docs.\n*   Be explicit about binding to all interfaces in redis example.\n*   Document DisableNetwork flag in the 1.10 remote api.\n*   Document that `--lxc-conf` is lxc only.\n*   Add chef usage documentation.\n*   Add example for an image with multiple for `docker load`.\n*   Explain what `docker run -a` does in the docs.\n\n### [Contrib](#contrib-9)\n\n*   Add variable for DOCKER\\_LOGFILE to sysvinit and use append instead of overwrite in opening the logfile.\n*   Fix init script cgroup mounting workarounds to be more similar to cgroupfs-mount and thus work properly.\n*   Remove inotifywait hack from the upstart host-integration example because it's not necessary any more.\n*   Add check-config script to contrib.\n*   Fix fish shell completion.\n\n### [Hack](#hack-1)\n\n*   Clean up \"go test\" output from \"make test\" to be much more readable/scannable.\n*   Exclude more \"definitely not unit tested Go source code\" directories from hack/make/test.\n\n*   Generate md5 and sha256 hashes when building, and upload them via hack/release.sh.\n\n*   Include contributed completions in Ubuntu PPA.\n\n*   Add cli integration tests.\n\n*   Add tweaks to the hack scripts to make them simpler.\n\n### [Remote API](#remote-api-3)\n\n*   Add TLS auth support for API.\n\n*   Move git clone from daemon to client.\n\n*   Fix content-type detection in docker cp.\n\n*   Split API into 2 go packages.\n\n### [Runtime](#runtime-34)\n\n*   Support hairpin NAT without going through Docker server.\n\n*   devicemapper: succeed immediately when removing non-existent devices.\n*   devicemapper: improve handling of devicemapper devices (add per device lock, increase sleep time and unlock while sleeping).\n*   devicemapper: increase timeout in waitClose to 10 seconds.\n*   devicemapper: ensure we shut down thin pool cleanly.\n*   devicemapper: pass info, rather than hash to activateDeviceIfNeeded, deactivateDevice, setInitialized, deleteDevice.\n*   devicemapper: avoid AB-BA deadlock.\n*   devicemapper: make shutdown better/faster.\n*   improve alpha sorting in mflag.\n*   Remove manual http cookie management because the cookiejar is being used.\n*   Use BSD raw mode on Darwin. Fixes nano, tmux and others.\n*   Add FreeBSD support for the client.\n*   Merge auth package into registry.\n*   Add deprecation warning for -t on `docker pull`.\n*   Remove goroutine leak on error.\n*   Update parseLxcInfo to comply with new lxc1.0 format.\n*   Fix attach exit on darwin.\n*   Improve deprecation message.\n*   Retry to retrieve the layer metadata up to 5 times for `docker pull`.\n*   Only unshare the mount namespace for execin.\n*   Merge existing config when committing.\n*   Disable daemon startup timeout.\n*   Fix issue #4681: add loopback interface when networking is disabled.\n*   Add failing test case for issue #4681.\n*   Send SIGTERM to child, instead of SIGKILL.\n*   Show the driver and the kernel version in `docker info` even when not in debug mode.\n*   Always symlink /dev/ptmx for libcontainer. This fixes console related problems.\n*   Fix issue caused by the absence of /etc/apparmor.d.\n*   Don't leave empty cidFile behind when failing to create the container.\n*   Mount cgroups automatically if they're not mounted already.\n*   Use mock for search tests.\n*   Update to double-dash everywhere.\n*   Move .dockerenv parsing to lxc driver.\n*   Move all bind-mounts in the container inside the namespace.\n*   Don't use separate bind mount for container.\n*   Always symlink /dev/ptmx for libcontainer.\n*   Don't kill by pid for other drivers.\n*   Add initial logging to libcontainer.\n\n*   Sort by port in `docker ps`.\n\n*   Move networking drivers into runtime top level package.\n\n*   Add --no-prune to `docker rmi`.\n*   Add time since exit in `docker ps`.\n\n*   graphdriver: add build tags.\n*   Prevent allocation of previously allocated ports & prevent improve port allocation.\n\n*   Add support for --since/--before in `docker ps`.\n\n*   Clean up container stop.\n\n*   Add support for configurable dns search domains.\n\n*   Add support for relative WORKDIR instructions.\n*   Add --output flag for docker save.\n*   Remove duplication of DNS entries in config merging.\n*   Add cpuset.cpus to cgroups and native driver options.\n*   Remove docker-ci.\n*   Promote btrfs. btrfs is no longer considered experimental.\n*   Add --input flag to `docker load`.\n*   Return error when existing bridge doesn't match IP address.\n*   Strip comments before parsing line continuations to avoid interpreting instructions as comments.\n*   Fix TestOnlyLoopbackExistsWhenUsingDisableNetworkOption to ignore \"DOWN\" interfaces.\n*   Add systemd implementation of cgroups and make containers show up as systemd units.\n*   Fix commit and import when no repository is specified.\n*   Remount /var/lib/docker as --private to fix scaling issue.\n*   Use the environment's proxy when pinging the remote registry.\n*   Reduce error level from harmless errors.\n\n*   Allow --volumes-from to be individual files.\n\n*   Fix expanding buffer in StdCopy.\n*   Set error regardless of attach or stdin. This fixes #3364.\n*   Add support for --env-file to load environment variables from files.\n*   Symlink /etc/mtab and /proc/mounts.\n*   Allow pushing a single tag.\n*   Shut down containers cleanly at shutdown and wait forever for the containers to shut down. This makes container shutdown on daemon shutdown work properly via SIGTERM.\n*   Don't throw error when starting an already running container.\n*   Fix dynamic port allocation limit.\n*   remove setupDev from libcontainer.\n*   Add API version to `docker version`.\n*   Return correct exit code when receiving signal and make SIGQUIT quit without cleanup.\n*   Fix --volumes-from mount failure.\n*   Allow non-privileged containers to create device nodes.\n*   Skip login tests because of external dependency on a hosted service.\n*   Deprecate `docker images --tree` and `docker images --viz`.\n*   Deprecate `docker insert`.\n*   Include base abstraction for apparmor. This fixes some apparmor related problems on Ubuntu 14.04.\n*   Add specific error message when hitting 401 over HTTP on push.\n*   Fix absolute volume check.\n*   Remove volumes-from from the config.\n*   Move DNS options to hostconfig.\n*   Update the apparmor profile for libcontainer.\n*   Add deprecation notice for `docker commit -run`.\n\n### [Builder](#builder-14)\n\n*   Fix printing multiple messages on a single line. Fixes broken output during builds.\n\n### [Documentation](#documentation-2)\n\n*   Fix external link on security of containers.\n\n### [Contrib](#contrib-10)\n\n*   Fix init script cgroup mounting workarounds to be more similar to cgroupfs-mount and thus work properly.\n*   Add variable for DOCKER\\_LOGFILE to sysvinit and use append instead of overwrite in opening the logfile.\n\n### [Hack](#hack-2)\n\n*   Generate md5 and sha256 hashes when building, and upload them via hack/release.sh.\n\n### [Remote API](#remote-api-4)\n\n*   Fix content-type detection in `docker cp`.\n\n### [Runtime](#runtime-35)\n\n*   Use BSD raw mode on Darwin. Fixes nano, tmux and others.\n*   Only unshare the mount namespace for execin.\n*   Retry to retrieve the layer metadata up to 5 times for `docker pull`.\n*   Merge existing config when committing.\n*   Fix panic in monitor.\n*   Disable daemon startup timeout.\n*   Fix issue #4681: add loopback interface when networking is disabled.\n*   Add failing test case for issue #4681.\n*   Send SIGTERM to child, instead of SIGKILL.\n*   Show the driver and the kernel version in `docker info` even when not in debug mode.\n*   Always symlink /dev/ptmx for libcontainer. This fixes console related problems.\n*   Fix issue caused by the absence of /etc/apparmor.d.\n*   Don't leave empty cidFile behind when failing to create the container.\n*   Improve deprecation message.\n*   Fix attach exit on darwin.\n*   devicemapper: improve handling of devicemapper devices (add per device lock, increase sleep time, unlock while sleeping).\n*   devicemapper: succeed immediately when removing non-existent devices.\n*   devicemapper: increase timeout in waitClose to 10 seconds.\n*   Remove goroutine leak on error.\n*   Update parseLxcInfo to comply with new lxc1.0 format.\n\n### [Builder](#builder-15)\n\n*   Avoid extra mount/unmount during build. This fixes mount/unmount related errors during build.\n*   Add error to docker build --rm. This adds missing error handling.\n*   Forbid chained onbuild, `onbuild from` and `onbuild maintainer` triggers.\n*   Make `--rm` the default for `docker build`.\n\n### [Documentation](#documentation-3)\n\n*   Download the docker client binary for Mac over https.\n*   Update the titles of the install instructions & descriptions.\n\n*   Add instructions for upgrading boot2docker.\n*   Add port forwarding example in OS X install docs.\n\n*   Attempt to disentangle repository and registry.\n*   Update docs to explain more about `docker ps`.\n*   Update sshd example to use a Dockerfile.\n*   Rework some examples, including the Python examples.\n*   Update docs to include instructions for a container's lifecycle.\n*   Update docs documentation to discuss the docs branch.\n*   Don't skip cert check for an example & use HTTPS.\n*   Bring back the memory and swap accounting section which was lost when the kernel page was removed.\n*   Explain DNS warnings and how to fix them on systems running and using a local nameserver.\n\n### [Contrib](#contrib-11)\n\n*   Add Tanglu support for mkimage-debootstrap.\n*   Add SteamOS support for mkimage-debootstrap.\n\n### [Hack](#hack-3)\n\n*   Get package coverage when running integration tests.\n*   Remove the Vagrantfile. This is being replaced with boot2docker.\n*   Fix tests on systems where aufs isn't available.\n*   Update packaging instructions and remove the dependency on lxc.\n\n### [Remote API](#remote-api-5)\n\n*   Move code specific to the API to the api package.\n\n*   Fix header content type for the API. Makes all endpoints use proper content type.\n*   Fix registry auth & remove ping calls from CmdPush and CmdPull.\n*   Add newlines to the JSON stream functions.\n\n### [Runtime](#runtime-36)\n\n*   Do not ping the registry from the CLI. All requests to registries flow through the daemon.\n\n*   Check for nil information return in the lxc driver. This fixes panics with older lxc versions.\n*   Devicemapper: cleanups and fix for unmount. Fixes two problems which were causing unmount to fail intermittently.\n*   Devicemapper: remove directory when removing device. Directories don't get left behind when removing the device.\n\n*   Devicemapper: enable skip\\_block\\_zeroing. Improves performance by not zeroing blocks.\n\n*   Devicemapper: fix shutdown warnings. Fixes shutdown warnings concerning pool device removal.\n*   Ensure docker cp stream is closed properly. Fixes problems with files not being copied by `docker cp`.\n*   Stop making `tcp://` default to `127.0.0.1:4243` and remove the default port for tcp.\n*   Fix `--run` in `docker commit`. This makes `docker commit --run` work again.\n*   Fix custom bridge related options. This makes custom bridges work again.\n\n*   Mount-bind the PTY as container console. This allows tmux/screen to run.\n*   Add the pure Go libcontainer library to make it possible to run containers using only features of the Linux kernel.\n*   Add native exec driver which uses libcontainer and make it the default exec driver.\n\n*   Add support for handling extended attributes in archives.\n\n*   Set the container MTU to be the same as the host MTU.\n\n*   Add simple sha256 checksums for layers to speed up `docker push`.\n\n*   Improve kernel version parsing.\n*   Allow flag grouping (`docker run -it`).\n\n*   Remove chroot exec driver.\n*   Fix divide by zero to fix panic.\n*   Rewrite `docker rmi`.\n*   Fix docker info with lxc 1.0.0.\n*   Fix fedora tty with apparmor.\n\n*   Don't always append env vars, replace defaults with vars from config.\n*   Fix a goroutine leak.\n*   Switch to Go 1.2.1.\n\n*   Fix unique constraint error checks.\n\n*   Handle symlinks for Docker's data directory and for TMPDIR.\n\n*   Add deprecation warnings for flags (-flag is deprecated in favor of --flag)\n*   Add apparmor profile for the native execution driver.\n\n*   Move system specific code from archive to pkg/system.\n\n*   Fix duplicate signal for `docker run -i -t` (issue #3336).\n*   Return correct process pid for lxc.\n*   Add a -G option to specify the group which unix sockets belong to.\n\n*   Add `-f` flag to `docker rm` to force removal of running containers.\n*   Kill ghost containers and restart all ghost containers when the docker daemon restarts.\n*   Add `DOCKER_RAMDISK` environment variable to make Docker work when the root is on a ramdisk.\n\n### [Builder](#builder-16)\n\n*   Avoid extra mount/unmount during build. This removes an unneeded mount/unmount operation which was causing problems with devicemapper\n*   Fix regression with ADD of tar files. This stops Docker from decompressing tarballs added via ADD from the local file system\n*   Add error to `docker build --rm`. This adds a missing error check to ensure failures to remove containers are detected and reported\n\n### [Documentation](#documentation-4)\n\n*   Update issue filing instructions\n*   Warn against the use of symlinks for Docker's storage folder\n*   Replace the Firefox example with an IceWeasel example\n*   Rewrite the PostgreSQL example using a Dockerfile and add more details to it\n*   Improve the OS X documentation\n\n### [Remote API](#remote-api-6)\n\n*   Fix broken images API for version less than 1.7\n*   Use the right encoding for all API endpoints which return JSON\n*   Move remote api client to api/\n*   Queue calls to the API using generic socket wait\n\n### [Runtime](#runtime-37)\n\n*   Fix the use of custom settings for bridges and custom bridges\n*   Refactor the devicemapper code to avoid many mount/unmount race conditions and failures\n*   Remove two panics which could make Docker crash in some situations\n*   Don't ping registry from the CLI client\n*   Enable skip\\_block\\_zeroing for devicemapper. This stops devicemapper from always zeroing entire blocks\n*   Fix --run in `docker commit`. This makes docker commit store `--run` in the image configuration\n*   Remove directory when removing devicemapper device. This cleans up leftover mount directories\n*   Drop NET\\_ADMIN capability for non-privileged containers. Unprivileged containers can't change their network configuration\n*   Ensure `docker cp` stream is closed properly\n*   Avoid extra mount/unmount during container registration. This removes an unneeded mount/unmount operation which was causing problems with devicemapper\n*   Stop allowing tcp:// as a default tcp bin address which binds to 127.0.0.1:4243 and remove the default port\n\n*   Mount-bind the PTY as container console. This allows tmux and screen to run in a container\n\n*   Clean up archive closing. This fixes and improves archive handling\n*   Fix engine tests on systems where temp directories are symlinked\n*   Add test methods for save and load\n*   Avoid temporarily unmounting the container when restarting it. This fixes a race for devicemapper during restart\n*   Support submodules when building from a GitHub repository\n*   Quote volume path to allow spaces\n*   Fix remote tar ADD behavior. This fixes a regression which was causing Docker to extract tarballs\n\n### [Notable features since 0.7.0](#notable-features-since-070)\n\n*   Images and containers can be removed much faster\n    \n*   Building an image from source with docker build is now much faster\n    \n*   The Docker daemon starts and stops much faster\n    \n*   The memory footprint of many common operations has been reduced, by streaming files instead of buffering them in memory, fixing memory leaks, and fixing various suboptimal memory allocations\n    \n*   Several race conditions were fixed, making Docker more stable under very high concurrency load. This makes Docker more stable and less likely to crash and reduces the memory footprint of many common operations\n    \n*   All packaging operations are now built on the Go language’s standard tar implementation, which is bundled with Docker itself. This makes packaging more portable across host distributions, and solves several issues caused by quirks and incompatibilities between different distributions of tar\n    \n*   Docker can now create, remove and modify larger numbers of containers and images graciously thanks to more aggressive releasing of system resources. For example the storage driver API now allows Docker to do reference counting on mounts created by the drivers With the ongoing changes to the networking and execution subsystems of docker testing these areas have been a focus of the refactoring. By moving these subsystems into separate packages we can test, analyze, and monitor coverage and quality of these packages\n    \n*   Many components have been separated into smaller sub-packages, each with a dedicated test suite. As a result the code is better-tested, more readable and easier to change\n    \n*   The ADD instruction now supports caching, which avoids unnecessarily re-uploading the same source content again and again when it hasn’t changed\n    \n*   The new ONBUILD instruction adds to your image a “trigger” instruction to be executed at a later time, when the image is used as the base for another build\n    \n*   Docker now ships with an experimental storage driver which uses the BTRFS filesystem for copy-on-write\n    \n*   Docker is officially supported on Mac OS X\n    \n*   The Docker daemon supports systemd socket activation\n    \n\n### [Builder](#builder-17)\n\n*   Do not follow symlink outside of build context\n\n### [Runtime](#runtime-38)\n\n*   Remount bind mounts when ro is specified\n\n*   Use https for fetching docker version\n\n### [Other](#other-1)\n\n*   Inline the test.docker.io fingerprint\n*   Add ca-certificates to packaging documentation\n\n### [Builder](#builder-18)\n\n*   Disable compression for build. More space usage but a much faster upload\n\n*   Fix ADD caching for certain paths\n*   Do not compress archive from git build\n\n### [Documentation](#documentation-5)\n\n*   Fix error in GROUP add example\n\n*   Make sure the GPG fingerprint is inline in the documentation\n*   Give more specific advice on setting up signing of commits for DCO\n\n### [Runtime](#runtime-39)\n\n*   Fix misspelled container names\n*   Do not add hostname when networking is disabled\n\n*   Return most recent image from the cache by date\n\n*   Return all errors from docker wait\n\n*   Add Content-Type Header \"application/json\" to GET /version and /info responses\n\n### [Other](#other-2)\n\n*   Update DCO to version 1.1\n\n*   Update Makefile to use \"docker:GIT\\_BRANCH\" as the generated image name\n\n*   Update Travis to check for new 1.1 DCO version\n\n### [Builder](#builder-19)\n\n*   Fix ADD caching issue with . prefixed path\n*   Fix docker build on devicemapper by reverting sparse file tar option\n*   Fix issue with file caching and prevent wrong cache hit\n\n*   Use same error handling while unmarshalling CMD and ENTRYPOINT\n\n### [Documentation](#documentation-6)\n\n*   Simplify and streamline Amazon Quickstart\n*   Install instructions use unprefixed Fedora image\n*   Update instructions for mtu flag for Docker on GCE\n\n*   Add Ubuntu Saucy to installation\n\n*   Fix for wrong version warning on master instead of latest\n\n### [Runtime](#runtime-40)\n\n*   Only get the image's rootfs when we need to calculate the image size\n*   Correctly handle unmapping UDP ports\n\n*   Make CopyFileWithTar use a pipe instead of a buffer to save memory on docker build\n\n*   Fix login message to say pull instead of push\n*   Fix \"docker load\" help by removing \"SOURCE\" prompt and mentioning STDIN\n\n*   Make blank -H option default to the same as no -H was sent\n*   Extract cgroups utilities to own submodule\n\n### [Other](#other-3)\n\n*   Add Travis CI configuration to validate DCO and gofmt requirements\n*   Add Developer Certificate of Origin Text\n\n*   Upgrade VBox Guest Additions\n*   Check standalone header when pinging a registry server\n\n### [Builder](#builder-20)\n\n*   Update ADD to use the image cache, based on a hash of the added content\n\n*   Add error message for empty Dockerfile\n\n### [Documentation](#documentation-7)\n\n*   Fix outdated link to the \"Introduction\" on [www.docker.io](https://www.docker.io/)\n\n*   Update the docs to get wider when the screen does\n\n*   Add information about needing to install LXC when using raw binaries\n\n*   Update Fedora documentation to disentangle the docker and docker.io conflict\n*   Add a note about using the new `-mtu` flag in several GCE zones\n\n*   Add FrugalWare installation instructions\n*   Add a more complete example of `docker run`\n\n*   Fix API documentation for creating and starting Privileged containers\n*   Add missing \"name\" parameter documentation on \"/containers/create\"\n\n*   Add a mention of `lxc-checkconfig` as a way to check for some of the necessary kernel configuration\n\n*   Update the 1.8 API documentation with some additions that were added to the docs for 1.7\n\n### [Hack](#hack-4)\n\n*   Add missing libdevmapper dependency to the packagers documentation\n\n*   Update minimum Go requirement to a hard line at Go 1.2+\n*   Many minor improvements to the Vagrantfile\n\n*   Add ability to customize dockerinit search locations when compiling (to be used very sparingly only by packagers of platforms who require a nonstandard location)\n*   Add coverprofile generation reporting\n\n*   Add `-a` to our Go build flags, removing the need for recompiling the stdlib manually\n\n*   Update Dockerfile to be more canonical and have less spurious warnings during build\n\n*   Fix some miscellaneous `docker pull` progress bar display issues\n\n*   Migrate more miscellaneous packages under the \"pkg\" folder\n*   Update TextMate highlighting to automatically be enabled for files named \"Dockerfile\"\n*   Reorganize syntax highlighting files under a common \"contrib/syntax\" directory\n*   Update install.sh script ( [https://get.docker.io/](https://get.docker.io/)) to not fail if busybox fails to download or run at the end of the Ubuntu/Debian installation\n*   Add support for container names in bash completion\n\n### [Packaging](#packaging-2)\n\n*   Add an official Docker client binary for Darwin (Mac OS X)\n\n*   Remove empty \"Vendor\" string and added \"License\" on deb package\n\n*   Add a stubbed version of \"/etc/default/docker\" in the deb package\n\n### [Runtime](#runtime-41)\n\n*   Update layer application to extract tars in place, avoiding file churn while handling whiteouts\n\n*   Fix permissiveness of mtime comparisons in tar handling (since GNU tar and Go tar do not yet support sub-second mtime precision)\n\n*   Reimplement `docker top` in pure Go to work more consistently, and even inside Docker-in-Docker (thus removing the shell injection vulnerability present in some versions of `lxc-ps`)\n\n*   Update `-H unix://` to work similarly to `-H tcp://` by inserting the default values for missing portions\n\n*   Fix more edge cases regarding dockerinit and deleted or replaced docker or dockerinit files\n\n*   Update container name validation to include '.'\n\n*   Fix use of a symlink or non-absolute path as the argument to `-g` to work as expected\n\n*   Update to handle external mounts outside of LXC, fixing many small mounting quirks and making future execution backends and other features simpler\n*   Update to use proper box-drawing characters everywhere in `docker images -tree`\n*   Move MTU setting from LXC configuration to directly use netlink\n*   Add `-S` option to external tar invocation for more efficient spare file handling\n\n*   Add arch/os info to User-Agent string, especially for registry requests\n*   Add `-mtu` option to Docker daemon for configuring MTU\n\n*   Fix `docker build` to exit with a non-zero exit code on error\n\n*   Add `DOCKER_HOST` environment variable to configure the client `-H` flag without specifying it manually for every invocation\n\n### [Runtime](#runtime-42)\n\n*   Validate container names on creation with standard regex\n\n*   Increase maximum image depth to 127 from 42\n*   Continue to move api endpoints to the job api\n\n*   Add -bip flag to allow specification of dynamic bridge IP via CIDR\n\n*   Allow bridge creation when ipv6 is not enabled on certain systems\n\n*   Set hostname and IP address from within dockerinit\n*   Drop capabilities from within dockerinit\n\n*   Fix volumes on host when symlink is present the image\n*   Prevent deletion of image if ANY container is depending on it even if the container is not running\n\n*   Update docker push to use new progress display\n*   Use os.Lstat to allow mounting unix sockets when inspecting volumes\n\n*   Adjust handling of inactive user login\n*   Add missing defines in devicemapper for older kernels\n*   Allow untag operations with no container validation\n*   Add auth config to docker build\n\n### [Documentation](#documentation-8)\n\n*   Add more information about Docker logging\n\n*   Add RHEL documentation\n\n*   Add a direct example for changing the CMD that is run in a container\n*   Update Arch installation documentation\n\n*   Add section on Trusted Builds\n*   Add Network documentation page\n\n### [Other](#other-4)\n\n*   Add new cover bundle for providing code coverage reporting\n\n*   Separate integration tests in bundles\n*   Make Tianon the hack maintainer\n*   Update mkimage-debootstrap with more tweaks for keeping images small\n*   Use https to get the install script\n*   Remove vendored dotcloud/tar now that Go 1.2 has been released\n\n### [Documentation](#documentation-9)\n\n*   Add @SvenDowideit as documentation maintainer\n*   Add links example\n*   Add documentation regarding ambassador pattern\n*   Add Google Cloud Platform docs\n*   Add dockerfile best practices\n\n*   Update doc for RHEL\n*   Update doc for registry\n*   Update Postgres examples\n*   Update doc for Ubuntu install\n*   Improve remote api doc\n\n### [Runtime](#runtime-43)\n\n*   Add hostconfig to docker inspect\n*   Implement `docker log -f` to stream logs\n*   Add env variable to disable kernel version warning\n*   Add -format to `docker inspect`\n*   Support bind-mount for files\n\n*   Fix bridge creation on RHEL\n*   Fix image size calculation\n*   Make sure iptables are called even if the bridge already exists\n*   Fix issue with stderr only attach\n*   Remove init layer when destroying a container\n*   Fix same port binding on different interfaces\n*   `docker build` now returns the correct exit code\n*   Fix `docker port` to display correct port\n*   `docker build` now check that the dockerfile exists client side\n*   `docker attach` now returns the correct exit code\n*   Remove the name entry when the container does not exist\n\n### [Registry](#registry-2)\n\n*   Improve progress bars, add ETA for downloads\n*   Simultaneous pulls now waits for the first to finish instead of failing\n\n*   Tag only the top-layer image when pushing to registry\n*   Fix issue with offline image transfer\n*   Fix issue preventing using ':' in password for registry\n\n### [Other](#other-5)\n\n*   Add pprof handler for debug\n*   Create a Makefile\n\n*   Use stdlib tar that now includes fix\n*   Improve make.sh test script\n*   Handle SIGQUIT on the daemon\n*   Disable verbose during tests\n*   Upgrade to go1.2 for official build\n*   Improve unit tests\n*   The test suite now runs all tests even if one fails\n*   Refactor C in Go (Devmapper)\n\n*   Fix OS X compilation\n\n### [Notable features since 0.6.0](#notable-features-since-060)\n\n*   Storage drivers: choose from aufs, device-mapper, or vfs.\n*   Standard Linux support: docker now runs on unmodified Linux kernels and all major distributions.\n*   Links: compose complex software stacks by connecting containers to each other.\n*   Container naming: organize your containers by giving them memorable names.\n*   Advanced port redirects: specify port redirects per interface, or keep sensitive ports private.\n*   Offline transfer: push and pull images to the filesystem without losing information.\n*   Quality: numerous bugfixes and small usability improvements. Significant increase in test coverage.\n\n### [Runtime](#runtime-44)\n\n*   Improve stability, fixes some race conditions\n*   Skip the volumes mounted when deleting the volumes of container.\n*   Fix layer size computation: handle hard links correctly\n*   Use the work Path for docker cp CONTAINER:PATH\n*   Fix tmp dir never cleanup\n*   Speedup docker ps\n*   More informative error message on name collisions\n*   Fix nameserver regex\n*   Always return long id's\n*   Fix container restart race condition\n*   Keep published ports on docker stop;docker start\n*   Fix container networking on Fedora\n*   Correctly express \"any address\" to iptables\n*   Fix network setup when reconnecting to ghost container\n*   Prevent deletion if image is used by a running container\n*   Lock around read operations in graph\n\n### [RemoteAPI](#remoteapi)\n\n*   Return full ID on docker rmi\n\n### [Client](#client-12)\n\n*   Add -tree option to images\n*   Offline image transfer\n\n*   Exit with status 2 on usage error and display usage on stderr\n*   Do not forward SIGCHLD to container\n*   Use string timestamp for docker events -since\n\n### [Other](#other-6)\n\n*   Update to go 1.2rc5\n\n*   Add /etc/default/docker support to upstart\n\n### [Runtime](#runtime-45)\n\n*   Ensure container name on register\n*   Fix regression in /etc/hosts\n\n*   Add lock around write operations in graph\n\n*   Check if port is valid\n*   Fix restart runtime error with ghost container networking\n\n*   Add some more colors and animals to increase the pool of generated names\n\n*   Fix issues in docker inspect\n\n*   Escape apparmor confinement\n*   Set environment variables using a file.\n\n*   Prevent docker insert to erase something\n\n*   Prevent DNS server conflicts in CreateBridgeIface\n*   Validate bind mounts on the server side\n*   Use parent image config in docker build\n\n*   Fix regression in /etc/hosts\n\n### [Client](#client-13)\n\n*   Add -P flag to publish all exposed ports\n*   Add -notrunc and -q flags to docker history\n\n*   Fix docker commit, tag and import usage\n\n*   Add stars, trusted builds and library flags in docker search\n\n*   Fix docker logs with tty\n\n### [RemoteAPI](#remoteapi-1)\n\n*   Make /events API send headers immediately\n*   Do not split last column docker top\n\n*   Add size to history\n\n### [Other](#other-7)\n\n*   Contrib: Desktop integration. Firefox usecase.\n*   Dockerfile: bump to go1.2rc3\n\n### [Runtime](#runtime-46)\n\n*   Containers can now be named\n*   Containers can now be linked together for service discovery\n*   'run -a', 'start -a' and 'attach' can forward signals to the container for better integration with process supervisors\n*   Automatically start crashed containers after a reboot\n*   Expose IP, port, and proto as separate environment vars for container links\n\n*   Allow ports to be published to specific ips\n*   Prohibit inter-container communication by default\n\n*   Ignore ErrClosedPipe for stdin in Container.Attach\n*   Remove unused field kernelVersion\n\n*   Fix issue when mounting subdirectories of /mnt in container\n\n*   Fix untag during removal of images\n\n*   Check return value of syscall.Chdir when changing working directory inside dockerinit\n\n### [Client](#client-14)\n\n*   Only pass stdin to hijack when needed to avoid closed pipe errors\n\n*   Use less reflection in command-line method invocation\n\n*   Monitor the tty size after starting the container, not prior\n*   Remove useless os.Exit() calls after log.Fatal\n\n### [Hack](#hack-5)\n\n*   Add initial init scripts library and a safer Ubuntu packaging script that works for Debian\n\n*   Add -p option to invoke debootstrap with http\\_proxy\n\n*   Update install.sh with $sh\\_c to get sudo/su for modprobe\n\n*   Update all the mkimage scripts to use --numeric-owner as a tar argument\n*   Update hack/release.sh process to automatically invoke hack/make.sh and bail on build and test issues\n\n### [Other](#other-8)\n\n*   Documentation: Fix the flags for nc in example\n*   Testing: Remove warnings and prevent mount issues\n\n*   Testing: Change logic for tty resize to avoid warning in tests\n*   Builder: Fix race condition in docker build with verbose output\n*   Registry: Fix content-type for PushImageJSONIndex method\n\n*   Contrib: Improve helper tools to generate debian and Arch linux server images\n\n### [Runtime](#runtime-47)\n\n*   Add cleanup of container when Start() fails\n\n*   Add better comments to utils/stdcopy.go\n*   Add utils.Errorf for error logging\n\n*   Add -rm to docker run for removing a container on exit\n\n*   Remove error messages which are not actually errors\n*   Fix `docker rm` with volumes\n*   Fix some error cases where an HTTP body might not be closed\n*   Fix panic with wrong dockercfg file\n*   Fix the attach behavior with -i\n\n*   Record termination time in state.\n\n*   Use empty string so TempDir uses the OS's temp dir automatically\n*   Make sure to close the network allocators\n\n*   Autorestart containers by default\n\n*   Bump vendor kr/pty to commit 3b1f6487b `(syscall.O_NOCTTY)`\n*   lxc: Allow set\\_file\\_cap capability in container\n\n*   Move run -rm to the cli only\n\n*   Split stdout stderr\n*   Always create a new session for the container\n\n### [Testing](#testing)\n\n*   Add aggregated docker-ci email report\n*   Add cleanup to remove leftover containers\n\n*   Add nightly release to docker-ci\n*   Add more tests around auth.ResolveAuthConfig\n\n*   Remove a few errors in tests\n*   Catch errClosing error when TCP and UDP proxies are terminated\n\n*   Only run certain tests with TESTFLAGS='-run TestName' make.sh\n*   Prevent docker-ci to test closing PRs\n*   Replace panic by log.Fatal in tests\n\n*   Increase TestRunDetach timeout\n\n### [Documentation](#documentation-10)\n\n*   Add initial draft of the Docker infrastructure doc\n*   Add devenvironment link to CONTRIBUTING.md\n*   Add `apt-get install curl` to Ubuntu docs\n*   Add explanation for export restrictions\n*   Add .dockercfg doc\n*   Remove Gentoo install notes about #1422 workaround\n*   Fix help text for -v option\n*   Fix Ping endpoint documentation\n\n*   Fix parameter names in docs for ADD command\n*   Fix ironic typo in changelog\n\n*   Various command fixes in postgres example\n*   Document how to edit and release docs\n\n*   Minor updates to `postgresql_service.rst`\n\n*   Clarify LGTM process to contributors\n\n*   Corrected error in the package name\n\n*   Document what `vagrant up` is actually doing\n\n*   improve doc search results\n\n*   Cleanup whitespace in API 1.5 docs\n*   use angle brackets in MAINTAINER example email\n*   Update archlinux.rst\n\n*   Changes to a new style for the docs. Includes version switcher.\n\n*   Formatting, add information about multiline json\n*   Improve registry and index REST API documentation\n\n*   Replace deprecated upgrading reference to docker-latest.tgz, which hasn't been updated since 0.5.3\n\n*   Update Gentoo installation documentation now that we're in the portage tree proper\n*   Cleanup and reorganize docs and tooling for contributors and maintainers\n\n*   Minor spelling correction of protocoll -> protocol\n\n### [Contrib](#contrib-12)\n\n*   Add vim syntax highlighting for Dockerfiles from @honza\n*   Add mkimage-arch.sh\n*   Reorganize contributed completion scripts to add zsh completion\n\n### [Hack](#hack-6)\n\n*   Add vagrant user to the docker group\n*   Add proper bash completion for \"docker push\"\n*   Add xz utils as a runtime dep\n*   Add cleanup/refactor portion of #2010 for hack and Dockerfile updates\n\n*   Add contrib/mkimage-centos.sh back (from #1621), and associated documentation link\n\n*   Add several of the small make.sh fixes from #1920, and make the output more consistent and contributor-friendly\n\n*   Add @tianon to hack/MAINTAINERS\n\n*   Improve network performance for VirtualBox\n*   Revamp install.sh to be usable by more people, and to use official install methods whenever possible (apt repo, portage tree, etc.)\n\n*   Fix contrib/mkimage-debian.sh apt caching prevention\n\n*   Add Dockerfile.tmLanguage to contrib\n\n*   Configured FPM to make /etc/init/docker.conf a config file\n*   Enable SSH Agent forwarding in Vagrant VM\n*   Several small tweaks/fixes for contrib/mkimage-debian.sh\n\n### [Other](#other-9)\n\n*   Builder: Abort build if mergeConfig returns an error and fix duplicate error message\n*   Packaging: Remove deprecated packaging directory\n*   Registry: Use correct auth config when logging in.\n*   Registry: Fix the error message so it is the same as the regex\n\n### [Packaging](#packaging-3)\n\n*   Add 'docker' group on install for ubuntu package\n*   Update tar vendor dependency\n*   Download apt key over HTTPS\n\n### [Runtime](#runtime-48)\n\n*   Only copy and change permissions on non-bindmount volumes\n\n*   Allow multiple volumes-from\n\n*   Fix HTTP imports from STDIN\n\n### [Documentation](#documentation-11)\n\n*   Update section on extracting the docker binary after build\n*   Update development environment docs for new build process\n*   Remove 'base' image from documentation\n\n### [Other](#other-10)\n\n*   Client: Fix detach issue\n*   Registry: Update regular expression to match index\n\n### [Runtime](#runtime-49)\n\n*   Add domainname support\n*   Implement image filtering with path.Match\n\n*   Remove unnecessary warnings\n*   Remove os/user dependency\n*   Only mount the hostname file when the config exists\n*   Handle signals within the `docker login` command\n\n*   UID and GID are now also applied to volumes\n*   `docker start` set error code upon error\n*   `docker run` set the same error code as the process started\n\n### [Builder](#builder-21)\n\n*   Add -rm option in order to remove intermediate containers\n\n*   Allow multiline for the RUN instruction\n\n### [Registry](#registry-3)\n\n*   Implement login with private registry\n\n*   Fix push issues\n\n### [Other](#other-11)\n\n*   Hack: Vendor all dependencies\n\n*   Remote API: Bump to v1.5\n*   Packaging: Break down hack/make.sh into small scripts, one per 'bundle': test, binary, ubuntu etc.\n*   Documentation: General improvements\n\n### [Registry](#registry-4)\n\n*   Pass \"meta\" headers in API calls to the registry\n\n### [Packaging](#packaging-4)\n\n*   Use correct upstart script with new build tool\n*   Use libffi-dev, don't build it from sources\n*   Remove duplicate mercurial install command\n\n### [Runtime](#runtime-50)\n\n*   Add lxc-conf flag to allow custom lxc options\n*   Add an option to set the working directory\n\n*   Add Image name to LogEvent tests\n\n*   Add -privileged flag and relevant tests, docs, and examples\n\n*   Add websocket support to /container//attach/ws\n*   Add warning when net.ipv4.ip\\_forwarding = 0\n*   Add hostname to environment\n*   Add last stable version in `docker version`\n\n*   Fix race conditions in parallel pull\n*   Fix Graph ByParent() to generate list of child images per parent image.\n*   Fix typo: fmt.Sprint -> fmt.Sprintf\n*   Fix small \\\\n error un docker build\n\n*   Fix to \"Inject dockerinit at /.dockerinit\"\n*   Fix #910. print user name to docker info output\n*   Use Go 1.1.2 for dockerbuilder\n*   Use ranged for loop on channels\n\n*   Use utils.ParseRepositoryTag instead of strings.Split(name, \":\") in server.ImageDelete\n*   Improve CMD, ENTRYPOINT, and attach docs.\n*   Improve connect message with socket error\n*   Load authConfig only when needed and fix useless WARNING\n*   Show tag used when image is missing\n\n*   Apply volumes-from before creating volumes\n\n*   Make docker run handle SIGINT/SIGTERM\n*   Prevent crash when .dockercfg not readable\n*   Install script should be fetched over https, not http.\n\n*   API, issue 1471: Use groups for socket permissions\n\n*   Correctly detect IPv4 forwarding\n\n*   Mount /dev/shm as a tmpfs\n\n*   Switch from http to https for get.docker.io\n\n*   Let userland proxy handle container-bound traffic\n*   Update the Docker CLI to specify a value for the \"Host\" header.\n\n*   Change network range to avoid conflict with EC2 DNS\n*   Reduce connect and read timeout when pinging the registry\n\n*   Parallel pull\n\n*   Handle ip route showing mask-less IP addresses\n\n*   Allow ENTRYPOINT without CMD\n\n*   Always consider localhost as a domain name when parsing the FQN repos name\n\n*   Refactor checksum\n\n### [Documentation](#documentation-12)\n\n*   Add MongoDB image example\n*   Add instructions for creating and using the docker group\n*   Add sudo to examples and installation to documentation\n*   Add ufw doc\n*   Add a reference to ps -a\n*   Add information about Docker's high level tools over LXC.\n*   Fix typo in docs for docker run -dns\n*   Fix a typo in the ubuntu installation guide\n*   Fix to docs regarding adding docker groups\n*   Update default -H docs\n*   Update readme with dependencies for building\n*   Update amazon.rst to explain that Vagrant is not necessary for running Docker on ec2\n*   PostgreSQL service example in documentation\n*   Suggest installing linux-headers by default.\n*   Change the twitter handle\n*   Clarify Amazon EC2 installation\n*   'Base' image is deprecated and should no longer be referenced in the docs.\n*   Move note about officially supported kernel\n\n*   Solved the logo being squished in Safari\n\n### [Builder](#builder-22)\n\n*   Add USER instruction do Dockerfile\n*   Add workdir support for the Buildfile\n\n*   Add no cache for docker build\n\n*   Fix docker build and docker events output\n*   Only count known instructions as build steps\n*   Make sure ENV instruction within build perform a commit each time\n*   Forbid certain paths within docker build ADD\n*   Repository name (and optionally a tag) in build usage\n*   Make sure ADD will create everything in 0755\n\n### [Remote API](#remote-api-7)\n\n*   Sort Images by most recent creation date.\n*   Reworking opaque requests in registry module\n*   Add image name in /events\n*   Use mime pkg to parse Content-Type\n*   650 http utils and user agent field\n\n### [Hack](#hack-7)\n\n*   Bash Completion: Limit commands to containers of a relevant state\n\n*   Add docker dependencies coverage testing into docker-ci\n\n### [Packaging](#packaging-5)\n\n*   Docker-brew 0.5.2 support and memory footprint reduction\n\n*   Add new docker dependencies into docker-ci\n\n*   Revert \"docker.upstart: avoid spawning a `sh` process\"\n\n*   Docker-brew and Docker standard library\n*   Release docker with docker\n\n*   Fix the upstart script generated by get.docker.io\n*   Enabled the docs to generate manpages.\n*   Revert Bind daemon to 0.0.0.0 in Vagrant.\n\n### [Register](#register)\n\n*   Improve auth push\n*   Registry unit tests + mock registry\n\n### [Tests](#tests)\n\n*   Improve TestKillDifferentUser to prevent timeout on buildbot\n\n*   Fix typo in TestBindMounts (runContainer called without image)\n\n*   Improve TestGetContainersTop so it does not rely on sleep\n*   Relax the lo interface test to allow iface index != 1\n*   Add registry functional test to docker-ci\n*   Add some tests in server and utils\n\n### [Other](#other-12)\n\n*   Contrib: bash completion script\n*   Client: Add docker cp command and copy api endpoint to copy container files/folders to the host\n*   Don't read from stdout when only attached to stdin\n\n### [Runtime](#runtime-51)\n\n*   Use docker group for socket permissions\n\n*   Spawn shell within upstart script\n*   Handle ip route showing mask-less IP addresses\n*   Add hostname to environment\n\n### [Builder](#builder-23)\n\n*   Make sure ENV instruction within build perform a commit each time\n\n*   Builder: Forbid certain paths within docker build ADD\n\n*   Runtime: Change network range to avoid conflict with EC2 DNS\n\n*   API: Change daemon to listen on unix socket by default\n\n### [Runtime](#runtime-52)\n\n*   Add `ps` args to `docker top`\n*   Add support for container ID files (pidfile like)\n*   Add container=lxc in default env\n*   Support networkless containers with `docker run -n` and `docker -d -b=none`\n\n*   Stdout/stderr logs are now stored in the same file as JSON\n*   Allocate a /16 IP range by default, with fallback to /24. Try 12 ranges instead of 3.\n*   Change .dockercfg format to json and support multiple auth remote\n\n*   Do not override volumes from config\n*   Fix issue with EXPOSE override\n\n### [API](#api)\n\n*   Docker client now sets useragent (RFC 2616)\n*   Add /events endpoint\n\n### [Builder](#builder-24)\n\n*   ADD command now understands URLs\n*   CmdAdd and CmdEnv now respect Dockerfile-set ENV variables\n\n*   Create directories with 755 instead of 700 within ADD instruction\n\n### [Hack](#hack-8)\n\n*   Simplify unit tests with helpers\n*   Improve docker.upstart event\n*   Add coverage testing into docker-ci\n\n### [Runtime](#runtime-53)\n\n*   List all processes running inside a container with 'docker top'\n*   Host directories can be mounted as volumes with 'docker run -v'\n*   Containers can expose public UDP ports (eg, '-p 123/udp')\n*   Optionally specify an exact public port (eg. '-p 80:4500')\n\n*   'docker login' supports additional options\n\n*   Don't save a container's hostname when committing an image.\n\n### [Registry](#registry-5)\n\n*   New image naming scheme inspired by Go packaging convention allows arbitrary combinations of registries\n\n*   Fix issues when uploading images to a private registry\n\n### [Builder](#builder-25)\n\n*   ENTRYPOINT instruction sets a default binary entry point to a container\n*   VOLUME instruction marks a part of the container as persistent data\n\n*   'docker build' displays the full output of a build by default\n\n*   Builder: New build operation ENTRYPOINT adds an executable entry point to the container. - Runtime: Fix a bug which caused 'docker run -d' to no longer print the container ID.\n\n*   Tests: Fix issues in the test suite\n\n### [Remote API](#remote-api-8)\n\n*   The progress bar updates faster when downloading and uploading large files\n\n*   Fix a bug in the optional unix socket transport\n\n### [Runtime](#runtime-54)\n\n*   Improve detection of kernel version\n\n*   Host directories can be mounted as volumes with 'docker run -b'\n\n*   fix an issue when only attaching to stdin\n\n*   Use 'tar --numeric-owner' to avoid uid mismatch across multiple hosts\n\n### [Hack](#hack-9)\n\n*   Improve test suite and dev environment\n*   Remove dependency on unit tests on 'os/user'\n\n### [Other](#other-13)\n\n*   Registry: easier push/pull to a custom registry\n\n*   Documentation: add terminology section\n\n*   Runtime: fix a bug which caused creation of empty images (and volumes) to crash.\n\n*   Builder: 'docker build git://URL' fetches and builds a remote git repository\n\n*   Runtime: 'docker ps -s' optionally prints container size\n*   Tests: improved and simplified\n\n*   Runtime: fix a regression introduced in 0.4.3 which caused the logs command to fail.\n*   Builder: fix a regression when using ADD with single regular file.\n\n*   Builder: fix a regression introduced in 0.4.3 which caused builds to fail on new clients.\n\n### [Builder](#builder-26)\n\n*   ADD of a local file will detect tar archives and unpack them\n\n*   ADD improvements: use tar for copy + automatically unpack local archives\n*   ADD uses tar/untar for copies instead of calling 'cp -ar'\n*   Fix the behavior of ADD to be (mostly) reverse-compatible, predictable and well-documented.\n\n*   Fix a bug which caused builds to fail if ADD was the first command\n\n*   Nicer output for 'docker build'\n\n### [Runtime](#runtime-55)\n\n*   Remove bsdtar dependency\n*   Add unix socket and multiple -H support\n*   Prevent rm of running containers\n*   Use go1.1 cookiejar\n\n*   Fix issue detaching from running TTY container\n*   Forbid parallel push/pull for a single image/repo. Fixes `#311`\n*   Fix race condition within Run command when attaching.\n\n### [Client](#client-15)\n\n*   HumanReadable ProgressBar sizes in pull\n*   Fix docker version's git commit output\n\n### [API](#api-1)\n\n*   Send all tags on History API call\n*   Add tag lookup to history command. Fixes #882\n\n### [Documentation](#documentation-13)\n\n*   Fix missing command in irc bouncer example\n\n*   Packaging: Bumped version to work around an Ubuntu bug\n\n### [Remote Api](#remote-api-9)\n\n*   Add flag to enable cross domain requests\n*   Add images and containers sizes in docker ps and docker images\n\n### [Runtime](#runtime-56)\n\n*   Configure dns configuration host-wide with 'docker -d -dns'\n*   Detect faulty DNS configuration and replace it with a public default\n*   Allow docker run :\n*   You can now specify public port (ex: -p 80:4500)\n\n*   Improve image removal to garbage-collect unreferenced parents\n\n### [Client](#client-16)\n\n*   Allow multiple params in inspect\n*   Print the container id before the hijack in `docker run`\n\n### [Registry](#registry-6)\n\n*   Add regexp check on repo's name\n*   Move auth to the client\n\n*   Remove login check on pull\n\n### [Other](#other-14)\n\n*   Vagrantfile: Add the rest api port to vagrantfile's port\\_forward\n*   Upgrade to Go 1.1\n\n*   Builder: don`t ignore last line in Dockerfile when it doesn`t end with \\\\n\n\n### [Builder](#builder-27)\n\n*   Introducing Builder\n*   'docker build' builds a container, layer by layer, from a source repository containing a Dockerfile\n\n### [Remote API](#remote-api-10)\n\n*   Introducing Remote API\n*   control Docker programmatically using a simple HTTP/json API\n\n### [Runtime](#runtime-57)\n\n*   Various reliability and usability improvements\n\n### [Builder](#builder-28)\n\n*   'docker build' builds a container, layer by layer, from a source repository containing a Dockerfile\n*   'docker build -t FOO' applies the tag FOO to the newly built container.\n\n### [Runtime](#runtime-58)\n\n*   Interactive TTYs correctly handle window resize\n\n*   Fix how configuration is merged between layers\n\n### [Remote API](#remote-api-11)\n\n*   Split stdout and stderr on 'docker run'\n*   Optionally listen on a different IP and port (use at your own risk)\n\n### [Documentation](#documentation-14)\n\n*   Improve install instructions.\n\n*   Registry: Fix push regression\n*   Various bugfixes\n\n### [Registry](#registry-7)\n\n*   Improve the checksum process\n*   Use the size to have a good progress bar while pushing\n*   Use the actual archive if it exists in order to speed up the push\n\n*   Fix error 400 on push\n\n### [Runtime](#runtime-59)\n\n*   Store the actual archive on commit\n\n### [Builder](#builder-29)\n\n*   Implement the autorun capability within docker builder\n*   Add caching to docker builder\n*   Add support for docker builder with native API as top level command\n*   Implement ENV within docker builder\n\n*   Check the command existence prior create and add Unit tests for the case\n\n*   use any whitespaces instead of tabs\n\n### [Runtime](#runtime-60)\n\n*   Add go version to debug infos\n\n*   Kernel version - don't show the dash if flavor is empty\n\n### [Registry](#registry-8)\n\n*   Add docker search top level command in order to search a repository\n\n*   Fix pull for official images with specific tag\n*   Fix issue when login in with a different user and trying to push\n\n*   Improve checksum - async calculation\n\n### [Images](#images)\n\n*   Output graph of images to dot (graphviz)\n\n*   Fix ByParent function\n\n### [Documentation](#documentation-15)\n\n*   New introduction and high-level overview\n*   Add the documentation for docker builder\n\n*   CSS fix for docker documentation to make REST API docs look better.\n*   Fix CouchDB example page header mistake\n*   Fix README formatting\n\n*   Update [www.docker.io](https://www.docker.io/) website.\n\n### [Other](#other-15)\n\n*   Website: new high-level overview\n\n*   Makefile: Swap \"go get\" for \"go get -d\", especially to compile on go1.1rc\n\n*   Packaging: packaging ubuntu; issue #510: Use golang-stable PPA package to build docker\n\n### [Runtime](#runtime-61)\n\n*   Fix the command existence check\n*   strings.Split may return an empty string on no match\n*   Fix an index out of range crash if cgroup memory is not\n\n### [Documentation](#documentation-16)\n\n*   Various improvements\n\n*   New example: sharing data between 2 couchdb databases\n\n### [Other](#other-16)\n\n*   Vagrant: Use only one deb line in /etc/apt\n\n*   Registry: Implement the new registry\n\n*   Support for data volumes ('docker run -v=PATH')\n*   Share data volumes between containers ('docker run -volumes-from')\n*   Improve documentation\n\n*   Upgrade to Go 1.0.3\n*   Various upgrades to the dev environment for contributors\n\n*   'docker commit -run' bundles a layer with default runtime options: command, ports etc.\n\n*   Improve install process on Vagrant\n\n*   New Dockerfile operation: \"maintainer\"\n*   New Dockerfile operation: \"expose\"\n*   New Dockerfile operation: \"cmd\"\n*   Contrib script to build a Debian base layer\n*   'docker -d -r': restart crashed containers at daemon startup\n\n*   Runtime: improve test coverage\n\n*   Runtime: ghost containers can be killed and waited for\n\n*   Documentation: update install instructions\n\n*   Packaging: fix Vagrantfile\n*   Development: automate releasing binaries and ubuntu packages\n\n*   Add a changelog\n\n*   Various bugfixes\n\n*   Dynamically detect cgroup capabilities\n*   Issue stability warning on kernels <3.8\n*   'docker push' buffers on disk instead of memory\n*   Fix 'docker diff' for removed files\n*   Fix 'docker stop' for ghost containers\n*   Fix handling of pidfile\n*   Various bugfixes and stability improvements\n\n*   Container ports are available on localhost\n*   'docker ps' shows allocated TCP ports\n*   Contributors can run 'make hack' to start a continuous integration VM\n*   Streamline ubuntu packaging & uploading\n*   Various bugfixes and stability improvements\n\n*   Record the author an image with 'docker commit -author'\n\n*   Disable standalone mode\n*   Use a custom DNS resolver with 'docker -d -dns'\n*   Detect ghost containers\n*   Improve diagnosis of missing system capabilities\n*   Allow disabling memory limits at compile time\n*   Add debian packaging\n*   Documentation: installing on Arch Linux\n*   Documentation: running Redis on docker\n*   Fix lxc 0.9 compatibility\n*   Automatically load aufs module\n*   Various bugfixes and stability improvements\n\n*   Full support for TTY emulation\n*   Detach from a TTY session with the escape sequence `C-p C-q`\n*   Various bugfixes and stability improvements\n*   Minor UI improvements\n*   Automatically create our own bridge interface 'docker0'\n\n*   Choose TCP frontend port with '-p :PORT'\n*   Layer format is versioned\n*   Major reliability improvements to the process manager\n*   Various bugfixes and stability improvements\n\n*   Set container hostname with 'docker run -h'\n*   Selective attach at run with 'docker run -a \\[stdin\\[,stdout\\[,stderr\\]\\]\\]'\n*   Various bugfixes and stability improvements\n*   UI polish\n*   Progress bar on push/pull\n*   Use XZ compression by default\n*   Make IP allocator lazy\n\n*   Display shorthand IDs for convenience\n*   Stabilize process management\n*   Layers can include a commit message\n*   Simplified 'docker attach'\n*   Fix support for re-attaching\n*   Various bugfixes and stability improvements\n*   Auto-download at run\n*   Auto-login on push\n*   Beefed up documentation\n\nInitial public release\n\n*   Implement registry in order to push/pull images\n*   TCP port allocation\n*   Fix termcaps on Linux\n*   Add documentation\n*   Add Vagrant support with Vagrantfile\n*   Add unit tests\n*   Add repository/tags to ease image management\n*   Improve the layer implementation",
    "title": "Docker Engine release notes | Docker Docs\n",
    "description": "Release notes for Docker CE",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/best-practices/",
    "markdown": "# Building best practices | Docker Docs\n\nMulti-stage builds let you reduce the size of your final image, by creating a cleaner separation between the building of your image and the final output. Split your Dockerfile instructions into distinct stages to make sure that the resulting output only contains the files that's needed to run the application.\n\nUsing multiple stages can also let you build more efficiently by executing build steps in parallel.\n\nSee [Multi-stage builds](https://docs.docker.com/build/building/multi-stage/) for more information.\n\n### [Create reusable stages](#create-reusable-stages)\n\nIf you have multiple images with a lot in common, consider creating a reusable stage that includes the shared components, and basing your unique stages on that. Docker only needs to build the common stage once. This means that your derivative images use memory on the Docker host more efficiently and load more quickly.\n\nIt's also easier to maintain a common base stage (\"Don't repeat yourself\"), than it is to have multiple different stages doing similar things.\n\nThe first step towards achieving a secure image is to choose the right base image. When choosing an image, ensure it's built from a trusted source and keep it small.\n\n*   [Docker Official Images](https://hub.docker.com/search?image_filter=official) are some of the most secure and dependable images on Docker Hub. Typically, Docker Official images have few or no packages containing CVEs, and are thoroughly reviewed by Docker and project maintainers.\n    \n*   [Verified Publisher](https://hub.docker.com/search?image_filter=store) images are high-quality images published and maintained by the organizations partnering with Docker, with Docker verifying the authenticity of the content in their repositories.\n    \n*   [Docker-Sponsored Open Source](https://hub.docker.com/search?image_filter=open_source) are published and maintained by open source projects sponsored by Docker through an [open source program](https://docs.docker.com/trusted-content/dsos-program/).\n    \n\nWhen you pick your base image, look out for the badges indicating that the image is part of these programs.\n\n![Docker Hub Official and Verified Publisher images](https://docs.docker.com/build/images/hub-official-images.webp)\n\nWhen building your own image from a Dockerfile, ensure you choose a minimal base image that matches your requirements. A smaller base image not only offers portability and fast downloads, but also shrinks the size of your image and minimizes the number of vulnerabilities introduced through the dependencies.\n\nYou should also consider using two types of base image: one for building and unit testing, and another (typically slimmer) image for production. In the later stages of development, your image may not require build tools such as compilers, build systems, and debugging tools. A small image with minimal dependencies can considerably lower the attack surface.\n\nDocker images are immutable. Building an image is taking a snapshot of that image at that moment. That includes any base images, libraries, or other software you use in your build. To keep your images up-to-date and secure, make sure to rebuild your image often, with updated dependencies.\n\nTo ensure that you're getting the latest versions of dependencies in your build, you can use the `--no-cache` option to avoid cache hits.\n\nThe following Dockerfile uses the `24.04` tag of the `ubuntu` image. Over time, that tag may resolve to a different underlying version of the `ubuntu` image, as the publisher rebuilds the image with new security patches and updated libraries. Using the `--no-cache`, you can avoid cache hits and ensure a fresh download of base images and dependencies.\n\nAlso consider [pinning base image versions](#pin-base-image-versions).\n\nTo exclude files not relevant to the build, without restructuring your source repository, use a `.dockerignore` file. This file supports exclusion patterns similar to `.gitignore` files.\n\nFor example, to exclude all files with the `.md` extension:\n\nFor information on creating one, see [Dockerignore file](https://docs.docker.com/build/building/context/#dockerignore-files).\n\nThe image defined by your Dockerfile should generate containers that are as ephemeral as possible. Ephemeral means that the container can be stopped and destroyed, then rebuilt and replaced with an absolute minimum set up and configuration.\n\nRefer to [Processes](https://12factor.net/processes) under _The Twelve-factor App_ methodology to get a feel for the motivations of running containers in such a stateless fashion.\n\nAvoid installing extra or unnecessary packages just because they might be nice to have. For example, you don’t need to include a text editor in a database image.\n\nWhen you avoid installing extra or unnecessary packages, your images have reduced complexity, reduced dependencies, reduced file sizes, and reduced build times.\n\nEach container should have only one concern. Decoupling applications into multiple containers makes it easier to scale horizontally and reuse containers. For instance, a web application stack might consist of three separate containers, each with its own unique image, to manage the web application, database, and an in-memory cache in a decoupled manner.\n\nLimiting each container to one process is a good rule of thumb, but it's not a hard and fast rule. For example, not only can containers be [spawned with an init process](https://docs.docker.com/engine/reference/run/#specify-an-init-process), some programs might spawn additional processes of their own accord. For instance, [Celery](https://docs.celeryproject.org/) can spawn multiple worker processes, and [Apache](https://httpd.apache.org/) can create one process per request.\n\nUse your best judgment to keep containers as clean and modular as possible. If containers depend on each other, you can use [Docker container networks](https://docs.docker.com/network/) to ensure that these containers can communicate.\n\nWhenever possible, sort multi-line arguments alphanumerically to make maintenance easier. This helps to avoid duplication of packages and make the list much easier to update. This also makes PRs a lot easier to read and review. Adding a space before a backslash (`\\`) helps as well.\n\nHere’s an example from the [buildpack-deps image](https://github.com/docker-library/buildpack-deps):\n\nWhen building an image, Docker steps through the instructions in your Dockerfile, executing each in the order specified. For each instruction, Docker checks whether it can reuse the instruction from the build cache.\n\nUnderstanding how the build cache works, and how cache invalidation occurs, is critical for ensuring faster builds. For more information about the Docker build cache and how to optimize your builds, see [Docker build cache](https://docs.docker.com/build/cache/).\n\nImage tags are mutable, meaning a publisher can update a tag to point to a new image. This is useful because it lets publishers update tags to point to newer versions of an image. And as an image consumer, it means you automatically get the new version when you re-build your image.\n\nFor example, if you specify `FROM alpine:3.19` in your Dockerfile, `3.19` resolves to the latest patch version for `3.19`.\n\nAt one point in time, the `3.19` tag might point to version 3.19.1 of the image. If you rebuild the image 3 months later, the same tag might point to a different version, such as 3.19.4. This publishing workflow is best practice, and most publishers use this tagging strategy, but it isn't enforced.\n\nThe downside with this is that you're not guaranteed to get the same for every build. This could result in breaking changes, and it means you also don't have an audit trail of the exact image versions that you're using.\n\nTo fully secure your supply chain integrity, you can pin the image version to a specific digest. By pinning your images to a digest, you're guaranteed to always use the same image version, even if a publisher replaces the tag with a new image. For example, the following Dockerfile pins the Alpine image to the same tag as earlier, `3.19`, but this time with a digest reference as well.\n\nWith this Dockerfile, even if the publisher updates the `3.19` tag, your builds would still use the pinned image version: `13b7e62e8df80264dbb747995705a986aa530415763a6c58f84a3ca8af9a5bcd`.\n\nWhile this helps you avoid unexpected changes, it's also more tedious to have to look up and include the image digest for base image versions manually each time you want to update it. And you're opting out of automated security fixes, which is likely something you want to get.\n\nDocker Scout has a built-in [**Outdated base images** policy](https://docs.docker.com/scout/policy/#outdated-base-images) that checks for whether the base image version you're using is in fact the latest version. This policy also checks if pinned digests in your Dockerfile correspond to the correct version. If a publisher updates an image that you've pinned, the policy evaluation returns a non-compliant status, indicating that you should update your image.\n\nDocker Scout also supports an automated remediation workflow for keeping your base images up-to-date. When a new image digest is available, Docker Scout can automatically raise a pull request on your repository to update your Dockerfiles to use the latest version. This is better than using a tag that changes the version automatically, because you're in control and you have an audit trail of when and how the change occurred.\n\nFor more information about automatically updating your base images with Docker Scout, see [Remediation](https://docs.docker.com/scout/policy/remediation/#automatic-base-image-updates)\n\nWhen you check in a change to source control or create a pull request, use [GitHub Actions](https://docs.docker.com/build/ci/github-actions/) or another CI/CD pipeline to automatically build and tag a Docker image and test it.\n\nFollow these recommendations on how to properly use the [Dockerfile instructions](https://docs.docker.com/reference/dockerfile/) to create an efficient and maintainable Dockerfile.\n\n### [FROM](#from)\n\nWhenever possible, use current official images as the basis for your images. Docker recommends the [Alpine image](https://hub.docker.com/_/alpine/) as it is tightly controlled and small in size (currently under 6 MB), while still being a full Linux distribution.\n\nFor more information about the `FROM` instruction, see [Dockerfile reference for the FROM instruction](https://docs.docker.com/reference/dockerfile/#from).\n\n### [LABEL](#label)\n\nYou can add labels to your image to help organize images by project, record licensing information, to aid in automation, or for other reasons. For each label, add a line beginning with `LABEL` with one or more key-value pairs. The following examples show the different acceptable formats. Explanatory comments are included inline.\n\nStrings with spaces must be quoted or the spaces must be escaped. Inner quote characters (`\"`), must also be escaped. For example:\n\nAn image can have more than one label. Prior to Docker 1.10, it was recommended to combine all labels into a single `LABEL` instruction, to prevent extra layers from being created. This is no longer necessary, but combining labels is still supported. For example:\n\nThe above example can also be written as:\n\nSee [Understanding object labels](https://docs.docker.com/config/labels-custom-metadata/) for guidelines about acceptable label keys and values. For information about querying labels, refer to the items related to filtering in [Managing labels on objects](https://docs.docker.com/config/labels-custom-metadata/#manage-labels-on-objects). See also [LABEL](https://docs.docker.com/reference/dockerfile/#label) in the Dockerfile reference.\n\n### [RUN](#run)\n\nSplit long or complex `RUN` statements on multiple lines separated with backslashes to make your Dockerfile more readable, understandable, and maintainable.\n\nFor example, you can chain commands with the `&&` operator, and use use escape characters to break long commands into multiple lines.\n\nBy default, backslash escapes a newline character, but you can change it with the [`escape` directive](https://docs.docker.com/reference/dockerfile/#escape).\n\nYou can also use here documents to run multiple commands without chaining them with a pipeline operator:\n\nFor more information about `RUN`, see [Dockerfile reference for the RUN instruction](https://docs.docker.com/reference/dockerfile/#run).\n\n#### [apt-get](#apt-get)\n\nOne common use case for `RUN` instructions in Debian-based images is to install software using `apt-get`. Because `apt-get` installs packages, the `RUN apt-get` command has several counter-intuitive behaviors to look out for.\n\nAlways combine `RUN apt-get update` with `apt-get install` in the same `RUN` statement. For example:\n\nUsing `apt-get update` alone in a `RUN` statement causes caching issues and subsequent `apt-get install` instructions to fail. For example, this issue will occur in the following Dockerfile:\n\nAfter building the image, all layers are in the Docker cache. Suppose you later modify `apt-get install` by adding an extra package as shown in the following Dockerfile:\n\nDocker sees the initial and modified instructions as identical and reuses the cache from previous steps. As a result the `apt-get update` isn't executed because the build uses the cached version. Because the `apt-get update` isn't run, your build can potentially get an outdated version of the `curl` and `nginx` packages.\n\nUsing `RUN apt-get update && apt-get install -y` ensures your Dockerfile installs the latest package versions with no further coding or manual intervention. This technique is known as cache busting. You can also achieve cache busting by specifying a package version. This is known as version pinning. For example:\n\nVersion pinning forces the build to retrieve a particular version regardless of what’s in the cache. This technique can also reduce failures due to unanticipated changes in required packages.\n\nBelow is a well-formed `RUN` instruction that demonstrates all the `apt-get` recommendations.\n\nThe `s3cmd` argument specifies a version `1.1.*`. If the image previously used an older version, specifying the new one causes a cache bust of `apt-get update` and ensures the installation of the new version. Listing packages on each line can also prevent mistakes in package duplication.\n\nIn addition, when you clean up the apt cache by removing `/var/lib/apt/lists` it reduces the image size, since the apt cache isn't stored in a layer. Since the `RUN` statement starts with `apt-get update`, the package cache is always refreshed prior to `apt-get install`.\n\nOfficial Debian and Ubuntu images [automatically run `apt-get clean`](https://github.com/moby/moby/blob/03e2923e42446dbb830c654d0eec323a0b4ef02a/contrib/mkimage/debootstrap#L82-L105), so explicit invocation is not required.\n\n#### [Using pipes](#using-pipes)\n\nSome `RUN` commands depend on the ability to pipe the output of one command into another, using the pipe character (`|`), as in the following example:\n\nDocker executes these commands using the `/bin/sh -c` interpreter, which only evaluates the exit code of the last operation in the pipe to determine success. In the example above, this build step succeeds and produces a new image so long as the `wc -l` command succeeds, even if the `wget` command fails.\n\nIf you want the command to fail due to an error at any stage in the pipe, prepend `set -o pipefail &&` to ensure that an unexpected error prevents the build from inadvertently succeeding. For example:\n\n> **Note**\n> \n> Not all shells support the `-o pipefail` option.\n> \n> In cases such as the `dash` shell on Debian-based images, consider using the _exec_ form of `RUN` to explicitly choose a shell that does support the `pipefail` option. For example:\n\n### [CMD](#cmd)\n\nThe `CMD` instruction should be used to run the software contained in your image, along with any arguments. `CMD` should almost always be used in the form of `CMD [\"executable\", \"param1\", \"param2\"]`. Thus, if the image is for a service, such as Apache and Rails, you would run something like `CMD [\"apache2\",\"-DFOREGROUND\"]`. Indeed, this form of the instruction is recommended for any service-based image.\n\nIn most other cases, `CMD` should be given an interactive shell, such as bash, python and perl. For example, `CMD [\"perl\", \"-de0\"]`, `CMD [\"python\"]`, or `CMD [\"php\", \"-a\"]`. Using this form means that when you execute something like `docker run -it python`, you’ll get dropped into a usable shell, ready to go. `CMD` should rarely be used in the manner of `CMD [\"param\", \"param\"]` in conjunction with [`ENTRYPOINT`](https://docs.docker.com/reference/dockerfile/#entrypoint), unless you and your expected users are already quite familiar with how `ENTRYPOINT` works.\n\nFor more information about `CMD`, see [Dockerfile reference for the CMD instruction](https://docs.docker.com/reference/dockerfile/#cmd).\n\n### [EXPOSE](#expose)\n\nThe `EXPOSE` instruction indicates the ports on which a container listens for connections. Consequently, you should use the common, traditional port for your application. For example, an image containing the Apache web server would use `EXPOSE 80`, while an image containing MongoDB would use `EXPOSE 27017` and so on.\n\nFor external access, your users can execute `docker run` with a flag indicating how to map the specified port to the port of their choice. For container linking, Docker provides environment variables for the path from the recipient container back to the source (for example, `MYSQL_PORT_3306_TCP`).\n\nFor more information about `EXPOSE`, see [Dockerfile reference for the EXPOSE instruction](https://docs.docker.com/reference/dockerfile/#expose).\n\n### [ENV](#env)\n\nTo make new software easier to run, you can use `ENV` to update the `PATH` environment variable for the software your container installs. For example, `ENV PATH=/usr/local/nginx/bin:$PATH` ensures that `CMD [\"nginx\"]` just works.\n\nThe `ENV` instruction is also useful for providing the required environment variables specific to services you want to containerize, such as Postgres’s `PGDATA`.\n\nLastly, `ENV` can also be used to set commonly used version numbers so that version bumps are easier to maintain, as seen in the following example:\n\nSimilar to having constant variables in a program, as opposed to hard-coding values, this approach lets you change a single `ENV` instruction to automatically bump the version of the software in your container.\n\nEach `ENV` line creates a new intermediate layer, just like `RUN` commands. This means that even if you unset the environment variable in a future layer, it still persists in this layer and its value can be dumped. You can test this by creating a Dockerfile like the following, and then building it.\n\nTo prevent this, and really unset the environment variable, use a `RUN` command with shell commands, to set, use, and unset the variable all in a single layer. You can separate your commands with `;` or `&&`. If you use the second method, and one of the commands fails, the `docker build` also fails. This is usually a good idea. Using `\\` as a line continuation character for Linux Dockerfiles improves readability. You could also put all of the commands into a shell script and have the `RUN` command just run that shell script.\n\nFor more information about `ENV`, see [Dockerfile reference for the ENV instruction](https://docs.docker.com/reference/dockerfile/#env).\n\n### [ADD or COPY](#add-or-copy)\n\n`ADD` and `COPY` are functionally similar. `COPY` supports basic copying of files into the container, from the [build context](https://docs.docker.com/build/building/context/) or from a stage in a [multi-stage build](https://docs.docker.com/build/building/multi-stage/). `ADD` supports features for fetching files from remote HTTPS and Git URLs, and extracting tar files automatically when adding files from the build context.\n\nYou'll mostly want to use `COPY` for copying files from one stage to another in a multi-stage build. If you need to add files from the build context to the container temporarily to execute a `RUN` instruction, you can often substitute the `COPY` instruction with a bind mount instead. For example, to temporarily add a `requirements.txt` file for a `RUN pip install` instruction:\n\nBind mounts are more efficient than `COPY` for including files from the build context in the container. Note that bind-mounted files are only added temporarily for a single `RUN` instruction, and don't persist in the final image. If you need to include files from the build context in the final image, use `COPY`.\n\nThe `ADD` instruction is best for when you need to download a remote artifact as part of your build. `ADD` is better than manually adding files using something like `wget` and `tar`, because it ensures a more precise build cache. `ADD` also has built-in support for checksum validation of the remote resources, and a protocol for parsing branches, tags, and subdirectories from [Git URLs](https://docs.docker.com/reference/cli/docker/image/build/#git-repositories).\n\nThe following example uses `ADD` to download a .NET installer. Combined with multi-stage builds, only the .NET runtime remains in the final stage, no intermediate files.\n\nFor more information about `ADD` or `COPY`, see the following:\n\n*   [Dockerfile reference for the ADD instruction](https://docs.docker.com/reference/dockerfile/#add)\n*   [Dockerfile reference for the COPY instruction](https://docs.docker.com/reference/dockerfile/#copy)\n\n### [ENTRYPOINT](#entrypoint)\n\nThe best use for `ENTRYPOINT` is to set the image's main command, allowing that image to be run as though it was that command, and then use `CMD` as the default flags.\n\nThe following is an example of an image for the command line tool `s3cmd`:\n\nYou can use the following command to run the image and show the command's help:\n\nOr, you can use the right parameters to execute a command, like in the following example:\n\nThis is useful because the image name can double as a reference to the binary as shown in the command above.\n\nThe `ENTRYPOINT` instruction can also be used in combination with a helper script, allowing it to function in a similar way to the command above, even when starting the tool may require more than one step.\n\nFor example, the [Postgres Official Image](https://hub.docker.com/_/postgres/) uses the following script as its `ENTRYPOINT`:\n\nThis script uses [the `exec` Bash command](https://wiki.bash-hackers.org/commands/builtin/exec) so that the final running application becomes the container's PID 1. This allows the application to receive any Unix signals sent to the container. For more information, see the [`ENTRYPOINT` reference](https://docs.docker.com/reference/dockerfile/#entrypoint).\n\nIn the following example, a helper script is copied into the container and run via `ENTRYPOINT` on container start:\n\nThis script lets you interact with Postgres in several ways.\n\nIt can simply start Postgres:\n\nOr, you can use it to run Postgres and pass parameters to the server:\n\nLastly, you can use it to start a totally different tool, such as Bash:\n\nFor more information about `ENTRYPOINT`, see [Dockerfile reference for the ENTRYPOINT instruction](https://docs.docker.com/reference/dockerfile/#entrypoint).\n\n### [VOLUME](#volume)\n\nYou should use the `VOLUME` instruction to expose any database storage area, configuration storage, or files and folders created by your Docker container. You are strongly encouraged to use `VOLUME` for any combination of mutable or user-serviceable parts of your image.\n\nFor more information about `VOLUME`, see [Dockerfile reference for the VOLUME instruction](https://docs.docker.com/reference/dockerfile/#volume).\n\n### [USER](#user)\n\nIf a service can run without privileges, use `USER` to change to a non-root user. Start by creating the user and group in the Dockerfile with something like the following example:\n\n> **Note**\n> \n> Consider an explicit UID/GID.\n> \n> Users and groups in an image are assigned a non-deterministic UID/GID in that the \"next\" UID/GID is assigned regardless of image rebuilds. So, if it’s critical, you should assign an explicit UID/GID.\n\n> **Note**\n> \n> Due to an [unresolved bug](https://github.com/golang/go/issues/13548) in the Go archive/tar package's handling of sparse files, attempting to create a user with a significantly large UID inside a Docker container can lead to disk exhaustion because `/var/log/faillog` in the container layer is filled with NULL (\\\\0) characters. A workaround is to pass the `--no-log-init` flag to useradd. The Debian/Ubuntu `adduser` wrapper does not support this flag.\n\nAvoid installing or using `sudo` as it has unpredictable TTY and signal-forwarding behavior that can cause problems. If you absolutely need functionality similar to `sudo`, such as initializing the daemon as `root` but running it as non-`root`, consider using [“gosu”](https://github.com/tianon/gosu).\n\nLastly, to reduce layers and complexity, avoid switching `USER` back and forth frequently.\n\nFor more information about `USER`, see [Dockerfile reference for the USER instruction](https://docs.docker.com/reference/dockerfile/#user).\n\n### [WORKDIR](#workdir)\n\nFor clarity and reliability, you should always use absolute paths for your `WORKDIR`. Also, you should use `WORKDIR` instead of proliferating instructions like `RUN cd … && do-something`, which are hard to read, troubleshoot, and maintain.\n\nFor more information about `WORKDIR`, see [Dockerfile reference for the WORKDIR instruction](https://docs.docker.com/reference/dockerfile/#workdir).\n\n### [ONBUILD](#onbuild)\n\nAn `ONBUILD` command executes after the current Dockerfile build completes. `ONBUILD` executes in any child image derived `FROM` the current image. Think of the `ONBUILD` command as an instruction that the parent Dockerfile gives to the child Dockerfile.\n\nA Docker build executes `ONBUILD` commands before any command in a child Dockerfile.\n\n`ONBUILD` is useful for images that are going to be built `FROM` a given image. For example, you would use `ONBUILD` for a language stack image that builds arbitrary user software written in that language within the Dockerfile, as you can see in [Ruby’s `ONBUILD` variants](https://github.com/docker-library/ruby/blob/c43fef8a60cea31eb9e7d960a076d633cb62ba8d/2.4/jessie/onbuild/Dockerfile).\n\nImages built with `ONBUILD` should get a separate tag. For example, `ruby:1.9-onbuild` or `ruby:2.0-onbuild`.\n\nBe careful when putting `ADD` or `COPY` in `ONBUILD`. The onbuild image fails catastrophically if the new build's context is missing the resource being added. Adding a separate tag, as recommended above, helps mitigate this by allowing the Dockerfile author to make a choice.\n\nFor more information about `ONBUILD`, see [Dockerfile reference for the ONBUILD instruction](https://docs.docker.com/reference/dockerfile/#onbuild).",
    "title": "Building best practices | Docker Docs\n",
    "description": "Hints, tips and guidelines for writing clean, reliable Dockerfiles",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/multi-platform/",
    "markdown": "# Multi-platform images | Docker Docs\n\nA multi-platform image refers to a single image that includes variants for multiple different architectures and, in some cases, different operating systems, like Windows. This means that whether you are using an ARM-based system or an x86 machine, Docker automatically detects and selects the appropriate variant for your hosts's operating system and architecture.\n\nMany of the Docker Official Images available on Docker Hub support various architectures. For instance, the `busybox` image includes support for these platforms:\n\n*   x86-64 (`linux/amd64`, `linux/i386`)\n*   ARM architectures (`linux/arm/v5`, `linux/arm/v6`, `linux/arm/v7`, `linux/arm64`)\n*   PowerPC and IBM Z (`linux/ppc64le`, `linux/s390x`)\n\nOn an x86 machine, Docker will automatically use the `linux/amd64` variant when you run a container or invoke a build.\n\nMost Docker images use the `linux/` OS prefix to indicate they are Linux-based. While Docker Desktop on macOS or Windows typically runs Linux containers using a Linux VM, Docker also supports Windows containers if you're operating in Windows container mode.\n\nWhen triggering a build, use the `--platform` flag to define the target platforms for the build output, such as `linux/amd64` and `linux/arm64`:\n\nBy default, Docker can build for only one platform at a time. To build for multiple platforms concurrently, you can:\n\n*   **Enable the containerd image store**: The default image store in Docker Engine doesn't support multi-platform images. The containerd image store does, and lets you create multi-platform images using the default builder. Refer to the [containerd in Docker Desktop documentation](https://docs.docker.com/desktop/containerd/).\n    \n*   **Create a custom builder**: Initialize a [builder](https://docs.docker.com/build/builders/) that uses the `docker-container` driver, which supports multi-platform builds. For more details, see the [`docker-container` driver documentation](https://docs.docker.com/build/drivers/docker-container/).\n    \n\nYou can build multi-platform images using three different strategies, depending on your use case:\n\n1.  Using emulation, via [QEMU](#qemu) support in the Linux kernel\n2.  Building on a single builder backed by [multiple nodes of different architectures](#multiple-native-nodes).\n3.  Using a stage in your Dockerfile to [cross-compile](#cross-compilation) to different architectures\n\n### [QEMU](#qemu)\n\nBuilding multi-platform images under emulation with QEMU is the easiest way to get started if your builder already supports it. Docker Desktop supports it out of the box. It requires no changes to your Dockerfile, and BuildKit automatically detects the secondary architectures that are available. When BuildKit needs to run a binary for a different architecture, it automatically loads it through a binary registered in the `binfmt_misc` handler.\n\n> **Note**\n> \n> Emulation with QEMU can be much slower than native builds, especially for compute-heavy tasks like compilation and compression or decompression.\n> \n> Use [multiple native nodes](#multiple-native-nodes) or [cross-compilation](#cross-compilation) instead, if possible.\n\n#### [Support on Docker Desktop](#support-on-docker-desktop)\n\n[Docker Desktop](https://docs.docker.com/desktop/) provides support for running and building multi-platform images under emulation by default, which means you can run containers for different Linux architectures such as `arm`, `mips`, `ppc64le`, and even `s390x`.\n\nThis doesn't require any special configuration in the container itself as it uses QEMU bundled within the Docker Desktop VM. Because of this, you can run containers of non-native architectures like the `arm32v7` or `ppc64le` automatically.\n\n#### [QEMU without Docker Desktop](#qemu-without-docker-desktop)\n\nIf you're running Docker Engine on Linux, without Docker Desktop, you must install statically compiled QEMU binaries and register them with [`binfmt_misc`](https://en.wikipedia.org/wiki/Binfmt_misc). This enables QEMU to execute non-native file formats for emulation. The QEMU binaries must be statically compiled and registered with the `fix_binary` flag. This requires a kernel version 4.8 or later, and `binfmt-support` version 2.1.7 or later.\n\nOnce QEMU is installed and the executable types are registered on the host OS, they work transparently inside containers. You can verify your registration by checking if `F` is among the flags in `/proc/sys/fs/binfmt_misc/qemu-*`. While Docker Desktop comes preconfigured with `binfmt_misc` support for additional platforms, for other installations it likely needs to be installed using [`tonistiigi/binfmt`](https://github.com/tonistiigi/binfmt) image:\n\n### [Multiple native nodes](#multiple-native-nodes)\n\nUsing multiple native nodes provide better support for more complicated cases that QEMU can't handle, and also provides better performance.\n\nYou can add additional nodes to a builder using the `--append` flag.\n\nThe following command creates a multi-node builder from Docker contexts named `node-amd64` and `node-arm64`. This example assumes that you've already added those contexts.\n\nWhile this approach has advantages over emulation, managing multi-node builders introduces some overhead of setting up and managing builder clusters. Alternatively, you can use Docker Build Cloud, a service that provides managed multi-node builders on Docker's infrastructure. With Docker Build Cloud, you get native multi-platform ARM and X86 builders without the burden of maintaining them. Using cloud builders also provides additional benefits, such as a shared build cache.\n\nAfter signing up for Docker Build Cloud, add the builder to your local environment and start building.\n\nFor more information, see [Docker Build Cloud](https://docs.docker.com/build-cloud/).\n\n### [Cross-compilation](#cross-compilation)\n\nDepending on your project, if the programming language you use has good support for cross-compilation, you can leverage multi-stage builds to build binaries for target platforms from the native architecture of the builder. Special build arguments, such as `BUILDPLATFORM` and `TARGETPLATFORM`, are automatically available for use in your Dockerfile.\n\nIn the following example, the `FROM` instruction is pinned to the native platform of the builder (using the `--platform=$BUILDPLATFORM` option) to prevent emulation from kicking in. Then the pre-defined `$BUILDPLATFORM` and `$TARGETPLATFORM` build arguments are interpolated in a `RUN` instruction. In this case, the values are just printed to stdout with `echo`, but this illustrates how you would pass them to the compiler for cross-compilation.\n\nRun the [`docker buildx ls` command](https://docs.docker.com/reference/cli/docker/buildx/ls/) to list the existing builders:\n\nThis displays the default builtin driver, that uses the BuildKit server components built directly into the Docker Engine, also known as the [`docker` driver](https://docs.docker.com/build/drivers/docker/).\n\nCreate a new builder using the [`docker-container` driver](https://docs.docker.com/build/drivers/docker-container/) which gives you access to more complex features like multi-platform builds and the more advanced cache exporters, which are currently unsupported in the default `docker` driver:\n\nNow listing the existing builders again, you can see that the new builder is registered:\n\nTest the workflow to ensure you can build, push, and run multi-platform images. Create a simple example Dockerfile, build a couple of image variants, and push them to Docker Hub.\n\nThe following example uses a single `Dockerfile` to build an Alpine image with cURL installed for multiple architectures:\n\nBuild the Dockerfile with buildx, passing the list of architectures to build for:\n\n> **Note**\n> \n> *   `<username>` must be a valid Docker ID and `<image>` and valid repository on Docker Hub.\n> *   The `--platform` flag informs buildx to create Linux images for x86 64-bit, ARM 64-bit, and ARMv7 architectures.\n> *   The `--push` flag generates a multi-arch manifest and pushes all the images to Docker Hub.\n\nInspect the image using [`docker buildx imagetools` command](https://docs.docker.com/reference/cli/docker/buildx/imagetools/):\n\nThe image is now available on Docker Hub with the tag `<username>/<image>:latest`. You can use this image to run a container on Intel laptops, Amazon EC2 Graviton instances, Raspberry Pis, and on other architectures. Docker pulls the correct image for the current architecture, so Raspberry PIs run the 32-bit ARM version and EC2 Graviton instances run 64-bit ARM.\n\nThe digest identifies a fully qualified image variant. You can also run images targeted for a different architecture on Docker Desktop. For example, when you run the following on a macOS:\n\nIn the previous example, `uname -m` returns `aarch64` and `armv7l` as expected, even when running the commands on a native macOS or Windows developer machine.",
    "title": "Multi-platform images | Docker Docs\n",
    "description": "Introduction to multi-platform images and how to build them",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/multi-stage/",
    "markdown": "# Multi-stage builds | Docker Docs\n\nMulti-stage builds are useful to anyone who has struggled to optimize Dockerfiles while keeping them easy to read and maintain.\n\nWith multi-stage builds, you use multiple `FROM` statements in your Dockerfile. Each `FROM` instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don't want in the final image.\n\nThe following Dockerfile has two separate stages: one for building a binary, and another where the binary gets copied from the first stage into the next stage.\n\nYou only need the single Dockerfile. No need for a separate build script. Just run `docker build`.\n\nThe end result is a tiny production image with nothing but the binary inside. None of the build tools required to build the application are included in the resulting image.\n\nHow does it work? The second `FROM` instruction starts a new build stage with the `scratch` image as its base. The `COPY --from=0` line copies just the built artifact from the previous stage into this new stage. The Go SDK and any intermediate artifacts are left behind, and not saved in the final image.\n\nBy default, the stages aren't named, and you refer to them by their integer number, starting with 0 for the first `FROM` instruction. However, you can name your stages, by adding an `AS <NAME>` to the `FROM` instruction. This example improves the previous one by naming the stages and using the name in the `COPY` instruction. This means that even if the instructions in your Dockerfile are re-ordered later, the `COPY` doesn't break.\n\nWhen you build your image, you don't necessarily need to build the entire Dockerfile including every stage. You can specify a target build stage. The following command assumes you are using the previous `Dockerfile` but stops at the stage named `build`:\n\nA few scenarios where this might be useful are:\n\n*   Debugging a specific build stage\n*   Using a `debug` stage with all debugging symbols or tools enabled, and a lean `production` stage\n*   Using a `testing` stage in which your app gets populated with test data, but building for production using a different stage which uses real data\n\nWhen using multi-stage builds, you aren't limited to copying from stages you created earlier in your Dockerfile. You can use the `COPY --from` instruction to copy from a separate image, either using the local image name, a tag available locally or on a Docker registry, or a tag ID. The Docker client pulls the image if necessary and copies the artifact from there. The syntax is:\n\nYou can pick up where a previous stage left off by referring to it when using the `FROM` directive. For example:\n\nThe legacy Docker Engine builder processes all stages of a Dockerfile leading up to the selected `--target`. It will build a stage even if the selected target doesn't depend on that stage.\n\n[BuildKit](https://docs.docker.com/build/buildkit/) only builds the stages that the target stage depends on.\n\nFor example, given the following Dockerfile:\n\nWith [BuildKit enabled](https://docs.docker.com/build/buildkit/#getting-started), building the `stage2` target in this Dockerfile means only `base` and `stage2` are processed. There is no dependency on `stage1`, so it's skipped.\n\nOn the other hand, building the same target without BuildKit results in all stages being processed:\n\nThe legacy builder processes `stage1`, even if `stage2` doesn't depend on it.",
    "title": "Multi-stage builds | Docker Docs\n",
    "description": "Learn about multi-stage builds and how you can use them to improve your builds and get smaller images ",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/secrets/",
    "markdown": "# Build secrets | Docker Docs\n\nA build secret is any piece of sensitive information, such as a password or API token, consumed as part of your application's build process.\n\nBuild arguments and environment variables are inappropriate for passing secrets to your build, because they persist in the final image. Instead, you should use secret mounts or SSH mounts, which expose secrets to your builds securely.\n\nSecret mounts expose secrets to the build containers as files. You [mount the secrets to the `RUN` instructions](https://docs.docker.com/reference/dockerfile/#run---mounttypesecret) that need to access them, similar to how you would define a bind mount or cache mount.\n\nTo pass a secret to a build, use the [`docker build --secret` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#secret), or the equivalent options for [Bake](https://docs.docker.com/build/bake/reference/#targetsecret).\n\n### [Sources](#sources)\n\nThe source of a secret can be either a [file](https://docs.docker.com/reference/cli/docker/buildx/build/#file) or an [environment variable](https://docs.docker.com/reference/cli/docker/buildx/build/#env). When you use the CLI or Bake, the type can be detected automatically. You can also specify it explicitly with `type=file` or `type=env`.\n\nThe following example mounts the environment variable `KUBECONFIG` to secret ID `kube`, as a file in the build container at `/run/secrets/kube`.\n\nWhen you use secrets from environment variables, you can omit the `env` parameter to bind the secret to a file with the same name as the variable. In the following example, the value of the `API_TOKEN` variable is mounted to `/run/secrets/API_TOKEN` in the build container.\n\n### [Target](#target)\n\nBy default, secrets are mounted to `/run/secrets/<id>`. You can customize the mount point in the build container using the `target` option in the Dockerfile.\n\nThe following example mounts the secret to a `/root/.aws/credentials` file in the build container.\n\nIf the credential you want to use in your build is an SSH agent socket or key, you can use the SSH mount instead of a secret mount. Cloning private Git repositories is a common use case for SSH mounts.\n\nThe following example clones a private GitHub repository using a [Dockerfile SSH mount](https://docs.docker.com/reference/dockerfile/#run---mounttypessh).\n\nTo pass an SSH socket the build, you use the [`docker build --ssh` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#ssh), or equivalent options for [Bake](https://docs.docker.com/build/bake/reference/#targetssh).\n\n## [Git authentication for remote contexts](#git-authentication-for-remote-contexts)\n\nBuildKit supports two pre-defined build secrets, `GIT_AUTH_TOKEN` and `GIT_AUTH_HEADER`. Use them to specify HTTP authentication parameters when building with remote, private Git repositories, including:\n\n*   Building with a private Git repository as build context\n*   Fetching private Git repositories in a build with `ADD`\n\nFor example, say you have a private GitLab project at `https://gitlab.com/example/todo-app.git`, and you want to run a build using that repository as the build context. An unauthenticated `docker build` command fails because the builder isn't authorized to pull the repository:\n\nTo authenticate the builder to the Git server, set the `GIT_AUTH_TOKEN` environment variable to contain a valid GitLab access token, and pass it as a secret to the build:\n\nThe `GIT_AUTH_TOKEN` also works with `ADD` to fetch private Git repositories as part of your build:\n\n### [HTTP authentication scheme](#http-authentication-scheme)\n\nBy default, Git authentication over HTTP uses the Bearer authentication scheme:\n\nIf you need to use a Basic scheme, with a username and password, you can set the `GIT_AUTH_HEADER` build secret:\n\nBuildKit currently only supports the Bearer and Basic schemes.\n\n### [Multiple hosts](#multiple-hosts)\n\nYou can set the `GIT_AUTH_TOKEN` and `GIT_AUTH_HEADER` secrets on a per-host basis, which lets you use different authentication parameters for different hostnames. To specify a hostname, append the hostname as a suffix to the secret ID:",
    "title": "Build secrets | Docker Docs\n",
    "description": "Manage credentials and other secrets securely",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/annotations/",
    "markdown": "# Annotations | Docker Docs\n\nAnnotations provide descriptive metadata for images. Use annotations to record arbitrary information and attach it to your image, which helps consumers and tools understand the origin, contents, and how to use the image.\n\nAnnotations are similar to, and in some sense overlap with, [labels](https://docs.docker.com/config/labels-custom-metadata/). Both serve the same purpose: attach metadata to a resource. As a general principle, you can think of the difference between annotations and labels as follows:\n\n*   Annotations describe OCI image components, such as [manifests](https://github.com/opencontainers/image-spec/blob/main/manifest.md), [indexes](https://github.com/opencontainers/image-spec/blob/main/image-index.md), and [descriptors](https://github.com/opencontainers/image-spec/blob/main/descriptor.md).\n*   Labels describe Docker resources, such as images, containers, networks, and volumes.\n\nThe OCI image [specification](https://github.com/opencontainers/image-spec/blob/main/annotations.md) defines the format of annotations, as well as a set of pre-defined annotation keys. Adhering to the specified standards ensures that metadata about images can be surfaced automatically and consistently, by tools like Docker Scout.\n\nAnnotations are not to be confused with [attestations](https://docs.docker.com/build/attestations/):\n\n*   Attestations contain information about how an image was built and what it contains. An attestation is attached as a separate manifest on the image index. Attestations are not standardized by the Open Container Initiative.\n*   Annotations contain arbitrary metadata about an image. Annotations attach to the image [config](https://github.com/opencontainers/image-spec/blob/main/config.md) as labels, or on the image index or manifest as properties.\n\nYou can add annotations to an image at build-time, or when creating the image manifest or index.\n\n> **Note**\n> \n> The Docker Engine image store doesn't support loading images with annotations. To build with annotations, make sure to push the image directly to a registry, using the `--push` CLI flag or the [registry exporter](https://docs.docker.com/build/exporters/image-registry/).\n\nTo specify annotations on the command line, use the `--annotation` flag for the `docker build` command:\n\nIf you're using [Bake](https://docs.docker.com/build/bake/), you can use the `annotations` attribute to specify annotations for a given target:\n\nFor examples on how to add annotations to images built with GitHub Actions, see [Add image annotations with GitHub Actions](https://docs.docker.com/build/ci/github-actions/annotations/)\n\nYou can also add annotations to an image created using `docker buildx imagetools create`. This command only supports adding annotations to an index or manifest descriptors, see [CLI reference](https://docs.docker.com/reference/cli/docker/buildx/imagetools/create/#annotations).\n\nTo view annotations on an **image index**, use the `docker buildx imagetools inspect` command. This shows you any annotations for the index and descriptors (references to manifests) that the index contains. The following example shows an `org.opencontainers.image.documentation` annotation on a descriptor, and an `org.opencontainers.image.authors` annotation on the index.\n\nTo inspect annotations on a manifest, use the `docker buildx imagetools inspect` command and specify `<IMAGE>@<DIGEST>`, where `<DIGEST>` is the digest of the manifest:\n\nBy default, annotations are added to the image manifest. You can specify which level(s) to attach the manifest to, by prefixing the annotation string with a special type declaration:\n\n*   `manifest`: annotates manifests.\n*   `index`: annotates the root index.\n*   `manifest-descriptor`: annotates manifest descriptors in the index.\n*   `index-descriptor`: annotates the index descriptor in the image layout.\n\nFor example, to build an image with the annotation `foo=bar` attached to the image index:\n\nIt's possible to specify types, separated by a comma, to add the annotation to more than one level. The following example creates an image with the annotation `foo=bar` on both the image index and the image manifest:\n\nYou can also specify a platform qualifier in the type prefix, to annotate only components matching specific OS and architectures. The following example adds the `foo=bar` annotation only to the `linux/amd64` manifest:\n\nRelated articles:\n\n*   [Add image annotations with GitHub Actions](https://docs.docker.com/build/ci/github-actions/annotations/)\n*   [Annotations OCI specification](https://github.com/opencontainers/image-spec/blob/main/annotations.md)\n\nReference information:\n\n*   [`docker buildx build --annotation`](https://docs.docker.com/reference/cli/docker/buildx/build/#annotation)\n*   [Bake file reference: `annotations`](https://docs.docker.com/build/bake/reference/#targetannotations)\n*   [`docker buildx imagetools create --annotation`](https://docs.docker.com/reference/cli/docker/buildx/imagetools/create/#annotation)",
    "title": "Annotations | Docker Docs\n",
    "description": "Annotations specify additional metadata about OCI images",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/building/opentelemetry/",
    "markdown": "# OpenTelemetry support | Docker Docs\n\nBoth Buildx and BuildKit support [OpenTelemetry](https://opentelemetry.io/).\n\nTo capture the trace to [Jaeger](https://github.com/jaegertracing/jaeger), set `JAEGER_TRACE` environment variable to the collection address using a `driver-opt`.\n\nFirst create a Jaeger container:\n\nThen [create a `docker-container` builder](https://docs.docker.com/build/drivers/docker-container/) that will use the Jaeger instance via the `JAEGER_TRACE` env var:\n\nBoot and [inspect `mybuilder`](https://docs.docker.com/reference/cli/docker/buildx/inspect/):\n\nBuildx commands should be traced at `http://127.0.0.1:16686/`:\n\n![OpenTelemetry Buildx Bake](https://docs.docker.com/build/images/opentelemetry.png)",
    "title": "OpenTelemetry support | Docker Docs\n",
    "description": "Analyze telemetry data for builds",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/funcs/",
    "markdown": "# HCL functions | Docker Docs\n\nHCL functions are great for when you need to manipulate values in your build configuration in more complex ways than just concatenation or interpolation.\n\nBake ships with built-in support for the [`go-cty` standard library functions](https://github.com/zclconf/go-cty/tree/main/cty/function/stdlib). The following example shows the `add` function.\n\nYou can create [user-defined functions](https://github.com/hashicorp/hcl/tree/main/ext/userfunc) that do just what you want, if the built-in standard library functions don't meet your needs.\n\nThe following example defines an `increment` function.\n\nYou can make references to [variables](https://docs.docker.com/build/bake/variables/) and standard library functions inside your functions.\n\nYou can't reference user-defined functions from other functions.\n\nThe following example uses a global variable (`REPO`) in a custom function.\n\nPrinting the Bake file with the `--print` flag shows that the `tag` function uses the value of `REPO` to set the prefix of the tag.",
    "title": "HCL functions | Docker Docs\n",
    "description": "Learn about built-in and user-defined HCL functions with Bake",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/targets/",
    "markdown": "# Bake targets | Docker Docs\n\nA target in a Bake file represents a build invocation. It holds all the information you would normally pass to a `docker build` command using flags.\n\nTo build a target with Bake, pass name of the target to the `bake` command.\n\nYou can build multiple targets at once by passing multiple target names to the `bake` command.\n\nIf you don't specify a target when running `docker buildx bake`, Bake will build the target named `default`.\n\nTo build this target, run `docker buildx bake` without any arguments:\n\nThe properties you can set for a target closely resemble the CLI flags for `docker build`, with a few additional properties that are specific to Bake.\n\nFor all the properties you can set for a target, see the [Bake reference](https://docs.docker.com/build/bake/reference#target).\n\nYou can group targets together using the `group` block. This is useful when you want to build multiple targets at once.\n\nTo build all the targets in a group, pass the name of the group to the `bake` command.\n\nRefer to the following pages to learn more about Bake's features:\n\n*   Learn how to use [variables](https://docs.docker.com/build/bake/variables/) in Bake to make your build configuration more flexible.\n*   Learn how you can use matrices to build multiple images with different configurations in [Matrices](https://docs.docker.com/build/bake/matrices/).\n*   Head to the [Bake file reference](https://docs.docker.com/build/bake/reference/) to learn about all the properties you can set in a Bake file, and its syntax.",
    "title": "Bake targets | Docker Docs\n",
    "description": "Learn how to define and use targets in Bake",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/contexts/",
    "markdown": "# Using Bake with additional contexts\n\nIn addition to the main `context` key that defines the build context, each target can also define additional named contexts with a map defined with key `contexts`. These values map to the `--build-context` flag in the [build command](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context).\n\nInside the Dockerfile these contexts can be used with the `FROM` instruction or `--from` flag.\n\nSupported context values are:\n\n*   Local filesystem directories\n*   Container images\n*   Git URLs\n*   HTTP URLs\n*   Name of another target in the Bake file\n\n## [Using a target as a build context](#using-a-target-as-a-build-context)\n\nTo use a result of one target as a build context of another, specify the target name with `target:` prefix.\n\nIn most cases you should just use a single multi-stage Dockerfile with multiple targets for similar behavior. This case is only recommended when you have multiple Dockerfiles that can't be easily merged into one.\n\n## [Deduplicate context transfer](#deduplicate-context-transfer)\n\nWhen you build targets concurrently, using groups, build contexts are loaded independently for each target. If the same context is used by multiple targets in a group, that context is transferred once for each time it's used. This can result in significant impact on build time, depending on your build configuration. For example, say you have a Bake file that defines the following group of targets:\n\nIn this case, the context `.` is transferred twice when you build the default group: once for `target1` and once for `target2`.\n\nIf your context is small, and if you are using a local builder, duplicate context transfers may not be a big deal. But if your build context is big, or you have a large number of targets, or you're transferring the context over a network to a remote builder, context transfer becomes a performance bottleneck.\n\nTo avoid transferring the same context multiple times, you can define a named context that only loads the context files, and have each target that needs those files reference that named context. For example, the following Bake file defines a named target `ctx`, which is used by both `target1` and `target2`:\n\nThe named context `ctx` represents a Dockerfile stage, which copies the files from its context (`.`). Other stages in the Dockerfile can now reference the `ctx` named context and, for example, mount its files with `--mount=from=ctx`.",
    "title": "Using Bake with additional contexts | Docker Docs\n",
    "description": "Additional contexts are useful when you want to pin image versions, or reference the output of other targets ",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/expressions/",
    "markdown": "# Expression evaluation in Bake | Docker Docs\n\nBake files in the HCL format support expression evaluation, which lets you perform arithmetic operations, conditionally set values, and more.\n\nYou can perform arithmetic operations in expressions. The following example shows how to multiply two numbers.\n\nPrinting the Bake file with the `--print` flag shows the evaluated value for the `answer` build argument.\n\nYou can use ternary operators to conditionally register a value.\n\nThe following example adds a tag only when a variable is not empty, using the built-in `notequal` [function](https://docs.docker.com/build/bake/funcs/).\n\nIn this case, `TAG` is an empty string, so the resulting build configuration only contains the hard-coded `my-image:latest` tag.\n\nYou can use expressions with [variables](https://docs.docker.com/build/bake/variables/) to conditionally set values, or to perform arithmetic operations.\n\nThe following example uses expressions to set values based on the value of variables. The `v1` build argument is set to \"higher\" if the variable `FOO` is greater than 5, otherwise it is set to \"lower\". The `v2` build argument is set to \"yes\" if the `IS_FOO` variable is true, otherwise it is set to \"no\".\n\nPrinting the Bake file with the `--print` flag shows the evaluated values for the `v1` and `v2` build arguments.",
    "title": "Expression evaluation in Bake | Docker Docs\n",
    "description": "Learn about advanced Bake features, like user-defined functions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/variables/",
    "markdown": "# Variables in Bake | Docker Docs\n\nYou can define and use variables in a Bake file to set attribute values, interpolate them into other values, and perform arithmetic operations. Variables can be defined with default values, and can be overridden with environment variables.\n\nUse the `variable` block to define a variable.\n\nThe following example shows how to use the `TAG` variable in a target.\n\nBake supports string interpolation of variables into values. You can use the `${}` syntax to interpolate a variable into a value. The following example defines a `TAG` variable with a value of `latest`.\n\nTo interpolate the `TAG` variable into the value of an attribute, use the `${TAG}` syntax.\n\nPrinting the Bake file with the `--print` flag shows the interpolated value in the resolved build configuration.\n\nWhen multiple files are specified, one file can use variables defined in another file. In the following example, the `vars.hcl` file defines a `BASE_IMAGE` variable with a default value of `docker.io/library/alpine`.\n\nThe following `docker-bake.hcl` file defines a `BASE_LATEST` variable that references the `BASE_IMAGE` variable.\n\nWhen you print the resolved build configuration, using the `-f` flag to specify the `vars.hcl` and `docker-bake.hcl` files, you see that the `BASE_LATEST` variable is resolved to `docker.io/library/alpine:latest`.\n\nHere are some additional resources that show how you can use variables in Bake:\n\n*   You can override `variable` values using environment variables. See [Overriding configurations](https://docs.docker.com/build/bake/overrides/#environment-variables) for more information.\n*   You can refer to and use global variables in functions. See [HCL functions](https://docs.docker.com/build/bake/funcs/#variables-in-functions)\n*   You can use variable values when evaluating expressions. See [Expression evaluation](https://docs.docker.com/build/bake/expressions/#expressions-with-variables)",
    "title": "Variables in Bake | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/matrices/",
    "markdown": "# Matrix targets | Docker Docs\n\nA matrix strategy lets you fork a single target into multiple different variants, based on parameters that you specify. This works in a similar way to [Matrix strategies for GitHub Actions](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs). You can use this to reduce duplication in your Bake definition.\n\nThe matrix attribute is a map of parameter names to lists of values. Bake builds each possible combination of values as a separate target.\n\nEach generated target must have a unique name. To specify how target names should resolve, use the name attribute.\n\nThe following example resolves the app target to `app-foo` and `app-bar`. It also uses the matrix value to define the [target build stage](https://docs.docker.com/build/bake/reference/#targettarget).\n\nYou can specify multiple keys in your matrix to fork a target on multiple axes. When using multiple matrix keys, Bake builds every possible variant.\n\nThe following example builds four targets:\n\n*   `app-foo-1-0`\n*   `app-foo-2-0`\n*   `app-bar-1-0`\n*   `app-bar-2-0`\n\nIf you want to differentiate the matrix on more than just a single value, you can use maps as matrix values. Bake creates a target for each map, and you can access the nested values using dot notation.\n\nThe following example builds two targets:\n\n*   `app-foo-1-0`\n*   `app-bar-2-0`",
    "title": "Matrix targets | Docker Docs\n",
    "description": "Learn how to define and use matrix targets in Bake to fork a single target into multiple different variants",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/inheritance/",
    "markdown": "# Inheritance in Bake | Docker Docs\n\nTargets can inherit attributes from other targets, using the `inherits` attribute. For example, imagine that you have a target that builds a Docker image for a development environment:\n\nYou can create a new target that uses the same build configuration, but with slightly different attributes for a production build. In this example, the `app-release` target inherits the `app-dev` target, but overrides the `tags` attribute and adds a new `platforms` attribute:\n\nOne common inheritance pattern is to define a common target that contains shared attributes for all or many of the build targets in the project. For example, the following `_common` target defines a common set of build arguments:\n\nYou can then inherit the `_common` target in other targets to apply the shared attributes:\n\nWhen a target inherits another target, it can override any of the inherited attributes. For example, the following target overrides the `args` attribute from the inherited target:\n\nThe `GO_VERSION` argument in `app-release` is set to `1.17`, overriding the `GO_VERSION` argument from the `app-dev` target.\n\nFor more information about overriding attributes, see the [Overriding configurations](https://docs.docker.com/build/bake/overrides/) page.\n\nThe `inherits` attribute is a list, meaning you can reuse attributes from multiple other targets. In the following example, the app-release target reuses attributes from both the `app-dev` and `_common` targets.\n\nWhen inheriting attributes from multiple targets and there's a conflict, the target that appears last in the inherits list takes precedence. The previous example defines the `BUILDKIT_CONTEXT_KEEP_GIT_DIR` in the `_common` target and overrides it in the `app-dev` target.\n\nThe `app-release` target inherits both `app-dev` target and the `_common` target. The `BUILDKIT_CONTEXT_KEEP_GIT_DIR` argument is set to 0 in the `app-dev` target and 1 in the `_common` target. The `BUILDKIT_CONTEXT_KEEP_GIT_DIR` argument in the `app-release` target is set to 1, not 0, because the `_common` target appears last in the inherits list.\n\nIf you only want to inherit a single attribute from a target, you can reference an attribute from another target using dot notation. For example, in the following Bake file, the `bar` target reuses the `tags` attribute from the `foo` target:",
    "title": "Inheritance in Bake | Docker Docs\n",
    "description": "Learn how to inherit attributes from other targets in Bake",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/overrides/",
    "markdown": "# Overriding configurations | Docker Docs\n\nBake supports loading build definitions from files, but sometimes you need even more flexibility to configure these definitions. For example, you might want to override an attribute when building in a particular environment or for a specific target.\n\nThe following list of attributes can be overridden:\n\n*   `args`\n*   `cache-from`\n*   `cache-to`\n*   `context`\n*   `dockerfile`\n*   `labels`\n*   `no-cache`\n*   `output`\n*   `platform`\n*   `pull`\n*   `secrets`\n*   `ssh`\n*   `tags`\n*   `target`\n\nTo override these attributes, you can use the following methods:\n\n*   [File overrides](#file-overrides)\n*   [CLI overrides](#command-line)\n*   [Environment variable overrides](#environment-variables)\n\nYou can load multiple Bake files that define build configurations for your targets. This is useful when you want to separate configurations into different files for better organization, or to conditionally override configurations based on which files are loaded.\n\n### [Default file lookup](#default-file-lookup)\n\nYou can use the `--file` or `-f` flag to specify which files to load. If you don't specify any files, Bake will use the following lookup order:\n\n1.  `compose.yaml`\n2.  `compose.yml`\n3.  `docker-compose.yml`\n4.  `docker-compose.yaml`\n5.  `docker-bake.json`\n6.  `docker-bake.override.json`\n7.  `docker-bake.hcl`\n8.  `docker-bake.override.hcl`\n\nIf more than one Bake file is found, all files are loaded and merged into a single definition. Files are merged according to the lookup order.\n\nIf merged files contain duplicate attribute definitions, those definitions are either merged or overridden by the last occurrence, depending on the attribute.\n\nBake will attempt to load all of the files in the order they are found. If multiple files define the same target, attributes are either merged or overridden. In the case of overrides, the last one loaded takes precedence.\n\nFor example, given the following files:\n\nSince `docker-bake.override.hcl` is loaded last in the default lookup order, the `TAG` variable is overridden with the value `bar`.\n\n### [Manual file overrides](#manual-file-overrides)\n\nYou can use the `--file` flag to explicitly specify which files to load, and use this as a way to conditionally apply override files.\n\nFor example, you can create a file that defines a set of configurations for a specific environment, and load it only when building for that environment. The following example shows how to load an `override.hcl` file that sets the `TAG` variable to `bar`. The `TAG` variable is then used in the `default` target.\n\nPrinting the build configuration without the `--file` flag shows the `TAG` variable is set to the default value `foo`.\n\nUsing the `--file` flag to load the `overrides.hcl` file overrides the `TAG` variable with the value `bar`.\n\nYou can also override target configurations from the command line with the [`--set` flag](https://docs.docker.com/reference/cli/docker/buildx/bake/#set):\n\nPattern matching syntax defined in [https://golang.org/pkg/path/#Match](https://golang.org/pkg/path/#Match) is also supported:\n\nComplete list of attributes that can be overridden with `--set` are:\n\n*   `args`\n*   `cache-from`\n*   `cache-to`\n*   `context`\n*   `dockerfile`\n*   `labels`\n*   `no-cache`\n*   `output`\n*   `platform`\n*   `pull`\n*   `secrets`\n*   `ssh`\n*   `tags`\n*   `target`\n\nYou can also use environment variables to override configurations.\n\nBake lets you use environment variables to override the value of a `variable` block. Only `variable` blocks can be overridden with environment variables. This means you need to define the variables in the bake file and then set the environment variable with the same name to override it.\n\nThe following example shows how you can define a `TAG` variable with a default value in the Bake file, and override it with an environment variable.\n\nThe `TAG` variable is overridden with the value of the environment variable, which is the short commit hash generated by `git rev-parse --short HEAD`.\n\n### [Type coercion](#type-coercion)\n\nOverriding non-string variables with environment variables is supported. Values passed as environment variables are coerced into suitable types first.\n\nThe following example defines a `PORT` variable with a default value of `8080`. The `default` target uses a [ternary operator](https://docs.docker.com/build/bake/expressions/#ternary-operators) to set the `PORT` variable to the value of the environment variable `PORT` if it is greater than `1024`, otherwise it uses the default value.\n\nIn this case, the `PORT` variable is coerced to an integer before the ternary operator is evaluated.\n\nAttempting to set the `PORT` variable with a value less than `1024` will result in the default value being used.",
    "title": "Overriding configurations | Docker Docs\n",
    "description": "Learn how to override configurations in Bake files to build with different attributes.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/attestations/",
    "markdown": "# Build attestations | Docker Docs\n\nBuild attestations describe how an image was built, and what it contains. The attestations are created at build-time by BuildKit, and become attached to the final image as metadata.\n\nThe purpose of attestations is to make it possible to inspect an image and see where it comes from, who created it and how, and what it contains. This enables you to make informed decisions about how an image impacts the supply chain security of your application. It also enables the use of policy engines for validating images based on policy rules you've defined.\n\nTwo types of build annotations are available:\n\n*   Software Bill of Material (SBOM): list of software artifacts that an image contains, or that were used to build the image.\n*   Provenance: how an image was built.\n\nThe use of open source and third-party packages is more widespread than ever before. Developers share and reuse code because it helps increase productivity, allowing teams to create better products, faster.\n\nImporting and using code created elsewhere without vetting it introduces a severe security risk. Even if you do review the software that you consume, new zero-day vulnerabilities are frequently discovered, requiring development teams take action to remediate them.\n\nBuild attestations make it easier to see the contents of an image, and where it comes from. Use attestations to analyze and decide whether to use an image, or to see if images you are already using are exposed to vulnerabilities.\n\nWhen you build an image with `docker buildx build`, you can add attestation records to the resulting image using the `--provenance` and `--sbom` options. You can opt in to add either the SBOM or provenance attestation type, or both.\n\n> **Note**\n> \n> The default image store doesn't support attestations. If you're using the default image store and you build an image using the default `docker` driver, or using a different driver with the `--load` flag, the attestations are lost.\n> \n> To make sure the attestations are preserved, you can:\n> \n> *   Use a `docker-container` driver with the `--push` flag to push the image to a registry directly.\n> *   Enable the [containerd image store](https://docs.docker.com/desktop/containerd/).\n\n> **Note**\n> \n> Provenance attestations are enabled by default, with the `mode=min` option. You can disable provenance attestations using the `--provenance=false` flag, or by setting the [`BUILDX_NO_DEFAULT_ATTESTATIONS`](https://docs.docker.com/build/building/variables/#buildx_no_default_attestations) environment variable.\n> \n> Using the `--provenance=true` flag attaches provenance attestations with `mode=max` by default. See [Provenance attestation](https://docs.docker.com/build/attestations/slsa-provenance/) for more details.\n\nBuildKit generates the attestations when building the image. The attestation records are wrapped in the in-toto JSON format and attached to the image index in a manifest for the final image.\n\nBuildKit produces attestations in the [in-toto format](https://github.com/in-toto/attestation), as defined by the [in-toto framework](https://in-toto.io/), a standard supported by the Linux Foundation.\n\nAttestations attach to images as a manifest in the image index. The data records of the attestations are stored as JSON blobs.\n\nBecause attestations attach to images as a manifest, it means that you can inspect the attestations for any image in a registry without having to pull the whole image.\n\nAll BuildKit exporters support attestations. The `local` and `tar` can't save the attestations to an image manifest, since it's outputting a directory of files or a tarball, not an image. Instead, these exporters write the attestations to one or more JSON files in the root directory of the export.\n\nThe following example shows a truncated in-toto JSON representation of an SBOM attestation.\n\nTo deep-dive into the specifics about how attestations are stored, see [Image Attestation Storage (BuildKit)](https://docs.docker.com/build/attestations/attestation-storage/).\n\nLearn more about the available attestation types and how to use them:\n\n*   [Provenance](https://docs.docker.com/build/attestations/slsa-provenance/)\n*   [SBOM](https://docs.docker.com/build/attestations/sbom/)",
    "title": "Build attestations | Docker Docs\n",
    "description": "Introduction to SBOM and provenance attestations with Docker Build, what they are, and why they exist ",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/compose-file/",
    "markdown": "# Building with Bake from a Compose file\n\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"aws\", \"addon\"]\n    }\n  },\n  \"target\": {\n    \"addon\": {\n      \"context\": \".\",\n      \"dockerfile\": \"./Dockerfile\",\n      \"args\": {\n        \"CT_ECR\": \"foo\",\n        \"CT_TAG\": \"bar\"\n      },\n      \"tags\": [\"ct-addon:foo\", \"ct-addon:alp\"],\n      \"cache-from\": [\"user/app:cache\", \"type=local,src=path/to/cache\"],\n      \"cache-to\": [\"type=local,dest=path/to/cache\"],\n      \"platforms\": [\"linux/amd64\", \"linux/arm64\"],\n      \"pull\": true\n    },\n    \"aws\": {\n      \"context\": \".\",\n      \"dockerfile\": \"./aws.Dockerfile\",\n      \"args\": {\n        \"CT_ECR\": \"foo\",\n        \"CT_TAG\": \"bar\"\n      },\n      \"tags\": [\"ct-fake-aws:bar\"],\n      \"secret\": [\"id=mysecret,src=./secret\", \"id=mysecret2,src=./secret2\"],\n      \"platforms\": [\"linux/arm64\"],\n      \"output\": [\"type=docker\"],\n      \"no-cache\": true\n    }\n  }\n}\n```",
    "title": "Building with Bake from a Compose file | Docker Docs\n",
    "description": "Build your compose services with Bake",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/reference/",
    "markdown": "# Bake file reference | Docker Docs\n\nThe Bake file is a file for defining workflows that you run using `docker buildx bake`.\n\nYou can define your Bake file in the following file formats:\n\n*   HashiCorp Configuration Language (HCL)\n*   JSON\n*   YAML (Compose file)\n\nBy default, Bake uses the following lookup order to find the configuration file:\n\n1.  `compose.yaml`\n2.  `compose.yml`\n3.  `docker-compose.yml`\n4.  `docker-compose.yaml`\n5.  `docker-bake.json`\n6.  `docker-bake.override.json`\n7.  `docker-bake.hcl`\n8.  `docker-bake.override.hcl`\n\nYou can specify the file location explicitly using the `--file` flag:\n\nIf you don't specify a file explicitly, Bake searches for the file in the current working directory. If more than one Bake file is found, all files are merged into a single definition. Files are merged according to the lookup order. That means that if your project contains both a `compose.yaml` file and a `docker-bake.hcl` file, Bake loads the `compose.yaml` file first, and then the `docker-bake.hcl` file.\n\nIf merged files contain duplicate attribute definitions, those definitions are either merged or overridden by the last occurrence, depending on the attribute. The following attributes are overridden by the last occurrence:\n\n*   `target.cache-to`\n*   `target.dockerfile-inline`\n*   `target.dockerfile`\n*   `target.outputs`\n*   `target.platforms`\n*   `target.pull`\n*   `target.tags`\n*   `target.target`\n\nFor example, if `compose.yaml` and `docker-bake.hcl` both define the `tags` attribute, the `docker-bake.hcl` is used.\n\nAll other attributes are merged. For example, if `compose.yaml` and `docker-bake.hcl` both define unique entries for the `labels` attribute, all entries are included. Duplicate entries for the same label are overridden.\n\nThe Bake file supports the following property types:\n\n*   `target`: build targets\n*   `group`: collections of build targets\n*   `variable`: build arguments and variables\n*   `function`: custom Bake functions\n\nYou define properties as hierarchical blocks in the Bake file. You can assign one or more attributes to a property.\n\nThe following snippet shows a JSON representation of a simple Bake file. This Bake file defines three properties: a variable, a group, and a target.\n\nIn the JSON representation of a Bake file, properties are objects, and attributes are values assigned to those objects.\n\nThe following example shows the same Bake file in the HCL format:\n\nHCL is the preferred format for Bake files. Aside from syntactic differences, HCL lets you use features that the JSON and YAML formats don't support.\n\nThe examples in this document use the HCL format.\n\nA target reflects a single `docker build` invocation. Consider the following build command:\n\nYou can express this command in a Bake file as follows:\n\nThe following table shows the complete list of attributes that you can assign to a target:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| [`args`](#targetargs) | Map | Build arguments |\n| [`annotations`](#targetannotations) | List | Exporter annotations |\n| [`attest`](#targetattest) | List | Build attestations |\n| [`cache-from`](#targetcache-from) | List | External cache sources |\n| [`cache-to`](#targetcache-to) | List | External cache destinations |\n| [`context`](#targetcontext) | String | Set of files located in the specified path or URL |\n| [`contexts`](#targetcontexts) | Map | Additional build contexts |\n| [`dockerfile-inline`](#targetdockerfile-inline) | String | Inline Dockerfile string |\n| [`dockerfile`](#targetdockerfile) | String | Dockerfile location |\n| [`inherits`](#targetinherits) | List | Inherit attributes from other targets |\n| [`labels`](#targetlabels) | Map | Metadata for images |\n| [`matrix`](#targetmatrix) | Map | Define a set of variables that forks a target into multiple targets. |\n| [`name`](#targetname) | String | Override the target name when using a matrix. |\n| [`no-cache-filter`](#targetno-cache-filter) | List | Disable build cache for specific stages |\n| [`no-cache`](#targetno-cache) | Boolean | Disable build cache completely |\n| [`output`](#targetoutput) | List | Output destinations |\n| [`platforms`](#targetplatforms) | List | Target platforms |\n| [`pull`](#targetpull) | Boolean | Always pull images |\n| [`secret`](#targetsecret) | List | Secrets to expose to the build |\n| [`shm-size`](#targetshm-size) | List | Size of `/dev/shm` |\n| [`ssh`](#targetssh) | List | SSH agent sockets or keys to expose to the build |\n| [`tags`](#targettags) | List | Image names and tags |\n| [`target`](#targettarget) | String | Target build stage |\n| [`ulimits`](#targetulimits) | List | Ulimit options |\n\n### [`target.args`](#targetargs)\n\nUse the `args` attribute to define build arguments for the target. This has the same effect as passing a [`--build-arg`](https://docs.docker.com/reference/cli/docker/image/build/#build-arg) flag to the build command.\n\nYou can set `args` attributes to use `null` values. Doing so forces the `target` to use the `ARG` value specified in the Dockerfile.\n\n### [`target.annotations`](#targetannotations)\n\nThe `annotations` attribute lets you add annotations to images built with bake. The key takes a list of annotations, in the format of `KEY=VALUE`.\n\nis the same as\n\nBy default, the annotation is added to image manifests. You can configure the level of the annotations by adding a prefix to the annotation, containing a comma-separated list of all the levels that you want to annotate. The following example adds annotations to both the image index and manifests.\n\nRead about the supported levels in [Specifying annotation levels](https://docs.docker.com/build/building/annotations/#specifying-annotation-levels).\n\n### [`target.attest`](#targetattest)\n\nThe `attest` attribute lets you apply [build attestations](https://docs.docker.com/build/attestations/) to the target. This attribute accepts the long-form CSV version of attestation parameters.\n\n### [`target.cache-from`](#targetcache-from)\n\nBuild cache sources. The builder imports cache from the locations you specify. It uses the [Buildx cache storage backends](https://docs.docker.com/build/cache/backends/), and it works the same way as the [`--cache-from`](https://docs.docker.com/reference/cli/docker/buildx/build/#cache-from) flag. This takes a list value, so you can specify multiple cache sources.\n\n### [`target.cache-to`](#targetcache-to)\n\nBuild cache export destinations. The builder exports its build cache to the locations you specify. It uses the [Buildx cache storage backends](https://docs.docker.com/build/cache/backends/), and it works the same way as the [`--cache-to` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#cache-to). This takes a list value, so you can specify multiple cache export targets.\n\n### [`target.context`](#targetcontext)\n\nSpecifies the location of the build context to use for this target. Accepts a URL or a directory path. This is the same as the [build context](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context) positional argument that you pass to the build command.\n\nThis resolves to the current working directory (`\".\"`) by default.\n\n### [`target.contexts`](#targetcontexts)\n\nAdditional build contexts. This is the same as the [`--build-context` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context). This attribute takes a map, where keys result in named contexts that you can reference in your builds.\n\nYou can specify different types of contexts, such local directories, Git URLs, and even other Bake targets. Bake automatically determines the type of a context based on the pattern of the context value.\n\n| Context type | Example |\n| --- | --- |\n| Container image | `docker-image://alpine@sha256:0123456789` |\n| Git URL | `https://github.com/user/proj.git` |\n| HTTP URL | `https://example.com/files` |\n| Local directory | `../path/to/src` |\n| Bake target | `target:base` |\n\n#### [Pin an image version](#pin-an-image-version)\n\n#### [Use a local directory](#use-a-local-directory)\n\n#### [Use another target as base](#use-another-target-as-base)\n\n> **Note**\n> \n> You should prefer to use regular multi-stage builds over this option. You can Use this feature when you have multiple Dockerfiles that can't be easily merged into one.\n\n### [`target.dockerfile-inline`](#targetdockerfile-inline)\n\nUses the string value as an inline Dockerfile for the build target.\n\nThe `dockerfile-inline` takes precedence over the `dockerfile` attribute. If you specify both, Bake uses the inline version.\n\n### [`target.dockerfile`](#targetdockerfile)\n\nName of the Dockerfile to use for the build. This is the same as the [`--file` flag](https://docs.docker.com/reference/cli/docker/image/build/#file) for the `docker build` command.\n\nResolves to `\"Dockerfile\"` by default.\n\n### [`target.inherits`](#targetinherits)\n\nA target can inherit attributes from other targets. Use `inherits` to reference from one target to another.\n\nIn the following example, the `app-dev` target specifies an image name and tag. The `app-release` target uses `inherits` to reuse the tag name.\n\nThe `inherits` attribute is a list, meaning you can reuse attributes from multiple other targets. In the following example, the `app-release` target reuses attributes from both the `app-dev` and `_release` targets.\n\nWhen inheriting attributes from multiple targets and there's a conflict, the target that appears last in the `inherits` list takes precedence. The previous example defines the `BUILDX_EXPERIMENTAL` argument twice for the `app-release` target. It resolves to `0` because the `_release` target appears last in the inheritance chain:\n\n### [`target.labels`](#targetlabels)\n\nAssigns image labels to the build. This is the same as the `--label` flag for `docker build`.\n\nIt's possible to use a `null` value for labels. If you do, the builder uses the label value specified in the Dockerfile.\n\n### [`target.matrix`](#targetmatrix)\n\nA matrix strategy lets you fork a single target into multiple different variants, based on parameters that you specify. This works in a similar way to \\[Matrix strategies for GitHub Actions\\]. You can use this to reduce duplication in your bake definition.\n\nThe `matrix` attribute is a map of parameter names to lists of values. Bake builds each possible combination of values as a separate target.\n\nEach generated target **must** have a unique name. To specify how target names should resolve, use the `name` attribute.\n\nThe following example resolves the `app` target to `app-foo` and `app-bar`. It also uses the matrix value to define the [target build stage](#targettarget).\n\n#### [Multiple axes](#multiple-axes)\n\nYou can specify multiple keys in your matrix to fork a target on multiple axes. When using multiple matrix keys, Bake builds every possible variant.\n\nThe following example builds four targets:\n\n*   `app-foo-1-0`\n*   `app-foo-2-0`\n*   `app-bar-1-0`\n*   `app-bar-2-0`\n\n#### [Multiple values per matrix target](#multiple-values-per-matrix-target)\n\nIf you want to differentiate the matrix on more than just a single value, you can use maps as matrix values. Bake creates a target for each map, and you can access the nested values using dot notation.\n\nThe following example builds two targets:\n\n*   `app-foo-1-0`\n*   `app-bar-2-0`\n\n### [`target.name`](#targetname)\n\nSpecify name resolution for targets that use a matrix strategy. The following example resolves the `app` target to `app-foo` and `app-bar`.\n\n### [`target.no-cache-filter`](#targetno-cache-filter)\n\nDon't use build cache for the specified stages. This is the same as the `--no-cache-filter` flag for `docker build`. The following example avoids build cache for the `foo` build stage.\n\n### [`target.no-cache`](#targetno-cache)\n\nDon't use cache when building the image. This is the same as the `--no-cache` flag for `docker build`.\n\n### [`target.output`](#targetoutput)\n\nConfiguration for exporting the build output. This is the same as the [`--output` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#output). The following example configures the target to use a cache-only output,\n\n### [`target.platforms`](#targetplatforms)\n\nSet target platforms for the build target. This is the same as the [`--platform` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#platform). The following example creates a multi-platform build for three architectures.\n\n### [`target.pull`](#targetpull)\n\nConfigures whether the builder should attempt to pull images when building the target. This is the same as the `--pull` flag for `docker build`. The following example forces the builder to always pull all images referenced in the build target.\n\n### [`target.secret`](#targetsecret)\n\nDefines secrets to expose to the build target. This is the same as the [`--secret` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#secret).\n\nThis lets you [mount the secret](https://docs.docker.com/reference/dockerfile/#run---mounttypesecret) in your Dockerfile.\n\n### [`target.shm-size`](#targetshm-size)\n\nSets the size of the shared memory allocated for build containers when using `RUN` instructions.\n\nThe format is `<number><unit>`. `number` must be greater than `0`. Unit is optional and can be `b` (bytes), `k` (kilobytes), `m` (megabytes), or `g` (gigabytes). If you omit the unit, the system uses bytes.\n\nThis is the same as the `--shm-size` flag for `docker build`.\n\n> **Note**\n> \n> In most cases, it is recommended to let the builder automatically determine the appropriate configurations. Manual adjustments should only be considered when specific performance tuning is required for complex build scenarios.\n\n### [`target.ssh`](#targetssh)\n\nDefines SSH agent sockets or keys to expose to the build. This is the same as the [`--ssh` flag](https://docs.docker.com/reference/cli/docker/buildx/build/#ssh). This can be useful if you need to access private repositories during a build.\n\n### [`target.tags`](#targettags)\n\nImage names and tags to use for the build target. This is the same as the [`--tag` flag](https://docs.docker.com/reference/cli/docker/image/build/#tag).\n\n### [`target.target`](#targettarget)\n\nSet the target build stage to build. This is the same as the [`--target` flag](https://docs.docker.com/reference/cli/docker/image/build/#target).\n\n### [`target.ulimits`](#targetulimits)\n\nUlimits overrides the default ulimits of build's containers when using `RUN` instructions and are specified with a soft and hard limit as such: `<type>=<soft limit>[:<hard limit>]`, for example:\n\n> **Note**\n> \n> If you do not provide a `hard limit`, the `soft limit` is used for both values. If no `ulimits` are set, they are inherited from the default `ulimits` set on the daemon.\n\n> **Note**\n> \n> In most cases, it is recommended to let the builder automatically determine the appropriate configurations. Manual adjustments should only be considered when specific performance tuning is required for complex build scenarios.\n\nGroups allow you to invoke multiple builds (targets) at once.\n\nGroups take precedence over targets, if both exist with the same name. The following bake file builds the `default` group. Bake ignores the `default` target.\n\nThe HCL file format supports variable block definitions. You can use variables as build arguments in your Dockerfile, or interpolate them in attribute values in your Bake file.\n\nYou can assign a default value for a variable in the Bake file, or assign a `null` value to it. If you assign a `null` value, Buildx uses the default value from the Dockerfile instead.\n\nYou can override variable defaults set in the Bake file using environment variables. The following example sets the `TAG` variable to `dev`, overriding the default `latest` value shown in the previous example.\n\n### [Built-in variables](#built-in-variables)\n\nThe following variables are built-ins that you can use with Bake without having to define them.\n\n| Variable | Description |\n| --- | --- |\n| `BAKE_CMD_CONTEXT` | Holds the main context when building using a remote Bake file. |\n| `BAKE_LOCAL_PLATFORM` | Returns the current platform’s default platform specification (e.g. `linux/amd64`). |\n\n### [Use environment variable as default](#use-environment-variable-as-default)\n\nYou can set a Bake variable to use the value of an environment variable as a default value:\n\n### [Interpolate variables into attributes](#interpolate-variables-into-attributes)\n\nTo interpolate a variable into an attribute string value, you must use curly brackets. The following doesn't work:\n\nWrap the variable in curly brackets where you want to insert it:\n\nBefore you can interpolate a variable into an attribute, first you must declare it in the bake file, as demonstrated in the following example.\n\nA [set of general-purpose functions](https://github.com/docker/buildx/blob/master/bake/hclparser/stdlib.go) provided by [go-cty](https://github.com/zclconf/go-cty/tree/main/cty/function/stdlib) are available for use in HCL files:\n\nIn addition, [user defined functions](https://github.com/hashicorp/hcl/tree/main/ext/userfunc) are also supported:\n\n> **Note**\n> \n> See [User defined HCL functions](https://docs.docker.com/build/bake/hcl-funcs/) page for more details.",
    "title": "Bake file reference | Docker Docs\n",
    "description": "Learn about the syntax and available commands for the Buildx Bake file.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/attestations/sbom/",
    "markdown": "# SBOM attestations | Docker Docs\n\nSoftware Bill of Materials (SBOM) attestations describe what software artifacts an image contains, and artifacts used to create the image. Metadata included in an SBOM for describing software artifacts may include:\n\n*   Name of the artifact\n*   Version\n*   License type\n*   Authors\n*   Unique package identifier\n\nThere are benefits to indexing contents of an image during the build, as opposed to scanning a final image. When scanning happens as part of the build, you're able to detect software you use to build the image, that may not show up in the final image.\n\nThe SBOMs generated by BuildKit follow the SPDX standard. SBOMs attach to the final image as a JSON-encoded SPDX document, using the format defined by the [in-toto SPDX predicate](https://github.com/in-toto/attestation/blob/main/spec/predicates/spdx.md).\n\nTo create an SBOM attestation, pass the `--attest type=sbom` option to the `docker buildx build` command:\n\nAlternatively, you can use the shorthand `--sbom=true` option instead of `--attest type=sbom`.\n\nFor an example on how to add SBOM attestations with GitHub Actions, see [Add attestations with GitHub Actions](https://docs.docker.com/build/ci/github-actions/attestations/).\n\nAlways validate the generated SBOM for your image before you push your image to a registry.\n\nTo validate, you can build the image using the `local` exporter. Building with the `local` exporter saves the build result to your local filesystem instead of creating an image. Attestations are written to a JSON file in the root directory of your export.\n\nThe SBOM file appears in the root directory of the output, named `sbom.spdx.json`:\n\nBy default, BuildKit only scans the final stage of an image. The resulting SBOM doesn't include build-time dependencies installed in earlier stages, or that exist in the build context. This may cause you to overlook vulnerabilities in those dependencies, which could impact the security of your final build artifacts.\n\nFor instance, you might use [multi-stage builds](https://docs.docker.com/build/building/multi-stage/), with a `FROM scratch` stanza for your final stage to achieve a smaller image size.\n\nScanning the resulting image built using this Dockerfile example would not reveal build-time dependencies used in the `build` stage.\n\nTo include build-time dependencies from your Dockerfile, you can set the build arguments `BUILDKIT_SBOM_SCAN_CONTEXT` and `BUILDKIT_SBOM_SCAN_STAGE`. This expands the scanning scope to include the build context and additional stages.\n\nYou can set the arguments as global arguments (after declaring the Dockerfile syntax directive, before the first `FROM` command) or individually in each stage. If set globally, the value propagates to each stage in the Dockerfile.\n\nThe `BUILDKIT_SBOM_SCAN_CONTEXT` and `BUILDKIT_SBOM_SCAN_STAGE` build arguments are special values. You can't perform variable substitution using these arguments, and you can't set them using environment variables from within the Dockerfile. The only way to set these values is using explicit `ARG` command in the Dockerfile.\n\n### [Scan build context](#scan-build-context)\n\nTo scan the build context, set the `BUILDKIT_SBOM_SCAN_CONTEXT` to `true`.\n\nYou can use the `--build-arg` CLI option to override the value specified in the Dockerfile.\n\nNote that passing the option as a CLI argument only, without having declared it using `ARG` in the Dockerfile, will have no effect. You must specify the `ARG` in the Dockerfile, whereby you can override the context scanning behavior using `--build-arg`.\n\n### [Scan stages](#scan-stages)\n\nTo scan more than just the final stage, set the `BUILDKIT_SBOM_SCAN_STAGE` argument to true, either globally or in the specific stages that you want to scan. The following table demonstrates the different possible settings for this argument.\n\n| Value | Description |\n| --- | --- |\n| `BUILDKIT_SBOM_SCAN_STAGE=true` | Enables scanning for the current stage |\n| `BUILDKIT_SBOM_SCAN_STAGE=false` | Disables scanning for the current stage |\n| `BUILDKIT_SBOM_SCAN_STAGE=base,bin` | Enables scanning for the stages named `base` and `bin` |\n\nOnly stages that are built will be scanned. Stages that aren't dependencies of the target stage won't be built, or scanned.\n\nThe following Dockerfile example uses multi-stage builds to build a static website with [Hugo](https://gohugo.io/).\n\nSetting `ARG BUILDKIT_SBOM_SCAN_STAGE=true` in the `hugo` stage ensures that the final SBOM includes the information that Alpine Linux and Hugo were used to create the website.\n\nBuilding this image with the `local` exporter creates two JSON files:\n\nTo explore created SBOMs exported through the `image` exporter, you can use [`imagetools inspect`](https://docs.docker.com/reference/cli/docker/buildx/imagetools/inspect/).\n\nUsing the `--format` option, you can specify a template for the output. All SBOM-related data is available under the `.SBOM` attribute. For example, to get the raw contents of an SBOM in SPDX format:\n\n> **Tip**\n> \n> If the image is multi-platform, you can check the SBOM for a platform-specific index using `--format '{{ json (index .SBOM \"linux/amd64\").SPDX }}'`.\n\nYou can also construct more complex expressions using the full functionality of Go templates. For example, you can list all the installed packages and their version identifiers:\n\nBuildKit generates the SBOM using a scanner plugin. By default, it uses is the [BuildKit Syft scanner](https://github.com/docker/buildkit-syft-scanner) plugin. This plugin is built on top of [Anchore's Syft](https://github.com/anchore/syft), an open source tool for generating an SBOM.\n\nYou can select a different plugin to use with the `generator` option, specifying an image that implements the [BuildKit SBOM scanner protocol](https://github.com/moby/buildkit/blob/master/docs/attestations/sbom-protocol.md).\n\n> **Tip**\n> \n> The Docker Scout SBOM generator is available. See [Docker Scout SBOMs](https://docs.docker.com/scout/how-tos/view-create-sboms/).\n\nThe following JSON example shows what an SBOM attestation might look like.",
    "title": "SBOM attestations | Docker Docs\n",
    "description": "SBOM build attestations describe the contents of your image, and the packages used to build it. ",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/bake/remote-definition/",
    "markdown": "# Remote Bake file definition | Docker Docs\n\nYou can also build Bake files directly from a remote Git repository or HTTPS URL:\n\nAs you can see the context is fixed to `https://github.com/docker/cli.git` even if [no context is actually defined](https://github.com/docker/cli/blob/2776a6d694f988c0c1df61cad4bfac0f54e481c8/docker-bake.hcl#L17-L26) in the definition.\n\nIf you want to access the main context for bake command from a bake file that has been imported remotely, you can use the [`BAKE_CMD_CONTEXT` built-in var](https://docs.docker.com/build/bake/reference/#built-in-variables).\n\nYou can also specify the Bake definition to load from the remote repository, using the `--file` or `-f` flag:\n\nIf you want to use a combination of local and remote definitions, you can specify a local definition using the `cwd://` prefix with `-f`:\n\nIf you want to use a remote definition that lives in a private repository, you may need to specify credentials for Bake to use when fetching the definition.\n\nIf you can authenticate to the private repository using the default `SSH_AUTH_SOCK`, then you don't need to specify any additional authentication parameters for Bake. Bake automatically uses your default agent socket.\n\nFor authentication using an HTTP token, or custom SSH agents, use the following environment variables to configure Bake's authentication strategy:\n\n*   [`BUILDX_BAKE_GIT_AUTH_TOKEN`](https://docs.docker.com/build/building/variables/#buildx_bake_git_auth_token)\n*   [`BUILDX_BAKE_GIT_AUTH_HEADER`](https://docs.docker.com/build/building/variables/#buildx_bake_git_auth_header)\n*   [`BUILDX_BAKE_GIT_SSH`](https://docs.docker.com/build/building/variables/#buildx_bake_git_ssh)",
    "title": "Remote Bake file definition | Docker Docs\n",
    "description": "Build with Bake using a remote file definition using Git or HTTP",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/attestations/slsa-provenance/",
    "markdown": "# Provenance attestations | Docker Docs\n\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.2\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": { \"id\": \"\" },\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/docker/dockerfile@1\",\n        \"digest\": {\n          \"sha256\": \"9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\"\n        }\n      },\n      {\n        \"uri\": \"pkg:docker/golang@1.19.4-alpine?platform=linux%2Farm64\",\n        \"digest\": {\n          \"sha256\": \"a9b24b67dc83b3383d22a14941c2b2b2ca6a103d805cac6820fd1355943beaf1\"\n        }\n      }\n    ],\n    \"buildConfig\": {\n      \"llbDefinition\": [\n        {\n          \"id\": \"step4\",\n          \"op\": {\n            \"Op\": {\n              \"exec\": {\n                \"meta\": {\n                  \"args\": [\"/bin/sh\", \"-c\", \"go mod download -x\"],\n                  \"env\": [\n                    \"PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                    \"GOLANG_VERSION=1.19.4\",\n                    \"GOPATH=/go\",\n                    \"CGO_ENABLED=0\"\n                  ],\n                  \"cwd\": \"/src\"\n                },\n                \"mounts\": [\n                  { \"input\": 0, \"dest\": \"/\", \"output\": 0 },\n                  {\n                    \"input\": -1,\n                    \"dest\": \"/go/pkg/mod\",\n                    \"output\": -1,\n                    \"mountType\": 3,\n                    \"cacheOpt\": { \"ID\": \"//go/pkg/mod\" }\n                  },\n                  {\n                    \"input\": 1,\n                    \"selector\": \"/go.mod\",\n                    \"dest\": \"/src/go.mod\",\n                    \"output\": -1,\n                    \"readonly\": true\n                  },\n                  {\n                    \"input\": 1,\n                    \"selector\": \"/go.sum\",\n                    \"dest\": \"/src/go.sum\",\n                    \"output\": -1,\n                    \"readonly\": true\n                  }\n                ]\n              }\n            },\n            \"platform\": { \"Architecture\": \"arm64\", \"OS\": \"linux\" },\n            \"constraints\": {}\n          },\n          \"inputs\": [\"step3:0\", \"step1:0\"]\n        }\n      ]\n    },\n    \"metadata\": {\n      \"buildInvocationID\": \"edf52vxjyf9b6o5qd7vgx0gru\",\n      \"buildStartedOn\": \"2022-12-15T15:38:13.391980297Z\",\n      \"buildFinishedOn\": \"2022-12-15T15:38:14.274565297Z\",\n      \"reproducible\": false,\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": false\n      },\n      \"https://mobyproject.org/buildkit@v1#metadata\": {\n        \"vcs\": {\n          \"revision\": \"a9ba846486420e07d30db1107411ac3697ecab68-dirty\",\n          \"source\": \"git@github.com:<org>/<repo>.git\"\n        },\n        \"source\": {\n          \"locations\": {\n            \"step4\": {\n              \"locations\": [\n                {\n                  \"ranges\": [\n                    { \"start\": { \"line\": 5 }, \"end\": { \"line\": 5 } },\n                    { \"start\": { \"line\": 6 }, \"end\": { \"line\": 6 } },\n                    { \"start\": { \"line\": 7 }, \"end\": { \"line\": 7 } },\n                    { \"start\": { \"line\": 8 }, \"end\": { \"line\": 8 } }\n                  ]\n                }\n              ]\n            }\n          },\n          \"infos\": [\n            {\n              \"filename\": \"Dockerfile\",\n              \"data\": \"RlJPTSBhbHBpbmU6bGF0ZXN0Cg==\",\n              \"llbDefinition\": [\n                {\n                  \"id\": \"step0\",\n                  \"op\": {\n                    \"Op\": {\n                      \"source\": {\n                        \"identifier\": \"local://dockerfile\",\n                        \"attrs\": {\n                          \"local.differ\": \"none\",\n                          \"local.followpaths\": \"[\\\"Dockerfile\\\",\\\"Dockerfile.dockerignore\\\",\\\"dockerfile\\\"]\",\n                          \"local.session\": \"s4j58ngehdal1b5hn7msiqaqe\",\n                          \"local.sharedkeyhint\": \"dockerfile\"\n                        }\n                      }\n                    },\n                    \"constraints\": {}\n                  }\n                },\n                { \"id\": \"step1\", \"op\": { \"Op\": null }, \"inputs\": [\"step0:0\"] }\n              ]\n            }\n          ]\n        },\n        \"layers\": {\n          \"step2:0\": [\n            [\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:261da4162673b93e5c0e7700a3718d40bcc086dbf24b1ec9b54bca0b82300626\",\n                \"size\": 3259190\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:bc729abf26b5aade3c4426d388b5ea6907fe357dec915ac323bb2fa592d6288f\",\n                \"size\": 286218\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:7f1d6579712341e8062db43195deb2d84f63b0f2d1ed7c3d2074891085ea1b56\",\n                \"size\": 116878653\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:652874aefa1343799c619d092ab9280b25f96d97939d5d796437e7288f5599c9\",\n                \"size\": 156\n              }\n            ]\n          ]\n        }\n      }\n    }\n  }\n}\n```",
    "title": "Provenance attestations | Docker Docs\n",
    "description": "Provenance build attestations describe how and where your image was built. ",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/multi-platform/",
    "markdown": "# Multi-platform image with GitHub Actions\n\nYou can build [multi-platform images](https://docs.docker.com/build/building/multi-platform/) using the `platforms` option, as shown in the following example:\n\n> **Note**\n> \n> *   For a list of available platforms, see the [Docker Setup Buildx](https://github.com/marketplace/actions/docker-setup-buildx) action.\n> *   If you want support for more platforms, you can use QEMU with the [Docker Setup QEMU](https://github.com/docker/setup-qemu-action) action.\n\nIn the previous example, each platform is built on the same runner which can take a long time depending on the number of platforms and your Dockerfile.\n\nTo solve this issue you can use a matrix strategy to distribute the build for each platform across multiple runners and create manifest list using the [`buildx imagetools create` command](https://docs.docker.com/reference/cli/docker/buildx/imagetools/create/).\n\nThe following workflow will build the image for each platform on a dedicated runner using a matrix strategy and push by digest. Then, the `merge` job will create a manifest list and push it to Docker Hub.\n\nThis example also uses the [`metadata` action](https://github.com/docker/metadata-action) to set tags and labels.\n\n### [With Bake](#with-bake)\n\nIt's also possible to build on multiple runners using Bake, with the [bake action](https://github.com/docker/bake-action).\n\nYou can find a live example [in this GitHub repository](https://github.com/crazy-max/docker-linguist).\n\nThe following example achieves the same results as described in [the previous section](#distribute-build-across-multiple-runners).",
    "title": "Multi-platform image with GitHub Actions | Docker Docs\n",
    "description": "Build for multiple architectures with GitHub Actions using QEMU emulation or multiple native builders",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/push-multi-registries/",
    "markdown": "# Push to multiple registries with GitHub Actions\n\nThe following workflow will connect you to Docker Hub and GitHub Container Registry, and push the image to both registries:",
    "title": "Push to multiple registries with GitHub Actions | Docker Docs\n",
    "description": "Push to multiple registries with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/attestations/attestation-storage/",
    "markdown": "# Image Attestation Storage | Docker Docs\n\nBuildkit supports creating and attaching attestations to build artifacts. These attestations can provide valuable information from the build process, including, but not limited to: [SBOMs](https://en.wikipedia.org/wiki/Software_supply_chain), [SLSA Provenance](https://slsa.dev/provenance), build logs, etc.\n\nThis document describes the current custom format used to store attestations, which is designed to be compatible with current registry implementations today. In the future, we may support exporting attestations in additional formats.\n\nAttestations are stored as manifest objects in the image index, similar in style to OCI artifacts.\n\n### [Attestation Manifest](#attestation-manifest)\n\nAttestation manifests are attached to the root image index object, under a separate [OCI image manifest](https://github.com/opencontainers/image-spec/blob/main/manifest.md). Each attestation manifest can contain multiple [attestation blobs](#attestation-blob), with all the of the attestations in a manifest applying to a single platform manifest. All properties of standard OCI and Docker manifests continue to apply.\n\nThe image `config` descriptor will point to a valid [image config](https://github.com/opencontainers/image-spec/blob/main/config.md), however, it will not contain attestation-specific details, and should be ignored as it is only included for compatibility purposes.\n\nEach image layer in `layers` will contain a descriptor for a single [attestation blob](#attestation-blob). The `mediaType` of each layer will be set in accordance to its contents, one of:\n\n*   `application/vnd.in-toto+json` (currently, the only supported option)\n    \n    Indicates an in-toto attestation blob\n    \n\nAny unknown `mediaType`s should be ignored.\n\nTo assist attestation traversal, the following annotations may be set on each layer descriptor:\n\n*   `in-toto.io/predicate-type`\n    \n    This annotation will be set if the enclosed attestation is an in-toto attestation (currently, the only supported option). The annotation will be set to contain the same value as the `predicateType` property present inside the attestation.\n    \n    When present, this annotation may be used to find the specific attestation(s) they are looking for to avoid pulling the contents of the others.\n    \n\n### [Attestation Blob](#attestation-blob)\n\nThe contents of each layer will be a blob dependent on its `mediaType`.\n\n*   `application/vnd.in-toto+json`\n    \n    The blob contents will contain a full [in-toto attestation statement](https://github.com/in-toto/attestation/blob/main/spec/README.md#statement):\n    \n    The subject of the attestation should be set to be the same digest as the target manifest described in the [Attestation Manifest Descriptor](#attestation-manifest-descriptor), or some object within.\n    \n\n### [Attestation Manifest Descriptor](#attestation-manifest-descriptor)\n\nAttestation manifests are attached to the root [image index](https://github.com/opencontainers/image-spec/blob/main/image-index.md), in the `manifests` key, after all the original runnable manifests. All properties of standard OCI and Docker manifest descriptors continue to apply.\n\nTo prevent container runtimes from accidentally pulling or running the image described in the manifest, the `platform` property of the attestation manifest will be set to `unknown/unknown`, as follows:\n\nTo assist index traversal, the following annotations will be set on the manifest descriptor descriptor:\n\n*   `vnd.docker.reference.type`\n    \n    This annotation describes the type of the artifact, and will be set to `attestation-manifest`. If any other value is specified, the entire manifest should be ignored.\n    \n*   `vnd.docker.reference.digest`\n    \n    This annotation will contain the digest of the object in the image index that the attestation manifest refers to.\n    \n    When present, this annotation can be used to find the matching attestation manifest for a selected image manifest.\n    \n\n_Example showing an SBOM attestation attached to a `linux/amd64` image_\n\n#### [Image index (`sha256:94acc2ca70c40f3f6291681f37ce9c767e3d251ce01c7e4e9b98ccf148c26260`):](#image-index-sha25694acc2ca70c40f3f6291681f37ce9c767e3d251ce01c7e4e9b98ccf148c26260)\n\nThis image index defines two descriptors: an AMD64 image `sha256:23678f31..` and an attestation manifest `sha256:02cb9aa7..` for that image.\n\n#### [Attestation manifest (`sha256:02cb9aa7600e73fcf41ee9f0f19cc03122b2d8be43d41ce4b21335118f5dd943`):](#attestation-manifest-sha25602cb9aa7600e73fcf41ee9f0f19cc03122b2d8be43d41ce4b21335118f5dd943)\n\nThis attestation manifest contains one attestation that is an in-toto attestation that contains a \"https://spdx.dev/Document\" predicate, signifying that it is defining a SBOM for the image.\n\n#### [Image config (`sha256:a781560066f20ec9c28f2115a95a886e5e71c7c7aa9d8fd680678498b82f3ea3`):](#image-config-sha256a781560066f20ec9c28f2115a95a886e5e71c7c7aa9d8fd680678498b82f3ea3)\n\n#### [Layer content (`sha256:1ea07d5e55eb47ad0e6bbfa2ec180fb580974411e623814e519064c88f022f5c`):](#layer-content-sha2561ea07d5e55eb47ad0e6bbfa2ec180fb580974411e623814e519064c88f022f5c)\n\nAttestation body containing the SBOM data listing the packages used during the build in SPDX format.",
    "title": "Image Attestation Storage | Docker Docs\n",
    "description": "How SBOM and provenance attestations are stored for images.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/attestations/slsa-definitions/",
    "markdown": "# SLSA definitions | Docker Docs\n\nBuildKit supports the [creation of SLSA Provenance](https://docs.docker.com/build/attestations/slsa-provenance/) for builds that it runs.\n\nThe provenance format generated by BuildKit is defined by the [SLSA Provenance format](https://slsa.dev/provenance/v0.2).\n\nThis page describes how BuildKit populate each field, and whether the field gets included when you generate attestations `mode=min` and `mode=max`.\n\nCorresponds to [SLSA `builder.id`](https://slsa.dev/provenance/v0.2#builder.id).\n\nIncluded with `mode=min` and `mode=max`.\n\nThe `builder.id` field is set to the URL of the build, if available.\n\nThis value can be set using the `builder-id` attestation parameter.\n\nCorresponds to [SLSA `buildType`](https://slsa.dev/provenance/v0.2#buildType).\n\nIncluded with `mode=min` and `mode=max`.\n\nThe `buildType` field is set to `https://mobyproject.org/buildkit@v1` can be used to determine the structure of the provenance content.\n\nCorresponds to [SLSA `invocation.configSource`](https://slsa.dev/provenance/v0.2#invocation.configSource).\n\nIncluded with `mode=min` and `mode=max`.\n\nDescribes the config that initialized the build.\n\nFor builds initialized from a remote context, like a Git or HTTP URL, this object defines the context URL and its immutable digest in the `uri` and `digest` fields. For builds using a local frontend, such as a Dockerfile, the `entryPoint` field defines the path for the frontend file that initialized the build (`filename` frontend option).\n\nCorresponds to [SLSA `invocation.parameters`](https://slsa.dev/provenance/v0.2#invocation.parameters).\n\nPartially included with `mode=min`.\n\nDescribes build inputs passed to the build.\n\nThe following fields are included with both `mode=min` and `mode=max`:\n\n*   `locals` lists any local sources used in the build, including the build context and frontend file.\n    \n*   `frontend` defines type of BuildKit frontend used for the build. Currently, this can be `dockerfile.v0` or `gateway.v0`.\n    \n*   `args` defines the build arguments passed to the BuildKit frontend.\n    \n    The keys inside the `args` object reflect the options as BuildKit receives them. For example, `build-arg` and `label` prefixes are used for build arguments and labels, and `target` key defines the target stage that was built. The `source` key defines the source image for the Gateway frontend, if used.\n    \n\nThe following fields are only included with `mode=max`:\n\n*   `secrets` defines secrets used during the build. Note that actual secret values are not included.\n*   `ssh` defines the ssh forwards used during the build.\n\nCorresponds to [SLSA `invocation.environment`](https://slsa.dev/provenance/v0.2#invocation.environment).\n\nIncluded with `mode=min` and `mode=max`.\n\nThe only value BuildKit currently sets is the `platform` of the current build machine. Note that this is not necessarily the platform of the build result that can be determined from the `in-toto` subject field.\n\nCorresponds to [SLSA `materials`](https://slsa.dev/provenance/v0.2#materials).\n\nIncluded with `mode=min` and `mode=max`.\n\nDefines all the external artifacts that were part of the build. The value depends on the type of artifact:\n\n*   The URL of Git repositories containing source code for the image\n*   HTTP URLs if you are building from a remote tarball, or that was included using an `ADD` command in Dockerfile\n*   Any Docker images used during the build\n\nThe URLs to the Docker images will be in [Package URL](https://github.com/package-url/purl-spec) format.\n\nAll the build materials will include the immutable checksum of the artifact. When building from a mutable tag, you can use the digest information to determine if the artifact has been updated compared to when the build ran.\n\nCorresponds to [SLSA `buildConfig`](https://slsa.dev/provenance/v0.2#buildConfig).\n\nOnly included with `mode=max`.\n\nDefines the build steps performed during the build.\n\nBuildKit internally uses LLB definition to execute the build steps. The LLB definition of the build steps is defined in `buildConfig.llbDefinition` field.\n\nEach LLB step is the JSON definition of the [LLB ProtoBuf API](https://github.com/moby/buildkit/blob/v0.10.0/solver/pb/ops.proto). The dependencies for a vertex in the LLB graph can be found in the `inputs` field for every step.\n\nCorresponds to [SLSA `metadata.buildInvocationId`](https://slsa.dev/provenance/v0.2#metadata.buildIncocationId).\n\nIncluded with `mode=min` and `mode=max`.\n\nUnique identifier for the build invocation. When building a multi-platform image with a single build request, this value will be the shared by all the platform versions of the image.\n\nCorresponds to [SLSA `metadata.buildStartedOn`](https://slsa.dev/provenance/v0.2#metadata.buildStartedOn).\n\nIncluded with `mode=min` and `mode=max`.\n\nTimestamp when the build started.\n\nCorresponds to [SLSA `metadata.buildFinishedOn`](https://slsa.dev/provenance/v0.2#metadata.buildFinishedOn).\n\nIncluded with `mode=min` and `mode=max`.\n\nTimestamp when the build finished.\n\nCorresponds to [SLSA `metadata.completeness`](https://slsa.dev/provenance/v0.2#metadata.completeness).\n\nIncluded with `mode=min` and `mode=max`.\n\nDefines if the provenance information is complete.\n\n`completeness.parameters` is true if all the build arguments are included in the `invocation.parameters` field. When building with `min` mode, the build arguments are not included in the provenance information and parameters are not complete. Parameters are also not complete on direct LLB builds that did not use a frontend.\n\n`completeness.environment` is always true for BuildKit builds.\n\n`completeness.materials` is true if `materials` field includes all the dependencies of the build. When building from un-tracked source in a local directory, the materials are not complete, while when building from a remote Git repository all materials can be tracked by BuildKit and `completeness.materials` is true.\n\nCorresponds to [SLSA `metadata.reproducible`](https://slsa.dev/provenance/v0.2#metadata.reproducible).\n\nDefines if the build result is supposed to be byte-by-byte reproducible. This value can be set by the user with the `reproducible=true` attestation parameter.\n\nIncluded with `mode=min` and `mode=max`.\n\nThis extension field is set to true if the build was hermetic and did not access the network. In Dockerfiles, a build is hermetic if it does not use `RUN` commands or disables network with `--network=none` flag.\n\nPartially included with `mode=min`.\n\nThis extension field defines BuildKit-specific additional metadata that is not part of the SLSA provenance spec.\n\n### [`source`](#source)\n\nOnly included with `mode=max`.\n\nDefines a source mapping of LLB build steps, defined in the `buildConfig.llbDefinition` field, to their original source code (for example, Dockerfile commands). The `source.locations` field contains the ranges of all the Dockerfile commands ran in an LLB step. `source.infos` array contains the source code itself. This mapping is present if the BuildKit frontend provided it when creating the LLB definition.\n\n### [`layers`](#layers)\n\nOnly included with `mode=max`.\n\nDefines the layer mapping of LLB build step mounts defined in `buildConfig.llbDefinition` to the OCI descriptors of equivalent layers. This mapping is present if the layer data was available, usually when attestation is for an image or if the build step pulled in image data as part of the build.\n\n### [`vcs`](#vcs)\n\nIncluded with `mode=min` and `mode=max`.\n\nDefines optional metadata for the version control system used for the build. If a build uses a remote context from Git repository, BuildKit extracts the details of the version control system automatically and displays it in the `invocation.configSource` field. But if the build uses a source from a local directory, the VCS information is lost even if the directory contained a Git repository. In this case, the build client can send additional `vcs:source` and `vcs:revision` build options and BuildKit will add them to the provenance attestations as extra metadata. Note that, contrary to the `invocation.configSource` field, BuildKit doesn't verify the `vcs` values, and as such they can't be trusted and should only be used as a metadata hint.\n\nTo inspect the provenance that was generated and attached to a container image, you can use the `docker buildx imagetools` command to inspect the image in a registry. Inspecting the attestation displays the format described in the [attestation storage specification](https://docs.docker.com/build/attestations/attestation-storage/).\n\nFor example, inspecting a simple Docker image based on `alpine:latest` results in a provenance attestation similar to the following, for a `mode=min` build:\n\nFor a similar build, but with `mode=max`:",
    "title": "SLSA definitions | Docker Docs\n",
    "description": "How BuildKit populates the fields in the SLSA provenance attestations.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/dockerfile/frontend/",
    "markdown": "# Custom Dockerfile syntax | Docker Docs\n\nBuildKit supports loading frontends dynamically from container images. To use an external Dockerfile frontend, the first line of your [Dockerfile](https://docs.docker.com/reference/dockerfile/) needs to set the [`syntax` directive](https://docs.docker.com/reference/dockerfile/#syntax) pointing to the specific image you want to use:\n\nFor example:\n\nYou can also use the predefined `BUILDKIT_SYNTAX` build argument to set the frontend image reference on the command line:\n\nThis defines the location of the Dockerfile syntax that is used to build the Dockerfile. The BuildKit backend allows seamlessly using external implementations that are distributed as Docker images and execute inside a container sandbox environment.\n\nCustom Dockerfile implementations allow you to:\n\n*   Automatically get bug fixes without updating the Docker daemon\n*   Make sure all users are using the same implementation to build your Dockerfile\n*   Use the latest features without updating the Docker daemon\n*   Try out new features or third-party features before they are integrated in the Docker daemon\n*   Use [alternative build definitions, or create your own](https://github.com/moby/buildkit#exploring-llb)\n*   Build your own Dockerfile frontend with custom features\n\n> **Note**\n> \n> BuildKit ships with a built-in Dockerfile frontend, but it's recommended to use an external image to make sure that all users use the same version on the builder and to pick up bug fixes automatically without waiting for a new version of BuildKit or Docker Engine.\n\nDocker distributes official versions of the images that can be used for building Dockerfiles under `docker/dockerfile` repository on Docker Hub. There are two channels where new images are released: `stable` and `labs`.\n\n### [Stable channel](#stable-channel)\n\nThe `stable` channel follows [semantic versioning](https://semver.org/). For example:\n\n*   `docker/dockerfile:1` - kept updated with the latest `1.x.x` minor _and_ patch release.\n*   `docker/dockerfile:1.2` - kept updated with the latest `1.2.x` patch release, and stops receiving updates once version `1.3.0` is released.\n*   `docker/dockerfile:1.2.1` - immutable: never updated.\n\nWe recommend using `docker/dockerfile:1`, which always points to the latest stable release of the version 1 syntax, and receives both \"minor\" and \"patch\" updates for the version 1 release cycle. BuildKit automatically checks for updates of the syntax when performing a build, making sure you are using the most current version.\n\nIf a specific version is used, such as `1.2` or `1.2.1`, the Dockerfile needs to be updated manually to continue receiving bugfixes and new features. Old versions of the Dockerfile remain compatible with the new versions of the builder.\n\n### [Labs channel](#labs-channel)\n\nThe `labs` channel provides early access to Dockerfile features that are not yet available in the `stable` channel. `labs` images are released at the same time as stable releases, and follow the same version pattern, but use the `-labs` suffix, for example:\n\n*   `docker/dockerfile:labs` - latest release on `labs` channel.\n*   `docker/dockerfile:1-labs` - same as `dockerfile:1`, with experimental features enabled.\n*   `docker/dockerfile:1.2-labs` - same as `dockerfile:1.2`, with experimental features enabled.\n*   `docker/dockerfile:1.2.1-labs` - immutable: never updated. Same as `dockerfile:1.2.1`, with experimental features enabled.\n\nChoose a channel that best fits your needs. If you want to benefit from new features, use the `labs` channel. Images in the `labs` channel contain all the features in the `stable` channel, plus early access features. Stable features in the `labs` channel follow [semantic versioning](https://semver.org/), but early access features don't, and newer releases may not be backwards compatible. Pin the version to avoid having to deal with breaking changes.\n\nFor documentation on `labs` features, master builds, and nightly feature releases, refer to the description in [the BuildKit source repository on GitHub](https://github.com/moby/buildkit/blob/master/README.md). For a full list of available images, visit the [`docker/dockerfile` repository on Docker Hub](https://hub.docker.com/r/docker/dockerfile), and the [`docker/dockerfile-upstream` repository on Docker Hub](https://hub.docker.com/r/docker/dockerfile-upstream) for development builds.",
    "title": "Custom Dockerfile syntax | Docker Docs\n",
    "description": "Dive deep into the Dockerfile frontend, and learn about custom frontends",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/manage-tags-labels/",
    "markdown": "# Manage tags and labels with GitHub Actions\n\nIf you want an \"automatic\" tag management and [OCI Image Format Specification](https://github.com/opencontainers/image-spec/blob/master/annotations.md) for labels, you can do it in a dedicated setup step. The following workflow will use the [Docker Metadata Action](https://github.com/docker/metadata-action) to handle tags and labels based on GitHub Actions events and Git metadata:",
    "title": "Manage tags and labels with GitHub Actions | Docker Docs\n",
    "description": "Assign tags and labels to images automatically with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/secrets/",
    "markdown": "# Using secrets with GitHub Actions\n\nA build secret is sensitive information, such as a password or API token, consumed as part of the build process. Docker Build supports two forms of secrets:\n\n*   [Secret mounts](#secret-mounts) add secrets as files in the build container (under `/run/secrets` by default).\n*   [SSH mounts](#ssh-mounts) add SSH agent sockets or keys into the build container.\n\nThis page shows how to use secrets with GitHub Actions. For an introduction to secrets in general, see [Build secrets](https://docs.docker.com/build/building/secrets/).\n\nIn the following example uses and exposes the [`GITHUB_TOKEN` secret](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret) as provided by GitHub in your workflow.\n\nFirst, create a `Dockerfile` that uses the secret:\n\nIn this example, the secret name is `github_token`. The following workflow exposes this secret using the `secrets` input:\n\n> **Note**\n> \n> You can also expose a secret file to the build with the `secret-files` input:\n\nIf you're using [GitHub secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets) and need to handle multi-line value, you will need to place the key-value pair between quotes:\n\n| Key | Value |\n| --- | --- |\n| `MYSECRET` | `***********************` |\n| `GIT_AUTH_TOKEN` | `abcdefghi,jklmno=0123456789` |\n| `MYSECRET` | `aaaaaaaa\\nbbbbbbb\\nccccccccc` |\n| `FOO` | `bar` |\n| `EMPTYLINE` | `aaaa\\n\\nbbbb\\nccc` |\n| `JSON_SECRET` | `{\"key1\":\"value1\",\"key2\":\"value2\"}` |\n\n> **Note**\n> \n> Double escapes are needed for quote signs.\n\nSSH mounts let you authenticate with SSH servers. For example to perform a `git clone`, or to fetch application packages from a private repository.\n\nThe following Dockerfile example uses an SSH mount to fetch Go modules from a private GitHub repository.\n\nTo build this Dockerfile, you must specify an SSH mount that the builder can use in the steps with `--mount=type=ssh`.\n\nThe following GitHub Action workflow uses the `MrSquaare/ssh-setup-action` third-party action to bootstrap SSH setup on the GitHub runner. The action creates a private key defined by the GitHub Action secret `SSH_GITHUB_PPK` and adds it to the SSH agent socket file at `SSH_AUTH_SOCK`. The SSH mount in the build step assume `SSH_AUTH_SOCK` by default, so there's no need to specify the ID or path for the SSH agent socket explicitly.",
    "title": "Using secrets with GitHub Actions | Docker Docs\n",
    "description": "Example using secret mounts with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/dockerfile/release-notes/",
    "markdown": "# Dockerfile release notes | Docker Docs\n\nThis page contains information about the new features, improvements, known issues, and bug fixes in [Dockerfile reference](https://docs.docker.com/reference/dockerfile/).\n\nFor usage, see the [Dockerfile frontend syntax](https://docs.docker.com/build/dockerfile/frontend/) page.\n\n_2024-03-06_\n\n### [Stable](#stable)\n\n*   Variable expansion now allows string substitutions and trimming. [moby/buildkit#4427](https://github.com/moby/buildkit/pull/4427), [moby/buildkit#4287](https://github.com/moby/buildkit/pull/4287)\n*   Named contexts with local sources now correctly transfer only the files used in the Dockerfile instead of the full source directory. [moby/buildkit#4161](https://github.com/moby/buildkit/pull/4161)\n*   Dockerfile now better validates the order of stages and returns nice errors with stack traces if stages are in incorrect order. [moby/buildkit#4568](https://github.com/moby/buildkit/pull/4568), [moby/buildkit#4567](https://github.com/moby/buildkit/pull/4567)\n*   History commit messages now contain flags used with `COPY` and `ADD`. [moby/buildkit#4597](https://github.com/moby/buildkit/pull/4597)\n*   Progress messages for `ADD` commands from Git and HTTP sources have been improved. [moby/buildkit#4408](https://github.com/moby/buildkit/pull/4408)\n\n### [Labs](#labs)\n\n*   New `--parents` flag has been added to `COPY` for copying files while keeping the parent directory structure. [moby/buildkit#4598](https://github.com/moby/buildkit/pull/4598), [moby/buildkit#3001](https://github.com/moby/buildkit/pull/3001), [moby/buildkit#4720](https://github.com/moby/buildkit/pull/4720), [moby/buildkit#4728](https://github.com/moby/buildkit/pull/4728), [docs](https://docs.docker.com/reference/dockerfile/#copy---parents)\n*   New `--exclude` flag can be used in `COPY` and `ADD` commands to apply filter to copied files. [moby/buildkit#4561](https://github.com/moby/buildkit/pull/4561), [docs](https://docs.docker.com/reference/dockerfile/#copy---exclude)\n\n_2023-06-13_\n\n### [New](#new)\n\n*   Add `--start-interval` flag to the [`HEALTHCHECK` instruction](https://docs.docker.com/reference/dockerfile/#healthcheck).\n\nThe following features have graduated from the labs channel to stable:\n\n*   The `ADD` instruction can now [import files directly from Git URLs](https://docs.docker.com/reference/dockerfile/#adding-a-git-repository-add-git-ref-dir)\n*   The `ADD` instruction now supports [`--checksum` flag](https://docs.docker.com/reference/dockerfile/#verifying-a-remote-file-checksum-add---checksumchecksum-http-src-dest) to validate the contents of the remote URL contents\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements)\n\n*   Variable substitution now supports additional POSIX compatible variants without `:`. [moby/buildkit#3611](https://github.com/moby/buildkit/pull/3611)\n*   Exported Windows images now contain OSVersion and OSFeatures values from base image. [moby/buildkit#3619](https://github.com/moby/buildkit/pull/3619)\n*   Changed the permissions for Heredocs to 0644. [moby/buildkit#3992](https://github.com/moby/buildkit/pull/3992)\n\n_2023-02-14_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-1)\n\n*   Fix building from Git reference that is missing branch name but contains a subdir\n*   386 platform image is now included in the release\n\n_2023-01-18_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-2)\n\n*   Fix possible panic when warning conditions appear in multi-platform builds\n\n_2023-01-10_\n\n> Experimental\n> \n> The \"labs\" channel provides early access to Dockerfile features that are not yet available in the stable channel.\n\n### [New](#new-1)\n\n*   `ADD` command now supports [`--checksum` flag](https://docs.docker.com/reference/dockerfile/#verifying-a-remote-file-checksum-add---checksumchecksum-http-src-dest) to validate the contents of the remote URL contents\n\n_2023-01-10_\n\n### [New](#new-2)\n\n*   `ADD` command can now [import files directly from Git URLs](https://docs.docker.com/reference/dockerfile/#adding-a-git-repository-add-git-ref-dir)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-3)\n\n*   Named contexts now support `oci-layout://` protocol for including images from local OCI layout structure\n*   Dockerfile now supports secondary requests for listing all build targets or printing outline of accepted parameters for a specific build target\n*   Dockerfile `#syntax` directive that redirects to an external frontend image now allows the directive to be also set with `//` comments or JSON. The file may also contain a shebang header\n*   Named context can now be initialized with an empty scratch image\n*   Named contexts can now be initialized with an SSH Git URL\n*   Fix handling of `ONBUILD` when importing Schema1 images\n\n_2022-08-23_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-4)\n\n*   Fix creation timestamp not getting reset when building image from `docker-image://` named context\n*   Fix passing `--platform` flag of `FROM` command when loading `docker-image://` named context\n\n_2022-05-06_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-5)\n\n*   Fix loading certain environment variables from an image passed with built context\n\n_2022-04-08_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-6)\n\n*   Fix named context resolution for cross-compilation cases from input when input is built for a different platform\n\n_2022-03-09_\n\n### [New](#new-3)\n\n*   [`COPY --link` and `ADD --link`](https://docs.docker.com/reference/dockerfile/#copy---link) allow copying files with increased cache efficiency and rebase images without requiring them to be rebuilt. `--link` copies files to a separate layer and then uses new LLB MergeOp implementation to chain independent layers together\n*   [Heredocs](https://docs.docker.com/reference/dockerfile/#here-documents) support have been promoted from labs channel to stable. This feature allows writing multiline inline scripts and files\n*   Additional [named build contexts](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context) can be passed to build to add or overwrite a stage or an image inside the build. A source for the context can be a local source, image, Git, or HTTP URL\n*   [`BUILDKIT_SANDBOX_HOSTNAME` build-arg](https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args) can be used to set the default hostname for the `RUN` steps\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-7)\n\n*   When using a cross-compilation stage, the target platform for a step is now seen on progress output\n*   Fix some cases where Heredocs incorrectly removed quotes from content\n\n_2021-10-04_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-8)\n\n*   Fix parsing \"required\" mount key without a value\n\n_2021-07-16_\n\n> Experimental\n> \n> The \"labs\" channel provides early access to Dockerfile features that are not yet available in the stable channel.\n\n### [New](#new-4)\n\n*   `RUN` and `COPY` commands now support [Here-document syntax](https://docs.docker.com/reference/dockerfile/#here-documents) allowing writing multiline inline scripts and files\n\n_2021-07-16_\n\n### [New](#new-5)\n\n*   `RUN` command allows [`--network` flag](https://docs.docker.com/reference/dockerfile/#run---network) for requesting a specific type of network conditions. `--network=host` requires allowing `network.host` entitlement. This feature was previously only available on labs channel\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-9)\n\n*   `ADD` command with a remote URL input now correctly handles the `--chmod` flag\n*   Values for [`RUN --mount` flag](https://docs.docker.com/reference/dockerfile/#run---mount) now support variable expansion, except for the `from` field\n*   Allow [`BUILDKIT_MULTI_PLATFORM` build arg](https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args) to force always creating multi-platform image, even if only contains single platform\n\n_2020-12-12_\n\n> Experimental\n> \n> The \"labs\" channel provides early access to Dockerfile features that are not yet available in the stable channel.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-10)\n\n*   `RUN` command allows [`--network` flag](https://docs.docker.com/reference/dockerfile/#run---network) for requesting a specific type of network conditions. `--network=host` requires allowing `network.host` entitlement\n\n_2020-12-12_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-11)\n\n*   Revert \"Ensure ENTRYPOINT command has at least one argument\"\n*   Optimize processing `COPY` calls on multi-platform cross-compilation builds\n\n_2020-12-03_\n\n> Experimental\n> \n> The \"labs\" channel provides early access to Dockerfile features that are not yet available in the stable channel.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-12)\n\n*   Experimental channel has been renamed to _labs_\n\n_2020-12-03_\n\n### [New](#new-6)\n\n*   [`RUN --mount` syntax](https://docs.docker.com/reference/dockerfile/#run---mount) for creating secret, ssh, bind, and cache mounts have been moved to mainline channel\n*   [`ARG` command](https://docs.docker.com/reference/dockerfile/#arg) now supports defining multiple build args on the same line similarly to `ENV`\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-13)\n\n*   Metadata load errors are now handled as fatal to avoid incorrect build results\n*   Allow lowercase Dockerfile name\n*   `--chown` flag in `ADD` now allows parameter expansion\n*   `ENTRYPOINT` requires at least one argument to avoid creating broken images\n\n_2020-04-18_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-14)\n\n*   Forward `FrontendInputs` to the gateway\n\n_2019-07-31_\n\n> Experimental\n> \n> The \"labs\" channel provides early access to Dockerfile features that are not yet available in the stable channel.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-15)\n\n*   Allow setting security mode for a process with `RUN --security=sandbox|insecure`\n*   Allow setting uid/gid for [cache mounts](https://docs.docker.com/reference/dockerfile/#run---mounttypecache)\n*   Avoid requesting internally linked paths to be pulled to build context\n*   Ensure missing cache IDs default to target paths\n*   Allow setting namespace for cache mounts with [`BUILDKIT_CACHE_MOUNT_NS` build arg](https://docs.docker.com/reference/dockerfile/#buildkit-built-in-build-args)\n\n_2019-07-31_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-16)\n\n*   Fix workdir creation with correct user and don't reset custom ownership\n*   Fix handling empty build args also used as `ENV`\n*   Detect circular dependencies\n\n_2019-04-27_\n\n### [New](#new-7)\n\n*   `ADD/COPY` commands now support implementation based on `llb.FileOp` and do not require helper image if builtin file operations support is available\n*   `--chown` flag for `COPY` command now supports variable expansion\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-17)\n\n*   To find the files ignored from the build context Dockerfile frontend will first look for a file `<path/to/Dockerfile>.dockerignore` and if it is not found `.dockerignore` file will be looked up from the root of the build context. This allows projects with multiple Dockerfiles to use different `.dockerignore` definitions",
    "title": "Dockerfile release notes | Docker Docs\n",
    "description": "Release notes for Dockerfile frontend",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/buildkit/",
    "markdown": "# BuildKit | Docker Docs\n\n[BuildKit](https://github.com/moby/buildkit) is an improved backend to replace the legacy builder. BuildKit is the default builder for users on Docker Desktop, and Docker Engine as of version 23.0.\n\nBuildKit provides new functionality and improves your builds' performance. It also introduces support for handling more complex scenarios:\n\n*   Detect and skip executing unused build stages\n*   Parallelize building independent build stages\n*   Incrementally transfer only the changed files in your [build context](https://docs.docker.com/build/building/context/) between builds\n*   Detect and skip transferring unused files in your [build context](https://docs.docker.com/build/building/context/)\n*   Use [Dockerfile frontend](https://docs.docker.com/build/dockerfile/frontend/) implementations with many new features\n*   Avoid side effects with rest of the API (intermediate images and containers)\n*   Prioritize your build cache for automatic pruning\n\nApart from many new features, the main areas BuildKit improves on the current experience are performance, storage management, and extensibility. From the performance side, a significant update is a new fully concurrent build graph solver. It can run build steps in parallel when possible and optimize out commands that don't have an impact on the final result. We have also optimized the access to the local source files. By tracking only the updates made to these files between repeated build invocations, there is no need to wait for local files to be read or uploaded before the work can begin.\n\nAt the core of BuildKit is a [Low-Level Build (LLB)](https://github.com/moby/buildkit#exploring-llb) definition format. LLB is an intermediate binary format that allows developers to extend BuildKit. LLB defines a content-addressable dependency graph that can be used to put together very complex build definitions. It also supports features not exposed in Dockerfiles, like direct data mounting and nested invocation.\n\n![](https://docs.docker.com/build/images/buildkit-dag.svg)\n\nEverything about execution and caching of your builds is defined in LLB. The caching model is entirely rewritten compared to the legacy builder. Rather than using heuristics to compare images, LLB directly tracks the checksums of build graphs and content mounted to specific operations. This makes it much faster, more precise, and portable. The build cache can even be exported to a registry, where it can be pulled on-demand by subsequent invocations on any host.\n\nLLB can be generated directly using a [golang client package](https://pkg.go.dev/github.com/moby/buildkit/client/llb) that allows defining the relationships between your build operations using Go language primitives. This gives you full power to run anything you can imagine, but will probably not be how most people will define their builds. Instead, most users would use a frontend component, or LLB nested invocation, to run a prepared set of build steps.\n\nA frontend is a component that takes a human-readable build format and converts it to LLB so BuildKit can execute it. Frontends can be distributed as images, and the user can target a specific version of a frontend that is guaranteed to work for the features used by their definition.\n\nFor example, to build a [Dockerfile](https://docs.docker.com/reference/dockerfile/) with BuildKit, you would [use an external Dockerfile frontend](https://docs.docker.com/build/dockerfile/frontend/).\n\nBuildKit is the default builder for users on Docker Desktop and Docker Engine v23.0 and later.\n\nIf you have installed Docker Desktop, you don't need to enable BuildKit. If you are running a version of Docker Engine version earlier than 23.0, you can enable BuildKit either by setting an environment variable, or by making BuildKit the default setting in the daemon configuration.\n\nTo set the BuildKit environment variable when running the `docker build` command, run:\n\n> **Note**\n> \n> [Buildx](https://docs.docker.com/build/architecture/#buildx) always uses BuildKit.\n\nTo use Docker BuildKit by default, edit the Docker daemon configuration in `/etc/docker/daemon.json` as follows, and restart the daemon.\n\nIf the `/etc/docker/daemon.json` file doesn't exist, create new file called `daemon.json` and then add the following to the file. And restart the Docker daemon.\n\n> **Warning**\n> \n> BuildKit only fully supports building Linux containers. Windows container support is experimental, and is tracked in [`moby/buildkit#616`](https://github.com/moby/buildkit/issues/616).\n\nBuildKit has experimental support for Windows containers (WCOW) as of version 0.13. This section walks you through the steps for trying it out. We appreciate any feedback you submit by [opening an issue here](https://github.com/moby/buildkit/issues/new), especially `buildkitd.exe`.\n\n### [Known limitations](#known-limitations)\n\n*   BuildKit on Windows currently only supports the `containerd` worker. Support for non-OCI workers is tracked in [moby/buildkit#4836](https://github.com/moby/buildkit/issues/4836).\n\n### [Prerequisites](#prerequisites)\n\n*   Architecture: `amd64`, `arm64` (binaries available but not officially tested yet).\n*   Supported OS: Windows Server 2019, Windows Server 2022, Windows 11.\n*   Base images: `ServerCore:ltsc2019`, `ServerCore:ltsc2022`, `NanoServer:ltsc2022`. See the [compatibility map here](https://learn.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility?tabs=windows-server-2019%2Cwindows-11#windows-server-host-os-compatibility).\n*   Docker Desktop version 4.29 or later\n\n### [Steps](#steps)\n\n> **Note**\n> \n> The following commands require administrator (elevated) privileges in a PowerShell terminal.\n\n1.  Enable the **Hyper-V** and **Containers** Windows features.\n    \n    If you see `RestartNeeded` as `True`, restart your machine and re-open a PowerShell terminal as an administrator. Otherwise, continue with the next step.\n    \n2.  Switch to Windows containers in Docker Desktop.\n    \n    Select the Docker icon in the taskbar, and then **Switch to Windows containers...**.\n    \n3.  Install containerd version 1.7.7 or later following the setup instructions [here](https://github.com/containerd/containerd/blob/main/docs/getting-started.md#installing-containerd-on-windows).\n    \n4.  Download and extract the latest BuildKit release.\n    \n5.  Install BuildKit binaries on `PATH`.\n    \n6.  Start the BuildKit daemon.\n    \n7.  In another terminal with administrator privileges, create a remote builder that uses the local BuildKit daemon.\n    \n    > **Note**\n    > \n    > This requires Docker Desktop version 4.29 or later.\n    \n8.  Verify the builder connection by running `docker buildx inspect`.\n    \n    The output should indicate that the builder platform is Windows, and that the endpoint of the builder is a named pipe.\n    \n9.  Create a Dockerfile and build a `hello-world` image.\n    \n10.  Build and push the image to a registry.\n    \n11.  After pushing to the registry, run the image with `docker run`.",
    "title": "BuildKit | Docker Docs\n",
    "description": "Introduction and overview of BuildKit",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/cache/",
    "markdown": "# Cache management with GitHub Actions\n\nThis page contains examples on using the cache storage backends with GitHub Actions.\n\n> **Note**\n> \n> See [Cache storage backends](https://docs.docker.com/build/cache/backends/) for more details about cache storage backends.\n\nIn most cases you want to use the [inline cache exporter](https://docs.docker.com/build/cache/backends/inline/). However, note that the `inline` cache exporter only supports `min` cache mode. To use `max` cache mode, push the image and the cache separately using the registry cache exporter with the `cache-to` option, as shown in the [registry cache example](#registry-cache).\n\nYou can import/export cache from a cache manifest or (special) image configuration on the registry with the [registry cache exporter](https://docs.docker.com/build/cache/backends/registry/).\n\n### [Cache backend API](#cache-backend-api)\n\n> Experimental\n> \n> This cache exporter is experimental. Please provide feedback on [BuildKit repository](https://github.com/moby/buildkit) if you experience any issues.\n\nThe [GitHub Actions cache exporter](https://docs.docker.com/build/cache/backends/gha/) backend uses the [GitHub Cache API](https://github.com/tonistiigi/go-actions-cache/blob/master/api.md) to fetch and upload cache blobs. That's why you should only use this cache backend in a GitHub Action workflow, as the `url` (`$ACTIONS_CACHE_URL`) and `token` (`$ACTIONS_RUNTIME_TOKEN`) attributes only get populated in a workflow context.\n\n### [Cache mounts](#cache-mounts)\n\nBuildKit doesn't preserve cache mounts in the GitHub Actions cache by default. If you wish to put your cache mounts into GitHub Actions cache and reuse it between builds, you can use a workaround provided by [`reproducible-containers/buildkit-cache-dance`](https://github.com/reproducible-containers/buildkit-cache-dance).\n\nThis GitHub Action creates temporary containers to extract and inject the cache mount data with your Docker build steps.\n\nThe following example shows how to use this workaround with a Go project.\n\nExample Dockerfile in `build/package/Dockerfile`\n\nExample CI action\n\nFor more information about this workaround, refer to the [GitHub repository](https://github.com/reproducible-containers/buildkit-cache-dance).\n\n### [Local cache](#local-cache)\n\n> **Warning**\n> \n> At the moment, old cache entries aren't deleted, so the cache size [keeps growing](https://github.com/docker/build-push-action/issues/252). The following example uses the `Move cache` step as a workaround (see [`moby/buildkit#1896`](https://github.com/moby/buildkit/issues/1896) for more info).\n\nYou can also leverage [GitHub cache](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows) using the [actions/cache](https://github.com/actions/cache) and [local cache exporter](https://docs.docker.com/build/cache/backends/local/) with this action:",
    "title": "Cache management with GitHub Actions | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/test-before-push/",
    "markdown": "# Test before push with GitHub Actions\n\nIn some cases, you might want to validate that the image works as expected before pushing it. The following workflow implements several steps to achieve this:\n\n1.  Build and export the image to Docker\n2.  Test your image\n3.  Multi-platform build and push the image\n\n> **Note**\n> \n> The `linux/amd64` image is only built once in this workflow. The image is built once, and the following steps use the internal cache from the first `Build and push` step. The second `Build and push` step only builds `linux/arm64`.",
    "title": "Test before push with GitHub Actions | Docker Docs\n",
    "description": "Here's how you can validate an image, before pushing it to a registry",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/buildkit/configure/",
    "markdown": "# Configure BuildKit | Docker Docs\n\nIf you create a `docker-container` or `kubernetes` builder with Buildx, you can apply a custom [BuildKit configuration](https://docs.docker.com/build/buildkit/toml-configuration/) by passing the [`--config` flag](https://docs.docker.com/reference/cli/docker/buildx/create/#config) to the `docker buildx create` command.\n\nYou can define a registry mirror to use for your builds. Doing so redirects BuildKit to pull images from a different hostname. The following steps exemplify defining a mirror for `docker.io` (Docker Hub) to `mirror.gcr.io`.\n\n1.  Create a TOML at `/etc/buildkitd.toml` with the following content:\n    \n    > **Note**\n    > \n    > `debug = true` turns on debug requests in the BuildKit daemon, which logs a message that shows when a mirror is being used.\n    \n2.  Create a `docker-container` builder that uses this BuildKit configuration:\n    \n3.  Build an image:\n    \n\nThe BuildKit logs for this builder now shows that it uses the GCR mirror. You can tell by the fact that the response messages include the `x-goog-*` HTTP headers.\n\nIf you specify registry certificates in the BuildKit configuration, the daemon copies the files into the container under `/etc/buildkit/certs`. The following steps show adding a self-signed registry certificate to the BuildKit configuration.\n\n1.  Add the following configuration to `/etc/buildkitd.toml`:\n    \n    This tells the builder to push images to the `myregistry.com` registry using the certificates in the specified location (`/etc/certs`).\n    \n2.  Create a `docker-container` builder that uses this configuration:\n    \n3.  Inspect the builder's configuration file (`/etc/buildkit/buildkitd.toml`), it shows that the certificate configuration is now configured in the builder.\n    \n4.  Verify that the certificates are inside the container:\n    \n\nNow you can push to the registry using this builder, and it will authenticate using the certificates:\n\nCNI networking for builders can be useful for dealing with network port contention during concurrent builds. CNI is [not yet](https://github.com/moby/buildkit/issues/28) available in the default BuildKit image. But you can create your own image that includes CNI support.\n\nThe following Dockerfile example shows a custom BuildKit image with CNI support. It uses the [CNI config for integration tests](https://github.com/moby/buildkit/blob/master//hack/fixtures/cni.json) in BuildKit as an example. Feel free to include your own CNI configuration.\n\nNow you can build this image, and create a builder instance from it using [the `--driver-opt image` option](https://docs.docker.com/reference/cli/docker/buildx/create/#driver-opt):\n\n### [Max parallelism](#max-parallelism)\n\nYou can limit the parallelism of the BuildKit solver, which is particularly useful for low-powered machines, using a [BuildKit configuration](https://docs.docker.com/build/buildkit/toml-configuration/) while creating a builder with the [`--config` flags](https://docs.docker.com/reference/cli/docker/buildx/create/#config).\n\nNow you can [create a `docker-container` builder](https://docs.docker.com/build/drivers/docker-container/) that will use this BuildKit configuration to limit parallelism.\n\n### [TCP connection limit](#tcp-connection-limit)\n\nTCP connections are limited to 4 simultaneous connections per registry for pulling and pushing images, plus one additional connection dedicated to metadata requests. This connection limit prevents your build from getting stuck while pulling images. The dedicated metadata connection helps reduce the overall build time.\n\nMore information: [moby/buildkit#2259](https://github.com/moby/buildkit/pull/2259)",
    "title": "Configure BuildKit | Docker Docs\n",
    "description": "Learn how to configure BuildKit for your builder.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/local-registry/",
    "markdown": "# Local registry with GitHub Actions\n\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver-opts: network=host\n      \n      - name: Build and push to local registry\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: localhost:5000/name/app:latest\n      \n      - name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest          \n```",
    "title": "Local registry with GitHub Actions | Docker Docs\n",
    "description": "Create and use a local OCI registry with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/export-docker/",
    "markdown": "# Export to Docker with GitHub Actions\n\nYou may want your build result to be available in the Docker client through `docker images` to be able to use it in another step of your workflow:",
    "title": "Export to Docker with GitHub Actions | Docker Docs\n",
    "description": "Load the build results to the image store with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/buildkit/toml-configuration/",
    "markdown": "# buildkitd.toml | Docker Docs\n\n```\n# debug enables additional debug logging\ndebug = true\n# trace enables additional trace logging (very verbose, with potential performance impacts)\ntrace = true\n# root is where all buildkit state is stored.\nroot = \"/var/lib/buildkit\"\n# insecure-entitlements allows insecure entitlements, disabled by default.\ninsecure-entitlements = [ \"network.host\", \"security.insecure\" ]\n\n[log]\n  # log formatter: json or text\n  format = \"text\"\n\n[dns]\n  nameservers=[\"1.1.1.1\",\"8.8.8.8\"]\n  options=[\"edns0\"]\n  searchDomains=[\"example.com\"]\n\n[grpc]\n  address = [ \"tcp://0.0.0.0:1234\" ]\n  # debugAddress is address for attaching go profiles and debuggers.\n  debugAddress = \"0.0.0.0:6060\"\n  uid = 0\n  gid = 0\n  [grpc.tls]\n    cert = \"/etc/buildkit/tls.crt\"\n    key = \"/etc/buildkit/tls.key\"\n    ca = \"/etc/buildkit/tlsca.crt\"\n\n[otel]\n  # OTEL collector trace socket path\n  socketPath = \"/run/buildkit/otel-grpc.sock\"\n\n# config for build history API that stores information about completed build commands\n[history]\n  # maxAge is the maximum age of history entries to keep, in seconds.\n  maxAge = 172800\n  # maxEntries is the maximum number of history entries to keep.\n  maxEntries = 50\n\n[worker.oci]\n  enabled = true\n  # platforms is manually configure platforms, detected automatically if unset.\n  platforms = [ \"linux/amd64\", \"linux/arm64\" ]\n  snapshotter = \"auto\" # overlayfs or native, default value is \"auto\".\n  rootless = false # see docs/rootless.md for the details on rootless mode.\n  # Whether run subprocesses in main pid namespace or not, this is useful for\n  # running rootless buildkit inside a container.\n  noProcessSandbox = false\n  gc = true\n  # gckeepstorage can be an integer number of bytes (e.g. 512000000), a string\n  # with a unit (e.g. \"512MB\"), or a string percentage of the total disk\n  # space (e.g. \"10%\")\n  gckeepstorage = 9000\n  # alternate OCI worker binary name(example 'crun'), by default either \n  # buildkit-runc or runc binary is used\n  binary = \"\"\n  # name of the apparmor profile that should be used to constrain build containers.\n  # the profile should already be loaded (by a higher level system) before creating a worker.\n  apparmor-profile = \"\"\n  # limit the number of parallel build steps that can run at the same time\n  max-parallelism = 4\n  # maintain a pool of reusable CNI network namespaces to amortize the overhead\n  # of allocating and releasing the namespaces\n  cniPoolSize = 16\n\n  [worker.oci.labels]\n    \"foo\" = \"bar\"\n\n  [[worker.oci.gcpolicy]]\n    # keepBytes can be an integer number of bytes (e.g. 512000000), a string\n    # with a unit (e.g. \"512MB\"), or a string percentage of the total disk\n    # space (e.g. \"10%\")\n    keepBytes = \"512MB\"\n    # keepDuration can be an integer number of seconds (e.g. 172800), or a\n    # string duration (e.g. \"48h\")\n    keepDuration = \"48h\"\n    filters = [ \"type==source.local\", \"type==exec.cachemount\", \"type==source.git.checkout\"]\n  [[worker.oci.gcpolicy]]\n    all = true\n    keepBytes = 1024000000\n\n[worker.containerd]\n  address = \"/run/containerd/containerd.sock\"\n  enabled = true\n  platforms = [ \"linux/amd64\", \"linux/arm64\" ]\n  namespace = \"buildkit\"\n  gc = true\n  # gckeepstorage sets storage limit for default gc profile, in bytes.\n  gckeepstorage = 9000\n  # maintain a pool of reusable CNI network namespaces to amortize the overhead\n  # of allocating and releasing the namespaces\n  cniPoolSize = 16\n\n  [worker.containerd.labels]\n    \"foo\" = \"bar\"\n\n  # configure the containerd runtime\n  [worker.containerd.runtime]\n    name = \"io.containerd.runc.v2\"\n    path = \"/path/to/containerd/runc/shim\"\n    options = { BinaryName = \"runc\" }\n\n  [[worker.containerd.gcpolicy]]\n    keepBytes = 512000000\n    keepDuration = 172800\n    filters = [ \"type==source.local\", \"type==exec.cachemount\", \"type==source.git.checkout\"]\n  [[worker.containerd.gcpolicy]]\n    all = true\n    keepBytes = 1024000000\n\n# registry configures a new Docker register used for cache import or output.\n[registry.\"docker.io\"]\n  # mirror configuration to handle path in case a mirror registry requires a /project path rather than just a host:port\n  mirrors = [\"yourmirror.local:5000\", \"core.harbor.domain/proxy.docker.io\"]\n  http = true\n  insecure = true\n  ca=[\"/etc/config/myca.pem\"]\n  [[registry.\"docker.io\".keypair]]\n    key=\"/etc/config/key.pem\"\n    cert=\"/etc/config/cert.pem\"\n\n# optionally mirror configuration can be done by defining it as a registry.\n[registry.\"yourmirror.local:5000\"]\n  http = true\n\n# Frontend control\n[frontend.\"dockerfile.v0\"]\n  enabled = true\n\n[frontend.\"gateway.v0\"]\n  enabled = true\n\n  # If allowedRepositories is empty, all gateway sources are allowed.\n  # Otherwise, only the listed repositories are allowed as a gateway source.\n  # \n  # NOTE: Only the repository name (without tag) is compared.\n  #\n  # Example:\n  # allowedRepositories = [ \"docker-registry.wikimedia.org/repos/releng/blubber/buildkit\" ]\n  allowedRepositories = []\n\n[system]\n  # how often buildkit scans for changes in the supported emulated platforms\n  platformsCacheMaxAge = \"1h\"\n```",
    "title": "buildkitd.toml | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/",
    "markdown": "# Continuous integration with Docker | Docker Docs\n\nContinuous Integration (CI) is the part of the development process where you're looking to get your code changes merged with the main branch of the project. At this point, development teams run tests and builds to vet that the code changes don't cause any unwanted or unexpected behaviors.\n\n![Git branches about to get merged](https://docs.docker.com/build/ci/images/continuous-integration.svg)\n\nThere are several uses for Docker at this stage of development, even if you don't end up packaging your application as a container image.\n\nContainers are reproducible, isolated environments that yield predictable results. Building and testing your application in a Docker container makes it easier to prevent unexpected behaviors from occurring. Using a Dockerfile, you define the exact requirements for the build environment, including programming runtimes, operating system, binaries, and more.\n\nUsing Docker to manage your build environment also eases maintenance. For example, updating to a new version of a programming runtime can be as simple as changing a tag or digest in a Dockerfile. No need to SSH into a pet VM to manually reinstall a newer version and update the related configuration files.\n\nAdditionally, just as you expect third-party open source packages to be secure, the same should go for your build environment. You can scan and index a builder image, just like you would for any other containerized application.\n\nThe following links provide instructions for how you can get started using Docker for building your applications in CI:\n\n*   [GitHub Actions](https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action)\n*   [GitLab](https://docs.gitlab.com/runner/executors/docker.html)\n*   [Circle CI](https://circleci.com/docs/using-docker/)\n*   [Render](https://render.com/docs/docker)\n\n### [Docker in Docker](#docker-in-docker)\n\nYou can also use a Dockerized build environment to build container images using Docker. That is, your build environment runs inside a container which itself is equipped to run Docker builds. This method is referred to as \"Docker in Docker\".\n\nDocker provides an official [Docker image](https://hub.docker.com/_/docker) that you can use for this purpose.\n\nDocker maintains a set of official GitHub Actions that you can use to build, annotate, and push container images on the GitHub Actions platform. See [Introduction to GitHub Actions](https://docs.docker.com/build/ci/github-actions/) to learn more and get started.",
    "title": "Continuous integration with Docker | Docker Docs\n",
    "description": "Using Docker for continuous integration",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/",
    "markdown": "# Introduction to GitHub Actions | Docker Docs\n\nGitHub Actions is a popular CI/CD platform for automating your build, test, and deployment pipeline. Docker provides a set of official GitHub Actions for you to use in your workflows. These official actions are reusable, easy-to-use components for building, annotating, and pushing images.\n\nThe following GitHub Actions are available:\n\n*   [Build and push Docker images](https://github.com/marketplace/actions/build-and-push-docker-images): build and push Docker images with BuildKit.\n*   [Docker Login](https://github.com/marketplace/actions/docker-login): sign in to a Docker registry.\n*   [Docker Setup Buildx](https://github.com/marketplace/actions/docker-setup-buildx): initiates a BuildKit builder.\n*   [Docker Metadata action](https://github.com/marketplace/actions/docker-metadata-action): extracts metadata from Git reference and GitHub events.\n*   [Docker Setup QEMU](https://github.com/marketplace/actions/docker-setup-qemu): installs [QEMU](https://github.com/qemu/qemu) static binaries for multi-arch builds.\n*   [Docker Buildx Bake](https://github.com/marketplace/actions/docker-buildx-bake): enables using high-level builds with [Bake](https://docs.docker.com/build/bake/).\n*   [Docker Scout](https://github.com/docker/scout-action): analyze Docker images for security vulnerabilities.\n\nUsing Docker's actions provides an easy-to-use interface, while still allowing flexibility for customizing build parameters.\n\nIf you're looking for examples on how to use the Docker GitHub Actions, refer to the following sections:\n\n*   [Add image annotations with GitHub Actions](https://docs.docker.com/build/ci/github-actions/annotations/)\n    \n*   [Add SBOM and provenance attestations with GitHub Actions](https://docs.docker.com/build/ci/github-actions/attestations/)\n    \n*   [Cache management with GitHub Actions](https://docs.docker.com/build/ci/github-actions/cache/)\n    \n*   [Configuring your GitHub Actions builder](https://docs.docker.com/build/ci/github-actions/configure-builder/)\n    \n*   [Copy image between registries with GitHub Actions](https://docs.docker.com/build/ci/github-actions/copy-image-registries/)\n    \n*   [Export to Docker with GitHub Actions](https://docs.docker.com/build/ci/github-actions/export-docker/)\n    \n*   [GitHub Actions build summary](https://docs.docker.com/build/ci/github-actions/build-summary/)\n    \n*   [Local registry with GitHub Actions](https://docs.docker.com/build/ci/github-actions/local-registry/)\n    \n*   [Manage tags and labels with GitHub Actions](https://docs.docker.com/build/ci/github-actions/manage-tags-labels/)\n    \n*   [Multi-platform image with GitHub Actions](https://docs.docker.com/build/ci/github-actions/multi-platform/)\n    \n*   [Named contexts with GitHub Actions](https://docs.docker.com/build/ci/github-actions/named-contexts/)\n    \n*   [Push to multiple registries with GitHub Actions](https://docs.docker.com/build/ci/github-actions/push-multi-registries/)\n    \n*   [Reproducible builds with GitHub Actions](https://docs.docker.com/build/ci/github-actions/reproducible-builds/)\n    \n*   [Share built image between jobs with GitHub Actions](https://docs.docker.com/build/ci/github-actions/share-image-jobs/)\n    \n*   [Test before push with GitHub Actions](https://docs.docker.com/build/ci/github-actions/test-before-push/)\n    \n*   [Update Docker Hub description with GitHub Actions](https://docs.docker.com/build/ci/github-actions/update-dockerhub-desc/)\n    \n*   [Using secrets with GitHub Actions](https://docs.docker.com/build/ci/github-actions/secrets/)\n    \n\nThis tutorial walks you through the process of setting up and using Docker GitHub Actions for building Docker images, and pushing images to Docker Hub. You will complete the following steps:\n\n1.  Create a new repository on GitHub.\n2.  Define the GitHub Actions workflow.\n3.  Run the workflow.\n\nTo follow this tutorial, you need a Docker ID and a GitHub account.\n\n### [Step one: Create the repository](#step-one-create-the-repository)\n\nCreate a GitHub repository and configure the Docker Hub credentials.\n\n1.  Create a new GitHub repository using [this template repository](https://github.com/dvdksn/clockbox/generate).\n    \n    The repository contains a simple Dockerfile, and nothing else. Feel free to use another repository containing a working Dockerfile if you prefer.\n    \n2.  Open the repository **Settings**, and go to **Secrets and variables** > **Actions**.\n    \n3.  Create a new **Repository variable** named `DOCKER_USERNAME` and your Docker ID as value.\n    \n4.  Create a new [Personal Access Token (PAT)](https://docs.docker.com/security/for-developers/access-tokens/#create-an-access-token) for Docker Hub. You can name this token `clockboxci`.\n    \n5.  Add the PAT as a **Repository secret** in your GitHub repository, with the name `DOCKERHUB_TOKEN`.\n    \n\nWith your repository created, and credentials configured, you're now ready for action!\n\n### [Step two: Set up the workflow](#step-two-set-up-the-workflow)\n\nSet up your GitHub Actions workflow for building and pushing the image to Docker Hub.\n\n1.  Go to your repository on GitHub and then select the **Actions** tab.\n    \n2.  Select **set up a workflow yourself**.\n    \n    This takes you to a page for creating a new GitHub actions workflow file in your repository, under `.github/workflows/main.yml` by default.\n    \n3.  In the editor window, copy and paste the following YAML configuration.\n    \n    *   `name`: the name of this workflow.\n    *   `on.push.branches`: specifies that this workflow should run on every push event for the branches in the list.\n    *   `jobs`: creates a job ID (`build`) and declares the type of machine that the job should run on.\n\nFor more information about the YAML syntax used here, see [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions).\n\n### [Step three: Define the workflow steps](#step-three-define-the-workflow-steps)\n\nNow the essentials: what steps to run, and in what order to run them.\n\nThe previous YAML snippet contains a sequence of steps that:\n\n1.  Signs in to Docker Hub, using the [Docker Login](https://github.com/marketplace/actions/docker-login) action and your Docker Hub credentials.\n    \n2.  Creates a BuildKit builder instance using the [Docker Setup Buildx](https://github.com/marketplace/actions/docker-setup-buildx) action.\n    \n3.  Builds the container image and pushes it to the Docker Hub repository, using [Build and push Docker images](https://github.com/marketplace/actions/build-and-push-docker-images).\n    \n    The `with` key lists a number of input parameters that configures the step:\n    \n    *   `push`: tells the action to upload the image to a registry after building it.\n    *   `tags`: tags that specify where to push the image.\n\nAdd these steps to your workflow file. The full workflow configuration should look as follows:\n\n### [Run the workflow](#run-the-workflow)\n\nSave the workflow file and run the job.\n\n1.  Select **Commit changes...** and push the changes to the `main` branch.\n    \n    After pushing the commit, the workflow starts automatically.\n    \n2.  Go to the **Actions** tab. It displays the workflow.\n    \n    Selecting the workflow shows you the breakdown of all the steps.\n    \n3.  When the workflow is complete, go to your [repositories on Docker Hub](https://hub.docker.com/repositories).\n    \n    If you see the new repository in that list, it means the GitHub Actions successfully pushed the image to Docker Hub!\n    \n\nThis tutorial has shown you how to create a simple GitHub Actions workflow, using the official Docker actions, to build and push an image to Docker Hub.\n\nThere are many more things you can do to customize your workflow to better suit your needs. To learn more about some of the more advanced use cases, take a look at the advanced examples, such as [building multi-platform images](https://docs.docker.com/build/ci/github-actions/multi-platform/), or [using cache storage backends](https://docs.docker.com/build/ci/github-actions/cache/) and also how to [configure your builder](https://docs.docker.com/build/ci/github-actions/configure-builder/).",
    "title": "Introduction to GitHub Actions | Docker Docs\n",
    "description": "Docker maintains a set of official GitHub Actions for building Docker images.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/share-image-jobs/",
    "markdown": "# Share built image between jobs with GitHub Actions\n\nAs each job is isolated in its own runner, you can't use your built image between jobs, except if you're using [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners) However, you can [pass data between jobs](https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#passing-data-between-jobs-in-a-workflow) in a workflow using the [actions/upload-artifact](https://github.com/actions/upload-artifact) and [actions/download-artifact](https://github.com/actions/download-artifact) actions:\n\n```\nname: ci\n\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and export\n        uses: docker/build-push-action@v6\n        with:\n          tags: myimage:latest\n          outputs: type=docker,dest=/tmp/myimage.tar\n      \n      - name: Upload artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: myimage\n          path: /tmp/myimage.tar\n\n  use:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Download artifact\n        uses: actions/download-artifact@v4\n        with:\n          name: myimage\n          path: /tmp\n      \n      - name: Load image\n        run: |\n          docker load --input /tmp/myimage.tar\n          docker image ls -a          \n```",
    "title": "Share built image between jobs with GitHub Actions | Docker Docs\n",
    "description": "Share an image between runners without pushing to a registry",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/build-summary/",
    "markdown": "# GitHub Actions build summary | Docker Docs\n\nDocker's GitHub Actions for building and pushing images generate a job summary for your build that outlines the execution and materials used:\n\n*   A summary showing the Dockerfile used, the build duration, and cache utilization\n*   Inputs for the build, such as build arguments, tags, labels, and build contexts\n*   For builds with [Bake](https://docs.docker.com/build/bake/), the full bake definition for the build\n\n![A GitHub Actions build summary](https://docs.docker.com/build/ci/images/gha_build_summary.png)\n\nJob summaries for Docker builds appear automatically if you use the following versions of the [Build and push Docker images](https://github.com/marketplace/actions/build-and-push-docker-images) or [Docker Buildx Bake](https://github.com/marketplace/actions/docker-buildx-bake) GitHub Actions:\n\n*   `docker/build-push-action@v6`\n*   `docker/bake-action@v5`\n\nTo view the job summary, open the details page for the job in GitHub after the job has finished. The summary is available for both failed and successful builds. In the case of a failed build, the summary also displays the error message that caused the build to fail:\n\n![Builds summary error message](https://docs.docker.com/build/ci/images/build_summary_error.png)\n\nIntroduced in Docker Desktop version 4.31\n\n> **Beta feature**\n> \n> Import builds is currently in [Beta](https://docs.docker.com/release-lifecycle/#Beta).\n\nThe job summary includes a link for downloading a build record archive for the run. The build record archive is a ZIP file containing the details about a build (or builds, if you use `docker/bake-action` to build multiple targets). You can import this build record archive into Docker Desktop, which gives you a powerful, graphical interface for further analyzing the build's performance via the [Docker Desktop **Builds** view](https://docs.docker.com/desktop/use-desktop/builds/).\n\nTo import the build record archive into Docker Desktop:\n\n1.  Download and install [Docker Desktop](https://docs.docker.com/get-docker/).\n    \n2.  Download the build record archive from the job summary in GitHub Actions.\n    \n3.  Open the **Builds** view in Docker Desktop.\n    \n4.  Select the **Import build** button, and then browse for the `.zip` archive job summary that you downloaded. Alternatively, you can drag-and-drop the build record archive ZIP file onto the Docker Desktop window after opening the import build dialog.\n    \n5.  Select **Import** to add the build records.\n    \n\nAfter a few seconds, the builds from the GitHub Actions run appear under the **Completed builds** tab in the Builds view. To inspect a build and see a detailed view of all the inputs, results, build steps, and cache utilization, select the item in the list.\n\nTo disable job summaries, set the `DOCKER_BUILD_SUMMARY` environment variable in the YAML configuration for your build step:\n\nTo disable the upload of the build record archive to GitHub, set the `DOCKER_BUILD_RECORD_UPLOAD` environment variable in the YAML configuration for your build step:\n\nWith this configuration, the build summary is still generated, but does not contain a link to download the build record archive.\n\nBuild summaries are currently not supported for:\n\n*   Builds using [Docker Build Cloud](https://docs.docker.com/build-cloud/). Support for Docker Build Cloud is planned for a future release.\n*   Repositories hosted on GitHub Enterprise Servers. Summaries can only be viewed for repositories hosted on GitHub.com.",
    "title": "GitHub Actions build summary | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/named-contexts/",
    "markdown": "# Named contexts with GitHub Actions\n\nYou can define [additional build contexts](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context), and access them in your Dockerfile with `FROM name` or `--from=name`. When Dockerfile defines a stage with the same name it's overwritten.\n\nThis can be useful with GitHub Actions to reuse results from other builds or pin an image to a specific tag in your workflow.\n\nReplace `alpine:latest` with a pinned one:\n\nBy default, the [Docker Setup Buildx](https://github.com/marketplace/actions/docker-setup-buildx) action uses `docker-container` as a build driver, so built Docker images aren't loaded automatically.\n\nWith named contexts you can reuse the built image:\n\nAs shown in the previous section we are not using the default [`docker-container` driver](https://docs.docker.com/build/drivers/docker-container/) for building with named contexts. That's because this driver can't load an image from the Docker store as it's isolated. To solve this problem you can use a [local registry](https://docs.docker.com/build/ci/github-actions/local-registry/) to push your base image in your workflow:",
    "title": "Named contexts with GitHub Actions | Docker Docs\n",
    "description": "Use additional contexts in multi-stage builds with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/copy-image-registries/",
    "markdown": "# Copy image between registries with GitHub Actions\n\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            user/app:latest\n            user/app:1.0.0            \n      \n      - name: Push image to GHCR\n        run: |\n          docker buildx imagetools create \\\n            --tag ghcr.io/user/app:latest \\\n            --tag ghcr.io/user/app:1.0.0 \\\n            user/app:latest          \n```",
    "title": "Copy image between registries with GitHub Actions | Docker Docs\n",
    "description": "Build multi-platform images and copy them between registries with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/configure-builder/",
    "markdown": "# Configuring your GitHub Actions builder\n\nThis page contains instructions on configuring your BuildKit instances when using our [Setup Buildx Action](https://github.com/docker/setup-buildx-action).\n\nBy default, the action will attempt to use the latest version of [Buildx](https://github.com/docker/buildx) available on the GitHub Runner (the build client) and the latest release of [BuildKit](https://github.com/moby/buildkit) (the build server).\n\nTo pin to a specific version of Buildx, use the `version` input. For example, to pin to Buildx v0.10.0:\n\nTo pin to a specific version of BuildKit, use the `image` option in the `driver-opts` input. For example, to pin to BuildKit v0.11.0:\n\nTo display BuildKit container logs when using the `docker-container` driver, you must either [enable step debug logging](https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging), or set the `--debug` buildkitd flag in the [Docker Setup Buildx](https://github.com/marketplace/actions/docker-setup-buildx) action:\n\nLogs will be available at the end of a job:\n\n![BuildKit container logs](https://docs.docker.com/build/ci/github-actions/images/buildkit-container-logs.png)\n\nYou can provide a [BuildKit configuration](https://docs.docker.com/build/buildkit/toml-configuration/) to your builder if you're using the [`docker-container` driver](https://docs.docker.com/build/drivers/docker-container/) (default) with the `config` or `config-inline` inputs:\n\n### [Registry mirror](#registry-mirror)\n\nYou can configure a registry mirror using an inline block directly in your workflow with the `config-inline` input:\n\nFor more information about using a registry mirror, see [Registry mirror](https://docs.docker.com/build/buildkit/configure/#registry-mirror).\n\n### [Max parallelism](#max-parallelism)\n\nYou can limit the parallelism of the BuildKit solver which is particularly useful for low-powered machines.\n\nYou can use the `config-inline` input like the previous example, or you can use a dedicated BuildKit config file from your repository if you want with the `config` input:\n\nBuildx supports running builds on multiple machines. This is useful for building [multi-platform images](https://docs.docker.com/build/building/multi-platform/) on native nodes for more complicated cases that aren't handled by QEMU. Building on native nodes generally has better performance, and allows you to distribute the build across multiple machines.\n\nYou can append nodes to the builder you're creating using the `append` option. It takes input in the form of a YAML string document to remove limitations intrinsically linked to GitHub Actions: you can only use strings in the input fields:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `name` | String | [Name of the node](https://docs.docker.com/reference/cli/docker/buildx/create/#node). If empty, it's the name of the builder it belongs to, with an index number suffix. This is useful to set it if you want to modify/remove a node in an underlying step of you workflow. |\n| `endpoint` | String | [Docker context or endpoint](https://docs.docker.com/reference/cli/docker/buildx/create/#description) of the node to add to the builder |\n| `driver-opts` | List | List of additional [driver-specific options](https://docs.docker.com/reference/cli/docker/buildx/create/#driver-opt) |\n| `buildkitd-flags` | String | [Flags for buildkitd](https://docs.docker.com/reference/cli/docker/buildx/create/#buildkitd-flags) daemon |\n| `platforms` | String | Fixed [platforms](https://docs.docker.com/reference/cli/docker/buildx/create/#platform) for the node. If not empty, values take priority over the detected ones. |\n\nHere is an example using remote nodes with the [`remote` driver](https://docs.docker.com/build/drivers/remote/) and [TLS authentication](#tls-authentication):\n\nThe following examples show how to handle authentication for remote builders, using SSH or TLS.\n\n### [SSH authentication](#ssh-authentication)\n\nTo be able to connect to an SSH endpoint using the [`docker-container` driver](https://docs.docker.com/build/drivers/docker-container/), you have to set up the SSH private key and configuration on the GitHub Runner:\n\n### [TLS authentication](#tls-authentication)\n\nYou can also [set up a remote BuildKit instance](https://docs.docker.com/build/drivers/remote/#example-remote-buildkit-in-docker-container) using the remote driver. To ease the integration in your workflow, you can use an environment variables that sets up authentication using the BuildKit client certificates for the `tcp://`:\n\n*   `BUILDER_NODE_<idx>_AUTH_TLS_CACERT`\n*   `BUILDER_NODE_<idx>_AUTH_TLS_CERT`\n*   `BUILDER_NODE_<idx>_AUTH_TLS_KEY`\n\nThe `<idx>` placeholder is the position of the node in the list of nodes.\n\nIf you don't have the Docker CLI installed on the GitHub Runner, the Buildx binary gets invoked directly, instead of calling it as a Docker CLI plugin. This can be useful if you want to use the `kubernetes` driver in your self-hosted runner:\n\nThe following example shows how you can select different builders for different jobs.\n\nAn example scenario where this might be useful is when you are using a monorepo, and you want to pinpoint different packages to specific builders. For example, some packages may be particularly resource-intensive to build and require more compute. Or they require a builder equipped with a particular capability or hardware.\n\nFor more information about remote builder, see [`remote` driver](https://docs.docker.com/build/drivers/remote/) and the [append builder nodes example](#append-additional-nodes-to-the-builder).",
    "title": "Configuring your GitHub Actions builder | Docker Docs\n",
    "description": "Configuring BuildKit instances for building in CI with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/attestations/",
    "markdown": "# Add SBOM and provenance attestations with GitHub Actions\n\nSoftware Bill of Material (SBOM) and provenance [attestations](https://docs.docker.com/build/attestations/) add metadata about the contents of your image, and how it was built.\n\nAttestations are supported with version 4 and later of the `docker/build-push-action`.\n\nThe `docker/build-push-action` GitHub Action automatically adds provenance attestations to your image, with the following conditions:\n\n*   If the GitHub repository is public, provenance attestations with `mode=max` are automatically added to the image.\n*   If the GitHub repository is private, provenance attestations with `mode=min` are automatically added to the image.\n*   If you're using the [`docker` exporter](https://docs.docker.com/build/exporters/oci-docker/), or you're loading the build results to the runner with `load: true`, no attestations are added to the image. These output formats don't support attestations.\n\n> **Warning**\n> \n> If you're using `docker/build-push-action` to build images for code in a public GitHub repository, the provenance attestations attached to your image by default contains the values of build arguments. If you're misusing build arguments to pass secrets to your build, such as user credentials or authentication tokens, those secrets are exposed in the provenance attestation. Refactor your build to pass those secrets using [secret mounts](https://docs.docker.com/reference/cli/docker/buildx/build/#secret) instead. Also remember to rotate any secrets you may have exposed.\n\nIt's recommended that you build your images with max-level provenance attestations. Private repositories only add min-level provenance by default, but you can manually override the provenance level by setting the `provenance` input on the `docker/build-push-action` GitHub Action to `mode=max`.\n\nNote that adding attestations to an image means you must push the image to a registry directly, as opposed to loading the image to the local image store of the runner. This is because the local image store doesn't support loading images with attestations.\n\nSBOM attestations aren't automatically added to the image. To add SBOM attestations, set the `sbom` input of the `docker/build-push-action` to true.\n\nNote that adding attestations to an image means you must push the image to a registry directly, as opposed to loading the image to the local image store of the runner. This is because the local image store doesn't support loading images with attestations.",
    "title": "Add SBOM and provenance attestations with GitHub Actions | Docker Docs\n",
    "description": "Add SBOM and provenance attestations to your images with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/update-dockerhub-desc/",
    "markdown": "# Update Docker Hub description with GitHub Actions\n\nYou can update the Docker Hub repository description using a third party action called [Docker Hub Description](https://github.com/peter-evans/dockerhub-description) with this action:",
    "title": "Update Docker Hub description with GitHub Actions | Docker Docs\n",
    "description": "How to update the repository README in Docker Hub using with GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/",
    "markdown": "# Overview | Docker Docs\n\nBy leveraging environment variables and interpolation in Docker Compose, you can create versatile and reusable configurations, making your Dockerized applications easier to manage and deploy across different environments.\n\n> **Tip**\n> \n> Before using environment variables, read through all of the information first to get a full picture of environment variables in Docker Compose.\n\nThis section covers:\n\n*   [How to set environment variables within your container's environment](https://docs.docker.com/compose/environment-variables/set-environment-variables/).\n*   [How environment variable precedence works within your container's environment](https://docs.docker.com/compose/environment-variables/envvars-precedence/).\n*   [Pre-defined environment variables](https://docs.docker.com/compose/environment-variables/envvars/).\n\nIt also covers:\n\n*   How [interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/) can be used to set variables within your Compose file and how it relates to a container's environment.\n*   Some [best practices](https://docs.docker.com/compose/environment-variables/best-practices/).",
    "title": "Overview | Docker Docs\n",
    "description": "Explainer on the ways to set, use and manage environment variables in Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/annotations/",
    "markdown": "# Add image annotations with GitHub Actions\n\nAnnotations let you specify arbitrary metadata for OCI image components, such as manifests, indexes, and descriptors.\n\nTo add annotations when building images with GitHub Actions, use the [metadata-action](https://github.com/docker/metadata-action#overwrite-labels-and-annotations) to automatically create OCI-compliant annotations. The metadata action creates an `annotations` output that you can reference, both with [build-push-action](https://github.com/docker/build-push-action/) and [bake-action](https://github.com/docker/bake-action/).\n\nBy default, annotations are placed on image manifests. To configure the [annotation level](https://docs.docker.com/build/building/annotations/#specify-annotation-level), set the `DOCKER_METADATA_ANNOTATIONS_LEVELS` environment variable on the `metadata-action` step to a comma-separated list of all the levels that you want to annotate. For example, setting `DOCKER_METADATA_ANNOTATIONS_LEVELS` to `index` results in annotations on the image index instead of the manifests.\n\nThe following example creates annotations on both the image index and manifests.",
    "title": "Add image annotations with GitHub Actions | Docker Docs\n",
    "description": "Add OCI annotations to image components using GitHub Actions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/intro/features-uses/",
    "markdown": "# Why use Compose? | Docker Docs\n\nUsing Docker Compose offers several benefits that streamline the development, deployment, and management of containerized applications:\n\n*   Simplified control: Docker Compose allows you to define and manage multi-container applications in a single YAML file. This simplifies the complex task of orchestrating and coordinating various services, making it easier to manage and replicate your application environment.\n    \n*   Efficient collaboration: Docker Compose configuration files are easy to share, facilitating collaboration among developers, operations teams, and other stakeholders. This collaborative approach leads to smoother workflows, faster issue resolution, and increased overall efficiency.\n    \n*   Rapid application development: Compose caches the configuration used to create a container. When you restart a service that has not changed, Compose re-uses the existing containers. Re-using containers means that you can make changes to your environment very quickly.\n    \n*   Portability across environments: Compose supports variables in the Compose file. You can use these variables to customize your composition for different environments, or different users.\n    \n*   Extensive community and support: Docker Compose benefits from a vibrant and active community, which means abundant resources, tutorials, and support. This community-driven ecosystem contributes to the continuous improvement of Docker Compose and helps users troubleshoot issues effectively.\n    \n\nCompose can be used in many different ways. Some common use cases are outlined below.\n\n### [Development environments](#development-environments)\n\nWhen you're developing software, the ability to run an application in an isolated environment and interact with it is crucial. The Compose command line tool can be used to create the environment and interact with it.\n\nThe [Compose file](https://docs.docker.com/compose/compose-file/) provides a way to document and configure all of the application's service dependencies (databases, queues, caches, web service APIs, etc). Using the Compose command line tool you can create and start one or more containers for each dependency with a single command (`docker compose up`).\n\nTogether, these features provide a convenient way for you to get started on a project. Compose can reduce a multi-page \"developer getting started guide\" to a single machine-readable Compose file and a few commands.\n\n### [Automated testing environments](#automated-testing-environments)\n\nAn important part of any Continuous Deployment or Continuous Integration process is the automated test suite. Automated end-to-end testing requires an environment in which to run tests. Compose provides a convenient way to create and destroy isolated testing environments for your test suite. By defining the full environment in a [Compose file](https://docs.docker.com/compose/compose-file/), you can create and destroy these environments in just a few commands:\n\n### [Single host deployments](#single-host-deployments)\n\nCompose has traditionally been focused on development and testing workflows, but with each release we're making progress on more production-oriented features.\n\nFor details on using production-oriented features, see [Compose in production](https://docs.docker.com/compose/production/).\n\n*   [Learn about the history of Compose](https://docs.docker.com/compose/intro/history/)\n*   [Understand how Compose works](https://docs.docker.com/compose/compose-application-model/)\n*   [Quickstart](https://docs.docker.com/compose/gettingstarted/)",
    "title": "Why use Compose? | Docker Docs\n",
    "description": "Key benefits and use cases of Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/ci/github-actions/reproducible-builds/",
    "markdown": "# Reproducible builds with GitHub Actions\n\n`SOURCE_DATE_EPOCH` is a [standardized environment variable](https://reproducible-builds.org/docs/source-date-epoch/) for instructing build tools to produce a reproducible output. Setting the environment variable for a build makes the timestamps in the image index, config, and file metadata reflect the specified Unix time.\n\nTo set the environment variable in GitHub Actions, use the built-in `env` property on the build step.\n\nThe following example sets the `SOURCE_DATE_EPOCH` variable to 0, Unix epoch.\n\nThe following example sets `SOURCE_DATE_EPOCH` to the Git commit timestamp.\n\nFor more information about the `SOURCE_DATE_EPOCH` support in BuildKit, see [BuildKit documentation](https://github.com/moby/buildkit/blob/master/docs/build-repro.md#source_date_epoch).",
    "title": "Reproducible builds with GitHub Actions | Docker Docs\n",
    "description": "How to create reproducible builds in GitHub Actions using the SOURCE_EPOCH environment variable",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/release-notes/",
    "markdown": "# Build release notes | Docker Docs\n\nThis page contains information about the new features, improvements, and bug fixes in [Docker Buildx](https://github.com/docker/buildx).\n\n_2024-04-18_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.14.0).\n\n### [Enhancements](#enhancements)\n\n*   Add support for `--print=lint` (experimental). [docker/buildx#2404](https://github.com/docker/buildx/pull/2404), [docker/buildx#2406](https://github.com/docker/buildx/pull/2406)\n*   Fix JSON formatting for custom implementations of print sub-requests in frontends. [docker/buildx#2374](https://github.com/docker/buildx/pull/2374)\n*   Provenance records are now set when building with `--metadata-file`. [docker/buildx#2280](https://github.com/docker/buildx/pull/2280)\n*   Add [Git authentication support](https://docs.docker.com/build/bake/remote-definition/#remote-definition-in-a-private-repository) for remote definitions. [docker/buildx#2363](https://github.com/docker/buildx/pull/2363)\n*   New `default-load` driver option for the `docker-container`, `remote`, and `kubernetes` drivers to load build results to the Docker Engine image store by default. [docker/buildx#2259](https://github.com/docker/buildx/pull/2259)\n*   Add `requests.ephemeral-storage`, `limits.ephemeral-storage` and `schedulername` options to the [`kubernetes` driver](https://docs.docker.com/build/drivers/kubernetes/). [docker/buildx#2370](https://github.com/docker/buildx/pull/2370), [docker/buildx#2415](https://github.com/docker/buildx/pull/2415)\n*   Add `indexof` function for `docker-bake.hcl` files. [docker/buildx#2384](https://github.com/docker/buildx/pull/2384)\n*   OpenTelemetry metrics for Buildx now measure durations of idle time, image exports, run operations, and image transfers for image source operations during build. [docker/buildx#2316](https://github.com/docker/buildx/pull/2316), [docker/buildx#2317](https://github.com/docker/buildx/pull/2317), [docker/buildx#2323](https://github.com/docker/buildx/pull/2323), [docker/buildx#2271](https://github.com/docker/buildx/pull/2271)\n*   Build progress metrics to the OpenTelemetry endpoint associated with the `desktop-linux` context no longer requires Buildx in experimental mode (`BUILDX_EXPERIMENTAL=1`). [docker/buildx#2344](https://github.com/docker/buildx/pull/2344)\n\n### [Bug fixes](#bug-fixes)\n\n*   Fix `--load` and `--push` incorrectly overriding outputs when used with multiple Bake file definitions. [docker/buildx#2336](https://github.com/docker/buildx/pull/2336)\n*   Fix build from stdin with experimental mode enabled. [docker/buildx#2394](https://github.com/docker/buildx/pull/2394)\n*   Fix an issue where delegated traces could be duplicated. [docker/buildx#2362](https://github.com/docker/buildx/pull/2362)\n\n### [Packaging updates](#packaging-updates)\n\n*   Compose support has been updated to [v2.26.1](https://github.com/docker/compose/releases/tag/v2.26.1) (via [`compose-go` v2.0.2](https://github.com/compose-spec/compose-go/releases/tag/v2.0.2)). [docker/buildx#2391](https://github.com/docker/buildx/pull/2391)\n\n_2024-03-13_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.13.1).\n\n### [Bug fixes](#bug-fixes-1)\n\n*   Fix connecting to `docker-container://` and `kube-pod://` style URLs with remote driver. [docker/buildx#2327](https://github.com/docker/buildx/pull/2327)\n*   Fix handling of `--push` with Bake when a target has already defined a non-image output. [docker/buildx#2330](https://github.com/docker/buildx/pull/2330)\n\n_2024-03-06_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.13.0).\n\n### [New](#new)\n\n*   New `docker buildx dial-stdio` command for directly contacting BuildKit daemon of the configured builder instance. [docker/buildx#2112](https://github.com/docker/buildx/pull/2112)\n*   Windows container builders can now be created using the `remote` driver and npipe connections. [docker/buildx#2287](https://github.com/docker/buildx/pull/2287)\n*   Npipe URL scheme is now supported on Windows. [docker/buildx#2250](https://github.com/docker/buildx/pull/2250)\n*   Experimental Buildx can now export OpenTelemetry metrics for build duration and transfer sizes. [docker/buildx#2235](https://github.com/docker/buildx/pull/2235), [docker/buildx#2258](https://github.com/docker/buildx/pull/2258) [docker/buildx#2225](https://github.com/docker/buildx/pull/2225) [docker/buildx#2224](https://github.com/docker/buildx/pull/2224) [docker/buildx#2155](https://github.com/docker/buildx/pull/2155)\n\n### [Enhancements](#enhancements-1)\n\n*   Bake command now supports defining `shm-size` and `ulimit` values. [docker/buildx#2279](https://github.com/docker/buildx/pull/2279), [docker/buildx#2242](https://github.com/docker/buildx/pull/2242)\n*   Better handling of connecting to unhealthy nodes with remote driver. [docker/buildx#2130](https://github.com/docker/buildx/pull/2130)\n*   Builders using the `docker-container` and `kubernetes` drivers now allow `network.host` entitlement by default (allowing access to the container's network). [docker/buildx#2266](https://github.com/docker/buildx/pull/2266)\n*   Builds can now use multiple outputs with a single command (requires BuildKit v0.13+). [docker/buildx#2290](https://github.com/docker/buildx/pull/2290), [docker/buildx#2302](https://github.com/docker/buildx/pull/2302)\n*   Default Git repository path is now found via configured tracking branch. [docker/buildx#2146](https://github.com/docker/buildx/pull/2146)\n*   Fix possible cache invalidation when using linked targets in Bake. [docker/buildx#2265](https://github.com/docker/buildx/pull/2265)\n*   Fixes for Git repository path sanitization in WSL. [docker/buildx#2167](https://github.com/docker/buildx/pull/2167)\n*   Multiple builders can now be removed with a single command. [docker/buildx#2140](https://github.com/docker/buildx/pull/2140)\n*   New cancellation signal handling via Unix socket. [docker/buildx#2184](https://github.com/docker/buildx/pull/2184) [docker/buildx#2289](https://github.com/docker/buildx/pull/2289)\n*   The Compose spec support has been updated to v2.0.0-rc.8. [docker/buildx#2205](https://github.com/docker/buildx/pull/2205)\n*   The `--config` flag for `docker buildx create` was renamed to `--buildkitd-config`. [docker/buildx#2268](https://github.com/docker/buildx/pull/2268)\n*   The `--metadata-file` flag for `docker buildx build` can now also return build reference that can be used for further build debugging, for example, in Docker Desktop. [docker/buildx#2263](https://github.com/docker/buildx/pull/2263)\n*   The `docker buildx bake` command now shares the same authentication provider for all targets for improved performance. [docker/buildx#2147](https://github.com/docker/buildx/pull/2147)\n*   The `docker buildx imagetools inspect` command now shows DSSE-signed SBOM and Provenance attestations. [docker/buildx#2194](https://github.com/docker/buildx/pull/2194)\n*   The `docker buildx ls` command now supports `--format` options for controlling the output. [docker/buildx#1787](https://github.com/docker/buildx/pull/1787)\n*   The `docker-container` driver now supports driver options for defining restart policy for BuildKit container. [docker/buildx#1271](https://github.com/docker/buildx/pull/1271)\n*   VCS attributes exported from Buildx now include the local directory sub-paths if they're relative to the current Git repository. [docker/buildx#2156](https://github.com/docker/buildx/pull/2156)\n*   `--add-host` flag now permits a `=` separator for IPv6 addresses. [docker/buildx#2121](https://github.com/docker/buildx/pull/2121)\n\n### [Bug fixes](#bug-fixes-2)\n\n*   Fix additional output when exporting progress with `--progress=rawjson` [docker/buildx#2252](https://github.com/docker/buildx/pull/2252)\n*   Fix possible console warnings on Windows. [docker/buildx#2238](https://github.com/docker/buildx/pull/2238)\n*   Fix possible inconsistent configuration merge order when using Bake with many configurations. [docker/buildx#2237](https://github.com/docker/buildx/pull/2237)\n*   Fix possible panic in the `docker buildx imagetools create` command. [docker/buildx#2230](https://github.com/docker/buildx/pull/2230)\n\n_2024-01-12_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.12.1).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements)\n\n*   Fix incorrect validation of some `--driver-opt` values that could cause a panic and corrupt state to be stored. [docker/buildx#2176](https://github.com/docker/buildx/pull/2176)\n\n_2023-11-16_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.12.0).\n\n### [New](#new-1)\n\n*   New `--annotation` flag for the `buildx build`, and an `annotations` key in the Bake file, that lets you add OCI Annotations to build results. [#2020](https://github.com/docker/buildx/pull/2020), [#2098](https://github.com/docker/buildx/pull/2098)\n*   New experimental debugging features, including a new `debug` command and an interactive debugging console. This feature currently requires setting `BUILDX_EXPERIMENTAL=1`. [#2006](https://github.com/docker/buildx/pull/2006), [#1896](https://github.com/docker/buildx/pull/1896), [#1970](https://github.com/docker/buildx/pull/1970), [#1914](https://github.com/docker/buildx/pull/1914), [#2026](https://github.com/docker/buildx/pull/2026), [#2086](https://github.com/docker/buildx/pull/2086)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-1)\n\n*   The special `host-gateway` IP mapping can now be used with the `--add-host` flag during build. [#1894](https://github.com/docker/buildx/pull/1894), [#2083](https://github.com/docker/buildx/pull/2083)\n*   Bake now allows adding local source files when building from remote definition. [#1838](https://github.com/docker/buildx/pull/1838)\n*   The status of uploading build results to Docker is now shown interactively on progress bar. [#1994](https://github.com/docker/buildx/pull/1994)\n*   Error handling has been improved when bootstrapping multi-node build clusters. [#1869](https://github.com/docker/buildx/pull/1869)\n*   The `buildx imagetools create` command now allows adding annotation when creating new images in the registry. [#1965](https://github.com/docker/buildx/pull/1965)\n*   OpenTelemetry build trace delegation from buildx is now possible with Docker and Remote driver. [#2034](https://github.com/docker/buildx/pull/2034)\n*   Bake command now shows all files where the build definition was loaded from on the progress bar. [#2076](https://github.com/docker/buildx/pull/2076)\n*   Bake files now allow the same attributes to be defined in multiple definition files. [#1062](https://github.com/docker/buildx/pull/1062)\n*   Using the Bake command with a remote definition now allows this definition to use local Dockerfiles. [#2015](https://github.com/docker/buildx/pull/2015)\n*   Docker container driver now explicitly sets BuildKit config path to make sure configurations are loaded from same location for both mainline and rootless images. [#2093](https://github.com/docker/buildx/pull/2093)\n*   Improve performance of detecting when BuildKit instance has completed booting. [#1934](https://github.com/docker/buildx/pull/1934)\n*   Container driver now accepts many new driver options for defining the resource limits for BuildKit container. [#2048](https://github.com/docker/buildx/pull/2048)\n*   Inspection commands formatting has been improved. [#2068](https://github.com/docker/buildx/pull/2068)\n*   Error messages about driver capabilities have been improved. [#1998](https://github.com/docker/buildx/pull/1998)\n*   Improve errors when invoking Bake command without targets. [#2100](https://github.com/docker/buildx/pull/2100)\n*   Allow enabling debug logs with environment variables when running in standalone mode. [#1821](https://github.com/docker/buildx/pull/1821)\n*   When using Docker driver the default image resolve mode has been updated to prefer local Docker images for backward compatibility. [#1886](https://github.com/docker/buildx/pull/1886)\n*   Kubernetes driver now allows setting custom annotations and labels to the BuildKit deployments and pods. [#1938](https://github.com/docker/buildx/pull/1938)\n*   Kubernetes driver now allows setting authentication token with endpoint configuration. [#1891](https://github.com/docker/buildx/pull/1891)\n*   Fix possible issue with chained targets in Bake that could result in build failing or local source for a target uploaded multiple times. [#2113](https://github.com/docker/buildx/pull/2113)\n*   Fix issue when accessing global target properties when using the matrix feature of the Bake command. [#2106](https://github.com/docker/buildx/pull/2106)\n*   Fixes for formatting validation of certain build flags [#2040](https://github.com/docker/buildx/pull/2040)\n*   Fixes to avoid locking certain commands unnecessarily while booting builder nodes. [#2066](https://github.com/docker/buildx/pull/2066)\n*   Fix cases where multiple builds try to bootstrap the same builder instance in parallel. [#2000](https://github.com/docker/buildx/pull/2000)\n*   Fix cases where errors on uploading build results to Docker could be dropped in some cases. [#1927](https://github.com/docker/buildx/pull/1927)\n*   Fix detecting capabilities for missing attestation support based on build output. [#1988](https://github.com/docker/buildx/pull/1988)\n*   Fix the build for loading in Bake remote definition to not show up in build history records. [#1961](https://github.com/docker/buildx/pull/1961), [#1954](https://github.com/docker/buildx/pull/1954)\n*   Fix errors when building Compose files using the that define profiles with Bake. [#1903](https://github.com/docker/buildx/pull/1903)\n*   Fix possible time correction errors on progress bar. [#1968](https://github.com/docker/buildx/pull/1968)\n*   Fix passing custom cgroup parent to builds that used the new controller interface. [#1913](https://github.com/docker/buildx/pull/1913)\n\n### [Packaging](#packaging)\n\n*   Compose support has been updated to 1.20, enabling \"include\" functionality when using the Bake command. [#1971](https://github.com/docker/buildx/pull/1971), [#2065](https://github.com/docker/buildx/pull/2065), [#2094](https://github.com/docker/buildx/pull/2094)\n\n_2023-07-18_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.11.2).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-2)\n\n*   Fix a regression that caused buildx to not read the `KUBECONFIG` path from the instance store. [docker/buildx#1941](https://github.com/docker/buildx/pull/1941)\n*   Fix a regression with result handle builds showing up in the build history incorrectly. [docker/buildx#1954](https://github.com/docker/buildx/pull/1954)\n\n_2023-07-05_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.11.1).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-3)\n\n*   Fix a regression for bake where services in profiles would not be loaded. [docker/buildx#1903](https://github.com/docker/buildx/pull/1903)\n*   Fix a regression where `--cgroup-parent` option had no effect during build. [docker/buildx#1913](https://github.com/docker/buildx/pull/1913)\n*   Fix a regression where valid docker contexts could fail buildx builder name validation. [docker/buildx#1879](https://github.com/docker/buildx/pull/1879)\n*   Fix a possible panic when terminal is resized during the build. [docker/buildx#1929](https://github.com/docker/buildx/pull/1929)\n\n_2023-06-13_\n\nThe full release note for this release is available [on GitHub](https://github.com/docker/buildx/releases/tag/v0.11.0).\n\n### [New](#new-2)\n\n*   Bake now supports [matrix builds](https://docs.docker.com/build/bake/reference/#targetmatrix). The new matrix field on `target` lets you create multiple similar targets to remove duplication in bake files. [docker/buildx#1690](https://github.com/docker/buildx/pull/1690)\n*   New experimental `--detach` flag for running builds in detached mode. [docker/buildx#1296](https://github.com/docker/buildx/pull/1296), [docker/buildx#1620](https://github.com/docker/buildx/pull/1620), [docker/buildx#1614](https://github.com/docker/buildx/pull/1614), [docker/buildx#1737](https://github.com/docker/buildx/pull/1737), [docker/buildx#1755](https://github.com/docker/buildx/pull/1755)\n*   New experimental [debug monitor mode](https://github.com/docker/buildx/blob/v0.11.0-rc1/docs/guides/debugging.md) that lets you start a debug session in your builds. [docker/buildx#1626](https://github.com/docker/buildx/pull/1626), [docker/buildx#1640](https://github.com/docker/buildx/pull/1640)\n*   New [`EXPERIMENTAL_BUILDKIT_SOURCE_POLICY` environment variable](https://docs.docker.com/build/building/variables/#experimental_buildkit_source_policy) for applying a BuildKit source policy file. [docker/buildx#1628](https://github.com/docker/buildx/pull/1628)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-4)\n\n*   `--load` now supports loading multi-platform images when the containerd image store is enabled. [docker/buildx#1813](https://github.com/docker/buildx/pull/1813)\n*   Build progress output now displays the name of the builder being used. [docker/buildx#1177](https://github.com/docker/buildx/pull/1177)\n*   Bake now supports detecting `compose.{yml,yaml}` files. [docker/buildx#1752](https://github.com/docker/buildx/pull/1752)\n*   Bake now supports new compose build keys `dockerfile_inline` and `additional_contexts`. [docker/buildx#1784](https://github.com/docker/buildx/pull/1784)\n*   Bake now supports replace HCL function. [docker/buildx#1720](https://github.com/docker/buildx/pull/1720)\n*   Bake now allows merging multiple similar attestation parameters into a single parameter to allow overriding with a single global value. [docker/buildx#1699](https://github.com/docker/buildx/pull/1699)\n*   Initial support for shell completion. [docker/buildx#1727](https://github.com/docker/buildx/pull/1727)\n*   BuildKit versions now correctly display in `buildx ls` and `buildx inspect` for builders using the `docker` driver. [docker/buildx#1552](https://github.com/docker/buildx/pull/1552)\n*   Display additional builder node details in buildx inspect view. [docker/buildx#1440](https://github.com/docker/buildx/pull/1440), [docker/buildx#1854](https://github.com/docker/buildx/pull/1874)\n*   Builders using the `remote` driver allow using TLS without proving its own key/cert (if BuildKit remote is configured to support it) [docker/buildx#1693](https://github.com/docker/buildx/pull/1693)\n*   Builders using the `kubernetes` driver support a new `serviceaccount` option, which sets the `serviceAccountName` of the Kubernetes pod. [docker/buildx#1597](https://github.com/docker/buildx/pull/1597)\n*   Builders using the `kubernetes` driver support the `proxy-url` option in the kubeconfig file. [docker/buildx#1780](https://github.com/docker/buildx/pull/1780)\n*   Builders using the `kubernetes` are now automatically assigned a node name if no name is explicitly provided. [docker/buildx#1673](https://github.com/docker/buildx/pull/1673)\n*   Fix invalid path when writing certificates for `docker-container` driver on Windows. [docker/buildx#1831](https://github.com/docker/buildx/pull/1831)\n*   Fix bake failure when remote bake file is accessed using SSH. [docker/buildx#1711](https://github.com/docker/buildx/pull/1711), [docker/buildx#1734](https://github.com/docker/buildx/pull/1734)\n*   Fix bake failure when remote bake context is incorrectly resolved. [docker/buildx#1783](https://github.com/docker/buildx/pull/1783)\n*   Fix path resolution of `BAKE_CMD_CONTEXT` and `cwd://` paths in bake contexts. [docker/buildx#1840](https://github.com/docker/buildx/pull/1840)\n*   Fix mixed OCI and Docker media types when creating images using `buildx imagetools create`. [docker/buildx#1797](https://github.com/docker/buildx/pull/1797)\n*   Fix mismatched image id between `--iidfile` and `-q`. [docker/buildx#1844](https://github.com/docker/buildx/pull/1844)\n*   Fix AWS authentication when mixing static creds and IAM profiles. [docker/buildx#1816](https://github.com/docker/buildx/pull/1816)\n\n_2023-03-06_\n\n> **Note**\n> \n> Buildx v0.10 enables support for a minimal [SLSA Provenance](https://slsa.dev/provenance/) attestation, which requires support for [OCI-compliant](https://github.com/opencontainers/image-spec) multi-platform images. This may introduce issues with registry and runtime support (e.g. [Google Cloud Run and AWS Lambda](https://github.com/docker/buildx/issues/1533)). You can optionally disable the default provenance attestation functionality using `--provenance=false`.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-5)\n\n*   Add `BUILDX_NO_DEFAULT_ATTESTATIONS` as alternative to `--provenance false`. [docker/buildx#1645](https://github.com/docker/buildx/issues/1645)\n*   Disable dirty Git checkout detection by default for performance. Can be enabled with `BUILDX_GIT_CHECK_DIRTY` opt-in. [docker/buildx#1650](https://github.com/docker/buildx/issues/1650)\n*   Strip credentials from VCS hint URL before sending to BuildKit. [docker/buildx#1664](https://github.com/docker/buildx/issues/1664)\n\n_2023-02-16_\n\n> **Note**\n> \n> Buildx v0.10 enables support for a minimal [SLSA Provenance](https://slsa.dev/provenance/) attestation, which requires support for [OCI-compliant](https://github.com/opencontainers/image-spec) multi-platform images. This may introduce issues with registry and runtime support (e.g. [Google Cloud Run and AWS Lambda](https://github.com/docker/buildx/issues/1533)). You can optionally disable the default provenance attestation functionality using `--provenance=false`.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-6)\n\n*   Fix reachable commit and warnings on collecting Git provenance info. [docker/buildx#1592](https://github.com/docker/buildx/issues/1592), [docker/buildx#1634](https://github.com/docker/buildx/issues/1634)\n*   Fix a regression where docker context was not being validated. [docker/buildx#1596](https://github.com/docker/buildx/issues/1596)\n*   Fix function resolution with JSON bake definition. [docker/buildx#1605](https://github.com/docker/buildx/issues/1605)\n*   Fix case where original HCL bake diagnostic is discarded. [docker/buildx#1607](https://github.com/docker/buildx/issues/1607)\n*   Fix labels not correctly set with bake and compose file. [docker/buildx#1631](https://github.com/docker/buildx/issues/1631)\n\n_2023-01-30_\n\n> **Note**\n> \n> Buildx v0.10 enables support for a minimal [SLSA Provenance](https://slsa.dev/provenance/) attestation, which requires support for [OCI-compliant](https://github.com/opencontainers/image-spec) multi-platform images. This may introduce issues with registry and runtime support (e.g. [Google Cloud Run and AWS Lambda](https://github.com/docker/buildx/issues/1533)). You can optionally disable the default provenance attestation functionality using `--provenance=false`.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-7)\n\n*   Fix preferred platforms order not taken into account in multi-node builds. [docker/buildx#1561](https://github.com/docker/buildx/issues/1561)\n*   Fix possible panic on handling `SOURCE_DATE_EPOCH` environment variable. [docker/buildx#1564](https://github.com/docker/buildx/issues/1564)\n*   Fix possible push error on multi-node manifest merge since BuildKit v0.11 on some registries. [docker/buildx#1566](https://github.com/docker/buildx/issues/1566)\n*   Improve warnings on collecting Git provenance info. [docker/buildx#1568](https://github.com/docker/buildx/issues/1568)\n\n_2023-01-27_\n\n> **Note**\n> \n> Buildx v0.10 enables support for a minimal [SLSA Provenance](https://slsa.dev/provenance/) attestation, which requires support for [OCI-compliant](https://github.com/opencontainers/image-spec) multi-platform images. This may introduce issues with registry and runtime support (e.g. [Google Cloud Run and AWS Lambda](https://github.com/docker/buildx/issues/1533)). You can optionally disable the default provenance attestation functionality using `--provenance=false`.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-8)\n\n*   Fix sending the correct origin URL as `vsc:source` metadata. [docker/buildx#1548](https://github.com/docker/buildx/issues/1548)\n*   Fix possible panic from data-race. [docker/buildx#1504](https://github.com/docker/buildx/issues/1504)\n*   Fix regression with `rm --all-inactive`. [docker/buildx#1547](https://github.com/docker/buildx/issues/1547)\n*   Improve attestation access in `imagetools inspect` by lazily loading data. [docker/buildx#1546](https://github.com/docker/buildx/issues/1546)\n*   Correctly mark capabilities request as internal. [docker/buildx#1538](https://github.com/docker/buildx/issues/1538)\n*   Detect invalid attestation configuration. [docker/buildx#1545](https://github.com/docker/buildx/issues/1545)\n*   Update containerd patches to fix possible push regression affecting `imagetools` commands. [docker/buildx#1559](https://github.com/docker/buildx/issues/1559)\n\n_2023-01-10_\n\n> **Note**\n> \n> Buildx v0.10 enables support for a minimal [SLSA Provenance](https://slsa.dev/provenance/) attestation, which requires support for [OCI-compliant](https://github.com/opencontainers/image-spec) multi-platform images. This may introduce issues with registry and runtime support (e.g. [Google Cloud Run and AWS Lambda](https://github.com/docker/buildx/issues/1533)). You can optionally disable the default provenance attestation functionality using `--provenance=false`.\n\n### [New](#new-3)\n\n*   The `buildx build` command supports new `--attest` flag, along with shorthands `--sbom` and `--provenance`, for adding attestations for your current build. [docker/buildx#1412](https://github.com/docker/buildx/issues/1412) [docker/buildx#1475](https://github.com/docker/buildx/issues/1475)\n    *   `--attest type=sbom` or `--sbom=true` adds [SBOM attestations](https://docs.docker.com/build/attestations/sbom/).\n    *   `--attest type=provenance` or `--provenance=true` adds [SLSA provenance attestation](https://docs.docker.com/build/attestations/slsa-provenance/).\n    *   When creating OCI images, a minimal provenance attestation is included with the image by default.\n*   When building with BuildKit that supports provenance attestations Buildx will automatically share the version control information of your build context, so it can be shown in provenance for later debugging. Previously this only happened when building from a Git URL directly. To opt-out of this behavior you can set `BUILDX_GIT_INFO=0`. Optionally you can also automatically define labels with VCS info by setting `BUILDX_GIT_LABELS=1`. [docker/buildx#1462](https://github.com/docker/buildx/issues/1462), [docker/buildx#1297](https://github.com/docker/buildx), [docker/buildx#1341](https://github.com/docker/buildx/issues/1341), [docker/buildx#1468](https://github.com/docker/buildx), [docker/buildx#1477](https://github.com/docker/buildx/issues/1477)\n*   Named contexts with `--build-context` now support `oci-layout://` protocol for initializing the context with a value of a local OCI layout directory. E.g. `--build-context stagename=oci-layout://path/to/dir`. This feature requires BuildKit v0.11.0+ and Dockerfile 1.5.0+. [docker/buildx#1456](https://github.com/docker/buildx/issues/1456)\n*   Bake now supports [resource interpolation](https://docs.docker.com/build/bake/inheritance/#reusing-single-attribute-from-targets) where you can reuse the values from other target definitions. [docker/buildx#1434](https://github.com/docker/buildx/issues/1434)\n*   Buildx will now automatically forward `SOURCE_DATE_EPOCH` environment variable if it is defined in your environment. This feature is meant to be used with updated [reproducible builds](https://github.com/moby/buildkit/blob/master/docs/build-repro.md) support in BuildKit v0.11.0+. [docker/buildx#1482](https://github.com/docker/buildx/issues/1482)\n*   Buildx now remembers the last activity for a builder for better organization of builder instances. [docker/buildx#1439](https://github.com/docker/buildx/issues/1439)\n*   Bake definition now supports null values for [variables](https://docs.docker.com/build/bake/reference/#variable) and [labels](https://docs.docker.com/build/bake/reference/#targetlabels) for build arguments and labels to use the defaults set in the Dockerfile. [docker/buildx#1449](https://github.com/docker/buildx/issues/1449)\n*   The [`buildx imagetools inspect` command](https://docs.docker.com/reference/cli/docker/buildx/imagetools/inspect/) now supports showing SBOM and Provenance data. [docker/buildx#1444](https://github.com/docker/buildx/issues/1444), [docker/buildx#1498](https://github.com/docker/buildx/issues/1498)\n*   Increase performance of `ls` command and inspect flows. [docker/buildx#1430](https://github.com/docker/buildx/issues/1430), [docker/buildx#1454](https://github.com/docker/buildx/issues/1454), [docker/buildx#1455](https://github.com/docker/buildx/issues/1455), [docker/buildx#1345](https://github.com/docker/buildx/issues/1345)\n*   Adding extra hosts with [Docker driver](https://docs.docker.com/build/drivers/docker/) now supports Docker-specific `host-gateway` special value. [docker/buildx#1446](https://github.com/docker/buildx/issues/1446)\n*   [OCI exporter](https://docs.docker.com/build/exporters/oci-docker/) now supports `tar=false` option for exporting OCI format directly in a directory. [docker/buildx#1420](https://github.com/docker/buildx/issues/1420)\n\n### [Upgrades](#upgrades)\n\n*   Updated the Compose Specification to 1.6.0. [docker/buildx#1387](https://github.com/docker/buildx/issues/1387)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-9)\n\n*   `--invoke` can now load default launch environment from the image metadata. [docker/buildx#1324](https://github.com/docker/buildx/issues/1324)\n*   Fix container driver behavior in regards to UserNS. [docker/buildx#1368](https://github.com/docker/buildx/issues/1368)\n*   Fix possible panic in Bake when using wrong variable value type. [docker/buildx#1442](https://github.com/docker/buildx/issues/1442)\n*   Fix possible panic in `imagetools inspect`. [docker/buildx#1441](https://github.com/docker/buildx/issues/1441) [docker/buildx#1406](https://github.com/docker/buildx/issues/1406)\n*   Fix sending empty `--add-host` value to BuildKit by default. [docker/buildx#1457](https://github.com/docker/buildx/issues/1457)\n*   Fix handling progress prefixes with progress groups. [docker/buildx#1305](https://github.com/docker/buildx/issues/1305)\n*   Fix recursively resolving groups in Bake. [docker/buildx#1313](https://github.com/docker/buildx/issues/1313)\n*   Fix possible wrong indentation on multi-node builder manifests. [docker/buildx#1396](https://github.com/docker/buildx/issues/1396)\n*   Fix possible panic from missing OpenTelemetry configuration. [docker/buildx#1383](https://github.com/docker/buildx/issues/1383)\n*   Fix `--progress=tty` behavior when TTY is not available. [docker/buildx#1371](https://github.com/docker/buildx/issues/1371)\n*   Fix connection error conditions in `prune` and `du` commands. [docker/buildx#1307](https://github.com/docker/buildx/issues/1307)\n\n_2022-08-18_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-10)\n\n*   The `inspect` command now displays the BuildKit version in use. [docker/buildx#1279](https://github.com/docker/buildx/issues/1279)\n*   Fixed a regression when building Compose files that contain services without a build block. [docker/buildx#1277](https://github.com/docker/buildx/issues/1277)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.9.1).\n\n_2022-08-17_\n\n### [New](#new-4)\n\n*   Support for a new [`remote` driver](https://docs.docker.com/build/drivers/remote/) that you can use to connect to any already running BuildKit instance. [docker/buildx#1078](https://github.com/docker/buildx/issues/1078), [docker/buildx#1093](https://github.com/docker/buildx/issues/1093), [docker/buildx#1094](https://github.com/docker/buildx/issues/1094), [docker/buildx#1103](https://github.com/docker/buildx/issues/1103), [docker/buildx#1134](https://github.com/docker/buildx/issues/1134), [docker/buildx#1204](https://github.com/docker/buildx/issues/1204)\n*   You can now load Dockerfile from standard input even when the build context is coming from external Git or HTTP URL. [docker/buildx#994](https://github.com/docker/buildx/issues/994)\n*   Build commands now support new the build context type `oci-layout://` for loading [build context from local OCI layout directories](https://docs.docker.com/reference/cli/docker/buildx/build/#source-oci-layout). Note that this feature depends on an unreleased BuildKit feature and builder instance from `moby/buildkit:master` needs to be used until BuildKit v0.11 is released. [docker/buildx#1173](https://github.com/docker/buildx/issues/1173)\n*   You can now use the new `--print` flag to run helper functions supported by the BuildKit frontend performing the build and print their results. You can use this feature in Dockerfile to show the build arguments and secrets that the current build supports with `--print=outline` and list all available Dockerfile stages with `--print=targets`. This feature is experimental for gathering early feedback and requires enabling `BUILDX_EXPERIMENTAL=1` environment variable. We plan to update/extend this feature in the future without keeping backward compatibility. [docker/buildx#1100](https://github.com/docker/buildx/issues/1100), [docker/buildx#1272](https://github.com/docker/buildx/issues/1272)\n*   You can now use the new `--invoke` flag to launch interactive containers from build results for an interactive debugging cycle. You can reload these containers with code changes or restore them to an initial state from the special monitor mode. This feature is experimental for gathering early feedback and requires enabling `BUILDX_EXPERIMENTAL=1` environment variable. We plan to update/extend this feature in the future without enabling backward compatibility. [docker/buildx#1168](https://github.com/docker/buildx/issues/1168), [docker/buildx#1257](https://github.com/docker/buildx), [docker/buildx#1259](https://github.com/docker/buildx/issues/1259)\n*   Buildx now understands environment variable `BUILDKIT_COLORS` and `NO_COLOR` to customize/disable the colors of interactive build progressbar. [docker/buildx#1230](https://github.com/docker/buildx/issues/1230), [docker/buildx#1226](https://github.com/docker/buildx/issues/1226)\n*   `buildx ls` command now shows the current BuildKit version of each builder instance. [docker/buildx#998](https://github.com/docker/buildx/issues/998)\n*   The `bake` command now loads `.env` file automatically when building Compose files for compatibility. [docker/buildx#1261](https://github.com/docker/buildx/issues/1261)\n*   Bake now supports Compose files with `cache_to` definition. [docker/buildx#1155](https://github.com/docker/buildx/issues/1155)\n*   Bake now supports new builtin function `timestamp()` to access current time. [docker/buildx#1214](https://github.com/docker/buildx/issues/1214)\n*   Bake now supports Compose build secrets definition. [docker/buildx#1069](https://github.com/docker/buildx/issues/1069)\n*   Additional build context configuration is now supported in Compose files via `x-bake`. [docker/buildx#1256](https://github.com/docker/buildx/issues/1256)\n*   Inspecting builder now shows current driver options configuration. [docker/buildx#1003](https://github.com/docker/buildx/issues/1003), [docker/buildx#1066](https://github.com/docker/buildx/issues/1066)\n\n### [Updates](#updates)\n\n*   Updated the Compose Specification to 1.4.0. [docker/buildx#1246](https://github.com/docker/buildx/issues/1246), [docker/buildx#1251](https://github.com/docker/buildx/issues/1251)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-11)\n\n*   The `buildx ls` command output has been updated with better access to errors from different builders. [docker/buildx#1109](https://github.com/docker/buildx/issues/1109)\n*   The `buildx create` command now performs additional validation of builder parameters to avoid creating a builder instance with invalid configuration. [docker/buildx#1206](https://github.com/docker/buildx/issues/1206)\n*   The `buildx imagetools create` command can now create new multi-platform images even if the source subimages are located on different repositories or registries. [docker/buildx#1137](https://github.com/docker/buildx/issues/1137)\n*   You can now set the default builder config that is used when creating builder instances without passing custom `--config` value. [docker/buildx#1111](https://github.com/docker/buildx/issues/1111)\n*   Docker driver can now detect if `dockerd` instance supports initially disabled Buildkit features like multi-platform images. [docker/buildx#1260](https://github.com/docker/buildx/issues/1260), [docker/buildx#1262](https://github.com/docker/buildx/issues/1262)\n*   Compose files using targets with `.` in the name are now converted to use `_` so the selector keys can still be used in such targets. [docker/buildx#1011](https://github.com/docker/buildx/issues/1011)\n*   Included an additional validation for checking valid driver configurations. [docker/buildx#1188](https://github.com/docker/buildx/issues/1188), [docker/buildx#1273](https://github.com/docker/buildx/issues/1273)\n*   The `remove` command now displays the removed builder and forbids removing context builders. [docker/buildx#1128](https://github.com/docker/buildx/issues/1128)\n*   Enable Azure authentication when using Kubernetes driver. [docker/buildx#974](https://github.com/docker/buildx/issues/974)\n*   Add tolerations handling for kubernetes driver. [docker/buildx#1045](https://github.com/docker/buildx/issues/1045) [docker/buildx#1053](https://github.com/docker/buildx/issues/1053)\n*   Replace deprecated seccomp annotations with `securityContext` in the `kubernetes` driver. [docker/buildx#1052](https://github.com/docker/buildx/issues/1052)\n*   Fix panic on handling manifests with nil platform. [docker/buildx#1144](https://github.com/docker/buildx/issues/1144)\n*   Fix using duration filter with `prune` command. [docker/buildx#1252](https://github.com/docker/buildx/issues/1252)\n*   Fix merging multiple JSON files on Bake definition. [docker/buildx#1025](https://github.com/docker/buildx/issues/1025)\n*   Fix issues with implicit builder created from Docker context had invalid configuration or dropped connection. [docker/buildx#1129](https://github.com/docker/buildx/issues/1129)\n*   Fix conditions for showing no-output warning when using named contexts. [docker/buildx#968](https://github.com/docker/buildx/issues/968)\n*   Fix duplicating builders when builder instance and docker context have the same name. [docker/buildx#1131](https://github.com/docker/buildx/issues/1131)\n*   Fix printing unnecessary SSH warning logs. [docker/buildx#1085](https://github.com/docker/buildx/issues/1085)\n*   Fix possible panic when using an empty variable block with Bake JSON definition. [docker/buildx#1080](https://github.com/docker/buildx/issues/1080)\n*   Fix image tools commands not handling `--builder` flag correctly. [docker/buildx#1067](https://github.com/docker/buildx/issues/1067)\n*   Fix using custom image together with rootless option. [docker/buildx#1063](https://github.com/docker/buildx/issues/1063)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.9.0).\n\n_2022-04-04_\n\n### [Updates](#updates-1)\n\n*   Update Compose spec used by `buildx bake` to v1.2.1 to fix parsing ports definition. [docker/buildx#1033](https://github.com/docker/buildx/issues/1033)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-12)\n\n*   Fix possible crash on handling progress streams from BuildKit v0.10. [docker/buildx#1042](https://github.com/docker/buildx/issues/1042)\n*   Fix parsing groups in `buildx bake` when already loaded by a parent group. [docker/buildx#1021](https://github.com/docker/buildx/issues/1021)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.8.2).\n\n_2022-03-21_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-13)\n\n*   Fix possible panic on handling build context scanning errors. [docker/buildx#1005](https://github.com/docker/buildx/issues/1005)\n*   Allow `.` on Compose target names in `buildx bake` for backward compatibility. [docker/buildx#1018](https://github.com/docker/buildx/issues/1018)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.8.1).\n\n_2022-03-09_\n\n### [New](#new-5)\n\n*   Build command now accepts `--build-context` flag to [define additional named build contexts](https://docs.docker.com/reference/cli/docker/buildx/build/#build-context) for your builds. [docker/buildx#904](https://github.com/docker/buildx/issues/904)\n*   Bake definitions now support [defining dependencies between targets](https://docs.docker.com/build/bake/contexts/) and using the result of one target in another build. [docker/buildx#928](https://github.com/docker/buildx/issues/928), [docker/buildx#965](https://github.com/docker/buildx/issues/965), [docker/buildx#963](https://github.com/docker/buildx/issues/963), [docker/buildx#962](https://github.com/docker/buildx/issues/962), [docker/buildx#981](https://github.com/docker/buildx/issues/981)\n*   `imagetools inspect` now accepts `--format` flag allowing access to config and buildinfo for specific images. [docker/buildx#854](https://github.com/docker/buildx/issues/854), [docker/buildx#972](https://github.com/docker/buildx/issues/972)\n*   New flag `--no-cache-filter` allows configuring build, so it ignores cache only for specified Dockerfile stages. [docker/buildx#860](https://github.com/docker/buildx/issues/860)\n*   Builds can now show a summary of warnings sets by the building frontend. [docker/buildx#892](https://github.com/docker/buildx/issues/892)\n*   The new build argument `BUILDKIT_INLINE_BUILDINFO_ATTRS` allows opting-in to embed building attributes to resulting image. [docker/buildx#908](https://github.com/docker/buildx/issues/908)\n*   The new flag `--keep-buildkitd` allows keeping BuildKit daemon running when removing a builder\n    *   [docker/buildx#852](https://github.com/docker/buildx/issues/852)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-14)\n\n*   `--metadata-file` output now supports embedded structure types. [docker/buildx#946](https://github.com/docker/buildx/issues/946)\n*   `buildx rm` now accepts new flag `--all-inactive` for removing all builders that are not currently running. [docker/buildx#885](https://github.com/docker/buildx/issues/885)\n*   Proxy config is now read from Docker configuration file and sent with build requests for backward compatibility. [docker/buildx#959](https://github.com/docker/buildx/issues/959)\n*   Support host networking in Compose. [docker/buildx#905](https://github.com/docker/buildx/issues/905), [docker/buildx#880](https://github.com/docker/buildx/issues/880)\n*   Bake files can now be read from stdin with `-f -`. [docker/buildx#864](https://github.com/docker/buildx/issues/864)\n*   `--iidfile` now always writes the image config digest independently of the driver being used (use `--metadata-file` for digest). [docker/buildx#980](https://github.com/docker/buildx/issues/980)\n*   Target names in Bake are now restricted to not use special characters. [docker/buildx#929](https://github.com/docker/buildx/issues/929)\n*   Image manifest digest can be read from metadata when pushed with `docker` driver. [docker/buildx#989](https://github.com/docker/buildx/issues/989)\n*   Fix environment file handling in Compose files. [docker/buildx#905](https://github.com/docker/buildx/issues/905)\n*   Show last access time in `du` command. [docker/buildx#867](https://github.com/docker/buildx/issues/867)\n*   Fix possible double output logs when multiple Bake targets run same build steps. [docker/buildx#977](https://github.com/docker/buildx/issues/977)\n*   Fix possible errors on multi-node builder building multiple targets with mixed platform. [docker/buildx#985](https://github.com/docker/buildx/issues/985)\n*   Fix some nested inheritance cases in Bake. [docker/buildx#914](https://github.com/docker/buildx/issues/914)\n*   Fix printing default group on Bake files. [docker/buildx#884](https://github.com/docker/buildx/issues/884)\n*   Fix `UsernsMode` when using rootless container. [docker/buildx#887](https://github.com/docker/buildx/issues/887)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.8.0).\n\n_2021-08-25_\n\n### [Fixes](#fixes)\n\n*   Fix issue with matching exclude rules in `.dockerignore`. [docker/buildx#858](https://github.com/docker/buildx/issues/858)\n*   Fix `bake --print` JSON output for current group. [docker/buildx#857](https://github.com/docker/buildx/issues/857)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.7.1).\n\n_2021-11-10_\n\n### [New features](#new-features)\n\n*   TLS certificates from BuildKit configuration are now transferred to build container with `docker-container` and `kubernetes` drivers. [docker/buildx#787](https://github.com/docker/buildx/issues/787)\n*   Builds support `--ulimit` flag for feature parity. [docker/buildx#800](https://github.com/docker/buildx/issues/800)\n*   Builds support `--shm-size` flag for feature parity. [docker/buildx#790](https://github.com/docker/buildx/issues/790)\n*   Builds support `--quiet` for feature parity. [docker/buildx#740](https://github.com/docker/buildx/issues/740)\n*   Builds support `--cgroup-parent` flag for feature parity. [docker/buildx#814](https://github.com/docker/buildx/issues/814)\n*   Bake supports builtin variable `BAKE_LOCAL_PLATFORM`. [docker/buildx#748](https://github.com/docker/buildx/issues/748)\n*   Bake supports `x-bake` extension field in Compose files. [docker/buildx#721](https://github.com/docker/buildx/issues/721)\n*   `kubernetes` driver now supports colon-separated `KUBECONFIG`. [docker/buildx#761](https://github.com/docker/buildx/issues/761)\n*   `kubernetes` driver now supports setting Buildkit config file with `--config`. [docker/buildx#682](https://github.com/docker/buildx/issues/682)\n*   `kubernetes` driver now supports installing QEMU emulators with driver-opt. [docker/buildx#682](https://github.com/docker/buildx/issues/682)\n\n### [Enhancements](#enhancements-2)\n\n*   Allow using custom registry configuration for multi-node pushes from the client. [docker/buildx#825](https://github.com/docker/buildx/issues/825)\n*   Allow using custom registry configuration for `buildx imagetools` command. [docker/buildx#825](https://github.com/docker/buildx/issues/825)\n*   Allow booting builder after creating with `buildx create --bootstrap`. [docker/buildx#692](https://github.com/docker/buildx/issues/692)\n*   Allow `registry:insecure` output option for multi-node pushes. [docker/buildx#825](https://github.com/docker/buildx/issues/825)\n*   BuildKit config and TLS files are now kept in Buildx state directory and reused if BuildKit instance needs to be recreated. [docker/buildx#824](https://github.com/docker/buildx/issues/824)\n*   Ensure different projects use separate destination directories for incremental context transfer for better performance. [docker/buildx#817](https://github.com/docker/buildx/issues/817)\n*   Build containers are now placed on separate cgroup by default. [docker/buildx#782](https://github.com/docker/buildx/issues/782)\n*   Bake now prints the default group with `--print`. [docker/buildx#720](https://github.com/docker/buildx/issues/720)\n*   `docker` driver now dials build session over HTTP for better performance. [docker/buildx#804](https://github.com/docker/buildx/issues/804)\n\n### [Fixes](#fixes-1)\n\n*   Fix using `--iidfile` together with a multi-node push. [docker/buildx#826](https://github.com/docker/buildx/issues/826)\n*   Using `--push` in Bake does not clear other image export options in the file. [docker/buildx#773](https://github.com/docker/buildx/issues/773)\n*   Fix Git URL detection for `buildx bake` when `https` protocol was used. [docker/buildx#822](https://github.com/docker/buildx/issues/822)\n*   Fix pushing image with multiple names on multi-node builds. [docker/buildx#815](https://github.com/docker/buildx/issues/815)\n*   Avoid showing `--builder` flags for commands that don't use it. [docker/buildx#818](https://github.com/docker/buildx/issues/818)\n*   Unsupported build flags now show a warning. [docker/buildx#810](https://github.com/docker/buildx/issues/810)\n*   Fix reporting error details in some OpenTelemetry traces. [docker/buildx#812](https://github.com/docker/buildx/issues/812)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.7.0).\n\n_2021-08-30_\n\n### [Fixes](#fixes-2)\n\n*   Fix BuildKit state volume location for Windows clients. [docker/buildx#751](https://github.com/docker/buildx/issues/751)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.6.3).\n\n_2021-08-21_\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.6.2).\n\n### [Fixes](#fixes-3)\n\n*   Fix connection error showing up in some SSH configurations. [docker/buildx#741](https://github.com/docker/buildx/issues/741)\n\n_2021-07-30_\n\n### [Enhancements](#enhancements-3)\n\n*   Set `ConfigFile` to parse compose files with Bake. [docker/buildx#704](https://github.com/docker/buildx/issues/704)\n\n### [Fixes](#fixes-4)\n\n*   Duplicate progress env var. [docker/buildx#693](https://github.com/docker/buildx/issues/693)\n*   Should ignore nil client. [docker/buildx#686](https://github.com/docker/buildx/issues/686)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.6.1).\n\n_2021-07-16_\n\n### [New features](#new-features-1)\n\n*   Support for OpenTelemetry traces and forwarding Buildx client traces to BuildKit. [docker/buildx#635](https://github.com/docker/buildx/issues/635)\n*   Experimental GitHub Actions remote cache backend with `--cache-to type=gha` and `--cache-from type=gha`. [docker/buildx#535](https://github.com/docker/buildx/issues/535)\n*   New `--metadata-file` flag has been added to build and Bake command that allows saving build result metadata in JSON format. [docker/buildx#605](https://github.com/docker/buildx/issues/605)\n*   This is the first release supporting Windows ARM64. [docker/buildx#654](https://github.com/docker/buildx/issues/654)\n*   This is the first release supporting Linux Risc-V. [docker/buildx#652](https://github.com/docker/buildx/issues/652)\n*   Bake now supports building from remote definition with local files or another remote source as context. [docker/buildx#671](https://github.com/docker/buildx/issues/671)\n*   Bake now allows variables to reference each other and using user functions in variables and vice-versa. [docker/buildx#575](https://github.com/docker/buildx/issues/575), [docker/buildx#539](https://github.com/docker/buildx/issues/539), [docker/buildx#532](https://github.com/docker/buildx/issues/532)\n*   Bake allows defining attributes in the global scope. [docker/buildx#541](https://github.com/docker/buildx/issues/541)\n*   Bake allows variables across multiple files. [docker/buildx#538](https://github.com/docker/buildx/issues/538)\n*   New quiet mode has been added to progress printer. [docker/buildx#558](https://github.com/docker/buildx/issues/558)\n*   `kubernetes` driver now supports defining resources/limits. [docker/buildx#618](https://github.com/docker/buildx/issues/618)\n*   Buildx binaries can now be accessed through [buildx-bin](https://hub.docker.com/r/docker/buildx-bin) Docker image. [docker/buildx#656](https://github.com/docker/buildx/issues/656)\n\n### [Enhancements](#enhancements-4)\n\n*   `docker-container` driver now keeps BuildKit state in volume. Enabling updates with keeping state. [docker/buildx#672](https://github.com/docker/buildx/issues/672)\n*   Compose parser is now based on new [compose-go parser](https://github.com/compose-spec/compose-go) fixing support for some newer syntax. [docker/buildx#669](https://github.com/docker/buildx/issues/669)\n*   SSH socket is now automatically forwarded when building an ssh-based git URL. [docker/buildx#581](https://github.com/docker/buildx/issues/581)\n*   Bake HCL parser has been rewritten. [docker/buildx#645](https://github.com/docker/buildx/issues/645)\n*   Extend HCL support with more functions. [docker/buildx#491](https://github.com/docker/buildx/issues/491) [docker/buildx#503](https://github.com/docker/buildx/issues/503)\n*   Allow secrets from environment variables. [docker/buildx#488](https://github.com/docker/buildx/issues/488)\n*   Builds with an unsupported multi-platform and load configuration now fail fast. [docker/buildx#582](https://github.com/docker/buildx/issues/582)\n*   Store Kubernetes config file to make buildx builder switchable. [docker/buildx#497](https://github.com/docker/buildx/issues/497)\n*   Kubernetes now lists all pods as nodes on inspection. [docker/buildx#477](https://github.com/docker/buildx/issues/477)\n*   Default Rootless image has been set to `moby/buildkit:buildx-stable-1-rootless`. [docker/buildx#480](https://github.com/docker/buildx/issues/480)\n\n### [Fixes](#fixes-5)\n\n*   `imagetools create` command now correctly merges JSON descriptor with old one. [docker/buildx#592](https://github.com/docker/buildx/issues/592)\n*   Fix building with `--network=none` not requiring extra security entitlements. [docker/buildx#531](https://github.com/docker/buildx/issues/531)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.6.0).\n\n_2020-12-15_\n\n### [Fixes](#fixes-6)\n\n*   Fix regression on setting `--platform` on `buildx create` outside `kubernetes` driver. [docker/buildx#475](https://github.com/docker/buildx/issues/475)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.5.1).\n\n_2020-12-15_\n\n### [New features](#new-features-2)\n\n*   The `docker` driver now supports the `--push` flag. [docker/buildx#442](https://github.com/docker/buildx/issues/442)\n*   Bake supports inline Dockerfiles. [docker/buildx#398](https://github.com/docker/buildx/issues/398)\n*   Bake supports building from remote URLs and Git repositories. [docker/buildx#398](https://github.com/docker/buildx/issues/398)\n*   `BUILDX_CONFIG` env var allow users to have separate buildx state from Docker config. [docker/buildx#385](https://github.com/docker/buildx/issues/385)\n*   `BUILDKIT_MULTI_PLATFORM` build arg allows to force building multi-platform return objects even if only one `--platform` specified. [docker/buildx#467](https://github.com/docker/buildx/issues/467)\n\n### [Enhancements](#enhancements-5)\n\n*   Allow `--append` to be used with `kubernetes` driver. [docker/buildx#370](https://github.com/docker/buildx/issues/370)\n*   Build errors show error location in source files and system stacktraces with `--debug`. [docker/buildx#389](https://github.com/docker/buildx/issues/389)\n*   Bake formats HCL errors with source definition. [docker/buildx#391](https://github.com/docker/buildx/issues/391)\n*   Bake allows empty string values in arrays that will be discarded. [docker/buildx#428](https://github.com/docker/buildx/issues/428)\n*   You can now use the Kubernetes cluster config with the `kubernetes` driver. [docker/buildx#368](https://github.com/docker/buildx/issues/368) [docker/buildx#460](https://github.com/docker/buildx/issues/460)\n*   Creates a temporary token for pulling images instead of sharing credentials when possible. [docker/buildx#469](https://github.com/docker/buildx/issues/469)\n*   Ensure credentials are passed when pulling BuildKit container image. [docker/buildx#441](https://github.com/docker/buildx/issues/441) [docker/buildx#433](https://github.com/docker/buildx/issues/433)\n*   Disable user namespace remapping in `docker-container` driver. [docker/buildx#462](https://github.com/docker/buildx/issues/462)\n*   Allow `--builder` flag to switch to default instance. [docker/buildx#425](https://github.com/docker/buildx/issues/425)\n*   Avoid warn on empty `BUILDX_NO_DEFAULT_LOAD` config value. [docker/buildx#390](https://github.com/docker/buildx/issues/390)\n*   Replace error generated by `quiet` option by a warning. [docker/buildx#403](https://github.com/docker/buildx/issues/403)\n*   CI has been switched to GitHub Actions. [docker/buildx#451](https://github.com/docker/buildx/issues/451), [docker/buildx#463](https://github.com/docker/buildx/issues/463), [docker/buildx#466](https://github.com/docker/buildx/issues/466), [docker/buildx#468](https://github.com/docker/buildx/issues/468), [docker/buildx#471](https://github.com/docker/buildx/issues/471)\n\n### [Fixes](#fixes-7)\n\n*   Handle lowercase Dockerfile name as a fallback for backward compatibility. [docker/buildx#444](https://github.com/docker/buildx/issues/444)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.5.0).\n\n_2020-08-22_\n\n### [New features](#new-features-3)\n\n*   Support `cacheonly` exporter. [docker/buildx#337](https://github.com/docker/buildx/issues/337)\n\n### [Enhancements](#enhancements-6)\n\n*   Update `go-cty` to pull in more `stdlib` functions. [docker/buildx#277](https://github.com/docker/buildx/issues/277)\n*   Improve error checking on load. [docker/buildx#281](https://github.com/docker/buildx/issues/281)\n\n### [Fixes](#fixes-8)\n\n*   Fix parsing json config with HCL. [docker/buildx#280](https://github.com/docker/buildx/issues/280)\n*   Ensure `--builder` is wired from root options. [docker/buildx#321](https://github.com/docker/buildx/issues/321)\n*   Remove warning for multi-platform iidfile. [docker/buildx#351](https://github.com/docker/buildx/issues/351)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.4.2).\n\n_2020-05-01_\n\n### [Fixes](#fixes-9)\n\n*   Fix regression on flag parsing. [docker/buildx#268](https://github.com/docker/buildx/issues/268)\n*   Fix using pull and no-cache keys in HCL targets. [docker/buildx#268](https://github.com/docker/buildx/issues/268)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.4.1).\n\n_2020-04-30_\n\n### [New features](#new-features-4)\n\n*   Add `kubernetes` driver. [docker/buildx#167](https://github.com/docker/buildx/issues/167)\n*   New global `--builder` flag to override builder instance for a single command. [docker/buildx#246](https://github.com/docker/buildx/issues/246)\n*   New `prune` and `du` commands for managing local builder cache. [docker/buildx#249](https://github.com/docker/buildx/issues/249)\n*   You can now set the new `pull` and `no-cache` options for HCL targets. [docker/buildx#165](https://github.com/docker/buildx/issues/165)\n\n### [Enhancements](#enhancements-7)\n\n*   Upgrade Bake to HCL2 with support for variables and functions. [docker/buildx#192](https://github.com/docker/buildx/issues/192)\n*   Bake now supports `--load` and `--push`. [docker/buildx#164](https://github.com/docker/buildx/issues/164)\n*   Bake now supports wildcard overrides for multiple targets. [docker/buildx#164](https://github.com/docker/buildx/issues/164)\n*   Container driver allows setting environment variables via `driver-opt`. [docker/buildx#170](https://github.com/docker/buildx/issues/170)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.4.0).\n\n_2019-09-27_\n\n### [Enhancements](#enhancements-8)\n\n*   Handle copying unix sockets instead of erroring. [docker/buildx#155](https://github.com/docker/buildx/issues/155) [moby/buildkit#1144](https://github.com/moby/buildkit/issues/1144)\n\n### [Fixes](#fixes-10)\n\n*   Running Bake with multiple Compose files now merges targets correctly. [docker/buildx#134](https://github.com/docker/buildx/issues/134)\n*   Fix bug when building a Dockerfile from stdin (`build -f -`). [docker/buildx#153](https://github.com/docker/buildx/issues/153)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.3.1).\n\n_2019-08-02_\n\n### [New features](#new-features-5)\n\n*   Custom `buildkitd` daemon flags. [docker/buildx#102](https://github.com/docker/buildx/issues/102)\n*   Driver-specific options on `create`. [docker/buildx#122](https://github.com/docker/buildx/issues/122)\n\n### [Enhancements](#enhancements-9)\n\n*   Environment variables are used in Compose files. [docker/buildx#117](https://github.com/docker/buildx/issues/117)\n*   Bake now honors `--no-cache` and `--pull`. [docker/buildx#118](https://github.com/docker/buildx/issues/118)\n*   Custom BuildKit config file. [docker/buildx#121](https://github.com/docker/buildx/issues/121)\n*   Entitlements support with `build --allow`. [docker/buildx#104](https://github.com/docker/buildx/issues/104)\n\n### [Fixes](#fixes-11)\n\n*   Fix bug where `--build-arg foo` would not read `foo` from environment. [docker/buildx#116](https://github.com/docker/buildx/issues/116)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.3.0).\n\n_2019-05-30_\n\n### [Enhancements](#enhancements-10)\n\n*   Change Compose file handling to require valid service specifications. [docker/buildx#87](https://github.com/docker/buildx/issues/87)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.2.2).\n\n_2019-05-25_\n\n### [New features](#new-features-6)\n\n*   Add `BUILDKIT_PROGRESS` env var. [docker/buildx#69](https://github.com/docker/buildx/issues/69)\n*   Add `local` platform. [docker/buildx#70](https://github.com/docker/buildx/issues/70)\n\n### [Enhancements](#enhancements-11)\n\n*   Keep arm variant if one is defined in the config. [docker/buildx#68](https://github.com/docker/buildx/issues/68)\n*   Make dockerfile relative to context. [docker/buildx#83](https://github.com/docker/buildx/issues/83)\n\n### [Fixes](#fixes-12)\n\n*   Fix parsing target from compose files. [docker/buildx#53](https://github.com/docker/buildx/issues/53)\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.2.1).\n\n_2019-04-25_\n\n### [New features](#new-features-7)\n\n*   First release\n\nFor more details, see the complete release notes in the [Buildx GitHub repository](https://github.com/docker/buildx/releases/tag/v0.2.0).",
    "title": "Build release notes | Docker Docs\n",
    "description": "Learn about the new features, bug fixes, and breaking changes for the newest Buildx release",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/intro/history/",
    "markdown": "# History and development of Docker Compose\n\nThis page provides:\n\n*   A brief history of the development of the Docker Compose CLI\n*   A clear explanation of the major versions and file formats that make up Compose V1 and Compose V2\n*   The main differences between Compose V1 and Compose V2\n\n![Image showing the main differences between Compose V1 and Compose V2](https://docs.docker.com/compose/images/v1-versus-v2.png)\n\nThe image above shows that the currently supported version of the Docker Compose CLI is Compose V2 which is defined by the [Compose Specification](https://docs.docker.com/compose/compose-file/).\n\nIt also provides a quick snapshot of the differences in file formats, command-line syntax, and top-level elements. This is covered in more detail in the following sections.\n\n### [Docker Compose CLI versioning](#docker-compose-cli-versioning)\n\nVersion one of the Docker Compose command-line binary was first released in 2014. It was written in Python, and is invoked with `docker-compose`. Typically, Compose V1 projects include a top-level `version` element in the `compose.yml` file, with values ranging from `2.0` to `3.8`, which refer to the specific [file formats](#compose-file-format-versioning).\n\nVersion two of the Docker Compose command-line binary was announced in 2020, is written in Go, and is invoked with `docker compose`. Compose V2 ignores the `version` top-level element in the `compose.yml` file.\n\n### [Compose file format versioning](#compose-file-format-versioning)\n\nThe Docker Compose CLIs are defined by specific file formats.\n\nThree major versions of the Compose file format for Compose V1 were released:\n\n*   Compose file format 1 with Compose 1.0.0 in 2014\n*   Compose file format 2.x with Compose 1.6.0 in 2016\n*   Compose file format 3.x with Compose 1.10.0 in 2017\n\nCompose file format 1 is substantially different to all the following formats as it lacks a top-level `services` key. Its usage is historical and files written in this format don't run with Compose V2.\n\nCompose file format 2.x and 3.x are very similar to each other, but the latter introduced many new options targeted at Swarm deployments.\n\nTo address confusion around Compose CLI versioning, Compose file format versioning, and feature parity depending on whether Swarm mode was in use, file format 2.x and 3.x were merged into the [Compose Specification](https://docs.docker.com/compose/compose-file/).\n\nCompose V2 uses the Compose Specification for project definition. Unlike the prior file formats, the Compose Specification is rolling and makes the `version` top-level element optional. Compose V2 also makes use of optional specifications - [Deploy](https://docs.docker.com/compose/compose-file/deploy/), [Develop](https://docs.docker.com/compose/compose-file/develop/) and [Build](https://docs.docker.com/compose/compose-file/build/).\n\nTo make [migration](https://docs.docker.com/compose/migrate/) easier, Compose V2 has backwards compatibility for certain elements that have been deprecated or changed between Compose file format 2.x/3.x and the Compose Specification.",
    "title": "History and development of Docker Compose | Docker Docs\n",
    "description": "History of Compose V1 and Compose YAML schema versioning",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/install/",
    "markdown": "# Overview of installing Docker Compose\n\nThis page contains summary information about the available options for installing Docker Compose.\n\n### [Scenario one: Install Docker Desktop](#scenario-one-install-docker-desktop)\n\nThe easiest and recommended way to get Docker Compose is to install Docker Desktop. Docker Desktop includes Docker Compose along with Docker Engine and Docker CLI which are Compose prerequisites.\n\nDocker Desktop is available on:\n\n*   [Linux](https://docs.docker.com/desktop/install/linux-install/)\n*   [Mac](https://docs.docker.com/desktop/install/mac-install/)\n*   [Windows](https://docs.docker.com/desktop/install/windows-install/)\n\nIf you have already installed Docker Desktop, you can check which version of Compose you have by selecting **About Docker Desktop** from the Docker menu ![whale menu](https://docs.docker.com/desktop/images/whale-x.svg) .\n\n### [Scenario two: Install the Compose plugin](#scenario-two-install-the-compose-plugin)\n\nIf you already have Docker Engine and Docker CLI installed, you can install the Compose plugin from the command line, by either:\n\n*   [Using Docker's repository](https://docs.docker.com/compose/install/linux/#install-using-the-repository)\n*   [Downloading and installing manually](https://docs.docker.com/compose/install/linux/#install-the-plugin-manually)\n\n> **Important**\n> \n> This is only available on Linux\n\n### [Scenario three: Install the Compose standalone](#scenario-three-install-the-compose-standalone)\n\nYou can [install the Compose standalone](https://docs.docker.com/compose/install/standalone/) on Linux or on Windows Server.\n\n> **Warning**\n> \n> This install scenario is not recommended and is only supported for backward compatibility purposes.",
    "title": "Overview of installing Docker Compose | Docker Docs\n",
    "description": "Learn how to install Docker Compose. Compose is available natively on Docker Desktop, as a Docker Engine plugin, and as a standalone tool.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/install/linux/",
    "markdown": "# Install the Compose plugin | Docker Docs\n\nOn this page you can find instructions on how to install the Compose plugin on Linux from the command line.\n\nTo install the Compose plugin on Linux, you can either:\n\n*   [Set up Docker's repository on your Linux system](#install-using-the-repository).\n*   [Install Compose manually](#install-the-plugin-manually).\n\n> **Note**\n> \n> These instructions assume you already have Docker Engine and Docker CLI installed and now want to install the Compose plugin.  \n> For Compose standalone, see [Install Compose Standalone](https://docs.docker.com/compose/install/standalone/).\n\n1.  Set up the repository. Find distro-specific instructions in:\n    \n    [Ubuntu](https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository) | [CentOS](https://docs.docker.com/engine/install/centos/#set-up-the-repository) | [Debian](https://docs.docker.com/engine/install/debian/#install-using-the-repository) | [Raspberry Pi OS](https://docs.docker.com/engine/install/raspberry-pi-os/#install-using-the-repository) | [Fedora](https://docs.docker.com/engine/install/fedora/#set-up-the-repository) | [RHEL](https://docs.docker.com/engine/install/rhel/#set-up-the-repository) | [SLES](https://docs.docker.com/engine/install/sles/#set-up-the-repository).\n    \n2.  Update the package index, and install the latest version of Docker Compose:\n    \n    *   For Ubuntu and Debian, run:\n        \n    *   For RPM-based distros, run:\n        \n3.  Verify that Docker Compose is installed correctly by checking the version.\n    \n    Expected output:\n    \n    Where `vN.N.N` is placeholder text standing in for the latest version.\n    \n\n### [Update Compose](#update-compose)\n\nTo update the Compose plugin, run the following commands:\n\n*   For Ubuntu and Debian, run:\n    \n*   For RPM-based distros, run:\n    \n\n> **Note**\n> \n> This option requires you to manage upgrades manually. We recommend setting up Docker's repository for easier maintenance.\n\n1.  To download and install the Compose CLI plugin, run:\n    \n    This command downloads the latest release of Docker Compose (from the Compose releases repository) and installs Compose for the active user under `$HOME` directory.\n    \n    To install:\n    \n    *   Docker Compose for _all users_ on your system, replace `~/.docker/cli-plugins` with `/usr/local/lib/docker/cli-plugins`.\n    *   A different version of Compose, substitute `v2.28.1` with the version of Compose you want to use.\n    \n    *   For a different architecture, substitute `x86_64` with the [architecture you want](https://github.com/docker/compose/releases).\n2.  Apply executable permissions to the binary:\n    \n    or, if you chose to install Compose for all users:\n    \n3.  Test the installation.",
    "title": "Install the Compose plugin | Docker Docs\n",
    "description": "Download and install Docker Compose on Linux with this step-by-step handbook. This plugin can be installed manually or by using a repository.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/install/standalone/",
    "markdown": "# Install Compose standalone | Docker Docs\n\nOn this page you can find instructions on how to install Compose standalone on Linux or Windows Server, from the command line.\n\n### [On Linux](#on-linux)\n\n> **Compose standalone**\n> \n> Note that Compose standalone uses the `-compose` syntax instead of the current standard syntax `compose`.  \n> For example type `docker-compose up` when using Compose standalone, instead of `docker compose up`.\n\n1.  To download and install Compose standalone, run:\n    \n2.  Apply executable permissions to the standalone binary in the target path for the installation.\n    \n3.  Test and execute compose commands using `docker-compose`.\n    \n    > **Tip**\n    > \n    > If the command `docker-compose` fails after installation, check your path. You can also create a symbolic link to `/usr/bin` or any other directory in your path. For example:\n    \n\n### [On Windows Server](#on-windows-server)\n\nFollow these instructions if you are running the Docker daemon and client directly on Microsoft Windows Server and want to install Docker Compose.\n\n1.  Run PowerShell as an administrator. When asked if you want to allow this app to make changes to your device, select **Yes** in order to proceed with the installation.\n    \n2.  GitHub now requires TLS1.2. In PowerShell, run the following:\n    \n3.  Run the following command to download the latest release of Compose (v2.28.1):\n    \n    > **Note**\n    > \n    > On Windows Server 2019 you can add the Compose executable to `$Env:ProgramFiles\\Docker`. Because this directory is registered in the system `PATH`, you can run the `docker-compose --version` command on the subsequent step with no additional configuration.\n    \n    > To install a different version of Compose, substitute `v2.28.1` with the version of Compose you want to use.\n    \n4.  Test the installation.",
    "title": "Install Compose standalone | Docker Docs\n",
    "description": "How to install Docker Compose - Other Scenarios",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/set-environment-variables/",
    "markdown": "# Set environment variables within your container's environment\n\nA container's environment is not set until there's an explicit entry in the service configuration to make this happen. With Compose, there are two ways you can set environment variables in your containers with your Compose file.\n\n> **Tip**\n> \n> Don't use environment variables to pass sensitive information, such as passwords, in to your containers. Use [secrets](https://docs.docker.com/compose/use-secrets/) instead.\n\nYou can set environment variables directly in your container's environment with the [`environment` attribute](https://docs.docker.com/compose/compose-file/05-services/#environment) in your `compose.yml`.\n\nIt supports both list and mapping syntax:\n\nis equivalent to\n\nSee [`environment` attribute](https://docs.docker.com/compose/compose-file/05-services/#environment) for more examples on how to use it.\n\n### [Additional information](#additional-information)\n\n*   You can choose not to set a value and pass the environment variables from your shell straight through to your containers. It works in the same way as `docker run -e VARIABLE ...`:\n\nThe value of the `DEBUG` variable in the container is taken from the value for the same variable in the shell in which Compose is run. Note that in this case no warning is issued if the `DEBUG` variable in the shell environment is not set.\n\n*   You can also take advantage of [interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/#interpolation-syntax). In the following example, the result is similar to the one above but Compose gives you a warning if the `DEBUG` variable is not set in the shell environment or in an `.env` file in the project directory.\n    \n\nA container's environment can also be set using [`.env` files](https://docs.docker.com/compose/environment-variables/variable-interpolation/#env-file) along with the [`env_file` attribute](https://docs.docker.com/compose/compose-file/05-services/#env_file).\n\nUsing an `.env` file lets you to use the same file for use by a plain `docker run --env-file ...` command, or to share the same `.env` file within multiple services without the need to duplicate a long `environment` YAML block.\n\nIt can also help you keep your environment variables separate from your main configuration file, providing a more organized and secure way to manage sensitive information, as you do not need to place your `.env` file in the root of your project's directory.\n\nThe [`env_file` attribute](https://docs.docker.com/compose/compose-file/05-services/#env_file) also lets you use multiple `.env` files in your Compose application.\n\nThe paths to your `.env` file, specified in the `env_file` attribute, are relative to the location of your `compose.yml` file.\n\n> **Important**\n> \n> Interpolation in `.env` files is a Docker Compose CLI feature.\n> \n> It is not supported when running `docker run --env-file ...`.\n\n### [Additional information](#additional-information-1)\n\n*   If multiple files are specified, they are evaluated in order and can override values set in previous files.\n*   In addition, as the `.env` file supports [interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/), it is possible to combine those with values set by `environment`.\n*   As of Docker Compose version 2.24.0, you can set your `.env` file, defined by the `env_file` attribute, to be optional by using the `required` field. When `required` is set to `false` and the `.env` file is missing, Compose silently ignores the entry.\n*   Values in your `.env` file can be overridden from the command line by using [`docker compose run -e`](#set-environment-variables-with-docker-compose-run---env).\n\nSimilar to `docker run --env`, you can set environment variables temporarily with `docker compose run --env` or its short form `docker compose run -e`:\n\n### [Additional information](#additional-information-2)\n\n*   You can also pass a variable from the shell by not giving it a value:\n    \n\nThe value of the `DEBUG` variable in the container is taken from the value for the same variable in the shell in which Compose is run.\n\n*   [Understand environment variable precedence](https://docs.docker.com/compose/environment-variables/envvars-precedence/).\n*   [Set or change predefined environment variables](https://docs.docker.com/compose/environment-variables/envvars/)\n*   [Explore best practices](https://docs.docker.com/compose/environment-variables/best-practices/)\n*   [Understand interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/)",
    "title": "Set environment variables within your container's environment | Docker Docs\n",
    "description": "How to set, use, and manage environment variables with Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/envvars/",
    "markdown": "# Set or change pre-defined environment variables in Docker Compose\n\nCompose already comes with pre-defined environment variables. It also inherits common Docker CLI environment variables, such as `DOCKER_HOST` and `DOCKER_CONTEXT`. See [Docker CLI environment variable reference](https://docs.docker.com/engine/reference/commandline/cli/#environment-variables) for details.\n\nThis page contains information on how you can set or change the following pre-defined environment variables if you need to:\n\n*   `COMPOSE_CONVERT_WINDOWS_PATHS`\n*   `COMPOSE_FILE`\n*   `COMPOSE_PROFILES`\n*   `COMPOSE_PROJECT_NAME`\n*   `DOCKER_CERT_PATH`\n*   `COMPOSE_PARALLEL_LIMIT`\n*   `COMPOSE_IGNORE_ORPHANS`\n*   `COMPOSE_REMOVE_ORPHANS`\n*   `COMPOSE_PATH_SEPARATOR`\n*   `COMPOSE_ANSI`\n*   `COMPOSE_STATUS_STDOUT`\n*   `COMPOSE_ENV_FILES`\n*   `COMPOSE_MENU`\n*   `COMPOSE_EXPERIMENTAL`\n\nYou can set or change the pre-defined environment variables:\n\n*   Within your Compose file using the [`environment` attribute](https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute)\n*   With the `env-file` attribute and an [environment file](https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-env_file-attribute)\n*   From the command line\n*   From your [shell](https://docs.docker.com/compose/environment-variables/variable-interpolation/#substitute-from-the-shell)\n\nWhen changing or setting any environment variables, be aware of [Environment variable precedence](https://docs.docker.com/compose/environment-variables/envvars-precedence/).\n\n### [COMPOSE\\_PROJECT\\_NAME](#compose_project_name)\n\nSets the project name. This value is prepended along with the service name to the container's name on startup.\n\nFor example, if your project name is `myapp` and it includes two services `db` and `web`, then Compose starts containers named `myapp-db-1` and `myapp-web-1` respectively.\n\nCompose can set the project name in different ways. The level of precedence (from highest to lowest) for each method is as follows:\n\n1.  The `-p` command line flag\n2.  `COMPOSE_PROJECT_NAME`\n3.  The top level `name:` variable from the config file (or the last `name:` from a series of config files specified using `-f`)\n4.  The `basename` of the project directory containing the config file (or containing the first config file specified using `-f`)\n5.  The `basename` of the current directory if no config file is specified\n\nProject names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit. If the `basename` of the project directory or current directory violates this constraint, you must use one of the other mechanisms.\n\nSee also the [command-line options overview](https://docs.docker.com/compose/reference/#command-options-overview-and-help) and [using `-p` to specify a project name](https://docs.docker.com/compose/reference/#use--p-to-specify-a-project-name).\n\n### [COMPOSE\\_FILE](#compose_file)\n\nSpecifies the path to a Compose file. Specifying multiple Compose files is supported.\n\n*   Default behavior: If not provided, Compose looks for a file named `compose.yaml` or `docker-compose.yaml` in the current directory and, if not found, then Compose searches each parent directory recursively until a file by that name is found.\n*   Default separator: When specifying multiple Compose files, the path separators are, by default, on:\n    *   Mac and Linux: `:` (colon),\n    *   Windows: `;` (semicolon).\n\nThe path separator can also be customized using `COMPOSE_PATH_SEPARATOR`.\n\nExample: `COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml`.\n\nSee also the [command-line options overview](https://docs.docker.com/compose/reference/#command-options-overview-and-help) and [using `-f` to specify name and path of one or more Compose files](https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files).\n\n### [COMPOSE\\_PROFILES](#compose_profiles)\n\nSpecifies one or more profiles to be enabled on `compose up` execution. Services with matching profiles are started as well as any services for which no profile has been defined.\n\nFor example, calling `docker compose up`with `COMPOSE_PROFILES=frontend` selects services with the `frontend` profile as well as any services without a profile specified.\n\n*   Default separator: specify a list of profiles using a comma as separator.\n\nExample: `COMPOSE_PROFILES=frontend,debug`  \nThis example enables all services matching both the `frontend` and `debug` profiles and services without a profile.\n\nSee also [Using profiles with Compose](https://docs.docker.com/compose/profiles/) and the [`--profile` command-line option](https://docs.docker.com/compose/reference/#use---profile-to-specify-one-or-more-active-profiles).\n\n### [COMPOSE\\_CONVERT\\_WINDOWS\\_PATHS](#compose_convert_windows_paths)\n\nWhen enabled, Compose performs path conversion from Windows-style to Unix-style in volume definitions.\n\n*   Supported values:\n    *   `true` or `1`, to enable,\n    *   `false` or `0`, to disable.\n*   Defaults to: `0`.\n\n### [COMPOSE\\_PATH\\_SEPARATOR](#compose_path_separator)\n\nSpecifies a different path separator for items listed in `COMPOSE_FILE`.\n\n*   Defaults to:\n    *   On macOS and Linux to `:`,\n    *   On Windows to`;`.\n\n### [COMPOSE\\_IGNORE\\_ORPHANS](#compose_ignore_orphans)\n\nWhen enabled, Compose doesn't try to detect orphaned containers for the project.\n\n*   Supported values:\n    *   `true` or `1`, to enable,\n    *   `false` or `0`, to disable.\n*   Defaults to: `0`.\n\n### [COMPOSE\\_PARALLEL\\_LIMIT](#compose_parallel_limit)\n\nSpecifies the maximum level of parallelism for concurrent engine calls.\n\n### [COMPOSE\\_ANSI](#compose_ansi)\n\nSpecifies when to print ANSI control characters.\n\n*   Supported values:\n    *   `auto`, Compose detects if TTY mode can be used. Otherwise, use plain text mode.\n    *   `never`, use plain text mode.\n    *   `always` or `0`, use TTY mode.\n*   Defaults to: `auto`.\n\n### [COMPOSE\\_STATUS\\_STDOUT](#compose_status_stdout)\n\nWhen enabled, Compose writes its internal status and progress messages to `stdout` instead of `stderr`. The default value is false to clearly separate the output streams between Compose messages and your container's logs.\n\n*   Supported values:\n    *   `true` or `1`, to enable,\n    *   `false` or `0`, to disable.\n*   Defaults to: `0`.\n\n### [COMPOSE\\_ENV\\_FILES](#compose_env_files)\n\nLets you specify which environment files Compose should use if `--env-file` isn't used.\n\nWhen using multiple environment files, use a comma as a separator. For example,\n\nIf `COMPOSE_ENV_FILES` is not set, and you don't provide `--env-file` in the CLI, Docker Compose uses the default behavior, which is to look for an `.env` file in the project directory.\n\nWhen enabled, Compose displays a navigation menu where you can choose to open the Compose stack in Docker Desktop, switch on [`watch` mode](https://docs.docker.com/compose/file-watch/), or use [Docker Debug](https://docs.docker.com/reference/cli/docker/debug/).\n\n*   Supported values:\n    *   `true` or `1`, to enable,\n    *   `false` or `0`, to disable.\n*   Defaults to: `1` if you obtained Docker Compose through Docker Desktop, otherwise default is `0`.\n\n> **Note**\n> \n> Available in Docker Compose version 2.26.0 and later, and Docker Desktop version 4.29 and later\n\n### [COMPOSE\\_EXPERIMENTAL](#compose_experimental)\n\nThis is an opt-out variable. When turned off it deactivates the experimental features such as the navigation menu or [Synchronized file shares](https://docs.docker.com/desktop/synchronized-file-sharing/).\n\n*   Supported values:\n    *   `true` or `1`, to enable,\n    *   `false` or `0`, to disable.\n*   Defaults to: `1`.\n\n> **Note**\n> \n> Available in Docker Compose version 2.26.0 and later, and Docker Desktop version 4.29 and later\n\nThe following environment variables have no effect in Compose V2. For more information, see [Migrate to Compose V2](https://docs.docker.com/compose/migrate/).\n\n*   `COMPOSE_API_VERSION` By default the API version is negotiated with the server. Use `DOCKER_API_VERSION`.  \n    See the [Docker CLI environment variable reference](https://docs.docker.com/engine/reference/commandline/cli/#environment-variables) page.\n*   `COMPOSE_HTTP_TIMEOUT`\n*   `COMPOSE_TLS_VERSION`\n*   `COMPOSE_FORCE_WINDOWS_HOST`\n*   `COMPOSE_INTERACTIVE_NO_CLI`\n*   `COMPOSE_DOCKER_CLI_BUILD` Use `DOCKER_BUILDKIT` to select between BuildKit and the classic builder. If `DOCKER_BUILDKIT=0` then `docker compose build` uses the classic builder to build images.",
    "title": "Set or change pre-defined environment variables in Docker Compose | Docker Docs\n",
    "description": "Compose pre-defined environment variables",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/envvars-precedence/",
    "markdown": "# Environment variables precedence in Docker Compose\n\nWhen the same environment variable is set in multiple sources, Docker Compose follows a precedence rule to determine the value for that variable in your container's environment.\n\nThis page contains information on the level of precedence each method of setting environmental variables takes.\n\nThe order of precedence (highest to lowest) is as follows:\n\n1.  Set using [`docker compose run -e` in the CLI](https://docs.docker.com/compose/environment-variables/set-environment-variables/#set-environment-variables-with-docker-compose-run---env).\n2.  Set with either the `environment` or `env_file` attribute but with the value interpolated from your [shell](https://docs.docker.com/compose/environment-variables/variable-interpolation/#substitute-from-the-shell) or an environment file. (either your default [`.env` file](https://docs.docker.com/compose/environment-variables/variable-interpolation/#env-file), or with the [`--env-file` argument](https://docs.docker.com/compose/environment-variables/variable-interpolation/#substitute-with---env-file) in the CLI).\n3.  Set using just the [`environment` attribute](https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute) in the Compose file.\n4.  Use of the [`env_file` attribute](https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-env_file-attribute) in the Compose file.\n5.  Set in a container image in the [ENV directive](https://docs.docker.com/reference/dockerfile/#env). Having any `ARG` or `ENV` setting in a `Dockerfile` evaluates only if there is no Docker Compose entry for `environment`, `env_file` or `run --env`.\n\nIn the following example, a different value for the same environment variable in an `.env` file and with the `environment` attribute in the Compose file:\n\nThe environment variable defined with the `environment` attribute takes precedence.\n\nThe following table uses `VALUE`, an environment variable defining the version for an image, as an example.\n\n### [How the table works](#how-the-table-works)\n\nEach column represents a context from where you can set a value, or substitute in a value for `VALUE`.\n\nThe columns `Host OS environment` and `.env` file is listed only for illustration purposes. In reality, they don't result in a variable in the container by itself, but in conjunction with either the `environment` or `env_file` attribute.\n\nEach row represents a combination of contexts where `VALUE` is set, substituted, or both. The **Result** column indicates the final value for `VALUE` in each scenario.\n\n| #   | `docker compose run` | `environment` attribute | `env_file` attribute | Image `ENV` | `Host OS` environment | `.env` file |     | Result |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1   | \\-  | \\-  | \\-  | \\-  | `VALUE=1.4` | `VALUE=1.3` |     | \\-  |\n| 2   | \\-  | \\-  | `VALUE=1.6` | `VALUE=1.5` | `VALUE=1.4` | \\-  |     | **`VALUE=1.6`** |\n| 3   | \\-  | `VALUE=1.7` | \\-  | `VALUE=1.5` | `VALUE=1.4` | \\-  |     | **`VALUE=1.7`** |\n| 4   | \\-  | \\-  | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.5`** |\n| 5   | `--env VALUE=1.8` | \\-  | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.8`** |\n| 6   | `--env VALUE` | \\-  | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.4`** |\n| 7   | `--env VALUE` | \\-  | \\-  | `VALUE=1.5` | \\-  | `VALUE=1.3` |     | **`VALUE=1.3`** |\n| 8   | \\-  | \\-  | `VALUE` | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.4`** |\n| 9   | \\-  | \\-  | `VALUE` | `VALUE=1.5` | \\-  | `VALUE=1.3` |     | **`VALUE=1.3`** |\n| 10  | \\-  | `VALUE` | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.4`** |\n| 11  | \\-  | `VALUE` | \\-  | `VALUE=1.5` | \\-  | `VALUE=1.3` |     | **`VALUE=1.3`** |\n| 12  | `--env VALUE` | `VALUE=1.7` | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.4`** |\n| 13  | `--env VALUE=1.8` | `VALUE=1.7` | \\-  | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.8`** |\n| 14  | `--env VALUE=1.8` | \\-  | `VALUE=1.6` | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.8`** |\n| 15  | `--env VALUE=1.8` | `VALUE=1.7` | `VALUE=1.6` | `VALUE=1.5` | `VALUE=1.4` | `VALUE=1.3` |     | **`VALUE=1.8`** |\n\n### [Result explanation](#result-explanation)\n\nResult 1: The local environment takes precedence, but the Compose file is not set to replicate this inside the container, so no such variable is set.\n\nResult 2: The `env_file` attribute in the Compose file defines an explicit value for `VALUE` so the container environment is set accordingly.\n\nResult 3: The `environment` attribute in the Compose file defines an explicit value for `VALUE`, so the container environment is set accordingly/\n\nResult 4: The image's `ENV` directive declares the variable `VALUE`, and since the Compose file is not set to override this value, this variable is defined by image\n\nResult 5: The `docker compose run` command has the `--env` flag set which an explicit value, and overrides the value set by the image.\n\nResult 6: The `docker compose run` command has the `--env` flag set to replicate the value from the environment. Host OS value takes precedence and is replicated into the container's environment.\n\nResult 7: The `docker compose run` command has the `--env` flag set to replicate the value from the environment. Value from `.env` file is the selected to define the container's environment.\n\nResult 8: The `env_file` attribute in the Compose file is set to replicate `VALUE` from the local environment. Host OS value takes precedence and is replicated into the container's environment.\n\nResult 9: The `env_file` attribute in the Compose file is set to replicate `VALUE` from the local environment. Value from `.env` file is the selected to define the container's environment.\n\nResult 10: The `environment` attribute in the Compose file is set to replicate `VALUE` from the local environment. Host OS value takes precedence and is replicated into the container's environment.\n\nResult 11: The `environment` attribute in the Compose file is set to replicate `VALUE` from the local environment. Value from `.env` file is the selected to define the container's environment.\n\nResult 12: The `--env` flag has higher precedence than the `environment` and `env_file` attributes and is to set to replicate `VALUE` from the local environment. Host OS value takes precedence and is replicated into the container's environment.\n\nResults 13 to 15: The `--env` flag has higher precedence than the `environment` and `env_file` attributes and so sets the value.",
    "title": "Environment variables precedence in Docker Compose | Docker Docs\n",
    "description": "Scenario overview illustrating how environment variables are resolved in Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/variable-interpolation/",
    "markdown": "# Set, use, and manage variables in a Compose file with interpolation\n\nA Compose file can use variables to offer more flexibility. If you want to quickly switch between image tags to test multiple versions, or want to adjust a volume source to your local environment, you don't need to edit the Compose file each time, you can just set variables that insert values into your Compose file at run time.\n\nInterpolation can also be used to insert values into your Compose file at run time, which is then used to pass variables into your container's environment\n\nBelow is a simple example:\n\nWhen you run `docker compose up`, the `web` service defined in the Compose file [interpolates](https://docs.docker.com/compose/environment-variables/variable-interpolation/) in the image `webapp:v1.5` which was set in the `.env` file. You can verify this with the [config command](https://docs.docker.com/reference/cli/docker/compose/config/), which prints your resolved application config to the terminal:\n\nInterpolation is applied for unquoted and double-quoted values. Both braced (`${VAR}`) and unbraced (`$VAR`) expressions are supported.\n\nFor braced expressions, the following formats are supported:\n\n*   Direct substitution\n    *   `${VAR}` -> value of `VAR`\n*   Default value\n    *   `${VAR:-default}` -> value of `VAR` if set and non-empty, otherwise `default`\n    *   `${VAR-default}` -> value of `VAR` if set, otherwise `default`\n*   Required value\n    *   `${VAR:?error}` -> value of `VAR` if set and non-empty, otherwise exit with error\n    *   `${VAR?error}` -> value of `VAR` if set, otherwise exit with error\n*   Alternative value\n    *   `${VAR:+replacement}` -> `replacement` if `VAR` is set and non-empty, otherwise empty\n    *   `${VAR+replacement}` -> `replacement` if `VAR` is set, otherwise empty\n\nFor more information, see [Interpolation](https://docs.docker.com/compose/compose-file/12-interpolation/) in the Compose Specification.\n\nDocker Compose can interpolate variables into your Compose file from multiple sources.\n\nNote that when the same variable is declared by multiple sources, precedence applies:\n\n1.  Variables from your shell environment\n2.  If `--env-file` is not set, variables set by an `.env` file in local working directory (`PWD`)\n3.  Variables from a file set by `--env-file` or an `.env` file in project directory\n\nYou can check variables and values used by Compose to interpolate the Compose model by running `docker compose config --environment`.\n\n### [`.env` file](#env-file)\n\nAn `.env` file in Docker Compose is a text file used to define variables that should be made available for interpolation when running `docker compose up`. This file typically contains key-value pairs of variables, and it lets you centralize and manage configuration in one place. The `.env` file is useful if you have multiple variables you need to store.\n\nThe `.env` file is the default method for setting variables. The `.env` file should be placed at the root of the project directory next to your `compose.yaml` file. For more information on formatting an environment file, see [Syntax for environment files](#env-file-syntax).\n\nBasic example:\n\n#### [Additional information](#additional-information)\n\n*   If you define a variable in your `.env` file, you can reference it directly in your `compose.yml` with the [`environment` attribute](https://docs.docker.com/compose/compose-file/05-services/#environment). For example, if your `.env` file contains the environment variable `DEBUG=1` and your `compose.yml` file looks like this:\n    \n    Docker Compose replaces `${DEBUG}` with the value from the `.env` file\n    \n    > **Important**\n    > \n    > Be aware of [Environment variables precedence](https://docs.docker.com/compose/environment-variables/envvars-precedence/) when using variables in an `.env` file that as environment variables in your container's environment.\n    \n*   You can place your `.env` file in a location other than the root of your project's directory, and then use the [`--env-file` option in the CLI](#substitute-with---env-file) so Compose can navigate to it.\n    \n*   Your `.env` file can be overridden by another `.env` if it is [substituted with `--env-file`](#substitute-with---env-file).\n    \n\n> **Important**\n> \n> Substitution from `.env` files is a Docker Compose CLI feature.\n> \n> It is not supported by Swarm when running `docker stack deploy`.\n\n#### [`.env` file syntax](#env-file-syntax)\n\nThe following syntax rules apply to environment files:\n\n*   Lines beginning with `#` are processed as comments and ignored.\n*   Blank lines are ignored.\n*   Unquoted and double-quoted (`\"`) values have interpolation applied.\n*   Each line represents a key-value pair. Values can optionally be quoted.\n    *   `VAR=VAL` -> `VAL`\n    *   `VAR=\"VAL\"` -> `VAL`\n    *   `VAR='VAL'` -> `VAL`\n*   Inline comments for unquoted values must be preceded with a space.\n    *   `VAR=VAL # comment` -> `VAL`\n    *   `VAR=VAL# not a comment` -> `VAL# not a comment`\n*   Inline comments for quoted values must follow the closing quote.\n    *   `VAR=\"VAL # not a comment\"` -> `VAL # not a comment`\n    *   `VAR=\"VAL\" # comment` -> `VAL`\n*   Single-quoted (`'`) values are used literally.\n    *   `VAR='$OTHER'` -> `$OTHER`\n    *   `VAR='${OTHER}'` -> `${OTHER}`\n*   Quotes can be escaped with `\\`.\n    *   `VAR='Let\\'s go!'` -> `Let's go!`\n    *   `VAR=\"{\\\"hello\\\": \\\"json\\\"}\"` -> `{\"hello\": \"json\"}`\n*   Common shell escape sequences including `\\n`, `\\r`, `\\t`, and `\\\\` are supported in double-quoted values.\n    *   `VAR=\"some\\tvalue\"` -> `some value`\n    *   `VAR='some\\tvalue'` -> `some\\tvalue`\n    *   `VAR=some\\tvalue` -> `some\\tvalue`\n\n### [Substitute with `--env-file`](#substitute-with---env-file)\n\nYou can set default values for multiple environment variables, in an `.env` file and then pass the file as an argument in the CLI.\n\nThe advantage of this method is that you can store the file anywhere and name it appropriately, for example, This file path is relative to the current working directory where the Docker Compose command is executed. Passing the file path is done using the `--env-file` option:\n\n#### [Additional information](#additional-information-1)\n\n*   This method is useful if you want to temporarily override an `.env` file that is already referenced in your `compose.yml` file. For example you may have different `.env` files for production ( `.env.prod`) and testing (`.env.test`). In the following example, there are two environment files, `.env` and `.env.dev`. Both have different values set for `TAG`.If the `--env-file` is not used in the command line, the `.env` file is loaded by default:Passing the `--env-file` argument overrides the default file path:When an invalid file path is being passed as an `--env-file` argument, Compose returns an error:\n*   You can use multiple `--env-file` options to specify multiple environment files, and Docker Compose reads them in order. Later files can override variables from earlier files.\n*   You can override specific environment variables from the command line when starting containers.\n\n### [local `.env` file versus `.env` file](#local-env-file-versus-project-directory-env-file)\n\nAn `.env` file can also be used to declare [pre-defined environment variables](https://docs.docker.com/compose/environment-variables/envvars/) used to control Compose behavior and files to be loaded.\n\nWhen executed without an explicit `--env-file` flag, Compose searches for an `.env` file in your working directory ( [PWD](https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-PWD)) and loads values both for self-configuration and interpolation. If the values in this file define the `COMPOSE_FILE` pre-defined variable, which results in a project directory being set to another folder, Compose will load a second `.env` file, if present. This second `.env` file has a lower precedence.\n\nThis mechanism makes it possible to invoke an existing Compose project with a custom set of variables as overrides, without the need to pass environment variables by the command line.\n\n### [Substitute from the shell](#substitute-from-the-shell)\n\nYou can use existing environment variables from your host machine or from the shell environment where you execute `docker compose` commands. This lets you dynamically inject values into your Docker Compose configuration at runtime. For example, suppose the shell contains `POSTGRES_VERSION=9.3` and you supply the following configuration:\n\nWhen you run `docker compose up` with this configuration, Compose looks for the `POSTGRES_VERSION` environment variable in the shell and substitutes its value in. For this example, Compose resolves the image to `postgres:9.3` before running the configuration.\n\nIf an environment variable is not set, Compose substitutes with an empty string. In the previous example, if `POSTGRES_VERSION` is not set, the value for the image option is `postgres:`.\n\n> **Note**\n> \n> `postgres:` is not a valid image reference. Docker expects either a reference without a tag, like `postgres` which defaults to the latest image, or with a tag such as `postgres:15`.",
    "title": "Set, use, and manage variables in a Compose file with interpolation | Docker Docs\n",
    "description": "How to set, use, and manage variables in your Compose file with interpolation",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/environment-variables/best-practices/",
    "markdown": "# Best practices for working with environment variables in Docker Compose\n\n#### [Handle sensitive information securely](#handle-sensitive-information-securely)\n\nBe cautious about including sensitive data in environment variables. Consider using [Secrets](https://docs.docker.com/compose/use-secrets/) for managing sensitive information.\n\n#### [Understand environment variable precedence](#understand-environment-variable-precedence)\n\nBe aware of how Docker Compose handles the [precedence of environment variables](https://docs.docker.com/compose/environment-variables/envvars-precedence/) from different sources (`.env` files, shell variables, Dockerfiles).\n\n#### [Use specific environment files](#use-specific-environment-files)\n\nConsider how your application adapts to different environments. For example development, testing, production, and use different `.env` files as needed.\n\n#### [Know interpolation](#know-interpolation)\n\nUnderstand how [interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/) works within compose files for dynamic configurations.\n\n#### [Command line overrides](#command-line-overrides)\n\nBe aware that you can [override environment variables](https://docs.docker.com/compose/environment-variables/set-environment-variables/#cli) from the command line when starting containers. This is useful for testing or when you have temporary changes.",
    "title": "Best practices for working with environment variables in Docker Compose | Docker Docs\n",
    "description": "Explainer on the best ways to set, use, and manage environment variables in Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-application-model/",
    "markdown": "# How Compose works | Docker Docs\n\nWith Docker Compose you use a YAML configuration file, known as the [Compose file](#the-compose-file), to configure your application’s services, and then you create and start all the services from your configuration with the [Compose CLI](#cli).\n\nThe Compose file, or `compose.yaml` file, follows the rules provided by the [Compose Specification](https://docs.docker.com/compose/compose-file/) in how to define multi-container applications. This is the Docker Compose implementation of the formal [Compose Specification](https://github.com/compose-spec/compose-spec).\n\nComputing components of an application are defined as [services](https://docs.docker.com/compose/compose-file/05-services/). A service is an abstract concept implemented on platforms by running the same container image, and configuration, one or more times.\n\nServices communicate with each other through [networks](https://docs.docker.com/compose/compose-file/06-networks/). In the Compose Specification, a network is a platform capability abstraction to establish an IP route between containers within services connected together.\n\nServices store and share persistent data into [volumes](https://docs.docker.com/compose/compose-file/07-volumes/). The Specification describes such a persistent data as a high-level filesystem mount with global options.\n\nSome services require configuration data that is dependent on the runtime or platform. For this, the Specification defines a dedicated [configs](https://docs.docker.com/compose/compose-file/08-configs/) concept. From a service container point of view, configs are comparable to volumes, in that they are files mounted into the container. But the actual definition involves distinct platform resources and services, which are abstracted by this type.\n\nA [secret](https://docs.docker.com/compose/compose-file/09-secrets/) is a specific flavor of configuration data for sensitive data that should not be exposed without security considerations. Secrets are made available to services as files mounted into their containers, but the platform-specific resources to provide sensitive data are specific enough to deserve a distinct concept and definition within the Compose specification.\n\n> **Note**\n> \n> With volumes, configs and secrets you can have a simple declaration at the top-level and then add more platform-specific information at the service level.\n\nA project is an individual deployment of an application specification on a platform. A project's name, set with the top-level [`name`](https://docs.docker.com/compose/compose-file/04-version-and-name/) attribute, is used to group resources together and isolate them from other applications or other installation of the same Compose-specified application with distinct parameters. If you are creating resources on a platform, you must prefix resource names by project and set the label `com.docker.compose.project`.\n\nCompose offers a way for you to set a custom project name and override this name, so that the same `compose.yaml` file can be deployed twice on the same infrastructure, without changes, by just passing a distinct name.\n\nThe default path for a Compose file is `compose.yaml` (preferred) or `compose.yml` that is placed in the working directory. Compose also supports `docker-compose.yaml` and `docker-compose.yml` for backwards compatibility of earlier versions. If both files exist, Compose prefers the canonical `compose.yaml`.\n\nYou can use [fragments](https://docs.docker.com/compose/compose-file/10-fragments/) and [extensions](https://docs.docker.com/compose/compose-file/11-extension/) to keep your Compose file efficient and easy to maintain.\n\nMultiple Compose files can be [merged](https://docs.docker.com/compose/compose-file/13-merge/) together to define the application model. The combination of YAML files is implemented by appending or overriding YAML elements based on the Compose file order you set. Simple attributes and maps get overridden by the highest order Compose file, lists get merged by appending. Relative paths are resolved based on the first Compose file's parent folder, whenever complimentary files being merged are hosted in other folders. As some Compose file elements can both be expressed as single strings or complex objects, merges apply to the expanded form. For more information, see [Working with multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/)\n\nIf you want to reuse other Compose files, or factor out parts of your application model into separate Compose files, you can also use [`include`](https://docs.docker.com/compose/compose-file/14-include/). This is useful if your Compose application is dependent on another application which is managed by a different team, or needs to be shared with others.\n\nThe Docker CLI lets you to interact with your Docker Compose applications through the `docker compose` command, and its subcommands. Using the CLI, you can manage the lifecycle of your multi-container applications defined in the `compose.yaml` file. The CLI commands enable you to start, stop, and configure your applications effortlessly.\n\n### [Key commands](#key-commands)\n\nTo start all the services defined in your `compose.yaml` file:\n\nTo stop and remove the running services:\n\nIf you want to monitor the output of your running containers and debug issues, you can view the logs with:\n\nTo lists all the services along with their current status:\n\nFor a full list of all the Compose CLI commands, see the [reference documentation](https://docs.docker.com/reference/cli/docker/compose/).\n\nThe following example illustrates the Compose concepts outlined above. The example is non-normative.\n\nConsider an application split into a frontend web application and a backend service.\n\nThe frontend is configured at runtime with an HTTP configuration file managed by infrastructure, providing an external domain name, and an HTTPS server certificate injected by the platform's secured secret store.\n\nThe backend stores data in a persistent volume.\n\nBoth services communicate with each other on an isolated back-tier network, while the frontend is also connected to a front-tier network and exposes port 443 for external usage.\n\n![Compose application example](https://docs.docker.com/compose/images/compose-application.webp)\n\nThe example application is composed of the following parts:\n\n*   2 services, backed by Docker images: `webapp` and `database`\n*   1 secret (HTTPS certificate), injected into the frontend\n*   1 configuration (HTTP), injected into the frontend\n*   1 persistent volume, attached to the backend\n*   2 networks\n\nThe `docker compose up` command starts the `frontend` and `backend` services, create the necessary networks and volumes, and injects the configuration and secret into the frontend service.\n\n`docker compose ps` provides a snapshot of the current state of your services, making it easy to see which containers are running, their status, and the ports they are using:\n\n*   [Quickstart](https://docs.docker.com/compose/gettingstarted/)\n*   [Explore some sample applications](https://docs.docker.com/compose/samples-for-compose/)\n*   [Familiarize yourself with the Compose Specification](https://docs.docker.com/compose/compose-file/)",
    "title": "How Compose works | Docker Docs\n",
    "description": "Understand how Compose works and the Compose application model with an illustrative example",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/profiles/",
    "markdown": "# Using profiles with Compose | Docker Docs\n\nProfiles help you adjust your Compose application for different environments or use cases by selectively activating services. Services can be assigned to one or more profiles; unassigned services start by default, while assigned ones only start when their profile is active. This setup means specific services, like those for debugging or development, to be included in a single `compose.yml` file and activated only as needed.\n\nServices are associated with profiles through the [`profiles` attribute](https://docs.docker.com/compose/compose-file/05-services/#profiles) which takes an array of profile names:\n\nHere the services `frontend` and `phpmyadmin` are assigned to the profiles `frontend` and `debug` respectively and as such are only started when their respective profiles are enabled.\n\nServices without a `profiles` attribute are always enabled. In this case running `docker compose up` would only start `backend` and `db`.\n\nValid profiles names follow the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n\n> **Tip**\n> \n> The core services of your application shouldn't be assigned `profiles` so they are always enabled and automatically started.\n\nTo start a specific profile supply the `--profile` [command-line option](https://docs.docker.com/compose/reference/) or use the [`COMPOSE_PROFILES` environment variable](https://docs.docker.com/compose/environment-variables/envvars/#compose_profiles):\n\nThe above commands would both start your application with the `debug` profile enabled. In the example, `compose.yml` file above, this starts the services `backend`, `db` and `phpmyadmin`.\n\n### [Start multiple profiles](#start-multiple-profiles)\n\nYou can also enable multiple profiles, e.g. with `docker compose --profile frontend --profile debug up` the profiles `frontend` and `debug` will be enabled.\n\nMultiple profiles can be specified by passing multiple `--profile` flags or a comma-separated list for the `COMPOSE_PROFILES` environment variable:\n\nIf you want to enable all profiles at the same time, you can run `docker compose --profile \"*\"`.\n\nWhen a service with assigned `profiles` is explicitly targeted on the command line its profiles are started automatically so you don't need to start them manually. This can be used for one-off services and debugging tools. As an example consider the following configuration:\n\nBut keep in mind that `docker compose` only automatically starts the profiles of the services on the command line and not of any dependencies.\n\nThis means that any other services the targeted service `depends_on` should either:\n\n*   Share a common profile\n*   Always be started, by omitting `profiles` or having a matching profile started explicitly\n\nAlthough targeting `phpmyadmin` automatically starts the profiles `debug`, it doesn't automatically start the profiles required by `db` which is `dev`.\n\nTo fix this you either have to add the `debug` profile to the `db` service:\n\nor start the `dev` profile explicitly:\n\n[`profiles`](https://docs.docker.com/compose/compose-file/05-services/#profiles)",
    "title": "Using profiles with Compose | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/gettingstarted/",
    "markdown": "# Docker Compose Quickstart | Docker Docs\n\nThis tutorial aims to introduce fundamental concepts of Docker Compose by guiding you through the development of a basic Python web application.\n\nUsing the Flask framework, the application features a hit counter in Redis, providing a practical example of how Docker Compose can be applied in web development scenarios.\n\nThe concepts demonstrated here should be understandable even if you're not familiar with Python.\n\nThis is a non-normative example that just highlights the key things you can do with Compose.\n\nMake sure you have:\n\n*   Installed the latest version of Docker Compose\n*   A basic understanding of Docker concepts and how Docker works\n\n1.  Create a directory for the project:\n    \n2.  Create a file called `app.py` in your project directory and paste the following code in:\n    \n    In this example, `redis` is the hostname of the redis container on the application's network and the default port, `6379` is used.\n    \n    > **Note**\n    > \n    > Note the way the `get_hit_count` function is written. This basic retry loop attempts the request multiple times if the Redis service is not available. This is useful at startup while the application comes online, but also makes the application more resilient if the Redis service needs to be restarted anytime during the app's lifetime. In a cluster, this also helps handling momentary connection drops between nodes.\n    \n3.  Create another file called `requirements.txt` in your project directory and paste the following code in:\n    \n4.  Create a `Dockerfile` and paste the following code in:\n    \n    This tells Docker to:\n    \n    *   Build an image starting with the Python 3.10 image.\n    *   Set the working directory to `/code`.\n    *   Set environment variables used by the `flask` command.\n    *   Install gcc and other dependencies\n    *   Copy `requirements.txt` and install the Python dependencies.\n    *   Add metadata to the image to describe that the container is listening on port 5000\n    *   Copy the current directory `.` in the project to the workdir `.` in the image.\n    *   Set the default command for the container to `flask run --debug`.\n    \n    > **Important**\n    > \n    > Check that the `Dockerfile` has no file extension like `.txt`. Some editors may append this file extension automatically which results in an error when you run the application.\n    \n    For more information on how to write Dockerfiles, see the [Dockerfile reference](https://docs.docker.com/reference/dockerfile/).\n    \n\nCompose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single, comprehensible YAML configuration file.\n\nCreate a file called `compose.yaml` in your project directory and paste the following:\n\nThis Compose file defines two services: `web` and `redis`.\n\nThe `web` service uses an image that's built from the `Dockerfile` in the current directory. It then binds the container and the host machine to the exposed port, `8000`. This example service uses the default port for the Flask web server, `5000`.\n\nThe `redis` service uses a public [Redis](https://registry.hub.docker.com/_/redis/) image pulled from the Docker Hub registry.\n\nFor more information on the `compose.yaml` file, see [How Compose works](https://docs.docker.com/compose/compose-application-model/).\n\nWith a single command, you create and start all the services from your configuration file.\n\n1.  From your project directory, start up your application by running `docker compose up`.\n    \n    Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.\n    \n2.  Enter `http://localhost:8000/` in a browser to see the application running.\n    \n    If this doesn't resolve, you can also try `http://127.0.0.1:8000`.\n    \n    You should see a message in your browser saying:\n    \n    ![hello world in browser](https://docs.docker.com/compose/images/quick-hello-world-1.png)\n    \n3.  Refresh the page.\n    \n    The number should increment.\n    \n    ![hello world in browser](https://docs.docker.com/compose/images/quick-hello-world-2.png)\n    \n4.  Switch to another terminal window, and type `docker image ls` to list local images.\n    \n    Listing images at this point should return `redis` and `web`.\n    \n    You can inspect images with `docker inspect <tag or id>`.\n    \n5.  Stop the application, either by running `docker compose down` from within your project directory in the second terminal, or by hitting `CTRL+C` in the original terminal where you started the app.\n    \n\nEdit the `compose.yaml` file in your project directory to use `watch` so you can preview your running Compose services which are automatically updated as you edit and save your code:\n\nWhenever a file is changed, Compose syncs the file to the corresponding location under `/code` inside the container. Once copied, the bundler updates the running application without a restart.\n\nFor more information on how Compose Watch works, see [Use Compose Watch](https://docs.docker.com/compose/file-watch/). Alternatively, see [Manage data in containers](https://docs.docker.com/storage/volumes/) for other options.\n\n> **Note**\n> \n> For this example to work, the `--debug` option is added to the `Dockerfile`. The `--debug` option in Flask enables automatic code reload, making it possible to work on the backend API without the need to restart or rebuild the container. After changing the `.py` file, subsequent API calls will use the new code, but the browser UI will not automatically refresh in this small example. Most frontend development servers include native live reload support that works with Compose.\n\nFrom your project directory, type `docker compose watch` or `docker compose up --watch` to build and launch the app and start the file watch mode.\n\nCheck the `Hello World` message in a web browser again, and refresh to see the count increment.\n\nTo see Compose Watch in action:\n\n1.  Change the greeting in `app.py` and save it. For example, change the `Hello World!` message to `Hello from Docker!`:\n    \n2.  Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.\n    \n    ![hello world in browser](https://docs.docker.com/compose/images/quick-hello-world-3.png)\n    \n3.  Once you're done, run `docker compose down`.\n    \n\nUsing multiple Compose files lets you customize a Compose application for different environments or workflows. This is useful for large applications that may use dozens of containers, with ownership distributed across multiple teams.\n\n1.  In your project folder, create a new Compose file called `infra.yaml`.\n    \n2.  Cut the Redis service from your `compose.yaml` file and paste it into your new `infra.yaml` file. Make sure you add the `services` top-level attribute at the top of your file. Your `infra.yaml` file should now look like this:\n    \n3.  In your `compose.yaml` file, add the `include` top-level attribute along with the path to the `infra.yaml` file.\n    \n4.  Run `docker compose up` to build the app with the updated Compose files, and run it. You should see the `Hello world` message in your browser.\n    \n\nThis is a simplified example, but it demonstrates the basic principle of `include` and how it can make it easier to modularize complex applications into sub-Compose files. For more information on `include` and working with multiple Compose files, see [Working with multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/).\n\n*   If you want to run your services in the background, you can pass the `-d` flag (for \"detached\" mode) to `docker compose up` and use `docker compose ps` to see what is currently running:\n    \n*   Run `docker compose --help` to see other available commands.\n    \n*   If you started Compose with `docker compose up -d`, stop your services once you've finished with them:\n    \n*   You can bring everything down, removing the containers entirely, with the `docker compose down` command.\n    \n\n*   Try the [Sample apps with Compose](https://github.com/docker/awesome-compose)\n*   [Explore the full list of Compose commands](https://docs.docker.com/compose/reference/)\n*   [Explore the Compose file reference](https://docs.docker.com/compose/compose-file/)\n*   [Check out the Learning Docker Compose video on LinkedIn Learning](https://www.linkedin.com/learning/learning-docker-compose/)",
    "title": "Docker Compose Quickstart | Docker Docs\n",
    "description": "Check out this tutorial on how to use Docker Compose from defining application dependencies to experimenting with commands.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/file-watch/",
    "markdown": "# Use Compose Watch | Docker Docs\n\nIntroduced in Docker Compose version [2.22.0](https://docs.docker.com/compose/release-notes/#2220)\n\nThe `watch` attribute automatically updates and previews your running Compose services as you edit and save your code. For many projects, this enables a hands-off development workflow once Compose is running, as services automatically update themselves when you save your work.\n\n`watch` adheres to the following file path rules:\n\n*   All paths are relative to the project directory\n*   Directories are watched recursively\n*   Glob patterns aren't supported\n*   Rules from `.dockerignore` apply\n    *   Use `ignore` option to define additional paths to be ignored (same syntax)\n    *   Temporary/backup files for common IDEs (Vim, Emacs, JetBrains, & more) are ignored automatically\n    *   `.git` directories are ignored automatically\n\nYou don't need to switch on `watch` for all services in a Compose project. In some instances, only part of the project, for example the Javascript frontend, might be suitable for automatic updates.\n\nCompose supports sharing a host directory inside service containers. Watch mode does not replace this functionality but exists as a companion specifically suited to developing in containers.\n\nMore importantly, `watch` allows for greater granularity than is practical with a bind mount. Watch rules let you ignore specific files or entire directories within the watched tree.\n\nFor example, in a JavaScript project, ignoring the `node_modules/` directory has two benefits:\n\n*   Performance. File trees with many small files can cause high I/O load in some configurations\n*   Multi-platform. Compiled artifacts cannot be shared if the host OS or architecture is different to the container\n\nFor example, in a Node.js project, it's not recommended to sync the `node_modules/` directory. Even though JavaScript is interpreted, `npm` packages can contain native code that is not portable across platforms.\n\nThe `watch` attribute defines a list of rules that control automatic service updates based on local file changes.\n\nEach rule requires, a `path` pattern and `action` to take when a modification is detected. There are two possible actions for `watch` and depending on the `action`, additional fields might be accepted or required.\n\nWatch mode can be used with many different languages and frameworks. The specific paths and rules will vary from project to project, but the concepts remain the same.\n\n### [Prerequisites](#prerequisites)\n\nIn order to work properly, `watch` relies on common executables. Make sure your service image contains the following binaries:\n\n*   stat\n*   mkdir\n*   rmdir\n\n`watch` also requires that the container's `USER` can write to the target path so it can update files. A common pattern is for initial content to be copied into the container using the `COPY` instruction in a Dockerfile. To ensure such files are owned by the configured user, use the `COPY --chown` flag:\n\n### [`action`](#action)\n\n#### [Sync](#sync)\n\nIf `action` is set to `sync`, Compose makes sure any changes made to files on your host automatically match with the corresponding files within the service container.\n\n`sync` is ideal for frameworks that support \"Hot Reload\" or equivalent functionality.\n\nMore generally, `sync` rules can be used in place of bind mounts for many development use cases.\n\n#### [Rebuild](#rebuild)\n\nIf `action` is set to `rebuild`, Compose automatically builds a new image with BuildKit and replaces the running service container.\n\nThe behavior is the same as running `docker compose up --build <svc>`.\n\nRebuild is ideal for compiled languages or as fallbacks for modifications to particular files that require a full image rebuild (e.g. `package.json`).\n\n#### [Sync + Restart](#sync--restart)\n\nIf `action` is set to `sync+restart`, Compose synchronizes your changes with the service containers and restarts it.\n\n`sync+restart` is ideal when config file changes, and you don't need to rebuild the image but just restart the main process of the service containers. It will work well when you update a database configuration or your `nginx.conf` file for example\n\n> **Tip**\n> \n> Optimize your `Dockerfile` for speedy incremental rebuilds with [image layer caching](https://docs.docker.com/build/cache) and [multi-stage builds](https://docs.docker.com/build/building/multi-stage/).\n\n### [`path` and `target`](#path-and-target)\n\nThe `target` field controls how the path is mapped into the container.\n\nFor `path: ./app/html` and a change to `./app/html/index.html`:\n\n*   `target: /app/html` -> `/app/html/index.html`\n*   `target: /app/static` -> `/app/static/index.html`\n*   `target: /assets` -> `/assets/index.html`\n\nThis minimal example targets a Node.js application with the following structure:\n\nIn this example, when running `docker compose up --watch`, a container for the `web` service is launched using an image built from the `Dockerfile` in the project's root. The `web` service runs `npm start` for its command, which then launches a development version of the application with Hot Module Reload enabled in the bundler (Webpack, Vite, Turbopack, etc).\n\nAfter the service is up, the watch mode starts monitoring the target directories and files. Then, whenever a source file in the `web/` directory is changed, Compose syncs the file to the corresponding location under `/src/web` inside the container. For example, `./web/App.jsx` is copied to `/src/web/App.jsx`.\n\nOnce copied, the bundler updates the running application without a restart.\n\nUnlike source code files, adding a new dependency can’t be done on-the-fly, so whenever `package.json` is changed, Compose rebuilds the image and recreates the `web` service container.\n\nThis pattern can be followed for many languages and frameworks, such as Python with Flask: Python source files can be synced while a change to `requirements.txt` should trigger a rebuild.\n\nAdapting the previous example to demonstrate `sync+restart`:\n\nThis setup demonstrates how to use the `sync+restart` action in Docker Compose to efficiently develop and test a Node.js application with a frontend web server and backend service. The configuration ensures that changes to the application code and configuration files are quickly synchronized and applied, with the `web` service restarting as needed to reflect the changes.\n\n1.  Add `watch` sections to one or more services in `compose.yaml`.\n2.  Run `docker compose up --watch` to build and launch a Compose project and start the file watch mode.\n3.  Edit service source files using your preferred IDE or editor.\n\n> **Tip**\n> \n> Watch can also be used with the dedicated `docker compose watch` command if you don't want to get the application logs mixed with the (re)build logs and filesystem sync events.\n\n> **Looking for a sample project to test things out?**\n> \n> Check out [`dockersamples/avatars`](https://github.com/dockersamples/avatars), or [local setup for Docker docs](https://github.com/docker/docs/blob/main/CONTRIBUTING.md) for a demonstration of Compose `watch`.\n\nWe are actively looking for feedback on this feature. Give feedback or report any bugs you may find in the [Compose Specification repository](https://github.com/compose-spec/compose-spec/pull/253).\n\n*   [Compose Develop Specification](https://docs.docker.com/compose/compose-file/develop/)",
    "title": "Use Compose Watch | Docker Docs\n",
    "description": "Use File watch to automatically update running services as you work",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/project-name/",
    "markdown": "# Specify a project name | Docker Docs\n\nIn Compose, the default project name is derived from the base name of the project directory. However, you have the flexibility to set a custom project name.\n\nThis page offers examples of scenarios where custom project names can be helpful, outlines the various methods to set a project name, and provides the order of precedence for each approach.\n\n> **Note**\n> \n> The default project directory is the base directory of the Compose file. A custom value can also be set for it using the [`--project-directory` command line option](https://docs.docker.com/compose/reference/).\n\nCompose uses a project name to isolate environments from each other. There are multiple contexts where a project name is useful:\n\n*   On a development host: Create multiple copies of a single environment, useful for running stable copies for each feature branch of a project.\n*   On a CI server: Prevent interference between builds by setting the project name to a unique build number.\n*   On a shared or development host: Avoid interference between different projects that might share the same service names.\n\nProject names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit. If the base name of the project directory or current directory violates this constraint, alternative mechanisms are available.\n\nThe precedence order for each method, from highest to lowest, is as follows:\n\n1.  The `-p` command line flag.\n2.  The [COMPOSE\\_PROJECT\\_NAME environment variable](https://docs.docker.com/compose/environment-variables/envvars/).\n3.  The [top-level `name:` attribute](https://docs.docker.com/compose/compose-file/04-version-and-name/) in your Compose file. Or the last `name:` if you [specify multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/merge/) in the command line with the `-f` flag.\n4.  The base name of the project directory containing your Compose file. Or the base name of the first Compose file if you [specify multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/merge/) in the command line with the `-f` flag.\n5.  The base name of the current directory if no Compose file is specified.\n\n*   Read up on [working with multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/).\n*   Explore some [sample apps](https://docs.docker.com/compose/samples-for-compose/).",
    "title": "Specify a project name | Docker Docs\n",
    "description": "Understand the different ways you can set a project name in Compose and what the precedence is.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/use-secrets/",
    "markdown": "# How to use secrets in Docker Compose\n\nA secret is any piece of data, such as a password, certificate, or API key, that shouldn’t be transmitted over a network or stored unencrypted in a Dockerfile or in your application’s source code.\n\nDocker Compose provides a way for you to use secrets without having to use environment variables to store information. If you’re injecting passwords and API keys as environment variables, you risk unintentional information exposure. Services can only access secrets when explicitly granted by a `secrets` attribute within the `services` top-level element.\n\nEnvironment variables are often available to all processes, and it can be difficult to track access. They can also be printed in logs when debugging errors without your knowledge. Using secrets mitigates these risks.\n\nGetting a secret into a container is a two-step process. First, define the secret using the [top-level secrets element in your Compose file](https://docs.docker.com/compose/compose-file/09-secrets/). Next, update your service definitions to reference the secrets they require with the [secrets attribute](https://docs.docker.com/compose/compose-file/05-services/#secrets). Compose grants access to secrets on a per-service basis.\n\nUnlike the other methods, this permits granular access control within a service container via standard filesystem permissions.\n\n### [Simple](#simple)\n\nIn the following example, the frontend service is given access to the `my_secret` secret. In the container, `/run/secrets/my_secret` is set to the contents of the file `./my_secret.txt`.\n\n### [Advanced](#advanced)\n\nIn the advanced example above:\n\n*   The `secrets` attribute under each service defines the secrets you want to inject into the specific container.\n*   The top-level `secrets` section defines the variables `db_password` and `db_root_password` and provides the `file` that populates their values.\n*   The deployment of each container means Docker creates a temporary filesystem mount under `/run/secrets/<secret_name>` with their specific values.\n\n> **Note**\n> \n> The `_FILE` environment variables demonstrated here are a convention used by some images, including Docker Official Images like [mysql](https://hub.docker.com/_/mysql) and [postgres](https://hub.docker.com/_/postgres).\n\n*   [Secrets top-level element](https://docs.docker.com/compose/compose-file/09-secrets/)\n*   [Secrets attribute for services top-level element](https://docs.docker.com/compose/compose-file/05-services/#secrets)",
    "title": "How to use secrets in Docker Compose | Docker Docs\n",
    "description": "How to use secrets in Compose and their benefits",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/install/uninstall/",
    "markdown": "# Uninstall Docker Compose | Docker Docs\n\nUninstalling Docker Compose depends on the method you have used to install Docker Compose. On this page you can find specific instructions to uninstall Docker Compose.\n\nIf you want to uninstall Compose and you have installed Docker Desktop, see [Uninstall Docker Desktop](https://docs.docker.com/desktop/uninstall/).\n\n> **Note**\n> \n> Unless you have other Docker instances installed on that specific environment, you would be removing Docker altogether by uninstalling the Desktop.\n\nTo remove the Compose CLI plugin, run:\n\nUbuntu, Debian:\n\nRPM-based distros:\n\n### [Manually installed](#manually-installed)\n\nIf you used `curl` to install Compose CLI plugin, to uninstall it, run:\n\n### [Remove for all users](#remove-for-all-users)\n\nOr, if you have installed Compose for all users, run:\n\n> Got a **Permission denied** error?\n> \n> If you get a **Permission denied** error using either of the above methods, you do not have the permissions allowing you to remove `docker-compose`. To force the removal, prepend `sudo` to either of the above instructions and run it again.\n\n### [Inspect the location of the Compose CLI plugin](#inspect-the-location-of-the-compose-cli-plugin)\n\nTo check where Compose is installed, use:",
    "title": "Uninstall Docker Compose | Docker Docs\n",
    "description": "How to uninstall Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/production/",
    "markdown": "# Use Compose in production | Docker Docs\n\nWhen you define your app with Compose in development, you can use this definition to run your application in different environments such as CI, staging, and production.\n\nThe easiest way to deploy an application is to run it on a single server, similar to how you would run your development environment. If you want to scale up your application, you can run Compose apps on a Swarm cluster.\n\n### [Modify your Compose file for production](#modify-your-compose-file-for-production)\n\nYou may need to make changes to your app configuration to make it ready for production. These changes might include:\n\n*   Removing any volume bindings for application code, so that code stays inside the container and can't be changed from outside\n*   Binding to different ports on the host\n*   Setting environment variables differently, such as reducing the verbosity of logging, or to specify settings for external services such as an email server\n*   Specifying a restart policy like [`restart: always`](https://docs.docker.com/compose/compose-file/05-services/#restart)to avoid downtime\n*   Adding extra services such as a log aggregator\n\nFor this reason, consider defining an additional Compose file, for example `production.yml`, which specifies production-appropriate configuration. This configuration file only needs to include the changes you want to make from the original Compose file. The additional Compose file is then applied over the original `compose.yml` to create a new configuration.\n\nOnce you have a second configuration file, you can use it with the `-f` option:\n\nSee [Using multiple compose files](https://docs.docker.com/compose/multiple-compose-files/) for a more complete example, and other options.\n\n### [Deploying changes](#deploying-changes)\n\nWhen you make changes to your app code, remember to rebuild your image and recreate your app's containers. To redeploy a service called `web`, use:\n\nThis first command rebuilds the image for `web` and then stops, destroys, and recreates just the `web` service. The `--no-deps` flag prevents Compose from also recreating any services which `web` depends on.\n\n### [Running Compose on a single server](#running-compose-on-a-single-server)\n\nYou can use Compose to deploy an app to a remote Docker host by setting the `DOCKER_HOST`, `DOCKER_TLS_VERIFY`, and `DOCKER_CERT_PATH` environment variables appropriately. For more information, see [pre-defined environment variables](https://docs.docker.com/compose/environment-variables/envvars/).\n\nOnce you've set up your environment variables, all the normal `docker compose` commands work with no further configuration.",
    "title": "Use Compose in production | Docker Docs\n",
    "description": "Guide to using Docker Compose in production",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/multiple-compose-files/",
    "markdown": "# Overview | Docker Docs\n\nThis section contains information on the ways you can work with multiple Compose files.\n\nUsing multiple Compose files lets you customize a Compose application for different environments or workflows. This is useful for large applications that may use dozens of containers, with ownership distributed across multiple teams. For example, if your organization or team uses a monorepo, each team may have their own “local” Compose file to run a subset of the application. They then need to rely on other teams to provide a reference Compose file that defines the expected way to run their own subset. Complexity moves from the code in to the infrastructure and the configuration file.\n\nThe quickest way to work with multiple Compose files is to [merge](https://docs.docker.com/compose/multiple-compose-files/merge/) Compose files using the `-f` flag in the command line to list out your desired Compose files. However, [merging rules](https://docs.docker.com/compose/multiple-compose-files/merge/#merging-rules) means this can soon get quite complicated.\n\nDocker Compose provides two other options to manage this complexity when working with multiple Compose files. Depending on your project's needs, you can:\n\n*   [Extend a Compose file](https://docs.docker.com/compose/multiple-compose-files/extends/) by referring to another Compose file and selecting the bits you want to use in your own application, with the ability to override some attributes.\n*   [Include other Compose files](https://docs.docker.com/compose/multiple-compose-files/include/) directly in your Compose file.",
    "title": "Overview | Docker Docs\n",
    "description": "General overview for the different ways you can work with multiple compose files in Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/multiple-compose-files/extends/",
    "markdown": "# Extend your Compose file | Docker Docs\n\nDocker Compose's [`extends` attribute](https://docs.docker.com/compose/compose-file/05-services/#extends) lets you share common configurations among different files, or even different projects entirely.\n\nExtending services is useful if you have several services that reuse a common set of configuration options. With `extends` you can define a common set of service options in one place and refer to it from anywhere. You can refer to another Compose file and select a service you want to also use in your own application, with the ability to override some attributes for your own needs.\n\n> **Important**\n> \n> When you use multiple Compose files, you must make sure all paths in the files are relative to the base Compose file (i.e. the Compose file in your main-project folder). This is required because extend files need not be valid Compose files. Extend files can contain small fragments of configuration. Tracking which fragment of a service is relative to which path is difficult and confusing, so to keep paths easier to understand, all paths must be defined relative to the base file.\n\n### [Extending services from another file](#extending-services-from-another-file)\n\nTake the following example:\n\nThis instructs Compose to re-use only the properties of the `webapp` service defined in the `common-services.yml` file. The `webapp` service itself is not part of the final project.\n\nIf `common-services.yml` looks like this:\n\nYou get exactly the same result as if you wrote `docker-compose.yml` with the same `build`, `ports`, and `volumes` configuration values defined directly under `web`.\n\nTo include the service `webapp` in the final project when extending services from another file, you need to explicitly include both services in your current Compose file. For example (note this is a non-normative example):\n\nAlternatively, you can use [include](https://docs.docker.com/compose/multiple-compose-files/include/).\n\n### [Extending services within the same file](#extending-services-within-the-same-file)\n\nIf you define services in the same Compose file and extend one service from another, both the original service and the extended service will be part of your final configuration. For example:\n\n### [Extending services within the same file and from another file](#extending-services-within-the-same-file-and-from-another-file)\n\nYou can go further and define, or re-define, configuration locally in `compose.yaml`:\n\nExtending an individual service is useful when you have multiple services that have a common configuration. The example below is a Compose app with two services, a web application and a queue worker. Both services use the same codebase and share many configuration options.\n\nThe `common.yaml` file defines the common configuration:\n\nThe `docker-compose.yaml` defines the concrete services which use the common configuration:\n\n`volumes_from` and `depends_on` are never shared between services using `extends`. These exceptions exist to avoid implicit dependencies; you always define `volumes_from` locally. This ensures dependencies between services are clearly visible when reading the current file. Defining these locally also ensures that changes to the referenced file don't break anything.\n\n`extends` is useful if you only need a single service to be shared and you are familiar with the file you're extending to, so you can tweak the configuration. But this isn’t an acceptable solution when you want to re-use someone else's unfamiliar configurations and you don’t know about its own dependencies.\n\nWhen using `extends` with a `file` attribute which points to another folder, relative paths declared by the service being extended are converted so they still point to the same file when used by the extending service. This is illustrated in the following example:\n\nBase Compose file:\n\nThe `commons/compose.yaml` file:\n\nThe resulting service refers to the original `container.env` file within the `commons` directory. This can be confirmed with `docker compose config` which inspects the actual model:\n\n*   [`extends`](https://docs.docker.com/compose/compose-file/05-services/#extends)",
    "title": "Extend your Compose file | Docker Docs\n",
    "description": "How to use Docker Compose's extends keyword to share configuration between files and projects",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/multiple-compose-files/merge/",
    "markdown": "# Merge Compose files | Docker Docs\n\nDocker Compose lets you merge and override a set of Compose files together to create a composite Compose file.\n\nBy default, Compose reads two files, a `compose.yml` and an optional `compose.override.yml` file. By convention, the `compose.yml` contains your base configuration. The override file can contain configuration overrides for existing services or entirely new services.\n\nIf a service is defined in both files, Compose merges the configurations using the rules described below and in the [Compose Specification](https://docs.docker.com/compose/compose-file/13-merge/).\n\nTo use multiple override files, or an override file with a different name, you can either use the pre-defined [COMPOSE\\_FILE](https://docs.docker.com/compose/environment-variables/envvars/#compose_file) environment variable, or use the `-f` option to specify the list of files.\n\nCompose merges files in the order they're specified on the command line. Subsequent files may merge, override, or add to their predecessors.\n\nFor example:\n\nThe `compose.yml` file might specify a `webapp` service.\n\nThe `compose.admin.yml` may also specify this same service:\n\nAny matching fields override the previous file. New values, add to the `webapp` service configuration:\n\n> **Important**\n> \n> When you use multiple Compose files, you must make sure all paths in the files are relative to the base Compose file (the first Compose file specified with `-f`). This is required because override files need not be valid Compose files. Override files can contain small fragments of configuration. Tracking which fragment of a service is relative to which path is difficult and confusing, so to keep paths easier to understand, all paths must be defined relative to the base file.\n\n### [Additional information](#additional-information)\n\n*   Using `-f` is optional. If not provided, Compose searches the working directory and its parent directories for a `compose.yml` and a `compose.override.yml` file. You must supply at least the `compose.yml` file. If both files exist on the same directory level, Compose combines them into a single configuration.\n    \n*   When you use multiple Compose files, all paths in the files are relative to the first configuration file specified with `-f`. You can use the `--project-directory` option to override this base path.\n    \n*   You can use a `-f` with `-` (dash) as the filename to read the configuration from `stdin`. For example:\n    \n    When `stdin` is used, all paths in the configuration are relative to the current working directory.\n    \n*   You can use the `-f` flag to specify a path to a Compose file that is not located in the current directory, either from the command line or by setting up a [COMPOSE\\_FILE environment variable](https://docs.docker.com/compose/environment-variables/envvars/#compose_file) in your shell or in an environment file.\n    \n    For example, if you are running the [Compose Rails sample](https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/rails/README.md), and have a `compose.yml` file in a directory called `sandbox/rails`. You can use a command like [docker compose pull](https://docs.docker.com/reference/cli/docker/compose/pull/) to get the postgres image for the `db` service from anywhere by using the `-f` flag as follows: `docker compose -f ~/sandbox/rails/compose.yml pull db`\n    \n    Here's the full example:\n    \n\nCompose copies configurations from the original service over to the local one. If a configuration option is defined in both the original service and the local service, the local value replaces or extends the original value.\n\nFor single-value options like `image`, `command` or `mem_limit`, the new value replaces the old value.\n\noriginal service:\n\nlocal service:\n\nresult:\n\nFor the multi-value options `ports`, `expose`, `external_links`, `dns`, `dns_search`, and `tmpfs`, Compose concatenates both sets of values:\n\noriginal service:\n\nlocal service:\n\nresult:\n\nIn the case of `environment`, `labels`, `volumes`, and `devices`, Compose \"merges\" entries together with locally defined values taking precedence. For `environment` and `labels`, the environment variable or label name determines which value is used:\n\noriginal service:\n\nlocal service:\n\nresult:\n\nEntries for `volumes` and `devices` are merged using the mount path in the container:\n\noriginal service:\n\nlocal service:\n\nresult:\n\nFor more merging rules, see [Merge and override](https://docs.docker.com/compose/compose-file/13-merge/) in the Compose Specification.\n\nA common use case for multiple files is changing a development Compose app for a production-like environment (which may be production, staging or CI). To support these differences, you can split your Compose configuration into a few different files:\n\nStart with a base file that defines the canonical configuration for the services.\n\n`compose.yml`\n\nIn this example the development configuration exposes some ports to the host, mounts our code as a volume, and builds the web image.\n\n`compose.override.yml`\n\nWhen you run `docker compose up` it reads the overrides automatically.\n\nTo use this Compose app in a production environment, another override file is created, which might be stored in a different git repo or managed by a different team.\n\n`compose.prod.yml`\n\nTo deploy with this production Compose file you can run\n\nThis deploys all three services using the configuration in `compose.yml` and `compose.prod.yml` but not the dev configuration in `compose.override.yml`.\n\nFor more information, see [Using Compose in production](https://docs.docker.com/compose/production/).\n\nDocker Compose supports relative paths for the many resources to be included in the application model: build context for service images, location of file defining environment variables, path to a local directory used in a bind-mounted volume. With such a constraint, code organization in a monorepo can become hard as a natural choice would be to have dedicated folders per team or component, but then the Compose files relative paths become irrelevant.\n\n*   [Merge rules](https://docs.docker.com/compose/compose-file/13-merge/)",
    "title": "Merge Compose files | Docker Docs\n",
    "description": "How merging Compose files works",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/multiple-compose-files/include/",
    "markdown": "# Include | Docker Docs\n\nIntroduced in Docker Compose version [2.20.3](https://docs.docker.com/compose/release-notes/#2203)\n\nWith `include`, you can incorporate a separate `compose.yaml` file directly in your current `compose.yaml` file. This makes it easy to modularize complex applications into sub-Compose files, which in turn enables application configurations to be made simpler and more explicit.\n\nThe [`include` top-level element](https://docs.docker.com/compose/compose-file/14-include/) helps to reflect the engineering team responsible for the code directly in the config file's organization. It also solves the relative path problem that [`extends`](https://docs.docker.com/compose/multiple-compose-files/extends/) and [merge](https://docs.docker.com/compose/multiple-compose-files/merge/) present.\n\nEach path listed in the `include` section loads as an individual Compose application model, with its own project directory, in order to resolve relative paths.\n\nOnce the included Compose application loads, all resources are copied into the current Compose application model.\n\n> **Note**\n> \n> `include` applies recursively so an included Compose file which declares its own `include` section, results in those other files being included as well.\n\n`my-compose-include.yaml` manages `serviceB` which details some replicas, web UI to inspect data, isolated networks, volumes for data persistence, etc. The application relying on `serviceB` doesn’t need to know about the infrastructure details, and consumes the Compose file as a building block it can rely on.\n\nThis means the team managing `serviceB` can refactor its own database component to introduce additional services without impacting any dependent teams. It also means that the dependent teams don't need to include additional flags on each Compose command they run.\n\nCompose reports an error if any resource from `include` conflicts with resources from the included Compose file. This rule prevents unexpected conflicts with resources defined by the included compose file author. However, there may be some circumstances where you might want to tweak the included model. This can be achieved by adding an override file to the include directive:\n\nThe main limitation with this approach is that you need to maintain a dedicated override file per include. For complex projects with multiple includes this would result into many Compose files.\n\nThe other option is to use a `compose.override.yaml` file. While conflicts will be rejected from the file using `include` when same resource is declared, a global Compose override file can override the resulting merged model, as demonstrated in following example:\n\nMain `compose.yaml` file:\n\nOverride `compose.override.yaml` file:\n\nCombined together, this allows you to benefit from third-party reusable components, and adjust the Compose model for your needs.\n\n[`include` top-level element](https://docs.docker.com/compose/compose-file/14-include/)",
    "title": "Include | Docker Docs\n",
    "description": "How to use Docker Compose's include top-level element",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/samples-for-compose/",
    "markdown": "# Sample apps with Compose | Docker Docs\n\nThe following samples show the various aspects of how to work with Docker Compose. As a prerequisite, be sure to [install Docker Compose](https://docs.docker.com/compose/install/) if you have not already done so.\n\nThe samples should help you to:\n\n*   Define services based on Docker images using [Compose files](https://docs.docker.com/compose/compose-file/): `compose.yml` and `docker-stack.yml`\n*   Understand the relationship between `compose.yml` and [Dockerfiles](https://docs.docker.com/reference/dockerfile/)\n*   Learn how to make calls to your application services from Compose files\n*   Learn how to deploy applications and services to a [swarm](https://docs.docker.com/engine/swarm/)\n\nThese samples focus specifically on Docker Compose:\n\n*   [Quickstart: Compose and ELK](https://github.com/docker/awesome-compose/tree/master/elasticsearch-logstash-kibana/README.md) - Shows how to use Docker Compose to set up and run ELK - Elasticsearch-Logstash-Kibana.\n    \n*   [Quickstart: Compose and Django](https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/django/README.md) - Shows how to use Docker Compose to set up and run a simple Django/PostgreSQL app.\n    \n*   [Quickstart: Compose and Rails](https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/rails/README.md) - Shows how to use Docker Compose to set up and run a Rails/PostgreSQL app.\n    \n*   [Quickstart: Compose and WordPress](https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/wordpress/README.md) - Shows how to use Docker Compose to set up and run WordPress in an isolated environment with Docker containers.\n    \n\nThe Awesome Compose samples provide a starting point on how to integrate different frameworks and technologies using Docker Compose. All samples are available in the [Awesome-compose GitHub repo](https://github.com/docker/awesome-compose) and are ready to run with `docker compose up`.",
    "title": "Sample apps with Compose | Docker Docs\n",
    "description": "Summary of samples related to Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/startup-order/",
    "markdown": "# Control startup and shutdown order in Compose\n\nYou can control the order of service startup and shutdown with the [depends\\_on](https://docs.docker.com/compose/compose-file/05-services/#depends_on) attribute. Compose always starts and stops containers in dependency order, where dependencies are determined by `depends_on`, `links`, `volumes_from`, and `network_mode: \"service:...\"`.\n\nA good example of when you might use this is an application which needs to access a database. If both services are started with `docker compose up`, there is a chance this will fail since the application service might start before the database service and won't find a database able to handle its SQL statements.\n\nOn startup, Compose does not wait until a container is \"ready\", only until it's running. This can cause issues if, for example, you have a relational database system that needs to start its own services before being able to handle incoming connections.\n\nThe solution for detecting the ready state of a service is to use the `condition` attribute with one of the following options:\n\n*   `service_started`\n*   `service_healthy`. This specifies that a dependency is expected to be “healthy”, which is defined with `healthcheck`, before starting a dependent service.\n*   `service_completed_successfully`. This specifies that a dependency is expected to run to successful completion before starting a dependent service.\n\nCompose creates services in dependency order. `db` and `redis` are created before `web`.\n\nCompose waits for healthchecks to pass on dependencies marked with `service_healthy`. `db` is expected to be \"healthy\" (as indicated by `healthcheck`) before `web` is created.\n\nThe healthcheck for the `db` service uses the `pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'` command to check if the PostgreSQL database is ready. The service is retried every 10 seconds, up to 5 times.\n\nCompose also removes services in dependency order. `web` is removed before `db` and `redis`.\n\n*   [`depends_on`](https://docs.docker.com/compose/compose-file/05-services/#depends_on)\n*   [`healthcheck`](https://docs.docker.com/compose/compose-file/05-services/#healthcheck)",
    "title": "Control startup and shutdown order in Compose | Docker Docs\n",
    "description": "How to control service startup and shutdown order in Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/networking/",
    "markdown": "# Networking in Compose | Docker Docs\n\n> **Important**\n> \n> Docker's documentation refers to and describes Compose V2 functionality.\n> \n> Effective July 2023, Compose V1 stopped receiving updates and is no longer in new Docker Desktop releases. Compose V2 has replaced it and is now integrated into all current Docker Desktop versions. For more information, see [Migrate to Compose V2](https://docs.docker.com/compose/migrate).\n\nBy default Compose sets up a single [network](https://docs.docker.com/reference/cli/docker/network/create/) for your app. Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by the service's name.\n\n> **Note**\n> \n> Your app's network is given a name based on the \"project name\", which is based on the name of the directory it lives in. You can override the project name with either the [`--project-name` flag](https://docs.docker.com/compose/reference/) or the [`COMPOSE_PROJECT_NAME` environment variable](https://docs.docker.com/compose/environment-variables/envvars/#compose_project_name).\n\nFor example, suppose your app is in a directory called `myapp`, and your `compose.yml` looks like this:\n\nWhen you run `docker compose up`, the following happens:\n\n1.  A network called `myapp_default` is created.\n2.  A container is created using `web`'s configuration. It joins the network `myapp_default` under the name `web`.\n3.  A container is created using `db`'s configuration. It joins the network `myapp_default` under the name `db`.\n\nEach container can now look up the service name `web` or `db` and get back the appropriate container's IP address. For example, `web`'s application code could connect to the URL `postgres://db:5432` and start using the Postgres database.\n\nIt is important to note the distinction between `HOST_PORT` and `CONTAINER_PORT`. In the above example, for `db`, the `HOST_PORT` is `8001` and the container port is `5432` (postgres default). Networked service-to-service communication uses the `CONTAINER_PORT`. When `HOST_PORT` is defined, the service is accessible outside the swarm as well.\n\nWithin the `web` container, your connection string to `db` would look like `postgres://db:5432`, and from the host machine, the connection string would look like `postgres://{DOCKER_IP}:8001` for example `postgres://localhost:8001` if your container is running locally.\n\nIf you make a configuration change to a service and run `docker compose up` to update it, the old container is removed and the new one joins the network under a different IP address but the same name. Running containers can look up that name and connect to the new address, but the old address stops working.\n\nIf any containers have connections open to the old container, they are closed. It is a container's responsibility to detect this condition, look up the name again and reconnect.\n\n> **Tip**\n> \n> Reference containers by name, not IP, whenever possible. Otherwise you’ll need to constantly update the IP address you use.\n\nLinks allow you to define extra aliases by which a service is reachable from another service. They are not required to enable services to communicate. By default, any service can reach any other service at that service's name. In the following example, `db` is reachable from `web` at the hostnames `db` and `database`:\n\nSee the [links reference](https://docs.docker.com/compose/compose-file/05-services/#links) for more information.\n\nWhen deploying a Compose application on a Docker Engine with [Swarm mode enabled](https://docs.docker.com/engine/swarm/), you can make use of the built-in `overlay` driver to enable multi-host communication.\n\nOverlay networks are always created as `attachable`. You can optionally set the [`attachable`](https://docs.docker.com/compose/compose-file/06-networks/#attachable) property to `false`.\n\nConsult the [Swarm mode section](https://docs.docker.com/engine/swarm/), to see how to set up a Swarm cluster, and the [Getting started with multi-host networking](https://docs.docker.com/network/network-tutorial-overlay/) to learn about multi-host overlay networks.\n\nInstead of just using the default app network, you can specify your own networks with the top-level `networks` key. This lets you create more complex topologies and specify [custom network drivers](https://docs.docker.com/engine/extend/plugins_network/) and options. You can also use it to connect services to externally-created networks which aren't managed by Compose.\n\nEach service can specify what networks to connect to with the service-level `networks` key, which is a list of names referencing entries under the top-level `networks` key.\n\nThe following example shows a Compose file which defines two custom networks. The `proxy` service is isolated from the `db` service, because they do not share a network in common. Only `app` can talk to both.\n\nNetworks can be configured with static IP addresses by setting the [ipv4\\_address and/or ipv6\\_address](https://docs.docker.com/compose/compose-file/05-services/#ipv4_address-ipv6_address) for each attached network.\n\nNetworks can also be given a [custom name](https://docs.docker.com/compose/compose-file/06-networks/#name):\n\nInstead of, or as well as, specifying your own networks, you can also change the settings of the app-wide default network by defining an entry under `networks` named `default`:\n\nIf you want your containers to join a pre-existing network, use the [`external` option](https://docs.docker.com/compose/compose-file/06-networks/#external)\n\nInstead of attempting to create a network called `[projectname]_default`, Compose looks for a network called `my-pre-existing-network` and connects your app's containers to it.\n\nFor full details of the network configuration options available, see the following references:\n\n*   [Top-level `networks` element](https://docs.docker.com/compose/compose-file/06-networks/)\n*   [Service-level `networks` attribute](https://docs.docker.com/compose/compose-file/05-services/#networks)",
    "title": "Networking in Compose | Docker Docs\n",
    "description": "How Docker Compose sets up networking between containers",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/faq/",
    "markdown": "# Compose FAQs | Docker Docs\n\n### [What is the difference between `docker compose` and `docker-compose`](#what-is-the-difference-between-docker-compose-and-docker-compose)\n\nVersion one of the Docker Compose command-line binary was first released in 2014. It was written in Python, and is invoked with `docker-compose`. Typically, Compose V1 projects include a top-level version element in the compose.yml file, with values ranging from 2.0 to 3.8, which refer to the specific file formats.\n\nVersion two of the Docker Compose command-line binary was announced in 2020, is written in Go, and is invoked with `docker compose`. Compose V2 ignores the version top-level element in the compose.yml file.\n\nFor further information, see [History and development of Compose](https://docs.docker.com/compose/intro/history/).\n\n### [What's the difference between `up`, `run`, and `start`?](#whats-the-difference-between-up-run-and-start)\n\nTypically, you want `docker compose up`. Use `up` to start or restart all the services defined in a `compose.yml`. In the default \"attached\" mode, you see all the logs from all the containers. In \"detached\" mode (`-d`), Compose exits after starting the containers, but the containers continue to run in the background.\n\nThe `docker compose run` command is for running \"one-off\" or \"adhoc\" tasks. It requires the service name you want to run and only starts containers for services that the running service depends on. Use `run` to run tests or perform an administrative task such as removing or adding data to a data volume container. The `run` command acts like `docker run -ti` in that it opens an interactive terminal to the container and returns an exit status matching the exit status of the process in the container.\n\nThe `docker compose start` command is useful only to restart containers that were previously created but were stopped. It never creates new containers.\n\n### [Why do my services take 10 seconds to recreate or stop?](#why-do-my-services-take-10-seconds-to-recreate-or-stop)\n\nThe `docker compose stop` command attempts to stop a container by sending a `SIGTERM`. It then waits for a [default timeout of 10 seconds](https://docs.docker.com/reference/cli/docker/compose/stop/). After the timeout, a `SIGKILL` is sent to the container to forcefully kill it. If you are waiting for this timeout, it means that your containers aren't shutting down when they receive the `SIGTERM` signal.\n\nThere has already been a lot written about this problem of [processes handling signals](https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86) in containers.\n\nTo fix this problem, try the following:\n\n*   Make sure you're using the exec form of `CMD` and `ENTRYPOINT` in your Dockerfile.\n    \n    For example use `[\"program\", \"arg1\", \"arg2\"]` not `\"program arg1 arg2\"`. Using the string form causes Docker to run your process using `bash` which doesn't handle signals properly. Compose always uses the JSON form, so don't worry if you override the command or entrypoint in your Compose file.\n    \n*   If you are able, modify the application that you're running to add an explicit signal handler for `SIGTERM`.\n    \n*   Set the `stop_signal` to a signal which the application knows how to handle:\n    \n*   If you can't modify the application, wrap the application in a lightweight init system (like [s6](https://skarnet.org/software/s6/)) or a signal proxy (like [dumb-init](https://github.com/Yelp/dumb-init) or [tini](https://github.com/krallin/tini)). Either of these wrappers takes care of handling `SIGTERM` properly.\n    \n\n### [How do I run multiple copies of a Compose file on the same host?](#how-do-i-run-multiple-copies-of-a-compose-file-on-the-same-host)\n\nCompose uses the project name to create unique identifiers for all of a project's containers and other resources. To run multiple copies of a project, set a custom project name using the [`-p` command line option](https://docs.docker.com/compose/reference/) or the [`COMPOSE_PROJECT_NAME` environment variable](https://docs.docker.com/compose/environment-variables/envvars/#compose_project_name).\n\n### [Can I use JSON instead of YAML for my Compose file?](#can-i-use-json-instead-of-yaml-for-my-compose-file)\n\nYes. [YAML is a superset of JSON](https://stackoverflow.com/a/1729545/444646) so any JSON file should be valid YAML. To use a JSON file with Compose, specify the filename to use, for example:\n\n### [Should I include my code with `COPY`/`ADD` or a volume?](#should-i-include-my-code-with-copyadd-or-a-volume)\n\nYou can add your code to the image using `COPY` or `ADD` directive in a `Dockerfile`. This is useful if you need to relocate your code along with the Docker image, for example when you're sending code to another environment (production, CI, etc).\n\nUse a `volume` if you want to make changes to your code and see them reflected immediately, for example when you're developing code and your server supports hot code reloading or live-reload.\n\nThere may be cases where you want to use both. You can have the image include the code using a `COPY`, and use a `volume` in your Compose file to include the code from the host during development. The volume overrides the directory contents of the image.",
    "title": "Compose FAQs | Docker Docs\n",
    "description": "Frequently asked questions for Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/migrate/",
    "markdown": "# Migrate to Compose V2 | Docker Docs\n\nFrom July 2023 Compose V1 stopped receiving updates. It’s also no longer available in new releases of Docker Desktop.\n\nCompose V2, which was first released in 2020, is included with all currently supported versions of Docker Desktop. It offers an improved CLI experience, improved build performance with BuildKit, and continued new-feature development.\n\nThe easiest and recommended way is to make sure you have the latest version of [Docker Desktop](https://docs.docker.com/desktop/release-notes/), which bundles the Docker Engine and Docker CLI platform including Compose V2.\n\nWith Docker Desktop, Compose V2 is always accessible as `docker compose`. Additionally, the **Use Compose V2** setting is turned on by default, which provides an alias from `docker-compose`.\n\nFor manual installs on Linux, you can get Compose V2 by either:\n\n*   [Using Docker's repository](https://docs.docker.com/compose/install/linux/#install-using-the-repository) (recommended)\n*   [Downloading and installing manually](https://docs.docker.com/compose/install/linux/#install-the-plugin-manually)\n\n### [`docker-compose` vs `docker compose`](#docker-compose-vs-docker-compose)\n\nUnlike Compose V1, Compose V2 integrates into the Docker CLI platform and the recommended command-line syntax is `docker compose`.\n\nThe Docker CLI platform provides a consistent and predictable set of options and flags, such as the `DOCKER_HOST` environment variable or the `--context` command-line flag.\n\nThis change lets you use all of the shared flags on the root `docker` command. For example, `docker --log-level=debug --tls compose up` enables debug logging from the Docker Engine as well as ensuring that TLS is used for the connection.\n\n> **Tip**\n> \n> Update scripts to use Compose V2 by replacing the hyphen (`-`) with a space, using `docker compose` instead of `docker-compose`.\n\n### [Service container names](#service-container-names)\n\nCompose generates container names based on the project name, service name, and scale/replica count.\n\nIn Compose V1, an underscore (`_`) was used as the word separator. In Compose V2, a hyphen (`-`) is used as the word separator.\n\nUnderscores aren't valid characters in DNS hostnames. By using a hyphen instead, Compose V2 ensures service containers can be accessed over the network via consistent, predictable hostnames.\n\nFor example, running the Compose command `-p myproject up --scale=1 svc` results in a container named `myproject_svc_1` with Compose V1 and a container named `myproject-svc-1` with Compose V2.\n\n> **Tip**\n> \n> In Compose V2, the global `--compatibility` flag or `COMPOSE_COMPATIBILITY` environment variable preserves the Compose V1 behavior to use underscores (`_`) as the word separator. As this option must be specified for every Compose V2 command run, it's recommended that you only use this as a temporary measure while transitioning to Compose V2.\n\n### [Command-line flags and subcommands](#command-line-flags-and-subcommands)\n\nCompose V2 supports almost all Compose V1 flags and subcommands, so in most cases, it can be used as a drop-in replacement in scripts.\n\n#### [Unsupported in V2](#unsupported-in-v2)\n\nThe following were deprecated in Compose V1 and aren't supported in Compose V2:\n\n*   `docker-compose scale`. Use `docker compose up --scale` instead.\n*   `docker-compose rm --all`\n\n#### [Different in V2](#different-in-v2)\n\nThe following behave differently between Compose V1 and V2:\n\n|     | Compose V1 | Compose V2 |\n| --- | --- | --- |\n| `--compatibility` | Deprecated. Migrates YAML fields based on legacy schema version. | Uses `_` as word separator for container names instead of `-` to match V1. |\n| `ps --filter KEY-VALUE` | Undocumented. Allows filtering by arbitrary service properties. | Only allows filtering by specific properties, e.g. `--filter=status=running`. |\n\n### [Environment variables](#environment-variables)\n\nEnvironment variable behavior in Compose V1 wasn't formally documented and behaved inconsistently in some edge cases.\n\nFor Compose V2, the [Environment variables](https://docs.docker.com/compose/environment-variables/) section covers both [precedence](https://docs.docker.com/compose/environment-variables/envvars-precedence) as well as [`.env` file interpolation](https://docs.docker.com/compose/environment-variables/variable-interpolation/) and includes many examples covering tricky situations such as escaping nested quotes.\n\nCheck if:\n\n*   Your project uses multiple levels of environment variable overrides, for example `.env` file and `--env` CLI flags.\n*   Any `.env` file values have escape sequences or nested quotes.\n*   Any `.env` file values contain literal `$` signs in them. This is common with PHP projects.\n*   Any variable values use advanced expansion syntax, for example `${VAR:?error}`.\n\n> **Tip**\n> \n> Run `docker compose config` on the project to preview the configuration after Compose V2 has performed interpolation to verify that values appear as expected.\n> \n> Maintaining backwards compatibility with Compose V1 is typically achievable by ensuring that literal values (no interpolation) are single-quoted and values that should have interpolation applied are double-quoted.\n\nFor most projects, switching to Compose V2 requires no changes to the Compose YAML or your development workflow.\n\nIt's recommended that you adapt to the new preferred way of running Compose V2, which is to use `docker compose` instead of `docker-compose`. This provides additional flexibility and removes the requirement for a `docker-compose` compatibility alias.\n\nHowever, Docker Desktop continues to support a `docker-compose` alias to redirect commands to `docker compose` for convenience and improved compatibility with third-party tools and scripts.\n\n### [Migrating running projects](#migrating-running-projects)\n\nIn both V1 and V2, running `up` on a Compose project recreates service containers as necessary to reach the desired state based on comparing the actual state in the Docker Engine to the resolved project configuration including Compose YAML, environment variables, and command-line flags.\n\nBecause Compose V1 and V2 [name service containers differently](#service-container-names), running `up` using V2 the first time on a project with running services originally launched by V1, results in service containers being recreated with updated names.\n\nNote that even if `--compatibility` flag is used to preserve the V1 naming style, Compose still needs to recreate service containers originally launched by V1 the first time `up` is run by V2 to migrate the internal state.\n\n### [Using Compose V2 with Docker-in-Docker](#using-compose-v2-with-docker-in-docker)\n\nCompose V2 is now included in the [Docker official image on Docker Hub](https://hub.docker.com/_/docker).\n\nAdditionally, a new [docker/compose-bin image on Docker Hub](https://hub.docker.com/r/docker/compose-bin) packages the latest version of Compose V2 for use in multi-stage builds.\n\nYes. You can still download and install Compose V1 packages, but you won't get support from Docker if anything breaks.\n\n> **Warning**\n> \n> The final Compose V1 release, version 1.29.2, was May 10, 2021. These packages haven't received any security updates since then. Use at your own risk.\n\n*   [docker-compose V1 on PyPI](https://pypi.org/project/docker-compose/1.29.2/)\n*   [docker/compose V1 on Docker Hub](https://hub.docker.com/r/docker/compose)\n*   [docker-compose V1 source on GitHub](https://github.com/docker/compose/releases/tag/1.29.2)",
    "title": "Migrate to Compose V2 | Docker Docs\n",
    "description": "How to migrate from Compose V1 to V2",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/feedback/",
    "markdown": "# Give feedback | Docker Docs\n\nThere are many ways you can provide feedback on Docker Compose.\n\n### [In-product feedback](#in-product-feedback)\n\nIf you have obtained Docker Compose through Docker Desktop, you can use the `docker feedback` command to submit feedback directly from the command line.\n\n### [Report bugs or problems on GitHub](#report-bugs-or-problems-on-github)\n\nTo report bugs or problems, visit [Docker Compose on GitHub](https://github.com/docker/compose/issues)\n\nYou can also provide feedback through the #docker-compose [Docker Community Slack](https://dockr.ly/comm-slack) channel.",
    "title": "Give feedback | Docker Docs\n",
    "description": "Find a way to provide feedback on Docker Compose that's right for you",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/api/",
    "markdown": "# Develop with Docker Engine API\n\nDocker provides an API for interacting with the Docker daemon (called the Docker Engine API), as well as SDKs for Go and Python. The SDKs allow you to efficiently build and scale Docker apps and solutions. If Go or Python don't work for you, you can use the Docker Engine API directly.\n\nFor information about Docker Engine SDKs, see [Develop with Docker Engine SDKs](https://docs.docker.com/engine/api/sdk/).\n\nThe Docker Engine API is a RESTful API accessed by an HTTP client such as `wget` or `curl`, or the HTTP library which is part of most modern programming languages.\n\nYou can [view the reference for the latest version of the API](https://docs.docker.com/engine/api/latest/) or [choose a specific version](https://docs.docker.com/engine/api/version-history/).\n\nThe version of the Docker Engine API you should use depends upon the version of your Docker daemon and Docker client.\n\nA given version of the Docker Engine SDK supports a specific version of the Docker Engine API, as well as all earlier versions. If breaking changes occur, they are documented prominently.\n\n> **Note**\n> \n> The Docker daemon and client don't necessarily need to be the same version at all times. However, keep the following in mind.\n> \n> *   If the daemon is newer than the client, the client doesn't know about new features or deprecated API endpoints in the daemon.\n>     \n> *   If the client is newer than the daemon, the client can request API endpoints that the daemon doesn't know about.\n>     \n\nA new version of the API is released when new features are added. The Docker API is backward-compatible, so you don't need to update code that uses the API unless you need to take advantage of new features.\n\nTo see the highest version of the API your Docker daemon and client support, use `docker version`:\n\nYou can specify the API version to use in any of the following ways:\n\n*   When using the SDK, use the latest version. At a minimum, use the version that incorporates the API version with the features you need.\n    \n*   When using `curl` directly, specify the version as the first part of the URL. For instance, if the endpoint is `/containers/` you can use `/v1.46/containers/`.\n    \n*   To force the Docker CLI or the Docker Engine SDKs to use an older version of the API than the version reported by `docker version`, set the environment variable `DOCKER_API_VERSION` to the correct version. This works on Linux, Windows, or macOS clients.\n    \n    While the environment variable is set, that version of the API is used, even if the Docker daemon supports a newer version. This environment variable disables API version negotiation, so you should only use it if you must use a specific version of the API, or for debugging purposes.\n    \n*   The Docker Go SDK allows you to enable API version negotiation, automatically selects an API version that's supported by both the client and the Docker Engine that's in use.\n    \n*   For the SDKs, you can also specify the API version programmatically as a parameter to the `client` object. See the [Go constructor](https://pkg.go.dev/github.com/docker/docker/client#NewClientWithOpts) or the [Python SDK documentation for `client`](https://docker-py.readthedocs.io/en/stable/client.html).\n    \n\n### [API version matrix](#api-version-matrix)\n\n| Docker version | Maximum API version | Change log |\n| --- | --- | --- |\n| 27.0 | [1.46](https://docs.docker.com/engine/api/v1.46/) | [changes](https://docs.docker.com/engine/api/version-history/#v146-api-changes) |\n| 26.1 | [1.45](https://docs.docker.com/engine/api/v1.45/) | [changes](https://docs.docker.com/engine/api/version-history/#v145-api-changes) |\n| 26.0 | [1.45](https://docs.docker.com/engine/api/v1.45/) | [changes](https://docs.docker.com/engine/api/version-history/#v145-api-changes) |\n| 25.0 | [1.44](https://docs.docker.com/engine/api/v1.44/) | [changes](https://docs.docker.com/engine/api/version-history/#v144-api-changes) |\n| 24.0 | [1.43](https://docs.docker.com/engine/api/v1.43/) | [changes](https://docs.docker.com/engine/api/version-history/#v143-api-changes) |\n| 23.0 | [1.42](https://docs.docker.com/engine/api/v1.42/) | [changes](https://docs.docker.com/engine/api/version-history/#v142-api-changes) |\n| 20.10 | [1.41](https://docs.docker.com/engine/api/v1.41/) | [changes](https://docs.docker.com/engine/api/version-history/#v141-api-changes) |\n| 19.03 | [1.40](https://docs.docker.com/engine/api/v1.40/) | [changes](https://docs.docker.com/engine/api/version-history/#v140-api-changes) |\n| 18.09 | [1.39](https://docs.docker.com/engine/api/v1.39/) | [changes](https://docs.docker.com/engine/api/version-history/#v139-api-changes) |\n| 18.06 | [1.38](https://docs.docker.com/engine/api/v1.38/) | [changes](https://docs.docker.com/engine/api/version-history/#v138-api-changes) |\n| 18.05 | [1.37](https://docs.docker.com/engine/api/v1.37/) | [changes](https://docs.docker.com/engine/api/version-history/#v137-api-changes) |\n| 18.04 | [1.37](https://docs.docker.com/engine/api/v1.37/) | [changes](https://docs.docker.com/engine/api/version-history/#v137-api-changes) |\n| 18.03 | [1.37](https://docs.docker.com/engine/api/v1.37/) | [changes](https://docs.docker.com/engine/api/version-history/#v137-api-changes) |\n| 18.02 | [1.36](https://docs.docker.com/engine/api/v1.36/) | [changes](https://docs.docker.com/engine/api/version-history/#v136-api-changes) |\n| 17.12 | [1.35](https://docs.docker.com/engine/api/v1.35/) | [changes](https://docs.docker.com/engine/api/version-history/#v135-api-changes) |\n| 17.11 | [1.34](https://docs.docker.com/engine/api/v1.34/) | [changes](https://docs.docker.com/engine/api/version-history/#v134-api-changes) |\n| 17.10 | [1.33](https://docs.docker.com/engine/api/v1.33/) | [changes](https://docs.docker.com/engine/api/version-history/#v133-api-changes) |\n| 17.09 | [1.32](https://docs.docker.com/engine/api/v1.32/) | [changes](https://docs.docker.com/engine/api/version-history/#v132-api-changes) |\n| 17.07 | [1.31](https://docs.docker.com/engine/api/v1.31/) | [changes](https://docs.docker.com/engine/api/version-history/#v131-api-changes) |\n| 17.06 | [1.30](https://docs.docker.com/engine/api/v1.30/) | [changes](https://docs.docker.com/engine/api/version-history/#v130-api-changes) |\n| 17.05 | [1.29](https://docs.docker.com/engine/api/v1.29/) | [changes](https://docs.docker.com/engine/api/version-history/#v129-api-changes) |\n| 17.04 | [1.28](https://docs.docker.com/engine/api/v1.28/) | [changes](https://docs.docker.com/engine/api/version-history/#v128-api-changes) |\n| 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [changes](https://docs.docker.com/engine/api/version-history/#v127-api-changes) |\n| 17.03 | [1.26](https://docs.docker.com/engine/api/v1.27/) | [changes](https://docs.docker.com/engine/api/version-history/#v126-api-changes) |\n| 1.13.1 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [changes](https://docs.docker.com/engine/api/version-history/#v126-api-changes) |\n| 1.13 | [1.25](https://docs.docker.com/engine/api/v1.26/) | [changes](https://docs.docker.com/engine/api/version-history/#v125-api-changes) |\n| 1.12 | [1.24](https://docs.docker.com/engine/api/v1.24/) | [changes](https://docs.docker.com/engine/api/version-history/#v124-api-changes) |\n\n### [Deprecated API versions](#deprecated-api-versions)\n\nAPI versions before v1.24 are [deprecated](https://docs.docker.com/engine/deprecated/#deprecate-legacy-api-versions). You can find archived documentation for deprecated versions of the API in the code repository on GitHub:\n\n*   [Documentation for API versions 1.23 and before](https://github.com/moby/moby/tree/v25.0.0/docs/api).\n*   [Documentation for API versions 1.17 and before](https://github.com/moby/moby/tree/v1.9.1/docs/reference/api).",
    "title": "Develop with Docker Engine API | Docker Docs\n",
    "description": "Learn how you can use Docker Engine API and SDKs in the language of your choice.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/gpu-support/",
    "markdown": "# Turn on GPU access with Docker Compose\n\nCompose services can define GPU device reservations if the Docker host contains such devices and the Docker Daemon is set accordingly. For this, make sure you install the [prerequisites](https://docs.docker.com/config/containers/resource_constraints/#gpu) if you haven't already done so.\n\nThe examples in the following sections focus specifically on providing service containers access to GPU devices with Docker Compose. You can use either `docker-compose` or `docker compose` commands. For more information, see [Migrate to Compose V2](https://docs.docker.com/compose/migrate/).\n\nGPUs are referenced in a `compose.yml` file using the [device](https://docs.docker.com/compose/compose-file/deploy/#devices) attribute from the Compose Deploy specification, within your services that need them.\n\nThis provides more granular control over a GPU reservation as custom values can be set for the following device properties:\n\n*   `capabilities`. This value specifies as a list of strings (eg. `capabilities: [gpu]`). You must set this field in the Compose file. Otherwise, it returns an error on service deployment.\n*   `count`. This value, specified as an integer or the value `all`, represents the number of GPU devices that should be reserved (providing the host holds that number of GPUs). If `count` is set to `all` or not specified, all GPUs available on the host are used by default.\n*   `device_ids`. This value, specified as a list of strings, represents GPU device IDs from the host. You can find the device ID in the output of `nvidia-smi` on the host. If no `device_ids` are set, all GPUs available on the host are used by default.\n*   `driver`. This value is specified as a string, for example `driver: 'nvidia'`\n*   `options`. Key-value pairs representing driver specific options.\n\n> **Important**\n> \n> You must set the `capabilities` field. Otherwise, it returns an error on service deployment.\n> \n> `count` and `device_ids` are mutually exclusive. You must only define one field at a time.\n\nFor more information on these properties, see the [Compose Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#devices).\n\n### [Example of a Compose file for running a service with access to 1 GPU device](#example-of-a-compose-file-for-running-a-service-with-access-to-1-gpu-device)\n\nRun with Docker Compose:\n\nOn machines hosting multiple GPUs, the `device_ids` field can be set to target specific GPU devices and `count` can be used to limit the number of GPU devices assigned to a service container.\n\nYou can use `count` or `device_ids` in each of your service definitions. An error is returned if you try to combine both, specify an invalid device ID, or use a value of count that’s higher than the number of GPUs in your system.\n\nTo allow access only to GPU-0 and GPU-3 devices:",
    "title": "Turn on GPU access with Docker Compose | Docker Docs\n",
    "description": "Understand GPU support in Docker Compose",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/release-notes/",
    "markdown": "# Docker Compose release notes | Docker Docs\n\nFor more detailed information, see the [release notes in the Compose repo](https://github.com/docker/compose/releases/).\n\n_2024-06-24_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements)\n\n*   Fixed progress display, broken in `v2.28.0`, when TTY mode available.\n\n_2024-06-21_\n\n### [Update](#update)\n\n*   Dependencies upgrade: bump compose-go to v2.1.3\n*   Dependencies upgrade: bump docker engine and cli to v27.0.1-rc.1\n\n_2024-06-21_\n\n### [Update](#update-1)\n\n*   Dependencies upgrade: bump buildx to 0.15.1\n*   Dependencies upgrade: bump buildkit to 0.14.1\n\n_2024-06-20_\n\n### [Update](#update-2)\n\n*   Dependencies upgrade: bump golang to 1.21.11\n*   Dependencies upgrade: bump docker engine and cli to v26.1.4\n*   Dependencies upgrade: bump buildx to 0.15.0\n*   Dependencies upgrade: bump buildkit to 0.14.0\n*   Dependencies upgrade: bump containerd to 1.7.18\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-1)\n\n*   Added an `--environment` flag to the `config` command\n*   Fixed a bug which caused the `watch` process to hang when used as flag with the `up` command\n*   Fixed usage of `COMPOSE_PROFILES` in `.env` file\n\n_2024-05-24_\n\n### [Update](#update-3)\n\n*   Dependencies upgrade: bump compose-go to v2.1.1\n*   Dependencies upgrade: bump docker engine and cli to v26.1.3\n*   Dependencies upgrade: bump buildx to 0.14.1\n*   Dependencies upgrade: bump containerd to 1.7.17\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-2)\n\n*   Added a navigation menu in the CLI where you can open your Compose file in Docker Desktop\n*   Added documentation for `--menu` flag in `docker compose up`\n*   Fixed a bug with `--resolve-image-digests` used with `--no-interpolate`\n*   You can now use a local `.env` file to override `COMPOSE_*` environment variables\n\n_2024-04-24_\n\n### [Update](#update-4)\n\n*   Dependencies upgrade: bump golang to 1.21.9\n*   Dependencies upgrade: bump compose-go to v2.1.0\n*   Dependencies upgrade: bump docker engine and cli to v26.1.0\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-3)\n\n*   Introduced `--abort-on-container-failure` flag\n*   Introduced `--all-resources` to not exclude resources not used by services\n*   Introduced support for `build.entitlements`\n*   Fixed a bug so Docker Compose now ignores missing containers when `docker compose down/stop -p` is run\n*   Fixed support for `--flag=value` syntax in compatibility mode\n\n_2024-03-29_\n\n### [Update](#update-5)\n\n*   Dependencies upgrade: opencontainers/image-spec v1.1.0\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-4)\n\n*   Added image pull failure reason in output\n*   Fixed crash when running up with `--no-build` and `--watch`\n*   Fixed crash when no TTY available and menu enabled\n*   Improved legibility of menu actions\n\n_2024-03-22_\n\n### [Update](#update-6)\n\n*   Dependencies upgrade: bump compose-go v2.0.2\n*   Dependencies upgrade: bump docker v26.0.0\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-5)\n\n*   Reduced timeout of the Otel tracing command\n*   Fixed `config --format json`\n*   Fixed documentation on default build image name\n*   Introduced Synchronized file shares for bind mounts in Compose\n*   Added support for `annotations`\n*   Introduced `config --variables` to list Compose model variables\n*   Added a navigation menu within `docker compose up`\n\n_2024-03-15_\n\n### [Update](#update-7)\n\n*   Dependencies upgrade: bump compose-go v2.0.0\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-6)\n\n*   Restored `config` behaviour until `--no-interpolate` is set\n*   Fixed service name shell completion\n*   Added `--watch` flag to `up` command\n\n_2024-03-06_\n\n### [Update](#update-8)\n\n*   Dependencies upgrade: bump golang to 1.21.8\n*   Dependencies upgrade: bump compose-go to 2.0.0-rc8\n*   Dependencies upgrade: bump docker to v24.0.4\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-7)\n\n*   Compose now ensures stable priority sort order for networks\n*   Fixed interpolation with curly braces (e.g. JSON) in default values\n*   Fixed validation for non-unique `container_name` values\n*   Fixed validation for `develop.watch`\n*   Fixed environment loading for `include`\n*   Fixed panic when merging labels/networks\n*   Added support for `--no-path-resolution` when using `include`\n*   Fixed missing project name errors\n*   Fixed `--no-interpolate` flag on `config`\n*   Added a workaround for file lock issues with Watch mode on Windows\n*   Fixed duplicate exit code status messages\n*   Compose now respects `COMPOSE_REMOVE_ORPHANS` on `up`\n\n_2024-02-15_\n\n### [Update](#update-9)\n\n*   Dependencies upgrade: bump cli to 25.0.3\n*   Dependencies upgrade: bump compose-go to 2.0.0-rc.7\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-8)\n\n*   Fixed issue of `.env` file loading when project file is set via `COMPOSE_FILE` variable\n*   Aligned `ps --status=exited` behaviour with the Docker CLI behaviour\n*   Fixed a deadlock when collecting large logs\n\n_2024-01-30_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-9)\n\n*   Fixed \"failed to solve: changes out of order\" errors when building images on Windows.\n\n_2024-01-29_\n\n### [Update](#update-10)\n\n*   Dependencies upgrade: bump cli to 25.0.1\n*   Dependencies upgrade: bump docker to 25.0.1\n*   Dependencies upgrade: bump compose-go to 2.0.0-rc.3\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-10)\n\n*   Fixed issue when checking external network existence when swarm is enabled.\n*   Added support for `storage_opt` attribute.\n\n_2024-01-24_\n\nThis release fixes a build issue with Docker Desktop for Windows introduced in Compose v2.24.0.\n\n### [Update](#update-11)\n\n*   Compose now uses a custom version of `fsutils` library.\n\n_2024-01-22_\n\n### [Update](#update-12)\n\n*   Dependencies upgrade: bump cli to 25.0.0 GA\n*   Dependencies upgrade: bump compose-go to 2.0.0-rc.2\n\n_2024-01-18_\n\n### [Update](#update-13)\n\n*   Dependencies upgrade: bump cli to 25.0.0-rc3\n*   Dependencies upgrade: bump docker to 25.0.0-rc3\n*   Dependencies upgrade: bump compose-go to 2.0.0-rc.1\n*   Dependencies upgrade: bump containerd to 1.7.12\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-11)\n\n*   Reworked the display of container status during `up`\n*   Fixed the engine version required to use `healthcheck.start_interval`\n*   Removed `watch` subcommand from the `alpha` command\n*   Fixed a bug when handling received signals\n\n_2024-01-11_\n\n### [Update](#update-14)\n\n*   Dependencies upgrade: bump cli to 25.0.0-beta.3\n*   Dependencies upgrade: bump compose-go to 2.0.0-beta.3\n*   Dependencies upgrade: bump golang to 1.21.6\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-12)\n\n*   Introduced `docker compose attach` to attach local standard input, output, and error streams to a service's running container.\n*   Introduced `docker compose stats` to display a live stream of container(s) resource usage statistics.\n*   Introduced `docker compose ps --orphans` to include/exclude services not declared.\n*   Introduced `docker compose logs --index` to select a replica container.\n*   Introduced `docker compose build --with-dependencies` to also build dependencies.\n*   Added source policies for build.\n*   Included disabled services for shell completion.\n*   Restored `Project` in ps JSON output.\n*   Added OCI 1.0 fallback support for AWS ECR.\n*   Build now does not require environment to be resolved.\n*   Compose now sends out a cancel event on SIGINT/SIGTERM signal for `compose up`.\n*   Fixed log by exposing services ports when `--verbose`.\n*   Fixed inlined and environment-defined configs to be mounted under /<id> until an explicit target is set.\n*   Fixed combination of `--pull always --no-build`.\n*   Fixed race condition in log printer.\n*   Fixed `docker compose up` teardown when command context is cancelled.\n\n_2023-11-22_\n\n### [Update](#update-15)\n\n*   Dependencies upgrade: bump buildx to v0.12.0\n\n_2023-11-21_\n\n### [Update](#update-16)\n\n*   Dependencies upgrade: bump buildkit 0.12.3\n*   Dependencies upgrade: bump docker 24.0.7\n*   Dependencies upgrade: bump cli 24.0.7\n*   Dependencies upgrade: bump 1.20.2\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-13)\n\n*   Compose now supports `builds.tags` with `push` command.\n*   Compose Watch now re-builds service images at startup.\n*   Now `--remove-orphans` doesn't manage disabled services as orphaned.\n*   Compose displays `Building` output log only if there is at least one service to build.\n\n_2023-11-16_\n\n### [Update](#update-17)\n\n*   Dependencies upgrade: bump compose-go to v1.20.1\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-14)\n\n*   Aligned Compose with OCI artifact best practices.\n*   Introduced `--resolve-image-digests` so users can seal service images by digest when publishing a Compose application.\n*   Improved Compose Watch configuration logging.\n*   Compose now rejects a Compose file using `secrets|configs.driver` or `template_driver`.\n*   Compose now fails to start if a dependency is missing.\n*   Fixed SIGTERM support to stop/kill stack.\n*   Fixed a `--hash` regression.\n*   Fixed \"Application failed to start after update\" when an external network is on a watched service.\n*   Fixed `--pull` documentation.\n*   Fixed display by adding newline in cmd/compose/build.go.\n*   Compose is rendered quiet after filtering applied.\n*   Stripped project prefix from docker-compose up output.\n\n_2023-10-18_\n\n### [Update](#update-18)\n\n*   Dependencies upgrade: bump compose-go to v1.20.0\n*   Dependencies upgrade: bump containerd to 1.7.7\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-15)\n\n*   Added dry-run support for publish command\n*   Added `COMPOSE_ENV_FILES` env variable to pass a list of env files\n*   Added `sync+restart` action to `compose watch`\n*   Aligned `compose ps` output with Docker CLI by default and introduced `--no-trunc` to keep the previous behaviour\n*   Fixed hashes inconsistency between `up` and `configure`\n*   Enabled profiles when `down` ran with explicit service names\n*   Fixed an issue when the pull policy provided was invalid\n\n_2023-09-21_\n\n> **Note**\n> \n> The `watch` command is now generally available (GA). You can directly use it from the root command `docker compose watch`. For more information, see [File watch](https://docs.docker.com/compose/file-watch/).\n\n### [Update](#update-19)\n\n*   Dependencies upgrade: bump golang to 1.21.1\n*   Dependencies upgrade: bump compose-go to v1.19.0\n*   Dependencies upgrade: bump buildkit to v0.12.2\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-16)\n\n*   Added experimental support for the `publish` command.\n*   The command `watch` now builds and launches the project during startup.\n*   Added `policy` option to the `--pull` flag.\n*   Fixed various race and deadlock conditions for `up` command on exit.\n*   Fixed multi-platform issues on build.\n*   Enabled services that are explicitly requested even when their `profiles` aren't activated.\n*   Fixed a `config` issue when the declared `env_file` is missing.\n*   Passed BuildOptions to `up` and `run` commands.\n\n_2023-08-30_\n\n> **Note**\n> \n> The format of `docker compose ps` and `docker compose ps --format=json` changed to better align with `docker ps` output. See [compose#10918](https://github.com/docker/compose/pull/10918).\n\n### [Update](#update-20)\n\n*   Dependencies upgrade: bump compose-go to v1.18.3\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-17)\n\n*   Changed `docker compose ps` and `docker compose ps --format=json` output to align with Docker CLI.\n*   Added support for multi-document YAML files.\n*   Added support for loading remote Compose files from Git repos with `include` (experimental).\n*   Fixed incorrect proxy variables during build.\n*   Fixed truncated container logs on container exit.\n*   Fixed \"no such service\" errors when using `include` with `--profile`.\n*   Fixed `.env` overrides when using `include`.\n\n_2023-08-11_\n\n### [Update](#update-21)\n\n*   Dependencies upgrade: bump golang to 1.21.0\n*   Dependencies upgrade: bump compose-go to v1.18.1\n*   Dependencies upgrade: bump buildkit to v0.12.1\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-18)\n\n*   Improved speed and reliability of `watch` sync.\n*   Added builder's name on the first build line.\n*   Improved shell completion for `--project-directory` and `--profile`.\n*   Fixed build issue with proxy configuration not passing to legacy builder.\n*   Removed unnecessary warning when an option dependency exists successfully.\n\n_2023-07-19_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-19)\n\n*   Added support for the `depends_on.required` attribute.\n*   Fixed an issue where build tries to push unnamed service images.\n*   Fixed a bug which meant the target secret path on Windows was not checked.\n*   Fixed a bug resolving build context path for services using `extends.file`.\n\n_2023-07-18_\n\n### [Update](#update-22)\n\n*   Dependencies upgrade: bump golang to 1.20.6\n*   Dependencies upgrade: bump buildx to v0.11.2\n*   Dependencies upgrade: bump buildkit to v0.12\n*   Dependencies upgrade: bump docker-cli to v24.0.5-dev\n\n_2023-07-11_\n\n### [Update](#update-23)\n\n*   Dependencies upgrade: bump docker/cli-docs-tools to v0.6.0\n*   Dependencies upgrade: bump docker to v24.0.4\n*   Dependencies upgrade: bump buildx to v0.11.1\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-20)\n\n*   Introduced the `wait` command.\n*   Added support of `--builder` and `BUILDX_BUILDER` to the `build` command.\n*   Added support for the `include` and `attach` attributes from the Compose Specification.\n*   Fixed a DryRun mode issue when initializing CLI client.\n*   Fixed a bug with random missing network when a service has more than one.\n*   Fixed the Secrets file permission value to comply with the Compose Specification.\n*   Fixed an issue about `no-deps` flag not being applied.\n*   Fixed some source code comments.\n*   Fixed a bug when `--index` is not set select.\n*   Fixed a process leak in the wait e2e test.\n*   Improved some test speeds.\n\n_2023-06-29_\n\n### [Update](#update-24)\n\n*   Dependencies upgrade: bump compose-go to v1.15.1\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-21)\n\n*   Fixed sporadic \"container not connected to network\" errors on `compose up`.\n*   Fixed \"please specify build context\" errors on `compose build`.\n*   Compose now warns if using a bind mount in a service `watch` configuration.\n\n_2023-06-21_\n\n### [Update](#update-25)\n\n*   Dependencies upgrade: bump compose-go to v1.15.0\n*   Dependencies upgrade: bump buildx to v0.11.0\n*   Dependencies upgrade: bump docker to v24.0.2\n*   Dependencies upgrade: bump golang to 1.20.5\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-22)\n\n*   Introduced the ability to select a single service to be stopped by `compose down`.\n*   Added `--progress` as top-level flag to configure progress UI style.\n*   Introduced `run --cap-add` to run maintenance commands using service image.\n*   Fixed a bug during detection of swarm mode.\n*   Fixed a bug when setting the project name via `COMPOSE_PROJECT_NAME` environment variable.\n*   Adjusted the display of the volumes flag with the help of `down` command.\n*   Fixed a bug in the `up` command which should not silently ignore missing `depends_on` services.\n*   Aligned forward signal to container behaviour with the `docker run` one.\n*   Compose now detects network name conflict.\n*   Fixed a typo in the warning message about an existing volume.\n*   Compose now detects new services started after `compose -p x logs -f` command.\n*   Fixed a bug when `compose` was used as project name.\n*   Fixed a bug in the `watch` command when a directory does not exist.\n*   Removed default timeout of 10 seconds when restarting or stopping services.\n*   Fixed a bug in `watch` which applied the \"rebuild\" strategy by default.\n*   Fixed a race condition, waiting for containers when one exit.\n*   Added a warning telling users that uid,gid,mode are not implemented for `build.secrets`.\n*   Fixed a bug in `watch` which was watching the whole build context instead of only configured paths.\n*   Compose now sorts containers by creation date to scale down the older ones first.\n*   Fixed a bug in the docs generation task for Windows environments.\n*   Updated the docs to reflect Dry Run mode is feature complete.\n*   Improved the diagnostic message on network label mismatch.\n*   Fixed a bug which was rendering `Building` section when there was no build involved.\n*   Fixed a bug in code coverage metrics.\n*   Added OTEL initialization.\n*   Added a GitHub action to trigger Docker Desktop e2e tests with Compose edge versions.\n*   Added more ignore rules to dependabot.\n\n_2023-05-17_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-23)\n\n*   Fixed \"Image not found\" errors when building images\n\n_2023-05-16_\n\n### [Update](#update-26)\n\n*   Dependencies upgrade: bump compose-go to v1.13.5\n*   Dependencies upgrade: bump buildkit to v0.11.6\n*   Dependencies upgrade: bump docker to v23.0.5\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-24)\n\n*   Added dry run support using `--dry-run`\n*   Added the first (alpha) implementation of the `viz` sub-command\n*   Introduced `--no-path-resolution` to skip relative path to be resolved\n*   Introduced `COMPOSE_ANSI` to define the `--ansi` default value\n*   Introduced `COMPOSE_STATUS_STDOUT` to get status messages sent to stdout\n*   Fixed the BuildKit progressui integration\n*   Fixed a bug to stop blocking the events loop collecting logs\n*   Restored support for `--memory`\n*   Fixed a bug which meant containers didn't stop after termination\n*   Compose now lets users declare the build secret target\n*   Fixed a bug which caused a container to be recreated when the config has not changed\n*   Fixed a race condition when `--parallel` is used with a large number of dependent services\n*   Compose now checks the local image matches the required platform\n*   Fixed local image removal when `compose down` is ran with `--project-name`\n*   Compose now detects the active endpoint trying to remove the network and skips with a warning\n*   Removed unnecessary \\[\\] output\n*   Compose detects that a Windows terminal is not a `console.File` to avoid a panic\n*   `--parallel` now has precedence over `COMPOSE_PARALLEL_LIMIT`\n*   Compose now reports that the external network is not found when Swarm is disabled\n\n_2023-03-26_\n\n### [Update](#update-27)\n\n*   Dependencies upgrade: bump compose-go to v1.13.2\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-25)\n\n*   Fixed invalid project name error for directories with uppercase characters or `.` in the name. Fixed [compose#10405](https://github.com/docker/compose/issues/10405)\n\n_2023-03-24_\n\n### [Update](#update-28)\n\n*   Dependencies upgrade: bump buildkit to v0.11.5\n*   Dependencies upgrade: bump compose-go to v1.13.1\n*   Dependencies upgrade: bump golang to 1.20.2\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-26)\n\n*   Fixed panic on `alpha watch` command. Pull Request [compose#10393](https://github.com/docker/compose/pull/10393)\n*   Prevented conflicts for services named `extensions`. Fixed [compose-go#247](https://github.com/compose-spec/compose-go/issues/247)\n*   Compose now validates project names more consistently. Fixed [compose-go#363](https://github.com/compose-spec/compose-go/issues/363)\n\n_2023-03-23_\n\n### [Upgrade notes](#upgrade-notes)\n\n*   Project name validation is more strictly enforced. Project names can only include letters, numbers, `_`, `-` and must be lowercase and start with a letter or number.\n*   Boolean fields in YAML must be either `true` or `false`. Deprecated YAML 1.1 values such as \"on\" or \"no\" are not supported.\n*   Duplicate YAML merge keys (`<<`) are rejected.\n\n### [Update](#update-29)\n\n*   Dependencies upgrade: bump buildkit to v0.11.4\n*   Dependencies upgrade: bump buildx to v0.10.4\n*   Dependencies upgrade: bump containerd to 1.6.18\n*   Dependencies upgrade: bump compose-go to v1.13.0\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-27)\n\n*   Introduced `--wait-timeout` on `up` command. Fixed [compose#10269](https://github.com/docker/compose/issues/10269)\n*   Made `compose service --hash` output sort by service name. Pull Request [compose#10278](https://github.com/docker/compose/pull/10278)\n*   Compose now renders a compact TUI progress report to monitor layers download. Pull Request [compose#10281](https://github.com/docker/compose/pull/10281)\n*   Introduced `restart` for `depends_on`. Fixed [compose#10284](https://github.com/docker/compose/issues/10284)\n*   Added support of `NO_COLOR` env var. Fixed [compose#10340](https://github.com/docker/compose/issues/10340)\n*   Progress writer now uses `dockercli.Err` stream. Fixed [compose#10366](https://github.com/docker/compose/issues/10366)\n*   Added support for `additional_contexts` in the `build` service configuration. Fixed [compose#9461](https://github.com/docker/compose/issues/9461) [compose#9961](https://github.com/docker/compose/issues/9961)\n*   Added file delete/rename handling in `watch` mode. Pull Request [compose#10386](https://github.com/docker/compose/pull/10386)\n*   Introduced an `ignore` attribute in `watch` mode. Pull Request [compose#10385](https://github.com/docker/compose/pull/10385)\n*   Compose now uses progress writer to show copies status. Pull Request [compose#10387](https://github.com/docker/compose/pull/10387)\n*   Updated reference documentation for `-p`/`--project-name` flag. Fixed [docs#16915](https://github.com/docker/docs/pull/16915), [compose-spec#311](https://github.com/compose-spec/compose-spec/issues/311)\n*   Introduced a `replace` label to track the relationship between old and new containers of a service. Fixed [compose#9600](https://github.com/docker/compose/issues/9600)\n*   Fixed a bug that meant dependent services were not restarted after a service was restarted. Fixed [compose#10263](https://github.com/docker/compose/issues/10263)\n*   Compose now ignores services without a build section in `watch` mode. Fixed [compose#10270](https://github.com/docker/compose/issues/10270)\n*   Compose now applies config options for pseudo-subcommands. Fixed [compose#10286](https://github.com/docker/compose/issues/10286)\n*   Compose manages only containers with config\\_hash labels (i.e, created by compose). Fixed [compose#10317](https://github.com/docker/compose/issues/10317)\n*   Compose triggers an error if the project name is empty after normalization. Fixed [compose#10313](https://github.com/docker/compose/issues/10313)\n*   Compose restarts only needed services by checking `depends_on` relations. Fixed [compose#10337](https://github.com/docker/compose/issues/10337)\n*   Fixed a display issue on small terminals. Fixed [compose#10322](https://github.com/docker/compose/issues/10322)\n*   Fixed an issue with building the built images IDs collection. Pull Request [compose#10372](https://github.com/docker/compose/issues/10372)\n*   Use configured name separator to define oneoff container name. Fixed [compose#10354](https://github.com/docker/compose/issues/10354)\n*   Fixed concurrent map read/write issue when recreating containers. Fixed [compose#10319](https://github.com/docker/compose/issues/10319)\n*   Compose now supports Dry Run mode for `stop` and `rm` commands. Pull Request [compose#10257](https://github.com/docker/compose/issues/10257)\n*   Compose now supports Dry Run mode for `pull` command. Pull Request [compose#10341](https://github.com/docker/compose/issues/10341)\n*   Compose now supports Dry Run mode for `push` command. Pull Request [compose#10355](https://github.com/docker/compose/issues/10355)\n*   Compose now supports Dry Run mode for `exec` command. Pull Request [compose#10252](https://github.com/docker/compose/issues/10252)\n*   Compose now supports Dry Run mode for `restart` command. Pull Request [compose#10339](https://github.com/docker/compose/issues/10339)\n\n_2023-02-08_\n\n### [Update](#update-30)\n\n*   Dependencies upgrade: bump docker to v23.0.0\n*   Dependencies upgrade: bump docker-cli to v23.0.0\n*   Dependencies upgrade: bump buildkit to v0.11.2\n*   Dependencies upgrade: bump buildx to v0.10.2\n*   Dependencies upgrade: bump containerd to 1.6.16\n*   Dependencies upgrade: bump golang to 1.20\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-28)\n\n*   Introduced `--remove-orphans` for the `compose create` command. Fixed [compose#9718](https://github.com/docker/compose/issues/9718)\n*   Shortened the TTY output when the terminal is too small. Fixed [compose#9962](https://github.com/docker/compose/issues/9962)\n*   Added `remove-orphans` functionality to run. Fixed [compose#9718](https://github.com/docker/compose/issues/9718#issuecomment-1209448445)\n*   Introduced the experimental `watch` command. Pull Request [compose#10163](https://github.com/docker/compose/pull/10163)\n*   Compose now allows TTY to be allocated with `-t`. Fixed [compose#10161](https://github.com/docker/compose/issues/10161)\n*   Introduced the experimental `dry-run` command. Pull Request [compose#10173](https://github.com/docker/compose/issues/10173)\n*   Updated the documentation to explain ways to configure parallelism. Pull Request [compose#10198](https://github.com/docker/compose/issues/10198)\n*   Aligned the `logs` command with docker CLI by aliasing `-n` for `--tail`. Fixed [compose#10199](https://github.com/docker/compose/issues/10199)\n*   Added support for `docker compose build --push`. Pull Request [compose#10148](https://github.com/docker/compose/issues/10148)\n*   Added `--scale` to the `compose create` command. Fixed [compose#10208](https://github.com/docker/compose/issues/10208)\n*   Renamed `convert` to `config` to align with the Compose V1 UX. Pull Request [compose#10214](https://github.com/docker/compose/issues/10214)\n*   Compose now passes the proxy config as build args. Fixed [compose#8797](https://github.com/docker/compose/issues/8797)\n*   Fixed parsing issue in `compose up` by ignoring containers not created by Compose. Fixed [compose#10162](https://github.com/docker/compose/issues/10162#issuecomment-1384989985)\n*   Fixed the goroutine leak in log formatter initialization. Fixed [compose#10157](https://github.com/docker/compose/issues/10157)\n*   Fixed an issue where compose logs don't exit when all running containers have been stopped. Pull Request [compose#10181](https://github.com/docker/compose/issues/10181)\n*   Fixed the documentation to reflect `docker compose ps` being aligned with `docker ps`. Pull Request [compose#10195](https://github.com/docker/compose/issues/10195)\n*   Fixed an issue where the remote Buildx driver was not found. Fixed [compose#9893](https://github.com/docker/compose/issues/9893)\n*   Improved logging when recreating a service container. Pull request [compose#10236](https://github.com/docker/compose/issues/10236)\n*   Fixed an issue so Compose now only waits for containers concerned by the wait condition. Fixed [compose#10200](https://github.com/docker/compose/issues/10200)\n*   Compose now prevents assignment to entry in nil map. Fixed [compose#10244](https://github.com/docker/compose/issues/10244)\n*   Added a dedicated GitHub Action workflow for Cucumber tests. Pull Request [compose#10165](https://github.com/docker/compose/issues/10165)\n*   Cleaned the TUI lines when switching in compact log mode. Fixed [compose#10201](https://github.com/docker/compose/issues/10201)\n*   Added Tilt watcher to detect code changes in watch mode. Pull Request [compose#10218](https://github.com/docker/compose/issues/10218)\n*   Compose now supports Dry Run mode for `kill` command. Fixed [compose#10210](https://github.com/docker/compose/issues/10210)\n*   Compose now supports Dry Run mode for `pause` command.Fixed [compose#10217](https://github.com/docker/compose/issues/10217)\n*   Compose now supports Dry Run mode for `cp` command.Fixed [compose#10235](https://github.com/docker/compose/issues/10235)\n\n_2023-01-09_\n\n### [Update](#update-31)\n\n*   Dependencies upgrade to fix Golan CVE-2022-27664 and CVE-2022-32149\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-29)\n\n*   Added support for UTS namespace. Fixed [compose#8408](https://github.com/docker/compose/issues/8408)\n*   Fixed filtering issue when no filter set. Fixed [roadmap#418](https://github.com/docker/roadmap/issues/418)\n*   Fixed concurrent map writes issue during build step. Pull Request [compose#10151](https://github.com/docker/compose/pull/10151)\n*   Fixed issue when stdin is not a terminal. Fixed [compose#9739](https://github.com/docker/compose/issues/9739)\n\n_2023-01-05_\n\n### [Update](#update-32)\n\n*   Dependencies upgrade: bump compose-go to v1.8.1\n*   Dependencies upgrade: bump cli-docs-tool to 0.5.1\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-30)\n\n*   Added support of the `privileged` attribute in the `service.build` section. Pull Request [compose#10112](https://github.com/docker/compose/pull/10112)\n*   Introduced `--ignore-buildable` to ignore buildable images on pull. Fixed [compose#8805](https://github.com/docker/compose/issues/8805)\n*   Introduceed `--no-attach` to ignore some service outputs. Fixed [compose#8546](https://github.com/docker/compose/issues/8546)\n*   Fixed issue with `logs` when `driver:none` is set. Fixed [compose#9030](https://github.com/docker/compose/issues/9030)\n*   Compose now relies on dockerCLI.streams. Pull Request [compose#10082](https://github.com/docker/compose/pull/10082)\n*   Fixed issue with service hash that MUST exclude replicas. Fixed [compose#10077](https://github.com/docker/compose/issues/10077)\n*   Compose now checks service names based on project, not running containers. Fixed [compose#9951](https://github.com/docker/compose/issues/9951)\n*   Fixed security opts support (seccomp and unconfined). Fixed [compose#9505](https://github.com/docker/compose/issues/9505)\n*   Fixed empty file when using compose config in case of smaller source files. Fixed [compose#10121](https://github.com/docker/compose/issues/10121)\n*   Fixed issue with `--pull` not applied on `compose up`. Fixed [compose#10125](https://github.com/docker/compose/issues/10125)\n*   Compose should ignore not only auto-removed containers but also \"removal in progress\" for orphan containers. Pull Request [compose#10136](https://github.com/docker/compose/pull/10136)\n*   Compose limits build concurrency according to `--parallel`. Fixed [compose#9091](https://github.com/docker/compose/issues/9091)\n\n_2022-12-20_\n\n### [Update](#update-33)\n\n*   Dependencies upgrade: bump containerd to 1.6.14\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-31)\n\n*   Compose now uses DOCKER\\_DEFAULT\\_PLATFORM to determine the platform when creating a container. Fixed [compose#10041](https://github.com/docker/compose/pull/10041)\n*   Compose now detects when dependency failed to start. Fixed [compose#9732](https://github.com/docker/compose/pull/9732)\n*   Fixed WCOW volume mounts. Fixed [compose#9577](https://github.com/docker/compose/pull/9577)\n*   List only running containers when using `--all=false`. Fixed [compose#10085](https://github.com/docker/compose/pull/10085)\n*   Fixed a regression when running pull `--ignore-pull-failures`. Fixed [compose#10089](https://github.com/docker/compose/pull/10089)\n*   Fixed CPU quota issue. Fixed [compose#10073](https://github.com/docker/compose/pull/10073)\n*   Fixed race condition on compose logs. Fixed [compose#8880](https://github.com/docker/compose/pull/8880)\n*   Updated projectOptions to be public by renaming it to ProjectOptions. Fixed [compose#100102](https://github.com/docker/compose/pull/100102)\n\n_2022-12-15_\n\n### [Updates](#updates)\n\n*   Dependencies upgrade: bump Go to 1.19.4\n*   Dependencies upgrade: bump containerd to 1.6.12\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-32)\n\n*   Added `--parallel` to limit concurrent engine calls. Pull Request [compose#10030](https://github.com/docker/compose/pull/10030)\n*   Distinguished stdout and stderr in `up` logs. Fixed [compose#8098](https://github.com/docker/compose/issues/8098)\n*   Aligned `compose ps` output with `docker ps`. Fixed [compose#6867](https://github.com/docker/compose/issues/6867)\n*   Added `--include-deps` to push command. Pull Request [compose#10044](https://github.com/docker/compose/pull/10044)\n*   Introduced `--timestamp` option on `compose up`. Fixed [compose#5730](https://github.com/docker/compose/issues/5730)\n*   Compose now applies uid/gid when creating a secret from the environment. Pull Request [compose#10084](https://github.com/docker/compose/pull/10084)\n*   Fixed deadlock when waiting for attached-dependencies. Fixed [compose#10021](https://github.com/docker/compose/pull/10021)\n*   Fixed race condition when collecting pulled images IDs. Fixed [compose#9897](https://github.com/docker/compose/pull/9897)\n*   Compose doesn't stop the `pull` command for images that can be built. Fixed [compose#8724](https://github.com/docker/compose/pull/8724)\n*   Fixed corner case when there's no container to attach to. Fixed [compose#8752](https://github.com/docker/compose/pull/8752)\n*   Compose containers' startup must run sequentially for engine to assign distinct ports within a configured range. Fixed [compose#8530](https://github.com/docker/compose/pull/8530)\n*   Fixed parsing of `repository:tag`. Fixed [compose#9208](https://github.com/docker/compose/pull/9208)\n*   Load project from files when explicitly set by user. Fixed [compose#9554](https://github.com/docker/compose/pull/9554)\n\n_2022-12-02_\n\n### [Updates](#updates-1)\n\n*   Dependencies upgrade: bump compose-go to [v1.8.0](https://github.com/compose-spec/compose-go/releases/tag/v1.8.0)\n*   Dependencies upgrade: bump Go to 1.19.3\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-33)\n\n*   Added `oom_score_adj` field to service definition. Pull Request [compose#10019](https://github.com/docker/compose/issues/10019)\n*   Added mode field for tmpfs mount permissions. Pull Request [compose#10031](https://github.com/docker/compose/issues/10031)\n*   Compose now only stops services started by `up` when interrupted. Fixed [compose#10028](https://github.com/docker/compose/issues/10028)\n*   Compose now loads implicit profiles for targeted services. Fixed [compose#10025](https://github.com/docker/compose/issues/10025)\n*   Compose does not require `service.build.platforms` to be set if `service.platform` is set. Fixed [compose#10017](https://github.com/docker/compose/issues/10017)\n*   Plain output is used during buildx image builds if `--ansi=never` is set. Fixed [compose#10020](https://github.com/docker/compose/issues/10020)\n*   `COMPOSE_IGNORE_ORPHANS` environment variable now behaves more consistently. Fixed [compose#10035](https://github.com/docker/compose/issues/10035)\n*   Compose now uses the correct image name separator in `convert`. Fixed [compose#9904](https://github.com/docker/compose/issues/9904)\n*   Fixed `run` for services using `network_mode: service:NAME`. Fixed [compose#10036](https://github.com/docker/compose/issues/10036)\n\n_2022-11-23_\n\n### [Updates](#updates-2)\n\n*   Dependencies upgrade: bump containerd to 1.6.10\n*   Dependencies upgrade: bump docker-credential-helpers to v0.7.0\n*   Update CI dependencies. Pull Request [compose#9982](https://github.com/docker/compose/pull/9982)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-34)\n\n*   Added a `no-consistency` option to `convert` command. Fixed [compose#9963](https://github.com/docker/compose/issues/9963)\n*   Added a `build` option to `run` command. Fixed [compose#10003](https://github.com/docker/compose/issues/10003)\n*   Fixed mapping `restart_policy.condition` to engine supported values. Fixed [compose#8756](https://github.com/docker/compose/issues/8756), [docs#15936](https://github.com/docker/docs/pull/15936)\n*   Fixed missing support of `deploy.reservation.memory`. Fixed [compose#9902](https://github.com/docker/compose/issues/9902)\n*   Fixed a bug to prevent usage of `COMPOSE_PROFILES` when `--profile` arg is used. Fixed [compose#9895](https://github.com/docker/compose/issues/9895)\n*   Fixed a bug to prevent pulling a service's image when depending on a service which will build this image. Fixed [compose#9983](https://github.com/docker/compose/issues/9983)\n*   Fixed parsing issue when a container number label is not found. Fixed [compose#10004](https://github.com/docker/compose/issues/10004)\n*   Compose now uses the platform value defined by `DOCKER_DEFAULT_PLATFORM` when no `service.platform` defined. Fixed [compose#9889](https://github.com/docker/compose/issues/9889)\n*   Removed usage of the deprecated dependency `gotest.tools` v2. Pull Request [compose#9935](https://github.com/docker/compose/pull/9935)\n*   Excluded issues labeled with `kind/feature` from stale bot process. Fixed [compose#9988](https://github.com/docker/compose/pull/9988)\n\n_2022-10-21_\n\n### [Updates](#updates-3)\n\n*   Updated Docker Engine API to restore compatibility with Golang 1.18 needed for Linux packaging. Pull Request [compose#9940](https://github.com/docker/compose/pull/9940)\n\nFor the full change log or additional information, check the [Compose repository 2.12.2 release page](https://github.com/docker/compose/releases/tag/v2.12.2).\n\n_2022-10-21_\n\n### [Security](#security)\n\n*   Updated Docker Engine API to apply fix of [CVE-2022-39253](https://nvd.nist.gov/vuln/detail/CVE-2022-39253). Pull Request [compose#9934](https://github.com/docker/compose/pull/9934)\n\nFor the full change log or additional information, check the [Compose repository 2.12.1 release page](https://github.com/docker/compose/releases/tag/v2.12.1).\n\n_2022-10-18_\n\n### [Updates](#updates-4)\n\n*   CI update to the documentation repository path\n    \n*   Upgraded to compose-go from [1.5.1 to 1.6.0](https://github.com/compose-spec/compose-go/releases/tag/v1.6.0)\n    \n*   Updated to go 1.19.2 to address CVE-2022-2879, CVE-2022-2880, CVE-2022-41715\n    \n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-35)\n\n*   Added a `quiet` option when pushing an image. Fixed [compose#9089](https://github.com/docker/compose/issues/9089)\n*   Fixed a misleading error message for `port` command. Pull Request [compose#9909](https://github.com/docker/compose/pull/9909)\n*   Fixed a bug to prevent failure when Compose tries to remove a non-existing container. Fixed by [compose#9896](https://github.com/docker/compose/pull/9896/)\n*   Switched GitHub issue template form\n\nFor the full change log or additional information, check the [Compose repository 2.12.0 release page](https://github.com/docker/compose/releases/tag/v2.12.0).\n\n_2022-09-27_\n\n> **Note**\n> \n> *   Updates on environment file syntax & interpolation: see [compose#9879](https://github.com/docker/compose/issues/9879)\n> *   Setting `DOCKER_HOST` via `.env` files is not supported in Compose v2\n\n### [Updates](#updates-5)\n\n*   Upgraded to compose-go from [1.5.1 to 1.6.0](https://github.com/compose-spec/compose-go/releases/tag/v1.6.0)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-36)\n\n*   Fixed a bug to prevent \"invalid template\" errors on valid environment variable values. Fixes [compose##9806](https://github.com/docker/compose/issues/9806), [compose##9746](https://github.com/docker/compose/issues/9746), [compose##9704](https://github.com/docker/compose/issues/9704), [compose##9294](https://github.com/docker/compose/issues/9294)\n*   Fixed a bug to ensure new images from `docker compose build` are used. Fixes [compose#9856](https://github.com/docker/compose/issues/9856)\n*   Fixed cross-architecture builds when `DOCKER_DEFAULT_PLATFORM` not set. Fixes [compose#9864](https://github.com/docker/compose/pull/9864)\n*   Fixed intermittent conflict errors when using `depends_on`. Fixes [compose#9014](https://github.com/docker/compose/issues/9014)\n*   Cleared service `CMD` when entry point is overridden. Fixes [compose#9622](https://github.com/docker/compose/issues/9622)\n*   Configured default builder export when no `build.platforms` defined. Fixes [compose#9856](https://github.com/docker/compose/issues/9856)\n*   Fixed a bug to keep the platform defined, in priority, via DOCKER\\_DEFAULT\\_PLATFORM or the `service.platform` attribut. Fixes [compose#9864](https://github.com/docker/compose/issues/9864)\n*   Removed support for `DOCKER_HOST` in `.env` files. Fixes [compose#9210](https://github.com/docker/compose/issues/9210)\n*   Fixed a bug to ensure clean service command if entry point is overridden in run command. Fixes [compose#9622](https://github.com/docker/compose/issues/9622)\n*   Deps: fixed race condition during graph traversal. Fixes [compose#9014](https://github.com/docker/compose/issues/9014)\n*   CI now runs on Windows & macOS including E2E tests via Docker Desktop\n*   Added more information when `service.platform` isn't part of `service.build.platforms`\n*   GitHub Workflows security hardening\n\nFor the full change log or additional information, check the [Compose repository 2.11.2 release page](https://github.com/docker/compose/releases/tag/v2.11.2).\n\n_2022-09-20_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-37)\n\n*   Fixed a bug to keep `depends_on` condition when service has `volumes_from`. Fixes [compose#9843](https://github.com/docker/compose/issues/9843)\n*   Fixed a bug to keep the platform defined at service level during build if no build platforms. Fixes [compose#9729](https://github.com/docker/compose/pull/9729#issuecomment-1246748144)\n*   Fixed a bug to keep the platform defined via DOCKER\\_DEFAULT\\_PLATFORM during build if no build platforms provided. Fixes [compose#9853](https://github.com/docker/compose/issues/9853)\n\nFor the full change log or additional information, check the [Compose repository 2.11.1 release page](https://github.com/docker/compose/releases/tag/v2.11.1).\n\n_2022-09-14_\n\n### [Updates](#updates-6)\n\n*   Dependencies upgrade: bump Golang to 1.19.1\n*   Dependencies upgrade: bump github.com/docker/go-units from 0.4.0 to 0.5.0\n*   Dependencies upgrade: bump github.com/cnabio/cnab-to-oci from 0.3.6 to 0.3.7\n*   Dependencies upgrade: bump go.opentelemetry.io/otel from 1.9.0 to 1.10.0\n*   Dependencies upgrade: bump github.com/AlecAivazis/survey/v2 from 2.3.5\n*   Dependencies upgrade: bump go.opentelemetry.io/otel from 1.4.1 to 1.9.0\n*   Dependencies upgrade: bump compose-go from [1.5.0 to 1.5.1](https://github.com/compose-spec/compose-go/releases/tag/v1.5.1)\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-38)\n\n*   Added platforms build. Fixes [compose-spec#267](https://github.com/compose-spec/compose-spec/pull/267)\n*   Logs now filter to services from current Compose file. Fixes [compose#9801](https://github.com/docker/compose/issues/9801)\n*   Added an improved output warning when pulling images. Fixes [compose#9820](https://github.com/docker/compose/issues/9820)\n*   Fixed a bug to ensure correct capture of exit code when service has dependencies. Fixes [compose#9778](https://github.com/docker/compose/issues/9778)\n*   Fixed `down` with `--rmi`. Fixes [compose#9655](https://github.com/docker/compose/issues/9655)\n*   Fixed docker-compose convert that turns $ into $$ when using the --no-interpolate option. Fixes [compose#9160](https://github.com/docker/compose/issues/9160)\n*   Fixed `build.go` access custom labels directly cause panic. See [compose#9810](https://github.com/docker/compose/pull/9810)\n*   Applied newly loaded envvars to \"DockerCli\" and \"APIClient\". Fixes [compose#9210](https://github.com/docker/compose/issues/9210)\n*   Only attempt to start specified services on `compose start [services]`. Fixes [compose#9796](https://github.com/docker/compose/issues/9796) [compose#9807](https://github.com/docker/compose/issues/9807)\n*   Label built images for reliable cleanup on `down`. Fixes [compose#9655](https://github.com/docker/compose/issues/9655)\n\nFor the full change log or additional information, check the [Compose repository 2.11.0 release page](https://github.com/docker/compose/releases/tag/v2.11.0).\n\n_2022-08-26_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-39)\n\n*   Properly respect `DOCKER_TLS_VERIFY` and `DOCKER_CERT_PATH` environment variables. Fixes [compose#9789](https://github.com/docker/compose/issues/9789).\n*   Improved `Makefile` used in [docker/docker-ce-packaging#742](https://github.com/docker/docker-ce-packaging/pull/742).\n\nFor the full change log or additional information, check the [Compose repository 2.10.2 release page](https://github.com/docker/compose/releases/tag/v2.10.2).\n\n_2022-08-24_\n\n### [Updates](#updates-7)\n\n*   Dependencies update: Bumped github.com/moby/buildkit from [0.10.3 to 0.10.4](https://github.com/moby/buildkit/releases/tag/v0.10.4).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-40)\n\n*   Fixed image pulls being skipped when `pull_policy` was not set. Fixes [compose#9773](https://github.com/docker/compose/issues/9773).\n*   Restored `.sha256` checksum files in release artifacts. Fixes [compose#9772](https://github.com/docker/compose/issues/9772).\n*   Removed error message showing exit code when using --exit-code-from. Fixes [compose#9782](https://github.com/docker/compose/issues/9782).\n*   Fixed `compose pull` to pull images even when they existed locally if `tag=latest`.\n*   CI: Fixed checksums checking and brought back individual checksum files.\n\nFor the full change log or additional information, check the [Compose repository 2.10.1 release page](https://github.com/docker/compose/releases/tag/v2.10.1).\n\n_2022-08-19_\n\n### [New](#new)\n\n*   Applied newly loaded environment variables to `DockerCli` and `APIClient`. Fixes [compose#9210](https://github.com/docker/compose/issues/9210).\n*   Added support for windows/arm64 and linux/riscv64.\n\n### [Updates](#updates-8)\n\n*   Updated Dockerfile syntax to latest stable and renamed docs Dockerfile.\n*   Dependencies update: Upgraded BuildKit & docker/distribution.\n*   Dependencies update: Updated Docker CLI version used in CI to v20.10.17.\n*   Dependencies update: Bumped github.com/containerd/containerd from [1.6.6 to 1.6.7](https://github.com/containerd/containerd/releases/tag/v1.6.7).\n*   Dependencies update: Bump github.com/containerd/containerd from [1.6.7 to 1.6.8](https://github.com/containerd/containerd/releases/tag/v1.6.8).\n*   Dependencies update: Bumped to Go 1.18.5.\n*   Dependencies update: Bumped github.com/cnabio/cnab-to-oci from [0.3.5 to 0.3.6](https://github.com/cnabio/cnab-to-oci/releases/tag/v0.3.6).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-41)\n\n*   Reverted environment variables precedence to OS over `.env` file. Fixes [compose#9737](https://github.com/docker/compose/issues/9737).\n*   Updated usage strings for consistency.\n*   Resolved environment variables case-insensitively on Windows. Fixes [compose#9431](https://github.com/docker/compose/issues/9431).\n*   Fixed `compose up` so dependency containers aren't stopped when a stop signal is issued. This keeps parity with v1 behavior-wise.\n*   Fixes [compose#9696](https://github.com/docker/compose/issues/9696).\n*   Fixed commands that start/restart/pause/unpause so that, if ran from the Compose file, the Compose model is also applied. Fixes [compose#9705](https://github.com/docker/compose/issues/9705) and [compose#9705](https://github.com/docker/compose/issues/9671).\n*   Removed extra whitespaces in help text of some subcommands.\n*   Fixed `compose create` to not override service pull policy when the value from the command line is configured as the default. Fixes [compose#9717](https://github.com/docker/compose/issues/9717).\n*   Filtered out \"commandConn.Close- warning\" message. Fixes [compose#8544](https://github.com/docker/compose/issues/8544).\n*   Fixed up/start/run to not wait for disabled dependency. Fixes [compose#9591](https://github.com/docker/compose/issues/9591).\n*   Applied Compose model on `compose kill`, added `--remove-orphans` option. Fixes [compose#9742](https://github.com/docker/compose/issues/9742).\n*   Fixed `compose pull` to avoid pulling the same images multiple times. Fixes [compose#8768](https://github.com/docker/compose/issues/8768).\n*   Fixed version of golangci-lint to v1.47.3, issue with v1.48.0 for now.\n\nFor the full change log, check the [Compose repository 2.10.0 release page](https://github.com/docker/compose/releases/tag/v2.10.0).\n\n_2022-08-7_\n\n> **Important**\n> \n> Compose v2.9.0 contains changes to the environment variable's precedence that have since been reverted. We recommend using v2.10+ to avoid compatibility issues.\n\n> **Note**\n> \n> This release reverts the breaking changes introduced in [Compose v2.8.0](#280) by [`compose-go v1.3.0`](https://github.com/compose-spec/compose-go/releases/tag/v1.3.0).\n\n### [Updates](#updates-9)\n\n*   Updated [`compose-go` to v1.4.0](https://github.com/compose-spec/compose-go/releases/tag/v1.4.0) as previous version introduced breaking changes. Fixes [compose#9700](https://github.com/docker/compose/issues/9700).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-42)\n\n*   Overwritten parent commands PreRun code for `compose version`. Fixes [compose#9698](https://github.com/docker/compose/issues/9698).\n*   Fixed `LinkLocalIPs` in V2. Fixes [compose#9692](https://github.com/docker/compose/issues/9692).\n*   Linked to `BUILDING.md` for testing instructions. Fixes [compose#9439](https://github.com/docker/compose/issues/9439).\n\nFor the full change log or additional information, check the [Compose repository 2.9.0 release page](https://github.com/docker/compose/releases/tag/v2.9.0).\n\n_2022-07-29_\n\n> **Important**\n> \n> This release introduced a breaking change via `compose-go v1.3.0` and this [PR](https://github.com/compose-spec/compose-go/pull/294). In this release, Docker Compose recreates new resources (networks, volumes, secrets, configs, etc.) with new names, using a `-` (dash) instead an `_` (underscore) and tries to connect to or use these newly created resources instead of your existing ones!\n> \n> Please use Compose the v2.9.0 release instead.\n\n### [New](#new-1)\n\n*   Introduced `--pull` flag to allow the force pull of updated service images. Fixes [compose#9451](https://github.com/docker/compose/issues/9451).\n*   Increased code quality by adding `gocritic` to the linters.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-43)\n\n*   Fixed interpolation error message output. Fixes [compose-spec/compose-go#292](https://github.com/compose-spec/compose-go/pull/292).\n*   Defined precedence of the environment variables evaluation. Fixes [compose#9521](https://github.com/docker/compose/issues/9606), [compose#9638](https://github.com/docker/compose/issues/9638), [compose#9608](https://github.com/docker/compose/issues/9608), [compose#9578](https://github.com/docker/compose/issues/9578). [compose#9468](https://github.com/docker/compose/issues/9468), and [compose#9683](https://github.com/docker/compose/issues/9468).\n*   Docs CI: Fixed to use push-to-fork when creating a PR.\n*   Used environmental variable for golang's version and updates GitHub Actions from v2 to v3.\n*   Used [google/addlicense](https://github.com/google/addlicense) instead of [kunalkushwaha/ltag](https://github.com/kunalkushwaha/ltag).\n\nFor the full change log or additional information, check the [Compose repository 2.8.0 release page](https://github.com/docker/compose/releases/tag/v2.8.0).\n\n_2022-07-20_\n\n### [New](#new-2)\n\n*   Added support for environment secrets during build step. Fixes [compose#9606](https://github.com/docker/compose/issues/9606).\n\n### [Updates](#updates-10)\n\n*   Dependencies upgrade: bumped [go to 1.18.4](https://github.com/golang/go/compare/go1.18.3...go1.18.4).\n*   Dependencies upgrade: bumped [compose-go to v1.2.9](https://github.com/compose-spec/compose-go/releases/tag/v1.2.9).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-44)\n\n*   Networks: prevented issues due to duplicate names. Fixes [moby/moby#18864](https://github.com/moby/moby/issues/18864).\n*   Fixed issue with close networks name on `compose up` and `compose down` commands. Fixes [compose#9630](https://github.com/docker/compose/issues/9044).\n*   Used appropriate dependency condition for one-shot containers when running `compose up --wait`. Fixes [compose#9606](https://github.com/docker/compose/pull/9572).\n*   Fixed environment variable expansion.\n*   Validated depended-on services exist in consistency check. Fixes [compose#8910](https://github.com/docker/compose/issues/8910).\n*   Fixed hash usage in environment values. Fixes [compose#9509](https://github.com/docker/compose/issues/9509).\n*   Docker Build: added fix to respect dependency order for classic builder. Fixes [compose#8538](https://github.com/docker/compose/issues/8538).\n*   Fixed panic caused by empty string argument. Fixes [compose-switch#35](https://github.com/docker/compose-switch/issues/35).\n*   Fixed start/restart as to not impact one-off containers. Fixes [compose#9509](https://github.com/docker/compose/issues/9044).\n*   Fixed to keep the container reference when `volumes_from` targets a container and not a service. Fixes [compose#8874](https://github.com/docker/compose/issues/8874).\n*   build.go: added fix to initialize `CustomLabels` map if `nil`.\n*   Added new targets to build Compose binary before running e2e tests.\n*   CI: released workflow to open a PR on docs repo with latest changes.\n*   e2e: added test for `ps`.\n*   e2e: split out pause tests and add more cases.\n*   e2e: add more start/stop test cases.\n\nFor the full change log or additional information, check the [Compose repository 2.7.0 release page](https://github.com/docker/compose/releases/tag/v2.7.0).\n\n_2022-06-23_\n\n### [New](#new-3)\n\n*   Added support for setting secrets from environment variable. Fixes [compose-spec/compose-spec#251](https://github.com/compose-spec/compose-spec/issues/251).\n\n### [Updates](#updates-11)\n\n*   Upgrade: compose-go [v1.2.8](https://github.com/compose-spec/compose-go/releases/tag/v1.2.8).\n*   Upgrade: buildx [v0.8.2](https://github.com/docker/buildx/releases/tag/v0.8.2).\n*   Dependencies upgrade: bumped runc [to 1.1.2](https://github.com/opencontainers/runc/releases/tag/v1.1.2).\n*   Dependencies upgrade: bumped golang to [1.18.3](https://go.dev/doc/devel/release#go1.18.minor).\n*   Dependencies upgrade: bumped compose-go to [v1.2.8](https://github.com/compose-spec/compose-go/releases/tag/v1.2.8).\n*   Dependencies upgrade: bumped github.com/theupdateframework/notary from 0.6.1 to 0.7.0.\n*   Dependencies upgrade: bumped github.com/cnabio/cnab-to-oci from 0.3.1-beta1 to 0.3.3.\n*   Dependencies upgrade: bumped github.com/hashicorp/go-version from 1.3.0 to 1.5.0.\n*   Dependencies upgrade: bumped github.com/stretchr/testify from 1.7.0 to 1.7.2.\n*   Dependencies upgrade: bumped github.com/docker/buildx from 0.8.1 to 0.8.2.\n*   Dependencies upgrade: bumped github.com/AlecAivazis/survey/v2 from 2.3.2 to 2.3.5.\n*   Dependencies upgrade: bumped github.com/containerd/containerd from 1.6.2 to 1.6.6.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-45)\n\n*   Added links to container create request. Fixes [#9513](https://github.com/docker/compose/issues/9513).\n*   Fixed `compose run` to start only direct dependencies. Fixes [#9459](https://github.com/docker/compose/issues/9459).\n*   Fixed `compose up` 'service not found' errors when using `--no-deps` option. Fixes [#9427](https://github.com/docker/compose/issues/9427).\n*   Fixed `compose down` to respect `COMPOSE_REMOVE_ORPHANS` environment variable. Fixes [#9562](https://github.com/docker/compose/issues/9562).\n*   Fixed project-level bind mount volumes. Fixes [docker/for-mac#6317](https://github.com/docker/for-mac/issues/6317).\n*   Fixed parsing of properties `deploy.limits.cpus` and `deploy.limits.pids` to respect floating-point values. Fixes [#9542](https://github.com/docker/compose/issues/9542) and [#9501](https://github.com/docker/compose/issues/9501).\n*   Fixed `compose ps` output to list all exposed ports. Fixes [#9257](https://github.com/docker/compose/issues/9527).\n*   Fixed spelling mistakes in `compose ps` code.\n*   Fixed `docker compose` to honor `--no-ansi` even when deprecated option is requested.\n*   Fixed network name and network ID possible ambiguity.\n*   e2e: added test for `ps`.\n*   e2e: unmarshalled json into container summaries.\n*   e2e: fixed subtests and block parallel unsafe tests.\n*   e2e: isolated test command env from system env.\n*   e2e: fixed spurious `ps` failures.\n*   e2e: ensured all compose commands standalone compatible.\n*   e2e: improved test output on failures.\n\nFor the full change log or additional information, check the [Compose repository 2.6.1 release page](https://github.com/docker/compose/releases/tag/v2.6.1).\n\n_2022-05-30_\n\n### [New](#new-4)\n\n*   Added the tags property to the build section. In this property tags can be defined to be applied to the final image, in addition to the one defined in the image property.\n*   Added end-to-end tests to ensure there is no regression on environment variables precedence.\n*   Added ddev's end-to-end test.\n\n### [Updates](#updates-12)\n\n*   Dependencies update: bumping [compose-go to 1.2.6](https://github.com/compose-spec/compose-go/releases/tag/v1.2.6).\n*   Dependencies update: bumping [compose-go to 1.2.7](https://github.com/compose-spec/compose-go/releases/tag/v1.2.7).\n*   Dependencies update: bumping [golang to 1.18](https://go.dev/doc/devel/release#go1.18).\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-46)\n\n*   Fixed `compose up` to attach only to services declared in project with enabled profiles. Fixes [#9286](https://github.com/docker/compose/issues/9286).\n*   Fixed flickering prompt when pulling same image from multiple services. Fixes [#9469](https://github.com/docker/compose/issues/9469).\n*   Fixed compose go to import .env file to OS environment to allow setting variables (such as DOCKER\\_BUILDKIT) through this file. Fixes [#9345](https://github.com/docker/compose/issues/9345).\n*   Fixed `TestLocalComposeUp` that failed locally.\n*   Fixed local run of make `e2e-compose-standalone`.\n\nFor the full change log or additional information, check the [Compose repository 2.6.0 release page](https://github.com/docker/compose/releases/tag/v2.6.0).\n\n_2022-05-17_\n\n### [Updates](#updates-13)\n\n*   Dependencies updates: bumping compose-go to 1.2.5.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-47)\n\n*   Fixed resolution of project's working directive absolute path when a relative path is declared using '--env-file'. Fixes [docker/for-mac#6229](https://github.com/docker/for-mac/issues/6229).\n*   Fixed `compose down`: now rejects all arguments in order to clarify usage. Fixes [#9151](https://github.com/docker/compose/issues/9151).\n*   Fixed `compose down`: now exits with status=0 if there is nothing to remove. Fixes [#9426](https://github.com/docker/compose/issues/9426).\n*   Fixed extra space printed in logs output lines with --no-log-prefix option. Fixes [#9464](https://github.com/docker/compose/issues/9464).\n*   Clarified what the default work dir is when multiple compose files are passed.\n*   cp command: copy to all containers of a service as default behavior.\n\nFor the full change log or additional information, check the [Compose repository 2.5.1 release page](https://github.com/docker/compose/releases/tag/v2.5.1).\n\n_2022-04-29_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-48)\n\n*   Fixed panic with `compose down` command when `-p` flag specified. Fixes [#9353](https://github.com/docker/compose/issues/9353).\n*   Passed newly created project as input to start services (`docker compose up`). Fixes [#9356](https://github.com/docker/compose/issues/9356).\n*   Included services declared under links in docker-compose file as implicit dependencies. Fixes [#9301](https://github.com/docker/compose/issues/9301).\n*   Added changes `docker compose pull` command to respect defined policy: 1) skip services configured as `pull_policy: never` and 2) ignore those with an existing image and `pull_policy: missing`. Fixes [#3660](https://github.com/docker/compose/issues/3660).\n*   Error building project from resources is no longer ignored in order to prevent `down` panic. Fixes [#9383](https://github.com/docker/compose/issues/9383).\n*   Enforced project name to be lowercase. Fixes [#9378](https://github.com/docker/compose/issues/9378).\n*   Added support to build-time secrets. Fixes [#6358](https://github.com/docker/compose/issues/6358).\n*   Changed `compose-go` to allow (re)building volume string to be used by engine `bind` API when mount can't be used. Fixes [#9380](https://github.com/docker/compose/issues/9380).\n*   Provided checksums.txt file and added `--binary` to allow verification in different OS. Fixes [#9388](https://github.com/docker/compose/issues/9388).\n*   Added changes so locally pulled image's ID is inspected and persisted to `com.docker.compose.image`. Fixes [#9357](https://github.com/docker/compose/issues/9357).\n*   Fixed issue regarding IPAM gateway setup. Fixes [#9330](https://github.com/docker/compose/issues/9330).\n*   Added support for ppc64le archictecture for docker compose binary.\n*   Fixed search/replace typo in `--no-TTY` documentation.\n\nFor the full change log or additional information, check the [Compose repository 2.5.0 release page](https://github.com/docker/compose/releases/tag/v2.5.0).\n\n_2022-04-04_\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-49)\n\n*   Passed the `--rm flag` value as is to the Docker CLI when running a container with this flag. Fixes [#9314](https://github.com/docker/compose/issues/9314).\n*   Added ssh config to the build options when building an image from a `docker compose up` command. Fixes [#9338](https://github.com/docker/compose/issues/9338).\n*   Added inspection to container checking if a TTY is required. Running services with `tty:true` specified now show console output. Fixes [#9288](https://github.com/docker/compose/issues/9288).\n\nFor the full change log or additional information, check the [Compose repository 2.4.1 release page](https://github.com/docker/compose/releases/tag/v2.4.1).\n\n_2022-04-1_\n\n### [Updates](#updates-14)\n\n*   Dependencies update: Bumped buildx to v0.8.1. to fix possible panic on handling build context scanning errors.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-50)\n\n*   Passed the interactive flag '-i' from the Compose CLI to the Docker one to run exec command. Fixes [#9315](https://github.com/docker/compose/issues/9315).\n*   Compose commands now take the value of `COMPOSE_PROJECT_NAME` environmental variable into consideration. Fixes [#9316](https://github.com/docker/compose/issues/9316).\n*   Fixed issue of `compose down` command that when executed in contexts without any services started or resources to be deleted was returning an error. Error was due to command trying to delete an inexistent default network. Fixes [#9333](https://github.com/docker/compose/issues/9333).\n*   Introduced support for `cache_from`, `cache_to`, `no_cache` and `pull` attributes in the build section. These attributes allow forcing a complete rebuild from sources and checking with registry for images used. These changes provide the basis for offering `--no-cache` and `--pull` options for compose build (or equivalent) command down the line.\n*   Introduced support of an `--ssh` flag for the `build` command from CLI and Compose file. Fixes [#7025](https://github.com/docker/compose/issues/7025).\n*   Fixed typo in `--ssh` flag description. Related to [#7025](https://github.com/docker/compose/issues/7025).\n*   Pinned Kubernetes dependencies to the same version as in buildx.\n*   Passed the interactive flag from the Compose CLI to the Docker one to run exec command.\n*   Fixed race condition on start-stop end-to-end tests running in parallel.\n*   Removed code regarding an obsolete warning.\n*   Vendor: github.com/containerd/containerd v1.6.2. Includes a fix for CVE-2022-24769 (doesn't affect our codebase).\n\nFor the full change log or additional information, check the [Compose repository 2.4.0 release page](https://github.com/docker/compose/releases/tag/v2.4.0).\n\n_2022-03-25_\n\n### [New](#new-5)\n\n*   Introduced changes to use RunExec and RunStart from docker/cli to handle all the interactive/tty/\\* terminal logic.\n\n### [Removed](#removed)\n\n*   Removed a container with no candidate now produces a warning instead of an error. Fixes [#9255](https://github.com/docker/compose/issues/9255).\n*   Removed the \"Deprecated\" mentions from -i and -t options to run and exec commands. These options are on by default and in use. Fixes [#9229](https://github.com/docker/compose/pull/9229#discussion_r819730788).\n*   Removed the \"Deprecated\" mention from the --filter flag, to keep consistency with other commands.\n*   Removed the need to get the original compose.yaml file to run 'docker compose kill'.\n\n### [Updates](#updates-15)\n\n*   Dependencies update: Bumped github.com/spf13/cobra from 1.3.0 to 1.4.0. Cobra library no longer requires Viper and all of its indirect dependencies [See cobra's release page](https://github.com/spf13/cobra/releases).\n*   Dependencies update: Bumped buildx from v0.7.1 to v0.8.0.\n\n### [Bug fixes and enhancements](#bug-fixes-and-enhancements-51)\n\n*   Recovered behavior for 'compose up -d' of recreating containers of compose file images with refreshed content. Fixes [#9259](https://github.com/docker/compose/issues/9259).\n*   Docker compose --status, --filter and --format flags documentation updates.\n*   `docker compose down -v` now does not remove external volumes and networks as per the option's expected and documented behavior. Whenever project is specified it is also now used to enforce down to only remove resources listed in compose.yaml file. Fixes [#9172](https://github.com/docker/compose/issues/9172), [#9145](https://github.com/docker/compose/issues/9145).\n*   Changed Compose API reference docs automation to pick up diffs code vs. docs.\n\nFor the full change log or additional information, check the [Compose repository 2.3.4 release page](https://github.com/docker/compose/releases/tag/v2.3.4).\n\n(2022-03-8 to 2022-04-14)\n\nFor the releases later than 1.29.2 and earlier than 2.3.4, please check the [Compose repository release pages](https://github.com/docker/compose/releases).\n\n(2021-05-10)\n\n### [Miscellaneous](#miscellaneous)\n\n*   Removed the prompt to use `docker-compose` in the `up` command.\n    \n*   Bumped `py` to `1.10.0` in `requirements-indirect.txt`.\n    \n\n(2021-04-13)\n\n### [Bugs](#bugs)\n\n*   Fixed invalid handler warning on Windows builds.\n    \n*   Fixed config hash to trigger container re-creation on IPC mode updates.\n    \n*   Fixed conversion map for `placement.max_replicas_per_node`.\n    \n*   Removed extra scan suggestion on build.\n    \n\n(2021-04-06)\n\n### [Features](#features)\n\n*   Added profile filter to `docker-compose config`.\n    \n*   Added a `depends_on` condition to wait for successful service completion.\n    \n\n### [Miscellaneous](#miscellaneous-1)\n\n*   Added an image scan message on build.\n    \n*   Updated warning message for `--no-ansi` to mention `--ansi never` as alternative.\n    \n*   Bumped docker-py to 5.0.0.\n    \n*   Bumped PyYAML to 5.4.1.\n    \n*   Bumped python-dotenv to 0.17.0.\n    \n\n(2021-03-23)\n\n### [Bug fixes](#bug-fixes)\n\n*   Made `--env-file` relative to the current working directory. Environment file paths set with `--env-file` are now relative to the current working directory and override the default `.env` file located in the project directory.\n    \n*   Fixed missing service property `storage_opt` by updating the Compose schema.\n    \n*   Fixed build `extra_hosts` list format.\n    \n*   Removed additional error message on `exec`.\n    \n\n### [Miscellaneous](#miscellaneous-2)\n\n*   Added `compose.yml` and `compose.yaml` to the default filename list.\n\n(2021-02-26)\n\n### [Bugs](#bugs-1)\n\n*   Fixed the OpenSSL version mismatch error when shelling out to the SSH client (via bump to docker-py 4.4.4 which contains the fix).\n    \n*   Added missing build flags to the native builder: `platform`, `isolation` and `extra_hosts`.\n    \n*   Removed info message on native build.\n    \n*   Fixed the log fetching bug when service logging driver is set to 'none'.\n    \n\n(2021-02-18)\n\n### [Bug fixes](#bug-fixes-1)\n\n*   Fixed SSH port parsing by bumping docker-py to 4.4.3.\n\n### [Miscellaneous](#miscellaneous-3)\n\n*   Bumped Python to 3.7.10.\n\n(2021-02-17)\n\n### [Bug fixes](#bug-fixes-2)\n\n*   Fixed SSH hostname parsing when it contains a leading 's'/'h', and removed the quiet option that was hiding the error (via docker-py bump to 4.4.2).\n    \n*   Fixed key error for `--no-log-prefix` option.\n    \n*   Fixed incorrect CLI environment variable name for service profiles: `COMPOSE_PROFILES` instead of `COMPOSE_PROFILE`.\n    \n*   Fixed the fish completion.\n    \n\n### [Miscellaneous](#miscellaneous-4)\n\n*   Bumped cryptography to 3.3.2.\n    \n*   Removed the log driver filter.\n    \n\nFor a list of PRs and issues fixed in this release, see [Compose 1.28.3](https://github.com/docker/compose/milestone/53?closed=1).\n\n(2021-01-26)\n\n### [Bug fixes](#bug-fixes-3)\n\n*   Revert to Python 3.7 bump for Linux static builds\n    \n*   Add bash completion for `docker-compose logs|up --no-log-prefix`\n    \n\n### [Miscellaneous](#miscellaneous-5)\n\n*   CI setup update\n\n(2021-01-20)\n\n### [Features](#features-1)\n\n*   Added support for NVIDIA GPUs through device requests.\n    \n*   Added support for service profiles.\n    \n*   Changed the SSH connection approach to the Docker CLI by shelling out to the local SSH client. Set the `COMPOSE_PARAMIKO_SSH=1` environment variable to enable the old behavior.\n    \n*   Added a flag to disable log prefix.\n    \n*   Added a flag for ANSI output control.\n    \n*   Docker Compose now uses the native Docker CLI's `build` command when building images. Set the `COMPOSE_DOCKER_CLI_BUILD=0` environment variable to disable this feature.\n    \n\n### [Bug fixes](#bug-fixes-4)\n\n*   Made `parallel_pull=True` by default.\n    \n*   Restored the warning for configs in non-swarm mode.\n    \n*   Took `--file` into account when defining `project_dir`.\n    \n*   Fixed a service attach bug on `compose up`.\n    \n\n### [Miscellaneous](#miscellaneous-6)\n\n*   Added usage metrics.\n    \n*   Synced schema with COMPOSE specification.\n    \n*   Improved failure report for missing mandatory environment variables.\n    \n*   Bumped `attrs` to 20.3.0.\n    \n*   Bumped `more_itertools` to 8.6.0.\n    \n*   Bumped `cryptograhy` to 3.2.1.\n    \n*   Bumped `cffi` to 1.14.4.\n    \n*   Bumped `virtualenv` to 20.2.2.\n    \n*   Bumped `bcrypt` to 3.2.0.\n    \n*   Bumped GitPython to 3.1.11.\n    \n*   Bumped `docker-py` to 4.4.1.\n    \n*   Bumped Python to 3.9.\n    \n*   Linux: bumped Debian base image from stretch to buster (required for Python 3.9).\n    \n*   macOS: Bumped OpenSSL 1.1.1g to 1.1.1h, and Python 3.7.7 to 3.9.0.\n    \n*   Bumped PyInstaller to 4.1.\n    \n*   Relaxed the restriction on base images to latest minor.\n    \n*   Updated READMEs.\n    \n\n(2020-09-24)\n\n### [Bug fixes](#bug-fixes-5)\n\n*   Removed path checks for bind mounts.\n    \n*   Fixed port rendering to output long form syntax for non-v1.\n    \n*   Added protocol to the Docker socket address.\n    \n\n(2020-09-16)\n\n### [Bug fixes](#bug-fixes-6)\n\n*   Merged `max_replicas_per_node` on `docker-compose config`.\n    \n*   Fixed `depends_on` serialization on `docker-compose config`.\n    \n*   Fixed scaling when some containers are not running on `docker-compose up`.\n    \n*   Enabled relative paths for `driver_opts.device` for `local` driver.\n    \n*   Allowed strings for `cpus` fields.\n    \n\n(2020-09-10)\n\n### [Bug fixes](#bug-fixes-7)\n\n*   Fixed bug on `docker-compose run` container attach.\n\n(2020-09-10)\n\n### [Bug fixes](#bug-fixes-8)\n\n*   Fixed `docker-compose run` when `service.scale` is specified.\n    \n*   Allowed the `driver` property for external networks as a temporary workaround for the Swarm network propagation issue.\n    \n*   Pinned the new internal schema version to `3.9` as the default.\n    \n*   Preserved the version number configured in the Compose file.\n    \n\n(2020-09-07)\n\n### [Features](#features-2)\n\n*   Merged 2.x and 3.x Compose formats and aligned with `COMPOSE_SPEC` schema.\n    \n*   Implemented service mode for `ipc`.\n    \n*   Passed `COMPOSE_PROJECT_NAME` environment variable in container mode.\n    \n*   Made `run` behave in the same way as `up`.\n    \n*   Used `docker build` on `docker-compose run` when `COMPOSE_DOCKER_CLI_BUILD` environment variable is set.\n    \n*   Used the docker-py default API version for engine queries (`auto`).\n    \n*   Parsed `network_mode` on build.\n    \n\n### [Bug fixes](#bug-fixes-9)\n\n*   Ignored build context path validation when building is not required.\n    \n*   Fixed float to bytes conversion via docker-py bump to 4.3.1.\n    \n*   Fixed the scale bug when the deploy section is set.\n    \n*   Fixed `docker-py` bump in `setup.py`.\n    \n*   Fixed experimental build failure detection.\n    \n*   Fixed context propagation to the Docker CLI.\n    \n\n### [Miscellaneous](#miscellaneous-7)\n\n*   Bumped `docker-py` to 4.3.1.\n    \n*   Bumped `tox` to 3.19.0.\n    \n*   Bumped `virtualenv` to 20.0.30.\n    \n*   Added script for Docs synchronization.\n    \n\n(2020-07-02)\n\n### [Bug fixes](#bug-fixes-10)\n\n*   Enforced `docker-py` 4.2.2 as minimum version when installing with pip.\n\n(2020-06-30)\n\n### [Features](#features-3)\n\n*   Bumped `docker-py` from 4.2.1 to 4.2.2.\n\n### [Bug fixes](#bug-fixes-11)\n\n*   Enforced `docker-py` 4.2.1 as minimum version when installing with pip.\n    \n*   Fixed context load for non-docker endpoints.\n    \n\n(2020-06-03)\n\n### [Features](#features-4)\n\n*   Added `docker context` support.\n    \n*   Added missing test dependency `ddt` to `setup.py`.\n    \n*   Added `--attach-dependencies` to command `up` for attaching to dependencies.\n    \n*   Allowed compatibility option with `COMPOSE_COMPATIBILITY` environment variable.\n    \n*   Bumped `Pytest` to 5.3.4 and add refactor compatibility with the new version.\n    \n*   Bumped `OpenSSL` from 1.1.1f to 1.1.1g.\n    \n*   Bumped `certifi` from 2019.11.28 to 2020.4.5.1.\n    \n*   Bumped `docker-py` from 4.2.0 to 4.2.1.\n    \n\n### [Bug fixes](#bug-fixes-12)\n\n*   Properly escaped values coming from `env_files`.\n    \n*   Synchronized compose-schemas with upstream (docker/cli).\n    \n*   Removed `None` entries on exec command.\n    \n*   Added `distro` package to get distro information.\n    \n*   Added `python-dotenv` to delegate `.env` file processing.\n    \n*   Stopped adjusting output on terminal width when piped into another command.\n    \n*   Showed an error message when `version` attribute is malformed.\n    \n*   Fixed HTTPS connection when `DOCKER_HOST` is remote.\n    \n\n(2020-04-10)\n\n### [Features](#features-5)\n\n*   Bumped OpenSSL from 1.1.1d to 1.1.1f.\n    \n*   Added Compose version 3.8.\n    \n    *   Limited service scale to the size specified by the field `deploy.placement.max_replicas_per_node`.\n\n(2020-02-03)\n\n### [Bug fixes](#bug-fixes-13)\n\n*   Fixed the CI script to enforce the minimal MacOS version to 10.11.\n    \n*   Fixed docker-compose exec for keys with no value on environment files.\n    \n\n(2020-01-23)\n\n### [Bug fixes](#bug-fixes-14)\n\n*   Fixed the CI script to enforce the compilation with Python3.\n    \n*   Updated the binary's sha256 on the release page.\n    \n\n(2020-01-20)\n\n### [New features](#new-features)\n\n*   Docker Compose now allows the compatibility option with `COMPOSE_COMPATIBILITY` environment variable.\n\n### [Bug fixes](#bug-fixes-15)\n\n*   Fixed an issue that caused Docker Compose to crash when the `version` field was set to an invalid value. Docker Compose now displays an error message when invalid values are used in the version field.\n    \n*   Fixed an issue that caused Docker Compose to render messages incorrectly when running commands outside a terminal.\n    \n\n(2020-01-06)\n\n### [Bugfixes](#bugfixes)\n\n*   Decoded the `APIError` explanation to Unicode before using it to create and start a container.\n    \n*   Docker Compose discards `com.docker.compose.filepaths` labels that have `None` as value. This usually occurs when labels originate from stdin.\n    \n*   Added OS X binary as a directory to solve slow start up time issues caused by macOS Catalina binary scan.\n    \n*   Passed the `HOME` environment variable in container mode when running with `script/run/run.sh`.\n    \n*   Docker Compose now reports images that cannot be pulled, however, are required to be built.\n    \n\n(2019-11-18)\n\n### [New features](#new-features-1)\n\n*   Set no-colors to true by changing `CLICOLOR` env variable to `0`.\n    \n*   Added working directory, config files, and env file to service labels.\n    \n*   Added ARM build dependencies.\n    \n*   Added BuildKit support (use `DOCKER_BUILDKIT=1` and `COMPOSE_DOCKER_CLI_BUILD=1`).\n    \n*   Raised Paramiko to version 2.6.0.\n    \n*   Added the following tags: `docker-compose:latest`, `docker-compose:<version>-alpine`, and `docker-compose:<version>-debian`.\n    \n*   Raised `docker-py` to version 4.1.0.\n    \n*   Enhanced support for `requests`, up to version 2.22.0.\n    \n*   Removed empty tag on `build:cache_from`.\n    \n*   `Dockerfile` enhancement that provides for the generation of `libmusl` binaries for Alpine Linux.\n    \n*   Pulling only of images that cannot be built.\n    \n*   The `scale` attribute now accepts `0` as a value.\n    \n*   Added a `--quiet` option and a `--no-rm` option to the `docker-compose build` command.\n    \n*   Added a `--no-interpolate` option to the `docker-compose config` command.\n    \n*   Raised OpenSSL for MacOS build from `1.1.0` to `1.1.1c`.\n    \n*   Added support for the `docker-compose.yml` file's `credential_spec` configuration option.\n    \n*   Resolution of digests without having to pull the image.\n    \n*   Upgraded `pyyaml` to version `4.2b1`.\n    \n*   Lowered the severity to `warning` for instances in which `down` attempts to remove a non-existent image.\n    \n*   Mandated the use of improved API fields for project events, when possible.\n    \n*   Updated `setup.py` for modern `pypi/setuptools`, and removed `pandoc` dependencies.\n    \n*   Removed `Dockerfile.armhf`, which is no longer required.\n    \n\n### [Bug fixes](#bug-fixes-16)\n\n*   Made container service color deterministic, including the removal of the color red.\n    \n*   Fixed non-ASCII character errors (Python 2 only).\n    \n*   Changed image sizing to decimal format, to align with Docker CLI.\n    \n*   `tty` size acquired through Python POSIX support.\n    \n*   Fixed same file `extends` optimization.\n    \n*   Fixed `stdin_open`.\n    \n*   Fixed the issue of `--remove-orphans` being ignored encountered during use with `up --no-start` option.\n    \n*   Fixed `docker-compose ps --all` command.\n    \n*   Fixed the `depends_on` dependency recreation behavior.\n    \n*   Fixed bash completion for the `docker-compose build --memory` command.\n    \n*   Fixed the misleading environmental variables warning that occurs when the `docker-compose exec` command is performed.\n    \n*   Fixed the failure check in the `parallel_execute_watch function`.\n    \n*   Fixed the race condition that occurs following the pulling of an image.\n    \n*   Fixed error on duplicate mount points (a configuration error message now displays).\n    \n*   Fixed the merge on `networks` section.\n    \n*   Compose container is always connected to `stdin` by default.\n    \n*   Fixed the presentation of failed services on the `docker-compose start` command when containers are not available.\n    \n\n(2019-06-24)\n\nThis release contains minor improvements and bug fixes.\n\n(2019-03-28)\n\n### [Features](#features-6)\n\n*   Added support for connecting to the Docker Engine using the `ssh` protocol.\n    \n*   Added an `--all` flag to `docker-compose ps` to include stopped one-off containers in the command's output.\n    \n*   Added bash completion for `ps --all|-a`.\n    \n*   Added support for credential\\_spec.\n    \n*   Added `--parallel` to `docker build`'s options in `bash` and `zsh` completion.\n    \n\n### [Bug fixes](#bug-fixes-17)\n\n*   Fixed a bug where some valid credential helpers weren't properly handled by Compose when attempting to pull images from private registries.\n    \n*   Fixed an issue where the output of `docker-compose start` before containers were created was misleading.\n    \n*   Compose will no longer accept whitespace in variable names sourced from environment files. This matches the Docker CLI behavior.\n    \n*   Compose will now report a configuration error if a service attempts to declare duplicate mount points in the volumes section.\n    \n*   Fixed an issue with the containerized version of Compose that prevented users from writing to stdin during interactive sessions started by `run` or `exec`.\n    \n*   One-off containers started by `run` no longer adopt the restart policy of the service, and are instead set to never restart.\n    \n*   Fixed an issue that caused some container events to not appear in the output of the `docker-compose events` command.\n    \n*   Missing images will no longer stop the execution of `docker-compose down` commands. A warning is now displayed instead.\n    \n*   Force `virtualenv` version for macOS CI.\n    \n*   Fixed merging of Compose files when network has `None` config.\n    \n*   Fixed `CTRL+C` issues by enabling `bootloader_ignore_signals` in `pyinstaller`.\n    \n*   Bumped `docker-py` version to `3.7.2` to fix SSH and proxy configuration issues.\n    \n*   Fixed release script and some typos on release documentation.\n    \n\n(2018-11-28)\n\n### [Bug fixes](#bug-fixes-18)\n\n*   Reverted a 1.23.0 change that appended random strings to container names created by `docker-compose up`, causing addressability issues.\n    \n    > **Note**: Containers created by `docker-compose run` will continue to use randomly generated names to avoid collisions during parallel runs.\n    \n*   Fixed an issue where some `dockerfile` paths would fail unexpectedly when attempting to build on Windows.\n    \n*   Fixed a bug where build context URLs would fail to build on Windows.\n    \n*   Fixed a bug that caused `run` and `exec` commands to fail for some otherwise accepted values of the `--host` parameter.\n    \n*   Fixed an issue where overrides for the `storage_opt` and `isolation` keys in service definitions weren't properly applied.\n    \n*   Fixed a bug where some invalid Compose files would raise an uncaught exception during validation.\n    \n\n(2018-11-01)\n\n### [Bug fixes](#bug-fixes-19)\n\n*   Fixed a bug where working with containers created with a version of Compose earlier than `1.23.0` would cause unexpected crashes.\n    \n*   Fixed an issue where the behavior of the `--project-directory` flag would vary depending on which subcommand was used.\n    \n\n(2018-10-30)\n\n### [Important note](#important-note)\n\nThe default naming scheme for containers created by Compose in this version has changed from `<project>_<service>_<index>` to `<project>_<service>_<index>_<slug>`, where `<slug>` is a randomly-generated hexadecimal string. Please make sure to update scripts relying on the old naming scheme accordingly before upgrading.\n\n### [Features](#features-7)\n\n*   Logs for containers restarting after a crash will now appear in the output of the `up` and `logs` commands.\n    \n*   Added `--hash` option to the `docker-compose config` command, allowing users to print a hash string for each service's configuration to facilitate rolling updates.\n    \n*   Added `--parallel` flag to the `docker-compose build` command, allowing Compose to build up to 5 images simultaneously.\n    \n*   Output for the `pull` command now reports status / progress even when pulling multiple images in parallel.\n    \n*   For images with multiple names, Compose will now attempt to match the one present in the service configuration in the output of the `images` command.\n    \n\n### [Bug fixes](#bug-fixes-20)\n\n*   Fixed an issue where parallel `run` commands for the same service would fail due to name collisions.\n    \n*   Fixed an issue where paths longer than 260 characters on Windows clients would cause `docker-compose build` to fail.\n    \n*   Fixed a bug where attempting to mount `/var/run/docker.sock` with Docker Desktop for Windows would result in failure.\n    \n*   The `--project-directory` option is now used by Compose to determine where to look for the `.env` file.\n    \n*   `docker-compose build` no longer fails when attempting to pull an image with credentials provided by the _**gcloud credential helper**_.\n    \n*   Fixed the `--exit-code-from` option in `docker-compose up` to always report the actual exit code even when the watched container is not the cause of the exit.\n    \n*   Fixed an issue that would prevent recreating a service in some cases where a volume would be mapped to the same mountpoint as a volume declared within the Dockerfile for that image.\n    \n*   Fixed a bug that caused hash configuration with multiple networks to be inconsistent, causing some services to be unnecessarily restarted.\n    \n*   Fixed a bug that would cause failures with variable substitution for services with a name containing one or more dot characters.\n    \n*   Fixed a pipe handling issue when using the containerized version of Compose.\n    \n*   Fixed a bug causing `external: false` entries in the Compose file to be printed as `external: true` in the output of `docker-compose config`.\n    \n*   Fixed a bug where issuing a `docker-compose pull` command on services without a defined image key would cause Compose to crash.\n    \n*   Volumes and binds are now mounted in the order they are declared in the service definition.\n    \n\n### [Miscellaneous](#miscellaneous-8)\n\n*   The `zsh` completion script has been updated with new options, and no longer suggests container names where service names are expected.\n\n(2018-07-17)\n\n### [New features](#new-features-2)\n\n#### [Compose format version 3.7](#compose-format-version-37)\n\n*   Introduced version 3.7 of the `docker-compose.yml` specification. This version requires Docker Engine 18.06.0 or above.\n    \n*   Added support for `rollback_config` in the deploy configuration\n    \n*   Added support for the `init` parameter in service configurations\n    \n*   Added support for extension fields in service, network, volume, secret, and config configurations\n    \n\n#### [Compose format version 2.4](#compose-format-version-24)\n\n*   Added support for extension fields in service, network, and volume configurations\n\n### [Bug fixes](#bug-fixes-21)\n\n*   Fixed a bug that prevented deployment with some Compose files when `DOCKER_DEFAULT_PLATFORM` was set\n    \n*   Compose will no longer try to create containers or volumes with invalid starting characters\n    \n*   Fixed several bugs that prevented Compose commands from working properly with containers created with an older version of Compose\n    \n*   Fixed an issue with the output of `docker-compose config` with the `--compatibility-mode` flag enabled when the source file contains attachable networks\n    \n*   Fixed a bug that prevented the `gcloud` credential store from working properly when used with the Compose binary on UNIX\n    \n*   Fixed a bug that caused connection errors when trying to operate over a non-HTTPS TCP connection on Windows\n    \n*   Fixed a bug that caused builds to fail on Windows if the Dockerfile was located in a subdirectory of the build context\n    \n*   Fixed an issue that prevented proper parsing of UTF-8 BOM encoded Compose files on Windows\n    \n*   Fixed an issue with handling of the double-wildcard (`**`) pattern in `.dockerignore` files when using `docker-compose build`\n    \n*   Fixed a bug that caused auth values in legacy `.dockercfg` files to be ignored\n    \n*   `docker-compose build` will no longer attempt to create image names starting with an invalid character\n    \n\n(2018-05-03)\n\n### [Bug fixes](#bug-fixes-22)\n\n*   Fixed a bug where the ip\\_range attribute in IPAM configs was prevented from passing validation\n\n(2018-04-27)\n\n### [Bug fixes](#bug-fixes-23)\n\n*   In 1.21.0, we introduced a change to how project names are sanitized for internal use in resource names. This caused issues when manipulating an existing, deployed application whose name had changed as a result. This release properly detects resources using \"legacy\" naming conventions.\n    \n*   Fixed an issue where specifying an in-context Dockerfile using an absolute path would fail despite being valid.\n    \n*   Fixed a bug where IPAM option changes were incorrectly detected, preventing redeployments.\n    \n*   Validation of v2 files now properly checks the structure of IPAM configs.\n    \n*   Improved support for credentials stores on Windows to include binaries using extensions other than `.exe`. The list of valid extensions is determined by the contents of the `PATHEXT` environment variable.\n    \n*   Fixed a bug where Compose would generate invalid binds containing duplicate elements with some v3.2 files, triggering errors at the Engine level during deployment.\n    \n\n(2018-04-11)\n\n### [New features](#new-features-3)\n\n#### [Compose file version 2.4](#compose-file-version-24)\n\n*   Introduced version 2.4 of the `docker-compose.yml` specification. This version requires Docker Engine 17.12.0 or above.\n    \n*   Added support for the `platform` parameter in service definitions. If supplied, the parameter is also used when performing build for the service.\n    \n\n#### [Compose file version 2.2 and up](#compose-file-version-22-and-up)\n\n*   Added support for the `cpu_rt_period` and `cpu_rt_runtime` parameters in service definitions (2.x only).\n\n#### [Compose file version 2.1 and up](#compose-file-version-21-and-up)\n\n*   Added support for the `cpu_period` parameter in service definitions (2.x only).\n    \n*   Added support for the `isolation` parameter in service build configurations. Additionally, the `isolation` parameter in service definitions is used for builds as well if no `build.isolation` parameter is defined. (2.x only)\n    \n\n#### [All formats](#all-formats)\n\n*   Added support for the `--workdir` flag in `docker-compose exec`.\n    \n*   Added support for the `--compress` flag in `docker-compose build`.\n    \n*   `docker-compose pull` is now performed in parallel by default. You can opt out using the `--no-parallel` flag. The `--parallel` flag is now deprecated and will be removed in a future version.\n    \n*   Dashes and underscores in project names are no longer stripped out.\n    \n*   `docker-compose build` now supports the use of Dockerfile from outside the build context.\n    \n\n### [Bug fixes](#bug-fixes-24)\n\n*   Compose now checks that the volume's configuration matches the remote volume, and errors out if a mismatch is detected.\n    \n*   Fixed a bug that caused Compose to raise unexpected errors when attempting to create several one-off containers in parallel.\n    \n*   Fixed a bug with argument parsing when using `docker-machine config` to generate TLS flags for `exec` and `run` commands.\n    \n*   Fixed a bug where variable substitution with an empty default value (e.g. `${VAR:-}`) would print an incorrect warning.\n    \n*   Improved resilience when encoding of the Compose file doesn't match the system's. Users are encouraged to use UTF-8 when possible.\n    \n*   Fixed a bug where external overlay networks in Swarm would be incorrectly recognized as inexistent by Compose, interrupting otherwise valid operations.\n    \n\n(2018-03-20)\n\n### [New features](#new-features-4)\n\n#### [Compose file version 3.6](#compose-file-version-36)\n\n*   Introduced version 3.6 of the `docker-compose.yml` specification. This version must be used with Docker Engine 18.02.0 or above.\n    \n*   Added support for the `tmpfs.size` property in volume mappings\n    \n\n#### [Compose file version 3.2 and up](#compose-file-version-32-and-up)\n\n*   The `--build-arg` option can now be used without specifying a service in `docker-compose build`\n\n#### [Compose file version 2.3](#compose-file-version-23)\n\n*   Added support for `device_cgroup_rules` in service definitions\n    \n*   Added support for the `tmpfs.size` property in long-form volume mappings\n    \n*   The `--build-arg` option can now be used without specifying a service in `docker-compose build`\n    \n\n#### [All formats](#all-formats-1)\n\n*   Added a `--log-level` option to the top-level `docker-compose` command. Accepted values are `debug`, `info`, `warning`, `error`, `critical`. Default log level is `info`\n    \n*   `docker-compose run` now allows users to unset the container's entrypoint\n    \n*   Proxy configuration found in the `~/.docker/config.json` file now populates environment and build args for containers created by Compose\n    \n*   Added the `--use-aliases` flag to `docker-compose run`, indicating that network aliases declared in the service's config should be used for the running container\n    \n*   Added the `--include-deps` flag to `docker-compose pull`\n    \n*   `docker-compose run` now kills and removes the running container upon receiving `SIGHUP`\n    \n*   `docker-compose ps` now shows the containers' health status if available\n    \n*   Added the long-form `--detach` option to the `exec`, `run` and `up` commands\n    \n\n### [Bug fixes](#bug-fixes-25)\n\n*   Fixed `.dockerignore` handling, notably with regard to absolute paths and last-line precedence rules\n    \n*   Fixed an issue where Compose would make costly DNS lookups when connecting to the Engine when using Docker For Mac\n    \n*   Fixed a bug introduced in 1.19.0 which caused the default certificate path to not be honored by Compose\n    \n*   Fixed a bug where Compose would incorrectly check whether a symlink's destination was accessible when part of a build context\n    \n*   Fixed a bug where `.dockerignore` files containing lines of whitespace caused Compose to error out on Windows\n    \n*   Fixed a bug where `--tls*` and `--host` options wouldn't be properly honored for interactive `run` and `exec` commands\n    \n*   A `seccomp:<filepath>` entry in the `security_opt` config now correctly sends the contents of the file to the engine\n    \n*   ANSI output for `up` and `down` operations should no longer affect the wrong lines\n    \n*   Improved support for non-unicode locales\n    \n*   Fixed a crash occurring on Windows when the user's home directory name contained non-ASCII characters\n    \n*   Fixed a bug occurring during builds caused by files with a negative `mtime` values in the build context\n    \n*   Fixed an encoding bug when streaming build progress\n    \n\n(2018-02-07)\n\n### [Breaking changes](#breaking-changes)\n\n*   On UNIX platforms, interactive `run` and `exec` commands now require the `docker` CLI to be installed on the client by default. To revert to the previous behavior, users may set the `COMPOSE_INTERACTIVE_NO_CLI` environment variable.\n\n### [New features](#new-features-5)\n\n#### [Compose file version 3.x](#compose-file-version-3x)\n\n*   The output of the `config` command should now merge `deploy` options from several Compose files in a more accurate manner\n\n#### [Compose file version 2.3](#compose-file-version-23-1)\n\n*   Added support for the `runtime` option in service definitions\n\n#### [Compose file version 2.1 and up](#compose-file-version-21-and-up-1)\n\n*   Added support for the `${VAR:?err}` and `${VAR?err}` variable interpolation syntax to indicate mandatory variables\n\n#### [Compose file version 2.x](#compose-file-version-2x)\n\n*   Added `priority` key to service network mappings, allowing the user to define in which order the specified service will connect to each network\n\n#### [All formats](#all-formats-2)\n\n*   Added `--renew-anon-volumes` (shorthand `-V`) to the `up` command, preventing Compose from recovering volume data from previous containers for anonymous volumes\n    \n*   Added limit for number of simultaneous parallel operations, which should prevent accidental resource exhaustion of the server. Default is 64 and can be configured using the `COMPOSE_PARALLEL_LIMIT` environment variable\n    \n*   Added `--always-recreate-deps` flag to the `up` command to force recreating dependent services along with the dependency owner\n    \n*   Added `COMPOSE_IGNORE_ORPHANS` environment variable to forgo orphan container detection and suppress warnings\n    \n*   Added `COMPOSE_FORCE_WINDOWS_HOST` environment variable to force Compose to parse volume definitions as if the Docker host was a Windows system, even if Compose itself is currently running on UNIX\n    \n*   Bash completion should now be able to better differentiate between running, stopped and paused services\n    \n\n### [Bug fixes](#bug-fixes-26)\n\n*   Fixed a bug that would cause the `build` command to report a connection error when the build context contained unreadable files or FIFO objects. These file types will now be handled appropriately\n    \n*   Fixed various issues around interactive `run`/`exec` sessions.\n    \n*   Fixed a bug where setting TLS options with environment and CLI flags simultaneously would result in part of the configuration being ignored\n    \n*   Fixed a bug where the DOCKER\\_TLS\\_VERIFY environment variable was being ignored by Compose\n    \n*   Fixed a bug where the `-d` and `--timeout` flags in `up` were erroneously marked as incompatible\n    \n*   Fixed a bug where the recreation of a service would break if the image associated with the previous container had been removed\n    \n*   Fixed a bug where updating a mount's target would break Compose when trying to recreate the associated service\n    \n*   Fixed a bug where `tmpfs` volumes declared using the extended syntax in Compose files using version 3.2 would be erroneously created as anonymous volumes instead\n    \n*   Fixed a bug where type conversion errors would print a stacktrace instead of exiting gracefully\n    \n*   Fixed some errors related to unicode handling\n    \n*   Dependent services no longer get recreated along with the dependency owner if their configuration hasn't changed\n    \n*   Added better validation of `labels` fields in Compose files. Label values containing scalar types (number, boolean) now get automatically converted to strings\n    \n\n(2017-12-18)\n\n### [New features](#new-features-6)\n\n#### [Compose file version 3.5](#compose-file-version-35)\n\n*   Introduced version 3.5 of the `docker-compose.yml` specification. This version requires Docker Engine 17.06.0 or above\n    \n*   Added support for the `shm_size` parameter in build configurations\n    \n*   Added support for the `isolation` parameter in service definitions\n    \n*   Added support for custom names for network, secret and config definitions\n    \n\n#### [Compose file version 2.3](#compose-file-version-23-2)\n\n*   Added support for `extra_hosts` in build configuration\n    \n*   Added support for the [long syntax](https://docs.docker.com/compose/compose-file/legacy-versions/) for volume entries, as previously introduced in the 3.2 format. Using this syntax will create [mounts](https://docs.docker.com/storage/bind-mounts/) instead of volumes.\n    \n\n#### [Compose file version 2.1 and up](#compose-file-version-21-and-up-2)\n\n*   Added support for the `oom_kill_disable` parameter in service definitions (2.x only)\n    \n*   Added support for custom names for network definitions (2.x only)\n    \n\n#### [All formats](#all-formats-3)\n\n*   Values interpolated from the environment will now be converted to the proper type when used in non-string fields.\n    \n*   Added support for `--label` in `docker-compose run`\n    \n*   Added support for `--timeout` in `docker-compose down`\n    \n*   Added support for `--memory` in `docker-compose build`\n    \n*   Setting `stop_grace_period` in service definitions now also sets the container's `stop_timeout`\n    \n\n### [Bug fixes](#bug-fixes-27)\n\n*   Fixed an issue where Compose was still handling service hostname according to legacy engine behavior, causing hostnames containing dots to be cut up\n    \n*   Fixed a bug where the `X-Y:Z` syntax for ports was considered invalid by Compose\n    \n*   Fixed an issue with CLI logging causing duplicate messages and inelegant output to occur\n    \n*   Fixed an issue that caused `stop_grace_period` to be ignored when using multiple Compose files\n    \n*   Fixed a bug that caused `docker-compose images` to crash when using untagged images\n    \n*   Fixed a bug where the valid `${VAR:-}` syntax would cause Compose to error out\n    \n*   Fixed a bug where `env_file` entries using an UTF-8 BOM were being read incorrectly\n    \n*   Fixed a bug where missing secret files would generate an empty directory in their place\n    \n*   Fixed character encoding issues in the CLI's error handlers\n    \n*   Added validation for the `test` field in healthchecks\n    \n*   Added validation for the `subnet` field in IPAM configurations\n    \n*   Added validation for `volumes` properties when using the long syntax in service definitions\n    \n*   The CLI now explicit prevents using `-d` and `--timeout` together in `docker-compose up`\n    \n\n(2017-11-01)\n\n### [New features](#new-features-7)\n\n#### [Compose file version 3.4](#compose-file-version-34)\n\n*   Introduced version 3.4 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 17.06.0 or above.\n    \n*   Added support for `cache_from`, `network` and `target` options in build configurations\n    \n*   Added support for the `order` parameter in the `update_config` section\n    \n*   Added support for setting a custom name in volume definitions using the `name` parameter\n    \n\n#### [Compose file version 2.3](#compose-file-version-23-3)\n\n*   Added support for `shm_size` option in build configuration\n\n#### [Compose file version 2.x](#compose-file-version-2x-1)\n\n*   Added support for extension fields (`x-*`). Also available for v3.4 files\n\n#### [All formats](#all-formats-4)\n\n*   Added new `--no-start` to the `up` command, allowing users to create all resources (networks, volumes, containers) without starting services. The `create` command is deprecated in favor of this new option\n\n### [Bug fixes](#bug-fixes-28)\n\n*   Fixed a bug where `extra_hosts` values would be overridden by extension files instead of merging together\n    \n*   Fixed a bug where the validation for v3.2 files would prevent using the `consistency` field in service volume definitions\n    \n*   Fixed a bug that would cause a crash when configuration fields expecting unique items would contain duplicates\n    \n*   Fixed a bug where mount overrides with a different mode would create a duplicate entry instead of overriding the original entry\n    \n*   Fixed a bug where build labels declared as a list wouldn't be properly parsed\n    \n*   Fixed a bug where the output of `docker-compose config` would be invalid for some versions if the file contained custom-named external volumes\n    \n*   Improved error handling when issuing a build command on Windows using an unsupported file version\n    \n*   Fixed an issue where networks with identical names would sometimes be created when running `up` commands concurrently.\n    \n\n(2017-08-31)\n\n### [New features](#new-features-8)\n\n#### [Compose file version 2.3](#compose-file-version-23-4)\n\n*   Introduced version 2.3 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 17.06.0 or above.\n    \n*   Added support for the `target` parameter in build configurations\n    \n*   Added support for the `start_period` parameter in healthcheck configurations\n    \n\n#### [Compose file version 2.x](#compose-file-version-2x-2)\n\n*   Added support for the `blkio_config` parameter in service definitions\n    \n*   Added support for setting a custom name in volume definitions using the `name` parameter (not available for version 2.0)\n    \n\n#### [All formats](#all-formats-5)\n\n*   Added new CLI flag `--no-ansi` to suppress ANSI control characters in output\n\n### [Bug fixes](#bug-fixes-29)\n\n*   Fixed a bug where nested `extends` instructions weren't resolved properly, causing \"file not found\" errors\n    \n*   Fixed several issues with `.dockerignore` parsing\n    \n*   Fixed issues where logs of TTY-enabled services were being printed incorrectly and causing `MemoryError` exceptions\n    \n*   Fixed a bug where printing application logs would sometimes be interrupted by a `UnicodeEncodeError` exception on Python 3\n    \n*   The `$` character in the output of `docker-compose config` is now properly escaped\n    \n*   Fixed a bug where running `docker-compose top` would sometimes fail with an uncaught exception\n    \n*   Fixed a bug where `docker-compose pull` with the `--parallel` flag would return a `0` exit code when failing\n    \n*   Fixed an issue where keys in `deploy.resources` were not being validated\n    \n*   Fixed an issue where the `logging` options in the output of `docker-compose config` would be set to `null`, an invalid value\n    \n*   Fixed the output of the `docker-compose images` command when an image would come from a private repository using an explicit port number\n    \n*   Fixed the output of `docker-compose config` when a port definition used `0` as the value for the published port\n    \n\n(2017-07-26)\n\n### [New features](#new-features-9)\n\n#### [Compose file version 2.2](#compose-file-version-22)\n\n*   Added support for the `network` parameter in build configurations.\n\n#### [Compose file version 2.1 and up](#compose-file-version-21-and-up-3)\n\n*   The `pid` option in a service's definition now supports a `service:<name>` value.\n    \n*   Added support for the `storage_opt` parameter in service definitions. This option is not available for the v3 format\n    \n\n#### [All formats](#all-formats-6)\n\n*   Added `--quiet` flag to `docker-compose pull`, suppressing progress output\n    \n*   Some improvements to CLI output\n    \n\n### [Bug fixes](#bug-fixes-30)\n\n*   Volumes specified through the `--volume` flag of `docker-compose run` now complement volumes declared in the service's definition instead of replacing them\n    \n*   Fixed a bug where using multiple Compose files would unset the scale value defined inside the Compose file.\n    \n*   Fixed an issue where the `credHelpers` entries in the `config.json` file were not being honored by Compose\n    \n*   Fixed a bug where using multiple Compose files with port declarations would cause failures in Python 3 environments\n    \n*   Fixed a bug where some proxy-related options present in the user's environment would prevent Compose from running\n    \n*   Fixed an issue where the output of `docker-compose config` would be invalid if the original file used `Y` or `N` values\n    \n*   Fixed an issue preventing `up` operations on a previously created stack on Windows Engine.\n    \n\n(2017-06-19)\n\n### [New features](#new-features-10)\n\n#### [Compose file version 3.3](#compose-file-version-33)\n\n*   Introduced version 3.3 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 17.06.0 or above. Note: the `credential_spec` and `configs` keys only apply to Swarm services and will be ignored by Compose\n\n#### [Compose file version 2.2](#compose-file-version-22-1)\n\n*   Added the following parameters in service definitions: `cpu_count`, `cpu_percent`, `cpus`\n\n#### [Compose file version 2.1](#compose-file-version-21)\n\n*   Added support for build labels. This feature is also available in the 2.2 and 3.3 formats.\n\n#### [All formats](#all-formats-7)\n\n*   Added shorthand `-u` for `--user` flag in `docker-compose exec`\n    \n*   Differences in labels between the Compose file and remote network will now print a warning instead of preventing redeployment.\n    \n\n### [Bug fixes](#bug-fixes-31)\n\n*   Fixed a bug where service's dependencies were being rescaled to their default scale when running a `docker-compose run` command\n    \n*   Fixed a bug where `docker-compose rm` with the `--stop` flag was not behaving properly when provided with a list of services to remove\n    \n*   Fixed a bug where `cache_from` in the build section would be ignored when using more than one Compose file.\n    \n*   Fixed a bug that prevented binding the same port to different IPs when using more than one Compose file.\n    \n*   Fixed a bug where override files would not be picked up by Compose if they had the `.yaml` extension\n    \n*   Fixed a bug on Windows Engine where networks would be incorrectly flagged for recreation\n    \n*   Fixed a bug where services declaring ports would cause crashes on some versions of Python 3\n    \n*   Fixed a bug where the output of `docker-compose config` would sometimes contain invalid port definitions\n    \n\n(2017-05-02)\n\n### [Breaking changes](#breaking-changes-1)\n\n*   `docker-compose up` now resets a service's scaling to its default value. You can use the newly introduced `--scale` option to specify a custom scale value\n\n### [New features](#new-features-11)\n\n#### [Compose file version 2.2](#compose-file-version-22-2)\n\n*   Introduced version 2.2 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 1.13.0 or above\n    \n*   Added support for `init` in service definitions.\n    \n*   Added support for `scale` in service definitions. The configuration's value can be overridden using the `--scale` flag in `docker-compose up`. The `scale` command is disabled for this file format\n    \n\n#### [Compose file version 2.x](#compose-file-version-2x-3)\n\n*   Added support for `options` in the `ipam` section of network definitions\n\n### [Bug fixes](#bug-fixes-32)\n\n*   Fixed a bug where paths provided to compose via the `-f` option were not being resolved properly\n    \n*   Fixed a bug where the `ext_ip::target_port` notation in the ports section was incorrectly marked as invalid\n    \n*   Fixed an issue where the `exec` command would sometimes not return control to the terminal when using the `-d` flag\n    \n*   Fixed a bug where secrets were missing from the output of the `config` command for v3.2 files\n    \n*   Fixed an issue where `docker-compose` would hang if no internet connection was available\n    \n*   Fixed an issue where paths containing unicode characters passed via the `-f` flag were causing Compose to crash\n    \n*   Fixed an issue where the output of `docker-compose config` would be invalid if the Compose file contained external secrets\n    \n*   Fixed a bug where using `--exit-code-from` with `up` would fail if Compose was installed in a Python 3 environment\n    \n*   Fixed a bug where recreating containers using a combination of `tmpfs` and `volumes` would result in an invalid config state\n    \n\n(2017-04-04)\n\n### [New features](#new-features-12)\n\n#### [Compose file version 3.2](#compose-file-version-32)\n\n*   Introduced version 3.2 of the `docker-compose.yml` specification\n    \n*   Added support for `cache_from` in the `build` section of services\n    \n*   Added support for the new expanded ports syntax in service definitions\n    \n*   Added support for the new expanded volumes syntax in service definitions\n    \n\n#### [Compose file version 2.1](#compose-file-version-21-1)\n\n*   Added support for `pids_limit` in service definitions\n\n#### [Compose file version 2.0 and up](#compose-file-version-20-and-up)\n\n*   Added `--volumes` option to `docker-compose config` that lists named volumes declared for that project\n    \n*   Added support for `mem_reservation` in service definitions (2.x only)\n    \n*   Added support for `dns_opt` in service definitions (2.x only)\n    \n\n#### [All formats](#all-formats-8)\n\n*   Added a new `docker-compose images` command that lists images used by the current project's containers\n    \n*   Added a `--stop` (shorthand `-s`) option to `docker-compose rm` that stops the running containers before removing them\n    \n*   Added a `--resolve-image-digests` option to `docker-compose config` that pins the image version for each service to a permanent digest\n    \n*   Added a `--exit-code-from SERVICE` option to `docker-compose up`. When used, `docker-compose` will exit on any container's exit with the code corresponding to the specified service's exit code\n    \n*   Added a `--parallel` option to `docker-compose pull` that enables images for multiple services to be pulled simultaneously\n    \n*   Added a `--build-arg` option to `docker-compose build`\n    \n*   Added a `--volume <volume_mapping>` (shorthand `-v`) option to `docker-compose run` to declare runtime volumes to be mounted\n    \n*   Added a `--project-directory PATH` option to `docker-compose` that will affect path resolution for the project\n    \n*   When using `--abort-on-container-exit` in `docker-compose up`, the exit code for the container that caused the abort will be the exit code of the `docker-compose up` command\n    \n*   Users can now configure which path separator character they want to use to separate the `COMPOSE_FILE` environment value using the `COMPOSE_PATH_SEPARATOR` environment variable\n    \n*   Added support for port range to a single port in port mappings, such as `8000-8010:80`.\n    \n\n### [Bug fixes](#bug-fixes-33)\n\n*   `docker-compose run --rm` now removes anonymous volumes after execution, matching the behavior of `docker run --rm`.\n    \n*   Fixed a bug where override files containing port lists would cause a TypeError to be raised\n    \n*   Fixed a bug where the `deploy` key would be missing from the output of `docker-compose config`\n    \n*   Fixed a bug where scaling services up or down would sometimes re-use obsolete containers\n    \n*   Fixed a bug where the output of `docker-compose config` would be invalid if the project declared anonymous volumes\n    \n*   Variable interpolation now properly occurs in the `secrets` section of the Compose file\n    \n*   The `secrets` section now properly appears in the output of `docker-compose config`\n    \n*   Fixed a bug where changes to some networks properties would not be detected against previously created networks\n    \n*   Fixed a bug where `docker-compose` would crash when trying to write into a closed pipe\n    \n*   Fixed an issue where Compose would not pick up on the value of COMPOSE\\_TLS\\_VERSION when used in combination with command-line TLS flags\n    \n\n(2017-02-17)\n\n### [Bug fixes](#bug-fixes-34)\n\n*   Fixed a bug that was preventing secrets configuration from being loaded properly\n    \n*   Fixed a bug where the `docker-compose config` command would fail if the config file contained secrets definitions\n    \n*   Fixed an issue where Compose on some linux distributions would pick up and load an outdated version of the requests library\n    \n*   Fixed an issue where socket-type files inside a build folder would cause `docker-compose` to crash when trying to build that service\n    \n*   Fixed an issue where recursive wildcard patterns `**` were not being recognized in `.dockerignore` files.\n    \n\n(2017-02-09)\n\n### [Bug fixes](#bug-fixes-35)\n\n*   Fixed a bug where the 3.1 file format was not being recognized as valid by the Compose parser\n\n(2017-02-08)\n\n### [New Features](#new-features-13)\n\n#### [Compose file version 3.1](#compose-file-version-31)\n\n*   Introduced version 3.1 of the `docker-compose.yml` specification. This version requires Docker Engine 1.13.0 or above. It introduces support for secrets. See the documentation for more information\n\n#### [Compose file version 2.0 and up](#compose-file-version-20-and-up-1)\n\n*   Introduced the `docker-compose top` command that displays processes running for the different services managed by Compose.\n\n### [Bug fixes](#bug-fixes-36)\n\n*   Fixed a bug where extending a service defining a healthcheck dictionary would cause `docker-compose` to error out.\n    \n*   Fixed an issue where the `pid` entry in a service definition was being ignored when using multiple Compose files.\n    \n\n(2017-02-01)\n\n### [Bug fixes](#bug-fixes-37)\n\n*   Fixed an issue where the presence of older versions of the docker-py package would cause unexpected crashes while running Compose\n    \n*   Fixed an issue where healthcheck dependencies would be lost when using multiple compose files for a project\n    \n*   Fixed a few issues that made the output of the `config` command invalid\n    \n*   Fixed an issue where adding volume labels to v3 Compose files would result in an error\n    \n*   Fixed an issue on Windows where build context paths containing unicode characters were being improperly encoded\n    \n*   Fixed a bug where Compose would occasionally crash while streaming logs when containers would stop or restart\n    \n\n(2017-01-18)\n\n### [New Features](#new-features-14)\n\n#### [Compose file version 3.0](#compose-file-version-30)\n\n*   Introduced version 3.0 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 1.13 or above and is specifically designed to work with the `docker stack` commands.\n\n#### [Compose file version 2.1 and up](#compose-file-version-21-and-up-4)\n\n*   Healthcheck configuration can now be done in the service definition using the `healthcheck` parameter\n    \n*   Containers dependencies can now be set up to wait on positive healthchecks when declared using `depends_on`. See the documentation for the updated syntax. **Note**: This feature will not be ported to version 3 Compose files.\n    \n*   Added support for the `sysctls` parameter in service definitions\n    \n*   Added support for the `userns_mode` parameter in service definitions\n    \n*   Compose now adds identifying labels to networks and volumes it creates\n    \n\n#### [Compose file version 2.0 and up](#compose-file-version-20-and-up-2)\n\n*   Added support for the `stop_grace_period` option in service definitions.\n\n### [Bug fixes](#bug-fixes-38)\n\n*   Colored output now works properly on Windows.\n    \n*   Fixed a bug where docker-compose run would fail to set up link aliases in interactive mode on Windows.\n    \n*   Networks created by Compose are now always made attachable (Compose files v2.1 and up).\n    \n*   Fixed a bug where falsy values of `COMPOSE_CONVERT_WINDOWS_PATHS` (`0`, `false`, empty value) were being interpreted as true.\n    \n*   Fixed a bug where forward slashes in some .dockerignore patterns weren't being parsed correctly on Windows\n    \n\n(2016-11-16)\n\n**Breaking changes**\n\n*   When using Compose with Docker Toolbox/Machine on Windows, volume paths are no longer converted from `C:\\Users` to `/c/Users`\\-style by default. To re-enable this conversion so that your volumes keep working, set the environment variable `COMPOSE_CONVERT_WINDOWS_PATHS=1`. Users of Docker for Windows are not affected and do not need to set the variable.\n\n### [New Features](#new-features-15)\n\n*   Interactive mode for `docker-compose run` and `docker-compose exec` is now supported on Windows platforms. The `docker` binary is required to be present on the system for this feature to work.\n    \n*   Introduced version 2.1 of the `docker-compose.yml` specification. This version requires to be used with Docker Engine 1.12 or above.\n    \n    *   Added support for setting volume labels and network labels in `docker-compose.yml`.\n    *   Added support for the `isolation` parameter in service definitions.\n    *   Added support for link-local IPs in the service networks definitions.\n    *   Added support for shell-style inline defaults in variable interpolation. The supported forms are `${FOO-default}` (fall back if FOO is unset) and `${FOO:-default}` (fall back if FOO is unset or empty).\n*   Added support for the `group_add` and `oom_score_adj` parameters in service definitions.\n    \n*   Added support for the `internal` and `enable_ipv6` parameters in network definitions.\n    \n*   Compose now defaults to using the `npipe` protocol on Windows.\n    \n*   Overriding a `logging` configuration will now properly merge the `options` mappings if the `driver` values do not conflict.\n    \n\n### [Bug fixes](#bug-fixes-39)\n\n*   Fixed several bugs related to `npipe` protocol support on Windows.\n    \n*   Fixed an issue with Windows paths being incorrectly converted when using Docker on Windows Server.\n    \n*   Fixed a bug where an empty `restart` value would sometimes result in an exception being raised.\n    \n*   Fixed an issue where service logs containing unicode characters would sometimes cause an error to occur.\n    \n*   Fixed a bug where unicode values in environment variables would sometimes raise a unicode exception when retrieved.\n    \n*   Fixed an issue where Compose would incorrectly detect a configuration mismatch for overlay networks.\n    \n\n(2016-09-22)\n\n### [Bug fixes](#bug-fixes-40)\n\n*   Fixed a bug where users using a credentials store were not able to access their private images.\n    \n*   Fixed a bug where users using identity tokens to authenticate were not able to access their private images.\n    \n*   Fixed a bug where an `HttpHeaders` entry in the docker configuration file would cause Compose to crash when trying to build an image.\n    \n*   Fixed a few bugs related to the handling of Windows paths in volume binding declarations.\n    \n*   Fixed a bug where Compose would sometimes crash while trying to read a streaming response from the engine.\n    \n*   Fixed an issue where Compose would crash when encountering an API error while streaming container logs.\n    \n*   Fixed an issue where Compose would erroneously try to output logs from drivers not handled by the Engine's API.\n    \n*   Fixed a bug where options from the `docker-machine config` command would not be properly interpreted by Compose.\n    \n*   Fixed a bug where the connection to the Docker Engine would sometimes fail when running a large number of services simultaneously.\n    \n*   Fixed an issue where Compose would sometimes print a misleading suggestion message when running the `bundle` command.\n    \n*   Fixed a bug where connection errors would not be handled properly by Compose during the project initialization phase.\n    \n*   Fixed a bug where a misleading error would appear when encountering a connection timeout.\n    \n\n(2016-06-14)\n\n### [Breaking Changes](#breaking-changes-2)\n\n*   As announced in 1.7.0, `docker-compose rm` now removes containers created by `docker-compose run` by default.\n    \n*   Setting `entrypoint` on a service now empties out any default command that was set on the image (i.e. any `CMD` instruction in the Dockerfile used to build it). This makes it consistent with the `--entrypoint` flag to `docker run`.\n    \n\n### [New Features](#new-features-16)\n\n*   Added `docker-compose bundle`, a command that builds a bundle file to be consumed by the new _Docker Stack_ commands in Docker 1.12.\n    \n*   Added `docker-compose push`, a command that pushes service images to a registry.\n    \n*   Compose now supports specifying a custom TLS version for interaction with the Docker Engine using the `COMPOSE_TLS_VERSION` environment variable.\n    \n\n### [Bug fixes](#bug-fixes-41)\n\n*   Fixed a bug where Compose would erroneously try to read `.env` at the project's root when it is a directory.\n    \n*   `docker-compose run -e VAR` now passes `VAR` through from the shell to the container, as with `docker run -e VAR`.\n    \n*   Improved config merging when multiple compose files are involved for several service sub-keys.\n    \n*   Fixed a bug where volume mappings containing Windows drives would sometimes be parsed incorrectly.\n    \n*   Fixed a bug in Windows environment where volume mappings of the host's root directory would be parsed incorrectly.\n    \n*   Fixed a bug where `docker-compose config` would output an invalid Compose file if external networks were specified.\n    \n*   Fixed an issue where unset buildargs would be assigned a string containing `'None'` instead of the expected empty value.\n    \n*   Fixed a bug where yes/no prompts on Windows would not show before receiving input.\n    \n*   Fixed a bug where trying to `docker-compose exec` on Windows without the `-d` option would exit with a stacktrace. This will still fail for the time being, but should do so gracefully.\n    \n*   Fixed a bug where errors during `docker-compose up` would show an unrelated stacktrace at the end of the process.\n    \n*   `docker-compose create` and `docker-compose start` show more descriptive error messages when something goes wrong.\n    \n\n(2016-05-04)\n\n### [Bug fixes](#bug-fixes-42)\n\n*   Fixed a bug where the output of `docker-compose config` for v1 files would be an invalid configuration file.\n    \n*   Fixed a bug where `docker-compose config` would not check the validity of links.\n    \n*   Fixed an issue where `docker-compose help` would not output a list of available commands and generic options as expected.\n    \n*   Fixed an issue where filtering by service when using `docker-compose logs` would not apply for newly created services.\n    \n*   Fixed a bug where unchanged services would sometimes be recreated in in the up phase when using Compose with Python 3.\n    \n*   Fixed an issue where API errors encountered during the up phase would not be recognized as a failure state by Compose.\n    \n*   Fixed a bug where Compose would raise a NameError because of an undefined exception name on non-Windows platforms.\n    \n*   Fixed a bug where the wrong version of `docker-py` would sometimes be installed alongside Compose.\n    \n*   Fixed a bug where the host value output by `docker-machine config default` would not be recognized as valid options by the `docker-compose` command line.\n    \n*   Fixed an issue where Compose would sometimes exit unexpectedly while reading events broadcasted by a Swarm cluster.\n    \n*   Corrected a statement in the docs about the location of the `.env` file, which is indeed read from the current directory, instead of in the same location as the Compose file.\n    \n\n(2016-04-13)\n\n### [Breaking Changes](#breaking-changes-3)\n\n*   `docker-compose logs` no longer follows log output by default. It now matches the behavior of `docker logs` and exits after the current logs are printed. Use `-f` to get the old default behavior.\n    \n*   Booleans are no longer allows as values for mappings in the Compose file (for keys `environment`, `labels` and `extra_hosts`). Previously this was a warning. Boolean values should be quoted so they become string values.\n    \n\n### [New Features](#new-features-17)\n\n*   Compose now looks for a `.env` file in the directory where it's run and reads any environment variables defined inside, if they're not already set in the shell environment. This lets you easily set defaults for variables used in the Compose file, or for any of the `COMPOSE_*` or `DOCKER_*` variables.\n    \n*   Added a `--remove-orphans` flag to both `docker-compose up` and `docker-compose down` to remove containers for services that were removed from the Compose file.\n    \n*   Added a `--all` flag to `docker-compose rm` to include containers created by `docker-compose run`. This will become the default behavior in the next version of Compose.\n    \n*   Added support for all the same TLS configuration flags used by the `docker` client: `--tls`, `--tlscert`, `--tlskey`, etc.\n    \n*   Compose files now support the `tmpfs` and `shm_size` options.\n    \n*   Added the `--workdir` flag to `docker-compose run`\n    \n*   `docker-compose logs` now shows logs for new containers that are created after it starts.\n    \n*   The `COMPOSE_FILE` environment variable can now contain multiple files, separated by the host system's standard path separator (`:` on Mac/Linux, `;` on Windows).\n    \n*   You can now specify a static IP address when connecting a service to a network with the `ipv4_address` and `ipv6_address` options.\n    \n*   Added `--follow`, `--timestamp`, and `--tail` flags to the `docker-compose logs` command.\n    \n*   `docker-compose up`, and `docker-compose start` will now start containers in parallel where possible.\n    \n*   `docker-compose stop` now stops containers in reverse dependency order instead of all at once.\n    \n*   Added the `--build` flag to `docker-compose up` to force it to build a new image. It now shows a warning if an image is automatically built when the flag is not used.\n    \n*   Added the `docker-compose exec` command for executing a process in a running container.\n    \n\n### [Bug fixes](#bug-fixes-43)\n\n*   `docker-compose down` now removes containers created by `docker-compose run`.\n    \n*   A more appropriate error is shown when a timeout is hit during `up` when using a tty.\n    \n*   Fixed a bug in `docker-compose down` where it would abort if some resources had already been removed.\n    \n*   Fixed a bug where changes to network aliases would not trigger a service to be recreated.\n    \n*   Fix a bug where a log message was printed about creating a new volume when it already existed.\n    \n*   Fixed a bug where interrupting `up` would not always shut down containers.\n    \n*   Fixed a bug where `log_opt` and `log_driver` were not properly carried over when extending services in the v1 Compose file format.\n    \n*   Fixed a bug where empty values for build args would cause file validation to fail.\n    \n\n(2016-02-23)\n\n*   Fixed a bug where connecting to a TLS-enabled Docker Engine would fail with a certificate verification error.\n\n(2016-02-23)\n\n### [Bug fixes](#bug-fixes-44)\n\n*   Fixed a bug where recreating a container multiple times would cause the new container to be started without the previous volumes.\n    \n*   Fixed a bug where Compose would set the value of unset environment variables to an empty string, instead of a key without a value.\n    \n*   Provide a better error message when Compose requires a more recent version of the Docker API.\n    \n*   Add a missing config field `network.aliases` which allows setting a network scoped alias for a service.\n    \n*   Fixed a bug where `run` would not start services listed in `depends_on`.\n    \n*   Fixed a bug where `networks` and `network_mode` where not merged when using extends or multiple Compose files.\n    \n*   Fixed a bug with service aliases where the short container id alias was only contained 10 characters, instead of the 12 characters used in previous versions.\n    \n*   Added a missing log message when creating a new named volume.\n    \n*   Fixed a bug where `build.args` was not merged when using `extends` or multiple Compose files.\n    \n*   Fixed some bugs with config validation when null values or incorrect types were used instead of a mapping.\n    \n*   Fixed a bug where a `build` section without a `context` would show a stack trace instead of a helpful validation message.\n    \n*   Improved compatibility with swarm by only setting a container affinity to the previous instance of a services' container when the service uses an anonymous container volume. Previously the affinity was always set on all containers.\n    \n*   Fixed the validation of some `driver_opts` would cause an error if a number was used instead of a string.\n    \n*   Some improvements to the `run.sh` script used by the Compose container install option.\n    \n*   Fixed a bug with `up --abort-on-container-exit` where Compose would exit, but would not stop other containers.\n    \n*   Corrected the warning message that is printed when a boolean value is used as a value in a mapping.\n    \n\n(2016-01-15)\n\n### [Major Features](#major-features)\n\n*   Compose 1.6 introduces a new format for `docker-compose.yml` which lets you define networks and volumes in the Compose file as well as services. It also makes a few changes to the structure of some configuration options.\n    \n    You don't have to use it - your existing Compose files will run on Compose 1.6 exactly as they do today.\n    \n    Check the [upgrade guide](https://docs.docker.com/compose/compose-file/legacy-versions/) for full details.\n    \n*   Support for networking has exited experimental status and is the recommended way to enable communication between containers.\n    \n    If you use the new file format, your app will use networking. If you aren't ready yet, just leave your Compose file as it is and it'll continue to work just the same.\n    \n    By default, you don't have to configure any networks. In fact, using networking with Compose involves even less configuration than using links. Consult the [networking guide](https://docs.docker.com/compose/networking/) for how to use it.\n    \n    The experimental flags `--x-networking` and `--x-network-driver`, introduced in Compose 1.5, have been removed.\n    \n*   You can now pass arguments to a build if you're using the new file format:\n    \n    ```\n    build:\n      context: .\n      args:\n        buildno: 1\n    ```\n    \n*   You can now specify both a `build` and an `image` key if you're using the new file format. `docker-compose build` will build the image and tag it with the name you've specified, while `docker-compose pull` will attempt to pull it.\n    \n*   There's a new `events` command for monitoring container events from the application, much like `docker events`. This is a good primitive for building tools on top of Compose for performing actions when particular things happen, such as containers starting and stopping.\n    \n*   There's a new `depends_on` option for specifying dependencies between services. This enforces the order of startup, and ensures that when you run `docker-compose up SERVICE` on a service with dependencies, those are started as well.\n    \n\n### [New Features](#new-features-18)\n\n*   Added a new command `config` which validates and prints the Compose configuration after interpolating variables, resolving relative paths, and merging multiple files and `extends`.\n    \n*   Added a new command `create` for creating containers without starting them.\n    \n*   Added a new command `down` to stop and remove all the resources created by `up` in a single command.\n    \n*   Added support for the `cpu_quota` configuration option.\n    \n*   Added support for the `stop_signal` configuration option.\n    \n*   Commands `start`, `restart`, `pause`, and `unpause` now exit with an error status code if no containers were modified.\n    \n*   Added a new `--abort-on-container-exit` flag to `up` which causes `up` to stop all container and exit once the first container exits.\n    \n*   Removed support for `FIG_FILE`, `FIG_PROJECT_NAME`, and no longer reads `fig.yml` as a default Compose file location.\n    \n*   Removed the `migrate-to-labels` command.\n    \n*   Removed the `--allow-insecure-ssl` flag.\n    \n\n### [Bug fixes](#bug-fixes-45)\n\n*   Fixed a validation bug that prevented the use of a range of ports in the `expose` field.\n    \n*   Fixed a validation bug that prevented the use of arrays in the `entrypoint` field if they contained duplicate entries.\n    \n*   Fixed a bug that caused `ulimits` to be ignored when used with `extends`.\n    \n*   Fixed a bug that prevented ipv6 addresses in `extra_hosts`.\n    \n*   Fixed a bug that caused `extends` to be ignored when included from multiple Compose files.\n    \n*   Fixed an incorrect warning when a container volume was defined in the Compose file.\n    \n*   Fixed a bug that prevented the force shutdown behavior of `up` and `logs`.\n    \n*   Fixed a bug that caused `None` to be printed as the network driver name when the default network driver was used.\n    \n*   Fixed a bug where using the string form of `dns` or `dns_search` would cause an error.\n    \n*   Fixed a bug where a container would be reported as \"Up\" when it was in the restarting state.\n    \n*   Fixed a confusing error message when DOCKER\\_CERT\\_PATH was not set properly.\n    \n*   Fixed a bug where attaching to a container would fail if it was using a non-standard logging driver (or none at all).\n    \n\n(2015-12-03)\n\n*   Fixed a bug which broke the use of `environment` and `env_file` with `extends`, and caused environment keys without values to have a `None` value, instead of a value from the host environment.\n    \n*   Fixed a regression in 1.5.1 that caused a warning about volumes to be raised incorrectly when containers were recreated.\n    \n*   Fixed a bug which prevented building a `Dockerfile` that used `ADD <url>`\n    \n*   Fixed a bug with `docker-compose restart` which prevented it from starting stopped containers.\n    \n*   Fixed handling of SIGTERM and SIGINT to properly stop containers\n    \n*   Add support for using a url as the value of `build`\n    \n*   Improved the validation of the `expose` option\n    \n\n(2015-11-12)\n\n*   Add the `--force-rm` option to `build`.\n    \n*   Add the `ulimit` option for services in the Compose file.\n    \n*   Fixed a bug where `up` would error with \"service needs to be built\" if a service changed from using `image` to using `build`.\n    \n*   Fixed a bug that would cause incorrect output of parallel operations on some terminals.\n    \n*   Fixed a bug that prevented a container from being recreated when the mode of a `volumes_from` was changed.\n    \n*   Fixed a regression in 1.5.0 where non-utf-8 unicode characters would cause `up` or `logs` to crash.\n    \n*   Fixed a regression in 1.5.0 where Compose would use a success exit status code when a command fails due to an HTTP timeout communicating with the docker daemon.\n    \n*   Fixed a regression in 1.5.0 where `name` was being accepted as a valid service option which would override the actual name of the service.\n    \n*   When using `--x-networking` Compose no longer sets the hostname to the container name.\n    \n*   When using `--x-networking` Compose will only create the default network if at least one container is using the network.\n    \n*   When printings logs during `up` or `logs`, flush the output buffer after each line to prevent buffering issues from hiding logs.\n    \n*   Recreate a container if one of its dependencies is being created. Previously a container was only recreated if it's dependencies already existed, but were being recreated as well.\n    \n*   Add a warning when a `volume` in the Compose file is being ignored and masked by a container volume from a previous container.\n    \n*   Improve the output of `pull` when run without a tty.\n    \n*   When using multiple Compose files, validate each before attempting to merge them together. Previously invalid files would result in not helpful errors.\n    \n*   Allow dashes in keys in the `environment` service option.\n    \n*   Improve validation error messages by including the filename as part of the error message.\n    \n\n(2015-11-03)\n\n### [Breaking changes](#breaking-changes-4)\n\nWith the introduction of variable substitution support in the Compose file, any Compose file that uses an environment variable (`$VAR` or `${VAR}`) in the `command:` or `entrypoint:` field will break.\n\nPreviously these values were interpolated inside the container, with a value from the container environment. In Compose 1.5.0, the values will be interpolated on the host, with a value from the host environment.\n\nTo migrate a Compose file to 1.5.0, escape the variables with an extra `$` (ex: `$$VAR` or `$${VAR}`). See [https://github.com/docker/compose/blob/8cc8e61/docs/compose-file.md#variable-substitution](https://github.com/docker/compose/blob/8cc8e61/docs/compose-file.md#variable-substitution)\n\n### [Major features](#major-features-1)\n\n*   Compose is now available for Windows.\n    \n*   Environment variables can be used in the Compose file. See [https://github.com/docker/compose/blob/8cc8e61/docs/compose-file.md#variable-substitution](https://github.com/docker/compose/blob/8cc8e61/docs/compose-file.md#variable-substitution)\n    \n*   Multiple compose files can be specified, allowing you to override settings in the default Compose file. See [https://github.com/docker/compose/blob/8cc8e61/docs/reference/docker-compose.md](https://github.com/docker/compose/blob/8cc8e61/docs/reference/docker-compose.md) for more details.\n    \n*   Compose now produces better error messages when a file contains invalid configuration.\n    \n*   `up` now waits for all services to exit before shutting down, rather than shutting down as soon as one container exits.\n    \n*   Experimental support for the new docker networking system can be enabled with the `--x-networking` flag. Read more here: [https://github.com/docker/docker/blob/8fee1c20/docs/userguide/dockernetworks.md](https://github.com/docker/docker/blob/8fee1c20/docs/userguide/dockernetworks.md)\n    \n\n### [New features](#new-features-19)\n\n*   You can now optionally pass a mode to `volumes_from`. For example, `volumes_from: [\"servicename:ro\"]`.\n    \n*   Since Docker now lets you create volumes with names, you can refer to those volumes by name in `docker-compose.yml`. For example, `volumes: [\"mydatavolume:/data\"]` will mount the volume named `mydatavolume` at the path `/data` inside the container.\n    \n    If the first component of an entry in `volumes` starts with a `.`, `/` or `~`, it is treated as a path and expansion of relative paths is performed as necessary. Otherwise, it is treated as a volume name and passed straight through to Docker.\n    \n    Read more on named volumes and volume drivers here: [https://github.com/docker/docker/blob/244d9c33/docs/userguide/dockervolumes.md](https://github.com/docker/docker/blob/244d9c33/docs/userguide/dockervolumes.md)\n    \n*   `docker-compose build --pull` instructs Compose to pull the base image for each Dockerfile before building.\n    \n*   `docker-compose pull --ignore-pull-failures` instructs Compose to continue if it fails to pull a single service's image, rather than aborting.\n    \n*   You can now specify an IPC namespace in `docker-compose.yml` with the `ipc` option.\n    \n*   Containers created by `docker-compose run` can now be named with the `--name` flag.\n    \n*   If you install Compose with pip or use it as a library, it now works with Python 3.\n    \n*   `image` now supports image digests (in addition to ids and tags). For example, `image: \"busybox@sha256:38a203e1986cf79639cfb9b2e1d6e773de84002feea2d4eb006b52004ee8502d\"`\n    \n*   `ports` now supports ranges of ports. For example,\n    \n    ```\n    ports:\n      - \"3000-3005\"\n      - \"9000-9001:8000-8001\"\n    ```\n    \n*   `docker-compose run` now supports a `-p|--publish` parameter, much like `docker run -p`, for publishing specific ports to the host.\n    \n*   `docker-compose pause` and `docker-compose unpause` have been implemented, analogous to `docker pause` and `docker unpause`.\n    \n*   When using `extends` to copy configuration from another service in the same Compose file, you can omit the `file` option.\n    \n*   Compose can be installed and run as a Docker image. This is an experimental feature.\n    \n\n### [Bug fixes](#bug-fixes-46)\n\n*   All values for the `log_driver` option which are supported by the Docker daemon are now supported by Compose.\n    \n*   `docker-compose build` can now be run successfully against a Swarm cluster.\n    \n\n(2015-09-22)\n\n*   Fixed a regression in the 1.4.1 release that would cause `docker-compose up` without the `-d` option to exit immediately.\n\n(2015-09-10)\n\n### [Bug fixes](#bug-fixes-47)\n\n*   Some configuration changes (notably changes to `links`, `volumes_from`, and `net`) were not properly triggering a container recreate as part of `docker-compose up`.\n*   `docker-compose up <service>` was showing logs for all services instead of just the specified services.\n*   Containers with custom container names were showing up in logs as `service_number` instead of their custom container name.\n*   When scaling a service sometimes containers would be recreated even when the configuration had not changed.\n\n(2015-08-04)\n\n*   By default, `docker-compose up` now only recreates containers for services whose configuration has changed since they were created. This should result in a dramatic speed-up for many applications.\n    \n    The experimental `--x-smart-recreate` flag which introduced this feature in Compose 1.3.0 has been removed, and a `--force-recreate` flag has been added for when you want to recreate everything.\n    \n*   Several of Compose's commands - `scale`, `stop`, `kill` and `rm` - now perform actions on multiple containers in parallel, rather than in sequence, which will run much faster on larger applications.\n    \n*   You can now specify a custom name for a service's container with `container_name`. Because Docker container names must be unique, this means you can't scale the service beyond one container.\n    \n*   You no longer have to specify a `file` option when using `extends` - it will default to the current file.\n    \n*   Service names can now contain dots, dashes and underscores.\n    \n*   Compose can now read YAML configuration from standard input, rather than from a file, by specifying `-` as the filename. This makes it easier to generate configuration dynamically:\n    \n    ```\n    $ echo 'redis: {\"image\": \"redis\"}' | docker-compose --file - up\n    ```\n    \n*   There's a new `docker-compose version` command which prints extended information about Compose's bundled dependencies.\n    \n*   `docker-compose.yml` now supports `log_opt` as well as `log_driver`, allowing you to pass extra configuration to a service's logging driver.\n    \n*   `docker-compose.yml` now supports `memswap_limit`, similar to `docker run --memory-swap`.\n    \n*   When mounting volumes with the `volumes` option, you can now pass in any mode supported by the daemon, not just `:ro` or `:rw`. For example, SELinux users can pass `:z` or `:Z`.\n    \n*   You can now specify a custom volume driver with the `volume_driver` option in `docker-compose.yml`, much like `docker run --volume-driver`.\n    \n*   A bug has been fixed where Compose would fail to pull images from private registries serving plain (unsecured) HTTP. The `--allow-insecure-ssl` flag, which was previously used to work around this issue, has been deprecated and now has no effect.\n    \n*   A bug has been fixed where `docker-compose build` would fail if the build depended on a private Hub image or an image from a private registry.\n    \n*   A bug has been fixed where Compose would crash if there were containers which the Docker daemon had not finished removing.\n    \n*   Two bugs have been fixed where Compose would sometimes fail with a \"Duplicate bind mount\" error, or fail to attach volumes to a container, if there was a volume path specified in `docker-compose.yml` with a trailing slash.\n    \n\nThanks @mnowster, @dnephin, @ekristen, @funkyfuture, @jeffk and @lukemarsden!\n\n(2015-07-15)\n\n### [Regression fixes](#regression-fixes)\n\n*   When stopping containers gracefully, Compose was setting the timeout to 0, effectively forcing a SIGKILL every time.\n*   Compose would sometimes crash depending on the formatting of container data returned from the Docker API.\n\n(2015-07-14)\n\n### [Bug fixes](#bug-fixes-48)\n\n*   When there were one-off containers created by running `docker-compose run` on an older version of Compose, `docker-compose run` would fail with a name collision. Compose now shows an error if you have leftover containers of this type lying around, and tells you how to remove them.\n*   Compose was not reading Docker authentication config files created in the new location, `~/docker/config.json`, and authentication against private registries would therefore fail.\n*   When a container had a pseudo-TTY attached, its output in `docker-compose up` would be truncated.\n*   `docker-compose up --x-smart-recreate` would sometimes fail when an image tag was updated.\n*   `docker-compose up` would sometimes create two containers with the same numeric suffix.\n*   `docker-compose rm` and `docker-compose ps` would sometimes list services that aren't part of the current project (though no containers were erroneously removed).\n*   Some `docker-compose` commands would not show an error if invalid service names were passed in.\n\nThanks @dano, @josephpage, @kevinsimper, @lieryan, @phemmer, @soulrebel and @sschepens!\n\n(2015-06-21)\n\n### [Bug fixes](#bug-fixes-49)\n\n*   `docker-compose build` would always attempt to pull the base image before building.\n*   `docker-compose help migrate-to-labels` failed with an error.\n*   If no network mode was specified, Compose would set it to \"bridge\", rather than allowing the Docker daemon to use its configured default network mode.\n\n(2015-06-18)\n\n### [Important notes](#important-notes)\n\n*   **This release contains breaking changes, and you will need to either remove or migrate your existing containers before running your app** - see the [upgrading section of the install docs](https://github.com/docker/compose/blob/1.3.0rc1/docs/install.md#upgrading) for details.\n    \n*   Compose now requires Docker 1.6.0 or later.\n    \n\n### [Improvements](#improvements)\n\n*   Compose now uses container labels, rather than names, to keep track of containers. This makes Compose both faster and easier to integrate with your own tools.\n    \n*   Compose no longer uses \"intermediate containers\" when recreating containers for a service. This makes `docker-compose up` less complex and more resilient to failure.\n    \n\n### [New features](#new-features-20)\n\n*   `docker-compose up` has an **experimental** new behavior: it will only recreate containers for services whose configuration has changed in `docker-compose.yml`. This will eventually become the default, but for now you can take it for a spin:\n    \n    ```\n      $ docker-compose up --x-smart-recreate\n    ```\n    \n*   When invoked in a subdirectory of a project, `docker-compose` will now climb up through parent directories until it finds a `docker-compose.yml`.\n    \n\nSeveral new configuration keys have been added to `docker-compose.yml`:\n\n*   `dockerfile`, like `docker build --file`, lets you specify an alternate Dockerfile to use with `build`.\n*   `labels`, like `docker run --labels`, lets you add custom metadata to containers.\n*   `extra_hosts`, like `docker run --add-host`, lets you add entries to a container's `/etc/hosts` file.\n*   `pid: host`, like `docker run --pid=host`, lets you reuse the same PID namespace as the host machine.\n*   `cpuset`, like `docker run --cpuset-cpus`, lets you specify which CPUs to allow execution in.\n*   `read_only`, like `docker run --read-only`, lets you mount a container's filesystem as read-only.\n*   `security_opt`, like `docker run --security-opt`, lets you specify [security options](https://docs.docker.com/reference/cli/docker/container/run/#security-opt).\n*   `log_driver`, like `docker run --log-driver`, lets you specify a [log driver](https://docs.docker.com/reference/cli/docker/container/run/#log-driver).\n\n### [Bug fixes](#bug-fixes-50)\n\n*   The output of `docker-compose run` was sometimes truncated, especially when running under Jenkins.\n*   A service's volumes would sometimes not update after volume configuration was changed in `docker-compose.yml`.\n*   Authenticating against third-party registries would sometimes fail.\n*   `docker-compose run --rm` would fail to remove the container if the service had a `restart` policy in place.\n*   `docker-compose scale` would refuse to scale a service beyond 1 container if it exposed a specific port number on the host.\n*   Compose would refuse to create multiple volume entries with the same host path.\n\nThanks @ahromis, @albers, @aleksandr-vin, @antoineco, @ccverak, @chernjie, @dnephin, @edmorley, @fordhurley, @josephpage, @KyleJamesWalker, @lsowen, @mchasal, @noironetworks, @sdake, @sdurrheimer, @sherter, @stephenlawrence, @thaJeztah, @thieman, @turtlemonvh, @twhiteman, @vdemeester, @xuxinkun and @zwily!\n\n(2015-04-16)\n\n*   `docker-compose.yml` now supports an `extends` option, which enables a service to inherit configuration from another service in another configuration file. This is really good for sharing common configuration between apps, or for configuring the same app for different environments. Here's the [documentation](https://github.com/docker/compose/blob/master/docs/).\n    \n*   When using Compose with a Swarm cluster, containers that depend on one another will be co-scheduled on the same node. This means that most Compose apps will now work out of the box, as long as they don't use `build`.\n    \n*   Repeated invocations of `docker-compose up` when using Compose with a Swarm cluster now work reliably.\n    \n*   Directories passed to `build`, filenames passed to `env_file` and volume host paths passed to `volumes` are now treated as relative to the _directory of the configuration file_, not the directory that `docker-compose` is being run in. In the majority of cases, those are the same, but if you use the `-f|--file` argument to specify a configuration file in another directory, **this is a breaking change**.\n    \n*   A service can now share another service's network namespace with `net: container:<service>`.\n    \n*   `volumes_from` and `net: container:<service>` entries are taken into account when resolving dependencies, so `docker-compose up <service>` will correctly start all dependencies of `<service>`.\n    \n*   `docker-compose run` now accepts a `--user` argument to specify a user to run the command as, just like `docker run`.\n    \n*   The `up`, `stop` and `restart` commands now accept a `--timeout` (or `-t`) argument to specify how long to wait when attempting to gracefully stop containers, just like `docker stop`.\n    \n*   `docker-compose rm` now accepts `-f` as a shorthand for `--force`, just like `docker rm`.\n    \n\nThanks, @abesto, @albers, @alunduil, @dnephin, @funkyfuture, @gilclark, @IanVS, @KingsleyKelly, @knutwalker, @thaJeztah and @vmalloc!\n\n(2015-02-25)\n\nFig has been renamed to Docker Compose, or just Compose for short. This has several implications for you:\n\n*   The command you type is now `docker-compose`, not `fig`.\n*   You should rename your fig.yml to docker-compose.yml.\n*   If you’re installing via PyPI, the package is now `docker-compose`, so install it with `pip install docker-compose`.\n\nBesides that, there’s a lot of new stuff in this release:\n\n*   We’ve made a few small changes to ensure that Compose will work with Swarm, Docker’s new clustering tool ( [https://github.com/docker/swarm)](https://github.com/docker/swarm%29). Eventually you'll be able to point Compose at a Swarm cluster instead of a standalone Docker host and it’ll run your containers on the cluster with no extra work from you. As Swarm is still developing, integration is rough and lots of Compose features don't work yet.\n    \n*   `docker-compose run` now has a `--service-ports` flag for exposing ports on the given service. This is useful for running your webapp with an interactive debugger, for example.\n    \n*   You can now link to containers outside your app with the `external_links` option in docker-compose.yml.\n    \n*   You can now prevent `docker-compose up` from automatically building images with the `--no-build` option. This will make fewer API calls and run faster.\n    \n*   If you don’t specify a tag when using the `image` key, Compose will default to the `latest` tag, rather than pulling all tags.\n    \n*   `docker-compose kill` now supports the `-s` flag, allowing you to specify the exact signal you want to send to a service’s containers.\n    \n*   docker-compose.yml now has an `env_file` key, analogous to `docker run --env-file`, letting you specify multiple environment variables in a separate file. This is great if you have a lot of them, or if you want to keep sensitive information out of version control.\n    \n*   docker-compose.yml now supports the `dns_search`, `cap_add`, `cap_drop`, `cpu_shares` and `restart` options, analogous to `docker run`’s `--dns-search`, `--cap-add`, `--cap-drop`, `--cpu-shares` and `--restart` options.\n    \n*   Compose now ships with Bash tab completion - see the installation and usage docs at [https://github.com/docker/compose/blob/1.1.0/docs/completion.md](https://github.com/docker/compose/blob/1.1.0/docs/completion.md)\n    \n*   A number of bugs have been fixed - see the milestone for details: [https://github.com/docker/compose/issues?q=milestone%3A1.1.0+](https://github.com/docker/compose/issues?q=milestone%3A1.1.0+)\n    \n\nThanks @dnephin, @squebe, @jbalonso, @raulcd, @benlangfield, @albers, @ggtools, @bersace, @dtenenba, @petercv, @drewkett, @TFenby, @paulRbr, @Aigeruth and @salehe!\n\n(2014-11-04)\n\n*   Added an `--allow-insecure-ssl` option to allow `fig up`, `fig run` and `fig pull` to pull from insecure registries.\n*   Fixed `fig run` not showing output in Jenkins.\n*   Fixed a bug where Fig couldn't build Dockerfiles with ADD statements pointing at URLs.\n\n(2014-10-16)\n\nThe highlights:\n\n*   [Fig has joined Docker.](https://www.orchardup.com/blog/orchard-is-joining-docker) Fig will continue to be maintained, but we'll also be incorporating the best bits of Fig into Docker itself.\n    \n    This means the GitHub repository has moved to [https://github.com/docker/fig](https://github.com/docker/fig) and our IRC channel is now #docker-fig on Freenode.\n    \n*   Fig can be used with the [official Docker OS X installer](https://docs.docker.com/desktop/install/mac-install/). Boot2Docker will mount the home directory from your host machine so volumes work as expected.\n    \n*   Fig supports Docker 1.3.\n    \n*   It is now possible to connect to the Docker daemon using TLS by using the `DOCKER_CERT_PATH` and `DOCKER_TLS_VERIFY` environment variables.\n    \n*   There is a new `fig port` command which outputs the host port binding of a service, in a similar way to `docker port`.\n    \n*   There is a new `fig pull` command which pulls the latest images for a service.\n    \n*   There is a new `fig restart` command which restarts a service's containers.\n    \n*   Fig creates multiple containers in service by appending a number to the service name. For example, `db_1`, `db_2`. As a convenience, Fig will now give the first container an alias of the service name. For example, `db`.\n    \n    This link alias is also a valid hostname and added to `/etc/hosts` so you can connect to linked services using their hostname. For example, instead of resolving the environment variables `DB_PORT_5432_TCP_ADDR` and `DB_PORT_5432_TCP_PORT`, you could just use the hostname `db` and port `5432` directly.\n    \n*   Volume definitions now support `ro` mode, expanding `~` and expanding environment variables.\n    \n*   `.dockerignore` is supported when building.\n    \n*   The project name can be set with the `FIG_PROJECT_NAME` environment variable.\n    \n*   The `--env` and `--entrypoint` options have been added to `fig run`.\n    \n*   The Fig binary for Linux is now linked against an older version of glibc so it works on CentOS 6 and Debian Wheezy.\n    \n\nOther things:\n\n*   `fig ps` now works on Jenkins and makes fewer API calls to the Docker daemon.\n*   `--verbose` displays more useful debugging output.\n*   When starting a service where `volumes_from` points to a service without any containers running, that service will now be started.\n*   Lots of docs improvements. Notably, environment variables are documented and official repositories are used throughout.\n\nThanks @dnephin, @d11wtq, @marksteve, @rubbish, @jbalonso, @timfreund, @alunduil, @mieciu, @shuron, @moss, @suzaku and @chmouel! Whew.\n\n(2014-07-28)\n\n*   Added a `--no-cache` option to `fig build`, which bypasses the cache just like `docker build --no-cache`.\n*   Fixed the `dns:` fig.yml option, which was causing fig to error out.\n*   Fixed a bug where fig couldn't start under Python 2.6.\n*   Fixed a log-streaming bug that occasionally caused fig to exit.\n\nThanks @dnephin and @marksteve!\n\n(2014-07-11)\n\n*   If a service has a command defined, `fig run [service]` with no further arguments will run it.\n*   The project name now defaults to the directory containing fig.yml, not the current working directory (if they're different)\n*   `volumes_from` now works properly with containers as well as services\n*   Fixed a race condition when recreating containers in `fig up`\n\nThanks @ryanbrainard and @d11wtq!\n\n(2014-07-11)\n\n*   Fig now starts links when you run `fig run` or `fig up`.\n    \n    For example, if you have a `web` service which depends on a `db` service, `fig run web ...` will start the `db` service.\n    \n*   Environment variables can now be resolved from the environment that Fig is running in. Just specify it as a blank variable in your `fig.yml` and, if set, it'll be resolved:\n    \n*   `volumes_from` is now supported in `fig.yml`. All of the volumes from the specified services and containers will be mounted:\n    \n*   A host address can now be specified in `ports`:\n    \n*   The `net` and `workdir` options are now supported in `fig.yml`.\n    \n*   The `hostname` option now works in the same way as the Docker CLI, splitting out into a `domainname` option.\n    \n*   TTY behavior is far more robust, and resizes are supported correctly.\n    \n*   Load YAML files safely.\n    \n\nThanks to @d11wtq, @ryanbrainard, @rail44, @j0hnsmith, @binarin, @Elemecca, @mozz100 and @marksteve for their help with this release!\n\n(2014-06-18)\n\n*   Fix various encoding errors when using `fig run`, `fig up` and `fig build`.\n\n(2014-05-08)\n\n*   Add support for Docker 0.11.0. (Thanks @marksteve!)\n*   Make project name configurable. (Thanks @jefmathiot!)\n*   Return correct exit code from `fig run`.\n\n(2014-04-29)\n\n*   Support Docker 0.9 and 0.10\n*   Display progress bars correctly when pulling images (no more ski slopes)\n*   `fig up` now stops all services when any container exits\n*   Added support for the `privileged` config option in fig.yml (thanks @kvz!)\n*   Shortened and aligned log prefixes in `fig up` output\n*   Only containers started with `fig run` link back to their own service\n*   Handle UTF-8 correctly when streaming `fig build/run/up` output (thanks @mauvm and @shanejonas!)\n*   Error message improvements\n\n(2014-03-05)\n\n*   Added an `--rm` option to `fig run`. (Thanks @marksteve!)\n*   Added an `expose` option to `fig.yml`.\n\n(2014-03-04)\n\n*   Added contribution instructions. (Thanks @kvz!)\n*   Fixed `fig rm` throwing an error.\n*   Fixed a bug in `fig ps` on Docker 0.8.1 when there is a container with no command.\n\n(2014-03-03)\n\n*   We now ship binaries for OS X and Linux. No more having to install with Pip!\n*   Add `-f` flag to specify alternate `fig.yml` files\n*   Add support for custom link names\n*   Fix a bug where recreating would sometimes hang\n*   Update docker-py to support Docker 0.8.0.\n*   Various documentation improvements\n*   Various error message improvements\n\nThanks @marksteve, @Gazler and @teozkr!\n\n(2014-02-17)\n\n*   Resolve dependencies using Cormen/Tarjan topological sort\n*   Fix `fig up` not printing log output\n*   Stop containers in reverse order to starting\n*   Fix scale command not binding ports\n\nThanks to @barnybug and @dustinlacewell for their work on this release.\n\n(2014-02-04)\n\n*   General improvements to error reporting (#77, #79)\n\n(2014-01-31)\n\n*   Link services to themselves so run commands can access the running service. (#67)\n*   Much better documentation.\n*   Make service dependency resolution more reliable. (#48)\n*   Load Fig configurations with a `.yaml` extension. (#58)\n\nBig thanks to @cameronmaske, @mrchrisadams and @damianmoore for their help with this release.\n\n(2014-01-27)\n\n*   Add a link alias without the project name. This makes the environment variables a little shorter: `REDIS_1_PORT_6379_TCP_ADDR`. (#54)\n\n(2014-01-23)\n\n*   Fix ports sometimes being configured incorrectly. (#46)\n*   Fix log output sometimes not displaying. (#47)\n\n(2014-01-22)\n\n*   Add `-T` option to `fig run` to disable pseudo-TTY. (#34)\n*   Fix `fig up` requiring the ubuntu image to be pulled to recreate containers. (#33) Thanks @cameronmaske!\n*   Improve reliability, fix arrow keys and fix a race condition in `fig run`. (#34, #39, #40)\n\n(2014-01-17)\n\n*   Fix bug where ports were not exposed correctly (#29). Thanks @dustinlacewell!\n\n(2014-01-16)\n\n*   Containers are recreated on each `fig up`, ensuring config is up-to-date with `fig.yml` (#2)\n*   Add `fig scale` command (#9)\n*   Use `DOCKER_HOST` environment variable to find Docker daemon, for consistency with the official Docker client (was previously `DOCKER_URL`) (#19)\n*   Truncate long commands in `fig ps` (#18)\n*   Fill out CLI help banners for commands (#15, #16)\n*   Show a friendlier error when `fig.yml` is missing (#4)\n*   Fix bug with `fig build` logging (#3)\n*   Fix bug where builds would time out if a step took a long time without generating output (#6)\n*   Fix bug where streaming container output over the Unix socket raised an error (#7)\n\nBig thanks to @tomstuart, @EnTeQuAk, @schickling, @aronasorman and @GeoffreyPlitt.\n\n(2014-01-02)\n\n*   Improve documentation\n*   Try to connect to Docker on `tcp://localdocker:4243` and a UNIX socket in addition to `localhost`.\n*   Improve `fig up` behavior\n*   Add confirmation prompt to `fig rm`\n*   Add `fig build` command\n\n(2013-12-20)\n\nInitial release.",
    "title": "Docker Compose release notes | Docker Docs\n",
    "description": "Learn about the new features, bug fixes, and breaking changes for the newest Docker Compose release",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file",
    "markdown": "# Overview | Docker Docs\n\n> **New to Docker Compose?**\n> \n> Find more information about the [key features and use cases of Docker Compose](https://docs.docker.com/compose/intro/features-uses/) or [try the quickstart guide](https://docs.docker.com/compose/gettingstarted/).\n\nThe Compose Specification is the latest and recommended version of the Compose file format. It helps you define a [Compose file](https://docs.docker.com/compose/compose-application-model/) which is used to configure your Docker application’s services, networks, volumes, and more.\n\nLegacy versions 2.x and 3.x of the Compose file format were merged into the Compose Specification. It is implemented in versions 1.27.0 and above (also known as Compose V2) of the Docker Compose CLI.\n\nThe Compose Specification on Docker Docs is the Docker Compose implementation. If you wish to implement your own version of the Compose Specification, see the [Compose Specification repository](https://github.com/compose-spec/compose-spec).\n\nUse the following links to navigate key sections of the Compose Specification.",
    "title": "Overview | Docker Docs\n",
    "description": "Find the latest recommended version of the Docker Compose file format for defining multi-container applications.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/api/v1.31/",
    "markdown": "Docker Engine API v1.31 Reference",
    "title": "Docker Engine API v1.31 Reference",
    "description": "Reference documentation and Swagger (OpenAPI) specification for the v1.31 version of the API served by Docker Engine.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/legacy-versions/",
    "markdown": "# Legacy versions | Docker Docs\n\nThe legacy versions of the Compose file reference has moved to the [V1 branch of the Compose repository](https://github.com/docker/compose/tree/v1/docs). They are no longer being actively maintained.\n\nThe latest and recommended version of the Compose file format is defined by the [Compose Specification](https://docs.docker.com/compose/compose-file/). This format merges the 2.x and 3.x versions and is implemented by **Compose 1.27.0+**. For more information, see the [History and development of Docker Compose](https://docs.docker.com/compose/intro/history/).",
    "title": "Legacy versions | Docker Docs\n",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/09-secrets/",
    "markdown": "# Secrets top-level elements | Docker Docs\n\nSecrets are a flavor of [Configs](https://docs.docker.com/compose/compose-file/08-configs/) focusing on sensitive data, with specific constraint for this usage.\n\nServices can only access secrets when explicitly granted by a [`secrets` attribute](https://docs.docker.com/compose/compose-file/05-services/#secrets) within the `services` top-level element.\n\nThe top-level `secrets` declaration defines or references sensitive data that is granted to the services in your Compose application. The source of the secret is either `file` or `environment`.\n\n*   `file`: The secret is created with the contents of the file at the specified path.\n*   `environment`: The secret is created with the value of an environment variable.\n\n`server-certificate` secret is created as `<project_name>_server-certificate` when the application is deployed, by registering content of the `server.cert` as a platform secret.\n\n`token` secret is created as `<project_name>_token` when the application is deployed, by registering the content of the `OAUTH_TOKEN` environment variable as a platform secret.\n\nFor more information, see [How to use secrets in Compose](https://docs.docker.com/compose/use-secrets/).",
    "title": "Secrets top-level elements | Docker Docs\n",
    "description": "Explore all the attributes the secrets top-level element can have.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/api/version-history/",
    "markdown": "# Engine API version history | Docker Docs\n\n[Docker Engine API v1.46](https://docs.docker.com/engine/api/v1.46/) documentation\n\n*   `GET /info` now includes a `Containerd` field containing information about the location of the containerd API socket and containerd namespaces used by the daemon to run containers and plugins.\n*   `POST /containers/create` field `NetworkingConfig.EndpointsConfig.DriverOpts`, and `POST /networks/{id}/connect` field `EndpointsConfig.DriverOpts`, now support label `com.docker.network.endpoint.sysctls` for setting per-interface sysctls. The value is a comma separated list of sysctl assignments, the interface name must be \"IFNAME\". For example, to set `net.ipv4.config.eth0.log_martians=1`, use `net.ipv4.config.IFNAME.log_martians=1`. In API versions up-to 1.46, top level `--sysctl` settings for `eth0` will be migrated to `DriverOpts` when possible. This automatic migration will be removed for API versions 1.47 and greater.\n*   `GET /containers/json` now returns the annotations of containers.\n*   `POST /images/{name}/push` now supports a `platform` parameter (JSON encoded OCI Platform type) that allows selecting a specific platform manifest from the multi-platform image.\n*   `POST /containers/create` now takes `Options` as part of `HostConfig.Mounts.TmpfsOptions` to set options for tmpfs mounts.\n*   `POST /services/create` now takes `Options` as part of `ContainerSpec.Mounts.TmpfsOptions`, to set options for tmpfs mounts.\n*   `GET /events` now supports image `create` event that is emitted when a new image is built regardless if it was tagged or not.\n\n### [Deprecated Config fields in `GET /images/{name}/json` response](#deprecated-config-fields-in-get-imagesnamejson-response)\n\nThe `Config` field returned by this endpoint (used for \"image inspect\") returns additional fields that are not part of the image's configuration and not part of the [Docker Image Spec](https://github.com/moby/docker-image-spec/blob/v1.3.1/specs-go/v1/image.go#L19-L32) and the [OCI Image Spec](https://github.com/opencontainers/image-spec/blob/v1.1.0/specs-go/v1/config.go#L24-L62).\n\nThese additional fields are included in the response, due to an implementation detail, where the [api/types.ImageInspec](https://github.com/moby/moby/blob/v26.1.4/api/types/types.go#L87-L104) type used for the response is using the [container.Config](https://github.com/moby/moby/blob/v26.1.4/api/types/container/config.go#L47-L82) type.\n\nThe [container.Config](https://github.com/moby/moby/blob/v26.1.4/api/types/container/config.go#L47-L82) type is a superset of the image config, and while the image's Config is used as a _template_ for containers created from the image, the additional fields are set at runtime (from options passed when creating the container) and not taken from the image Config.\n\nThese fields are never set (and always return the default value for the type), but are not omitted in the response when left empty. As these fields were not intended to be part of the image configuration response, they are deprecated, and will be removed from the API.\n\nThe following fields are currently included in the API response, but are not part of the underlying image's Config, and deprecated:\n\n*   `Hostname`\n*   `Domainname`\n*   `AttachStdin`\n*   `AttachStdout`\n*   `AttachStderr`\n*   `Tty`\n*   `OpenStdin`\n*   `StdinOnce`\n*   `Image`\n*   `NetworkDisabled` (already omitted unless set)\n*   `MacAddress` (already omitted unless set)\n*   `StopTimeout` (already omitted unless set)\n\n*   `POST /services/create` and `POST /services/{id}/update` now support OomScoreAdj\n\n[Docker Engine API v1.45](https://docs.docker.com/engine/api/v1.45/) documentation\n\n*   `POST /containers/create` now supports `VolumeOptions.Subpath` which allows a subpath of a named volume to be mounted.\n*   `POST /images/search` will always assume a `false` value for the `is-automated` field. Consequently, searching for `is-automated=true` will yield no results, while `is-automated=false` will be a no-op.\n*   `GET /images/{name}/json` no longer includes the `Container` and `ContainerConfig` fields. To access image configuration, use `Config` field instead.\n*   The `Aliases` field returned in calls to `GET /containers/{name:.*}/json` no longer contains the short container ID, but instead will reflect exactly the values originally submitted to the `POST /containers/create` endpoint. The newly introduced `DNSNames` should now be used instead when short container IDs are needed.\n\n[Docker Engine API v1.44](https://docs.docker.com/engine/api/v1.44/) documentation\n\n*   GET `/images/json` now accepts an `until` filter. This accepts a timestamp and lists all images created before it. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   The `VirtualSize` field in the `GET /images/{name}/json`, `GET /images/json`, and `GET /system/df` responses is now omitted. Use the `Size` field instead, which contains the same information.\n*   Deprecated: The `is_automated` field in the `GET /images/search` response has been deprecated and will always be set to false in the future because Docker Hub is deprecating the `is_automated` field in its search API. The deprecation is not versioned, and applies to all API versions.\n*   Deprecated: The `is-automated` filter for the `GET /images/search` endpoint. The `is_automated` field has been deprecated by Docker Hub's search API. Consequently, searching for `is-automated=true` will yield no results. The deprecation is not versioned, and applies to all API versions.\n*   Read-only bind mounts are now made recursively read-only on kernel >= 5.12 with runtimes which support the feature. `POST /containers/create`, `GET /containers/{id}/json`, and `GET /containers/json` now supports `BindOptions.ReadOnlyNonRecursive` and `BindOptions.ReadOnlyForceRecursive` to customize the behavior.\n*   `POST /containers/create` now accepts a `HealthConfig.StartInterval` to set the interval for health checks during the start period.\n*   `GET /info` now includes a `CDISpecDirs` field indicating the configured CDI specifications directories. The use of the applied setting requires the daemon to have expermental enabled, and for non-experimental daemons an empty list is always returned.\n*   `POST /networks/create` now returns a 400 if the `IPAMConfig` has invalid values. Note that this change is _unversioned_ and applied to all API versions on daemon that support version 1.44.\n*   `POST /networks/create` with a duplicated name now fails systematically. As such, the `CheckDuplicate` field is now deprecated. Note that this change is _unversioned_ and applied to all API versions on daemon that support version 1.44.\n*   `POST /containers/create` now accepts multiple `EndpointSettings` in `NetworkingConfig.EndpointSettings`.\n*   `POST /containers/create` and `POST /networks/{id}/connect` will now catch validation errors that were previously only returned during `POST /containers/{id}/start`. These endpoints will also return the full set of validation errors they find, instead of returning only the first one. Note that this change is _unversioned_ and applies to all API versions.\n*   `POST /services/create` and `POST /services/{id}/update` now accept `Seccomp` and `AppArmor` fields in the `ContainerSpec.Privileges` object. This allows some configuration of Seccomp and AppArmor in Swarm services.\n*   A new endpoint-specific `MacAddress` field has been added to `NetworkSettings.EndpointSettings` on `POST /containers/create`, and to `EndpointConfig` on `POST /networks/{id}/connect`. The container-wide `MacAddress` field in `Config`, on `POST /containers/create`, is now deprecated.\n*   The field `Networks` in the `POST /services/create` and `POST /services/{id}/update` requests is now deprecated. You should instead use the field `TaskTemplate.Networks`.\n*   The `Container` and `ContainerConfig` fields in the `GET /images/{name}/json` response are deprecated and will no longer be included in API v1.45.\n*   `GET /info` now includes `status` properties in `Runtimes`.\n*   A new field named `DNSNames` and containing all non-fully qualified DNS names a container takes on a specific network has been added to `GET /containers/{name:.*}/json`.\n*   The `Aliases` field returned in calls to `GET /containers/{name:.*}/json` in v1.44 and older versions contains the short container ID. This will change in the next API version, v1.45. Starting with that API version, this specific value will be removed from the `Aliases` field such that this field will reflect exactly the values originally submitted to the `POST /containers/create` endpoint. The newly introduced `DNSNames` should now be used instead.\n*   The fields `HairpinMode`, `LinkLocalIPv6Address`, `LinkLocalIPv6PrefixLen`, `SecondaryIPAddresses`, `SecondaryIPv6Addresses` available in `NetworkSettings` when calling `GET /containers/{id}/json` are deprecated and will be removed in a future release. You should instead look for the default network in `NetworkSettings.Networks`.\n*   `GET /images/{id}/json` omits the `Created` field (previously it was `0001-01-01T00:00:00Z`) if the `Created` field is missing from the image config.\n\n[Docker Engine API v1.43](https://docs.docker.com/engine/api/v1.43/) documentation\n\n*   `POST /containers/create` now accepts `Annotations` as part of `HostConfig`. Can be used to attach arbitrary metadata to the container, which will also be passed to the runtime when the container is started.\n*   `GET /images/json` no longer includes hardcoded `<none>:<none>` and `<none>@<none>` in `RepoTags` and`RepoDigests` for untagged images. In such cases, empty arrays will be produced instead.\n*   The `VirtualSize` field in the `GET /images/{name}/json`, `GET /images/json`, and `GET /system/df` responses is deprecated and will no longer be included in API v1.44. Use the `Size` field instead, which contains the same information.\n*   `GET /info` now includes `no-new-privileges` in the `SecurityOptions` string list when this option is enabled globally. This change is not versioned, and affects all API versions if the daemon has this patch.\n\n[Docker Engine API v1.42](https://docs.docker.com/engine/api/v1.42/) documentation\n\n*   Removed the `BuilderSize` field on the `GET /system/df` endpoint. This field was introduced in API 1.31 as part of an experimental feature, and no longer used since API 1.40. Use field `BuildCache` instead to track storage used by the builder component.\n    \n*   `POST /containers/{id}/stop` and `POST /containers/{id}/restart` now accept a `signal` query parameter, which allows overriding the container's default stop- signal.\n    \n*   `GET /images/json` now accepts query parameter `shared-size`. When set `true`, images returned will include `SharedSize`, which provides the size on disk shared with other images present on the system.\n    \n*   `GET /system/df` now accepts query parameter `type`. When set, computes and returns data only for the specified object type. The parameter can be specified multiple times to select several object types. Supported values are: `container`, `image`, `volume`, `build-cache`.\n    \n*   `GET /system/df` can now be used concurrently. If a request is made while a previous request is still being processed, the request will receive the result of the already running calculation, once completed. Previously, an error (`a disk usage operation is already running`) would be returned in this situation. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   The `POST /images/create` now supports both the operating system and architecture that is passed through the `platform` query parameter when using the `fromSrc` option to import an image from an archive. Previously, only the operating system was used and the architecture was ignored. If no `platform` option is set, the host's operating system and architecture as used as default. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   The `POST /containers/{id}/wait` endpoint now returns a `400` status code if an invalid `condition` is provided (on API 1.30 and up).\n    \n*   Removed the `KernelMemory` field from the `POST /containers/create` and `POST /containers/{id}/update` endpoints, any value it is set to will be ignored on API version `v1.42` and up. Older API versions still accept this field, but may take no effect, depending on the kernel version and OCI runtime in use.\n    \n*   `GET /containers/{id}/json` now omits the `KernelMemory` and `KernelMemoryTCP` if they are not set.\n    \n*   `GET /info` now omits the `KernelMemory` and `KernelMemoryTCP` if they are not supported by the host or host's configuration (if cgroups v2 are in use).\n    \n*   `GET /_ping` and `HEAD /_ping` now return `Builder-Version` by default. This header contains the default builder to use, and is a recommendation as advertised by the daemon. However, it is up to the client to choose which builder to use.\n    \n    The default value on Linux is version \"2\" (BuildKit), but the daemon can be configured to recommend version \"1\" (classic Builder). Windows does not yet support BuildKit for native Windows images, and uses \"1\" (classic builder) as a default.\n    \n    This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   `GET /_ping` and `HEAD /_ping` now return a `Swarm` header, which allows a client to detect if Swarm is enabled on the daemon, without having to call additional endpoints. This change is not versioned, and affects all API versions if the daemon has this patch. Clients must consider this header \"optional\", and fall back to using other endpoints to get this information if the header is not present.\n    \n    The `Swarm` header can contain one of the following values:\n    \n    *   \"inactive\"\n    *   \"pending\"\n    *   \"error\"\n    *   \"locked\"\n    *   \"active/worker\"\n    *   \"active/manager\"\n*   `POST /containers/create` for Windows containers now accepts a new syntax in `HostConfig.Resources.Devices.PathOnHost`. As well as the existing `class/<GUID>` syntax, `<IDType>://<ID>` is now recognised. Support for specific `<IDType>` values depends on the underlying implementation and Windows version. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   `GET /containers/{id}/attach`, `GET /exec/{id}/start`, `GET /containers/{id}/logs` `GET /services/{id}/logs` and `GET /tasks/{id}/logs` now set Content-Type header to `application/vnd.docker.multiplexed-stream` when a multiplexed stdout/stderr stream is sent to client, `application/vnd.docker.raw-stream` otherwise.\n    \n*   `POST /volumes/create` now accepts a new `ClusterVolumeSpec` to create a cluster volume (CNI). This option can only be used if the daemon is a Swarm manager. The Volume response on creation now also can contain a `ClusterVolume` field with information about the created volume.\n    \n*   The `BuildCache.Parent` field, as returned by `GET /system/df` is deprecated and is now omitted. API versions before v1.42 continue to include this field.\n    \n*   `GET /system/df` now includes a new `Parents` field, for \"build-cache\" records, which contains a list of parent IDs for the build-cache record.\n    \n*   Volume information returned by `GET /volumes/{name}`, `GET /volumes` and `GET /system/df` can now contain a `ClusterVolume` if the volume is a cluster volume (requires the daemon to be a Swarm manager).\n    \n*   The `Volume` type, as returned by `Added new` ClusterVolume\\` fields\n    \n*   Added a new `PUT /volumes{name}` endpoint to update cluster volumes (CNI). Cluster volumes are only supported if the daemon is a Swarm manager.\n    \n*   `GET /containers/{name}/attach/ws` endpoint now accepts `stdin`, `stdout` and `stderr` query parameters to only attach to configured streams.\n    \n    NOTE: These parameters were documented before in older API versions, but not actually supported. API versions before v1.42 continue to ignore these parameters and default to attaching to all streams. To preserve the pre-v1.42 behavior, set all three query parameters (`?stdin=1,stdout=1,stderr=1`).\n    \n*   `POST /containers/create` on Linux now respects the `HostConfig.ConsoleSize` property. Container is immediately created with the desired terminal size and clients no longer need to set the desired size on their own.\n    \n*   `POST /containers/create` allow to set `CreateMountpoint` for host path to be created if missing. This brings parity with `Binds`\n    \n*   `POST /containers/create` rejects request if BindOptions|VolumeOptions|TmpfsOptions is set with a non-matching mount Type.\n    \n*   `POST /containers/{id}/exec` now accepts an optional `ConsoleSize` parameter. It allows to set the console size of the executed process immediately when it's created.\n    \n*   `POST /volumes/prune` will now only prune \"anonymous\" volumes (volumes which were not given a name) by default. A new filter parameter `all` can be set to a truth-y value (`true`, `1`) to get the old behavior.\n    \n\n[Docker Engine API v1.41](https://docs.docker.com/engine/api/v1.41/) documentation\n\n*   `GET /events` now returns `prune` events after pruning resources have completed. Prune events are returned for `container`, `network`, `volume`, `image`, and `builder`, and have a `reclaimed` attribute, indicating the amount of space reclaimed (in bytes).\n    \n*   `GET /info` now returns a `CgroupVersion` field, containing the cgroup version.\n    \n*   `GET /info` now returns a `DefaultAddressPools` field, containing a list of custom default address pools for local networks, which can be specified in the `daemon.json` file or `--default-address-pool` dockerd option.\n    \n*   `POST /services/create` and `POST /services/{id}/update` now supports `BindOptions.NonRecursive`.\n    \n*   The `ClusterStore` and `ClusterAdvertise` fields in `GET /info` are deprecated and are now omitted if they contain an empty value. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   The `filter` (singular) query parameter, which was deprecated in favor of the `filters` option in Docker 1.13, has now been removed from the `GET /images/json` endpoint. The parameter remains available when using API version 1.40 or below.\n    \n*   `GET /services` now returns `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `GET /services/{id}` now returns `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `POST /services/create` now accepts `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `POST /services/{id}/update` now accepts `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `GET /tasks` now returns `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `GET /tasks/{id}` now returns `CapAdd` and `CapDrop` as part of the `ContainerSpec`.\n    \n*   `GET /services` now returns `Pids` in `TaskTemplate.Resources.Limits`.\n    \n*   `GET /services/{id}` now returns `Pids` in `TaskTemplate.Resources.Limits`.\n    \n*   `POST /services/create` now accepts `Pids` in `TaskTemplate.Resources.Limits`.\n    \n*   `POST /services/{id}/update` now accepts `Pids` in `TaskTemplate.Resources.Limits` to limit the maximum number of PIDs.\n    \n*   `GET /tasks` now returns `Pids` in `TaskTemplate.Resources.Limits`.\n    \n*   `GET /tasks/{id}` now returns `Pids` in `TaskTemplate.Resources.Limits`.\n    \n*   `POST /containers/create` now accepts a `platform` query parameter in the format `os[/arch[/variant]]`.\n    \n    When set, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a `404` status.\n    \n    If the option is _not_ set, the host's native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image _does_ exist in the local image cache, but its OS or architecture do not match, the container is created with the available image, and a warning is added to the `Warnings` field in the response, for example;\n    \n    ```\n    WARNING: The requested image's platform (linux/arm64/v8) does not\n             match the detected host platform (linux/amd64) and no\n             specific platform was requested\n    ```\n    \n*   `POST /containers/create` on Linux now accepts the `HostConfig.CgroupnsMode` property. Set the property to `host` to create the container in the daemon's cgroup namespace, or `private` to create the container in its own private cgroup namespace. The per-daemon default is `host`, and can be changed by using the`CgroupNamespaceMode` daemon configuration parameter.\n    \n*   `GET /info` now returns an `OSVersion` field, containing the operating system's version. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   `GET /info` no longer returns the `SystemStatus` field if it does not have a value set. This change is not versioned, and affects all API versions if the daemon has this patch.\n    \n*   `GET /services` now accepts query parameter `status`. When set `true`, services returned will include `ServiceStatus`, which provides Desired, Running, and Completed task counts for the service.\n    \n*   `GET /services` may now include `ReplicatedJob` or `GlobalJob` as the `Mode` in a `ServiceSpec`.\n    \n*   `GET /services/{id}` may now include `ReplicatedJob` or `GlobalJob` as the `Mode` in a `ServiceSpec`.\n    \n*   `POST /services/create` now accepts `ReplicatedJob or` GlobalJob`as the`Mode`in the`ServiceSpec.\n    \n*   `POST /services/{id}/update` accepts updating the fields of the `ReplicatedJob` object in the `ServiceSpec.Mode`. The service mode still cannot be changed, however.\n    \n*   `GET /services` now includes `JobStatus` on Services with mode `ReplicatedJob` or `GlobalJob`.\n    \n*   `GET /services/{id}` now includes `JobStatus` on Services with mode `ReplicatedJob` or `GlobalJob`.\n    \n*   `GET /tasks` now includes `JobIteration` on Tasks spawned from a job-mode service.\n    \n*   `GET /tasks/{id}` now includes `JobIteration` on the task if spawned from a job-mode service.\n    \n*   `GET /containers/{id}/stats` now accepts a query param (`one-shot`) which, when used with `stream=false` fetches a single set of stats instead of waiting for two collection cycles to have 2 CPU stats over a 1 second period.\n    \n*   The `KernelMemory` field in `HostConfig.Resources` is now deprecated.\n    \n*   The `KernelMemory` field in `Info` is now deprecated.\n    \n*   `GET /services` now returns `Ulimits` as part of `ContainerSpec`.\n    \n*   `GET /services/{id}` now returns `Ulimits` as part of `ContainerSpec`.\n    \n*   `POST /services/create` now accepts `Ulimits` as part of `ContainerSpec`.\n    \n*   `POST /services/{id}/update` now accepts `Ulimits` as part of `ContainerSpec`.\n    \n\n[Docker Engine API v1.40](https://docs.docker.com/engine/api/v1.40/) documentation\n\n*   The `/_ping` endpoint can now be accessed both using `GET` or `HEAD` requests. when accessed using a `HEAD` request, all headers are returned, but the body is empty (`Content-Length: 0`). This change is not versioned, and affects all API versions if the daemon has this patch. Clients are recommended to try using `HEAD`, but fallback to `GET` if the `HEAD` requests fails.\n*   `GET /_ping` and `HEAD /_ping` now set `Cache-Control` and `Pragma` headers to prevent the result from being cached. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   `GET /services` now returns `Sysctls` as part of the `ContainerSpec`.\n*   `GET /services/{id}` now returns `Sysctls` as part of the `ContainerSpec`.\n*   `POST /services/create` now accepts `Sysctls` as part of the `ContainerSpec`.\n*   `POST /services/{id}/update` now accepts `Sysctls` as part of the `ContainerSpec`.\n*   `POST /services/create` now accepts `Config` as part of `ContainerSpec.Privileges.CredentialSpec`.\n*   `POST /services/{id}/update` now accepts `Config` as part of `ContainerSpec.Privileges.CredentialSpec`.\n*   `POST /services/create` now includes `Runtime` as an option in `ContainerSpec.Configs`\n*   `POST /services/{id}/update` now includes `Runtime` as an option in `ContainerSpec.Configs`\n*   `GET /tasks` now returns `Sysctls` as part of the `ContainerSpec`.\n*   `GET /tasks/{id}` now returns `Sysctls` as part of the `ContainerSpec`.\n*   `GET /networks` now supports a `dangling` filter type. When set to `true` (or `1`), the endpoint returns all networks that are not in use by a container. When set to `false` (or `0`), only networks that are in use by one or more containers are returned.\n*   `GET /nodes` now supports a filter type `node.label` filter to filter nodes based on the node.label. The format of the label filter is `node.label=<key>`/`node.label=<key>=<value>` to return those with the specified labels, or `node.label!=<key>`/`node.label!=<key>=<value>` to return those without the specified labels.\n*   `POST /containers/create` now accepts a `fluentd-async` option in `HostConfig.LogConfig.Config` when using the Fluentd logging driver. This option deprecates the `fluentd-async-connect` option, which remains funtional, but will be removed in a future release. Users are encouraged to use the `fluentd-async` option going forward. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   `POST /containers/create` now accepts a `fluentd-request-ack` option in `HostConfig.LogConfig.Config` when using the Fluentd logging driver. If enabled, the Fluentd logging driver sends the chunk option with a unique ID. The server will respond with an acknowledgement. This option improves the reliability of the message transmission. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   `POST /containers/create`, `GET /containers/{id}/json`, and `GET /containers/json` now supports `BindOptions.NonRecursive`.\n*   `POST /swarm/init` now accepts a `DataPathPort` property to set data path port number.\n*   `GET /info` now returns information about `DataPathPort` that is currently used in swarm\n*   `GET /info` now returns `PidsLimit` boolean to indicate if the host kernel has PID limit support enabled.\n*   `GET /info` now includes `name=rootless` in `SecurityOptions` when the daemon is running in rootless mode. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   `GET /info` now returns `none` as `CgroupDriver` when the daemon is running in rootless mode. This change is not versioned, and affects all API versions if the daemon has this patch.\n*   `POST /containers/create` now accepts `DeviceRequests` as part of `HostConfig`. Can be used to set Nvidia GPUs.\n*   `GET /swarm` endpoint now returns DataPathPort info\n*   `POST /containers/create` now takes `KernelMemoryTCP` field to set hard limit for kernel TCP buffer memory.\n*   `GET /service` now returns `MaxReplicas` as part of the `Placement`.\n*   `GET /service/{id}` now returns `MaxReplicas` as part of the `Placement`.\n*   `POST /service/create` and `POST /services/(id or name)/update` now take the field `MaxReplicas` as part of the service `Placement`, allowing to specify maximum replicas per node for the service.\n*   `POST /containers/create` on Linux now creates a container with `HostConfig.IpcMode=private` by default, if IpcMode is not explicitly specified. The per-daemon default can be changed back to `shareable` by using `DefaultIpcMode` daemon configuration parameter.\n*   `POST /containers/{id}/update` now accepts a `PidsLimit` field to tune a container's PID limit. Set `0` or `-1` for unlimited. Leave `null` to not change the current value.\n*   `POST /build` now accepts `outputs` key for configuring build outputs when using BuildKit mode.\n\n[Docker Engine API v1.39](https://docs.docker.com/engine/api/v1.39/) documentation\n\n*   `GET /info` now returns an empty string, instead of `<unknown>` for `KernelVersion` and `OperatingSystem` if the daemon was unable to obtain this information.\n*   `GET /info` now returns information about the product license, if a license has been applied to the daemon.\n*   `GET /info` now returns a `Warnings` field, containing warnings and informational messages about missing features, or issues related to the daemon configuration.\n*   `POST /swarm/init` now accepts a `DefaultAddrPool` property to set global scope default address pool\n*   `POST /swarm/init` now accepts a `SubnetSize` property to set global scope networks by giving the length of the subnet masks for every such network\n*   `POST /session` (added in [V1.31](#v131-api-changes) is no longer experimental. This endpoint can be used to run interactive long-running protocols between the client and the daemon.\n\n[Docker Engine API v1.38](https://docs.docker.com/engine/api/v1.38/) documentation\n\n*   `GET /tasks` and `GET /tasks/{id}` now return a `NetworkAttachmentSpec` field, containing the `ContainerID` for non-service containers connected to \"attachable\" swarm-scoped networks.\n\n[Docker Engine API v1.37](https://docs.docker.com/engine/api/v1.37/) documentation\n\n*   `POST /containers/create` and `POST /services/create` now supports exposing SCTP ports.\n*   `POST /configs/create` and `POST /configs/{id}/create` now accept a `Templating` driver.\n*   `GET /configs` and `GET /configs/{id}` now return the `Templating` driver of the config.\n*   `POST /secrets/create` and `POST /secrets/{id}/create` now accept a `Templating` driver.\n*   `GET /secrets` and `GET /secrets/{id}` now return the `Templating` driver of the secret.\n\n[Docker Engine API v1.36](https://docs.docker.com/engine/api/v1.36/) documentation\n\n*   `Get /events` now return `exec_die` event when an exec process terminates.\n\n[Docker Engine API v1.35](https://docs.docker.com/engine/api/v1.35/) documentation\n\n*   `POST /services/create` and `POST /services/(id)/update` now accepts an `Isolation` field on container spec to set the Isolation technology of the containers running the service (`default`, `process`, or `hyperv`). This configuration is only used for Windows containers.\n*   `GET /containers/(name)/logs` now supports an additional query parameter: `until`, which returns log lines that occurred before the specified timestamp.\n*   `POST /containers/{id}/exec` now accepts a `WorkingDir` property to set the work-dir for the exec process, independent of the container's work-dir.\n*   `Get /version` now returns a `Platform.Name` field, which can be used by products using Moby as a foundation to return information about the platform.\n*   `Get /version` now returns a `Components` field, which can be used to return information about the components used. Information about the engine itself is now included as a \"Component\" version, and contains all information from the top-level `Version`, `GitCommit`, `APIVersion`, `MinAPIVersion`, `GoVersion`, `Os`, `Arch`, `BuildTime`, `KernelVersion`, and `Experimental` fields. Going forward, the information from the `Components` section is preferred over their top-level counterparts.\n\n[Docker Engine API v1.34](https://docs.docker.com/engine/api/v1.34/) documentation\n\n*   `POST /containers/(name)/wait?condition=removed` now also also returns in case of container removal failure. A pointer to a structure named `Error` added to the response JSON in order to indicate a failure. If `Error` is `null`, container removal has succeeded, otherwise the test of an error message indicating why container removal has failed is available from `Error.Message` field.\n\n[Docker Engine API v1.33](https://docs.docker.com/engine/api/v1.33/) documentation\n\n*   `GET /events` now supports filtering 4 more kinds of events: `config`, `node`, `secret` and `service`.\n\n[Docker Engine API v1.32](https://docs.docker.com/engine/api/v1.32/) documentation\n\n*   `POST /images/create` now accepts a `platform` parameter in the form of `os[/arch[/variant]]`.\n*   `POST /containers/create` now accepts additional values for the `HostConfig.IpcMode` property. New values are `private`, `shareable`, and `none`.\n*   `DELETE /networks/{id or name}` fixed issue where a `name` equal to another network's name was able to mask that `id`. If both a network with the given _name_ exists, and a network with the given _id_, the network with the given _id_ is now deleted. This change is not versioned, and affects all API versions if the daemon has this patch.\n\n[Docker Engine API v1.31](https://docs.docker.com/engine/api/v1.31/) documentation\n\n*   `DELETE /secrets/(name)` now returns status code 404 instead of 500 when the secret does not exist.\n*   `POST /secrets/create` now returns status code 409 instead of 500 when creating an already existing secret.\n*   `POST /secrets/create` now accepts a `Driver` struct, allowing the `Name` and driver-specific `Options` to be passed to store a secrets in an external secrets store. The `Driver` property can be omitted if the default (internal) secrets store is used.\n*   `GET /secrets/(id)` and `GET /secrets` now return a `Driver` struct, containing the `Name` and driver-specific `Options` of the external secrets store used to store the secret. The `Driver` property is omitted if no external store is used.\n*   `POST /secrets/(name)/update` now returns status code 400 instead of 500 when updating a secret's content which is not the labels.\n*   `POST /nodes/(name)/update` now returns status code 400 instead of 500 when demoting last node fails.\n*   `GET /networks/(id or name)` now takes an optional query parameter `scope` that will filter the network based on the scope (`local`, `swarm`, or `global`).\n*   `POST /session` is a new endpoint that can be used for running interactive long-running protocols between client and the daemon. This endpoint is experimental and only available if the daemon is started with experimental features enabled.\n*   `GET /images/(name)/get` now includes an `ImageMetadata` field which contains image metadata that is local to the engine and not part of the image config.\n*   `POST /services/create` now accepts a `PluginSpec` when `TaskTemplate.Runtime` is set to `plugin`\n*   `GET /events` now supports config events `create`, `update` and `remove` that are emitted when users create, update or remove a config\n*   `GET /volumes/` and `GET /volumes/{name}` now return a `CreatedAt` field, containing the date/time the volume was created. This field is omitted if the creation date/time for the volume is unknown. For volumes with scope \"global\", this field represents the creation date/time of the local _instance_ of the volume, which may differ from instances of the same volume on different nodes.\n*   `GET /system/df` now returns a `CreatedAt` field for `Volumes`. Refer to the `/volumes/` endpoint for a description of this field.\n\n[Docker Engine API v1.30](https://docs.docker.com/engine/api/v1.30/) documentation\n\n*   `GET /info` now returns the list of supported logging drivers, including plugins.\n*   `GET /info` and `GET /swarm` now returns the cluster-wide swarm CA info if the node is in a swarm: the cluster root CA certificate, and the cluster TLS leaf certificate issuer's subject and public key. It also displays the desired CA signing certificate, if any was provided as part of the spec.\n*   `POST /build/` now (when not silent) produces an `Aux` message in the JSON output stream with payload `types.BuildResult` for each image produced. The final such message will reference the image resulting from the build.\n*   `GET /nodes` and `GET /nodes/{id}` now returns additional information about swarm TLS info if the node is part of a swarm: the trusted root CA, and the issuer's subject and public key.\n*   `GET /distribution/(name)/json` is a new endpoint that returns a JSON output stream with payload `types.DistributionInspect` for an image name. It includes a descriptor with the digest, and supported platforms retrieved from directly contacting the registry.\n*   `POST /swarm/update` now accepts 3 additional parameters as part of the swarm spec's CA configuration; the desired CA certificate for the swarm, the desired CA key for the swarm (if not using an external certificate), and an optional parameter to force swarm to generate and rotate to a new CA certificate/key pair.\n*   `POST /service/create` and `POST /services/(id or name)/update` now take the field `Platforms` as part of the service `Placement`, allowing to specify platforms supported by the service.\n*   `POST /containers/(name)/wait` now accepts a `condition` query parameter to indicate which state change condition to wait for. Also, response headers are now returned immediately to acknowledge that the server has registered a wait callback for the client.\n*   `POST /swarm/init` now accepts a `DataPathAddr` property to set the IP-address or network interface to use for data traffic\n*   `POST /swarm/join` now accepts a `DataPathAddr` property to set the IP-address or network interface to use for data traffic\n*   `GET /events` now supports service, node and secret events which are emitted when users create, update and remove service, node and secret\n*   `GET /events` now supports network remove event which is emitted when users remove a swarm scoped network\n*   `GET /events` now supports a filter type `scope` in which supported value could be swarm and local\n*   `PUT /containers/(name)/archive` now accepts a `copyUIDGID` parameter to allow copy UID/GID maps to dest file or dir.\n\n[Docker Engine API v1.29](https://docs.docker.com/engine/api/v1.29/) documentation\n\n*   `DELETE /networks/(name)` now allows to remove the ingress network, the one used to provide the routing-mesh.\n*   `POST /networks/create` now supports creating the ingress network, by specifying an `Ingress` boolean field. As of now this is supported only when using the overlay network driver.\n*   `GET /networks/(name)` now returns an `Ingress` field showing whether the network is the ingress one.\n*   `GET /networks/` now supports a `scope` filter to filter networks based on the network mode (`swarm`, `global`, or `local`).\n*   `POST /containers/create`, `POST /service/create` and `POST /services/(id or name)/update` now takes the field `StartPeriod` as a part of the `HealthConfig` allowing for specification of a period during which the container should not be considered unhealthy even if health checks do not pass.\n*   `GET /services/(id)` now accepts an `insertDefaults` query-parameter to merge default values into the service inspect output.\n*   `POST /containers/prune`, `POST /images/prune`, `POST /volumes/prune`, and `POST /networks/prune` now support a `label` filter to filter containers, images, volumes, or networks based on the label. The format of the label filter could be `label=<key>`/`label=<key>=<value>` to remove those with the specified labels, or `label!=<key>`/`label!=<key>=<value>` to remove those without the specified labels.\n*   `POST /services/create` now accepts `Privileges` as part of `ContainerSpec`. Privileges currently include `CredentialSpec` and `SELinuxContext`.\n\n[Docker Engine API v1.28](https://docs.docker.com/engine/api/v1.28/) documentation\n\n*   `POST /containers/create` now includes a `Consistency` field to specify the consistency level for each `Mount`, with possible values `default`, `consistent`, `cached`, or `delegated`.\n*   `GET /containers/create` now takes a `DeviceCgroupRules` field in `HostConfig` allowing to set custom device cgroup rules for the created container.\n*   Optional query parameter `verbose` for `GET /networks/(id or name)` will now list all services with all the tasks, including the non-local tasks on the given network.\n*   `GET /containers/(id or name)/attach/ws` now returns WebSocket in binary frame format for API version >= v1.28, and returns WebSocket in text frame format for API version< v1.28, for the purpose of backward-compatibility.\n*   `GET /networks` is optimised only to return list of all networks and network specific information. List of all containers attached to a specific network is removed from this API and is only available using the network specific `GET /networks/{network-id}`.\n*   `GET /containers/json` now supports `publish` and `expose` filters to filter containers that expose or publish certain ports.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept the `ReadOnly` parameter, which mounts the container's root filesystem as read only.\n*   `POST /build` now accepts `extrahosts` parameter to specify a host to ip mapping to use during the build.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept a `rollback` value for `FailureAction`.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept an optional `RollbackConfig` object which specifies rollback options.\n*   `GET /services` now supports a `mode` filter to filter services based on the service mode (either `global` or `replicated`).\n*   `POST /containers/(name)/update` now supports updating `NanoCpus` that represents CPU quota in units of 10\\-9 CPUs.\n*   `POST /plugins/{name}/disable` now accepts a `force` query-parameter to disable a plugin even if still in use.\n\n[Docker Engine API v1.27](https://docs.docker.com/engine/api/v1.27/) documentation\n\n*   `GET /containers/(id or name)/stats` now includes an `online_cpus` field in both `precpu_stats` and `cpu_stats`. If this field is `nil` then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.\n\n[Docker Engine API v1.26](https://docs.docker.com/engine/api/v1.26/) documentation\n\n*   `POST /plugins/(plugin name)/upgrade` upgrade a plugin.\n\n[Docker Engine API v1.25](https://docs.docker.com/engine/api/v1.25/) documentation\n\n*   The API version is now required in all API calls. Instead of just requesting, for example, the URL `/containers/json`, you must now request `/v1.25/containers/json`.\n*   `GET /version` now returns `MinAPIVersion`.\n*   `POST /build` accepts `networkmode` parameter to specify network used during build.\n*   `GET /images/(name)/json` now returns `OsVersion` if populated\n*   `GET /images/(name)/json` no longer contains the `RootFS.BaseLayer` field. This field was used for Windows images that used a base-image that was pre-installed on the host (`RootFS.Type` `layers+base`), which is no longer supported, and the `RootFS.BaseLayer` field has been removed.\n*   `GET /info` now returns `Isolation`.\n*   `POST /containers/create` now takes `AutoRemove` in HostConfig, to enable auto-removal of the container on daemon side when the container's process exits.\n*   `GET /containers/json` and `GET /containers/(id or name)/json` now return `\"removing\"` as a value for the `State.Status` field if the container is being removed. Previously, \"exited\" was returned as status.\n*   `GET /containers/json` now accepts `removing` as a valid value for the `status` filter.\n*   `GET /containers/json` now supports filtering containers by `health` status.\n*   `DELETE /volumes/(name)` now accepts a `force` query parameter to force removal of volumes that were already removed out of band by the volume driver plugin.\n*   `POST /containers/create/` and `POST /containers/(name)/update` now validates restart policies.\n*   `POST /containers/create` now validates IPAMConfig in NetworkingConfig, and returns error for invalid IPv4 and IPv6 addresses (`--ip` and `--ip6` in `docker create/run`).\n*   `POST /containers/create` now takes a `Mounts` field in `HostConfig` which replaces `Binds`, `Volumes`, and `Tmpfs`. _note_: `Binds`, `Volumes`, and `Tmpfs` are still available and can be combined with `Mounts`.\n*   `POST /build` now performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. Note that this change is _unversioned_ and applied to all API versions.\n*   `POST /build` accepts `cachefrom` parameter to specify images used for build cache.\n*   `GET /networks/` endpoint now correctly returns a list of _all_ networks, instead of the default network if a trailing slash is provided, but no `name` or `id`.\n*   `DELETE /containers/(name)` endpoint now returns an error of `removal of container name is already in progress` with status code of 400, when container name is in a state of removal in progress.\n*   `GET /containers/json` now supports a `is-task` filter to filter containers that are tasks (part of a service in swarm mode).\n*   `POST /containers/create` now takes `StopTimeout` field.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept `Monitor` and `MaxFailureRatio` parameters, which control the response to failures during service updates.\n*   `POST /services/(id or name)/update` now accepts a `ForceUpdate` parameter inside the `TaskTemplate`, which causes the service to be updated even if there are no changes which would ordinarily trigger an update.\n*   `POST /services/create` and `POST /services/(id or name)/update` now return a `Warnings` array.\n*   `GET /networks/(name)` now returns field `Created` in response to show network created time.\n*   `POST /containers/(id or name)/exec` now accepts an `Env` field, which holds a list of environment variables to be set in the context of the command execution.\n*   `GET /volumes`, `GET /volumes/(name)`, and `POST /volumes/create` now return the `Options` field which holds the driver specific options to use for when creating the volume.\n*   `GET /exec/(id)/json` now returns `Pid`, which is the system pid for the exec'd process.\n*   `POST /containers/prune` prunes stopped containers.\n*   `POST /images/prune` prunes unused images.\n*   `POST /volumes/prune` prunes unused volumes.\n*   `POST /networks/prune` prunes unused networks.\n*   Every API response now includes a `Docker-Experimental` header specifying if experimental features are enabled (value can be `true` or `false`).\n*   Every API response now includes a `API-Version` header specifying the default API version of the server.\n*   The `hostConfig` option now accepts the fields `CpuRealtimePeriod` and `CpuRtRuntime` to allocate cpu runtime to rt tasks when `CONFIG_RT_GROUP_SCHED` is enabled in the kernel.\n*   The `SecurityOptions` field within the `GET /info` response now includes `userns` if user namespaces are enabled in the daemon.\n*   `GET /nodes` and `GET /node/(id or name)` now return `Addr` as part of a node's `Status`, which is the address that that node connects to the manager from.\n*   The `HostConfig` field now includes `NanoCpus` that represents CPU quota in units of 10\\-9 CPUs.\n*   `GET /info` now returns more structured information about security options.\n*   The `HostConfig` field now includes `CpuCount` that represents the number of CPUs available for execution by the container. Windows daemon only.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept the `TTY` parameter, which allocate a pseudo-TTY in container.\n*   `POST /services/create` and `POST /services/(id or name)/update` now accept the `DNSConfig` parameter, which specifies DNS related configurations in resolver configuration file (resolv.conf) through `Nameservers`, `Search`, and `Options`.\n*   `POST /services/create` and `POST /services/(id or name)/update` now support `node.platform.arch` and `node.platform.os` constraints in the services `TaskSpec.Placement.Constraints` field.\n*   `GET /networks/(id or name)` now includes IP and name of all peers nodes for swarm mode overlay networks.\n*   `GET /plugins` list plugins.\n*   `POST /plugins/pull?name=<plugin name>` pulls a plugin.\n*   `GET /plugins/(plugin name)` inspect a plugin.\n*   `POST /plugins/(plugin name)/set` configure a plugin.\n*   `POST /plugins/(plugin name)/enable` enable a plugin.\n*   `POST /plugins/(plugin name)/disable` disable a plugin.\n*   `POST /plugins/(plugin name)/push` push a plugin.\n*   `POST /plugins/create?name=(plugin name)` create a plugin.\n*   `DELETE /plugins/(plugin name)` delete a plugin.\n*   `POST /node/(id or name)/update` now accepts both `id` or `name` to identify the node to update.\n*   `GET /images/json` now support a `reference` filter.\n*   `GET /secrets` returns information on the secrets.\n*   `POST /secrets/create` creates a secret.\n*   `DELETE /secrets/{id}` removes the secret `id`.\n*   `GET /secrets/{id}` returns information on the secret `id`.\n*   `POST /secrets/{id}/update` updates the secret `id`.\n*   `POST /services/(id or name)/update` now accepts service name or prefix of service id as a parameter.\n*   `POST /containers/create` added 2 built-in log-opts that work on all logging drivers, `mode` (`blocking`|`non-blocking`), and `max-buffer-size` (e.g. `2m`) which enables a non-blocking log buffer.\n*   `POST /containers/create` now takes `HostConfig.Init` field to run an init inside the container that forwards signals and reaps processes.\n\n[Docker Engine API v1.24](https://docs.docker.com/engine/api/v1.24/) documentation\n\n*   `POST /containers/create` now takes `StorageOpt` field.\n*   `GET /info` now returns `SecurityOptions` field, showing if `apparmor`, `seccomp`, or `selinux` is supported.\n*   `GET /info` no longer returns the `ExecutionDriver` property. This property was no longer used after integration with ContainerD in Docker 1.11.\n*   `GET /networks` now supports filtering by `label` and `driver`.\n*   `GET /containers/json` now supports filtering containers by `network` name or id.\n*   `POST /containers/create` now takes `IOMaximumBandwidth` and `IOMaximumIOps` fields. Windows daemon only.\n*   `POST /containers/create` now returns an HTTP 400 \"bad parameter\" message if no command is specified (instead of an HTTP 500 \"server error\")\n*   `GET /images/search` now takes a `filters` query parameter.\n*   `GET /events` now supports a `reload` event that is emitted when the daemon configuration is reloaded.\n*   `GET /events` now supports filtering by daemon name or ID.\n*   `GET /events` now supports a `detach` event that is emitted on detaching from container process.\n*   `GET /events` now supports an `exec_detach` event that is emitted on detaching from exec process.\n*   `GET /images/json` now supports filters `since` and `before`.\n*   `POST /containers/(id or name)/start` no longer accepts a `HostConfig`.\n*   `POST /images/(name)/tag` no longer has a `force` query parameter.\n*   `GET /images/search` now supports maximum returned search results `limit`.\n*   `POST /containers/{name:.*}/copy` is now removed and errors out starting from this API version.\n*   API errors are now returned as JSON instead of plain text.\n*   `POST /containers/create` and `POST /containers/(id)/start` allow you to configure kernel parameters (sysctls) for use in the container.\n*   `POST /containers/<container ID>/exec` and `POST /exec/<exec ID>/start` no longer expects a \"Container\" field to be present. This property was not used and is no longer sent by the docker client.\n*   `POST /containers/create/` now validates the hostname (should be a valid RFC 1123 hostname).\n*   `POST /containers/create/` `HostConfig.PidMode` field now accepts `container:<name|id>`, to have the container join the PID namespace of an existing container.\n\n*   `GET /containers/json` returns the state of the container, one of `created`, `restarting`, `running`, `paused`, `exited` or `dead`.\n*   `GET /containers/json` returns the mount points for the container.\n*   `GET /networks/(name)` now returns an `Internal` field showing whether the network is internal or not.\n*   `GET /networks/(name)` now returns an `EnableIPv6` field showing whether the network has ipv6 enabled or not.\n*   `POST /containers/(name)/update` now supports updating container's restart policy.\n*   `POST /networks/create` now supports enabling ipv6 on the network by setting the `EnableIPv6` field (doing this with a label will no longer work).\n*   `GET /info` now returns `CgroupDriver` field showing what cgroup driver the daemon is using; `cgroupfs` or `systemd`.\n*   `GET /info` now returns `KernelMemory` field, showing if \"kernel memory limit\" is supported.\n*   `POST /containers/create` now takes `PidsLimit` field, if the kernel is >= 4.3 and the pids cgroup is supported.\n*   `GET /containers/(id or name)/stats` now returns `pids_stats`, if the kernel is >= 4.3 and the pids cgroup is supported.\n*   `POST /containers/create` now allows you to override usernamespaces remapping and use privileged options for the container.\n*   `POST /containers/create` now allows specifying `nocopy` for named volumes, which disables automatic copying from the container path to the volume.\n*   `POST /auth` now returns an `IdentityToken` when supported by a registry.\n*   `POST /containers/create` with both `Hostname` and `Domainname` fields specified will result in the container's hostname being set to `Hostname`, rather than `Hostname.Domainname`.\n*   `GET /volumes` now supports more filters, new added filters are `name` and `driver`.\n*   `GET /containers/(id or name)/logs` now accepts a `details` query parameter to stream the extra attributes that were provided to the containers `LogOpts`, such as environment variables and labels, with the logs.\n*   `POST /images/load` now returns progress information as a JSON stream, and has a `quiet` query parameter to suppress progress details.\n\n*   The `HostConfig.LxcConf` field has been removed, and is no longer available on `POST /containers/create` and `GET /containers/(id)/json`.\n*   `POST /container/(name)/update` updates the resources of a container.\n*   `GET /containers/json` supports filter `isolation` on Windows.\n*   `GET /containers/json` now returns the list of networks of containers.\n*   `GET /info` Now returns `Architecture` and `OSType` fields, providing information about the host architecture and operating system type that the daemon runs on.\n*   `GET /networks/(name)` now returns a `Name` field for each container attached to the network.\n*   `GET /version` now returns the `BuildTime` field in RFC3339Nano format to make it consistent with other date/time values returned by the API.\n*   `AuthConfig` now supports a `registrytoken` for token based authentication\n*   `POST /containers/create` now has a 4M minimum value limit for `HostConfig.KernelMemory`\n*   Pushes initiated with `POST /images/(name)/push` and pulls initiated with `POST /images/create` will be cancelled if the HTTP connection making the API request is closed before the push or pull completes.\n*   `POST /containers/create` now allows you to set a read/write rate limit for a device (in bytes per second or IO per second).\n*   `GET /networks` now supports filtering by `name`, `id` and `type`.\n*   `POST /containers/create` now allows you to set the static IPv4 and/or IPv6 address for the container.\n*   `POST /networks/(id)/connect` now allows you to set the static IPv4 and/or IPv6 address for the container.\n*   `GET /info` now includes the number of containers running, stopped, and paused.\n*   `POST /networks/create` now supports restricting external access to the network by setting the `Internal` field.\n*   `POST /networks/(id)/disconnect` now includes a `Force` option to forcefully disconnect a container from network\n*   `GET /containers/(id)/json` now returns the `NetworkID` of containers.\n*   `POST /networks/create` Now supports an options field in the IPAM config that provides options for custom IPAM plugins.\n*   `GET /networks/{network-id}` Now returns IPAM config options for custom IPAM plugins if any are available.\n*   `GET /networks/<network-id>` now returns subnets info for user-defined networks.\n*   `GET /info` can now return a `SystemStatus` field useful for returning additional information about applications that are built on top of engine.\n\n*   `GET /volumes` lists volumes from all volume drivers.\n*   `POST /volumes/create` to create a volume.\n*   `GET /volumes/(name)` get low-level information about a volume.\n*   `DELETE /volumes/(name)` remove a volume with the specified name.\n*   `VolumeDriver` was moved from `config` to `HostConfig` to make the configuration portable.\n*   `GET /images/(name)/json` now returns information about an image's `RepoTags` and `RepoDigests`.\n*   The `config` option now accepts the field `StopSignal`, which specifies the signal to use to kill a container.\n*   `GET /containers/(id)/stats` will return networking information respectively for each interface.\n*   The `HostConfig` option now includes the `DnsOptions` field to configure the container's DNS options.\n*   `POST /build` now optionally takes a serialized map of build-time variables.\n*   `GET /events` now includes a `timenano` field, in addition to the existing `time` field.\n*   `GET /events` now supports filtering by image and container labels.\n*   `GET /info` now lists engine version information and return the information of `CPUShares` and `Cpuset`.\n*   `GET /containers/json` will return `ImageID` of the image used by container.\n*   `POST /exec/(name)/start` will now return an HTTP 409 when the container is either stopped or paused.\n*   `POST /containers/create` now takes `KernelMemory` in HostConfig to specify kernel memory limit.\n*   `GET /containers/(name)/json` now accepts a `size` parameter. Setting this parameter to '1' returns container size information in the `SizeRw` and `SizeRootFs` fields.\n*   `GET /containers/(name)/json` now returns a `NetworkSettings.Networks` field, detailing network settings per network. This field deprecates the `NetworkSettings.Gateway`, `NetworkSettings.IPAddress`, `NetworkSettings.IPPrefixLen`, and `NetworkSettings.MacAddress` fields, which are still returned for backward-compatibility, but will be removed in a future version.\n*   `GET /exec/(id)/json` now returns a `NetworkSettings.Networks` field, detailing networksettings per network. This field deprecates the `NetworkSettings.Gateway`, `NetworkSettings.IPAddress`, `NetworkSettings.IPPrefixLen`, and `NetworkSettings.MacAddress` fields, which are still returned for backward-compatibility, but will be removed in a future version.\n*   The `HostConfig` option now includes the `OomScoreAdj` field for adjusting the badness heuristic. This heuristic selects which processes the OOM killer kills under out-of-memory conditions.\n\n*   `GET /containers/(id)/archive` get an archive of filesystem content from a container.\n*   `PUT /containers/(id)/archive` upload an archive of content to be extracted to an existing directory inside a container's filesystem.\n*   `POST /containers/(id)/copy` is deprecated in favor of the above `archive` endpoint which can be used to download files and directories from a container.\n*   The `hostConfig` option now accepts the field `GroupAdd`, which specifies a list of additional groups that the container process will run as.\n\n*   When the daemon detects a version mismatch with the client, usually when the client is newer than the daemon, an HTTP 400 is now returned instead of a 404.\n*   `GET /containers/(id)/stats` now accepts `stream` bool to get only one set of stats and disconnect.\n*   `GET /containers/(id)/logs` now accepts a `since` timestamp parameter.\n*   `GET /info` The fields `Debug`, `IPv4Forwarding`, `MemoryLimit`, and `SwapLimit` are now returned as boolean instead of as an int. In addition, the end point now returns the new boolean fields `CpuCfsPeriod`, `CpuCfsQuota`, and `OomKillDisable`.\n*   The `hostConfig` option now accepts the fields `CpuPeriod` and `CpuQuota`\n*   `POST /build` accepts `cpuperiod` and `cpuquota` options\n\n*   `GET /version` now returns `Os`, `Arch` and `KernelVersion`.\n*   `POST /containers/create` and `POST /containers/(id)/start`allow you to set ulimit settings for use in the container.\n*   `GET /info` now returns `SystemTime`, `HttpProxy`,`HttpsProxy` and `NoProxy`.\n*   `GET /images/json` added a `RepoDigests` field to include image digest information.\n*   `POST /build` can now set resource constraints for all containers created for the build.\n*   `CgroupParent` can be passed in the host config to setup container cgroups under a specific cgroup.\n*   `POST /build` closing the HTTP request cancels the build\n*   `POST /containers/(id)/exec` includes `Warnings` field to response.",
    "title": "Engine API version history | Docker Docs\n",
    "description": "Documentation of changes that have been made to Engine API.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/engine/userguide/networking/",
    "markdown": "# Networking overview | Docker Docs\n\nContainer networking refers to the ability for containers to connect to and communicate with each other, or to non-Docker workloads.\n\nContainers have networking enabled by default, and they can make outgoing connections. A container has no information about what kind of network it's attached to, or whether their peers are also Docker workloads or not. A container only sees a network interface with an IP address, a gateway, a routing table, DNS services, and other networking details. That is, unless the container uses the `none` network driver.\n\nThis page describes networking from the point of view of the container, and the concepts around container networking. This page doesn't describe OS-specific details about how Docker networks work. For information about how Docker manipulates `iptables` rules on Linux, see [Packet filtering and firewalls](https://docs.docker.com/network/packet-filtering-firewalls/).\n\nYou can create custom, user-defined networks, and connect multiple containers to the same network. Once connected to a user-defined network, containers can communicate with each other using container IP addresses or container names.\n\nThe following example creates a network using the `bridge` network driver and running a container in the created network:\n\n### [Drivers](#drivers)\n\nThe following network drivers are available by default, and provide core networking functionality:\n\n| Driver | Description |\n| --- | --- |\n| `bridge` | The default network driver. |\n| `host` | Remove network isolation between the container and the Docker host. |\n| `none` | Completely isolate a container from the host and other containers. |\n| `overlay` | Overlay networks connect multiple Docker daemons together. |\n| `ipvlan` | IPvlan networks provide full control over both IPv4 and IPv6 addressing. |\n| `macvlan` | Assign a MAC address to a container. |\n\nFor more information about the different drivers, see [Network drivers overview](https://docs.docker.com/network/drivers/).\n\nIn addition to user-defined networks, you can attach a container to another container's networking stack directly, using the `--network container:<name|id>` flag format.\n\nThe following flags aren't supported for containers using the `container:` networking mode:\n\n*   `--add-host`\n*   `--hostname`\n*   `--dns`\n*   `--dns-search`\n*   `--dns-option`\n*   `--mac-address`\n*   `--publish`\n*   `--publish-all`\n*   `--expose`\n\nThe following example runs a Redis container, with Redis binding to `localhost`, then running the `redis-cli` command and connecting to the Redis server over the `localhost` interface.\n\nBy default, when you create or run a container using `docker create` or `docker run`, containers on bridge networks don't expose any ports to the outside world. Use the `--publish` or `-p` flag to make a port available to services outside the bridge network. This creates a firewall rule in the host, mapping a container port to a port on the Docker host to the outside world. Here are some examples:\n\n| Flag value | Description |\n| --- | --- |\n| `-p 8080:80` | Map port `8080` on the Docker host to TCP port `80` in the container. |\n| `-p 192.168.1.100:8080:80` | Map port `8080` on the Docker host IP `192.168.1.100` to TCP port `80` in the container. |\n| `-p 8080:80/udp` | Map port `8080` on the Docker host to UDP port `80` in the container. |\n| `-p 8080:80/tcp -p 8080:80/udp` | Map TCP port `8080` on the Docker host to TCP port `80` in the container, and map UDP port `8080` on the Docker host to UDP port `80` in the container. |\n\n> **Important**\n> \n> Publishing container ports is insecure by default. Meaning, when you publish a container's ports it becomes available not only to the Docker host, but to the outside world as well.\n> \n> If you include the localhost IP address (`127.0.0.1`, or `::1`) with the publish flag, only the Docker host and its containers can access the published container port.\n> \n> > **Warning**\n> > \n> > Hosts within the same L2 segment (for example, hosts connected to the same network switch) can reach ports published to localhost. For more information, see [moby/moby#45610](https://github.com/moby/moby/issues/45610)\n\nIf you want to make a container accessible to other containers, it isn't necessary to publish the container's ports. You can enable inter-container communication by connecting the containers to the same network, usually a [bridge network](https://docs.docker.com/network/drivers/bridge/).\n\nPorts on the host's IPv6 addresses will map to the container's IPv4 address if no host IP is given in a port mapping, the bridge network is IPv4-only, and `--userland-proxy=true` (default).\n\nFor more information about port mapping, including how to disable it and use direct routing to containers, see [packet filtering and firewalls](https://docs.docker.com/network/packet-filtering-firewalls/).\n\nBy default, the container gets an IP address for every Docker network it attaches to. A container receives an IP address out of the IP subnet of the network. The Docker daemon performs dynamic subnetting and IP address allocation for containers. Each network also has a default subnet mask and gateway.\n\nYou can connect a running container to multiple networks, either by passing the `--network` flag multiple times when creating the container, or using the `docker network connect` command for already running containers. In both cases, you can use the `--ip` or `--ip6` flags to specify the container's IP address on that particular network.\n\nIn the same way, a container's hostname defaults to be the container's ID in Docker. You can override the hostname using `--hostname`. When connecting to an existing network using `docker network connect`, you can use the `--alias` flag to specify an additional network alias for the container on that network.\n\nContainers use the same DNS servers as the host by default, but you can override this with `--dns`.\n\nBy default, containers inherit the DNS settings as defined in the `/etc/resolv.conf` configuration file. Containers that attach to the default `bridge` network receive a copy of this file. Containers that attach to a [custom network](https://docs.docker.com/network/network-tutorial-standalone/#use-user-defined-bridge-networks) use Docker's embedded DNS server. The embedded DNS server forwards external DNS lookups to the DNS servers configured on the host.\n\nYou can configure DNS resolution on a per-container basis, using flags for the `docker run` or `docker create` command used to start the container. The following table describes the available `docker run` flags related to DNS configuration.\n\n| Flag | Description |\n| --- | --- |\n| `--dns` | The IP address of a DNS server. To specify multiple DNS servers, use multiple `--dns` flags. DNS requests will be forwarded from the container's network namespace so, for example, `--dns=127.0.0.1` refers to the container's own loopback address. |\n| `--dns-search` | A DNS search domain to search non-fully qualified hostnames. To specify multiple DNS search prefixes, use multiple `--dns-search` flags. |\n| `--dns-opt` | A key-value pair representing a DNS option and its value. See your operating system's documentation for `resolv.conf` for valid options. |\n| `--hostname` | The hostname a container uses for itself. Defaults to the container's ID if not specified. |\n\n### [Custom hosts](#custom-hosts)\n\nYour container will have lines in `/etc/hosts` which define the hostname of the container itself, as well as `localhost` and a few other common things. Custom hosts, defined in `/etc/hosts` on the host machine, aren't inherited by containers. To pass additional hosts into a container, refer to [add entries to container hosts file](https://docs.docker.com/reference/cli/docker/container/run/#add-host) in the `docker run` reference documentation.\n\nIf your container needs to use a proxy server, see [Use a proxy server](https://docs.docker.com/network/proxy/).",
    "title": "Networking overview | Docker Docs\n",
    "description": "Learn how networking works from the container's point of view",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/11-extension/",
    "markdown": "# Extensions | Docker Docs\n\nExtensions can be used to make your Compose file more efficient and easier to maintain.\n\nUse the prefix `x-` as a top-level element to modularize configurations that you want to reuse. Compose ignores any fields that start with `x-`, this is the sole exception where Compose silently ignores unrecognized fields.\n\nExtensions can also be used with [anchors and aliases](https://docs.docker.com/compose/compose-file/10-fragments/).\n\nThey also can be used within any structure in a Compose file where user-defined keys are not expected. Compose uses those to enable experimental features, the same way browsers add support for [custom CSS features](https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#vendor-keywords)\n\nIn this example, the environment variables do not belong to either of the services. They’ve been lifted out completely into the `x-env` extension field. This defines a new node which contains the environment field. The `&env` YAML anchor is used so both services can reference the extension field’s value as `*env`.\n\nThe `nodeinfo` and `echoit` services both include the `x-function` extension via the `&function` anchor, then set their specific image and environment.\n\nUsing [YAML merge](https://yaml.org/type/merge.html) it is also possible to use multiple extensions and share and override additional attributes for specific needs:\n\n> **Note**\n> \n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences.\n> \n> In the example above, the environment variables are declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved.\n\nThis section is informative. At the time of writing, the following prefixes are known to exist:\n\n| Prefix | Vendor/Organization |\n| --- | --- |\n| docker | Docker |\n| kubernetes | Kubernetes |\n\nValues express a byte value as a string in `{amount}{byte unit}` format: The supported units are `b` (bytes), `k` or `kb` (kilo bytes), `m` or `mb` (mega bytes) and `g` or `gb` (giga bytes).\n\nValues express a duration as a string in the form of `{value}{unit}`. The supported units are `us` (microseconds), `ms` (milliseconds), `s` (seconds), `m` (minutes) and `h` (hours). Values can combine multiple values without separator.",
    "title": "Extensions | Docker Docs\n",
    "description": "Understand how to use extensions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/10-fragments/",
    "markdown": "# Fragments | Docker Docs\n\nWith Compose, you can use built-in [YAML](https://www.yaml.org/spec/1.2/spec.html#id2765878) features to make your Compose file neater and more efficient. Anchors and aliases let you create re-usable blocks. This is useful if you start to find common configurations that span multiple services. Having re-usable blocks minimizes potential mistakes.\n\nAnchors are created using the `&` sign. The sign is followed by an alias name. You can use this alias with the `*` sign later to reference the value following the anchor. Make sure there is no space between the `&` and the `*` characters and the following alias name.\n\nYou can use more than one anchor and alias in a single Compose file.\n\nIn the example above, a `default-volume` anchor is created based on the `db-data` volume. It is later reused by the alias `*default-volume` to define the `metrics` volume.\n\nAnchor resolution takes place before [variables interpolation](https://docs.docker.com/compose/compose-file/12-interpolation/), so variables can't be used to set anchors or aliases.\n\nIf you have an anchor that you want to use in more than one service, use it in conjunction with an [extension](https://docs.docker.com/compose/compose-file/11-extension/) to make your Compose file easier to maintain.\n\nYou may want to partially override values. Compose follows the rule outlined by [YAML merge type](https://yaml.org/type/merge.html).\n\nIn the following example, `metrics` volume specification uses alias to avoid repetition but overrides `name` attribute:\n\nYou can also extend the anchor to add additional values.\n\n> **Note**\n> \n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences.\n\nIn example above, the environment variables must be declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved.",
    "title": "Fragments | Docker Docs\n",
    "description": "Understand how to use fragments",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/deploy/",
    "markdown": "# Compose Deploy Specification | Docker Docs\n\nDeploy is an optional part of the Compose Specification. It provides a set of deployment specifications for managing the behavior of containers across different environments.\n\n### [endpoint\\_mode](#endpoint_mode)\n\n`endpoint_mode` specifies a service discovery method for external clients connecting to a service. The Compose Deploy Specification defines two canonical values:\n\n*   `endpoint_mode: vip`: Assigns the service a virtual IP (VIP) that acts as the front end for clients to reach the service on a network. Platform routes requests between the client and nodes running the service, without client knowledge of how many nodes are participating in the service or their IP addresses or ports.\n    \n*   `endpoint_mode: dnsrr`: Platform sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses (DNS round-robin), and the client connects directly to one of these.\n    \n\n### [labels](#labels)\n\n`labels` specifies metadata for the service. These labels are only set on the service and not on any containers for the service. This assumes the platform has some native concept of \"service\" that can match the Compose application model.\n\n### [mode](#mode)\n\n`mode` defines the replication model used to run the service on the platform. Either `global`, exactly one container per physical node, or `replicated`, a specified number of containers. The default is `replicated`.\n\n### [placement](#placement)\n\n`placement` specifies constraints and preferences for the platform to select a physical node to run service containers.\n\n#### [constraints](#constraints)\n\n`constraints` defines a required property the platform's node must fulfill to run the service container. It can be set either by a list or a map with string values.\n\n#### [preferences](#preferences)\n\n`preferences` defines a property the platform's node should fulfill to run service container. It can be set either by a list or a map with string values.\n\n### [replicas](#replicas)\n\nIf the service is `replicated` (which is the default), `replicas` specifies the number of containers that should be running at any given time.\n\n### [resources](#resources)\n\n`resources` configures physical resource constraints for container to run on platform. Those constraints can be configured as:\n\n*   `limits`: The platform must prevent the container to allocate more.\n*   `reservations`: The platform must guarantee the container can allocate at least the configured amount.\n\n#### [cpus](#cpus)\n\n`cpus` configures a limit or reservation for how much of the available CPU resources, as number of cores, a container can use.\n\n#### [memory](#memory)\n\n`memory` configures a limit or reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](https://docs.docker.com/compose/compose-file/11-extension/#specifying-byte-values).\n\n#### [pids](#pids)\n\n`pids` tunes a container’s PIDs limit, set as an integer.\n\n#### [devices](#devices)\n\n`devices` configures reservations of the devices a container can use. It contains a list of reservations, each set as an object with the following parameters: `capabilities`, `driver`, `count`, `device_ids` and `options`.\n\nDevices are reserved using a list of capabilities, making `capabilities` the only required field. A device must satisfy all the requested capabilities for a successful reservation.\n\n##### [capabilities](#capabilities)\n\n`capabilities` are set as a list of strings, expressing both generic and driver specific capabilities. The following generic capabilities are recognized today:\n\n*   `gpu`: Graphics accelerator\n*   `tpu`: AI accelerator\n\nTo avoid name clashes, driver specific capabilities must be prefixed with the driver name. For example, reserving an nVidia CUDA-enabled accelerator might look like this:\n\n##### [driver](#driver)\n\nA different driver for the reserved device(s) can be requested using `driver` field. The value is specified as a string.\n\n##### [count](#count)\n\nIf `count` is set to `all` or not specified, Compose reserves all devices that satisfy the requested capabilities. Otherwise, Compose reserves at least the number of devices specified. The value is specified as an integer.\n\n`count` and `device_ids` fields are exclusive. Compose returns an error if both are specified.\n\n##### [device\\_ids](#device_ids)\n\nIf `device_ids` is set, Compose reserves devices with the specified IDs provided they satisfy the requested capabilities. The value is specified as a list of strings.\n\n`count` and `device_ids` fields are exclusive. Compose returns an error if both are specified.\n\n##### [options](#options)\n\nDriver specific options can be set with `options` as key-value pairs.\n\n### [restart\\_policy](#restart_policy)\n\n`restart_policy` configures if and how to restart containers when they exit. If `restart_policy` is not set, Compose considers the `restart` field set by the service configuration.\n\n*   `condition`. When set to:\n    *   `none`, containers are not automatically restarted regardless of the exit status.\n    *   `on-failure`, the container is restarted if it exits due to an error, which manifests as a non-zero exit code.\n    *   `any` (default), containers are restarted regardless of the exit status.\n*   `delay`: How long to wait between restart attempts, specified as a [duration](https://docs.docker.com/compose/compose-file/11-extension/#specifying-durations). The default is 0, meaning restart attempts can occur immediately.\n*   `max_attempts`: How many times to attempt to restart a container before giving up (default: never give up). If the restart does not succeed within the configured `window`, this attempt doesn't count toward the configured `max_attempts` value. For example, if `max_attempts` is set to '2', and the restart fails on the first attempt, more than two restarts must be attempted.\n*   `window`: How long to wait before deciding if a restart has succeeded, specified as a [duration](#specifying-durations) (default: decide immediately).\n\n### [rollback\\_config](#rollback_config)\n\n`rollback_config` configures how the service should be rollbacked in case of a failing update.\n\n*   `parallelism`: The number of containers to rollback at a time. If set to 0, all containers rollback simultaneously.\n*   `delay`: The time to wait between each container group's rollback (default 0s).\n*   `failure_action`: What to do if a rollback fails. One of `continue` or `pause` (default `pause`)\n*   `monitor`: Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)` (default 0s).\n*   `max_failure_ratio`: Failure rate to tolerate during a rollback (default 0).\n*   `order`: Order of operations during rollbacks. One of `stop-first` (old task is stopped before starting new one), or `start-first` (new task is started first, and the running tasks briefly overlap) (default `stop-first`).\n\n### [update\\_config](#update_config)\n\n`update_config` configures how the service should be updated. Useful for configuring rolling updates.\n\n*   `parallelism`: The number of containers to update at a time.\n*   `delay`: The time to wait between updating a group of containers.\n*   `failure_action`: What to do if an update fails. One of `continue`, `rollback`, or `pause` (default: `pause`).\n*   `monitor`: Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)` (default 0s).\n*   `max_failure_ratio`: Failure rate to tolerate during an update.\n*   `order`: Order of operations during updates. One of `stop-first` (old task is stopped before starting new one), or `start-first` (new task is started first, and the running tasks briefly overlap) (default `stop-first`).",
    "title": "Compose Deploy Specification | Docker Docs\n",
    "description": "Learn about the Compose Deploy Specification",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/develop/",
    "markdown": "# Compose Develop Specification | Docker Docs\n\n> **Note:**\n> \n> Develop is an optional part of the Compose Specification. It is available with Docker Compose version 2.22.0 and later.\n\nThis page defines how Compose behaves to efficiently assist you and defines the development constraints and workflows set by Compose. Only a subset of Compose file services may require a `develop` subsection.\n\nThe `develop` subsection defines configuration options that are applied by Compose to assist you during development of a service with optimized workflows.\n\n### [watch](#watch)\n\nThe `watch` attribute defines a list of rules that control automatic service updates based on local file changes. `watch` is a sequence, each individual item in the sequence defines a rule to be applied by Compose to monitor source code for changes. For more information, see [Use Compose Watch](https://docs.docker.com/compose/file-watch/).\n\n#### [action](#action)\n\n`action` defines the action to take when changes are detected. If `action` is set to:\n\n*   `rebuild`, Compose rebuilds the service image based on the `build` section and recreates the service with the updated image.\n*   `sync`, Compose keeps the existing service container(s) running, but synchronizes source files with container content according to the `target` attribute.\n*   `sync+restart`, Compose synchronizes source files with container content according to the `target` attribute, and then restarts the container.\n\n> `sync+restart` attribute is available with Docker Compose version 2.23.0 and later.\n\n#### [ignore](#ignore)\n\nThe `ignore` attribute can be used to define a list of patterns for paths to be ignored. Any updated file that matches a pattern, or belongs to a folder that matches a pattern, won't trigger services to be re-created. The syntax is the same as `.dockerignore` file:\n\n*   `*` matches 0 or more characters in a file name.\n*   `?` matches a single character in file name.\n*   `*/*` matches two nested folders with arbitrary names\n*   `**` matches an arbitrary number of nested folders\n\nIf the build context includes a `.dockerignore` file, the patterns in this file is loaded as implicit content for the `ignores` file, and values set in the Compose model are appended.\n\n#### [path](#path)\n\n`path` attribute defines the path to source code (relative to the project directory) to monitor for changes. Updates to any file inside the path, which doesn't match any `ignore` rule, triggers the configured action.\n\n#### [target](#target)\n\n`target` attribute only applies when `action` is configured for `sync`. Files within `path` with changes are synchronized with container filesystem, so that the latter is always running with up-to-date content.",
    "title": "Compose Develop Specification | Docker Docs\n",
    "description": "Learn about the Compose Develop Specification",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/build/guide/",
    "markdown": "# Build with Docker | Docker Docs\n\nWelcome! This guide is an introduction and deep-dive into building software with Docker.\n\nWhether you’re just getting started, or you’re already an advanced Docker user, this guide aims to provide useful pointers into the possibilities and best practices of Docker's build features.\n\nTopics covered in this guide include:\n\n*   Introduction to build concepts\n*   Image size optimization\n*   Build speed performance improvements\n*   Building and exporting binaries\n*   Cache mounts and bind mounts\n*   Software testing\n*   Multi-platform builds\n\nThroughout this guide, an example application written in Go is used to illustrate how the build features work. You don’t need to know the Go programming language to follow this guide.\n\nThe guide starts off with a simple Dockerfile example, and builds from there. Some of the later sections in this guide describe advanced concepts and workflows. You don't need to complete this entire guide from start to finish. Follow the sections that seem relevant to you, and save the advanced sections at the end for later, when you need them.",
    "title": "Build with Docker | Docker Docs\n",
    "description": "Explore the features of Docker Build in this step-by-step guide",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/build/",
    "markdown": "# Compose Build Specification | Docker Docs\n\nBuild is an optional part of the Compose Specification. It tells Compose how to (re)build an application from source and lets you define the build process within a Compose file in a portable way. `build` can be either specified as a single string defining a context path, or as a detailed build definition.\n\nIn the former case, the whole path is used as a Docker context to execute a Docker build, looking for a canonical `Dockerfile` at the root of the directory. The path can be absolute or relative. If it is relative, it is resolved from the directory containing your Compose file. If it is absolute, the path prevents the Compose file from being portable so Compose displays a warning.\n\nIn the latter case, build arguments can be specified, including an alternate `Dockerfile` location. The path can be absolute or relative. If it is relative, it is resolved from the directory containing your Compose file. If it is absolute, the path prevents the Compose file from being portable so Compose displays a warning.\n\nWhen Compose is confronted with both a `build` subsection for a service and an `image` attribute, it follows the rules defined by the [`pull_policy`](https://docs.docker.com/compose/compose-file/05-services/#pull_policy) attribute.\n\nIf `pull_policy` is missing from the service definition, Compose attempts to pull the image first and then builds from source if the image isn't found in the registry or platform cache.\n\nCompose with `build` support offers an option to push built images to a registry. When doing so, it doesn't try to push service images without an `image` attribute. Compose warns you about the missing `image` attribute which prevents images being pushed.\n\nThe following example illustrates Compose Build Specification concepts with a concrete sample application. The sample is non-normative.\n\nWhen used to build service images from source, the Compose file creates three Docker images:\n\n*   `example/webapp`: A Docker image is built using `webapp` sub-directory, within the Compose file's parent folder, as the Docker build context. Lack of a `Dockerfile` within this folder throws an error.\n*   `example/database`: A Docker image is built using `backend` sub-directory within the Compose file parent folder. `backend.Dockerfile` file is used to define build steps, this file is searched relative to the context path, which means `..` resolves to the Compose file's parent folder, so `backend.Dockerfile` is a sibling file.\n*   A Docker image is built using the `custom` directory with the user's HOME as the Docker context. Compose displays a warning about the non-portable path used to build image.\n\nOn push, both `example/webapp` and `example/database` Docker images are pushed to the default registry. The `custom` service image is skipped as no `image` attribute is set and Compose displays a warning about this missing attribute.\n\nThe `build` subsection defines configuration options that are applied by Compose to build Docker images from source. `build` can be specified either as a string containing a path to the build context or as a detailed structure:\n\nUsing the string syntax, only the build context can be configured as either:\n\n*   A relative path to the Compose file's parent folder. This path must be a directory and must contain a `Dockerfile`\n    \n*   A git repository URL. Git URLs accept context configuration in their fragment section, separated by a colon (`:`). The first part represents the reference that Git checks out, and can be either a branch, a tag, or a remote reference. The second part represents a subdirectory inside the repository that is used as a build context.\n    \n\nAlternatively `build` can be an object with fields defined as follows:\n\n### [context](#context)\n\n`context` defines either a path to a directory containing a Dockerfile, or a URL to a git repository.\n\nWhen the value supplied is a relative path, it is interpreted as relative to the location of the Compose file. Compose warns you about the absolute path used to define the build context as those prevent the Compose file from being portable.\n\nIf not set explicitly, `context` defaults to project directory (`.`).\n\n### [dockerfile](#dockerfile)\n\n`dockerfile` sets an alternate Dockerfile. A relative path is resolved from the build context. Compose warns you about the absolute path used to define the Dockerfile as it prevents Compose files from being portable.\n\nWhen set, `dockerfile_inline` attribute is not allowed and Compose rejects any Compose file having both set.\n\n### [dockerfile\\_inline](#dockerfile_inline)\n\nIntroduced in Docker Compose version [2.17.0](https://docs.docker.com/compose/release-notes/#2170)\n\n`dockerfile_inline` defines the Dockerfile content as an inlined string in a Compose file. When set, the `dockerfile` attribute is not allowed and Compose rejects any Compose file having both set.\n\nUse of YAML multi-line string syntax is recommended to define the Dockerfile content:\n\n### [args](#args)\n\n`args` define build arguments, i.e. Dockerfile `ARG` values.\n\nUsing the following Dockerfile as an example:\n\n`args` can be set in the Compose file under the `build` key to define `GIT_COMMIT`. `args` can be set as a mapping or a list:\n\nValues can be omitted when specifying a build argument, in which case its value at build time must be obtained by user interaction, otherwise the build arg won't be set when building the Docker image.\n\n### [ssh](#ssh)\n\n`ssh` defines SSH authentications that the image builder should use during image build (e.g., cloning private repository).\n\n`ssh` property syntax can be either:\n\n*   `default`: Let the builder connect to the ssh-agent.\n*   `ID=path`: A key/value definition of an ID and the associated path. It can be either a [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) file, or path to ssh-agent socket.\n\nor\n\nUsing a custom id `myproject` with path to a local SSH key:\n\nThe image builder can then rely on this to mount the SSH key during build. For illustration, [BuildKit extended syntax](https://github.com/compose-spec/compose-spec/pull/234/%5Bmoby/buildkit@master/frontend/dockerfile/docs/syntax.md#run---mounttypessh%5D%28https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#run---mounttypessh%29) can be used to mount the SSH key set by ID and access a secured resource:\n\n`RUN --mount=type=ssh,id=myproject git clone ...`\n\n### [cache\\_from](#cache_from)\n\n`cache_from` defines a list of sources the image builder should use for cache resolution.\n\nCache location syntax follows the global format `[NAME|type=TYPE[,KEY=VALUE]]`. Simple `NAME` is actually a shortcut notation for `type=registry,ref=NAME`.\n\nCompose Build implementations may support custom types, the Compose Specification defines canonical types which must be supported:\n\n*   `registry` to retrieve build cache from an OCI image set by key `ref`\n\nUnsupported caches are ignored and don't prevent you from building images.\n\n### [cache\\_to](#cache_to)\n\n`cache_to` defines a list of export locations to be used to share build cache with future builds.\n\nCache target is defined using the same `type=TYPE[,KEY=VALUE]` syntax defined by [`cache_from`](#cache_from).\n\nUnsupported caches are ignored and don't prevent you from building images.\n\n### [additional\\_contexts](#additional_contexts)\n\nIntroduced in Docker Compose version [2.17.0](https://docs.docker.com/compose/release-notes/#2170)\n\n`additional_contexts` defines a list of named contexts the image builder should use during image build.\n\n`additional_contexts` can be a mapping or a list:\n\nWhen used as a list, the syntax follows the `NAME=VALUE` format, where `VALUE` is a string. Validation beyond that is the responsibility of the image builder (and is builder specific). Compose supports at least absolute and relative paths to a directory AND Git repository URLs, like [context](#context) does. Other context flavours must be prefixed to avoid ambiguity with a `type://` prefix.\n\nCompose warns you if the image builder does not support additional contexts and may list the unused contexts.\n\nIllustrative examples of how this is used in Buildx can be found [here](https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-additional-build-contexts---build-context).\n\n`extra_hosts` adds hostname mappings at build-time. Use the same syntax as [extra\\_hosts](https://docs.docker.com/compose/compose-file/05-services/#extra_hosts).\n\nIPv6 addresses can be enclosed in square brackets, for example:\n\nThe separator `=` is preferred, but `:` can also be used. Introduced in Docker Compose version [2.24.1](https://docs.docker.com/compose/release-notes/#2241). For example:\n\nCompose creates matching entry with the IP address and hostname in the container's network configuration, which means for Linux `/etc/hosts` will get extra lines:\n\n### [isolation](#isolation)\n\n`isolation` specifies a build’s container isolation technology. Like [isolation](https://docs.docker.com/compose/compose-file/05-services/#isolation), supported values are platform specific.\n\n### [privileged](#privileged)\n\nIntroduced in Docker Compose version [2.15.0](https://docs.docker.com/compose/release-notes/#2)\n\n`privileged` configures the service image to build with elevated privileges. Support and actual impacts are platform specific.\n\n### [labels](#labels)\n\n`labels` add metadata to the resulting image. `labels` can be set either as an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with other software.\n\n### [no\\_cache](#no_cache)\n\n`no_cache` disables image builder cache and enforces a full rebuild from source for all image layers. This only applies to layers declared in the Dockerfile, referenced images COULD be retrieved from local image store whenever tag has been updated on registry (see [pull](#pull)).\n\n### [pull](#pull)\n\n`pull` requires the image builder to pull referenced images (`FROM` Dockerfile directive), even if those are already available in the local image store.\n\n### [network](#network)\n\nSet the network containers connect to for the `RUN` instructions during build.\n\nUse `none` to disable networking during build:\n\n### [shm\\_size](#shm_size)\n\n`shm_size` sets the size of the shared memory (`/dev/shm` partition on Linux) allocated for building Docker images. Specify as an integer value representing the number of bytes or as a string expressing a [byte value](https://docs.docker.com/compose/compose-file/11-extension/#specifying-byte-values).\n\n### [target](#target)\n\n`target` defines the stage to build as defined inside a multi-stage `Dockerfile`.\n\n### [secrets](#secrets)\n\n`secrets` grants access to sensitive data defined by [secrets](https://docs.docker.com/compose/compose-file/05-services/#secrets) on a per-service build basis. Two different syntax variants are supported: the short syntax and the long syntax.\n\nCompose reports an error if the secret isn't defined in the [`secrets`](https://docs.docker.com/compose/compose-file/09-secrets/) section of this Compose file.\n\n#### [Short syntax](#short-syntax)\n\nThe short syntax variant only specifies the secret name. This grants the container access to the secret and mounts it as read-only to `/run/secrets/<secret_name>` within the container. The source name and destination mountpoint are both set to the secret name.\n\nThe following example uses the short syntax to grant the build of the `frontend` service access to the `server-certificate` secret. The value of `server-certificate` is set to the contents of the file `./server.cert`.\n\n#### [Long syntax](#long-syntax)\n\nThe long syntax provides more granularity in how the secret is created within the service's containers.\n\n*   `source`: The name of the secret as it exists on the platform.\n*   `target`: The name of the file to be mounted in `/run/secrets/` in the service's task containers. Defaults to `source` if not specified.\n*   `uid` and `gid`: The numeric UID or GID that owns the file within `/run/secrets/` in the service's task containers. Default value is USER running container.\n*   `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file to be mounted in `/run/secrets/` in the service's task containers, in octal notation. Default value is world-readable permissions (mode `0444`). The writable bit must be ignored if set. The executable bit may be set.\n\nThe following example sets the name of the `server-certificate` secret file to `server.crt` within the container, sets the mode to `0440` (group-readable) and sets the user and group to `103`. The value of `server-certificate` secret is provided by the platform through a lookup and the secret lifecycle not directly managed by Compose.\n\nService builds may be granted access to multiple secrets. Long and short syntax for secrets may be used in the same Compose file. Defining a secret in the top-level `secrets` must not imply granting any service build access to it. Such grant must be explicit within service specification as [secrets](https://docs.docker.com/compose/compose-file/05-services/#secrets) service element.\n\n### [tags](#tags)\n\n`tags` defines a list of tag mappings that must be associated to the build image. This list comes in addition to the `image` [property defined in the service section](https://docs.docker.com/compose/compose-file/05-services/#image)\n\n### [ulimits](#ulimits)\n\nIntroduced in Docker Compose version [2.23.1](https://docs.docker.com/compose/release-notes/#2231)\n\n`ulimits` overrides the default ulimits for a container. It's specified either as an integer for a single limit or as mapping for soft/hard limits.\n\n### [platforms](#platforms)\n\n`platforms` defines a list of target [platforms](https://docs.docker.com/compose/compose-file/05-services/#platform).\n\nWhen the `platforms` attribute is omitted, Compose includes the service's platform in the list of the default build target platforms.\n\nWhen the `platforms` attribute is defined, Compose includes the service's platform, otherwise users won't be able to run images they built.\n\nComposes reports an error in the following cases:\n\n*   When the list contains multiple platforms but the implementation is incapable of storing multi-platform images.\n    \n*   When the list contains an unsupported platform.\n    \n*   When the list is non-empty and does not contain the service's platform",
    "title": "Compose Build Specification | Docker Docs\n",
    "description": "Learn about the Compose Build Specification",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/reference/",
    "markdown": "# Overview of docker compose CLI\n\n```\nUsage:  docker compose [OPTIONS] COMMAND\n\nDefine and run multi-container applications with Docker.\n\nOptions:\n      --ansi string                Control when to print ANSI control characters (\"never\"|\"always\"|\"auto\") (default \"auto\")\n      --compatibility              Run compose in backward compatibility mode\n      --dry-run                    Execute command in dry run mode\n      --env-file stringArray       Specify an alternate environment file\n  -f, --file stringArray           Compose configuration files\n      --parallel int               Control max parallelism, -1 for unlimited (default -1)\n      --profile stringArray        Specify a profile to enable\n      --progress string            Set type of progress output (auto, tty, plain, quiet) (default \"auto\")\n      --project-directory string   Specify an alternate working directory\n                                   (default: the path of the, first specified, Compose file)\n  -p, --project-name string        Project name\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a service's running container.\n  build       Build or rebuild services\n  config      Parse, resolve and render compose file in canonical format\n  cp          Copy files/folders between a service container and the local filesystem\n  create      Creates containers for a service.\n  down        Stop and remove containers, networks\n  events      Receive real time events from containers.\n  exec        Execute a command in a running container.\n  images      List images used by the created containers\n  kill        Force stop service containers.\n  logs        View output from containers\n  ls          List running compose projects\n  pause       Pause services\n  port        Print the public port for a port binding.\n  ps          List containers\n  pull        Pull service images\n  push        Push service images\n  restart     Restart service containers\n  rm          Removes stopped service containers\n  run         Run a one-off command on a service.\n  scale       Scale services\n  start       Start services\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop services\n  top         Display the running processes\n  unpause     Unpause services\n  up          Create and start containers\n  version     Show the Docker Compose version information\n  wait        Block until the first service container stops\n  watch       Watch build context for service and rebuild/refresh containers when files are updated\n\nRun 'docker compose COMMAND --help' for more information on a command.\n```",
    "title": "Overview of docker compose CLI | Docker Docs\n",
    "description": "Overview of the Docker Compose CLI",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/12-interpolation/",
    "markdown": "# Interpolation | Docker Docs\n\nValues in a Compose file can be set by variables and interpolated at runtime. Compose files use a Bash-like syntax `${VARIABLE}`. Both `$VARIABLE` and `${VARIABLE}` syntax is supported.\n\nFor braced expressions, the following formats are supported:\n\n*   Direct substitution\n    *   `${VAR}` -> value of `VAR`\n*   Default value\n    *   `${VAR:-default}` -> value of `VAR` if set and non-empty, otherwise `default`\n    *   `${VAR-default}` -> value of `VAR` if set, otherwise `default`\n*   Required value\n    *   `${VAR:?error}` -> value of `VAR` if set and non-empty, otherwise exit with error\n    *   `${VAR?error}` -> value of `VAR` if set, otherwise exit with error\n*   Alternative value\n    *   `${VAR:+replacement}` -> `replacement` if `VAR` is set and non-empty, otherwise empty\n    *   `${VAR+replacement}` -> `replacement` if `VAR` is set, otherwise empty\n\nInterpolation can also be nested:\n\n*   `${VARIABLE:-${FOO}}`\n*   `${VARIABLE?$FOO}`\n*   `${VARIABLE:-${FOO:-default}}`\n\nOther extended shell-style features, such as `${VARIABLE/foo/bar}`, are not supported by Compose.\n\nYou can use a `$$` (double-dollar sign) when your configuration needs a literal dollar sign. This also prevents Compose from interpolating a value, so a `$$` allows you to refer to environment variables that you don't want processed by Compose.\n\nIf Compose can't resolve a substituted variable and no default value is defined, it displays a warning and substitutes the variable with an empty string.\n\nAs any values in a Compose file can be interpolated with variable substitution, including compact string notation for complex elements, interpolation is applied before a merge on a per-file basis.\n\nInterpolation applies only to YAML values, not to keys. For the few places where keys are actually arbitrary user-defined strings, such as [labels](https://docs.docker.com/compose/compose-file/05-services/#labels) or [environment](https://docs.docker.com/compose/compose-file/05-services/#environment), an alternate equal sign syntax must be used for interpolation to apply. For example:",
    "title": "Interpolation | Docker Docs\n",
    "description": "Learn about interpolation",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/06-networks/",
    "markdown": "# Networks top-level elements | Docker Docs\n\nNetworks let services communicate with each other. By default Compose sets up a single network for your app. Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by the service's name. The top-level `networks` element lets you configure named networks that can be reused across multiple services.\n\nTo use a network across multiple services, you must explicitly grant each service access by using the [networks](https://docs.docker.com/compose/compose-file/05-services/) attribute within the `services` top-level element. The `networks` top-level element has additional syntax that provides more granular control.\n\n### [Basic example](#basic-example)\n\nIn the following example, at runtime, networks `front-tier` and `back-tier` are created and the `frontend` service is connected to `front-tier` and `back-tier` networks.\n\n### [Advanced example](#advanced-example)\n\nThe advanced example shows a Compose file which defines two custom networks. The `proxy` service is isolated from the `db` service, because they do not share a network in common. Only `app` can talk to both.\n\n### [driver](#driver)\n\n`driver` specifies which driver should be used for this network. Compose returns an error if the driver is not available on the platform.\n\nFor more information on drivers and available options, see [Network drivers](https://docs.docker.com/network/drivers/).\n\n### [driver\\_opts](#driver_opts)\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver. These options are driver-dependent. Consult the driver's documentation for more information.\n\n### [attachable](#attachable)\n\nIf `attachable` is set to `true`, then standalone containers should be able to attach to this network, in addition to services. If a standalone container attaches to the network, it can communicate with services and other standalone containers that are also attached to the network.\n\n### [enable\\_ipv6](#enable_ipv6)\n\n`enable_ipv6` enables IPv6 networking. For an example, see step four of [Create an IPv6 network](https://docs.docker.com/config/daemon/ipv6/).\n\n### [external](#external)\n\nIf set to `true`:\n\n*   `external` specifies that this network’s lifecycle is maintained outside of that of the application. Compose doesn't attempt to create these networks, and returns an error if one doesn't exist.\n*   All other attributes apart from name are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, `proxy` is the gateway to the outside world. Instead of attempting to create a network, Compose queries the platform for an existing network simply called `outside` and connects the `proxy` service's containers to it.\n\n### [ipam](#ipam)\n\n`ipam` specifies a custom IPAM configuration. This is an object with several properties, each of which is optional:\n\n*   `driver`: Custom IPAM driver, instead of the default.\n*   `config`: A list with zero or more configuration elements, each containing a:\n    *   `subnet`: Subnet in CIDR format that represents a network segment\n    *   `ip_range`: Range of IPs from which to allocate container IPs\n    *   `gateway`: IPv4 or IPv6 gateway for the master subnet\n    *   `aux_addresses`: Auxiliary IPv4 or IPv6 addresses used by Network driver, as a mapping from hostname to IP\n*   `options`: Driver-specific options as a key-value mapping.\n\n### [internal](#internal)\n\nBy default, Compose provides external connectivity to networks. `internal`, when set to `true`, allows you to create an externally isolated network.\n\n### [labels](#labels)\n\nAdd metadata to containers using `labels`. You can use either an array or a dictionary.\n\nIt is recommended that you use reverse-DNS notation to prevent labels from conflicting with those used by other software.\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.network` labels.\n\n### [name](#name)\n\n`name` sets a custom name for the network. The name field can be used to reference networks which contain special characters. The name is used as is and is not scoped with the project name.\n\nIt can also be used in conjunction with the `external` property to define the platform network that Compose should retrieve, typically by using a parameter so the Compose file doesn't need to hard-code runtime specific values:\n\nFor more examples, see [Networking in Compose](https://docs.docker.com/compose/networking/).",
    "title": "Networks top-level elements | Docker Docs\n",
    "description": "Explore all the attributes the networks top-level element can have.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/07-volumes/",
    "markdown": "# Volumes top-level element | Docker Docs\n\nVolumes are persistent data stores implemented by the container engine. Compose offers a neutral way for services to mount volumes, and configuration parameters to allocate them to infrastructure. The top-level `volumes` declaration lets you configure named volumes that can be reused across multiple services.\n\nTo use a volume across multiple services, you must explicitly grant each service access by using the [volumes](https://docs.docker.com/compose/compose-file/05-services/#volumes) attribute within the `services` top-level element. The `volumes` attribute has additional syntax that provides more granular control.\n\n> **Tip**\n> \n> Working with large repositories or monorepos, or with virtual file systems that are no longer scaling with your codebase? Compose now takes advantage of [Synchronized file shares](https://docs.docker.com/desktop/synchronized-file-sharing/) and automatically creates file shares for bind mounts. Ensure you're signed in to Docker with a paid subscription and have enabled both **Access experimental features** and **Manage Synchronized file shares with Compose** in Docker Desktop's settings.\n\nThe following example shows a two-service setup where a database's data directory is shared with another service as a volume, named `db-data`, so that it can be periodically backed up.\n\nThe `db-data` volume is mounted at the `/var/lib/backup/data` and `/etc/data` container paths for backup and backend respectively.\n\nRunning `docker compose up` creates the volume if it doesn't already exist. Otherwise, the existing volume is used and is recreated if it's manually deleted outside of Compose.\n\nAn entry under the top-level `volumes` section can be empty, in which case it uses the container engine's default configuration for creating a volume. Optionally, you can configure it with the following keys:\n\n### [driver](#driver)\n\nSpecifies which volume driver should be used. If the driver is not available, Compose returns an error and doesn't deploy the application.\n\n### [driver\\_opts](#driver_opts)\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver for this volume. The options are driver-dependent.\n\n### [external](#external)\n\nIf set to `true`:\n\n*   `external` specifies that this volume already exists on the platform and its lifecycle is managed outside of that of the application. Compose then doesn't create the volume and returns an error if the volume doesn't exist.\n*   All other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, instead of attempting to create a volume called `{project_name}_db-data`, Compose looks for an existing volume simply called `db-data` and mounts it into the `backend` service's containers.\n\n### [labels](#labels)\n\n`labels` are used to add metadata to volumes. You can use either an array or a dictionary.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.volume` labels.\n\n### [name](#name)\n\n`name` sets a custom name for a volume. The name field can be used to reference volumes that contain special characters. The name is used as is and is not scoped with the stack name.\n\nThis makes it possible to make this lookup name a parameter of the Compose file, so that the model ID for the volume is hard-coded but the actual volume ID on the platform is set at runtime during deployment.\n\nFor example, if `DATABASE_VOLUME=my_volume_001` in your `.env` file:\n\nRunning `docker compose up` uses the volume called `my_volume_001`.\n\nIt can also be used in conjunction with the `external` property. This means the name used to look up the actual volume on the platform is set separately from the name used to refer to the volume within the Compose file:",
    "title": "Volumes top-level element | Docker Docs\n",
    "description": "Explore all the attributes the volumes top-level element can have.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/08-configs/",
    "markdown": "# Configs top-level elements | Docker Docs\n\nConfigs let services to adapt their behaviour without the need to rebuild a Docker image. As with volumes, configs are mounted as files into a container's filesystem. The location of the mount point within the container defaults to `/<config-name>` in Linux containers and `C:\\<config-name>` in Windows containers.\n\nServices can only access configs when explicitly granted by a [`configs`](https://docs.docker.com/compose/compose-file/05-services/#configs) attribute within the `services` top-level element.\n\nBy default, the config:\n\n*   Is owned by the user running the container command but can be overridden by service configuration.\n*   Has world-readable permissions (mode 0444), unless the service is configured to override this.\n\nThe top-level `configs` declaration defines or references configuration data that is granted to services in your Compose application. The source of the config is either `file` or `external`.\n\n*   `file`: The config is created with the contents of the file at the specified path.\n*   `environment`: The config content is created with the value of an environment variable. Introduced in Docker Compose version [2.23.1](https://docs.docker.com/compose/release-notes/#2231).\n*   `content`: The content is created with the inlined value. Introduced in Docker Compose version [2.23.1](https://docs.docker.com/compose/release-notes/#2231).\n*   `external`: If set to true, `external` specifies that this config has already been created. Compose does not attempt to create it, and if it does not exist, an error occurs.\n*   `name`: The name of the config object in the container engine to look up. This field can be used to reference configs that contain special characters. The name is used as is and will **not** be scoped with the project name.\n\n`<project_name>_http_config` is created when the application is deployed, by registering the content of the `httpd.conf` as the configuration data.\n\nAlternatively, `http_config` can be declared as external. Compose looks up `http_config` to expose the configuration data to relevant services.\n\n`<project_name>_app_config` is created when the application is deployed, by registering the inlined content as the configuration data. This means Compose infers variables when creating the config, which allows you to adjust content according to service configuration:\n\nExternal configs lookup can also use a distinct key by specifying a `name`.\n\nThe following example modifies the previous one to look up a config using the parameter `HTTP_CONFIG_KEY`. The actual lookup key is set at deployment time by the [interpolation](https://docs.docker.com/compose/compose-file/12-interpolation/) of variables, but exposed to containers as hard-coded ID `http_config`.\n\nIf `external` is set to `true`, all other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.",
    "title": "Configs top-level elements | Docker Docs\n",
    "description": "Explore all the attributes the configs top-level element can have.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/05-services/",
    "markdown": "# Services top-level elements | Docker Docs\n\nA service is an abstract definition of a computing resource within an application which can be scaled or replaced independently from other components. Services are backed by a set of containers, run by the platform according to replication requirements and placement constraints. As services are backed by containers, they are defined by a Docker image and set of runtime arguments. All containers within a service are identically created with these arguments.\n\nA Compose file must declare a `services` top-level element as a map whose keys are string representations of service names, and whose values are service definitions. A service definition contains the configuration that is applied to each service container.\n\nEach service may also include a `build` section, which defines how to create the Docker image for the service. Compose supports building docker images using this service definition. If not used, the `build` section is ignored and the Compose file is still considered valid. Build support is an optional aspect of the Compose Specification, and is described in detail in the [Compose Build Specification](https://docs.docker.com/compose/compose-file/build/) documentation.\n\nEach service defines runtime constraints and requirements to run its containers. The `deploy` section groups these constraints and allows the platform to adjust the deployment strategy to best match containers' needs with available resources. Deploy support is an optional aspect of the Compose Specification, and is described in detail in the [Compose Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/) documentation. If not implemented the `deploy` section is ignored and the Compose file is still considered valid.\n\n### [Simple example](#simple-example)\n\nThe following example demonstrates how to define two simple services, set their images, map ports, and configure basic environment variables using Docker Compose.\n\n### [Advanced example](#advanced-example)\n\nIn the following example, the `proxy` service uses the Nginx image, mounts a local Nginx configuration file into the container, exposes port `80` and depends on the `backend` service.\n\nThe `backend` service builds an image from the Dockerfile located in the `backend` directory that is set to build at stage `builder`.\n\nFor more example Compose files, explore the [Awesome Compose samples](https://github.com/docker/awesome-compose).\n\n### [annotations](#annotations)\n\n`annotations` defines annotations for the container. `annotations` can use either an array or a map.\n\n### [attach](#attach)\n\nIntroduced in Docker Compose version [2.20.0](https://docs.docker.com/compose/release-notes/#2200)\n\nWhen `attach` is defined and set to `false` Compose does not collect service logs, until you explicitly request it to.\n\nThe default service configuration is `attach: true`.\n\n### [build](#build)\n\n`build` specifies the build configuration for creating a container image from source, as defined in the [Compose Build Specification](https://docs.docker.com/compose/compose-file/build/).\n\n### [blkio\\_config](#blkio_config)\n\n`blkio_config` defines a set of configuration options to set block IO limits for a service.\n\n#### [device\\_read\\_bps, device\\_write\\_bps](#device_read_bps-device_write_bps)\n\nSet a limit in bytes per second for read / write operations on a given device. Each item in the list must have two keys:\n\n*   `path`: Defines the symbolic path to the affected device.\n*   `rate`: Either as an integer value representing the number of bytes or as a string expressing a byte value.\n\n#### [device\\_read\\_iops, device\\_write\\_iops](#device_read_iops-device_write_iops)\n\nSet a limit in operations per second for read / write operations on a given device. Each item in the list must have two keys:\n\n*   `path`: Defines the symbolic path to the affected device.\n*   `rate`: As an integer value representing the permitted number of operations per second.\n\n#### [weight](#weight)\n\nModify the proportion of bandwidth allocated to a service relative to other services. Takes an integer value between 10 and 1000, with 500 being the default.\n\n#### [weight\\_device](#weight_device)\n\nFine-tune bandwidth allocation by device. Each item in the list must have two keys:\n\n*   `path`: Defines the symbolic path to the affected device.\n*   `weight`: An integer value between 10 and 1000.\n\n### [cpu\\_count](#cpu_count)\n\n`cpu_count` defines the number of usable CPUs for service container.\n\n### [cpu\\_percent](#cpu_percent)\n\n`cpu_percent` defines the usable percentage of the available CPUs.\n\n### [cpu\\_shares](#cpu_shares)\n\n`cpu_shares` defines, as integer value, a service container's relative CPU weight versus other containers.\n\n### [cpu\\_period](#cpu_period)\n\n`cpu_period` configures CPU CFS (Completely Fair Scheduler) period when a platform is based on Linux kernel.\n\n### [cpu\\_quota](#cpu_quota)\n\n`cpu_quota` configures CPU CFS (Completely Fair Scheduler) quota when a platform is based on Linux kernel.\n\n### [cpu\\_rt\\_runtime](#cpu_rt_runtime)\n\n`cpu_rt_runtime` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either an integer value using microseconds as unit or a [duration](https://docs.docker.com/compose/compose-file/11-extension/#specifying-durations).\n\n### [cpu\\_rt\\_period](#cpu_rt_period)\n\n`cpu_rt_period` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either an integer value using microseconds as unit or a [duration](https://docs.docker.com/compose/compose-file/11-extension/#specifying-durations).\n\n### [cpus](#cpus)\n\n`cpus` define the number of (potentially virtual) CPUs to allocate to service containers. This is a fractional number. `0.000` means no limit.\n\nWhen set, `cpus` must be consistent with the `cpus` attribute in the [Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#cpus).\n\n### [cpuset](#cpuset)\n\n`cpuset` defines the explicit CPUs in which to allow execution. Can be a range `0-3` or a list `0,1`\n\n### [cap\\_add](#cap_add)\n\n`cap_add` specifies additional container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) as strings.\n\n### [cap\\_drop](#cap_drop)\n\n`cap_drop` specifies container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) to drop as strings.\n\n### [cgroup](#cgroup)\n\nIntroduced in Docker Compose version [2.15.0](https://docs.docker.com/compose/release-notes/#2150)\n\n`cgroup` specifies the cgroup namespace to join. When unset, it is the container runtime's decision to select which cgroup namespace to use, if supported.\n\n*   `host`: Runs the container in the Container runtime cgroup namespace.\n*   `private`: Runs the container in its own private cgroup namespace.\n\n### [cgroup\\_parent](#cgroup_parent)\n\n`cgroup_parent` specifies an optional parent [cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) for the container.\n\n### [command](#command)\n\n`command` overrides the default command declared by the container image, for example by Dockerfile's `CMD`.\n\nThe value can also be a list, in a manner similar to [Dockerfile](https://docs.docker.com/reference/dockerfile/#cmd):\n\nIf the value is `null`, the default command from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default command declared by the image is ignored, i.e. overridden to be empty.\n\n### [configs](#configs)\n\nConfigs allow services to adapt their behaviour without the need to rebuild a Docker image. Services can only access configs when explicitly granted by the `configs` attribute. Two different syntax variants are supported.\n\nCompose reports an error if `config` doesn't exist on the platform or isn't defined in the [`configs` top-level element](https://docs.docker.com/compose/compose-file/08-configs/) in the Compose file.\n\nThere are two syntaxes defined for configs: a short syntax and a long syntax.\n\nYou can grant a service access to multiple configs, and you can mix long and short syntax.\n\n#### [Short syntax](#short-syntax)\n\nThe short syntax variant only specifies the config name. This grants the container access to the config and mounts it as files into a service’s container’s filesystem. The location of the mount point within the container defaults to `/<config_name>` in Linux containers, and `C:\\<config-name>` in Windows containers.\n\nThe following example uses the short syntax to grant the `redis` service access to the `my_config` and `my_other_config` configs. The value of `my_config` is set to the contents of the file `./my_config.txt`, and `my_other_config` is defined as an external resource, which means that it has already been defined in the platform. If the external config does not exist, the deployment fails.\n\n#### [Long syntax](#long-syntax)\n\nThe long syntax provides more granularity in how the config is created within the service's task containers.\n\n*   `source`: The name of the config as it exists in the platform.\n*   `target`: The path and name of the file to be mounted in the service's task containers. Defaults to `/<source>` if not specified.\n*   `uid` and `gid`: The numeric UID or GID that owns the mounted config file within the service's task containers. Default value when not specified is USER running container.\n*   `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file that is mounted within the service's task containers, in octal notation. Default value is world-readable (`0444`). Writable bit must be ignored. The executable bit can be set.\n\nThe following example sets the name of `my_config` to `redis_config` within the container, sets the mode to `0440` (group-readable) and sets the user and group to `103`. The `redis` service does not have access to the `my_other_config` config.\n\n### [container\\_name](#container_name)\n\n`container_name` is a string that specifies a custom container name, rather than a name generated by default.\n\nCompose does not scale a service beyond one container if the Compose file specifies a `container_name`. Attempting to do so results in an error.\n\n`container_name` follows the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`\n\n### [credential\\_spec](#credential_spec)\n\n`credential_spec` configures the credential spec for a managed service account.\n\nIf you have services that use Windows containers, you can use `file:` and `registry:` protocols for `credential_spec`. Compose also supports additional protocols for custom use-cases.\n\nThe `credential_spec` must be in the format `file://<filename>` or `registry://<value-name>`.\n\nWhen using `registry:`, the credential spec is read from the Windows registry on the daemon's host. A registry value with the given name must be located in:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs\n```\n\nThe following example loads the credential spec from a value named `my-credential-spec` in the registry:\n\n#### [Example gMSA configuration](#example-gmsa-configuration)\n\nWhen configuring a gMSA credential spec for a service, you only need to specify a credential spec with `config`, as shown in the following example:\n\n### [depends\\_on](#depends_on)\n\nWith the `depends_on` attribute, you can control the order of service startup and shutdown. It is useful if services are closely coupled, and the startup sequence impacts the application's functionality.\n\n#### [Short syntax](#short-syntax-1)\n\nThe short syntax variant only specifies service names of the dependencies. Service dependencies cause the following behaviors:\n\n*   Compose creates services in dependency order. In the following example, `db` and `redis` are created before `web`.\n    \n*   Compose removes services in dependency order. In the following example, `web` is removed before `db` and `redis`.\n    \n\nSimple example:\n\nCompose guarantees dependency services have been started before starting a dependent service. Compose waits for dependency services to be \"ready\" before starting a dependent service.\n\n#### [Long syntax](#long-syntax-1)\n\nThe long form syntax enables the configuration of additional fields that can't be expressed in the short form.\n\n*   `restart`: When set to `true` Compose restarts this service after it updates the dependency service. This applies to an explicit restart controlled by a Compose operation, and excludes automated restart by the container runtime after the container dies. Introduced in Docker Compose version [2.17.0](https://docs.docker.com/compose/release-notes/#2170).\n    \n*   `condition`: Sets the condition under which dependency is considered satisfied\n    \n    *   `service_started`: An equivalent of the short syntax described above\n    *   `service_healthy`: Specifies that a dependency is expected to be \"healthy\" (as indicated by [healthcheck](#healthcheck)) before starting a dependent service.\n    *   `service_completed_successfully`: Specifies that a dependency is expected to run to successful completion before starting a dependent service.\n*   `required`: When set to `false` Compose only warns you when the dependency service isn't started or available. If it's not defined the default value of `required` is `true`. Introduced in Docker Compose version [2.20.0](https://docs.docker.com/compose/release-notes/#2200).\n    \n\nService dependencies cause the following behaviors:\n\n*   Compose creates services in dependency order. In the following example, `db` and `redis` are created before `web`.\n    \n*   Compose waits for healthchecks to pass on dependencies marked with `service_healthy`. In the following example, `db` is expected to be \"healthy\" before `web` is created.\n    \n*   Compose removes services in dependency order. In the following example, `web` is removed before `db` and `redis`.\n    \n\nCompose guarantees dependency services are started before starting a dependent service. Compose guarantees dependency services marked with `service_healthy` are \"healthy\" before starting a dependent service.\n\n### [deploy](#deploy)\n\n`deploy` specifies the configuration for the deployment and lifecycle of services, as defined [in the Compose Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/).\n\n### [develop](#develop)\n\nIntroduced in Docker Compose version [2.22.0](https://docs.docker.com/compose/release-notes/#2220)\n\n`develop` specifies the development configuration for maintaining a container in sync with source, as defined in the [Development Section](https://docs.docker.com/compose/compose-file/develop/).\n\n### [device\\_cgroup\\_rules](#device_cgroup_rules)\n\n`device_cgroup_rules` defines a list of device cgroup rules for this container. The format is the same format the Linux kernel specifies in the [Control Groups Device Whitelist Controller](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html).\n\n### [devices](#devices)\n\n`devices` defines a list of device mappings for created containers in the form of `HOST_PATH:CONTAINER_PATH[:CGROUP_PERMISSIONS]`.\n\n### [dns](#dns)\n\n`dns` defines custom DNS servers to set on the container network interface configuration. It can be a single value or a list.\n\n### [dns\\_opt](#dns_opt)\n\n`dns_opt` list custom DNS options to be passed to the container’s DNS resolver (`/etc/resolv.conf` file on Linux).\n\n### [dns\\_search](#dns_search)\n\n`dns_search` defines custom DNS search domains to set on container network interface configuration. It can be a single value or a list.\n\n### [domainname](#domainname)\n\n`domainname` declares a custom domain name to use for the service container. It must be a valid RFC 1123 hostname.\n\n### [entrypoint](#entrypoint)\n\n`entrypoint` declares the default entrypoint for the service container. This overrides the `ENTRYPOINT` instruction from the service's Dockerfile.\n\nIf `entrypoint` is non-null, Compose ignores any default command from the image, for example the `CMD` instruction in the Dockerfile.\n\nSee also [`command`](#command) to set or override the default command to be executed by the entrypoint process.\n\nIn its short form, the value can be defined as a string:\n\nAlternatively, the value can also be a list, in a manner similar to the [Dockerfile](https://docs.docker.com/reference/dockerfile/#cmd):\n\nIf the value is `null`, the default entrypoint from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default entrypoint declared by the image is ignored, i.e. overridden to be empty.\n\n### [env\\_file](#env_file)\n\nThe `env_file` attribute is used to specify one or more files that contain environment variables to be passed to the containers.\n\n`env_file` can also be a list. The files in the list are processed from the top down. For the same variable specified in two env files, the value from the last file in the list stands.\n\nList elements can also be declared as a mapping, which then lets you set an additional attribute `required`. This defaults to `true`. When `required` is set to `false` and the `.env` file is missing, Compose silently ignores the entry.\n\n> `required` attribute is available with Docker Compose version 2.24.0 or later.\n\nRelative path are resolved from the Compose file's parent folder. As absolute paths prevent the Compose file from being portable, Compose warns you when such a path is used to set `env_file`.\n\nEnvironment variables declared in the [environment](#environment) section override these values. This holds true even if those values are empty or undefined.\n\n#### [Env\\_file format](#env_file-format)\n\nEach line in an `.env` file must be in `VAR[=[VAL]]` format. The following syntax rules apply:\n\n*   Lines beginning with `#` are processed as comments and ignored.\n*   Blank lines are ignored.\n*   Unquoted and double-quoted (`\"`) values have [Interpolation](https://docs.docker.com/compose/compose-file/12-interpolation/) applied.\n*   Each line represents a key-value pair. Values can optionally be quoted.\n    *   `VAR=VAL` -> `VAL`\n    *   `VAR=\"VAL\"` -> `VAL`\n    *   `VAR='VAL'` -> `VAL`\n*   Inline comments for unquoted values must be preceded with a space.\n    *   `VAR=VAL # comment` -> `VAL`\n    *   `VAR=VAL# not a comment` -> `VAL# not a comment`\n*   Inline comments for quoted values must follow the closing quote.\n    *   `VAR=\"VAL # not a comment\"` -> `VAL # not a comment`\n    *   `VAR=\"VAL\" # comment` -> `VAL`\n*   Single-quoted (`'`) values are used literally.\n    *   `VAR='$OTHER'` -> `$OTHER`\n    *   `VAR='${OTHER}'` -> `${OTHER}`\n*   Quotes can be escaped with `\\`.\n    *   `VAR='Let\\'s go!'` -> `Let's go!`\n    *   `VAR=\"{\\\"hello\\\": \\\"json\\\"}\"` -> `{\"hello\": \"json\"}`\n*   Common shell escape sequences including `\\n`, `\\r`, `\\t`, and `\\\\` are supported in double-quoted values.\n    *   `VAR=\"some\\tvalue\"` -> `some value`\n    *   `VAR='some\\tvalue'` -> `some\\tvalue`\n    *   `VAR=some\\tvalue` -> `some\\tvalue`\n\n`VAL` may be omitted, in such cases the variable value is an empty string. `=VAL` may be omitted, in such cases the variable is unset.\n\n### [environment](#environment)\n\nThe `environment` attribute defines environment variables set in the container. `environment` can use either an array or a map. Any boolean values; true, false, yes, no, should be enclosed in quotes to ensure they are not converted to True or False by the YAML parser.\n\nEnvironment variables can be declared by a single key (no value to equals sign). In this case Compose relies on you to resolve the value. If the value is not resolved, the variable is unset and is removed from the service container environment.\n\nMap syntax:\n\nArray syntax:\n\nWhen both `env_file` and `environment` are set for a service, values set by `environment` have precedence.\n\n### [expose](#expose)\n\n`expose` defines the (incoming) port or a range of ports that Compose exposes from the container. These ports must be accessible to linked services and should not be published to the host machine. Only the internal container ports can be specified.\n\nSyntax is `<portnum>/[<proto>]` or `<startport-endport>/[<proto>]` for a port range. When not explicitly set, `tcp` protocol is used.\n\n> **Note**\n> \n> If the Dockerfile for the image already exposes ports, it is visible to other containers on the network even if `expose` is not set in your Compose file.\n\n### [extends](#extends)\n\n`extends` lets you share common configurations among different files, or even different projects entirely. With `extends` you can define a common set of service options in one place and refer to it from anywhere. You can refer to another Compose file and select a service you want to also use in your own application, with the ability to override some attributes for your own needs.\n\nYou can use `extends` on any service together with other configuration keys. The `extends` value must be a mapping defined with a required `service` and an optional `file` key.\n\n*   `service`: Defines the name of the service being referenced as a base, for example `web` or `database`.\n*   `file`: The location of a Compose configuration file defining that service.\n\nWhen a service uses `extends`, it can also specify dependencies on other resources, an explicit `volumes` declaration for instance. However, it's important to note that `extends` does not automatically incorporate the target volume definition into the extending Compose file. Instead, you are responsible for ensuring that an equivalent resource exists for the service being extended to maintain consistency. Docker Compose verifies that a resource with the referenced ID is present within the Compose model.\n\nDependencies on other resources in an `extends` target can be:\n\n*   An explicit reference by `volumes`, `networks`, `configs`, `secrets`, `links`, `volumes_from` or `depends_on`\n*   A reference to another service using the `service:{name}` syntax in namespace declaration (`ipc`, `pid`, `network_mode`)\n\nCircular references with `extends` are not supported, Compose returns an error when one is detected.\n\n#### [Finding referenced service](#finding-referenced-service)\n\n`file` value can be:\n\n*   Not present. This indicates that another service within the same Compose file is being referenced.\n*   File path, which can be either:\n    *   Relative path. This path is considered as relative to the location of the main Compose file.\n    *   Absolute path.\n\nA service denoted by `service` must be present in the identified referenced Compose file. Compose returns an error if:\n\n*   The service denoted by `service` is not found.\n*   The Compose file denoted by `file` is not found.\n\n#### [Merging service definitions](#merging-service-definitions)\n\nTwo service definitions, the main one in the current Compose file and the referenced one specified by `extends`, are merged in the following way:\n\n*   Mappings: Keys in mappings of the main service definition override keys in mappings of the referenced service definition. Keys that aren't overridden are included as is.\n*   Sequences: Items are combined together into a new sequence. The order of elements is preserved with the referenced items coming first and main items after.\n*   Scalars: Keys in the main service definition take precedence over keys in the referenced one.\n\n##### [Mappings](#mappings)\n\nThe following keys should be treated as mappings: `annotations`, `build.args`, `build.labels`, `build.extra_hosts`, `deploy.labels`, `deploy.update_config`, `deploy.rollback_config`, `deploy.restart_policy`, `deploy.resources.limits`, `environment`, `healthcheck`, `labels`, `logging.options`, `sysctls`, `storage_opt`, `extra_hosts`, `ulimits`.\n\nOne exception that applies to `healthcheck` is that the main mapping cannot specify `disable: true` unless the referenced mapping also specifies `disable: true`. Compose returns an error in this case.\n\nFor example, the input below:\n\nProduces the following configuration for the `cli` service. The same output is produced if array syntax is used.\n\nItems under `blkio_config.device_read_bps`, `blkio_config.device_read_iops`, `blkio_config.device_write_bps`, `blkio_config.device_write_iops`, `devices` and `volumes` are also treated as mappings where key is the target path inside the container.\n\nFor example, the input below:\n\nProduces the following configuration for the `cli` service. Note that the mounted path now points to the new volume name and `ro` flag was applied.\n\nIf the referenced service definition contains `extends` mapping, the items under it are simply copied into the new merged definition. The merging process is then kicked off again until no `extends` keys are remaining.\n\nFor example, the input below:\n\nProduces the following configuration for the `cli` service. Here, `cli` services gets `user` key from `common` service, which in turn gets this key from `base` service.\n\n##### [Sequences](#sequences)\n\nThe following keys should be treated as sequences: `cap_add`, `cap_drop`, `configs`, `deploy.placement.constraints`, `deploy.placement.preferences`, `deploy.reservations.generic_resources`, `device_cgroup_rules`, `expose`, `external_links`, `ports`, `secrets`, `security_opt`. Any duplicates resulting from the merge are removed so that the sequence only contains unique elements.\n\nFor example, the input below:\n\nProduces the following configuration for the `cli` service.\n\nIn case list syntax is used, the following keys should also be treated as sequences: `dns`, `dns_search`, `env_file`, `tmpfs`. Unlike sequence fields mentioned above, duplicates resulting from the merge are not removed.\n\n##### [Scalars](#scalars)\n\nAny other allowed keys in the service definition should be treated as scalars.\n\n### [external\\_links](#external_links)\n\n`external_links` link service containers to services managed outside of your Compose application. `external_links` define the name of an existing service to retrieve using the platform lookup mechanism. An alias of the form `SERVICE:ALIAS` can be specified.\n\n`extra_hosts` adds hostname mappings to the container network interface configuration (`/etc/hosts` for Linux).\n\n#### [Short syntax](#short-syntax-2)\n\nShort syntax uses plain strings in a list. Values must set hostname and IP address for additional hosts in the form of `HOSTNAME=IP`.\n\nIPv6 addresses can be enclosed in square brackets, for example:\n\nThe separator `=` is preferred, but `:` can also be used. Introduced in Docker Compose version [2.24.1](https://docs.docker.com/compose/release-notes/#2241). For example:\n\n#### [Long syntax](#long-syntax-2)\n\nAlternatively, `extra_hosts` can be set as a mapping between hostname(s) and IP(s)\n\nCompose creates a matching entry with the IP address and hostname in the container's network configuration, which means for Linux `/etc/hosts` get extra lines:\n\n### [group\\_add](#group_add)\n\n`group_add` specifies additional groups, by name or number, which the user inside the container must be a member of.\n\nAn example of where this is useful is when multiple containers (running as different users) need to all read or write the same file on a shared volume. That file can be owned by a group shared by all the containers, and specified in `group_add`.\n\nRunning `id` inside the created container must show that the user belongs to the `mail` group, which would not have been the case if `group_add` were not declared.\n\n### [healthcheck](#healthcheck)\n\nThe `healthcheck` attribute declares a check that's run to determine whether or not the service containers are \"healthy\". It works in the same way, and has the same default values, as the HEALTHCHECK Dockerfile instruction set by the service's Docker image. Your Compose file can override the values set in the Dockerfile.\n\nFor more information on `HEALTHCHECK`, see the [Dockerfile reference](https://docs.docker.com/reference/dockerfile/#healthcheck).\n\n`interval`, `timeout`, `start_period`, and `start_interval` are [specified as durations](https://docs.docker.com/compose/compose-file/11-extension/#specifying-durations). Introduced in Docker Compose version [2.20.2](https://docs.docker.com/compose/release-notes/#2202)\n\n`test` defines the command Compose runs to check container health. It can be either a string or a list. If it's a list, the first item must be either `NONE`, `CMD` or `CMD-SHELL`. If it's a string, it's equivalent to specifying `CMD-SHELL` followed by that string.\n\nUsing `CMD-SHELL` runs the command configured as a string using the container's default shell (`/bin/sh` for Linux). Both forms below are equivalent:\n\n`NONE` disables the healthcheck, and is mostly useful to disable the Healthcheck Dockerfile instruction set by the service's Docker image. Alternatively, the healthcheck set by the image can be disabled by setting `disable: true`:\n\n### [hostname](#hostname)\n\n`hostname` declares a custom host name to use for the service container. It must be a valid RFC 1123 hostname.\n\n### [image](#image)\n\n`image` specifies the image to start the container from. `image` must follow the Open Container Specification [addressable image format](https://github.com/opencontainers/org/blob/master/docs/docs/introduction/digests.md), as `[<registry>/][<project>/]<image>[:<tag>|@<digest>]`.\n\nIf the image does not exist on the platform, Compose attempts to pull it based on the `pull_policy`. If you are also using the [Compose Build Specification](https://docs.docker.com/compose/compose-file/build/), there are alternative options for controlling the precedence of pull over building the image from source, however pulling the image is the default behavior.\n\n`image` may be omitted from a Compose file as long as a `build` section is declared. If you are not using the Compose Build Specification, Compose won't work if `image` is missing from the Compose file.\n\n### [init](#init)\n\n`init` runs an init process (PID 1) inside the container that forwards signals and reaps processes. Set this option to `true` to enable this feature for the service.\n\nThe init binary that is used is platform specific.\n\n### [ipc](#ipc)\n\n`ipc` configures the IPC isolation mode set by the service container.\n\n*   `shareable`: Gives the container its own private IPC namespace, with a possibility to share it with other containers.\n*   `service:{name}`: Makes the container join another container's (`shareable`) IPC namespace.\n\n### [isolation](#isolation)\n\n`isolation` specifies a container’s isolation technology. Supported values are platform specific.\n\n### [labels](#labels)\n\n`labels` add metadata to containers. You can use either an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.\n\nCompose creates containers with canonical labels:\n\n*   `com.docker.compose.project` set on all resources created by Compose to the user project name\n*   `com.docker.compose.service` set on service containers with service name as defined in the Compose file\n\nThe `com.docker.compose` label prefix is reserved. Specifying labels with this prefix in the Compose file results in a runtime error.\n\n### [links](#links)\n\n`links` defines a network link to containers in another service. Either specify both the service name and a link alias (`SERVICE:ALIAS`), or just the service name.\n\nContainers for the linked service are reachable at a hostname identical to the alias, or the service name if no alias is specified.\n\nLinks are not required to enable services to communicate. When no specific network configuration is set, any service is able to reach any other service at that service’s name on the `default` network. If services do declare networks they are attached to, `links` does not override the network configuration and services not attached to a shared network are not be able to communicate. Compose doesn't warn you about a configuration mismatch.\n\nLinks also express implicit dependency between services in the same way as [depends\\_on](#depends_on), so they determine the order of service startup.\n\n### [logging](#logging)\n\n`logging` defines the logging configuration for the service.\n\nThe `driver` name specifies a logging driver for the service's containers. The default and available values are platform specific. Driver specific options can be set with `options` as key-value pairs.\n\n### [mac\\_address](#mac_address)\n\n> Available with Docker Compose version 2.24.0 and later.\n\n`mac_address` sets a MAC address for the service container.\n\n> **Note** Container runtimes might reject this value (ie. Docker Engine >= v25.0). In that case, you should use [networks.mac\\_address](#mac_address) instead.\n\n### [mem\\_limit](#mem_limit)\n\n`mem_limit` configures a limit on the amount of memory a container can allocate, set as a string expressing a [byte value](https://docs.docker.com/compose/compose-file/11-extension/#specifying-byte-values).\n\nWhen set, `mem_limit` must be consistent with the `limits.memory` attribute in the [Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#memory).\n\n### [mem\\_reservation](#mem_reservation)\n\n`mem_reservation` configures a reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](https://docs.docker.com/compose/compose-file/11-extension/#specifying-byte-values).\n\nWhen set, `mem_reservation` must be consistent with the `reservations.memory` attribute in the [Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#memory).\n\n### [mem\\_swappiness](#mem_swappiness)\n\n`mem_swappiness` defines as a percentage, a value between 0 and 100, for the host kernel to swap out anonymous memory pages used by a container.\n\n*   `0`: Turns off anonymous page swapping.\n*   `100`: Sets all anonymous pages as swappable.\n\nThe default value is platform specific.\n\n### [memswap\\_limit](#memswap_limit)\n\n`memswap_limit` defines the amount of memory the container is allowed to swap to disk. This is a modifier attribute that only has meaning if [`memory`](https://docs.docker.com/compose/compose-file/deploy/#memory) is also set. Using swap lets the container write excess memory requirements to disk when the container has exhausted all the memory that is available to it. There is a performance penalty for applications that swap memory to disk often.\n\n*   If `memswap_limit` is set to a positive integer, then both `memory` and `memswap_limit` must be set. `memswap_limit` represents the total amount of memory and swap that can be used, and `memory` controls the amount used by non-swap memory. So if `memory`\\=\"300m\" and `memswap_limit`\\=\"1g\", the container can use 300m of memory and 700m (1g - 300m) swap.\n*   If `memswap_limit` is set to 0, the setting is ignored, and the value is treated as unset.\n*   If `memswap_limit` is set to the same value as `memory`, and `memory` is set to a positive integer, the container does not have access to swap.\n*   If `memswap_limit` is unset, and `memory` is set, the container can use as much swap as the `memory` setting, if the host container has swap memory configured. For instance, if `memory`\\=\"300m\" and `memswap_limit` is not set, the container can use 600m in total of memory and swap.\n*   If `memswap_limit` is explicitly set to -1, the container is allowed to use unlimited swap, up to the amount available on the host system.\n\n### [network\\_mode](#network_mode)\n\n`network_mode` sets a service container's network mode.\n\n*   `none`: Turns off all container networking.\n*   `host`: Gives the container raw access to the host's network interface.\n*   `service:{name}`: Gives the containers access to the specified service only. For more information, see [Container networks](https://docs.docker.com/network/#container-networks).\n\nWhen set, the [`networks`](#networks) attribute is not allowed and Compose rejects any Compose file containing both attributes.\n\n### [networks](#networks)\n\nThe `networks` attribute defines the networks that service containers are attached to, referencing entries under the `networks` top-level element. The `networks` attribute helps manage the networking aspects of containers, providing control over how services are segmented and interact within the Docker environment. This is used to specify which networks the containers for that service should connect to. This is important for defining how containers communicate with each other and externally.\n\nFor more information about the `networks` top-level element, see [Networks](https://docs.docker.com/compose/compose-file/06-networks/).\n\n#### [aliases](#aliases)\n\n`aliases` declares alternative hostnames for the service on the network. Other containers on the same network can use either the service name or an alias to connect to one of the service's containers.\n\nSince `aliases` are network-scoped, the same service can have different aliases on different networks.\n\n> **Note** A network-wide alias can be shared by multiple containers, and even by multiple services. If it is, then exactly which container the name resolves to is not guaranteed.\n\nIn the following example, service `frontend` is able to reach the `backend` service at the hostname `backend` or `database` on the `back-tier` network. The service `monitoring` is able to reach same `backend` service at `backend` or `mysql` on the `admin` network.\n\n#### [ipv4\\_address, ipv6\\_address](#ipv4_address-ipv6_address)\n\nSpecify a static IP address for a service container when joining the network.\n\nThe corresponding network configuration in the [top-level networks section](https://docs.docker.com/compose/compose-file/06-networks/) must have an `ipam` attribute with subnet configurations covering each static address.\n\n#### [link\\_local\\_ips](#link_local_ips)\n\n`link_local_ips` specifies a list of link-local IPs. Link-local IPs are special IPs which belong to a well known subnet and are purely managed by the operator, usually dependent on the architecture where they are deployed.\n\nExample:\n\n#### [mac\\_address](#mac_address-1)\n\nIntroduced in Docker Compose version [2.23.2](https://docs.docker.com/compose/release-notes/#2232)\n\n`mac_address` sets the MAC address used by the service container when connecting to this particular network.\n\n#### [priority](#priority)\n\n`priority` indicates in which order Compose connects the service’s containers to its networks. If unspecified, the default value is 0.\n\nIn the following example, the app service connects to `app_net_1` first as it has the highest priority. It then connects to `app_net_3`, then `app_net_2`, which uses the default priority value of 0.\n\n### [oom\\_kill\\_disable](#oom_kill_disable)\n\nIf `oom_kill_disable` is set, Compose configures the platform so it won't kill the container in case of memory starvation.\n\n### [oom\\_score\\_adj](#oom_score_adj)\n\n`oom_score_adj` tunes the preference for containers to be killed by platform in case of memory starvation. Value must be within -1000,1000 range.\n\n### [pid](#pid)\n\n`pid` sets the PID mode for container created by Compose. Supported values are platform specific.\n\n### [pids\\_limit](#pids_limit)\n\n`pids_limit` tunes a container’s PIDs limit. Set to -1 for unlimited PIDs.\n\nWhen set, `pids_limit` must be consistent with the `pids` attribute in the [Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#pids).\n\n### [platform](#platform)\n\n`platform` defines the target platform the containers for the service run on. It uses the `os[/arch[/variant]]` syntax.\n\nThe values of `os`, `arch`, and `variant` must conform to the convention used by the [OCI Image Spec](https://github.com/opencontainers/image-spec/blob/v1.0.2/image-index.md).\n\nCompose uses this attribute to determine which version of the image is pulled and/or on which platform the service’s build is performed.\n\n### [ports](#ports)\n\nThe `ports` is used to define the port mappings between the host machine and the containers. This is crucial for allowing external access to services running inside containers. It can be defined using short syntax for simple port mapping or long syntax, which includes additional options like protocol type and network mode.\n\n> **Note**\n> \n> Port mapping must not be used with `network_mode: host` otherwise a runtime error occurs.\n\n#### [Short syntax](#short-syntax-3)\n\nThe short syntax is a colon-separated string to set the host IP, host port, and container port in the form:\n\n`[HOST:]CONTAINER[/PROTOCOL]` where:\n\n*   `HOST` is `[IP:](port | range)`\n*   `CONTAINER` is `port | range`\n*   `PROTOCOL` to restrict port to specified protocol. `tcp` and `udp` values are defined by the Specification, Compose offers support for platform-specific protocol names.\n\nIf host IP is not set, it binds to all network interfaces. Ports can be either a single value or a range. Host and container must use equivalent ranges.\n\nEither specify both ports (`HOST:CONTAINER`), or just the container port. In the latter case, the container runtime automatically allocates any unassigned port of the host.\n\n`HOST:CONTAINER` should always be specified as a (quoted) string, to avoid conflicts with [yaml base-60 float](https://yaml.org/type/float.html).\n\nExamples:\n\n> **Note**\n> \n> If Host IP mapping is not supported by a container engine, Compose rejects the Compose file and ignores the specified host IP.\n\n#### [Long syntax](#long-syntax-3)\n\nThe long form syntax allows the configuration of additional fields that can't be expressed in the short form.\n\n*   `target`: The container port\n*   `published`: The publicly exposed port. It is defined as a string and can be set as a range using syntax `start-end`. It means the actual port is assigned a remaining available port, within the set range.\n*   `host_ip`: The Host IP mapping, unspecified means all network interfaces (`0.0.0.0`).\n*   `protocol`: The port protocol (`tcp` or `udp`). Defaults to `tcp`.\n*   `app_protocol`: The application protocol (TCP/IP level 4 / OSI level 7) this port is used for. This is optional and can be used as a hint for Compose to offer richer behavior for protocols that it understands. Introduced in Docker Compose version [2.26.0](https://docs.docker.com/compose/release-notes/#2260).\n*   `mode`: `host`: For publishing a host port on each node, or `ingress` for a port to be load balanced. Defaults to `ingress`.\n*   `name`: A human-readable name for the port, used to document it's usage within the service.\n\n### [privileged](#privileged)\n\n`privileged` configures the service container to run with elevated privileges. Support and actual impacts are platform specific.\n\n### [profiles](#profiles)\n\n`profiles` defines a list of named profiles for the service to be enabled under. If unassigned, the service is always started but if assigned, it is only started if the profile is activated.\n\nIf present, `profiles` follow the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n\n### [pull\\_policy](#pull_policy)\n\n`pull_policy` defines the decisions Compose makes when it starts to pull images. Possible values are:\n\n*   `always`: Compose always pulls the image from the registry.\n*   `never`: Compose doesn't pull the image from a registry and relies on the platform cached image. If there is no cached image, a failure is reported.\n*   `missing`: Compose pulls the image only if it's not available in the platform cache. This is the default option if you are not also using the [Compose Build Specification](https://docs.docker.com/compose/compose-file/build/). `if_not_present` is considered an alias for this value for backward compatibility.\n*   `build`: Compose builds the image. Compose rebuilds the image if it's already present.\n\n### [read\\_only](#read_only)\n\n`read_only` configures the service container to be created with a read-only filesystem.\n\n### [restart](#restart)\n\n`restart` defines the policy that the platform applies on container termination.\n\n*   `no`: The default restart policy. It does not restart the container under any circumstances.\n*   `always`: The policy always restarts the container until its removal.\n*   `on-failure[:max-retries]`: The policy restarts the container if the exit code indicates an error. Optionally, limit the number of restart retries the Docker daemon attempts.\n*   `unless-stopped`: The policy restarts the container irrespective of the exit code but stops restarting when the service is stopped or removed.\n\nYou can find more detailed information on restart policies in the [Restart Policies (--restart)](https://docs.docker.com/reference/cli/docker/container/run/#restart) section of the Docker run reference page.\n\n### [runtime](#runtime)\n\n`runtime` specifies which runtime to use for the service’s containers.\n\nFor example, `runtime` can be the name of [an implementation of OCI Runtime Spec](https://github.com/opencontainers/runtime-spec/blob/master/implementations.md), such as \"runc\".\n\nThe default is `runc`. To use a different runtime, see [Alternative runtimes](https://docs.docker.com/engine/alternative-runtimes/).\n\n### [scale](#scale)\n\n`scale` specifies the default number of containers to deploy for this service. When both are set, `scale` must be consistent with the `replicas` attribute in the [Deploy Specification](https://docs.docker.com/compose/compose-file/deploy/#replicas).\n\n### [secrets](#secrets)\n\nThe `secrets` attribute grants access to sensitive data defined by the secrets top-level element on a per-service basis. Services can be granted access to multiple secrets.\n\nTwo different syntax variants are supported; the short syntax and the long syntax. Long and short syntax for secrets may be used in the same Compose file.\n\nCompose reports an error if the secret doesn't exist on the platform or isn't defined in the [`secrets` top-level section](https://docs.docker.com/compose/compose-file/09-secrets/) of the Compose file.\n\nDefining a secret in the top-level `secrets` must not imply granting any service access to it. Such grant must be explicit within service specification as [secrets](https://docs.docker.com/compose/compose-file/09-secrets/) service element.\n\n#### [Short syntax](#short-syntax-4)\n\nThe short syntax variant only specifies the secret name. This grants the container access to the secret and mounts it as read-only to `/run/secrets/<secret_name>` within the container. The source name and destination mountpoint are both set to the secret name.\n\nThe following example uses the short syntax to grant the `frontend` service access to the `server-certificate` secret. The value of `server-certificate` is set to the contents of the file `./server.cert`.\n\n#### [Long syntax](#long-syntax-4)\n\nThe long syntax provides more granularity in how the secret is created within the service's containers.\n\n*   `source`: The name of the secret as it exists on the platform.\n*   `target`: The name of the file to be mounted in `/run/secrets/` in the service's task container, or absolute path of the file if an alternate location is required. Defaults to `source` if not specified.\n*   `uid` and `gid`: The numeric UID or GID that owns the file within `/run/secrets/` in the service's task containers. Default value is USER running container.\n*   `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file to be mounted in `/run/secrets/` in the service's task containers, in octal notation. The default value is world-readable permissions (mode `0444`). The writable bit must be ignored if set. The executable bit may be set.\n\nThe following example sets the name of the `server-certificate` secret file to `server.cert` within the container, sets the mode to `0440` (group-readable), and sets the user and group to `103`. The value of `server-certificate` is set to the contents of the file `./server.cert`.\n\n### [security\\_opt](#security_opt)\n\n`security_opt` overrides the default labeling scheme for each container.\n\nFor further default labeling schemes you can override, see [Security configuration](https://docs.docker.com/reference/cli/docker/container/run/#security-opt).\n\n### [shm\\_size](#shm_size)\n\n`shm_size` configures the size of the shared memory (`/dev/shm` partition on Linux) allowed by the service container. It's specified as a [byte value](https://docs.docker.com/compose/compose-file/11-extension/#specifying-byte-values).\n\n### [stdin\\_open](#stdin_open)\n\n`stdin_open` configures a service's container to run with an allocated stdin. This is the same as running a container with the `-i` flag. For more information, see [Keep STDIN open](https://docs.docker.com/reference/cli/docker/container/run/#interactive).\n\nSupported values are `true` or `false`.\n\n### [stop\\_grace\\_period](#stop_grace_period)\n\n`stop_grace_period` specifies how long Compose must wait when attempting to stop a container if it doesn't handle SIGTERM (or whichever stop signal has been specified with [`stop_signal`](#stop_signal)), before sending SIGKILL. It's specified as a [duration](https://docs.docker.com/compose/compose-file/11-extension/#specifying-durations).\n\nDefault value is 10 seconds for the container to exit before sending SIGKILL.\n\n### [stop\\_signal](#stop_signal)\n\n`stop_signal` defines the signal that Compose uses to stop the service containers. If unset containers are stopped by Compose by sending `SIGTERM`.\n\n### [storage\\_opt](#storage_opt)\n\n`storage_opt` defines storage driver options for a service.\n\n### [sysctls](#sysctls)\n\n`sysctls` defines kernel parameters to set in the container. `sysctls` can use either an array or a map.\n\nYou can only use sysctls that are namespaced in the kernel. Docker does not support changing sysctls inside a container that also modify the host system. For an overview of supported sysctls, refer to [configure namespaced kernel parameters (sysctls) at runtime](https://docs.docker.com/reference/cli/docker/container/run/#sysctl).\n\n### [tmpfs](#tmpfs)\n\n`tmpfs` mounts a temporary file system inside the container. It can be a single value or a list.\n\n### [tty](#tty)\n\n`tty` configures a service's container to run with a TTY. This is the same as running a container with the `-t` or `--tty` flag. For more information, see [Allocate a pseudo-TTY](https://docs.docker.com/reference/cli/docker/container/run/#tty).\n\nSupported values are `true` or `false`.\n\n### [ulimits](#ulimits)\n\n`ulimits` overrides the default ulimits for a container. It's specified either as an integer for a single limit or as mapping for soft/hard limits.\n\n### [user](#user)\n\n`user` overrides the user used to run the container process. The default is set by the image (i.e. Dockerfile `USER`). If it's not set, then `root`.\n\n### [userns\\_mode](#userns_mode)\n\n`userns_mode` sets the user namespace for the service. Supported values are platform specific and may depend on platform configuration.\n\n### [uts](#uts)\n\nIntroduced in Docker Compose version [2.15.1](https://docs.docker.com/compose/release-notes/#2151)\n\n`uts` configures the UTS namespace mode set for the service container. When unspecified it is the runtime's decision to assign a UTS namespace, if supported. Available values are:\n\n*   `'host'`: Results in the container using the same UTS namespace as the host.\n\n### [volumes](#volumes)\n\nThe `volumes` attribute define mount host paths or named volumes that are accessible by service containers. You can use `volumes` to define multiple types of mounts; `volume`, `bind`, `tmpfs`, or `npipe`.\n\nIf the mount is a host path and is only used by a single service, it can be declared as part of the service definition. To reuse a volume across multiple services, a named volume must be declared in the `volumes` top-level element.\n\nThe following example shows a named volume (`db-data`) being used by the `backend` service, and a bind mount defined for a single service.\n\nFor more information about the `volumes` top-level element, see [Volumes](https://docs.docker.com/compose/compose-file/07-volumes/).\n\n#### [Short syntax](#short-syntax-5)\n\nThe short syntax uses a single string with colon-separated values to specify a volume mount (`VOLUME:CONTAINER_PATH`), or an access mode (`VOLUME:CONTAINER_PATH:ACCESS_MODE`).\n\n*   `VOLUME`: Can be either a host path on the platform hosting containers (bind mount) or a volume name.\n*   `CONTAINER_PATH`: The path in the container where the volume is mounted.\n*   `ACCESS_MODE`: A comma-separated `,` list of options:\n    *   `rw`: Read and write access. This is the default if none is specified.\n    *   `ro`: Read-only access.\n    *   `z`: SELinux option indicating that the bind mount host content is shared among multiple containers.\n    *   `Z`: SELinux option indicating that the bind mount host content is private and unshared for other containers.\n\n> **Note**\n> \n> The SELinux re-labeling bind mount option is ignored on platforms without SELinux.\n\n> **Note** Relative host paths are only supported by Compose that deploy to a local container runtime. This is because the relative path is resolved from the Compose file’s parent directory which is only applicable in the local case. When Compose deploys to a non-local platform it rejects Compose files which use relative host paths with an error. To avoid ambiguities with named volumes, relative paths should always begin with `.` or `..`.\n\n#### [Long syntax](#long-syntax-5)\n\nThe long form syntax allows the configuration of additional fields that can't be expressed in the short form.\n\n*   `type`: The mount type. Either `volume`, `bind`, `tmpfs`, `npipe`, or `cluster`\n*   `source`: The source of the mount, a path on the host for a bind mount, or the name of a volume defined in the [top-level `volumes` key](https://docs.docker.com/compose/compose-file/07-volumes/). Not applicable for a tmpfs mount.\n*   `target`: The path in the container where the volume is mounted.\n*   `read_only`: Flag to set the volume as read-only.\n*   `bind`: Used to configure additional bind options:\n    *   `propagation`: The propagation mode used for the bind.\n    *   `create_host_path`: Creates a directory at the source path on host if there is nothing present. Compose does nothing if there is something present at the path. This is automatically implied by short syntax for backward compatibility with `docker-compose` legacy.\n    *   `selinux`: The SELinux re-labeling option `z` (shared) or `Z` (private)\n*   `volume`: Configures additional volume options:\n    *   `nocopy`: Flag to disable copying of data from a container when a volume is created.\n    *   `subpath`: Path inside a volume to mount instead of the volume root.\n*   `tmpfs`: Configures additional tmpfs options:\n    *   `size`: The size for the tmpfs mount in bytes (either numeric or as bytes unit).\n    *   `mode`: The file mode for the tmpfs mount as Unix permission bits as an octal number. Introduced in Docker Compose version [2.14.0](https://docs.docker.com/compose/release-notes/#2260).\n*   `consistency`: The consistency requirements of the mount. Available values are platform specific.\n\n> **Tip**\n> \n> Working with large repositories or monorepos, or with virtual file systems that are no longer scaling with your codebase? Compose now takes advantage of [Synchronized file shares](https://docs.docker.com/desktop/synchronized-file-sharing/) and automatically creates file shares for bind mounts. Ensure you're signed in to Docker with a paid subscription and have enabled both **Access experimental features** and **Manage Synchronized file shares with Compose** in Docker Desktop's settings.\n\n### [volumes\\_from](#volumes_from)\n\n`volumes_from` mounts all of the volumes from another service or container. You can optionally specify read-only access `ro` or read-write `rw`. If no access level is specified, then read-write access is used.\n\nYou can also mount volumes from a container that is not managed by Compose by using the `container:` prefix.\n\n### [working\\_dir](#working_dir)\n\n`working_dir` overrides the container's working directory which is specified by the image, for example Dockerfile's `WORKDIR`.",
    "title": "Services top-level elements | Docker Docs\n",
    "description": "Explore all the attributes the services top-level element can have.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/04-version-and-name/",
    "markdown": "# Version and name top-level elements\n\nThe top-level `version` property is defined by the Compose Specification for backward compatibility. It is only informative and you'll receive a warning message that it is obsolete if used.\n\nCompose doesn't use `version` to select an exact schema to validate the Compose file, but prefers the most recent schema when it's implemented.\n\nCompose validates whether it can fully parse the Compose file. If some fields are unknown, typically because the Compose file was written with fields defined by a newer version of the Specification, you'll receive a warning message.\n\nThe top-level `name` property is defined by the Compose Specification as the project name to be used if you don't set one explicitly. Compose offers a way for you to override this name, and sets a default project name to be used if the top-level `name` element is not set.\n\nWhenever a project name is defined by top-level `name` or by some custom mechanism, it is exposed for [interpolation](https://docs.docker.com/compose/compose-file/12-interpolation/) and environment variable resolution as `COMPOSE_PROJECT_NAME`\n\nFor more information on other ways to name Compose projects, see [Specify a project name](https://docs.docker.com/compose/project-name/).",
    "title": "Version and name top-level elements | Docker Docs\n",
    "description": "Understand when and if to set the version and name top-level element",
    "languageCode": "en"
  },
  {
    "url": "https://docs.docker.com/compose/compose-file/13-merge/",
    "markdown": "# Merge | Docker Docs\n\nCompose lets you define a Compose application model through multiple Compose files. When doing so, Compose follows certain rules to merge Compose files.\n\nThese rules are outlined below.\n\nA YAML `mapping` gets merged by adding missing entries and merging the conflicting ones.\n\nMerging the following example YAML trees:\n\nResults in a Compose application model equivalent to the YAML tree:\n\nA YAML `sequence` is merged by appending values from the overriding Compose file to the previous one.\n\nMerging the following example YAML trees:\n\nResults in a Compose application model equivalent to the YAML tree:\n\n### [Shell commands](#shell-commands)\n\nWhen merging Compose files that use the services attributes [command](https://docs.docker.com/compose/compose-file/05-services/#command), [entrypoint](https://docs.docker.com/compose/compose-file/05-services/#entrypoint) and [healthcheck: `test`](https://docs.docker.com/compose/compose-file/05-services/#healthcheck), the value is overridden by the latest Compose file, and not appended.\n\nMerging the following example YAML trees:\n\nResults in a Compose application model equivalent to the YAML tree:\n\n### [Unique resources](#unique-resources)\n\nApplies to the [ports](https://docs.docker.com/compose/compose-file/05-services/#ports), [volumes](https://docs.docker.com/compose/compose-file/05-services/#volumes), [secrets](https://docs.docker.com/compose/compose-file/05-services/#secrets) and [configs](https://docs.docker.com/compose/compose-file/05-services/#configs) services attributes. While these types are modeled in a Compose file as a sequence, they have special uniqueness requirements:\n\n| Attribute | Unique key |\n| --- | --- |\n| volumes | target |\n| secrets | source |\n| configs | source |\n| ports | {ip, target, published, protocol} |\n\nWhen merging Compose files, Compose appends new entries that do not violate a uniqueness constraint and merge entries that share a unique key.\n\nMerging the following example YAML trees:\n\nResults in a Compose application model equivalent to the YAML tree:\n\n### [Reset value](#reset-value)\n\nIn addition to the previously described mechanism, an override Compose file can also be used to remove elements from your application model. For this purpose, the custom [YAML tag](https://yaml.org/spec/1.2.2/#24-tags) `!reset` can be set to override a value set by the overriden Compose file. A valid value for attribute must be provided, but will be ignored and target attribute will be set with type's default value or `null`.\n\nFor readability, it is recommended to explicitly set the attribute value to the null (`null`) or empty array `[]` (with `!reset null` or `!reset []`) so that it is clear that resulting attribute will be cleared.\n\nA base `compose.yaml` file:\n\nAnd an `compose.override.yaml` file:\n\nResults in:\n\n### [Replace value](#replace-value)\n\nIntroduced in Docker Compose version [2.24.4](https://docs.docker.com/compose/release-notes/#2244)\n\nWhile `!reset` can be used to remove a declaration from a Compose file using an override file, `!override` allows you to fully replace an attribute, bypassing the standard merge rules. A typical example is to fully replace a resource definition, to rely on a distinct model but using the same name.\n\nA base `compose.yaml` file:\n\nTo remove the original port, but expose a new one, the following override file is used:\n\nThis results in:\n\nIf `!override` had not been used, both `8080:80` and `8443:443` would be exposed as per the [merging rules outlined above](#sequence).\n\nFor more information on how merge can be used to create a composite Compose file, see [Working with multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/)",
    "title": "Merge | Docker Docs\n",
    "description": "Learn about merging rules",
    "languageCode": "en"
  }
]