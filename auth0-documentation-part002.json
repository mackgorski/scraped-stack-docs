[
  {
    "url": "https://auth0.com/docs/manage-users/user-migration/bulk-user-imports",
    "markdown": "# Bulk User Imports\n\nYou can bulk import user data into Auth0 using the [Create Import Users Job](https://auth0.com/docs/api/management/v2#!/Jobs/post_users_imports) endpoint. Bulk imports are useful for migrating users from an existing database or service to Auth0.\n\n## Prerequisites\n\nBefore you launch the import users job:\n\n*   Configure a database connection to import the users into and enable it for at least one application.\n    \n*   If you are importing passwords, make sure the passwords are hashed using one of the supported algorithms. Users with passwords hashed by unsupported algorithms will need to reset their password when they log in for the first time after the bulk import.\n    \n*   If you are importing MFA enrollments, make sure they are a supported type: `email`, `phone`, or `totp`.\n    \n*   [Get a Management API token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens) for job endpoint requests.\n    \n\n## Create users JSON file\n\nCreate a JSON file with the user data you want to import into Auth0. How you export user data to a JSON file will vary depending on your existing user database. The Management API endpoint expects sections of the JSON file. So instead of using `fs.readFileSync`, it requires `fs.createReadStream`. The endpoint expects a piped read stream instead of the whole JSON file.\n\nTo learn more about the JSON file schema and see examples, read [Bulk Import Database Schema and Examples](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples).\n\n## Request bulk user import\n\nTo start a bulk user import job, make a `POST` request to the [Create Import Users Job](https://auth0.com/docs/api/management/v2#!/Jobs/post_users_imports) endpoint. Be sure to replace the `MGMT_API_ACCESS_TOKEN`, `USERS_IMPORT_FILE.json`, `CONNECTION_ID`, and `EXTERNAL_ID` placeholder values with your Management API Access Token, users JSON file, database [connection ID](https://auth0.com/docs/authenticate/identity-providers/locate-the-connection-id), and external ID, respectively.\n\n*   [cURL](#57462b311a8b48cd8d02657268819268_shell)\n*   [C#](#57462b311a8b48cd8d02657268819268_csharp)\n*   [Go](#57462b311a8b48cd8d02657268819268_go)\n*   [Java](#57462b311a8b48cd8d02657268819268_java)\n*   [Node.JS](#57462b311a8b48cd8d02657268819268_node)\n*   [Obj-C](#57462b311a8b48cd8d02657268819268_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/jobs/users-imports' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --form users=@USERS_IMPORT_FILE.json \\\n  --form connection_id=CONNECTION_ID \\\n  --form external_id=EXTERNAL_ID\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/users-imports\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\");\nrequest.AddParameter(\"multipart/form-data; boundary=---011000010111000001101001\", \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/users-imports\"\n\n\tpayload := strings.NewReader(\"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/jobs/users-imports\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\")\n  .body(\"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/jobs/users-imports',\n  headers: {\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'content-type': 'multipart/form-data; boundary=---011000010111000001101001'\n  },\n  data: '-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"users\"; filename=\"USERS_IMPORT_FILE.json\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"connection_id\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"external_id\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"multipart/form-data; boundary=---011000010111000001101001\" };\nNSArray *parameters = @[ @{ @\"name\": @\"users\", @\"fileName\": @\"USERS_IMPORT_FILE.json\", @\"contentType\": @\"text/json\" },\n                         @{ @\"name\": @\"connection_id\", @\"value\": @\"CONNECTION_ID\" },\n                         @{ @\"name\": @\"external_id\", @\"value\": @\"EXTERNAL_ID\" } ];\nNSString *boundary = @\"---011000010111000001101001\";\n\nNSError *error;\nNSMutableString *body = [NSMutableString string];\nfor (NSDictionary *param in parameters) {\n    [body appendFormat:@\"--%@\\r\\n\", boundary];\n    if (param[@\"fileName\"]) {\n        [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n        [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n        [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n        if (error) {\n            NSLog(@\"%@\", error);\n        }\n    } else {\n        [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n        [body appendFormat:@\"%@\", param[@\"value\"]];\n    }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/users-imports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/users-imports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: multipart/form-data; boundary=---011000010111000001101001\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"multipart/form-data; boundary=---011000010111000001101001\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/jobs/users-imports\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/users-imports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'multipart/form-data; boundary=---011000010111000001101001'\nrequest.body = \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"users\\\"; filename=\\\"USERS_IMPORT_FILE.json\\\"\\r\\nContent-Type: text/json\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"connection_id\\\"\\r\\n\\r\\nCONNECTION_ID\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"external_id\\\"\\r\\n\\r\\nEXTERNAL_ID\\r\\n-----011000010111000001101001--\\r\\n\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"multipart/form-data; boundary=---011000010111000001101001\"\n]\nlet parameters = [\n  [\n    \"name\": \"users\",\n    \"fileName\": \"USERS_IMPORT_FILE.json\",\n    \"contentType\": \"text/json\"\n  ],\n  [\n    \"name\": \"connection_id\",\n    \"value\": \"CONNECTION_ID\"\n  ],\n  [\n    \"name\": \"external_id\",\n    \"value\": \"EXTERNAL_ID\"\n  ]\n]\n\nlet boundary = \"---011000010111000001101001\"\n\nvar body = \"\"\nvar error: NSError? = nil\nfor param in parameters {\n  let paramName = param[\"name\"]!\n  body += \"--\\(boundary)\\r\\n\"\n  body += \"Content-Disposition:form-data; name=\\\"\\(paramName)\\\"\"\n  if let filename = param[\"fileName\"] {\n    let contentType = param[\"content-type\"]!\n    let fileContent = String(contentsOfFile: filename, encoding: String.Encoding.utf8)\n    if (error != nil) {\n      print(error)\n    }\n    body += \"; filename=\\\"\\(filename)\\\"\\r\\n\"\n    body += \"Content-Type: \\(contentType)\\r\\n\\r\\n\"\n    body += fileContent\n  } else if let paramValue = param[\"value\"] {\n    body += \"\\r\\n\\r\\n\\(paramValue)\"\n  }\n}\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/users-imports\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| Parameter | Description |\n| --- | --- |\n| `users` | File in JSON format that contains the users to import. |\n| `connection_id` | ID of the connection to which users will be inserted. You can retrieve the ID using the [GET /api/v2/connections](https://auth0.com/docs/api/management/v2#!/Connections/get_connections) endpoint. |\n| `upsert` | Boolean value; `false` by default. When set to `false`, pre-existing users that match on email address, user ID, or username will fail. When set to true, pre-existing users that match on email address will be updated, but only with upsertable attributes. For a list of user profile fields that can be upserted during import, see [User Profile Structure: User profile attributes](https://auth0.com/docs/users/user-profile-structure#user-profile-attributes). Note: Providing a duplicated user entry in the import file will cause an error. In this case, Auth0 will not do an insert followed by an update. |\n| `external_id` | Optional user-defined string that can be used to correlate multiple jobs. Returned as part of the job status response. |\n| `send_completion_email` | Boolean value; `true` by default. When set to `true`, sends a completion email to all tenant owners when the import job is finished. If you do _not_ want emails sent, you must explicitly set this parameter to `false`. |\n\nIf the request is successful, you'll receive a response similar to the following:\n\n```\n{\n  \"status\": \"pending\",\n  \"type\": \"users_import\",\n  \"created_at\": \"\",\n  \"id\": \"job_abc123\",\n  \"connection_id\": \"CONNECTION_ID\",\n  \"upsert\": false,\n  \"external_id\": \"EXTERNAL_ID\",\n  \"send_completion_email\": true\n}\n```\n\nThe returned entity represents the import job.\n\nWhen the user import job finishes and if `send_completion_email` was set to `true`, the tenant administrator(s) will get an email notifying them that job either failed or succeeded. An email for a job that failed might notify the administrator(s) that it failed to parse the users JSON file when importing users.\n\n### Concurrent import jobs\n\nThe [Create Import Users Job](https://auth0.com/docs/api/management/v2#!/Jobs/post_users_imports) endpoint has a limit of two concurrent import jobs. Requesting additional jobs while there are two pending returns a `429 Too Many Requests` response:\n\n```\n{\n  \"statusCode\": 429,\n  \"error\": \"Too Many Requests\",\n  \"message\": \"There are 2 active import users jobs, please wait until some of them are finished and try again\n}\n```\n\n## Check job status\n\nTo check a job's status, make a `GET` request to the [Get a Job](https://auth0.com/docs/api/management/v2#!/Jobs/get_jobs_by_id) endpoint. Be sure to replace the `MGMT_API_ACCESS_TOKEN` and `JOB_ID` placeholder values with your Management API Access Token and user import job ID.\n\n*   [cURL](#869b9726e73c47a09733ccf24abc1f1f_shell)\n*   [C#](#869b9726e73c47a09733ccf24abc1f1f_csharp)\n*   [Go](#869b9726e73c47a09733ccf24abc1f1f_go)\n*   [Java](#869b9726e73c47a09733ccf24abc1f1f_java)\n*   [Node.JS](#869b9726e73c47a09733ccf24abc1f1f_node)\n*   [Obj-C](#869b9726e73c47a09733ccf24abc1f1f_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/jobs/JOB_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/JOB_ID\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/JOB_ID\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/jobs/JOB_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/jobs/JOB_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/JOB_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/JOB_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/jobs/JOB_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/JOB_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/JOB_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nDepending on the status of the user import job, you'll receive a response similar to one of the following:\n\n**Pending**\n\n```\n{\n  \"status\": \"pending\",\n  \"type\": \"users_import\",\n  \"created_at\": \"\",\n  \"id\": \"job_abc123\",\n  \"connection_id\": \"CONNECTION_ID\",\n  \"external_id\": \"EXTERNAL_ID\"\n}\n```\n\n**Completed**\n\nIf a job is completed, the job status response will include totals of successful, failed, inserted, and updated records.\n\n```\n{\n  \"status\": \"completed\",\n  \"type\": \"users_import\",\n  \"created_at\": \"\",\n  \"id\": \"job_abc123\",\n  \"connection_id\": \"CONNECTION_ID\",\n  \"external_id\": \"EXTERNAL_ID\",\n  \"summary\": {\n    \"failed\": 0,\n    \"updated\": 0,\n    \"inserted\": 1,\n    \"total\": 1\n  }\n}\n```\n\n**Failed**\n\nIf there is an error in the job, it will return as failed. However, note that invalid user information, such as an invalid email, will not make the entire job fail.\n\n```\n{\n  \"status\": \"failed\",\n  \"type\": \"users_import\",\n  \"created_at\": \"\",\n  \"id\": \"job_abc123\",\n  \"connection_id\": \"CONNECTION_ID\",\n  \"external_id\": \"EXTERNAL_ID\",\n}\n```\n\nTo learn details for failed entries see **Retrieve failed entries** below.\n\n## Job timeouts\n\nAll user import jobs timeout after **two (2) hours**. If your job does not complete within this time frame, it is marked as failed.\n\nFurthermore, all of your job-related data is automatically deleted after 24 hours and cannot be accessed afterward. As such, **we strongly recommend storing job results using the storage mechanism of your choice**.\n\n## Retrieve failed entries\n\nIf there were errors in the user import job, you can get the error details by making a `GET` request to the [Get Job Error Details](https://auth0.com/docs/api/management/v2#!/Jobs/get_errors) endpoint. Be sure to replace the `MGMT_API_ACCESS_TOKEN` and `JOB_ID` placeholder values with your Management API Access Token and user import job ID.\n\n*   [cURL](#3bb17233d0734b56b8dd8809783684aa_shell)\n*   [C#](#3bb17233d0734b56b8dd8809783684aa_csharp)\n*   [Go](#3bb17233d0734b56b8dd8809783684aa_go)\n*   [Java](#3bb17233d0734b56b8dd8809783684aa_java)\n*   [Node.JS](#3bb17233d0734b56b8dd8809783684aa_node)\n*   [Obj-C](#3bb17233d0734b56b8dd8809783684aa_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/jobs/JOB_ID/errors' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/jobs/JOB_ID/errors',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/jobs/JOB_ID/errors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/JOB_ID/errors\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nIf the request is successful, you'll receive a response similar to the following. Sensitive fields such as `hash.value` will be redacted in the response.\n\n```\n[\n    {\n        \"user\": {\n            \"email\": \"test@test.io\",\n            \"user_id\": \"7af4c65cb0ac6e162f081822422a9dde\",\n            \"custom_password_hash\": {\n                \"algorithm\": \"ldap\",\n                \"hash\": {\n                    \"value\": \"*****\"\n                }\n            }\n        },\n        \"errors\": [\n            {\n                \"code\": \"...\",\n                \"message\": \"...\",\n                \"path\": \"...\"\n            }\n        ]\n    }\n]\n```\n\nEach error object will include an error code and a message explaining the error in more detail. The possible error codes are:\n\n*   ANY\\_OF\\_MISSING\n    \n*   ARRAY\\_LENGTH\\_LONG\n    \n*   ARRAY\\_LENGTH\\_SHORT\n    \n*   CONFLICT\n    \n*   CONFLICT\\_EMAIL\n    \n*   CONFLICT\\_USERNAME\n    \n*   CONNECTION\\_NOT\\_FOUND\n    \n*   DUPLICATED\\_USER\n    \n*   ENUM\\_MISMATCH\n    \n*   FORMAT\n    \n*   INVALID\\_TYPE\n    \n*   MAX\\_LENGTH\n    \n*   MAXIMUM\n    \n*   MFA\\_FACTORS\\_FAILED\n    \n*   MIN\\_LENGTH\n    \n*   MINIMUM\n    \n*   NOT\\_PASSED\n    \n*   OBJECT\\_REQUIRED\n    \n*   PATTERN\n    \n\n## Learn more\n\n*   [Configure Automatic Migration from Your Database](https://auth0.com/docs/manage-users/user-migration/configure-automatic-migration-from-your-database)\n*   [User Import / Export Extension](https://auth0.com/docs/manage-users/user-migration/user-import-export-extension)\n*   [Bulk User Import Database Schema and Examples](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples)\n*   [User Migration Scenarios](https://auth0.com/docs/manage-users/user-migration/user-migration-scenarios)",
    "title": "Bulk User Imports",
    "description": "Learn how to perform bulk user imports with the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples",
    "markdown": "# Bulk User Import Database Schema and Examples\n\n```\n{\n  \"type\": \"object\",\n\t\"properties\": {\n\t\t\"email\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's email address.\",\n\t\t\t\"format\": \"email\"\n\t\t},\n\t\t\"email_verified\": {\n\t\t\t\"type\": \"boolean\",\n\t\t\t\"default\": false,\n\t\t\t\"description\": \"Indicates whether the user has verified their email address.\"\n\t\t},\n\t\t\"user_id\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's unique identifier. This will be prepended by the connection strategy.\"\n\t\t},\n\t\t\"username\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's username.\"\n\t\t},\n\t\t\"given_name\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's given name.\"\n\t\t},\n\t\t\"family_name\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's family name.\"\n\t\t},\n\t\t\"name\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's full name.\"\n\t\t},\n\t\t\"nickname\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user's nickname.\"\n\t\t},\n\t\t\"picture\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"URL pointing to the user's profile picture.\"\n\t\t},\n\t\t\"blocked\": {\n\t\t\t\"type\": \"boolean\",\n\t\t\t\"description\": \"Indicates whether the user has been blocked.\"\n\t\t},\n\t\t\"password_hash\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Hashed password for the user. Passwords should be hashed using bcrypt $2a$ or $2b$ and have 10 saltRounds.\"\n\t\t},\n\t\t\"custom_password_hash\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"A more generic way to provide the users password hash. This can be used in lieu of the password_hash field when the users password hash was created with an alternate algorithm. Note that this field and password_hash are mutually exclusive.\",\n\t\t\t\"properties\": {\n\t\t\t\t\"algorithm\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\"argon2\",\n\t\t\t\t\t\t\"bcrypt\",\n\t\t\t\t\t\t\"hmac\",\n\t\t\t\t\t\t\"ldap\",\n\t\t\t\t\t\t\"md4\",\n\t\t\t\t\t\t\"md5\",\n\t\t\t\t\t\t\"sha1\",\n\t\t\t\t\t\t\"sha256\",\n\t\t\t\t\t\t\"sha512\",\n\t\t\t\t\t\t\"pbkdf2\",\n\t\t\t\t\t\t\"scrypt\"\n\t\t\t\t\t],\n\t\t\t\t\t\"description\": \"The algorithm that was used to hash the password.\"\n\t\t\t\t},\n\t\t\t\t\"hash\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The password hash.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"encoding\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"base64\",\n\t\t\t\t\t\t\t\t\"hex\",\n\t\t\t\t\t\t\t\t\"utf8\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"description\": \"The encoding of the provided hash. Note that both upper and lower case hex variants are supported, as well as url-encoded base64.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"digest\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The algorithm that was used to generate the HMAC hash\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"md4\",\n\t\t\t\t\t\t\t\t\"md5\",\n\t\t\t\t\t\t\t\t\"ripemd160\",\n\t\t\t\t\t\t\t\t\"sha1\",\n\t\t\t\t\t\t\t\t\"sha224\",\n\t\t\t\t\t\t\t\t\"sha256\",\n\t\t\t\t\t\t\t\t\"sha384\",\n\t\t\t\t\t\t\t\t\"sha512\",\n\t\t\t\t\t\t\t\t\"whirlpool\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"key\": {\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"description\": \"The key that was used to generate the HMAC hash\",\n\t\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"description\": \"The key value\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"encoding\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\t\"base64\",\n\t\t\t\t\t\t\t\t\t\t\"hex\",\n\t\t\t\t\t\t\t\t\t\t\"utf8\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"default\": \"utf8\",\n\t\t\t\t\t\t\t\t\t\"description\": \"The key encoding\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"salt\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The salt value used to generate the hash.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"encoding\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"base64\",\n\t\t\t\t\t\t\t\t\"hex\",\n\t\t\t\t\t\t\t\t\"utf8\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"default\": \"utf8\",\n\t\t\t\t\t\t\t\"description\": \"The encoding of the provided salt. Note that both upper and lower case hex variants are supported, as well as url-encoded base64.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"position\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"prefix\",\n\t\t\t\t\t\t\t\t\"suffix\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"default\": \"prefix\",\n\t\t\t\t\t\t\t\"description\": \"The position of the salt when the hash was calculated. For example; MD5('salt' + 'password') = '67A1E09BB1F83F5007DC119C14D663AA' would have \\\"position\\\":\\\"prefix\\\".\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\"value\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"password\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"encoding\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"ascii\",\n\t\t\t\t\t\t\t\t\"utf8\",\n\t\t\t\t\t\t\t\t\"utf16le\",\n\t\t\t\t\t\t\t\t\"ucs2\",\n\t\t\t\t\t\t\t\t\"latin1\",\n\t\t\t\t\t\t\t\t\"binary\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"default\": \"utf8\",\n\t\t\t\t\t\t\t\"description\": \"The encoding of the password used to generate the hash. On login, the user-provided password will be transcoded from utf8 before being checked against the provided hash. For example; if your hash was generated from a ucs2 encoded string, then you would supply \\\"encoding\\\":\\\"ucs2\\\".\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"keylen\" : {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"description\": \"Desired key length in bytes for the scrypt hash. Must be an integer greater than zero. Required when algorithm is set to scrypt.\"\n\t\t\t\t},\n\t\t\t\t\"cost\" : {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"default\": 16384,\n\t\t\t\t\t\"description\": \"CPU/memory cost parameter used for the scrypt hash. Must be a power of two greater than one. Only used when algorithm is set to scrypt.\"\n\t\t\t\t},\n\t\t\t\t\"blockSize\" : {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"default\": 8,\n\t\t\t\t\t\"description\": \"Block size parameter used for the scrypt hash. Must be a positive integer. Only used when algorithm is set to scrypt.\"\n\t\t\t\t},\n\t\t\t\t\"parallelization\" : {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"default\": 1,\n\t\t\t\t\t\"description\": \"Parallelization parameter used for the scrypt hash. Must be a positive integer. Only used when algorithm is set to scrypt.\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"required\": [\n\t\t\t\t\"algorithm\",\n\t\t\t\t\"hash\"\n\t\t\t],\n\t\t\t\"additionalProperties\": false\n\t\t},\n\t\t\"app_metadata\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Data related to the user that does affect the application's core functionality.\"\n\t\t},\n\t\t\"user_metadata\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Data related to the user that does not affect the application's core functionality.\"\n\t\t},\n\t\t\"mfa_factors\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"totp\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"secret\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"pattern\": \"^[A-Z2-7]+$\",\n\t\t\t\t\t\t\t\t\"description\": \"The OTP secret is used with authenticator apps (Google Authenticator, Microsoft Authenticator, Authy, 1Password, LastPass). It must be supplied in un-padded Base32 encoding, such as: JBTWY3DPEHPK3PNP\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"secret\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"phone\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"pattern\": \"^\\\\+[0-9]{1,15}$\",\n\t\t\t\t\t\t\t\t\"description\": \"The phone number for SMS MFA. The phone number should include a country code and begin with +, such as: +12125550001\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"email\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"format\": \"email\",\n\t\t\t\t\t\t\t\t\"description\": \"The email address for MFA\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"maxProperties\": 1,\n\t\t\t\t\"additionalProperties\": false\n\t\t\t},\n\t\t\t\"minItems\": 1,\n\t\t\t\"maxItems\": 10\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"email\"\n\t],\n\t\"additionalProperties\": false\n}\n```",
    "title": "Bulk User Import Database Schema and Examples",
    "description": "Learn how to perform bulk user imports with the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-migration/user-import-export-extension",
    "markdown": "# User Import / Export Extension\n\nThe **User Import / Export Extension** allows you to:\n\n*   Bulk import your existing database users into Auth0\n    \n*   Search for and export some (or all) of your Auth0 database users\n    \n\nFor a list of user profile fields that can be imported and exported, see [User Profile Attributes](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure).\n\nYou must be a Dashboard Admin to use this extension.\n\n## Install the extension\n\nTo install this extension, go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **User Import / Export**.\n\nThe extension does not require any additional configuration before it can be installed, so select **Install** in the informational pop-up window to proceed.\n\n![Dashboard Extensions Users Import/Export Install Extension](https://images.ctfassets.net/cdy7uua7fh8z/6D9Z4RigtgFBZcd861KVlK/6e42ed005ee62b13b44b0fc91d302f6f/Screen_Shot_2021-05-18_at_9.07.39_PM.png)\n\n## Use the extension\n\nAfter you've installed your extension, you'll see it listed in your list of installed extensions. Click on **Import / Export Extension** to launch.\n\n![Dashboard Extensions Installed Extensions tab](https://images.ctfassets.net/cdy7uua7fh8z/7unxnXFjDkSQUvnyvrOyDn/14c456335df4f9334c4fa0020dca8860/Screen_Shot_2021-05-18_at_9.09.04_PM.png)\n\nYou'll be asked to grant permission for the extension to access your Auth0 account for the listed activities the first time you launch the extension.\"\n\n![Dashboard Extensions Authorize the Users Import/Export Extension](https://images.ctfassets.net/cdy7uua7fh8z/5CCKmxUv1HN5nDj9jL8qel/d7f02ccf3f4be166b00bbf217e14144f/Screen_Shot_2021-05-18_at_9.11.01_PM.png)\n\nClick the **check mark** to proceed.\n\nThere are two ways of using this extension:\n\n*   Bulk import your existing database users into Auth0\n    \n*   Search for and export some (or all) of your Auth0 database users\n    \n\nBoth use cases are explained in further detail below.\n\n### Import users\n\nBy default, any time you open the extension, you'll see the **User Import** screen (if you're on the export screen, you can return to this screen by click **Import** in the left-hand navigation bar).\n\n![Dashboard Extensions Users Import Export Import users from file](https://images.ctfassets.net/cdy7uua7fh8z/5JC6p1ZDDCYm9cCEtq0D7N/511c1241b1835772e7121eb5845f179f/import.png)\n\nTo import your users, drag and drop a valid JSON file ([schema and examples here](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples)) onto the area that says **Drop your file here, or click to select**. Alternatively, you can click on this area to browse your files and select the appropriate JSON file. The JSON file should contain the list of users that you are planning to import.\n\nSelect the database connection for which your users will be imported. Please make sure that the connection you choose has been enabled for at least one application.\n\nClick **Start Importing Users** to begin the import process.\n\nWhen done, you'll see the following **Completed** message.\n\n![Dashboard Extensions Users Import Export Import Complete](https://images.ctfassets.net/cdy7uua7fh8z/7hyE3DWBJuFuAulAAnZlfN/23303644d4c706f4c0937bd363bf6699/import-complete.png)\n\nOnce you've imported your users, you can manage them individually using [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users).\n\n### Export users\n\nTo export your existing Auth0 users associated with database connections, select **Export**.\n\n![Dashboard Extensions Users Import Export Export Users page](https://images.ctfassets.net/cdy7uua7fh8z/5wUhbGMjVQKIE9vx2SBIA3/a952aee6cc6027234631334c7174c4a8/export-users.png)\n\nUnder **User Fields**, you can decide which user attributes or expressions should be included in the export. The user attribute can be a static value like `user.user_metadata.name`, or it can be a JavaScript expression like `user.user_metadata.name || user.name`. Expressions will be evaluated during the export runtime. The **column name** value is how the value will be represented in the export.\n\nYou can click the **Add Default Fields** button to automatically select the default fields and populate their column names (this is also a good way for you to visualize how parameters/expressions will appear).\n\nYou can remove extraneous attributes/expressions by clicking on its associated **trash can** icon.\n\nUnder **Settings**, you can:\n\n*   Configure how your exported users are listed by providing a **User Attribute** by which users should be sorted (as well as whether the users should be sorted in ascending or descending order)\n    \n*   Choose your **Export Format**; you can choose between JSON and CSV files\n    \n    ![Dashboard Extensions Users Import Export Settings Export Format](https://images.ctfassets.net/cdy7uua7fh8z/1HVpo1IevSRJbFvwrEKkzf/761fa914f6c33cdee147e07b2c43f7c7/settings.png)\n\nWhen you're ready, click **Export X Users** (where `X` is the number of users you're exporting).\n\nYou can download the file containing your users when the export is complete.\n\n![Dashboard Extensions Users Import Export Progress Indicator Export Complete](https://images.ctfassets.net/cdy7uua7fh8z/2vtH1VMbGBZq1gxxJkM8K7/5086119751b1e38d686c9266fcf6f71e/export-complete.png)\n\n## Update Users\n\nThe Auth0 Management API allows bulk user profile updates to `user_metadata` and `app_metadata` with the User Import/Export Extension.\n\n### Export users\n\nUsing the [export process above](https://auth0.com/docs/customize/extensions/user-import-export-extension#export-users), create a complete export file including all your user attributes.\n\nChoose the JSON format for your export.\n\nDownload the file containing your users when the export is complete.\n\n### Update your configuration\n\nMake a **copy** of the JSON file you downloaded in the previous step.\n\nOpen the copy of the JSON file in a text editor. Your user schema should be similar to the one below:\n\n```\n[\n   {\n      \"Id\":\"auth0|626737a9813c000069daf462\",\n      \"Nickname\":\"testuser1\",\n      \"Name\":\"testuser1@auth0.com\",\n      \"email\":\"testuser1@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-04-26T00:07:05.098Z\",\n      \"Updated At\":\"2022-07-06T14:54:19.214Z\"\n   },\n   {\n      \"Id\":\"auth0|62d1a1853bdcf11ff5dca672\",\n      \"Nickname\":\"testuser2\",\n      \"Name\":\"testuser2@auth0.com\",\n      \"email\":\"testuser2@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-07-15T17:19:01.531Z\",\n      \"Updated At\":\"2022-07-15T17:19:01.532Z\"\n   },\n   {\n      \"Id\":\"auth0|62d1a1a524f32a4185c9ce23\",\n      \"Nickname\":\"testuser3\",\n      \"Name\":\"testuser3@auth0.com\",\n      \"email\":\"testuser3@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-07-15T17:19:33.484Z\",\n      \"Updated At\":\"2022-07-15T17:19:33.484Z\"\n   }\n]\n```\n\nDo not change the user email address because it is the lookup key for users in the database.\n\nTo add an attribute, create a new field in each user schema and update with a value. In the example below, the \"Family Name\" attribute has a value of \"Smith\" with a comma after the new attribute value.\n\nYou can also add the `email_verified` attribute to multiple users and set the value to `true`.\n\n```\n{\n   \"Id\":\"auth0|626737a9813c000069daf462\",\n   \"Nickname\":\"testuser1\",\n   \"Family Name\":\"Smith\",\n   \"Name\":\"testuser1@auth0.com\",\n   \"email\":\"testuser1@auth0.com\",\n   \"email_verified\":true,\n   \"Connection\":\"Username-Password-Authentication\",\n   \"Created At\":\"2022-04-26T00:07:05.098Z\",\n   \"Updated At\":\"2022-07-06T14:54:19.214Z\"\n}\n```\n\nSave the changes to your user file.\n\n### Import updated user profile data\n\nThe `users-import` endpoint allows you to upload your updated user profile file and update several users in one job. Navigate to the [Create import users job endpoint](https://auth0.com/docs/api/management/v2/#!/Jobs/post_users_imports).\n\nAdd your user file to the users parameter and add the database connection ID of the database you want to update.\n\nThe upsert value should be `true` to update the already existing user information. To add your updates, select **Try** or use Postman to import the users.\n\nUse the `job_id` to verify the status with the `jobs` [endpoint](https://auth0.com/docs/api/management/v2/#!/Jobs/get_jobs_by_id).",
    "title": "User Import / Export Extension",
    "description": "Learn about the User Import/Export extension, which allows you to import and export users from or to any database you have configured in your account.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-migration/bulk-user-exports",
    "markdown": "# Bulk User Exports\n\nYou can use the `POST /api/v2/jobs/users-exports` endpoint to create a job that exports all users associated with a [connection](https://auth0.com/docs/identityproviders), or all users in the tenant.\n\nFor a list of user profile fields that can be exported, read [User Profile Structure](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure).\n\nWhen you create your job, you'll need to provide:\n\n*   [ID for the connection](https://auth0.com/docs/authenticate/identity-providers/locate-the-connection-id) from which you want to export users (optional)\n    \n*   Format of the export file (CSV or JSON-compatible)\n    \n*   Maximum number of user records to be exported (optional, will export all records if omitted)\n    \n*   User-related fields (such as user ID or name) that you want included in the export\n    \n\nYou'll also need a valid [Management API Access Token](https://auth0.com/docs/api/management/v2/tokens).\n\n## Create a request body\n\nOptionally, find the `connection_id` and your Auth0 tenant domain name in the Auth0 Dashboard. Create a new text file with the request body below:\n\n```\n{\n   \"connection_id\":\"connection_id\",\n   \"format\":\"csv\",\n   \"limit\":20,\n   \"fields\":[\n      {\n         \"name\":\"user_id\"\n      },\n      {\n         \"name\":\"email\"\n      },\n      {\n         \"name\":\"user_metadata.country\"\n      }\n   ]\n}\n```\n\nUpdate the `connection_id` with your database connection ID, or remove it to export all users in the tenant.\n\n## Request example\n\nRequired Scopes: `read:users`\n\n*   [cURL](#9b7d99d7001449b5978d90cf7a63bed9_shell)\n*   [C#](#9b7d99d7001449b5978d90cf7a63bed9_csharp)\n*   [Go](#9b7d99d7001449b5978d90cf7a63bed9_go)\n*   [Java](#9b7d99d7001449b5978d90cf7a63bed9_java)\n*   [Node.JS](#9b7d99d7001449b5978d90cf7a63bed9_node)\n*   [Obj-C](#9b7d99d7001449b5978d90cf7a63bed9_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/jobs/users-exports' \\\n  --header 'authorization: Bearer {yourMgmtAPIAccessToken}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"connection_id\": \"{yourConnectionId}\", \"format\": \"csv\", \"limit\": 5, \"fields\": [{\"name\": \"email\"}, { \"name\": \"identities[0].connection\", \"export_as\": \"provider\" }]}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/users-exports\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/users-exports\"\n\n\tpayload := strings.NewReader(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n  .header(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/jobs/users-exports',\n  headers: {\n    authorization: 'Bearer {yourMgmtAPIAccessToken}',\n    'content-type': 'application/json'\n  },\n  data: {\n    connection_id: '{yourConnectionId}',\n    format: 'csv',\n    limit: 5,\n    fields: [{name: 'email'}, {name: 'identities[0].connection', export_as: 'provider'}]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtAPIAccessToken}\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"connection_id\": @\"{yourConnectionId}\",\n                              @\"format\": @\"csv\",\n                              @\"limit\": @5,\n                              @\"fields\": @[ @{ @\"name\": @\"email\" }, @{ @\"name\": @\"identities[0].connection\", @\"export_as\": @\"provider\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/users-exports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/users-exports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtAPIAccessToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\"\n\nheaders = {\n    'authorization': \"Bearer {yourMgmtAPIAccessToken}\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/jobs/users-exports\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtAPIAccessToken}'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, { \\\"name\\\": \\\"identities[0].connection\\\", \\\"export_as\\\": \\\"provider\\\" }]}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {yourMgmtAPIAccessToken}\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"connection_id\": \"{yourConnectionId}\",\n  \"format\": \"csv\",\n  \"limit\": 5,\n  \"fields\": [\n    [\"name\": \"email\"],\n    [\n      \"name\": \"identities[0].connection\",\n      \"export_as\": \"provider\"\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/users-exports\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe response should look something like this:\n\n```\n{\n  \"type\": \"users_export\",\n  \"status\": \"pending\",\n  \"connection_id\": \"con_0000000000000001\",\n  \"format\": \"csv\",\n  \"limit\": 5,\n  \"fields\": [\n    {\n      \"name\": \"user_id\"\n    },\n    {\n      \"name\": \"name\"\n    },\n    {\n      \"name\": \"email\"\n    },\n    {\n      \"name\": \"identities[0].connection\",\n      \"export_as\": \"provider\"\n    }\n  ],\n  \"connection\": \"Username-Password-Authentication\",\n  \"created_at\": \"2017-11-02T23:34:03.803Z\",\n  \"id\": \"job_coRQCC3MHztpuTlo\"\n}\n```\n\n## Include user metadata in exported CSV\n\nIf you export user data in CSV format and want to include metadata information, specify each metadata field that you want to export. You can export up to 30 fields.\n\nFor example, for metadata structured like this:\n\n```\n{\n  \"consent\": {\n      \"given\": true,\n      \"date\": \"01/23/2019\",\n      \"text_details\": \"{yourURL}\"\n  }\n}\n```\n\nThe export request (for all three fields) would look like this:\n\n*   [cURL](#0262b9c83e5a4a9e93a46746aa046be1_shell)\n*   [C#](#0262b9c83e5a4a9e93a46746aa046be1_csharp)\n*   [Go](#0262b9c83e5a4a9e93a46746aa046be1_go)\n*   [Java](#0262b9c83e5a4a9e93a46746aa046be1_java)\n*   [Node.JS](#0262b9c83e5a4a9e93a46746aa046be1_node)\n*   [Obj-C](#0262b9c83e5a4a9e93a46746aa046be1_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/jobs/users-exports' \\\n  --header 'authorization: Bearer {yourMgmtAPIAccessToken}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"connection_id\": \"{yourConnectionId}\", \"format\": \"csv\", \"limit\": 5, \"fields\": [{\"name\": \"email\"}, {\"name\": \"user_metadata.consent.given\"}, {\"name\": \"user_metadata.consent.date\"}, {\"name\": \"user_metadata.consent.text_details\"}]}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/users-exports\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/users-exports\"\n\n\tpayload := strings.NewReader(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n  .header(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/jobs/users-exports',\n  headers: {\n    authorization: 'Bearer {yourMgmtAPIAccessToken}',\n    'content-type': 'application/json'\n  },\n  data: {\n    connection_id: '{yourConnectionId}',\n    format: 'csv',\n    limit: 5,\n    fields: [\n      {name: 'email'},\n      {name: 'user_metadata.consent.given'},\n      {name: 'user_metadata.consent.date'},\n      {name: 'user_metadata.consent.text_details'}\n    ]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtAPIAccessToken}\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"connection_id\": @\"{yourConnectionId}\",\n                              @\"format\": @\"csv\",\n                              @\"limit\": @5,\n                              @\"fields\": @[ @{ @\"name\": @\"email\" }, @{ @\"name\": @\"user_metadata.consent.given\" }, @{ @\"name\": @\"user_metadata.consent.date\" }, @{ @\"name\": @\"user_metadata.consent.text_details\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/users-exports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/users-exports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtAPIAccessToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\"\n\nheaders = {\n    'authorization': \"Bearer {yourMgmtAPIAccessToken}\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/jobs/users-exports\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtAPIAccessToken}'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"csv\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent.given\\\"}, {\\\"name\\\": \\\"user_metadata.consent.date\\\"}, {\\\"name\\\": \\\"user_metadata.consent.text_details\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {yourMgmtAPIAccessToken}\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"connection_id\": \"{yourConnectionId}\",\n  \"format\": \"csv\",\n  \"limit\": 5,\n  \"fields\": [[\"name\": \"email\"], [\"name\": \"user_metadata.consent.given\"], [\"name\": \"user_metadata.consent.date\"], [\"name\": \"user_metadata.consent.text_details\"]]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/users-exports\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n### JSON-compatible format\n\nIf you export the data in JSON-compatible format, you only need to provide the root property; you do not need to name each individual inner property since they will be included automatically.\n\nAuth0's export files use the [ndjson](https://github.com/ndjson/ndjson-spec) format due to the large size of the export files, while the import functionality expects a JSON file.\n\nBefore you can import users using an export generated by Auth0, you'll need to convert the file from **ndjson** to **json** using the library of your choice (such as [jq](https://stedolan.github.io/jq/)).\n\nIn this case, for the same example we used before, the request would look like this:\n\n*   [cURL](#dc0cdbe7f1b6425ba304a3b4ff7506e7_shell)\n*   [C#](#dc0cdbe7f1b6425ba304a3b4ff7506e7_csharp)\n*   [Go](#dc0cdbe7f1b6425ba304a3b4ff7506e7_go)\n*   [Java](#dc0cdbe7f1b6425ba304a3b4ff7506e7_java)\n*   [Node.JS](#dc0cdbe7f1b6425ba304a3b4ff7506e7_node)\n*   [Obj-C](#dc0cdbe7f1b6425ba304a3b4ff7506e7_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/jobs/users-exports' \\\n  --header 'authorization: Bearer {yourMgmtAPIAccessToken}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"connection_id\": \"{yourConnectionId}\", \"format\": \"json\", \"limit\": 5, \"fields\": [{\"name\": \"email\"}, {\"name\": \"user_metadata.consent\"}]}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/users-exports\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/users-exports\"\n\n\tpayload := strings.NewReader(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n  .header(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/jobs/users-exports',\n  headers: {\n    authorization: 'Bearer {yourMgmtAPIAccessToken}',\n    'content-type': 'application/json'\n  },\n  data: {\n    connection_id: '{yourConnectionId}',\n    format: 'json',\n    limit: 5,\n    fields: [{name: 'email'}, {name: 'user_metadata.consent'}]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtAPIAccessToken}\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"connection_id\": @\"{yourConnectionId}\",\n                              @\"format\": @\"json\",\n                              @\"limit\": @5,\n                              @\"fields\": @[ @{ @\"name\": @\"email\" }, @{ @\"name\": @\"user_metadata.consent\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/users-exports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/users-exports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtAPIAccessToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\"\n\nheaders = {\n    'authorization': \"Bearer {yourMgmtAPIAccessToken}\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/jobs/users-exports\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/users-exports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtAPIAccessToken}'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"connection_id\\\": \\\"{yourConnectionId}\\\", \\\"format\\\": \\\"json\\\", \\\"limit\\\": 5, \\\"fields\\\": [{\\\"name\\\": \\\"email\\\"}, {\\\"name\\\": \\\"user_metadata.consent\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {yourMgmtAPIAccessToken}\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"connection_id\": \"{yourConnectionId}\",\n  \"format\": \"json\",\n  \"limit\": 5,\n  \"fields\": [[\"name\": \"email\"], [\"name\": \"user_metadata.consent\"]]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/users-exports\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Check export status\n\nOnce you've created your job to export your users, you can check on its status using the [Get a Job endpoint](https://auth0.com/docs/api/management/v2#!/Jobs/get_jobs_by_id).\n\nProvide the ID of the job (which you received in the response when creating the job). If you're using the sample request below, replace the placeholder `{yourJobId}` with the value of the ID.\n\nRequire Scopes: `create:users`, `read:users`, `create:passwords_checking_job`\n\n*   [cURL](#53fcd33679784fcfaa96167063db4ebf_shell)\n*   [C#](#53fcd33679784fcfaa96167063db4ebf_csharp)\n*   [Go](#53fcd33679784fcfaa96167063db4ebf_go)\n*   [Java](#53fcd33679784fcfaa96167063db4ebf_java)\n*   [Node.JS](#53fcd33679784fcfaa96167063db4ebf_node)\n*   [Obj-C](#53fcd33679784fcfaa96167063db4ebf_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D' \\\n  --header 'authorization: Bearer {yourMgmtAPIAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\")\n  .header(\"authorization\", \"Bearer {yourMgmtAPIAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D',\n  headers: {authorization: 'Bearer {yourMgmtAPIAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtAPIAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtAPIAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtAPIAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/jobs/%7ByourJobId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtAPIAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtAPIAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/%7ByourJobId%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nYou should get a response like the following:\n\n```\n{\n  \"type\": \"users_export\",\n  \"status\": \"completed\",\n  \"connection_id\": \"con_lCvO...a\",\n  \"format\": \"csv\",\n  \"limit\": 5,\n  \"fields\": [\n    {\n      \"name\": \"user_id\"\n    },\n    {\n      \"name\": \"name\"\n    },\n    {\n      \"name\": \"email\"\n    },\n    {\n      \"name\": \"identities[0].connection\",\n      \"export_as\": \"provider\"\n    }\n  ],\n  \"location\": \"pus3-auth0-export-users-us-east-2.s3.us-east-2.amazonaws.com/job_coRQCC3MHztpuTlo/auth0docs2.csv.gz?Expires=1509725589&Key-Pair-Id=APKAJPL62IJALBDMSSCA&Signature=l2JaFXP~BATnfagb64PK-qbX9QaZREDYNW0q5QeHuV-MaDpZjpABDXfHHLh2SsCMQz~UO-QsCSfI81l0lvCKzZPZL6cZHK7f~ixlZOK~MHKJuvMqsUZMbNluNAwhFmgb2fZ86yrB1c-l2--H3lMELAk7hKUwwSrNBlsfbMgQ-i41nMNnsYdy3AVlNVQkwZyx~w-IEHfJDHsqyjia-jfDbIOLQvr8~D9PwZ-xOzROxDwgxrt3undtz80bkgP5hRKOAbHC7Y-iKWa2bzNZYHqzowTrlh7Ta60cblJR46NfF9cNqn9jqRGVv-lsvUD9FxnImCCk~DL6npJnzNLjHvn4-CaWq6KdQnwWgCnZ3LZkxXDVWLLIQQaoc6i~xbuGnnbtKRePFSnpqbt2mAUYasdxTOWuUVK8wHhtfZmRYtCpwZcElXFO9Qs~PTroYZEiS~UHH5byMLt2x4ChkHnTG7pIhLAHN~bCOLk8BN2lOkDBUASEVtuJ-1i6cKCDqI2Ro9YaKZcCYzeQvKwziX6cgnMchmaZW77~RMOGloi2EffYE31OJHKiSVRK7RGTykaYN5S2Sg7W0ZOlLPKBtCGRvGb8rJ6n3oPUiOC3lSp7v0~dkx1rm-jO8mKWZwVtC0~4DVaXsn8KXNbj0LB4mjKaDHwXs16uH1-aCfFnMK7sZC2VyCU_\",\n  \"connection\": \"Username-Password-Authentication\",\n  \"created_at\": \"2017-11-02T23:34:03.803Z\",\n  \"id\": \"job_coRQCC3MHztpuTlo\"\n}\n```\n\n## Find export data\n\nYou can access your export files using the URL provided as the value for the **location** parameter. The name of your tenant is also the name of your file. For example, if your tenant name is `auth0docs`, then your file will be `auth0docs.csv` or `auth0docs.json`. When you navigate to the URL, you will automatically begin downloading the file.\n\nThe download link is valid for 60 seconds. If this time period expires, you have 24 hours to call it again before the job expires.\n\n## Job Cleanup\n\nAll of your job-related data is automatically deleted after 24 hours and cannot be accessed afterward. As such, **we strongly recommend storing the job results using the storage mechanism of your choice**.",
    "title": "Bulk User Exports",
    "description": "Learn how to export lists of users and user metadata.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa",
    "markdown": "# Configure SMS and Voice Notifications for MFA\n\nIf you use SMS or voice as authentication factors, when an end user attempts to authenticate with your application, they are sent a code via SMS or voice, which they will have to enter to complete the transaction. This implies that they both know their login credentials and are in possession of the device that they have registered for MFA use.\n\nYou can configure the SMS and Voice factor using the Dashboard or the Management API to send messages through SMS, voice, or to let the end users choose how they want the code to be delivered. You can configure your delivery provider using Actions, configure your Twilio account, or if you want to send customers SMS only, configure Auth0's default message delivery service. You must use the Universal Login experience to enable voice notifications for MFA.\n\n#### Availability varies by Auth0 plan and login method\n\nBoth your specific login implementation and your Auth0 plan or custom agreement affect whether this feature is available. To learn more, read [Pricing](https://auth0.com/pricing).\n\n## How it works\n\nWhen SMS and Voice are enabled, users are given the option to enroll by getting the code sent by SMS or voice:\n\n![Configure SMS and Voice for MFA User Experience Voice](https://images.ctfassets.net/cdy7uua7fh8z/2Q4BViGl71sdrytUDgNJ10/024bb03106f4a782b35f756a5b560ed4/mfa-sms-voice.png)\n\nWhen you only enable SMS, the flow is simpler:\n\n![Configure SMS and Voice for MFA User Experience SMS](https://images.ctfassets.net/cdy7uua7fh8z/64PgR0CO1Wjfie2Hxy1Ptw/12be815583af4c7fc13156aefcaf1663/mfa-sms.png)\n\nAfter users are enrolled, the next time they authenticate they will get the voice or SMS message at their registered phone.\n\n## Use the Dashboard\n\n1.  Go to [Dashboard > Security > Multi-factor Auth](https://manage.auth0.com/#/multifactor-auth).\n    \n2.  Click **Phone Message** and enable the toggle switch at the top.\n    \n    ![Dashboard Security Multi-factor Auth Phone Message](https://images.ctfassets.net/cdy7uua7fh8z/6lKC5uyFVvK1R6UCySSHtK/06d3c1cb8634858072842322cfeaf4c1/dashboard-mfa_factor_phone-message.png)\n3.  Select your preferred message delivery provider.\n    \n4.  To allow users to authenticate with SMS and voice, you must enable the SMS and voice factors and select your preferred delivery method:\n    \n    1.  **Auth0**: You can't use this provider to send voice messages. Sends SMS messages using Auth0's internally-configured SMS delivery provider. It can be used for evaluation and testing purposes only, and there is a maximum of 100 messages per tenant during the entire tenant lifetime. New codes are not received after reaching the 100 message limit.\n        \n    2.  **Twilio**: Sends the messages using the [Twilio Programmable SMS API](https://www.twilio.com/sms) for SMS or [Twilio Programmable Voice API](https://www.twilio.com/voice) for voice. Use Twilio Life Credentials, not Test Credentials, which are only meant to send messages in a production environment.\n        \n    3.  **Custom**: Sends the messages by invoking an Action in the [Send Phone Message Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n        \n    \n    You can also choose to give users the option of getting SMS text messages, voice calls, or both.\n    \n\n### Twilio configuration\n\nIf you choose to deliver SMS via Twilio, follow these steps to configure your SMS factor.\n\n1.  Open an account with Twilio. You will need a [Twilio Account SID](https://www.twilio.com/help/faq/twilio-basics/what-is-an-application-sid) and a [Twilio Auth Token](https://www.twilio.com/help/faq/twilio-basics/what-is-the-auth-token-and-how-can-i-change-it). These are the Twilio API credentials that Auth0 will use to send an SMS to the user.\n    \n2.  You may also need to enable permissions for your geographic region for [SMS](https://support.twilio.com/hc/en-us/articles/223181108-How-International-SMS-Permissions-work) or [voice](https://www.twilio.com/console/voice/calls/geo-permissions). If you use voice, your account needs to have a Twilio phone number enabled to make voice calls. This can be an external phone number [verified with Twilio](https://support.twilio.com/hc/en-us/articles/223180048-Adding-a-Verified-Phone-Number-or-Caller-ID-with-Twilio) or you can purchase and set up a Twilio phone number from within your account.\n    \n3.  Configure the connection. Go to [Dashboard > Security - Multi-factor Auth](https://manage.auth0.com/#/security/mfa) and choose **Phone Message**.\n    \n4.  Under **Choose your delivery provider**, choose **Twilio** and choose a delivery method.\n    \n5.  Enter your **Twilio Account SID** and **Twilio Auth Token** in the appropriate fields.\n    \n    ![Dashboard Security Multi-Factor Auth Twilio](https://images.ctfassets.net/cdy7uua7fh8z/7tKyyQPNyaQaXoCK7SrNeM/439a9ce71945ffa7616edb646a52ad0f/mfa-phone-twilio.png)\n6.  Choose your **SMS Source**.\n    \n    1.  If you choose **Use From**, you will need to enter the **From** phone number that users will see as the sender of the SMS. You may also configure this in Twilio.\n        \n    2.  If you choose **Use Messaging Services**, you will need to enter a [Messaging Service SID](https://www.twilio.com/docs/sms/services/services-send-messages).\n        \n    3.  If you are using voice, you always need to configure **From** even if you are using **Message Services** for SMS. Make sure the phone number is configured to send both SMS and voice messages.\n        \n7.  Click **Save**.\n    \n\n### Customize SMS or voice message templates\n\nYou can customize your SMS and voice message templates. To learn more, read [Customize SMS and Voice Messages](https://auth0.com/docs/customize/customize-sms-or-voice-messages).\n\n## Use the Management API\n\nYou can use the Management API to configure which message delivery methods are enabled by using the `/api/v2/guardian/factors/phone/message-types` endpoint. The `message_types` parameter is an array that can have `[\"sms\"]`, `[\"voice\"]`, or `[\"sms\", \"voice\"]`. You need a [Management API access token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens) with the `update:guardian_factors` scope as a bearer token to call the API:\n\n*   [cURL](#ff97ffc433e44f02bc28867e1541921e_shell)\n*   [C#](#ff97ffc433e44f02bc28867e1541921e_csharp)\n*   [Go](#ff97ffc433e44f02bc28867e1541921e_go)\n*   [Java](#ff97ffc433e44f02bc28867e1541921e_java)\n*   [Node.JS](#ff97ffc433e44f02bc28867e1541921e_node)\n*   [Obj-C](#ff97ffc433e44f02bc28867e1541921e_objc)\n*   [...](#)\n\n```\ncurl --request PUT \\\n  --url 'https://{yourDomain}/api/v2/guardian/factors/phone/message-types' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"message_types\": [\"sms\", \"voice\"] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\"\n\n\tpayload := strings.NewReader(\"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.put(\"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .body(\"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PUT',\n  url: 'https://{yourDomain}/api/v2/guardian/factors/phone/message-types',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN'\n  },\n  data: {message_types: ['sms', 'voice']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\nNSDictionary *parameters = @{ @\"message_types\": @[ @\"sms\", @\"voice\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/{yourDomain}/api/v2/guardian/factors/phone/message-types\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest.body = \"{ \\\"message_types\\\": [\\\"sms\\\", \\\"voice\\\"] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"\n]\nlet parameters = [\"message_types\": [\"sms\", \"voice\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/guardian/factors/phone/message-types\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Integrated SMS messaging providers\n\nAuth0 defaults to support for sending messages through Twilio. However, you can use a different SMS provider, and add specific logic before sending a message or send a different message depending on the user or the application. To do this, you configure SMS MFA to use one of our integrated [Actions](https://auth0.com/docs/customize/actions) in the [Send Phone Message Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n\nIntegrated SMS messaging providers include:\n\n*   [Amazon SNS](https://marketplace.auth0.com/integrations/amazon-sms-provider)\n    \n*   [ClickSend](https://marketplace.auth0.com/integrations/clicksend-sms)\n    \n*   [Esendex](https://marketplace.auth0.com/integrations/esendex-sms-provider)\n    \n*   [Infobip](https://marketplace.auth0.com/integrations/infobip-sms-provider)\n    \n*   [Mitto](https://marketplace.auth0.com/integrations/mitto-sms-provider)\n    \n*   [Telesign](https://marketplace.auth0.com/integrations/telesign-sms-provider)\n    \n*   [Vonage](https://marketplace.auth0.com/integrations/vonage-sms-provider)\n    \n\n## Custom phone providers\n\nYou can also configure custom phone providers using Actions. To see example code for a custom phone provider Action, read the \"Common use cases\" section of [Send Phone Message Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n\n## Security considerations\n\nWhen using any phone messaging provider, be aware that attackers abusing the signup flow could cause you financial damage.\n\nAuth0 limits a single user to send up to 10 SMS or voice messages per hour, and OTP flows via email or authenticators are limited to five requests every five minutes. (The burst rate is 10 but only 1 voice message per hour will be sent for new requests.) To further protect your account, consider:\n\n*   Enabling [Brute Force Protection](https://auth0.com/docs/secure/attack-protection/brute-force-protection). Auth0 will block an IP if it attempts to do more than 50 signup requests per minute.\n    \n*   Enabling [Log Streaming](https://auth0.com/docs/customize/log-streams) and creating alerts using your favorite monitoring tool when you see spikes in the number of `gd_send_voice` or `gd_send_voice_failure` [log events](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes).\n    \n\nPhone Messaging providers have additional protections. If you are using Twilio, read the [Twilio's Anti-Fraud Developer Guide](https://www.twilio.com/docs/usage/anti-fraud-developer-guide). Consider the following options:\n\n*   Limit the countries that you will send messages for [SMS](https://support.twilio.com/hc/en-us/articles/223181108-How-International-SMS-Permissions-work) and [Voice](https://support.twilio.com/hc/en-us/articles/223180228-International-Voice-Dialing-Geographic-Permissions-Geo-Permissions-and-How-They-Work). This is particularly useful if there are countries with a higher risk of [toll fraud](https://www.twilio.com/learn/voice-and-video/toll-fraud) or more expensive calling rates in which you do not typically do business.\n    \n*   Enable Twilio [usage triggers](https://support.twilio.com/hc/en-us/articles/223132387-Protect-your-Twilio-project-from-Fraud-with-Usage-Triggers) to protect your account against fraud and coding mistakes.\n    \n\n## Learn more\n\n*   [Enroll and Challenge SMS and Voice Authenticators](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/enroll-challenge-sms-voice-authenticators)\n*   [Attack Protection](https://auth0.com/docs/secure/attack-protection)\n*   [Log Streams](https://auth0.com/docs/customize/log-streams)",
    "title": "Configure SMS and Voice Notifications for MFA",
    "description": "Describes how to configure SMS and voice notifications for MFA.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/enroll-challenge-sms-voice-authenticators",
    "markdown": "# Enroll and Challenge SMS and Voice Authenticators\n\nAuth0 provides a built-in MFA enrollment and authentication flow using [Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login). However, if you want to create your own user interface, you can use the [MFA API](https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-developer-resources/mfa-api) to accomplish it.\n\n## Prerequisites\n\nBefore you can use the MFA APIs, you'll need to enable the MFA grant type for your application. Go to [Auth0 Dashboard > Applications > Advanced Settings > Grant Types](https://manage.auth0.com/#/applications) and select **MFA**.\n\n*   [Configure phone as a factor](https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa) in the Dashboard or using the [Management API](https://auth0.com/docs/api/management/v2#!/Guardian/put_factors_by_name).\n    \n\n## Enroll with SMS or voice\n\n### Get MFA token\n\nDepending on when you are triggering enrollment, you can obtain an access token for using the MFA API in different ways:\n\n*   If you are enrolling during authentication, see [Authenticate With Resource Owner Password Grant and MFA](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa).\n    \n*   If you want to let the user enroll a factor at any moment, see [Manage MFA Factor Enrollments](https://auth0.com/docs/secure/multi-factor-authentication/manage-mfa-auth0-apis/manage-authenticator-factors-mfa-api).\n    \n\n### Enroll authenticator\n\nMake a `POST` request to the MFA Associate endpoint to enroll the user's authenticator. The bearer token required by this endpoint is the MFA token obtained in the previous step.\n\nTo enroll with SMS or voice, they enroll with a phone number that can be challenged either with SMS or voice. Specific the parameters below to call the endpoint. The `oob_channels` parameter indicates how you want to send the code to the user (SMS or voice).\n\n*   [cURL](#cabfa6aec76b4c4db6f9984979a0a92a_shell)\n*   [C#](#cabfa6aec76b4c4db6f9984979a0a92a_csharp)\n*   [Go](#cabfa6aec76b4c4db6f9984979a0a92a_go)\n*   [Java](#cabfa6aec76b4c4db6f9984979a0a92a_java)\n*   [Node.JS](#cabfa6aec76b4c4db6f9984979a0a92a_node)\n*   [Obj-C](#cabfa6aec76b4c4db6f9984979a0a92a_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/mfa/associate' \\\n  --header 'authorization: Bearer {mfaToken}' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"authenticator_types\": [\"oob\"], \"oob_channels\": [\"sms\"], \"phone_number\": \"+11...9\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/mfa/associate\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {mfaToken}\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/mfa/associate\"\n\n\tpayload := strings.NewReader(\"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {mfaToken}\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/mfa/associate\")\n  .header(\"authorization\", \"Bearer {mfaToken}\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/mfa/associate',\n  headers: {authorization: 'Bearer {mfaToken}', 'content-type': 'application/json'},\n  data: {authenticator_types: ['oob'], oob_channels: ['sms'], phone_number: '+11...9'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {mfaToken}\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"authenticator_types\": @[ @\"oob\" ],\n                              @\"oob_channels\": @[ @\"sms\" ],\n                              @\"phone_number\": @\"+11...9\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/mfa/associate\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/mfa/associate\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {mfaToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\"\n\nheaders = {\n    'authorization': \"Bearer {mfaToken}\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/mfa/associate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/mfa/associate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {mfaToken}'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{ \\\"authenticator_types\\\": [\\\"oob\\\"], \\\"oob_channels\\\": [\\\"sms\\\"], \\\"phone_number\\\": \\\"+11...9\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {mfaToken}\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\n  \"authenticator_types\": [\"oob\"],\n  \"oob_channels\": [\"sms\"],\n  \"phone_number\": \"+11...9\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/mfa/associate\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| Parameter | Value |\n| --- | --- |\n| `authentication_types` | `[oob]` |\n| `oob_channels` | `[sms]` or `[voice]` |\n| `phone_number` | `+11...9`, the phone number [E.164 format](https://en.wikipedia.org/wiki/e.164) |\n\nIf successful, you receive a response like this:\n\n```\n{\n  \"authenticator_type\": \"oob\",\n  \"binding_method\": \"prompt\",\n  \"recovery_codes\": [ \"N3BGPZZWJ85JLCNPZBDW6QXC\" ],\n  \"oob_channel\": \"sms\",\n  \"oob_code\": \"ata6daXAiOi...\"\n}\n`\n```\n\nIf you get a `User is already enrolled` error, the user already has an MFA factor enrolled. Before associating another factor with the user, you must challenge the user with the existing factor.\n\nIf this is the first time the user is associating an authenticator, you'll notice the response includes `recovery_codes`. Recovery codes are used to access the user's account in the event that they lose access to the account or device used for their second-factor authentication. These are one-time usable codes, and new ones are generated as necessary.\n\n### Confirm SMS or voice enrollment\n\nUsers should receive a message with a 6-digit code that they need to provide to the application.\n\nTo complete enrollment, make a `POST` request to the OAuth Token endpoint. You need to include the `oob_code` returned in the previous response, and the `binding_code` with the value received in the message.\n\n*   [cURL](#2d7ddfa576ec4451bb68a99d03144446_shell)\n*   [C#](#2d7ddfa576ec4451bb68a99d03144446_csharp)\n*   [Go](#2d7ddfa576ec4451bb68a99d03144446_go)\n*   [Java](#2d7ddfa576ec4451bb68a99d03144446_java)\n*   [Node.JS](#2d7ddfa576ec4451bb68a99d03144446_node)\n*   [Obj-C](#2d7ddfa576ec4451bb68a99d03144446_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/oauth/token' \\\n  --header 'authorization: Bearer {mfaToken}' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data grant_type=http://auth0.com/oauth/grant-type/mfa-oob \\\n  --data 'client_id={yourClientId}' \\\n  --data 'client_secret={yourClientSecret}' \\\n  --data 'mfa_token={mfaToken}' \\\n  --data 'oob_code={oobCode}' \\\n  --data 'binding_code={userOtpCode}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/oauth/token\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {mfaToken}\");\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/oauth/token\"\n\n\tpayload := strings.NewReader(\"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {mfaToken}\")\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/oauth/token\")\n  .header(\"authorization\", \"Bearer {mfaToken}\")\n  .header(\"content-type\", \"application/x-www-form-urlencoded\")\n  .body(\"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/oauth/token',\n  headers: {\n    authorization: 'Bearer {mfaToken}',\n    'content-type': 'application/x-www-form-urlencoded'\n  },\n  data: new URLSearchParams({\n    grant_type: 'http://auth0.com/oauth/grant-type/mfa-oob',\n    client_id: '{yourClientId}',\n    client_secret: '{yourClientSecret}',\n    mfa_token: '{mfaToken}',\n    oob_code: '{oobCode}',\n    binding_code: '{userOtpCode}'\n  })\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {mfaToken}\",\n                           @\"content-type\": @\"application/x-www-form-urlencoded\" };\n\nNSMutableData *postData = [[NSMutableData alloc] initWithData:[@\"grant_type=http://auth0.com/oauth/grant-type/mfa-oob\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_id={yourClientId}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_secret={yourClientSecret}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&mfa_token={mfaToken}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&oob_code={oobCode}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&binding_code={userOtpCode}\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/oauth/token\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/oauth/token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {mfaToken}\",\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\"\n\nheaders = {\n    'authorization': \"Bearer {mfaToken}\",\n    'content-type': \"application/x-www-form-urlencoded\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/oauth/token\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {mfaToken}'\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=%7BuserOtpCode%7D\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {mfaToken}\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n]\n\nlet postData = NSMutableData(data: \"grant_type=http://auth0.com/oauth/grant-type/mfa-oob\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_id={yourClientId}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_secret={yourClientSecret}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&mfa_token={mfaToken}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&oob_code={oobCode}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&binding_code={userOtpCode}\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/oauth/token\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nIf the call was successful, you'll receive a response in the following format, containing the access token:\n\n```\n{\n  \"id_token\": \"eyJ...i\",\n  \"access_token\": \"eyJ...i\",\n  \"expires_in\": 600,\n  \"scope\": \"openid profile\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n## Challenge with SMS or voice\n\n### Get MFA token\n\nGet an MFA token following the steps described in [Authenticate With Resource Owner Password Grant and MFA](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa).\n\n### Retrieve enrolled authenticators\n\nTo challenge the user, you need the `authenticator_id` for the factor you want to challenge. You can list all enrolled authenticators using the MFA Authenticators endpoint:\n\n*   [cURL](#d8df820d8b66410fa6a87e5781aba1a2_shell)\n*   [C#](#d8df820d8b66410fa6a87e5781aba1a2_csharp)\n*   [Go](#d8df820d8b66410fa6a87e5781aba1a2_go)\n*   [Java](#d8df820d8b66410fa6a87e5781aba1a2_java)\n*   [Node.JS](#d8df820d8b66410fa6a87e5781aba1a2_node)\n*   [Obj-C](#d8df820d8b66410fa6a87e5781aba1a2_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/mfa/authenticators' \\\n  --header 'authorization: Bearer MFA_TOKEN' \\\n  --header 'content-type: application/json'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/mfa/authenticators\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MFA_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/mfa/authenticators\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MFA_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/mfa/authenticators\")\n  .header(\"authorization\", \"Bearer MFA_TOKEN\")\n  .header(\"content-type\", \"application/json\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/mfa/authenticators',\n  headers: {authorization: 'Bearer MFA_TOKEN', 'content-type': 'application/json'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MFA_TOKEN\",\n                           @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/mfa/authenticators\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/mfa/authenticators\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MFA_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = {\n    'authorization': \"Bearer MFA_TOKEN\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"GET\", \"/{yourDomain}/mfa/authenticators\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/mfa/authenticators\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MFA_TOKEN'\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MFA_TOKEN\",\n  \"content-type\": \"application/json\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/mfa/authenticators\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nYou will get a list of authenticators with the following format:\n\n```\n[\n    {\n        \"id\": \"recovery-code|dev_O4KYL4FtcLAVRsCl\",\n        \"authenticator_type\": \"recovery-code\",\n        \"active\": true\n    },\n    {\n        \"id\": \"sms|dev_NU1Ofuw3Cw0XCt5x\",\n        \"authenticator_type\": \"oob\",\n        \"active\": true,\n        \"oob_channel\": \"sms\",\n        \"name\": \"XXXXXXXX8730\"\n    },\n        {\n        \"id\": \"voice|dev_NU1Ofuw3Cw0XCt5x\",\n        \"authenticator_type\": \"oob\",\n        \"active\": true,\n        \"oob_channel\": \"voice\",\n        \"name\": \"XXXXXXXX8730\"\n    }\n]\n```\n\n### Challenge user with OTP\n\nTo trigger a challenge, `POST` to the MFA Challenge endpoint using the corresponding `authenticator_id` and the `mfa_token`.\n\n*   [cURL](#f02a757353a04cefb17df1f0ce347077_shell)\n*   [C#](#f02a757353a04cefb17df1f0ce347077_csharp)\n*   [Go](#f02a757353a04cefb17df1f0ce347077_go)\n*   [Java](#f02a757353a04cefb17df1f0ce347077_java)\n*   [Node.JS](#f02a757353a04cefb17df1f0ce347077_node)\n*   [Obj-C](#f02a757353a04cefb17df1f0ce347077_objc)\n*   [...](#)\n\nto configure this snippet with your account\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/mfa/challenge' \\\n  --data '{ \"client_id\": \"{yourClientId}\",  \"client_secret\": \"{yourClientSecret}\", \"challenge_type\": \"oob\", \"authenticator_id\": \"sms|dev_NU1Ofuw3Cw0XCt5x\", \"mfa_token\": \"{mfaToken}\" }'\n```\n\nto configure this snippet with your account\n\n```\nvar client = new RestClient(\"https://{yourDomain}/mfa/challenge\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\nto configure this snippet with your account\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/mfa/challenge\"\n\n\tpayload := strings.NewReader(\"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\nto configure this snippet with your account\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/mfa/challenge\")\n  .body(\"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\")\n  .asString();\n```\n\nto configure this snippet with your account\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/mfa/challenge',\n  data: {\n    client_id: '{yourClientId}',\n    client_secret: '{yourClientSecret}',\n    challenge_type: 'oob',\n    authenticator_id: 'sms|dev_NU1Ofuw3Cw0XCt5x',\n    mfa_token: '{mfaToken}'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\nto configure this snippet with your account\n\n```\n#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"client_id\": @\"{yourClientId}\",\n                              @\"client_secret\": @\"{yourClientSecret}\",\n                              @\"challenge_type\": @\"oob\",\n                              @\"authenticator_id\": @\"sms|dev_NU1Ofuw3Cw0XCt5x\",\n                              @\"mfa_token\": @\"{mfaToken}\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/mfa/challenge\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\nto configure this snippet with your account\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/mfa/challenge\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\nto configure this snippet with your account\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\"\n\nconn.request(\"POST\", \"/{yourDomain}/mfa/challenge\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\nto configure this snippet with your account\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/mfa/challenge\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"client_id\\\": \\\"{yourClientId}\\\",  \\\"client_secret\\\": \\\"{yourClientSecret}\\\", \\\"challenge_type\\\": \\\"oob\\\", \\\"authenticator_id\\\": \\\"sms|dev_NU1Ofuw3Cw0XCt5x\\\", \\\"mfa_token\\\": \\\"{mfaToken}\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\nto configure this snippet with your account\n\n```\nimport Foundation\nlet parameters = [\n  \"client_id\": \"{yourClientId}\",\n  \"client_secret\": \"{yourClientSecret}\",\n  \"challenge_type\": \"oob\",\n  \"authenticator_id\": \"sms|dev_NU1Ofuw3Cw0XCt5x\",\n  \"mfa_token\": \"{mfaToken}\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/mfa/challenge\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n### Complete authentication using received code\n\nIf success, you receive the following response:\n\n```\n{\n  \"challenge_type\": \"oob\",\n  \"oob_code\": \"asdae35fdt5...\",\n  \"binding_method\": \"prompt\"\n}\n```\n\nYour application needs to prompt the user for the 6-digit code sent in the message and should be set in the `binding_code` parameter. You can verify the code and get authentication tokens using the OAuth0 Token endpoint, specifying the `binding_code` and `oob_code` returned by the previous call:\n\n*   [cURL](#76adc44ecf794d7190e3292cd53a24b9_shell)\n*   [C#](#76adc44ecf794d7190e3292cd53a24b9_csharp)\n*   [Go](#76adc44ecf794d7190e3292cd53a24b9_go)\n*   [Java](#76adc44ecf794d7190e3292cd53a24b9_java)\n*   [Node.JS](#76adc44ecf794d7190e3292cd53a24b9_node)\n*   [Obj-C](#76adc44ecf794d7190e3292cd53a24b9_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/oauth/token' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data grant_type=http://auth0.com/oauth/grant-type/mfa-oob \\\n  --data 'client_id={yourClientId}' \\\n  --data 'client_secret={yourClientSecret}' \\\n  --data 'mfa_token={mfaToken}' \\\n  --data 'oob_code={oobCode}' \\\n  --data binding_code=USER_OTP_CODE\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/oauth/token\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/oauth/token\"\n\n\tpayload := strings.NewReader(\"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/oauth/token\")\n  .header(\"content-type\", \"application/x-www-form-urlencoded\")\n  .body(\"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/oauth/token',\n  headers: {'content-type': 'application/x-www-form-urlencoded'},\n  data: new URLSearchParams({\n    grant_type: 'http://auth0.com/oauth/grant-type/mfa-oob',\n    client_id: '{yourClientId}',\n    client_secret: '{yourClientSecret}',\n    mfa_token: '{mfaToken}',\n    oob_code: '{oobCode}',\n    binding_code: 'USER_OTP_CODE'\n  })\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/x-www-form-urlencoded\" };\n\nNSMutableData *postData = [[NSMutableData alloc] initWithData:[@\"grant_type=http://auth0.com/oauth/grant-type/mfa-oob\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_id={yourClientId}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_secret={yourClientSecret}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&mfa_token={mfaToken}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&oob_code={oobCode}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&binding_code=USER_OTP_CODE\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/oauth/token\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/oauth/token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\"\n\nheaders = { 'content-type': \"application/x-www-form-urlencoded\" }\n\nconn.request(\"POST\", \"/{yourDomain}/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/oauth/token\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-oob&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&mfa_token=%7BmfaToken%7D&oob_code=%7BoobCode%7D&binding_code=USER_OTP_CODE\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"content-type\": \"application/x-www-form-urlencoded\"]\n\nlet postData = NSMutableData(data: \"grant_type=http://auth0.com/oauth/grant-type/mfa-oob\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_id={yourClientId}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_secret={yourClientSecret}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&mfa_token={mfaToken}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&oob_code={oobCode}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&binding_code=USER_OTP_CODE\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/oauth/token\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nIf the call was successful, you'll receive a response in the format below, containing the access token:\n\n```\n{\n  \"id_token\": \"eyJ...i\",\n  \"access_token\": \"eyJ...i\",\n  \"expires_in\": 600,\n  \"scope\": \"openid profile\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n**Note:** SMS and invalid code returns are subject to rate limiting. SMS codes can be sent 10 times and refill once per hour, while invalid codes can be returned 10 times and refill once every six minutes.\n\n## Learn more\n\n*   [Manage Authentication Factors with Authentication API](https://auth0.com/docs/secure/multi-factor-authentication/manage-mfa-auth0-apis/manage-authenticator-factors-mfa-api)\n*   [Configure SMS and Voice Notifications for MFA](https://auth0.com/docs/secure/multi-factor-authentication/multi-factor-authentication-factors/configure-sms-voice-notifications-mfa)\n*   [Challenge with Recovery Codes](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/challenge-with-recovery-codes)\n*   [Enroll and Challenge Email Authenticators](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/enroll-and-challenge-email-authenticators)\n*   [Enroll and Challenge OTP Authenticators](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/enroll-and-challenge-otp-authenticators)\n*   [Enroll and Challenge Push Authenticators](https://auth0.com/docs/secure/multi-factor-authentication/authenticate-using-ropg-flow-with-mfa/enroll-and-challenge-push-authenticators)",
    "title": "Enroll and Challenge SMS and Voice Authenticators",
    "description": "Describes how to build your own MFA flows using SMS and/or voice as an authentication factor.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/phone-messages/customize-phone-templates",
    "markdown": "# Customize Phone Templates\n\n## Prerequisites\n\nBefore customizing your phone templates, configure your phone provider using a third-party service like Twilio. To learn more, read [Configure Phone Messaging Providers](https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers).\n\n## Get started\n\nGo to the [Auth0 Dashboard](https://manage.auth0.com/#/phone). Under **Branding > Phone Templates,** Auth0 provides the following customizable phone templates:\n\n*   **Blocked Account**: Alerts the customer that their account has been blocked as a result of suspicious activity. \n    \n*   **Change Password**: Sends the customer their password change code. \n    \n*   **One Time Password - Enrollment**: Sends the customer the verification code for one-time password (OTP) enrollment.\n    \n*   **One Time Password - Verify**: Sends the customer the verification code for one-time password (OTP) verification.\n    \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/2vZXWLWSRKj5PTKZDX0XMs/a59ee6a9e3b6c153d43b70c877212c1c/image1.png)\n\nOnce you select a phone template, enable it by toggling the **Status**. Now, you can customize the **From** phone number and the **Text Message Template**.\n\n## From phone number\n\nThe default **From** phone number is the one you set while configuring your phone provider. To learn more, read [Configure Phone Messaging Providers](https://auth0.com/docs/customize/phone-messages/configure-phone-messaging-providers).\n\nTo set a custom **From** phone number for a phone template, enter the phone number from which customers will receive messages.\n\n**Note:** If you set up Twilio as your phone provider and selected [Messaging Services](https://www.twilio.com/docs/messaging/services) as the SMS source, you won’t be able to set a custom **From** phone number. Instead, Twilio chooses one of the phone numbers in your Messaging Service's sender pool based on your Twilio configuration. To learn more, read the Twilio [Messaging Services](https://www.twilio.com/docs/messaging/services) documentation.\n\n## Text Message Template \n\nIn the **Text Message Template** body, Auth0 enables you to dynamically generate content using the Liquid templating language. Using Liquid syntax, you can access a number of contextual variables that Auth0 replaces with the relevant values when rendering the phone messages. To learn more about Liquid, read [Liquid for Designers](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) on GitHub.\n\nAuth0 exposes the same set of [contextual variables](https://auth0.com/docs/customize/email/email-templates#common-variables) that you can access using Liquid syntax for phone templates as it does for email templates. The markup rules for customizing phone templates using Liquid syntax are the same as those for customizing email templates. To learn how to use Liquid syntax to customize a phone template, read [Use Liquid Syntax in Email Templates](https://auth0.com/docs/customize/email/email-templates/use-liquid-syntax-in-email-templates).\n\n## Test phone template\n\nOnce you’ve finished customizing your phone template, click the **Try** button. Auth0 sends the phone message to a default app named after your tenant name. To test templates for different applications, create a sample user to go through the phone message flows.",
    "title": "Customize Phone Templates",
    "description": "Learn how to customize phone templates in the Auth0 Dashboard. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/write-your-first-action",
    "markdown": "# Write Your First Action\n\nThis guide will walk you through how to create and deploy your first Action using the Auth0 Dashboard. When you finish, you should understand the basic functionality that you will use with all Actions and you will be familiar with the programming model. What you will learn constitutes the foundation of writing any Action, regardless of its purpose or the flow.\n\n## The goal: notify Slack on user login\n\nYou are creating an Action that sends a message to a Slack channel when a user logs in. While this tutorial will use the Post Login trigger, the information provided here is useful for triggers of any type.\n\nTo accomplish this task, you will do the following:\n\n*   [Create an Action](#create-an-action)\n    \n*   [Add a Secret](#add-a-secret)\n    \n*   [Add a dependency](#add-a-dependency)\n    \n*   [Save the Draft](#save-the-draft)\n    \n*   [Add custom logic](#add-custom-logic)\n    \n*   [Test an Action](#test-an-action)\n    \n*   [Deploy an Action](#deploy-the-action)\n    \n*   [Attach an Action to a Flow](#attach-the-action-to-a-flow)\n    \n*   [See the results of an Action in Tenant Logs](#observe-actions-in-tenant-logs)\n    \n\n## Prerequisites\n\nBecause this Action will be sending messages to a Slack channel, you need to [create an Incoming Webhook for a Slack Workspace](https://api.slack.com/messaging/webhooks). Once you have a Slack Webhook URL, you may continue with this guide.\n\n## Create an Action\n\nTo get an Action working in a specific flow, you need to create the Action and then add it to a flow.\n\n1.  Navigate to [Auth0 Dashboard > Actions > Library,](https://manage.auth0.com/#/actions/library) then select **Create Action** > **Build from scratch**.\n    \n2.  Enter a **Name** and select the **Login / Post Login** trigger since you’ll be adding an Action to the Login flow, then select **Create.**\n    \n    ![Create Action popup](https://images.ctfassets.net/cdy7uua7fh8z/4RIBysqB3a9aIYsAiLtVuk/735e9544ed356820bb67d2ebb18442cc/create-an-action.png)\n\nThe Actions Code Editor appears:\n\n![Actions Code Editor](https://images.ctfassets.net/cdy7uua7fh8z/12Q8OEuDI39eWuWsrVVwN0/afcf60398d133d2b66bc9a35614ccadd/Untitled.png)\n\n## Create an Action from a Template\n\nThe Actions Template gallery offers a variety of starter templates on their way to creating an Action. To create an Action from a Template:\n\n1.  Navigate to [Auth0 Dashboard > Actions > Library](https://manage.auth0.com/#/actions/library), then select **Create Action.**\n    \n2.  Select **Choose from template**.\n    \n3.  Select the template that you would like to use for building an Action.\n    \n4.  You should now see a read-only preview of the code within the template. To proceed, select **Use this template**.\n    \n5.  Enter a name, and select **Create**.\n    \n\n![Show screen for creating an action from a template.](https://images.ctfassets.net/cdy7uua7fh8z/2i6Hv4XxsSAzEXdIKGR8Qz/1c45a12bc39707ba7495bb0fd708f572/925f0c6d-59d4-4a88-a841-e3b912f21083.png)\n\n## Add a Secret\n\nEach Action can contain Secret values, which are suitable for holding sensitive information, such as Access Tokens and API Keys. Let’s store the Slack Webhook URL as a Secret.\n\n1.  Select the Key Icon from the code editor's left sidebar\n    \n2.  Select **Add Secret**.\n    \n3.  Give the Secret the following name: `SLACK_WEBHOOK_URL`.\n    \n4.  Paste in the Webhook URL provided by Slack and select **Create**.\n    \n    ![Create Secret popup](https://images.ctfassets.net/cdy7uua7fh8z/5lwzvBFff1gCisgDoAKGuq/f1f911ea8b0fb743b1c8681bb35d7c58/111.png)\n\nYou’ll see that the Secret has been added to the Action and you can use the new secret via intelligent code complete by typing `event.secrets`.\n\n![Actions Code Editor - Your Secret has been added in the Secrets section.](https://images.ctfassets.net/cdy7uua7fh8z/4FyFtKRSIYuigxE9U8TkEJ/9598b5909694631ca673f748abf2268a/Screen_Shot_2022-02-09_at_3.24.05_PM.png)\n\n## Add a dependency\n\nYou’ll be using the [`@slack/webhook` `npm` package](https://www.npmjs.com/package/@slack/webhook) to make it easy to send a message to Slack. You can use nearly any public `npm` package in an Action as long as it can be installed without relying on [native add-ons](https://www.npmjs.com/package/node-gyp).\n\nTo add the dependency:\n\n1.  Select the Dependency icon (cube icon) in the sidebar.\n    \n2.  For **Name**, enter `@slack/webhook`.\n    \n    ![Actions Add Module popup](https://images.ctfassets.net/cdy7uua7fh8z/6mf5DYukuVE4QPtGBepGfY/660952a8887390da0cb5f96550777c7a/add-dependency.png)\n    \n    By default, your Action will use the latest version of the dependency at the time the dependency was added.\n    \n3.  Select **Create**, and the Dependency should be added to the Action:\n    \n    ![Actions Code Editor: Your dependency has been added.](https://images.ctfassets.net/cdy7uua7fh8z/Jmzvgydo204pBLikzuDJy/1d9a614b4c92f27afbbdd2b2af3b3c0b/Screen_Shot_2022-02-23_at_11.28.41_AM.png)\n\n## Save the Draft\n\nSelect **Save Draft**. Your Action is saved, but it won’t be executed as part of any user flows yet. With Actions, you have the opportunity to create, edit, and test Actions before they affect any traffic in your Auth0 tenant. Once you’re happy with the behavior of the Action, you’ll deploy the Action and add it to a Flow later.\n\n## Add custom logic\n\nNow that the Action has been configured with a Secret and a dependency, let’s write some code!\n\nEvery Action has an event object that contains read-only, contextual information relevant to the associated trigger. If you start typing `event.` in the Editor, you should be presented with all the available properties of the event. To learn more about which information is available on each trigger, read [Explore Flows and Triggers](https://auth0.com/docs/customize/actions/flows-and-triggers).\n\nLet’s use our Action to notify Slack. Add this code to your action:\n\n```\nconst { IncomingWebhook } = require('@slack/webhook');\n\nexports.onExecutePostLogin = async (event, api) => {\n    const url = event.secrets.SLACK_WEBHOOK_URL;\n    const webhook = new IncomingWebhook(url);\n\n    // Send the notification\n    await webhook.send({ text: \"Logging In...\" });\n};\n```\n\nSelect **Save Draft** to save your Action.\n\n## Test the Action\n\nBefore you run this Action in your tenant with real user traffic, test it to ensure it behaves as expected.\n\n1.  Select the Test (triangle) icon in the sidebar. In the Payload section, you’ll see editable JSON data relevant to the trigger that you selected when you created the Action.\n    \n    ![Actions Code Editor: Test Runner panel](https://images.ctfassets.net/cdy7uua7fh8z/4MSu8EfpMLNJpcYtrwP7Jf/66480a0434c89eadb809012bca890037/Screen_Shot_2022-02-10_at_10.01.10_AM.png)\n2.  Select the **Run** button, and you should see a message appear in your Slack channel.\n    \n\n## Deploy the Action\n\nNow that we’re satisfied that the Action is working as expected, it’s time to deploy it.\n\nSelect **Deploy**. Deploying an Action takes a snapshot of the Action at that time and records it as an **Action Version**.\n\nSelect **Version History**, and you should see the Action recorded as Version 1:\n\n![Actions: Version History](https://images.ctfassets.net/cdy7uua7fh8z/53sn70cXoxUHibc3Bmk7Og/193af512ac2b58f3d60ab36ca5499d90/Screen_Shot_2022-02-10_at_10.02.47_AM.png)\n\nYou are now free to update your Action and save it without affecting Version 1 of your Action. Auth0 will only execute the currently deployed version of an Action, so until you deploy an action again, Version 1 will be executed by Auth0.\n\n## Attach the Action to a Flow\n\nThe final step in configuring a new Action so that it’s executed as part of your tenant’s traffic is to attach it to a Flow.\n\n1.  Navigate to [Auth0 Dashboard > Actions > Flows](https://manage.auth0.com/#/actions/flows) to see a list of the available Flows:\n    \n    ![Actions: Choose a flow](https://images.ctfassets.net/cdy7uua7fh8z/6Ussg76LTqVWEZer2tl0bE/669ae24462b9da37fac52afca1c7128f/dashboard-actions-choose-flow_my-slack-action_tutorial.png)\n2.  Select the [Login flow](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) and drag `my-slack-action` into the flow.\n    \n    ![Actions Flows: Login Flow](https://images.ctfassets.net/cdy7uua7fh8z/6hU7sKWtGzSx9Z8dhsXbvp/c404870e356ea5c745685c8ea071f2b9/dashboard-actions-login-flow_my-slack-action_tutorial.png)\n3.  Select **Apply**.\n    \n\nThe Action is now running for real user traffic within your tenant. If you’d like a more robust testing environment, consider [setting up multiple Auth0 environments](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments).\n\n## Observe Actions in Tenant Logs\n\nNow that your Action is running as part of the Login flow, Auth0 captures information about each Action execution in the tenant logs. To view this, navigate to [Auth0 Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs), and select a **Successful Login** event.\n\nYou should see an **Action Details** view that contains information about any Actions that were executed as part of that flow.\n\n![Tenant Logs: Action Details view](https://images.ctfassets.net/cdy7uua7fh8z/61k82wmsXSb9M3wOExM4jH/3cc5d35a73d01c2c8d8802675d26cc1f/dashboard-actions-logs_my-slack-action_tutorial.png)\n\n## Next steps\n\nNow that you’ve written your first Action, check out [Explore Flows and Triggers](https://auth0.com/docs/customize/actions/flows-and-triggers) to learn how to perform some common tasks with Actions.",
    "title": "Write Your First Action",
    "description": "Learn how to write an Action, which includes choosing a flow, creating an Action and configuring it, and binding it to the flow.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/use-cases",
    "markdown": "# Action Use Cases\n\nThe following is a list of Actions for implementing a variety of functionality in Auth0.\n\n## User Profile and Identity",
    "title": "Action Use Cases",
    "description": "Explore a variety of examples of implementations using Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/actions-overview",
    "markdown": "# Understand How Auth0 Actions Work\n\nActions are secure, tenant-specific, [versioned](https://auth0.com/docs/customize/actions/manage-versions) functions written in Node.js that execute at certain points within the Auth0 platform. Actions are used to customize and extend Auth0's capabilities with custom logic.\n\nThe processes that can be extended in this way are called flows. Each flow is made up of one or more triggers and represents the logical pipeline through which information moves during a single point in the Auth0 journey. Multiple Actions can be added to a trigger, with each Action executing in the order in which it was placed. Some triggers are executed synchronously, blocking the flow in which they are involved, and some are executed asynchronously, as indicated in the table below.\n\nActions are a cornerstone to our overall extensibility product at Auth0. With Actions, you can add essential custom logic to your login and identity flows specific to your needs. Actions also allow you to connect external integrations that enhance your overall extensibility experience. For example, you can add an Action to your login flow to verify credentials such as a License or Passport using a Marketplace Partner who specializes in identity proofing.\n\n## What can you do with Actions?\n\nWhat an Action can do is determined by where it is executed within the Auth0 runtime environment.\n\n| Flow | Runs | Trigger(s) | Execution | Example Uses |\n| --- | --- | --- | --- | --- |\n| [Login](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) | As a user logs in. | post-login | Synchronous | *   Modify access and ID tokens<br>*   Call APIs to enrich user profiles or send notifications<br>*   Create authorization rules and make access decisions based on custom logic<br>*   Conditionally enable MFA<br>*   Redirect users to an external site |\n| [Machine to Machine](https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow) | When an access token is issued via the Client Credentials Flow. | credentials-exchange | Synchronous | *   Prevent tokens from being issued<br>*   Add custom claims to the access token |\n| [Password Reset](https://auth0.com/docs/customize/actions/flows-and-triggers/password-reset) | After the user completes the first challenge, but before the user enters a new password. | post-challenge | Synchronous | *   Challenge a user with an additional MFA factor before allowing them to set a new password<br><br>*   Redirect the user to a third-party website/service, such as a custom MFA provider, before allowing them to set a new password |\n| [Pre User Registration](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow) | Before a user is added to a Database or Passwordless Connection. | pre-user-registration | Synchronous | *   Prevent creation of a user in Auth0<br>*   Add custom app\\_metadata or user\\_metadata to a newly created user |\n| [Post User Registration](https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow) | After a user is added to a Database or Passwordless Connection. | post-user-registration | Asynchronous | *   Send a new user notification<br>*   Create a record in a CRM system |\n| [Post Change Password](https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow) | After a password is changed for a Database Connection user. | post-change-password | Asynchronous | *   Send an email to a user to notify them that their password has been changed<br>*   Call an API to revoke a user’s sessions in other systems after their password has been change |\n| [Send Phone Message](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow) | To send a Phone or SMS message as part of a Custom MFA Provider. | send-phone-message | Synchronous | Use a custom provider for sending MFA Phone or SMS messages |\n\n## Key benefits of Actions\n\n### Improved developer experience\n\n*   When editing an Action within the Auth0 Dashboard, you will have access to rich type information and inline documentation about what is possible within each trigger, which makes it easy to discover what capabilities each Trigger supports.\n    \n*   An Action can be edited and tested without affecting the version that is currently serving production traffic.\n    \n*   If an issue is found within an Action, it can be rolled back to a previous version.\n    \n\n### Access to npm packages\n\nNearly all [public `npm` packages](https://www.npmjs.com/) are available to be used within Actions.\n\n### Observability\n\nWhen Actions are executed, Auth0 will capture key metrics about them and link them to [Auth0 Logs](https://auth0.com/docs/deploy-monitor/logs).\n\n### Multiple Actions on every trigger\n\nEvery Action trigger supports multiple independent Actions.\n\n## Get started\n\n*   [Write your first Action](https://auth0.com/docs/customize/actions/write-your-first-action)!\n    \n*   See the current [limitations of Actions](https://auth0.com/docs/customize/actions/limitations).\n    \n\n## Learn more\n\n*   [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action)\n*   [Explore Flows and Triggers](https://auth0.com/docs/customize/actions/flows-and-triggers)\n*   [Actions Limitations](https://auth0.com/docs/customize/actions/limitations)\n*   [Manage Versions](https://auth0.com/docs/customize/actions/manage-versions)\n*   [Migrate from Actions Beta to Final](https://auth0.com/docs/customize/actions/migrate/migrate-from-actions-beta-to-final)",
    "title": "Understand How Auth0 Actions Work",
    "description": "Describes how Auth0 Actions work and what you can accomplish with them.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/action-coding-guidelines",
    "markdown": "# Action Coding Guidelines\n\nActions code should be performant, secure, and clear, so debugging takes less time and effort. Follow our guidelines below to write Action code like a pro!\n\n## Actions basics\n\n*   Use the minimum number of HTTP requests possible and set a reasonable timeout (less than 10 seconds) to avoid accumulated requests during login.\n    \n*   Use [application metadata](https://auth0.com/docs/get-started/applications/configure-application-metadata) to filter for specific applications to determine if an Action should be run.\n    \n*   Ensure that Actions, which provide verification or trigger MFA, cannot be bypassed unintentionally or maliciously.\n    \n*   Actions should never intentionally throw an error; if processes stop because of an error or condition, use the appropriate `api` method like `api.access.deny()`.\n    \n*   Use `event.request.hostname` for the domain used in Authentication API calls; this could be the default Auth0 tenant domain or a [custom domain](https://auth0.com/docs/customize/custom-domains).\n    \n\n## Coding basics\n\n*   Check for strict equals `===` with any incoming or stored data.\n    \n*   Use a `return` statement when the Action process should stop.\n    \n*   Run a code linter, like [ESLint](https://eslint.org/), and an analyzer, like [Semgrep](https://semgrep.dev/docs/getting-started/), to improve code quality and find issues automatically.\n    \n\n## Security basics\n\n*   Do not transmit unencrypted personally-identifiable information (PII) in plain sight, like in URLs or error messages.\n    \n*   Always use HTTPS URLs for redirects and API calls.\n    \n*   AllowList IP addresses when possible.\n    \n*   Watch for incoming data that can be tampered with (URL parameters, user agent, and so on).\n    \n\n## Defensive coding\n\n*   [Catch errors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements) and handle as necessary.\n    \n*   Use guard clauses and return early if the Action processing should not continue.\n    \n\n## Logging\n\n*   Never log sensitive data, secrets, or PII.\n    \n*   Stay under the maximum of 256 characters logged per Action.\n    \n\n## Dependencies\n\n*   Use trusted and maintained packages.\n    \n*   Check for outstanding CVEs using [`npm`'s audit feature](https://docs.npmjs.com/cli/v6/commands/npm-audit) or an automated dependency checker connected to a repository.\n    \n*   Use the latest version of a package when possible.\n    \n\n## User data\n\n*   Check if an email is verified with `event.user.email_verified` if it is being used in a sensitive or high-security context.\n    \n*   Different Connections provide different user profile data; the only guaranteed [user profile field](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure) is the `user_id`.\n    \n\n## Redirect Actions in the Login Flow\n\n*   The token returned by `api.redirect.encodeToken` is signed but not encrypted, so sensitive data or PII should not be included in the payload.\n    \n*   The Login Flow runs after a successful login, which includes:\n    \n    *   SSO (no login form shown)\n        \n    *   silent authentication (checking a session using `prompt=none` in the authorization URL)\n        \n    *   refresh token exchange (no user interaction)\n        \n    *   RO password grants (credentials gathered from an application and exchanged with the token endpoint)\n        \n*   Actions that redirect need to take the above cases into account and either deny access if interaction is required or intensionally allow bypassing, which puts the burden on the application requesting login.",
    "title": "Action Coding Guidelines",
    "description": "Write clear, concise, and secure Actions code with our coding guidelines.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/limitations",
    "markdown": "# Actions Limitations\n\nThe following limitations exist when using Actions:\n\n*   Each Action should not exceed 100 kB. The larger the size, the more latency is introduced, which may have an impact on the performance of your system. This size limit limit does not include any `npm` modules that may be referenced as part of any `require` statements.\n    \n*   Each execution of a flow must complete in 20 seconds or less or the processing will end in an error. Limiting HTTP requests is the best way to keep within this time limit.\n    \n*   Each execution of a flow must complete in 20 seconds or less or the processing will end in an error. Limiting long-running processes, like outbound HTTP requests without a timeout, is necessary to keep within this time limit. An Action that [redirects users to an external page](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions) has a separate timeout before the redirect and after.\n    \n*   Calls made to the Auth0 Management API and User Metadata updates are [rate limited](https://auth0.com/docs/support/policies/rate-limit-policy/management-api-endpoint-rate-limits).\n    \n*   Each Action may have a maximum of 10 `npm` modules.\n    \n*   Each tenant may have a maximum of 100 Actions (including both deployed and undeployed). When an Action is deleted, it no longer counts toward the limit.\n    \n*   Each Action may have a maximum of 50 associated versions (both draft and active). Once the limit is reached, every additional version that is added will result in the oldest version being deleted.\n    \n*   Each flow may have a maximum of 20 active bound Actions.\n    \n*   Each Action may have a maximum of 30 secrets.\n    \n*   Each secret key may have a maximum length of 128 characters, and each secret value may have a maximum length of 2048 characters.\n    \n*   A maximum of 256 characters may be persistently stored for `console.log()` outputs for each Action.\n    \n*   Each session may have a maximum of 32kB each of user metadata persistence and 32kB of app metadata persistence.\n    \n*   Execution logs are retained for 10 days.\n    \n*   HTTP calls to external services originate from [these IP addresses](https://auth0.com/docs/secure/security-guidance/data-security/allowlist).\n    \n*   We do not support Typescript in actions. Source files must be written in JavaScript before being deployed.\n    \n\n#### Cached data:\n\n*   Cached items persist for a maximum of 24 hours.\n    \n*   A maximum of 20 entries can be cached per Trigger.\n    \n*   Cache keys have a maximum size of 64 bytes and values have a maximum size of 2kB.\n    \n*   The cumulative size of cached keys and their values must not exceed 8kB.\n    \n*   Actions that perform an Execution that yields back (such as a redirect) may result in subsequent actions being scheduled on a separate instance with a different cache state. This can result in cached data being inconsistent from one Action to the next.\n    \n\n#### SAML attributes:\n\n*   A maximum of 100 SAML attributes can be changed or added by Actions.\n    \n*   SAML attribute names have a maximum size of 1kB.\n    \n*   SAML values have a maximum size of 2kB.\n    \n*   The total SAML assertions have a maximum size of 10kB.\n    \n\n#### SAML configuration:\n\n*   `audience` has a maximum size of 2kB\n    \n*   `recipient` has a maximum size of 2kB\n    \n*   `destination` has a maximum size of 2kB\n    \n*   `nameIdentifierFormat` has a maximum size of 0.5kB\n    \n*   `nameIdentifierProbes` has a maximum of 10 probes with a maximum size of 0.5kB each\n    \n*   `authnContextClassRef` has a maximum size of 0.5kB\n    \n*   `signingCert` has a maximum size of 4kB\n    \n*   `encryptionCert` has a maximum size of 4kB\n    \n*   `encryptionPublicKey` has a maximum size of 4kB\n    \n*   `cert` has a maximum size of 4kB\n    \n*   `key` has a maximum size of 4kB\n    \n\n**Account Linking (setPrimaryUser):**\n\n*   `primary_user_id` is limited to 128 characters\n    \n*   `setPrimaryUser` can be called once per transaction\n    \n*   Any userMetadata set in the same Action as `setPrimaryUser` is discarded and will be lost. Subsequent Actions within the same transaction will retain userMetadata on the new primary user.\n    \n*   `setPrimaryUser` can not be used in the same transaction where a Rule sets `context.primaryUser.`\n    \n\n**Actions does not currently support:**\n\n*   Retrieving External IdP tokens from the Identities array\n    \n\n## Learn more\n\n*   [Understand How Auth0 Actions Work](https://auth0.com/docs/customize/actions/actions-overview)",
    "title": "Actions Limitations",
    "description": "Learn about the limitations involved with using Auth0 Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/releases",
    "markdown": "# Releases\n\nFeatures and breaking changes released in Actions are listed below.\n\n## v3\n\n### Login Flow\n\nNew features and breaking changes were released to triggers in the Login Flow. To learn about these changes, read [Login Flow: Releases](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/releases).\n\n## v2 (GA)\n\n### Query and body parameters\n\nDirect access to the query and body parameters is available using the `event.request.query` and `event.request.body` objects. These are exposed regardless of whether the authorization was initiated via a `GET` or `POST` request. Many protocol-specific query or body parameters sent as part of an authorization request are now also available as first-class values on the `event.transaction` object. We recommend that you use `event.transaction` rather than `event.request.query` and `event.request.body` unless your use case is not supported. A complete mapping of these changes is below:\n\n| Pre-GA Property | GA Property |\n| --- | --- |\n| `event.actor.ip` | `event.request.ip` |\n| `event.actor.hostname` | `event.request.hostname` |\n| `event.actor.geoIp` | `event.request.geoip` |\n| `event.actor.language` | `event.request.language` |\n| `event.actor.method` | `event.request.method` |\n| `event.actor.userAgent` | `event.request.user_agent` |\n| `event.actor.body` | `event.request.body` |\n| `event.actor.query` | `event.request.query` |\n| `event.actor.query.audience` | `event.resource_server.identifier` |\n| `event.actor.query.scope` | `event.transaction.requested_scopes` |\n| `event.actor.query.acr_values` | `event.transaction.acr_values` |\n| `event.actor.query.ui_locales` | `event.transaction.ui_locales` |\n| `event.protocol` | `event.transaction.protocol` |\n| `context.secrets` | `event.secrets` |\n\n### User Profile properties\n\nIn general, the `event.user` object has had its properties changed from camel case to snake case in order to match the [Auth0 User Profile structure](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure). For example, `event.user.appMetadata` has been changed to `event.user.app_metadata`.\n\n### Performing side effects\n\nIn the pre-GA version of the post-login trigger, side effects were performed by returning an object from an Action. In Actions GA, an `api` object is provided to encapsulate these changes and provide better in-editor type hints and inline documentation.\n\nTo learn more about these changes and see code examples, read [Login Flow: Releases](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/releases).\n\n### Manipulating scopes\n\nAlthough we experimented with providing direct manipulation of ID and Access Token scopes during the Actions Beta, we do not support this functionality in Actions GA.",
    "title": "Releases",
    "description": "Learn about released versions of Actions, including breaking changes and new features.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/test-actions",
    "markdown": "# Test Actions\n\nDepending on where you are in your implementation, you have several different options available to test and debug Auth0 Actions.\n\nWe recommend that you test individual actions from the Auth0 Dashboard as you implement them. Once you are ready, you should verify that the end-to-end flow works as expected using tenant logs through the Auth0 Dashboard.\n\n## Test individual Actions\n\nYou can test individual Actions using the Actions Code Editor. The editor's test capability simulates a call to the Action using a sample payload based on the flow with which the Action is associated. To test an individual Action:\n\n1.  Navigate to [Auth0 Dashboard > Actions](https://manage.auth0.com/#/actions), and choose the Flow and Action that you would like to edit.\n    \n2.  Locate the Actions Code Editor, and select **Test** (the play icon) from its sidebar. Edit the payload in the Test sidebar to analyze the outcome of different payloads.\n    \n3.  Select **Run**.\n    \n\nThe test results show the steps that the Action took, console output, any errors that occurred, and useful statistics about the execution of the Action.\n\n![Screenshot of the testing module inside of the Action Code Editor](https://images.ctfassets.net/cdy7uua7fh8z/7I4CRM8SmRFiibjuk55L86/5f9c4a0cfb56f98d73e4003a8ba54180/test-action-code-editor.png)\n\n## Debug deployed Actions\n\nNow that you have tested your Action, it’s time to deploy it and observe its execution. Assuming you have deployed your Action and added it to a flow (to learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action)), you can debug your live Action in a few steps.\n\n### Verify end-to-end Login Flow\n\nFor a `post-login` Action, you can verify the end-to-end-login flow by executing a login attempt for your tenant:\n\n1.  Navigate to [Auth0 Dashboard > Authentication > Authentication Profile](https://manage.auth0.com/#/authentication-profiles), and select **Try**. A window containing a sample login will open.\n    \n2.  Proceed through the login flow. The login flow will execute any configured Actions.\n    \n\nOnce complete, you will be redirected to a page that either lists the user profile attributes that your applications will receive or shows an error message explaining what went wrong.\n\n### Analyze tenant logs\n\nWhenever a trigger executes that has an associated Action bound to its flow, your [tenant logs](https://auth0.com/docs/deploy-monitor/logs/view-log-events) will include Action execution details.\n\nIn the tenant logs list, you can see logs associated with Actions and choose to view them. In the example below, the log type of `Success Login` is associated with an Action on the `post-login` trigger of this tenant.\n\n![Screenshot of Tenant Log List in the Auth0 Dashboard, showing logs that are associated with Action execution.](https://images.ctfassets.net/cdy7uua7fh8z/4hIo2YJ8fr2tfMEWhaLyn4/03a6d0b67a119efb1d07e912d977e7e1/action-logs-list.png)\n\nSome examples of log types associated with Actions include:\n\nTo view detailed Action execution information, select the log that is associated with an Action execution, then select the **Action Details** view. In Action Details, you can see execution statistics, console output, and any errors that may have occurred.\n\n![Screenshot of individual log associated with Actions testing.](https://images.ctfassets.net/cdy7uua7fh8z/1WrsQvjZxI2WRMrtltandy/0bc92038a5bc7b6344a95ef271eff299/actions-log-detail.png)\n\n## Unit test Actions\n\n​You can unit test your Auth0 Actions by mocking the event and api passed into your Action function. Your Actions can live in version control or local directory, and you can use a tool like Jest to automatically test your Actions. In the following example, we use the [Login / Post Login](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) trigger and [Jest](https://jestjs.io/) to mock and test.\n\n**Action code:**\n\n```\n// action.js\n\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = \"https://my-app.example.com\";\n  if (event.authorization) {\n    api.idToken.setCustomClaim(`${namespace}/favorite_color`, \"pink\");\n  }\n};\n```\n\n**Test file code:**\n\n```\n// action.spec.js\n\nconst { onExecutePostLogin } = require(\"./action.js\");\ntest(\"sets favorite_color ID token claim to pink\", async () => {\n  const namespace = \"https://my-app.example.com\";\n  const mockFunction = jest.fn();\n  const mockApi = { idToken: { setCustomClaim: mockFunction } };\n  const mockEvent = {authorization: {}};\n\n  await onExecutePostLogin(mockEvent, mockApi);\n  expect(mockFunction).toBeCalledWith(\n    `${namespace}/favorite_color`,\n    \"pink\"\n  );\n});\n```\n\n## Best practices\n\nWhen building Actions on Auth0, [we recommend that you create a dedicated Auth0 tenant per environment](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments). Doing so allows you to isolate your production user base from your other environments, as well as configure different administrators per environment (for example, engineers might not have access to production configuration).",
    "title": "Test Actions",
    "description": "Learn how to test and debug Auth0 Actions",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/manage-dependencies",
    "markdown": "# Manage Dependencies\n\nActions allows you to use packages from the [`npm` registry](https://www.npmjs.com/). You can install and manage dependencies for your Actions using either the Actions Code Editor in the Auth0 Dashboard or the Auth0 Management API.\n\n## Add a dependency using the Actions Code Editor\n\nTo add a dependency on a package from the public `npm` registry:\n\n1.  Navigate to [Auth0 Dashboard > Actions > Library](https://manage.auth0.com/#/actions/library), and select your Action.\n    \n2.  Locate the Actions Code Editor, and select Modules (cube icon) in its sidebar.\n    \n3.  Select **Add Module**, and enter the name of the module. To use the latest available version of the package, you can leave the version field blank.\n    \n4.  In your Actions code, require the module. For example, if you added the Axios package, you would add the following line at the top of your code in the Actions Code Editor:\n    \n    ```\n    const axios = require('axios');\n    ```\n    \n\n## Add a dependency using the Auth0 Management API\n\nAlternatively, you can add a dependency using the Auth0 Management API's [Create Action endpoint](https://auth0.com/docs/api/management/v2#!/Actions/post_action). When calling the endpoint, specify the dependencies in the payload:\n\n```\ncurl -H \"Authorization: Bearer {managementApiToken}\" \\\n     -X POST  -H \"Content-Type: application/json\" \\\n     -d '{ \\\n            \"name\":\"my-action\", \\\n            \"supported_triggers\":[{\"id\":\"post-login\",\"version\":\"v2\"}], \\\n            \"code\":\"module.exports = () => {}\",\\\n            \"dependencies\": [{\\\n                \"name\":\"lodash\",\\\n                \"version\":\"4.17.21\"\\\n            }],\\\n            \"runtime\":\"node14\"\\\n        }' \\\n    https://{yourTenant}.com/api/v2/actions/actions\n```\n\n## Security considerations\n\nThird-party packages can contain vulnerabilities and malicious code, so we recommend auditing packages before using them in your Actions. We also recommend that you continuously monitor packages for vulnerabilities using software composition analysis tools.\n\n## Limitations for dependencies in Actions\n\n### No native module support\n\nNative modules cannot be used in Actions. When executing an Action that depends on a native module, the Action will error with a message containing `Compilation failed: Cannot find module`.\n\nTo check whether an `npm` package is native, navigate to the public Github repository for the `npm` package and review the languages the code uses in the sidebar. If the languages include C/C++, the package is likely native. Popular examples include `bcrypt` and `sqlite3`.\n\n### No private module or private registry support\n\nPrivate `npm` modules and private `npm` registries cannot be used with Actions. Actions uses the [public `npm` registry](https://registry.npmjs.org/).",
    "title": "Manage Dependencies",
    "description": "Learn how to install and manage dependencies inside of Auth0 Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/manage-versions",
    "markdown": "# Manage Versions\n\nWith the Actions version history, you can compare between drafted and deployed versions of Actions, and revert to previous versions when necessary.\n\n## Deploy Actions\n\nBefore an Action can be bound to a flow, the Action must be deployed.\n\n1.  Navigate to [Auth0 Dashboard > Actions > Custom Actions](https://manage.auth0.com/#/actions/library).\n    \n2.  Choose your Action.\n    \n3.  Select **Deploy**.\n    \n\nThe selected Action will be deployed and added to the collection of available actions for flows. Additionally, a new draft version of the deployed Action will be created for future editing. Because secrets and dependencies are tied to versions, any saved secrets or dependencies will be available to the new draft.\n\n## Revert Actions\n\nWhen necessary, you can revert to the last known good version of an Action.\n\n1.  Navigate to [Auth0 Dashboard > Actions > Custom Actions](https://manage.auth0.com/#/actions/library).\n    \n2.  Choose your Action.\n    \n3.  Select **Version History**.\n    \n4.  Select the version to which you want to revert, and click **Revert**. \n    \n\nA new copy of the selected version will be created and deployed. Additionally, a new draft version of the deployed Action will be created for future editing. Because secrets and dependencies are tied to versions, any saved secrets or dependencies will be available to the new draft.",
    "title": "Manage Versions",
    "description": "Learn about the Actions version history, which allows you to compare between drafted and deployed versions of Actions, and revert to previous versions when necessary.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/actions-templates",
    "markdown": "# Templates for Actions\n\nThe Actions Template gallery offers a variety of starter templates for creating an Action. These templates provide sample code covering various triggers and use cases, such as Multi-factor Authentication, Access Control, and Profile Enrichment.\n\n![Screenshot for Actions Templates on dashboard](https://images.ctfassets.net/cdy7uua7fh8z/6bEk4FvidgEL7VlkZ1woFa/5d4fbeae0ecb13eda8b65c0e6724cece/templates-screenshot.png)\n\nTemplates provide starter code that you can modify and use as a building block as part of a trigger. Once you select a template for your specific use case, you can then customize the code to fit the individual needs of your application.\n\nFor a step-by-step guide on using Actions Templates, see [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\n## Best Practices\n\n*   Ensure that the templates are custom for your specific environment. As the code is incomplete, you must personalize and complete the samples before importing them into a production environment.\n    \n*   Do not deploy a template without editing and completing it beforehand.\n    \n*   Actions Templates often contain tags in the comments, which should not be modified or deleted.\n    \n*   Always use the latest version of any `npm` package.\n    \n*   Actions Templates target the latest Node.js versions by default. After creating a template, you can modify it to support additional Node.js version(s) as necessary.\n    \n\nAlso please review all [Actions Coding Guidelines](https://auth0.com/docs/customize/actions/action-coding-guidelines) as they apply here as well.",
    "title": "Templates for Actions",
    "description": "The Actions Template gallery offers our customers a wide variety of starter templates on their way to creating an action",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate/migrate-from-actions-beta-to-final",
    "markdown": "# Migrate from Actions Beta to Final\n\nAs part of our long-term vision for extensibility of Auth0 through custom code, we have refined and simplified the programming models that we introduced during the beta period of Actions. Authoring Actions will now be done in a more consistent and predictable way across Triggers. Event data has been aligned more closely with the [Auth0 Management API](https://auth0.com/docs/api/management/v2) and other facets of the Auth0 platform. Changing the behavior of the transaction via custom code now always happens by calling methods of a new `api` argument.\n\nMigrating an Action created during the period prior to [General Availability (GA)](https://auth0.com/docs/troubleshoot/product-lifecycle/product-release-stages#general-availability) should typically involve the following steps:\n\n1.  Adjust references to renamed and relocated event properties as outlined in the [Breaking changes](#breaking-changes) section.\n    \n2.  Instead of composing and returning an object describing the desired side-effects, update custom code to call the relevant `api` method as outlined in the [Performing side effects](#performing-side-effects) section.\n    \n3.  For Actions that need to handle redirect callbacks, use the newly-exposed dedicated function. If you used code that relied on `event.protocol === 'redirect-callback'`, review the [Redirect with Actions](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions) page.\n    \n\n## Breaking changes\n\n### Query and body parameters\n\nDirect access to the query and body parameters is available using the `event.request.query` and `event.request.body` objects. These are exposed regardless of whether the authorization was initiated via a `GET` or `POST` request. Many protocol-specific query or body parameters sent as part of an authorization request are now also available as first-class values on the `event.transaction` object. We recommend that you use `event.transaction` rather than `event.request.query` and `event.request.body` unless your use case is not supported. A complete mapping of these changes is below:\n\n| Pre-GA Property | GA Property |\n| --- | --- |\n| `event.actor.ip` | `event.request.ip` |\n| `event.actor.hostname` | `event.request.hostname` |\n| `event.actor.geoIp` | `event.request.geoip` |\n| `event.actor.language` | `event.request.language` |\n| `event.actor.method` | `event.request.method` |\n| `event.actor.userAgent` | `event.request.user_agent` |\n| `event.actor.body` | `event.request.body` |\n| `event.actor.query` | `event.request.query` |\n| `event.actor.query.audience` | `event.resource_server.identifier` |\n| `event.actor.query.scope` | `event.transaction.requested_scopes` |\n| `event.actor.query.acr_values` | `event.transaction.acr_values` |\n| `event.actor.query.ui_locales` | `event.transaction.ui_locales` |\n| `event.protocol` | `event.transaction.protocol` |\n| `context.secrets` | `event.secrets` |\n\n### User Profile properties\n\nIn general, the `event.user` object has had its properties changed from camel case to snake case in order to match the [Auth0 User Profile structure](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure). For example, `event.user.appMetadata` has been changed to `event.user.app_metadata`.\n\n### Performing side effects\n\nIn the pre-GA version of the post-login trigger, side effects were performed by returning an object from an Action. In Actions GA, an `api` object is provided to encapsulate these changes and provide better in-editor type hints and inline documentation.\n\n#### Update user user\\_metadata\n\nPre-GA Trigger:\n\n```\nasync function myFunction(event, context) {\n  return {\n    user: {\n      userMetadata: {\n        myParam: \"foo\"\n      }\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function onExecutePostLogin(event, api) {\n  api.user.setUserMetadata('myParam', 'foo');\n}\n```\n\n#### Update user app\\_metadata\n\nPre-GA Trigger:\n\n```\nasync function myFunction(event, context) {\n  return {\n    user: {\n      appMetadata: {\n        myParam: \"foo\"\n      }\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function onExecutePostLogin(event, api) {\n  api.user.setAppMetadata('myParam', 'foo');\n}\n```\n\n### Deny a login\n\nPre-GA Trigger:\n\n```\nasync function myFunction(event, context) {\n  throw new Error(\"Access denied.\");\n}\n```\n\nGA Trigger:\n\n```\nasync function onExecutePostLogin(event, api) {\n  api.access.deny(\"Access denied.\");\n}\n```\n\n### Add Custom Claims to the Access Token\n\nPre-GA Trigger:\n\n```\nasync function myFunc(event, context) {\n  return {\n    accessToken: {\n      customClaims: {\n        'https://example.com/custom/claim': 'Custom claim value',\n      }\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function myFunc(event, api) {\n  api.accessToken.setCustomClaim('https://example.com/custom/claim', 'Custom claim value');\n}\n```\n\n### Add Custom Claims to the ID Token\n\nPre-GA Trigger:\n\n```\nasync function myFunc(event, context) {\n  return {\n    idToken: {\n      customClaims: {\n        'https://example.com/custom/claim': 'Custom claim value',\n      }\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function myFunc(event, api) {\n  api.idToken.setCustomClaim('https://example.com/custom/claim', 'Custom claim value');\n}\n```\n\n### Dynamically enable multi-factor authentication\n\nPre-GA Trigger:\n\n```\nasync function myFunction(event, context) {\n  return {\n    command: {\n      type: \"multifactor\",\n      provider: \"any\"\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function onExecutePostLogin(event, api) {\n  api.multifactor.enable(\"duo\");\n}\n```\n\n### Redirect the user\n\nPre-GA Trigger:\n\n```\nasync function myFunction(event, context) {\n  return {\n    command: {\n      type: \"redirect\",\n      url: \"https://my-app.example.com\"\n    }\n  };\n}\n```\n\nGA Trigger:\n\n```\nasync function onExecutePostLogin(event, api) {\n  api.redirect.sendUserTo(\"https://my-app.example.com\");\n}\n```\n\nTo ensure parameters are being sent securely and to avoid replay attacks, passing data via redirects has changed significantly in Actions GA. For more information, see [Redirect with Actions](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions).\n\n### Manipulate scopes\n\nAlthough we experimented with providing direct manipulation of ID and Access Token scopes during the Actions Beta, we do not support this functionality in Actions GA.",
    "title": "Migrate from Actions Beta to Final",
    "description": "Learn about the ways we've improved the Actions programming model between the beta and general availability (GA)releases.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate",
    "markdown": "# Migrate to Actions\n\nTo take advantage of the features provided by Auth0 Actions, you may need to migrate current code from Rules, Hooks, and earlier versions of Actions.",
    "title": "Migrate to Actions",
    "description": "Learn how to migrate to Actions from Rules, Hooks, and earlier versions of Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions",
    "markdown": "# Migrate from Hooks to Actions\n\nWhen converting existing Hooks to Actions, you should associate the new Action with the Trigger that corresponds to the type of Hook. If you follow the steps below and use the mappings we identify within them, the functionality should be identical.\n\n## Plan your migration\n\nDeployed Actions run after active Hooks, so you can either convert Hooks one at a time in the Dashboard or all at once using the Management API.\n\nYou will need to convert code, and then activate the Action and deactivate the Hook. Activating the Action and deactivating the Hook can be done quickly in succession, but depending on the order, there might be a short period of time where either both or neither are running.\n\nBecause of this, we recommend migrating your pipeline step by step: convert pieces of your Hooks code to Action code, test in a staging environment, then go live with one piece at a time. Because active Hooks run before deployed Actions, you can keep some logic in Hooks as you build and test other logic in Actions.\n\n#### Tips when planning your migration\n\n*   Use flags to avoid duplicating expensive or one-time operations.\n    \n*   Make sure to run changes at a time when impact and traffic will be lowest.\n    \n*   Consider using the [Auth0 Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) to script, test, and quickly implement the migration all at once or iteratively.\n    \n\n## Understand limitations\n\nWhile Actions can handle the vast majority of things that Hooks can, you should be aware of a few limitations before you start your migration .(Remember: you can have both Hooks and Actions running as you migrate.)\n\n*   Actions cannot persist data, like access tokens or API responses, across executions.\n    \n*   Actions are not provided with [an access token for the Management API](https://auth0.com/docs/customize/rules/use-management-api) or [access to the global `auth0` object](https://auth0.com/docs/best-practices/rules-best-practices/rules-environment-best-practices#global-object) as in Hooks.\n    \n\nFor the full list of limitations, see [Actions Limitations](https://auth0.com/docs/customize/actions/limitations).\n\n## Convert code\n\nTo convert a Hook to an Action, you must replace Hook-specific code with Actions code. This section covers the tasks you will need to perform to turn a functioning Hook into its equivalent Action.\n\n#### Tips when converting code\n\n*   In general, look for the read-only properties of objects passed into the Hooks function on the Actions `event` object.\n    \n*   Use the Actions Code Editor in the Auth0 Dashboard to write your code; it will help by highlighting errors and supplying auto-complete suggestions.\n    \n*   Before you go live, thoroughly [test your new Actions](https://auth0.com/docs/customize/actions/test-actions) in a [staging or test environment](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments).\n    \n\n### Copy Hook code to a new Action\n\n1.  Log in to your production tenant, and copy the code from the Hook you want to convert.\n    \n2.  Switch to a non-production tenant, and navigate to [Auth0 Dashboard > Actions > Library](https://manage.auth0.com/#/select-tenant?path=/actions/library).\n    \n3.  Select **Build Custom**, then:\n    \n    *   Enter a **Name** for your Action that matches the name of the Hook you're converting.\n        \n    *   Locate **Trigger**, and select the appropriate trigger**:**\n        \n        | Type of Hook | Actions Trigger |\n        | --- | --- |\n        | Client Credentials Exchange | M2M/Client-Credentials |\n        | Pre-User-Registration | Pre User Registration |\n        | Post-User-Registration | Post User Registration |\n        | Post-Change-Password | Post Change Password |\n        | Send Phone Message | Send Phone Message |\n        \n    *   Locate **Runtime**, and select **Node 16.**\n        \n    *   Select **Create**.\n        \n4.  In the code block of the Actions Code Editor, paste the Hook code you want to convert below the exported function.\n    \n5.  Make the changes detailed in the rest of this article as you move the code into the function. You should also read about the `event` object associated with the new Actions Trigger; you'll see links to the relevant documentation when you get to the [Change how data is accessed](#change-how-data-is-accessed) section later in this guide.\n    \n\n### Change the function declaration\n\nHooks functions are exported using a default export, while Actions functions use named exports. Depending on the type of Hook you are converting, the named export will change. Mappings include:\n\n| Type of Hook | Named Export |\n| --- | --- |\n| Client Credentials Exchange | `onExecuteCredentialsExchange` |\n| Pre-User Registration | `onExecutePreUserRegistration` |\n| Post-User Registration | `onExecutePostUserRegistration` |\n| Post-Change Password | `onExecutePostChangePassword` |\n| Send Phone Message | `onExecuteSendPhoneMessage` |\n\n**Before**\n\n```\nmodule.exports = async function myHooksFunction(){}\n```\n\n**After**\n\n```\n// Client Credentials Exchange\nexports.onExecuteCredentialsExchange = async (event, api) => {}\n\n// Pre-User Registration\nexports.onExecutePreUserRegistration = async (event, api) => {}\n\n// Post-User Registration\nexports.onExecutePostUserRegistration = async (event) => {}\n\n// Post-Change Password\nexports.onExecutePostChangePassword = async (event) => {}\n\n// Send Phone Message\nexports.onExecuteSendPhoneMessage = async (event) => {}\n```\n\n### Convert dependencies\n\nHooks and Actions handle dependencies in a similar way. With both, dependencies are added separately via UI or Management API and included in the code. Also with both, you can require any package that is available in the `npm` Registry.\n\n1.  Search for `require` statements inside your Hook code.\n    \n2.  Remove version numbers, but make a note of them.\n    \n3.  Add the dependency by following the steps in the \"Add a Dependency\" section of [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action) (if the dependency is not a [core NodeJS module](https://github.com/nodejs/node/tree/master/lib); if the dependency is a core NodeJS module, you do not need to include it).\n    \n4.  Move the found `require` statements outside of the `function` declaration.\n    \n\n### Convert secrets\n\nHooks and Actions handle secrets in a similar way. With both, Secrets are added per Hook/Action via UI or Management API and included in the code.\n\nTo convert secrets from Hooks to Actions:\n\n1.  Save the values needed for the specific Action you are working on.\n    \n2.  Add a Secret for each value you need to access from inside the Action. To learn how, read the **Add a Secret** section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n    \n3.  Convert your code:\n    \n\n**Before**\n\n```\nasync function (user, context, cb) {\n    const { SECRET_NAME } = context.webtask.secrets;\n\n    // ... additional code\n}\n```\n\n**After**\n\n```\nasync (event, api) => {\n    const { SECRET_NAME } = event.secrets;\n\n\t// ... additional code\n};\n```\n\nAs with Hooks, Auth0 encrypts all secret values at rest.\n\n### Change how data is accessed\n\nWith Hooks, data about the user, client, request, and other contextual data are stored in multiple arguments passed into the Hook function. In Actions, this data has been reshaped and moved to the `event` object. Many of the properties moved over as-is, but some have been combined to increase clarity.\n\nDepending on the type of Hook you are converting, the `event` object will change:\n\n*   [Client Credentials Exchange - Actions Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow/event-object)\n    \n*   [Post-Change Password - Actions Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow/event-object)\n    \n*   [Post-User Registration - Actions Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow/event-object)\n    \n*   [Pre-User Registration - Actions Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow/event-object)\n    \n*   [Send Phone Message - Actions Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow/event-object)\n    \n\n**Before**\n\n```\nasync function (user, context, cb) {\n\tconst clientId = context.clientID;\n\tconst tenant = context.connection.tenant\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nasync (event, api) => {\n\tconst clientId = event.client.client_id;\n\tconst tenant = event.tenant.id;\n\n\t// ... additional code\n};\n```\n\n### Convert callbacks\n\nWhen a Hook is finished processing, it must call the `callback()` function to complete its execution. Conversely, Actions do not use a callback mechanism; therefore, you will need to remove all instances of `callback()` from your Actions function.\n\nIf you were previously using the `callback()` function in a Client Credentials Exchange or Pre User Registration Hook to fail the request or update a user, you will still be able to do this in Actions through a new `api` interface.\n\n#### Client Credentials Exchange\n\nIf you were adding extra claims to the access token in a Client Credentials Exchange Hook:\n\n```\n// Client Credentials Exchange Hook\nmodule.exports = function(client, scope, audience, context, cb) {\n  var access_token = {};\n  access_token.scope = scope;\n\n  access_token['https://example.com/claim'] = 'bar';\n  cb(null, access_token);\n};\n```\n\nYou can now use the Actions [Client Credentials Exchange API Object](https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow/api-object):\n\n```\n// Client Credentials Exchange Action\nexports.onExecuteCredentialsExchange = async (event, api) => {\n  api.accessToken.setCustomClaim(\"https://example.com/claim\", 'bar');  \n};\n```\n\n#### Pre User Registration\n\nIf you were adding extra claims to the access token in a Pre User Registration Hook:\n\n```\n// Pre User Registration Hook\nmodule.exports = function (user, context, cb) {\n\tif (user.app_metadata.condition === \"success\") {\n      var response = {};\n      response.user = { user_metadata: { favorite_color: \"purple\" } };\n      // This Hook succeeded, proceed with the next Hook.\n\t  return callback(null, response);\n\t}\n\n\tif (user.app_metadata.condition === \"failure\") {\n\t\t// This Hook failed, stop the login with an error response.\n\t\treturn callback(new Error(\"Failure message\"));\n\t}\n\n\t// ... additional code\n};\n```\n\nYou can now use the [Pre User Registration API Object](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow/api-object):\n\n```\n// Pre User Registration Action\nexports.onExecutePreUserRegistration = async (event, api) => {\n\tif (event.user.app_metadata.condition === \"success\") {\n\t\t// This Action succeeded, proceed with next Action.\n\t\tapi.user.setUserMetadata(\"favorite_color\", \"purple\");\n\t\treturn;\n\t}\n\n\tif (event.user.app_metadata.condition === \"failure\") {\n\t\t// This Action failed, stop the call with an error response.\n\t\treturn api.access.deny(\"Failure message\");\n\t}\n\n\t// ... additional code\n};\n```\n\n## Complete the migration\n\nOnce your new Actions code has been written and tested, you must activate the Action and deactivate the Hook. These two tasks can be done quickly in succession, but depending on the order, there might be a short period of time where either both or neither are running. Because active Hooks run before deployed Actions, you can keep some logic in Rules as you build and test other logic in Actions.",
    "title": "Migrate from Hooks to Actions",
    "description": "Learn how to migrate your existing Auth0 Hooks code to Auth0 Actions code.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions",
    "markdown": "# Migrate from Rules to Actions\n\nWhen converting existing Rules to Actions, you should associate the new Action with the Post-Login (`post-login`) Trigger of the Login Flow. If you follow the steps below and keep your Actions in the same order as your original Rules, the functionality should be identical.\n\n## Plan your migration\n\nPost-Login Actions run after existing Rules, so you can either convert Rules one at a time in the Dashboard or all at once using the Management API.\n\nYou will need to convert code, and then activate the Action and deactivate the Rule. Activating the Action and deactivating the Rule can be done quickly in succession, but depending on the order, there might be a short period of time where either both or neither are running.\n\nBecause of this, we recommend migrating your pipeline step by step: convert pieces of your Rules code to Action code, test in a staging environment, then go live with one piece at a time. Because active Rules run before deployed Actions, if you start at the end of your Rules pipeline and work backwards, you can keep some logic in Rules as you build and test other logic in Actions.\n\n#### Tips when planning your migration\n\n*   Keep your Actions and Rules 1:1, so functionality can be turned off and on in blocks and tested.\n    \n*   Use flags in user metadata to avoid duplicating expensive or one-time operations.\n    \n*   Start at the end of your Rules pipeline and work backwards; because active Rules run before deployed Actions, you can keep some logic in Rules as you build and test other logic in Actions.\n    \n*   Make sure to run changes at a time when impact and traffic will be lowest.\n    \n*   Consider temporarily [customizing your login page](https://auth0.com/docs/customize) to halt logins if the cutover could cause invalid logins or gaps in protection.\n    \n*   Consider using the [Auth0 Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) to script, test, and quickly implement the migration all at once or iteratively.\n    \n\n## Understand limitations\n\nWhile Actions can handle the vast majority of things that Rules can, you should be aware of a few limitations before you start your migration. (Remember: you can have both Rules and Actions running as you migrate.)\n\n*   Rules can add properties to the `user` and `context` objects, which are accessible in subsequent Rules. An individual Action cannot share data directly with another Action.\n    \n*   Actions cannot persist data, like access tokens or API responses, across executions.\n    \n*   Actions are not provided with [an access token for the Management API](https://auth0.com/docs/customize/rules/use-management-api) or [access to the global `auth0` object](https://auth0.com/docs/rules-best-practices/rules-environment-best-practices) as in Rules. To learn how Management API calls can still be made, read the [Convert Code](#convert-code) section.\n    \n\nFor the full list of limitations, see [Actions Limitations](https://auth0.com/docs/customize/actions/limitations).\n\n## Convert code\n\nTo convert a Rule to an Action, you must replace Rule-specific code with Actions code. This section covers the tasks you will need to perform to turn a functioning Rule into its equivalent Action.\n\n#### Tips when converting code\n\n*   In general, look for the read-only properties of Rules `user` and `context` objects on the Actions `event` object. Look for any side effects your Actions have on the system (like failing a login or updating user metadata) in the `api` object functions.\n    \n*   Use the Actions Code Editor in the Auth0 Dashboard to write your code; it will help by highlighting errors and supplying auto-complete suggestions.\n    \n*   Before you go live, thoroughly [test your new Actions](https://auth0.com/docs/customize/actions/test-actions) in a [staging or test environment](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments).\n    \n\n### Copy Rule code to a new Action\n\n1.  Log in to your production tenant, and copy the code from the Rule you want to convert.\n    \n2.  Switch to a non-production tenant, and navigate to [Auth0 Dashboard > Actions > Library](https://manage.auth0.com/#/select-tenant?path=/actions/library).\n    \n3.  Select **Build Custom**, then:\n    \n    *   Enter a **Name** for your Action that matches the name of the Rule you're converting.\n        \n    *   Locate **Trigger**, and select **Login / Post Login**.\n        \n    *   Locate **Runtime**, and select **Node 16.**\n        \n    *   Select **Create**.\n        \n4.  In the code block of the Actions Code Editor, paste the Rule code you want to convert below the exported `onExecutePostLogin` function.\n    \n5.  Make the changes detailed in the rest of this article as you move the code into the function.\n    \n\n### Change the function declaration\n\nRules use a plain, declared function with `user`, `context`, and `callback` parameters, while Actions use a function exported to a specific name. Make the following change; for now, ignore any errors that appear.\n\n**Before**\n\n```\nasync function myRulesFunction(user, context, callback) {\n    // ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\t// ... additional code\n};\n```\n\n### Change how user data is accessed\n\nIn Rules, data about the user logging in is stored in the [`user` object](https://auth0.com/docs/customize/rules/user-object-in-rules). In Actions, this data is found in the `user` property of the [`event` object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object). The majority of existing properties are accessible in this new location.\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst userEmail = user.email;\n\tconst userId = user.user_id;\n\n\t// This property could be undefined in Rules.\n\tconst userAppMetadata = user.app_metadata || {};\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tconst userEmail = event.user.email;\n\tconst userId = event.user.user_id;\n\n\t// This property will never be undefined in Actions.\n\tconst userAppMetadata = event.user.app_metadata;\n\n\t// ... additional code\n};\n```\n\n### Change how context data is accessed\n\nIn Rules, data about the current login session is stored in the [`context` object](https://auth0.com/docs/customize/rules/context-object). For Actions, this data has been reshaped and moved to the [`event` object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object). Many of the properties moved over as-is, but some have been combined to increase clarity.\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst clientId = context.clientID;\n\tconst clientMetadata = context.clientMetadata || {};\n\n\tconst connectionId = context.connectionID;\n\tconst connectionMetadata = context.connectionMetadata || {};\n\n\tconst protocol = context.protocol;\n\n\tconst tenant = context.tenant;\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tconst clientId = event.client.client_id;\n\tconst clientMetadata = event.client.metadata;\n\n\tconst connectionId = event.connection.id;\n\tconst connectionMetadata = event.connection.metadata;\n\n\tconst protocol = event.transaction.protocol;\n\n\tconst tenant = event.tenant.id;\n\n\t// ... additional code\n};\n```\n\n### Convert dependencies\n\nRules include dependencies in a way that requires including the version number in a `require` statement. Actions use a more standard CommonJS syntax and require that the versions be indicated outside of the code editor.\n\nIn Rules, only specific versions of specific packages are allowed, and adding new packages and versions requires a request to Auth0. In Actions, you can require any package that is available in the `npm` Registry.\n\n1.  Search for `require` statements inside your Rule code.\n    \n2.  Remove version numbers, but make a note of them.\n    \n3.  Add the dependency by following the steps in the \"Add a Dependency\" section of [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action) (if the dependency is not a [core NodeJS module](https://github.com/nodejs/node/tree/master/lib); if the dependency is a core NodeJS module, you do not need to include it).\n    \n4.  Move the found `require` statements outside of the `function` declaration:\n    \n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst dependency = require(\"dependency@1.2.3\");\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nconst dependency = require(\"dependency\"); // v1.2.3\nexports.onExecutePostLogin = async (event, api) => {\n\t// ... additional code\n};\n```\n\n### Convert callbacks\n\nWhen a Rule is finished processing, it must call the `callback()` function and pass in an error if the login fails. Conversely, Actions can return on success, or call an `api` method with a message if the login fails. All instances of `callback()` in a Rule should be removed or replaced with `api.access.deny()` for failure. In both Rules and Actions, if processing needs to stop for a specific condition, use a `return` statement.\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst userAppMetadata = user.app_metadata || {};\n\tif (userAppMetadata.condition === \"success\") {\n\t\t// This Rule succeeded, proceed with next Rule.\n\t\treturn callback(null, user, context);\n\t}\n\n\tif (userAppMetadata.condition === \"failure\") {\n\t\t// This Rule failed, stop the login with an error response.\n\t\treturn callback(new Error(\"Failure message\"));\n\t}\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tif (event.user.app_metadata.condition === \"success\") {\n\t\t// This Action succeeded, proceed with next Action.\n\t\treturn;\n\t}\n\n\tif (event.user.app_metadata.condition === \"failure\") {\n\t\t// This Action failed, stop the login with an error response.\n\t\treturn api.access.deny(\"Failure message\");\n\t}\n\n\t// ... additional code\n};\n```\n\n### Change handling of secrets\n\nIn Rules, you set configuration values globally, which means that all Rules can access all secret values. (To learn more, read [Store Rule Configurations](https://auth0.com/docs/customize/rules/configuration).) In Actions, you set configuration values for each individual Action. You can't access an Action's secret value from outside the context of the Action.\n\nTo convert secrets from Rules to Actions:\n\n1.  Save the values needed for the specific Action you are working on.\n    \n2.  Add a Secret for each value you need to access from inside the Action. To learn how, read the **Add a Secret** section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n    \n3.  Convert your code:\n    \n\n**Before**\n\n```\nfunction myRulesFunction (user, context, callback) {\n  const { CLIENT_ID, CLIENT_SECRET } = configuration;\n\n  // ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  const { CLIENT_ID, CLIENT_SECRET } = event.secrets;\n\n  // ... additional code\n}\n```\n\nAs with Rules, Auth0 encrypts all secret values at rest.\n\n### Convert custom claims in tokens\n\nRules and Actions can both add custom claims to ID and access tokens. In Rules, this is a property of the `context` object, while Actions uses a method on the [`api` object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/api-object).\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst userAppMetadata = user.app_metadata || {};\n\tconst namespace = \"https://namespace/\";\n\n\tcontext.idToken[`${namespace}/emp_id`] = userAppMetadata.emp_id;\n\tcontext.accessToken[`${namespace}/emp_id`] = userAppMetadata.emp_id;\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tconst namespace = \"https://namespace/\";\n\n\tapi.idToken.setCustomClaim(\n\t\t`${namespace}/emp_id`, \n\t\tevent.user.app_metadata.emp_id\n\t); \t\t   \n\n\tapi.accessToken.setCustomClaim(\n\t\t`${namespace}/emp_id`, \n\t\tevent.user.app_metadata.emp_id\n\t);\n\n\t// ... additional code\n};\n```\n\n### Convert multi-factor triggering\n\nIn Rules, multi-factor authentication can be triggered by modifying the `multifactor` property of the [`context` object](https://auth0.com/docs/customize/rules/context-object). In Actions, this is done with a [method on the `api` object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/api-object).\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tif (user.app_metadata.needs_mfa === true) {\n\t\tcontext.multifactor = { \n\t\t\tprovider: \"any\", \n\t\t\tallowRememberBrowser: false,\n\t\t};\n\t}\n\n\t// ... additional code\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tif (event.user.app_metadata.needs_mfa === true) {\n\t\tapi.multifactor.enable(\"any\", { allowRememberBrowser: false });\n\t}\n\n\t// ... additional code\n};\n```\n\n### Convert user metadata updates\n\nUpdating the `user_metadata` and `app_metadata` properties in Rules requires a call to the Management API, which can lead to [rate limit](https://auth0.com/docs/support/policies/rate-limit-policy/management-api-endpoint-rate-limits) errors. Actions, however, provides a way to indicate multiple user metadata changes but only call the Management API once.\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tuser.app_metadata = user.app_metadata || {}; \n\tuser.app_metadata.roles = user.app_metadata.roles || [];\n\tuser.app_metadata.roles.push(\"administrator\"); \n\n\tauth0.users\n\t\t.updateAppMetadata(user.user_id, user.app_metadata) \n\t\t.then(() => callback(null, user, context))\n\t\t.catch((err) => callback(err));\n\n\t// ... additional code\n}\n```\n\nIf subsequent Rules need to update the user metadata, then they would have to call the Management API separately, making it more likely that you would hit the [rate limit](https://auth0.com/docs/support/policies/rate-limit-policy/management-api-endpoint-rate-limits).\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\tconst userRolesUpdated = event.user.app_metadata.roles || [];\n\tuserRolesUpdated.push(\"administrator\"); \n\n\t// Note the two different methods here. \n\tapi.user.setAppMetadata(\"roles\", userRolesUpdated);\n\tapi.user.setUserMetadata(\"hasRoles\", true);\n\n\t// ... additional code\n};\n```\n\nIf subsequent Actions needed to update the user metadata, then they would need to call `api.user.setUserMetadata` or `api.user.setAppMetadata`. In Actions, multiple calls to these functions across one or more Actions will result in a single Management API call once the flow is complete.\n\n### Convert other Management API calls\n\nIn general, we do not recommend calling the Management API from a high-traffic, critical path like Rules or Actions. Requests to all Auth0 APIs are [rate limited](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy), including calls from extensibility points, and calling an API for all logins could easily result in failed logins at high-traffic times.\n\nHowever, If the calls are necessary and are configured to avoid rate limits, it's possible to call the Management API from within Actions. As mentioned in the \"Understand limitations\" section earlier in this article, Actions are not provided with an access token for the Management API, so you will need to get an access token before activating your Action:\n\n1.  [Register a Machine-to-Machine application and authorize it for the Management API](https://auth0.com/docs/get-started/auth0-overview/create-applications/machine-to-machine-apps).\n    \n2.  Save the **Client ID** and **Client Secret** in the Action.\n    \n3.  [Get an access token for the Management API](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production).\n    \n4.  Call the Management API:\n    \n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n\tconst ManagementClient = require(\"auth0@2.9.1\").ManagementClient; \n\tconst managementClientInstance = new ManagementClient({\n\t\t// These come from built-in Rules globals\n\t\ttoken: auth0.accessToken, \n\t\tdomain: auth0.domain,\n\t}); \n\n\tmanagementClientInstance.users.assignRoles(\n\t\t{ id: user.user_id }, \n\t\t{ roles: [\"ROLE_ID_TO_ADD\"] }, \n\t\t(error, user) => {\n\t\t\tif (error) {\n\t\t\t\treturn callback(error);\n\t\t\t}\n\n\t\t\t// ... additional code\n\t\t}\n\t);\n}\n```\n\n**After**\n\n```\nconst auth0Sdk = require(\"auth0\");\nexports.onExecutePostLogin = async (event, api) => {\n\tconst ManagementClient = auth0Sdk.ManagementClient;\n\n\t// This will make an Authentication API call\n\tconst managementClientInstance = new ManagementClient({\n\t\t// These come from a machine-to-machine application\n\t\tdomain: event.secrets.M2M_DOMAIN,\n\t\tclientId: event.secrets.M2M_CLIENT_ID,\n\t\tclientSecret: event.secrets.M2M_CLIENT_SECRET,\n\t\tscope: \"update:users\"\n\t});\n\n\tmanagementClientInstance.users.assignRoles(\n\t\t{ id: event.user.user_id }, \n\t\t{ roles: [\"ROLE_ID_TO_ADD\"]}, \n\t\t(error, user) => {\n\t\t\tif (error) {\n\t\t\t\treturn api.access.deny(error.message);\n\t\t\t}\n\n\t\t\t// ... additional code\n\t\t}\n\t);\n};\n```\n\n### Convert redirects\n\nRules can redirect a user who is logging in to an external page, then wait for a response. In this case, all Rules before the redirection will run twice--once before the redirect and once on the response. The logic for the redirect and the response are typically contained in the same Rule.\n\nIn Actions, the Action pipeline is paused when the redirect happens and picks up once the user returns. Also, the exported redirect triggering function is separate from the redirect callback.\n\n**Before**\n\n```\nfunction myRulesFunction(user, context, callback) {\n    if (context.protocol === \"redirect-callback\") {\n        // User was redirected to the /continue endpoint\n        user.app_metadata.wasRedirected = true;\n        return callback(null, user, context);\n    } else if (\n        context.protocol === \"oauth2-password\" ||\n        context.protocol === \"oauth2-refresh-token\" ||\n        context.protocol === \"oauth2-resource-owner\"\n    ) {\n        // User cannot be redirected\n        return callback(null, user, context);\n    }\n    // User is logging in directly\n    if (!user.app_metadata.wasRedirected) {\n        context.redirect = {\n            url: \"https://example.com\",\n        };\n        callback(null, user, context);\n    }\n}\n```\n\n**After**\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n    if (!event.user.app_metadata.wasRedirected && api.redirect.canRedirect()) {\n        api.redirect.sendUserTo(\"https://example.com\");\n    }\n};\n\nexports.onContinuePostLogin = async (event, api) => {\n    api.user.setAppMetadata(\"wasRedirected\", true);\n};\n```\n\n## Complete the migration\n\nOnce your new Actions code has been written and tested, you must activate the Action and deactivate the Rule. These two tasks can be done quickly in succession, but depending on the order, there might be a short period of time where either both or neither are running. Because active Rules run before deployed Actions, if you start at the end of your Rules pipeline and work backwards, you can keep some logic in Rules as you build and test other logic in Actions.",
    "title": "Migrate from Rules to Actions",
    "description": "Learn how to migrate your existing Auth0 Rules code to Auth0 Actions code.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/configuration",
    "markdown": "# Store Rule Configurations\n\nThe global `configuration` object is available in Rules for storing commonly used values, such as URLs. Sensitive information, such as credentials or API keys, should be stored through the `configuration` object and kept out of your Rules code.\n\n## Configure values\n\nYou can set configuration values in your [Rules Settings](https://manage.auth0.com/#/rules/) on the Dashboard.\n\nTo edit or change a configuration key's value, remove the existing configuration setting and replace it with the updated value. You need to have created at least one Rule to see the configuration area, otherwise, the Rules demo shows instead.\n\n![Dashboard - Auth Pipeline - Rules ](https://images.ctfassets.net/cdy7uua7fh8z/4OiSXzc5fYgPagHdOGbfvj/a589bdf811df66658fe21c509aed610c/Dashboard_-_Auth_Pipeline_-_Rules.png)\n\n## Use the configuration object\n\nAny configuration values you set can be accessed through the `configuration` object by key in your Rules code.\n\n```\nvar MY_API_KEY = configuration.MY_API_KEY;\n```\n\nThe following example is a Rule for sending a Slack message when a new user has signed up. The [Slack Webhook](https://api.slack.com/incoming-webhooks) is a `configuration` value set with the key `SLACK_HOOK_URL`.\n\n```\nfunction (user, context, callback) {\n  // short-circuit if the user signed up already or is using a Refresh Token\n  if (context.stats.loginsCount > 1 || context.protocol === 'oauth2-refresh-token') {\n    return callback(null, user, context);\n  }\n\n  // get your slack's hook url from: https://slack.com/services/10525858050\n  const SLACK_HOOK = configuration.SLACK_HOOK_URL;\n\n  const slack = require('slack-notify')(SLACK_HOOK);\n  const message = 'New User: ' + (user.name || user.email) + ' (' + user.email + ')';\n  const channel = '#some_channel';\n\n  slack.success({\n    text: message,\n    channel: channel\n  });\n\n  // don’t wait for the Slack API call to finish, return right away (the request will continue on the sandbox)`\n  callback(null, user, context);\n}\n```",
    "title": "Store Rule Configurations",
    "description": "Learn about the global configuration object in rules for storing commonly used values.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/create-rules",
    "markdown": "# Create Rules\n\nYou can build your own rule(s) to support your specific functionality requirements. You can modify a pre-existing rule template or choose to start from scratch using one of our samples. Auth0 provides a number of pre-existing rules and rule templates to help you achieve your goal(s). To see a list, visit our [rules repository on GitHub](https://github.com/auth0/rules).\n\n## How rules work\n\nRules are JavaScript functions that execute when a user authenticates to your application. They run once the authentication process is complete, and you can use them to customize and extend Auth0's capabilities. For security reasons, your rules code executes isolated from the code of other Auth0 tenants in a sandbox. Rules also run during the token refresh flow. To learn more, read [Refresh Tokens](https://auth0.com/docs/secure/tokens/refresh-tokens).\n\nIn Auth0, the authentication transaction flow works as follows when you use rules:\n\n![Rules in the Authentication Flow diagram](https://images.ctfassets.net/cdy7uua7fh8z/2gtBtkPChIyguA24x6enx2/ffbb8e21e86920ef9914f6fc126dc1df/flow.png)\n\n1.  An app initiates an authentication request to Auth0.\n    \n2.  Auth0 routes the request to an identity provider through a configured connection.\n    \n3.  The user authenticates successfully.\n    \n4.  The ID token and/or access token is passed through the rules pipeline, then sent to the application.\n    \n\n## Prerequisite\n\nIf you plan to use global variables in your rule, be sure to configure your rules variables first. To learn more, read [Configure Global Variables for Rules](https://auth0.com/docs/customize/rules/configure-global-variables-for-rules).\n\n## Use the Dashboard\n\n1.  Go to [Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules) and click **Create**.\n    \n    ![Dashboard - Auth Pipeline - Rules ](https://images.ctfassets.net/cdy7uua7fh8z/4OiSXzc5fYgPagHdOGbfvj/a589bdf811df66658fe21c509aed610c/Dashboard_-_Auth_Pipeline_-_Rules.png)\n2.  Select a rule template.\n    \n    ![Dashboard - Auth Pipeline - Rules - Template](https://images.ctfassets.net/cdy7uua7fh8z/6IydSSjg2oQrdSzErcTYtN/d17348a98c597a74b2989c298764b9e1/dashboard-rules-create_choose-template.png)\n3.  Name the rule, modify the script to suit your needs, and click **Save changes**.\n    \n    ![Dashboard - Auth Pipeline - Rules - Edit Rule](https://images.ctfassets.net/cdy7uua7fh8z/5CoC6cnazv2uT1iSq6OGsm/6cb30d9479971be771313da80acc4802/Dashboard_-_Auth_Pipeline_-_Rules_-_Edit_Rule.png)\n\n## Use the Management API\n\nMake a `POST` call to the [Create Rule endpoint](https://auth0.com/docs/api/management/v2#!/Rules/post_rules). Be sure to replace `MGMT_API_ACCESS_TOKEN`, `RULE_NAME`, `RULE_SCRIPT`, `RULE_ORDER`, and `RULE_ENABLED` placeholder values with your Management API Access Token, rule name, rule script, rule order number, and rule enabled value, respectively.\n\n*   [cURL](#7787cd611bdf4d1484e51efe784d783b_shell)\n*   [C#](#7787cd611bdf4d1484e51efe784d783b_csharp)\n*   [Go](#7787cd611bdf4d1484e51efe784d783b_go)\n*   [Java](#7787cd611bdf4d1484e51efe784d783b_java)\n*   [Node.JS](#7787cd611bdf4d1484e51efe784d783b_node)\n*   [Obj-C](#7787cd611bdf4d1484e51efe784d783b_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/rules' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"RULE_NAME\", \"script\": \"RULE_SCRIPT\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/rules\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/rules\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/rules\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/rules',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {name: 'RULE_NAME', script: 'RULE_SCRIPT'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"RULE_NAME\",\n                              @\"script\": @\"RULE_SCRIPT\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/rules\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/rules\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/rules\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/rules\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"RULE_NAME\\\", \\\"script\\\": \\\"RULE_SCRIPT\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"RULE_NAME\",\n  \"script\": \"RULE_SCRIPT\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/rules\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| **Value** | **Description** |\n| --- | --- |\n| `MGMT_API_ACCESS_TOKEN` | Access Token for the Management API with the scope `create:rules`. |\n| `RULE_NAME` | Name of the rule you would like to create. The rule name can only contain alphanumeric characters, spaces, and hyphens; it may not start or end with spaces or hyphens. |\n| `RULE_SCRIPT` | Script that contains the code for the rule. Should match what you would enter if you were creating a new rule using the Dashboard. |\n| `RULE_ORDER` (optional) | Integer that represents the order in which the rule should be executed in relation to other rules. Rules with lower numbers are executed before rules with higher numbers. If no order number is provided, the rule will execute last. |\n| `RULE_ENABLED` (optional) | Boolean that represents whether the rules is enabled (`true`) or disabled (`false`). |\n\n## Manage rate limits\n\nFor rules that call Auth0 APIs, you should always handle rate limiting by checking the `X-RateLimit-Remaining` header and acting appropriately when the number returned nears 0. You should also add logic to handle cases in which you exceed the provided rate limits and receive the HTTP Status Code 429 (Too Many Requests); in this case, if a retry is needed, it is best to allow for a back-off to avoid going into an infinite retry loop. To learn more about rate limits, read [Rate Limit Policy For Auth0 APIs](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy).\n\n## Available modules\n\nRules run in a JavaScript sandbox configured for a specific Node.js version.\n\nThe sandbox supports all versions of the JavaScript language (and associated syntax) for the configured Node.js version, and a large number of Node.js modules. For a list of supported sandbox modules, check out [Can I require: Auth0 Extensibility](https://auth0-extensions.github.io/canirequire/).\n\n## Learn more\n\n*   [Configure Global Variables for Rules](https://auth0.com/docs/customize/rules/configure-global-variables-for-rules)\n*   [Rules Environment Best Practices](https://auth0.com/docs/rules-best-practices/rules-environment-best-practices)",
    "title": "Create Rules",
    "description": "Learn how to create rules using the Auth Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/configure-global-variables-for-rules",
    "markdown": "# Configure Global Variables for Rules\n\nYou can configure global variables for rules using Auth0's Dashboard. To learn more, see [Auth0 Rules](https://auth0.com/docs/customize/rules).\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules) and locate the **Settings** section.\n    \n    ![Dashboard - Auth Pipeline - Rules ](https://images.ctfassets.net/cdy7uua7fh8z/4OiSXzc5fYgPagHdOGbfvj/a589bdf811df66658fe21c509aed610c/Dashboard_-_Auth_Pipeline_-_Rules.png)\n2.  Enter a variable key/value pair, and select **+** **Add**.\n    \n    The entered value is now available to all rules via the global `configuration` object and can be referenced using the value in the **Code Snippet** column.\n    \n\n## Learn more\n\n*   [Create Rules](https://auth0.com/docs/customize/rules/create-rules)",
    "title": "Configure Global Variables for Rules",
    "description": "Describes how to configure global variables for rules using the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/use-management-api",
    "markdown": "# Use the Management API from within Rules\n\nFrom within any [Auth0 Rule](https://auth0.com/docs/customize/rules) you write, you can update a user's `app_metadata` or `user_metadata` using the `auth0` object, which is a specially-restricted instance of `ManagementClient` (defined in the [node-auth0](https://github.com/auth0/node-auth0) Node.js client library) and provides limited access to the [Auth0 Management API](https://auth0.com/docs/api/management/v2). To learn more, read [Rules Execution Best Practice](https://auth0.com/docs/rules-best-practices/rules-execution-best-practices).\n\nTo access additional Management API endpoints from inside Rules, you have to use another version of the library.\n\n## Access a newer version of the library\n\nYou can load a newer version of the Auth0 Node.js client library by requiring the specific version of the library. For up-to-date version information, check the [Auth0 Node repository](https://github.com/auth0/node-auth0) in Github.\n\nIn this example, we load version `2.9.1` of the library, then query the list of users and logs the users to the console (to be inspected with the [Real-time Webtask Logs Extension](https://auth0.com/docs/customize/extensions/real-time-webtask-logs)).\n\n```\nfunction (user, context, callback) {\n  var ManagementClient = require('auth0@2.9.1').ManagementClient;\n  var management = new ManagementClient({\n    token: auth0.accessToken,\n    domain: auth0.domain\n  });\n\n  management.getUsers(function (err, users) {\n    console.log(users);\n    callback(null, user, context);\n  });\n}\n```",
    "title": "Use the Management API from within Rules",
    "description": "Learn how to use the Management API from within rules.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/cache-resources",
    "markdown": "# Cache Expensive Resources in Rules\n\nIn Rules you can store expensive resources using the `global` object. The `global` object survives individual execution, so you can reuse things stored there instead of creating them every time a Rule is run. However, the Rules environment can be recycled at any time so your code **must** always check that `global` contains what you expect.\n\nThis example shows how to use the `global` object to keep a [](https://www.mongodb.com/)MongoDB connection:\n\n```\n//If the db object is there, use it.\nif (global.db){\n  return query(global.db, callback);\n}\n\n//If not, get the db (mongodb in this case)\nmongo('mongodb://user:pass@mymongoserver.com/my-db',  function (db){\n  global.db = db;\n  return query(db, callback);\n});\n\n//Do the actual work\nfunction query(db, cb){\n  // Do something with db\n  ...\n  return cb(null, user, context);\n}\n```\n\nTo learn more about using MongoDB, read [the MongoDB Manual](https://docs.mongodb.com/manual/).",
    "title": "Cache Expensive Resources in Rules",
    "description": "How to cache expensive resources in your Rules code.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/debug-rules",
    "markdown": "# Debug Rules\n\nTo debug any [Auth0 Rule](https://auth0.com/docs/rules) you have created, you can use `console.log` from within your rule code. You can see `console.log` output by using the [](#try-this-rule)**Save and Try**, viewing the logs available with the [Real-time Webtask Logs extension](#real-time-logs-extension), or for legacy clients, using the [Debug Rule CLI](#debug-rule-cli).\n\n![Dashboard - Auth Pipeline - Rules - Edit Rule](https://images.ctfassets.net/cdy7uua7fh8z/5CoC6cnazv2uT1iSq6OGsm/6cb30d9479971be771313da80acc4802/Dashboard_-_Auth_Pipeline_-_Rules_-_Edit_Rule.png)\n\n## Try this Rule\n\nIn the [Rules Editor](https://manage.auth0.com/#/rules/create), the **Save and Try** button lets you run a Rule in isolation with mock **user** and **context** objects. Clicking **TRY** will run the Rule with those two objects as input and will display any `console.log` output.\n\nThe **Try this rule script** feature functions outside a specific client context. When using this feature, you may run into issues if your Rule depends on data that would be provided when called from an actual application.\n\n![Auth0 Pipeline - Rules - Try this rule](https://images.ctfassets.net/cdy7uua7fh8z/4scLIFzI1isvJZ9UI6mHfR/eceb674d3a53ecbab1bd9835a5194012/Auth_Pipeline_-_Rules_-_Try.png)\n\n## Real-time logs extension\n\nThe [](https://auth0.com/docs/extensions/realtime-webtask-logs)Real-time Webtask Logs extension displays all logs in real-time for all custom code in your account, which includes all `console.log` output and exceptions. To learn more, read [Real-time Webtask Logs](https://auth0.com/docs/extensions/realtime-webtask-logs).\n\n## Debug Rule CLI\n\nIn the [Rules Editor](https://manage.auth0.com/#/rules/create), the **Save and Debug** option displays instructions for installing, configuring, and running the [webtask CLI](https://github.com/auth0/wt-cli) for debugging Rules. Paste these commands into a terminal to see the `console.log` output and any unhandled exceptions that occur during Rule execution.\n\nFor example:\n\n```\n~  npm install -g wt-cli\n  ~  wt init --container \"youraccount\" --url \"https://sandbox.it.auth0.com\" --token \"eyJhbGci...WMPGI\" -p \"youraccount-default-logs\"\n  ~  wt logs -p \"youraccount-default-logs\"\n  [18:45:38.179Z]  INFO wt: connected to streaming logs (container=youraccount)\n  [18:47:37.954Z]  INFO wt: webtask container assigned\n  [18:47:38.167Z]  INFO wt: ---- checking email_verified for some-user@mail.com! ----\n```\n\nThis debugging method works for Rules tried from the Dashboard and for those actually running during user authentication.",
    "title": "Debug Rules",
    "description": "Learn how to debug your Auth0 rules.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/redirect-users",
    "markdown": "# Redirect Users from Within Rules\n\nYou can use [Auth0 Rules](https://auth0.com/docs/customize/rules) to redirect users before an authentication transaction is complete. This lets you implement custom authentication flows that require additional user interaction beyond the standard login form. Redirect rules are commonly used to do custom Multi-factor Authentication (MFA) in Auth0, but they can also be used for:\n\n*   Custom privacy policy acceptance, terms of service, and data disclosure forms.\n    \n*   Securely performing a one-time collection of additional required profile data.\n    \n*   Allowing remote Active Directory users to change their password.\n    \n*   Requiring users to provide additional verification when logging in from unknown locations.\n    \n*   Gathering more information about your users than they provided at initial signup.\n    \n\nYou can redirect a user **once** per authentication flow. If you have one rule that redirects a user, you **cannot** invoke a second rule to redirect the user at a later time.\n\nTo learn more, see [Multi-Factor Authentication in Auth0](https://auth0.com/docs/secure/multi-factor-authentication).\n\n## Start redirect and resume authentication\n\nSet the `context.redirect` property as follows:\n\n```\nfunction (user, context, callback) {\n  context.redirect = {\n    url: \"https://example.com/foo\"\n  };\n  return callback(null, user, context);\n}\n```\n\nOnce all rules have finished executing, Auth0 redirects the user to the URL specified in the `context.redirect.url` property. Auth0 also passes a `state` parameter in that URL. For example:\n\n```\nhttps://example.com/foo?state=abc123\n```\n\nYour redirect URL needs to extract the `state` parameter and send it back to Auth0 to resume the authentication transaction. State is an opaque value, used to prevent [Cross-Site Request Forgery (CSRF) attacks](https://auth0.com/docs/security/common-threats#cross-site-request-forgery).\n\nAfter the redirect, resume authentication by redirecting the user to the `/continue` endpoint and include the `state` parameter you received in the URL. If you do not send the original state back to the `/continue` endpoint, Auth0 will lose the context of the login transaction and the user will not be able to log in due to an `invalid_request` error.\n\nFor example:\n\n```\nhttps://{yourDomain}/continue?state={originalState}\n```\n\nIf you're using a custom domain:\n\n```\nhttps://{yourAuth0CustomDomain}/continue?state={originalState}\n```\n\n`THE_ORIGINAL_STATE` is the value that Auth0 generated and sent to the redirect URL. For example, if your rule redirected to `https://example.com/foo`, Auth0 would use a redirect URL similar to `https://example.com/foo?state=abc123`. So `abc123` would be the `THE_ORIGINAL_STATE`. To resume the authentication transaction, you would redirect to:\n\n```\nhttps://{yourDomain}/continue?state=abc123\n```\n\nWhen a user has been redirected to the `/continue` endpoint:\n\n*   **all rules will be run again**, however, the `context.redirect` will be ignored to allow authentication to continue.\n    \n*   any changes to the user object are made during the redirect, prior to calling the `/continue` endpoint. For example, updates through the Auth0 Management API are available after continuing the transaction.\n    \n\n## Validate resumed login\n\nTo distinguish between user-initiated logins and resumed login flows, check the `context.protocol` property:\n\n```\nfunction (user, context, callback) {\n    if (context.protocol === \"redirect-callback\") {\n        // User was redirected to the /continue endpoint\n    } else {\n        // User is logging in directly\n    }\n}\n```\n\n## Force password change example\n\nIn some cases, you may want to force users to change their passwords under specific conditions. You can write a rule that has the following behavior:\n\n1.  The user attempts to log in and needs to change their password.\n    \n2.  The user is redirected to an application-specific page with a JWT in the query string. This JWT ensures that only this user's password can be changed and **must be validated** by the application.\n    \n3.  The user changes their password in the application-specific page by having the application call the [Auth0 Management API](https://auth0.com/docs/api/v2#!/Users/patch_users_by_id)\n    \n4.  Once the user has successfully changed their password, the application extracts the `authorize_again` claim from the verified and decoded JWT, then proceeds to redirect the user to that URL allowing them to sign in with their new password.\n    \n\n```\nfunction(user, context, callback) {\n   /*\n   * Prerequisites:\n   * 1. Implement a `mustChangePassword` function\n   * 2. Set configuration variables for the following:\n   *    - CLIENT_ID\n   *    - CLIENT_SECRET\n   *    - ISSUER\n   */\n\n  const url = require('url@0.10.3');\n  const req = context.request;\n\n  function mustChangePassword() {\n    // TODO: implement function\n    return true;\n  }\n\n  if (mustChangePassword()) {\n    // User has initiated a login and is forced to change their password\n    // Send user's information and query params in a JWT to avoid tampering\n    function createToken(clientId, clientSecret, issuer, user) {\n      const options = {\n        expiresInMinutes: 5,\n        audience: clientId,\n        issuer: issuer\n      };\n      return jwt.sign(user, clientSecret, options);\n    }\n\n    const token = createToken(\n      configuration.CLIENT_ID,\n      configuration.CLIENT_SECRET,\n      configuration.ISSUER,\n      {\n        sub: user.user_id,\n        email: user.email,\n        authorize_again: url.format({\n          protocol: 'https',\n          hostname: auth0.com,\n          pathname: '/authorize',\n          query: req.query\n        })\n      }\n    );\n\n    context.redirect = {\n      url: `https://example.com/change-pw?token=${token}`\n    };\n  }\n\n  return callback(null, user, context);\n}\n```\n\n## Where to store data\n\nBeware of storing too much data in the Auth0 profile. This data is intended to be used for authentication and authorization purposes. The metadata and search capabilities of Auth0 are not designed for marketing research or anything else that requires heavy search or update frequency. Your system is likely to run into scalability and performance issues if you use Auth0 for this purpose. A better approach is to store data in an external system and store a pointer (the user ID) in Auth0 so that backend systems can fetch the data if needed. A simple rule to follow is to store only items that you plan to use in rules to add to tokens or make decisions.\n\n## Security considerations\n\nPassing information back and forth in the front channel opens up surface area for bad actors to attack. This should definitely be done only in conditions where you must take action in the rule (such as rejecting the authorization attempt with `UnauthorizedError`).\n\nIf, however, you need to communicate directly back to Auth0 and give it instructions for restricting access (you are implementing CAPTCHA checks or custom MFA), then you must have a way to securely tell Auth0 that the requirements of that operation were performed. Likewise, if you need to hand information to the application that you are redirecting to, then you must have a secure way to ensure that the information transferred has not been tampered with.\n\n### Ensure app is logging into the same user\n\nThe application is going to redirect the user back to the Auth0 tenant, so any data related to the user can be gathered through the ID token that is returned to the application. However, you may want to ensure that the application is logging into the same user that is being redirected from to ensure that there is no tampering of any sort in-between. Therefore you will likely want to send a token along with the request.\n\nThe token sent to the app should have the following requirements:\n\n| Token Element | Description |\n| --- | --- |\n| `sub` | The Auth0 `user_id` of the user. |\n| `iss` | An identifier that identifies the rule itself. |\n| `aud` | The application that is targeted for the redirect. |\n| `jti` | A randomly generated string that is stored for confirmation in the user object (in the rule code, set user.jti = uuid.v4(); and then add it as a jti to the token you create). user.jti will still be set when rules run again when /continue is called. This is inline with specifications. |\n| `exp` | Should be as short as possible to avoid re-use of the token. |\n| `other` | Any other custom claims information you need to pass. |\n| `signature` | Assuming that the application has a secure place to store a secret, you can use HS256 signed signatures. This greatly reduces the complexity of the solution and since the token being passed back will have to be signed as well, this is a requirement of this solution. You can use RS256, but it requires the creating of a certificate and updating that certificate when it expires. If you are not passing any information directly back to the rules, then you could use an SPA for this intermediate app and then may prefer RS256 so that the application doesn't have to store the info. It would require you to have a way to validate the token, either through an introspection endpoint or through a public JWKS endpoint. |\n\n### Pass information back to the rule\n\nIn most scenarios, even if you want to pass information from the rule to the application. The application will hopefully be able to safely store the information in whatever storage is necessary. Even if the idea is to update the app or user metadata in Auth0, that can be done using the management API and the user information will be updated as long as it has been completed before redirecting the user back to the `/continue` endpoint. Only if the rule itself must get information and that information is only relevant to this particular sign in session should you pass information back to the rule.\n\nWhen passing information back to the `/continue` endpoint, the token passed should have the following requirements:\n\n| Token Element | Description |\n| --- | --- |\n| `sub` | The Auth0 `user_id` of the user. |\n| `iss` | The application that is targeted for the redirect. |\n| `aud` | Some identifier that identifies the rule itself. |\n| `jti` | The same JTI that was stored in the token passed to the application (NOTE: it should match user.jti or fail). |\n| `exp` | Should be as short as possible to avoid reuse of the token. |\n| `other` | Any other custom claims information you need to pass. |\n| `signature` | Assuming that the application has a secure place to store a secret, you can use HS256 signed signatures. This greatly reduces the complexity of the solution and since the token being passed back will have to be signed as well, this is a requirement of this solution. You can use RS256, but it requires the creating of a certificate and updating that certificate when it expires. |\n\nIt should be sent using POST and then fetched at `context.request.body.token` (or something similar) rather than passing it as a query parameter. This is similar to the form-post method for authentication.\n\nIf you are not passing information back to the `/continue` endpoint, you may want to denylist the JTI unless your expiration times are short enough that replay attacks will be almost impossible.\n\n## Restrictions and limitations\n\nRedirect Rules won't work with:\n\n*   [Resource Owner endpoint](https://auth0.com/docs/api/authentication/reference#resource-owner)\n    \n*   [Password exchange](https://auth0.com/docs/get-started/authentication-and-authorization-flow/resource-owner-password-flow)\n    \n*   [Refresh Token exchange](https://auth0.com/docs/secure/tokens/refresh-tokens)\n    \n\nYou can detect the above cases by checking `context.protocol`:\n\n*   For Password exchange: `context.protocol === 'oauth2-password'`\n    \n*   For Refresh Token exchange: `context.protocol === 'oauth2-refresh-token'`\n    \n*   For Resource Owner logins: `context.protocol === 'oauth2-resource-owner'`\n    \n\n### Session timeout\n\nRedirect rule sessions are normally valid for 3 days unless you have configured a shorter timeout in your **Login Session Management** settings. You can find these settings in your [tenant's advanced settings](https://manage.auth0.com/#/tenant/advanced).\n\n### Resource Owner endpoint\n\nIt is impossible to use redirect rules in the context where you are calling `/oauth/token` directly for the Resource Owner Password Grant. Since the user is not in a redirect flow to begin with, you can not redirect the user in a rule. If you attempt to set context.redirect you will get a failed login attempt with the error interaction\\_required.\n\n### Flows where prompt=none\n\nSince the goal of `prompt=none` is to avoid any scenario where the user will be required to enter input, any redirection will result in an `error=interaction_required`.\n\nSince rules run after an authentication session is created, you cannot use `prompt=none` if you have a redirect rule that is attempting to block access to tokens under certain conditions (custom MFA, CAPTCHA with login, etc.).\n\nYou cannot create a redirect flow that blocks token access and bypasses the redirect rule if `prompt=none` because after a failed attempt, a user can simply call again with `prompt=none` and get tokens because their authentication session has been created even though rules failed the first time.\n\n### Refresh tokens\n\nDue to the fact that using a refresh token requires a backchannel call to `/oauth/token`, this will also fail if you set `context.redirect`.\n\nIt is difficult to securely verify that any restrictions on login were carried out. There is not a consistent session ID in the context that could be used to collect information associated with the session such as this user passed MFA challenges. Therefore, you cannot use `prompt=none` at all.\n\nAnytime `context.redirect` is set in a rule, if `prompt=none` was passed, then the authorization fails with `error=interaction_required`, but since the user's session is created even if rules fail, we can't trust that a user passed all `context.redirect` challenges and therefore can't use `prompt=none` as a way to get tokens.\n\nIn this specific case, we recommend that you use refresh tokens exclusively, because you can ensure that a user passed challenges if those challenges are required to generate a refresh token.\n\n## Learn more\n\n*   [Redirect Users](https://auth0.com/docs/authenticate/login/redirect-users-after-login)\n*   [Understand How Progressive Profiling Works](https://auth0.com/docs/manage-users/user-accounts/user-profiles/progressive-profiling)\n*   [Redirect Users with Alternative Logout](https://auth0.com/docs/authenticate/login/logout/redirect-users-after-logout)",
    "title": "Redirect Users from Within Rules",
    "description": "Learn how to customize authentication flows by redirecting users using rules. Example areas that can be customized include MFA, privacy policy acceptance, and gathering user data.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/user-object-in-rules",
    "markdown": "# User Object Properties in Rules\n\nThe `user` object stores information about the logged-in user, returned by the identity provider. It is generated when a user authenticates and before rules run. Because of the order of events when a user authenticates, changes made to a user's profile from within a rule will only be available in the current user object if you also save the changes to the user object from within the same rule.\n\nTo learn more about the authentication transaction flow, read the \"How rules work\" section in [Create Rules](https://auth0.com/docs/customize/rules/create-rules).\n\n## Properties\n\nThe following properties are available for the `user` object.\n\n| Property | Data Type | Description |\n| --- | --- | --- |\n| `user.app_metadata` | object | Custom fields that store info about a user that influences the user's access, such as support plan, security roles, or access control groups. Is \\`undefined\\` by default. For more info, see [Metadata](https://auth0.com/docs/users/metadata). |\n| `user.created_at` | date time | Timestamp indicating when the user profile was first created. |\n| `user.email` | text | (unique) User's email address. |\n| `user.email_verified` | boolean | Indicates whether the user has verified their email address. |\n| `user.family_name` | text | User's family name. |\n| `user.given_name` | text | User's given name. |\n| `user.identities` | array (object) | Contains info retrieved from the identity provider with which the user originally authenticates. Users may also [link their profile to multiple identity providers](https://auth0.com/docs/users/user-account-linking); those identities will then also appear in this array. The contents of an individual identity provider object varies by provider, but it will typically include the following:<br><br>*   `connection` (text): Name of the Auth0 connection used to authenticate the user.<br>*   `isSocial` (boolean): Indicates whether the connection is a social one.<br>*   `provider` (text): Name of the entity that is authenticating the user, such as Facebook, Google, SAML, or your own provider.<br>*   `user_id` (text): User's unique identifier for this connection/provider. The first user\\_id linked becomes the primary unique identifier for the user.<br>*   `profileData` (object): User information associated with the connection. When profiles are linked, it is populated with the associated user info for secondary accounts.<br><br>In some cases, it will also include an API Access Token to be used with the provider. |\n| `user.last_password_reset` | date time | Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections. |\n| `user.multifactor` | array (text) | List of multi-factor authentication (MFA) providers with which the user is enrolled. This array is updated when the user enrolls in MFA and when an administrator resets a user's MFA enrollments. |\n| `user.name` | text | User's full name. |\n| `user.nickname` | text | User's nickname. |\n| `user.permissions` | text | Permissions assigned to the user's ID token if using the Authorization Extension. |\n| `user.phone_number` | text | User's phone number. Only valid for users with SMS connections. |\n| `user.phone_verified` | boolean | Indicates whether the user has verified their phone number. Only valid for users with SMS connections. |\n| `user.picture` | text | URL pointing to [the user's profile picture](https://auth0.com/docs/users/change-user-picture). |\n| `user.updated_at` | date time | Timestamp indicating when the user's profile was last updated/modified. Changes to `last_login` are considered updates, so most of the time, `updated_at` will match `last_login`. |\n| `user.user_id` | text | (unique) User's primary unique identifier. |\n| `user.user_metadata` | object | Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences. For more info, see [Metadata](https://auth0.com/docs/users/metadata). |\n| `user.username` | text | (unique) User's username. |",
    "title": "User Object Properties in Rules",
    "description": "Describes the properties of the user object that stores information about the logged in user, returned by the identity provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/context-object",
    "markdown": "# Context Object Properties in Rules\n\nThe `context` object stores contextual information about the current authentication transaction, such as the user's IP address, application, or location.\n\nIf you change token content using the context object within a rule, your changes will be available in tokens after all rules have finished running. If your application also requires multifactor authentication or user consent, the user will be prompted before changes in the token are available.\n\n## Properties\n\nThe following properties are available for the `context` object.\n\n| Property | Description |\n| --- | --- |\n| `context.tenant` | A string containing the name of the tenant. |\n| `context.clientID` | The client id of the application the user is logging in to. |\n| `context.clientName` | The name of the application (as defined on the dashboard). |\n| `context.clientMetadata` | An object for holding other application properties. Its keys and values are strings. |\n| `context.connectionID` | A string containing the connection's unique identifier. |\n| `context.connection` | The name of the connection used to authenticate the user (such as: `twitter` or `some-g-suite-domain`) |\n| `context.connectionStrategy` | The type of connection. For social connection `connectionStrategy` === `connection`. For enterprise connections, the strategy will be `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `context.connectionOptions` | An object representing the options defined on the connection. `connectionOptions.tenant_domain` is a string containing the domain being used for authentication when using an Enterprise connection.  <br>`connectionOptions.domain_aliases` is an array containing the optional domains registered as aliases in addition to the primary domain (specified in the `connectionOptions.tenant_domain` property). |\n| `context.connectionMetadata` | An object representing metadata defined on the connection. Its keys and values are strings. |\n| `context.samlConfiguration` | An object that controls the behavior of the SAML and WS-Fed endpoints. Useful for advanced claims mapping and token enrichment (only available for `samlp` and `wsfed` protocol). |\n| `context.protocol` | The authentication protocol. Possible values:<br><br>*   `oidc-basic-profile`: most used, web-based login<br>*   `oidc-implicit-profile`: used on mobile devices and single-page apps<br>*   `oauth2-device-code`: transaction using the [Device Authorization Flow](https://auth0.com/docs/authorization/flows/device-authorization-flow)<br>*   `oauth2-resource-owner`: user/password login typically used on database connections<br>*   `oauth2-resource-owner-jwt-bearer`: login using a bearer JWT signed with user's private key<br>*   `oauth2-password`: login using the password exchange<br>*   `oauth2-refresh-token`: refreshing a token using the Refresh Token exchange<br>*   `samlp`: SAML protocol used on SaaS apps<br>*   `wsfed`: WS-Federation used on Microsoft products like Office365<br>*   `wstrust-usernamemixed`: WS-trust user/password login used on CRM and Office365<br>*   `delegation`: when calling the [Delegation endpoint](https://auth0.com/docs/api/authentication#delegation)<br>*   `redirect-callback`: when a redirect rule is resumed |\n| `context.riskAssessment` | An object containing specific scores (low, medium, high, neutral) for high risk login attempt assessors. See [Customize Adaptive MFA with Rules](https://auth0.com/docs/login/mfa/adaptive-mfa/adaptive-mfa-rule-actions). |\n| `context.stats` | An object containing specific user stats, like `stats.loginsCount`. Note that any of the counter variables returned as part of the `stats` object do not increase during [silent authentication](https://auth0.com/docs/login/configure-silent-authentication) (as when `prompt=none`). There are also scenarios where the counter variables might increase yet a rule or set of rules do not execute, as in the case of a successful cross-origin authentication followed by a failed token request. |\n| `context.sso` | This object will contain information about the Single Sign-on (SSO) transaction (if available)<br><br>*   `with_auth0`: when a user signs in with SSO to an application where the `Use Auth0 instead of the IdP to do Single Sign-On` setting is enabled (only for legacy tenants).<br>*   `with_dbconn`: an SSO login for a user that logged in through a database connection.<br>*   `current_clients`: client IDs using SSO. |\n| `context.accessToken` | An object representing the options defined on the Access Token. You can use this object to [add custom namespaced claims](https://auth0.com/docs/get-started/apis/scopes/sample-use-cases-scopes-and-claims#add-custom-claims-to-a-token) to the Access Token. `context.accessToken.scope` can be used to [change the Access Token's returned scopes](https://auth0.com/docs/rules/examples#modify-scope-of-access-token). When provided, it is an array containing permissions in string format. Custom claims will be included in the Access Token after all rules have run. |\n| `context.idToken` | An object representing the options defined on the [ID Token](https://auth0.com/docs/security/tokens/id-tokens). Used to add custom [namespaced](https://auth0.com/docs/security/tokens/json-web-tokens/create-namespaced-custom-claims) claims to the ID Token. Custom claims will be included in the ID Token after all rules have run. |\n| `context.multifactor` | An object representing the multifactor settings used in [implementing contextual MFA](https://auth0.com/docs/mfa). |\n| `context.redirect` | The object used to [implement the redirection of a user from a rule](https://auth0.com/docs/rules/redirect-users#how-to-implement-a-redirect). |\n| `context.sessionID` | An internal identification for the authentication session. Value is kept only if `prompt=none` is used in the authorization request. Note that the session ID can change **after** rule execution on other flows, so the value available in `context.sessionID` might not match the new session ID that the user will receive. This makes this value only meaningful when `prompt=none` is used. |\n| `context.request` | An object containing useful information of the request. This can also be set to `undefined`. It has the following properties:<br><br>*   `userAgent`: the user-agent of the application that is trying to log in.<br>*   `ip`: the originating IP address of the user trying to log in. We expose IPv6 addresses in our public endpoints (e.g., travel0.us.auth0.com). If a request arrives from a machine that supports IPv6, then this will contain an IPv6 address. If you perform manual IP address manipulation, we suggest you use the [ipaddr.js@1.9.0 library](https://www.npmjs.com/package/ipaddr.js/v/1.9.0).<br>*   `hostname`: the hostname that is being used for the authentication flow.<br>*   `query`: an object containing the querystring properties of the login transaction sent by the application.<br>*   `body`: the body of the POST request on login transactions used on `oauth2-resource-owner`, `oauth2-resource-owner-jwt-bearer` or `wstrust-usernamemixed` protocols.<br>*   `geoip`: an object containing geographic IP information. It has the following properties:<br>    *   `country_code`: a two-character code for the country associated with the IP address.<br>    *   `country_code3`: a three-character code for the country associated with the IP address.<br>    *   `country_name`: the country name associated with the IP address.<br>    *   `city_name`: the city or town name associated with the IP address.<br>    *   `latitude`: the latitude associated with the IP address.<br>    *   `longitude`: the longitude associated with the IP address.<br>    *   `time_zone`: the timezone associated with the IP address.<br>    *   `continent_code`: a two-character code for the continent associated with the IP address.<br>    *   `subdivision_code`: the ISO 3166-2 code for the top-level subdivision/region.<br>    *   `subdivision_name`: The English name of this subdivision/region. |\n| `context.primaryUser` | The unique user id of the primary account for the user. Used to [link user accounts](https://auth0.com/docs/users/user-account-linking#automatic-account-linking) from various identity providers. |\n| `context.authentication` | An object containing information related to the authentication transaction with the following properties:<br><br>`methods`: an array of objects containing the authentication methods a user has completed during their session. For example, a user that has completed a password-based authentication followed by MFA may have the following methods:<br><br>```<br>[<br>  {<br>    \"name\": \"pwd\",<br>    \"timestamp\": 1434454643024<br>  },<br>  {<br>    \"name\": \"mfa\",<br>    \"timestamp\": 1534454643881<br>  }<br>]<br>```<br><br>Was this helpful?<br><br>/<br><br>  <br>The method objects will contain the following properties:<br><br>*   `name`: a string representing the name of the authentication method that has been completed. It can be one of the following values (additional values may be supported in the future):  <br>    *   `federated`: a social or enterprise connection was used to authenticate the user<br>    *   `pwd`: a database connection was used to authenticate the user<br>    *   `sms`: a Passwordless SMS connection was used to authenticate the user<br>    *   `email`: a Passwordless Email connection was used to authenticate the user<br>    *   `mfa`: the user completed a multi-factor authentication<br>*   `timestamp`: an integer indicating the time in seconds at which the authentication method took place in Unix Epoch time<br><br>You can see a sample use case of the `context.authentication.methods` property in the [Require MFA once per session Rule](https://github.com/auth0/rules/blob/master/src/rules/require-mfa-once-per-session.js). |\n| `context.authorization` | An object containing information related to the authorization transaction with the following properties:<br><br>*   `roles`: an array of strings containing the names of a user's assigned roles. You can see a sample use case using the `context.authorization.roles` property to add roles to tokens in [Sample Use Cases: Rules with Authorization](https://auth0.com/docs/authorization/authorization-policies/sample-use-cases-rules-with-authorization#add-user-roles-to-tokens). |\n| `context.organization` | Object containing information related to the organization. Includes the following properties:<br><br>*   `id`: String containing the ID of the organization with which the user is logging in.<br>*   `name`: String containing the name of the organization (as defined in the Auth0 Dashboard).<br>*   `metadata`: Dictionary of string key/value pairs containing other organization properties. |\n\n## Learn more\n\n*   [Debug Rules](https://auth0.com/docs/customize/rules/debug-rules)\n*   [User Object Properties in Rules](https://auth0.com/docs/customize/rules/user-object-in-rules)\n*   [Sample Use Cases: Scopes and Claims](https://auth0.com/docs/get-started/apis/scopes/sample-use-cases-scopes-and-claims)",
    "title": "Context Object Properties in Rules",
    "description": "Learn about the properties of the Rules context object, which stores information about users' IP addresses, applications, and location.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/rules/raise-errors-from-rules",
    "markdown": "# Raise Errors from Rules\n\nThe Auth0 login page can’t display an error message from a rule. If you want users to see a custom message raised from a rule, your app must display that message.\n\nAny error resulting from a rule goes to your callback URL in the protocol’s standard response mode. For example, if your application requests authentication using OIDC/OAuth2, it receives a standard OAuth2 error with `error` and `error_description` result values.\n\nSuppose your callback URL is https://travel0.com/callback and you’re using the standard query response mode. You would receive this response:\n\n```\nhttps://travel0.com/callback?error=access_denied&error_description=[The message you wrote in the rule]\n```\n\nIt’s the role of your app to display the message to the user, such as:\n\n![Sample error message that reads ](https://images.ctfassets.net/cdy7uua7fh8z/7wBM0h29mAwFFbmeOVwVnR/e0ec360ad403d6cdf2f2ac701c621216/rules-login-error-from-rules.png)\n\n## Retry login after a rule error\n\nA likely next step is to request a new authorization. However, in most cases, Auth0 already knows who the user is and so doesn’t ask for login information. Instead, rules run immediately and the rule denies authorization again. This can become an endless loop.\n\nThe user needs an opportunity to provide new credentials. There are two ways your app can make the login page display again:\n\n*   Add a directive in the request to force the display of the login page:\n    \n    *   Use a `prompt=login` parameter to an OIDC/OAuth2 request.\n        \n    *   Use a `ForceAuthn=\"true\"` attribute in a SAML request.\n        \n\n—or—\n\n*   Log the user out of Auth0 before you send a new request.\n    \n\n## Learn more\n\n*   [Auth0 Rules](https://auth0.com/docs/customize/rules)\n*   [Log Users Out of Applications](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-applications)\n*   [Rule Use Cases](https://auth0.com/docs/rules/use-cases)",
    "title": "Raise Errors from Rules",
    "description": "The Auth0 login page can’t display an error message from a rule. Learn what to do instead.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/internationalization-and-localization/universal-login-internationalization",
    "markdown": "# Universal Login Internationalization\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/tenants/settings' \\\n  --header 'authorization: Bearer API2_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"enabled_locales\" : [ \"en\", \"es\"]}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/tenants/settings\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer API2_ACCESS_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/tenants/settings\"\n\n\tpayload := strings.NewReader(\"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer API2_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/tenants/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer API2_ACCESS_TOKEN\")\n  .body(\"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/tenants/settings',\n  headers: {'content-type': 'application/json', authorization: 'Bearer API2_ACCESS_TOKEN'},\n  data: {enabled_locales: ['en', 'es']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer API2_ACCESS_TOKEN\" };\nNSDictionary *parameters = @{ @\"enabled_locales\": @[ @\"en\", @\"es\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/tenants/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/tenants/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer API2_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer API2_ACCESS_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/tenants/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/tenants/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer API2_ACCESS_TOKEN'\nrequest.body = \"{ \\\"enabled_locales\\\" : [ \\\"en\\\", \\\"es\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer API2_ACCESS_TOKEN\"\n]\nlet parameters = [\"enabled_locales\": [\"en\", \"es\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/tenants/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Universal Login Internationalization",
    "description": "Describes the languages you can choose to localize your login pages.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/internationalization-and-localization/password-options-translation",
    "markdown": "# Customize Translation of Lock Password Options\n\nYou can customize the translation of the following Lock password features in your own code:\n\n*   Password Strength\n    \n*   Password History\n    \n*   Change Password widget\n    \n\nTo customize any of these features, you must include version 1.1 or higher of the Change Password widget library:\n\n`<script src=\"https://cdn.auth0.com/js/change-password-1.1.min.js\"></script>`\n\nTo translate the text of each of the Lock password features, include the following code, replacing all strings with text in the desired language:\n\n### Password Strength\n\n```\ndict: {\n    passwordStrength: {\n      containsAtLeast: \"Contain at least %d of the following %d types of characters:\",\n      identicalChars: \"No more than %d identical characters in a row (such as, \\\"%s\\\" not allowed)\",\n      nonEmpty: \"Non-empty password required\",\n      numbers: \"Numbers (such as 0-9)\",\n      lengthAtLeast: \"At least %d characters in length\",\n      lowerCase: \"Lower case letters (a-z)\",\n      shouldContain: \"Should contain:\",\n      specialCharacters: \"Special characters (such as !@#$%^&*)\",\n      upperCase: \"Upper case letters (A-Z)\"\n    }\n}\n```\n\n### Password History\n\n```\ndict: {\n  passwordHistoryError: \"Password has previously been used\"\n}\n```\n\n### Change Password widget\n\n```\ndict: {\n    passwordPlaceholder: \"your new password\",\n    passwordConfirmationPlaceholder: \"confirm your new password\",\n    passwordConfirmationMatchError: \"Please ensure the password and the confirmation are the same.\",\n    successMessage: \"Your password has been reset successfully.\",\n    configurationError: \"An error occurred. There appears to be a misconfiguration in the form.\",\n    networkError: \"The server cannot be reached, there is a problem with the network.\",\n    timeoutError: \"The server cannot be reached, please try again.\",\n    serverError: \"There was an error processing the password reset.\",\n    headerText: \"Enter a new password for<br />{email}\",\n    title: \"Change Password\",\n    weakPasswordError: \"Password is too weak.\"\n}\n```",
    "title": "Customize Translation of Lock Password Options",
    "description": "Learn how to customize the translation of Lock password options.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/internationalization-and-localization/lock-swift-internationalization",
    "markdown": "# Lock.swift Internationalization\n\nBy default, **Lock v2 for iOS** displays all text in English. If you wish to display text in another language, or you wish to alter the text values for your application, you may provide a `Lock.strings` file and define values to be used for the various text items that Lock might display.\n\nMore information about how to handle languages can be found in the official Apple documentation on [Internationalization and Localization](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/Introduction/Introduction.html#//apple_ref/doc/uid/10000171i-CH1-SW1)\n\n## Lock String Values\n\nFor a full list of the terms used by Lock, see the base [Lock.strings](https://raw.githubusercontent.com/auth0/Lock.swift/master/Lock/Base.lproj/Lock.strings) file in the Lock.swift repository.\n\n### Providing alternative English strings\n\nIf you want to change some or all of the existing terms, you can do this by downloading and adding the [Lock.strings](https://raw.githubusercontent.com/auth0/Lock.swift/master/Lock/Base.lproj/Lock.strings) file to your project.\n\nSelect the **Lock.strings** file and in the `File inspector` click on `Localize...`\n\n![Lock.swift: Localize](https://images.ctfassets.net/cdy7uua7fh8z/2dL3QXXrURBjNjyF5R0xYG/68cf0217f351bfb5e5a0bf45a7361b03/xcode_localize.png)\n\nThen select `English`:\n\n![Lock.swift: Localize English](https://images.ctfassets.net/cdy7uua7fh8z/2dffBsE133pnk0Y7Y0nxHU/8b82700bbd844d5df0864287b7a0acdf/xcode_localize_english.png)\n\nNow lets take a couple of terms in **Lock.strings** and update them with alternative text:\n\n`// Forgot password \"com.auth0.lock.database.button.forgot_password\" = \"Did you forget your password?\"; // tos & privacy \"com.auth0.lock.database.button.tos\" = \"Signing up is an indication of your agreement to our terms of\\n service and privacy policy\";`\n\n### Supporting other languages\n\nTo add another language you first of all need to add the new language under `Project/Info`\n\n![Lock.swift: Add language](https://images.ctfassets.net/cdy7uua7fh8z/3mHt6UmbEq7Xl05OZqtF70/20055f0037971f7b8c921d5902559b93/xcode_add_language.png)\n\nAdd the new language and ensure that **Lock.strings** is selected\n\n![Lock.swift: Add Language step 2](https://images.ctfassets.net/cdy7uua7fh8z/6E7BZaCVtkHcCQFhEcgSTq/3314eb8142c03266b25ab84fbefbb8f6/xcode_add_language_step_2.png)\n\nYou will notice under **Lock.strings** a new file has been created for your specified language, based upon the **Reference Language** selection.\n\nNow you are ready to translate to your desired language.\n\n### Notes\n\nSome terms use parameters and it's important to note their placement in your translation. In particular multiple parameter terms such as:\n\n`// No more than %@{count} identical characters in a row (such as, \\\"%@{identical sample}\\\" not allowed) \"com.auth0.lock.error.password.no_more_identical\" = \"No more than %1$d identical characters in a row (such as, \\\"%2$@\\\" not allowed)\";`",
    "title": "Lock.swift Internationalization",
    "description": "Internationalization support in Lock.Swift",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/internationalization-and-localization/lock-android-internationalization",
    "markdown": "# Lock.Android Internationalization\n\nBy default, **Lock.Android** displays all text in English. If you wish to display text in another language, you may provide a `strings.xml` file and define values to be used for the various text items that Lock might display.\n\nAndroid asks the device what locale was configured by the user and tries to fetch the list of localized texts for that language. For this to work, the developer needs to add each translation file into the app by using a special folder naming convention as per Android standards. More information can be found in the [Android developer docs](https://developer.android.com/training/basics/supporting-devices/languages).\n\nSome of the default values provided by Lock include:\n\n```\n<resources>\n  <string name=\"com_auth0_lock_social_error_authentication\">Error parsing Authentication data</string>\n  <string name=\"com_auth0_lock_social_error_title\">There was an error during authentication</string>\n  ...\n</resources>\n```\n\nBy providing your own `strings.xml` file, these values can be adjusted as such:\n\n```\n<resources>\n  <string name=\"com_auth0_lock_social_error_authentication\">There was an authentication error!</string>\n  <string name=\"com_auth0_lock_social_error_title\">Social login error!!</string>\n  ...\n</resources>\n```\n\n## Lock String Values\n\nFor a full list of the names used by Lock, see the [default strings.xml file](https://github.com/auth0/Lock.Android/blob/master/lib/src/main/res/values/strings.xml) in the Lock.Android repository.",
    "title": "Lock.Android Internationalization",
    "description": "Internationalization support in Lock.Android",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/nodes-and-components",
    "markdown": "# Nodes and components\n\nForms lets you add nodes and components, such as fields, blocks, and widgets for your users to interact with the form. You can then reference the data input, from components, in your forms and flows.\n\n## Form nodes\n\nThere are five types of form nodes: Start, Step, Flow, Router and Ending screen. These nodes have a very specific purpose for the structure of the form.\n\n![Dashboard >  Forms > Form Editor](https://images.ctfassets.net/cdy7uua7fh8z/5V4GsHxxC2cjxx1aODCxPd/309850c72bbce224e7a8d3f5af34114c/form-editor-preview.png)\n\n## Step node\n\nStep nodes are the visual representation of the form. They can contain any number of components, such as fields, blocks, and widgets where the user can fill in their data.\n\n![Dashboard > Foms > Step node](https://images.ctfassets.net/cdy7uua7fh8z/2tbkcXkVon0BawCvYgnvIz/e2ce566320af18a6b08702f04f763126/form-step-node.png)\n\n### Field components\n\nFields are UI components where users input their information in Forms.\n\n![Dashboard > Forms > Fields](https://images.ctfassets.net/cdy7uua7fh8z/6fuBdJcbDybzcVaiByUkoQ/2ad29c8dbbcc6ddf850f5efc004a75e0/forms-fields.png)\n\n#### Field settings\n\nFields have a number of default settings that you can configure to meet your requirements. \n\nThe default field settings are:\n\n| **Settings** | **Description** |\n| --- | --- |\n| ID  | The unique id |\n| Label | Display or hide a label |\n| Required | Input value is required |\n| Hint text | Display a hint text |\n| Placeholder text | Text visible to the user |\n| Default value | Default value visible to the user |\n| Transient | Enable or disable data mask |\n\n#### Field validation rules\n\n| **Settings** | **Description** |\n| --- | --- |\n| Min. length / Max. length | Require an input value length. |\n| Min. value / Max. value | Require a number value length. |\n\n#### Available fields in Forms\n\nThe available fields with their specific settings and data output types are:\n\n### Blocks components\n\nBlocks are UI components that add functionality to your forms but do not gather user information.\n\n![Dashboard > Forms > Components > Blocks](https://images.ctfassets.net/cdy7uua7fh8z/7IijftJnuwcevL4bdHiaKw/f0376ca75303bb58d0df87e6af75e347/forms-block.png)\n\n#### Available blocks in Forms\n\nThe available blocks are:\n\n### Widgets components\n\nWidgets are pre-built components, with third-party integrations, that add client-side and server-side logic to your forms.\n\n![Dashboard > Forms > Components > Widget](https://images.ctfassets.net/cdy7uua7fh8z/3J0IuWLP7utOPKSHc82IE9/a523afe0c240c63f714ef5fb102f8dab/forms-widget.png)\n\n#### Available widgets in Forms\n\nThe available widget is:\n\n## Router node\n\nRouter nodes let you add rules to create conditional logic jumps between nodes.\n\nBy default, a router node has a single pass-through rule named **Default Case** that connects to other nodes. You can add additional rules based on a set of conditions that a variable must meet to then connect to other nodes. To learn more, read [Router.](https://auth0.com/docs/customize/forms/routers)\n\n![Dashboard > Forms > Routers ](https://images.ctfassets.net/cdy7uua7fh8z/2IKI9sU9UPCVkMkHQ3G8lX/cb828f46a89f9a239419979b3e6c7d20/form-router-rules-example.png)\n\n## Flow node\n\nFlow nodes let you add and create custom logic and integration flows to your forms. To learn more, read [Flows.](https://auth0.com/docs/customize/forms/intro-to-flows)\n\n![Dashboard > Forms > Flow](https://images.ctfassets.net/cdy7uua7fh8z/4UGCrqzgyHTPryLoEuBwNt/e4a67be08a33b565ece89973028fa6ac/forms-flow-node.png)![Dashboard > Forms > Flow > Editor](https://images.ctfassets.net/cdy7uua7fh8z/4L1ixTcIVCmslts6M4wn7u/dc07046cfd41494f40285de5c102ff52/flow-editor-example.png)\n\n## Start node\n\nStart nodes are not visible to the user. It is where you can configure hidden field variables, such as user attributes when [rendering a form with an Action.](https://auth0.com/docs/customize/forms/render)\n\n![Dashboard > Forms > Start node](https://images.ctfassets.net/cdy7uua7fh8z/2GqFDPep4akUxucmMJyb5/2b50f07f50ee29501341dc54f686de07/form-start-node.png)\n\n## Ending screen node\n\nEvery form has an Ending screen node. By default this node resumes the authentication flow and this is where you can configure an After submission flow.\n\n![Dashboard > Forms > Ending screen node](https://images.ctfassets.net/cdy7uua7fh8z/0icbjPpDKsnmtInimJ548/ead65b5e89de57a3079127324acd314d/ending-screen-node.png)",
    "title": "Nodes and components",
    "description": "Learn about Form nodes and available components.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/intro-to-flows",
    "markdown": "# Introduction to Flows\n\nFlows are the visual representation of the server-side logic that occurs when a form is processed. Flows consist of a series of actions that you can add and configure as necessary. For every form created, you can create a new flow or share a flow among different forms.\n\n![Dashboard > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/6u6Huh5CbH3GEQJv3AH7cx/e49ea613b2c46a43c83c89ffecddbafe/Flows.png)\n\n### Add Flow nodes\n\nYou can add Flow nodes to add integrations and server-side logic to your form. \n\nTo add a Flow node to a form:\n\n1.  Go to the Form editor.\n    \n2.  On the bottom of the form editor, click on **Flow**.\n    \n3.  Link the new Flow node to the appropriate nodes. \n    \n4.  Select **Click to add a flow.**\n    \n5.  Select **Create a new flow**, name it, and select **Create**.\n    \n6.  Select **Publish** to save the form.\n    \n\n### Configure a Flow\n\nConfigure the Flow node to add integrations.\n\n1.  Select the **Flow node**.\n    \n2.  Select **Edit Flow** to open and configure the flow in a new tab.\n    \n3.  To add actions, click the **\\+** icon to select from a list of actions.\n    \n\n## Flow scenarios\n\nFlow scenarios let you add server-side logic to your Form, such as between a multi-step form, before form submission and after form submission.\n\nThese are the Flow scenarios:\n\n### Between a multi-step form\n\nThese flows run between form steps when the user clicks on a continue button.\n\n![Dashboard > Forms > Flows > Multi-step form flow scenario](https://images.ctfassets.net/cdy7uua7fh8z/6S1BKHFHZB2OykxKCjuaGG/bfd95ba0908c7f81bd6f125e5523007f/multi-step-flow.png)\n\n### Before form submission\n\nThese flows run after a user submits a form, but before the user receives a failure or success response.\n\n![Dashboard >  Forms > Flows > Before form submission flow scenario](https://images.ctfassets.net/cdy7uua7fh8z/3M37rXYrNiOvftVDBv6Xc9/68364133226249a8a9132a7b0bf9fb55/before-form-submission-flow.png)\n\n### After form submission\n\nThese flows run after the user successfully submits a form.\n\n![Dashboard > Forms > Flows > After form submission flow scenario](https://images.ctfassets.net/cdy7uua7fh8z/7dwh7lazWuGG4aItPSsCdM/bdf4629f3d0abcf7e4c5ca80402c353a/after-form-submissio-flow.png)",
    "title": "Introduction to Flows",
    "description": "Describes how to use Flows with Forms.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/render",
    "markdown": "# Render Forms using Actions\n\nOnce you create a form, you can render it with [Actions](https://auth0.com/docs/customize/actions) using the api.prompt.render() method:\n\n```\n// Example using the post-login trigger\n\nexports.onExecutePostLogin = async (event, api) => {\n  api.prompt.render(':form_id');\n}\n\nexports.onContinuePostLogin = async (event, api) => {\n  // Add your logic after completing the form\n}\n```\n\nReplace form\\_id with the ID of the Form. You can locate the ID in the URL of the Form, for example:  `ap_pUMG...` or select it from the Form editor **Embed** tab. In the [Actions Code editor](https://auth0.com/docs/customize/actions/write-your-first-action#create-an-action), you can define the business logic to decide when and how to render the Form.\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n\n  // Only render the form if user is missing company_name metadata\n  if (!event.user.user_metadata.company_name) {\n    api.prompt.render(':form_id');\n  }\n}\n\nexports.onContinuePostLogin = async (event, api) => {\n  // Add your logic after completing the form\n}\n```\n\nTo learn more about the event object and its contextual information, read [Action Triggers: post-login - Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object).\n\n## Populate field and hidden field values\n\nThe `api.prompt.render()` method lets you add a second argument to populate fields and hidden fields values using the fields object.\n\nIn the example below, the field with the ID `first_name` will be populated with the value `Jane`. \n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  api.prompt.render(':form_id', {\n    fields: {\n      first_name: 'Jane',\n    }\n  });\n}\n\nexports.onContinuePostLogin = async (event, api) => {\n  // Add your logic after completing the form\n}\n```\n\nThe `api.prompt.render()` method passes the information to the form on the client-side. To ensure integrity of the data,  sign it with a [JSON Web Token (JWT)](https://auth0.com/docs/secure/tokens/json-web-tokens).\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  const context_token = api.redirect.encodeToken({\n    secret: event.secrets.MY_SECRET_VALUE, // Use your own secret key with a long random value\n    expiresInSeconds: 60,\n    payload: {\n      user_id: event.user.user_id\n    }\n  });\n\n  api.prompt.render(':form_id', {\n    fields: {\n      context_token,\n    }\n  });\n}\n\nexports.onContinuePostLogin = async (event, api) => {\n  // Add your logic after completing the form\n}\n```\n\n## Restrictions and limitations\n\n*   You cannot [redirect](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions) a user and render a form in the same Action. If you need to use both, consider using different Actions.\n    \n*   You can only render one form per Action. If you need to render more than one form, you need to render the forms in different Actions.\n    \n*   The same form can not be rendered more than once across the same trigger. For example, if you have a `post-login` trigger with two Actions, you can not render the same form in both Actions, you need to create different Forms for each Action.\n    \n*   The `fields` property size limit is 24 KB.\n    \n*   The `api.prompt.render()` method is available in the [post-login Action triggers](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/api-object).",
    "title": "Render Forms using Actions",
    "description": "Learn how you can render Forms using Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/routers",
    "markdown": "# Routers\n\nWith Router nodes, you can add rules to Forms to create conditional logic jumps that redirect users between nodes. For example, a rule condition can be defined for a specific user\\_metadata attribute to route  a user to a specific step node or flow node.\n\n*   The router node automatically adds a Default case rule. If no rule conditions are met, the journey continues to the linked node.  \n    \n*   Rules are evaluated in the order placed in the router. When a rule condition is met, the journey continues to the linked node, and no other rule conditions are evaluated.\n    \n*   You can add up to 10 rule conditions to the router node.\n    \n\n![Dashboard > Forms > Routers ](https://images.ctfassets.net/cdy7uua7fh8z/2IKI9sU9UPCVkMkHQ3G8lX/cb828f46a89f9a239419979b3e6c7d20/form-router-rules-example.png)\n\n## Add a router rule\n\nTo add a rule condition, follow these steps:\n\n1.  From the Form editor, select a Router node to open its settings.\n    \n2.  Select **\\+ New Rule**.\n    \n3.  Expand the newly created rule.\n    \n4.  To label the rule, add an **Alias**.\n    \n5.  Add a variable using the **+** icon.\n    \n6.  Select the rule operator for the variable.\n    \n7.  Add the value or variable the rule must meet.\n    \n8.  Link the new rule to the corresponding step or flow node.\n    \n9.  Select **Publish** to save.\n    \n\n## Available rule operators\n\nThe rule operators are:\n\n*   `is greater than`\n    \n*   `is greater or equal than`\n    \n*   `is less than`\n    \n*   `is less than or equal`\n    \n*   `is equal to`\n    \n*   `is different to`\n    \n*   `includes`\n    \n*   `does not include`\n    \n*   `starts with`\n    \n*   `ends with`\n    \n*   `exists`\n    \n*   `does not exist`\n    \n*   `is null`\n    \n*   `is not null`\n    \n*   `has not value`\n    \n*   `is true`\n    \n*   `is false`",
    "title": "Routers",
    "description": "Describes how to use Router nodes with Forms.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/variables",
    "markdown": "# Variables\n\nVariables allow you to access data contained in Forms and Flows to create custom business logic and automations.\n\nSome basic considerations to using variables are:\n\n*   Variables are surrounded by curly brackets `{{ variable }}`.\n    \n*   If a variable doesn't exist or can't be resolved, it has the same effect as an `undefined` variable.\n    \n*   You can use nullish operators to handle `null` or `undefined` variables, for example:`{{fields.foo ?? fields.bar}}`.\n    \n\n## Available variables\n\nYou can use different types of variables to reference and transform data you gather from customers with Forms and Flows.\n\n| **Variable** | **Syntax** | **Where** | **Description** |\n| --- | --- | --- | --- |\n| Context | `{{context.*}}` | Forms / Flows | Reference context data of the current transaction |\n| Form fields | `{{fields.*}}` | Forms / Flows | Reference data from your form fields and hidden fields |\n| Shared variables | `{{vars.*}}` | Forms / Flows | Reference data stored as shared variables |\n| Flow actions output | `{{actions.*}}` | Flows | Reference data from the output response of previous flow actions |\n| Helper functions | `{{functions.*}}` | Flows | Helper functions to transform data |\n\n### Context variables\n\nForms and flows automatically inherit context variables from the current transaction, this includes information about the [user](https://auth0.com/docs/api/management/v2/users/get-users-by-id), application and the tenant name.\n\nFor example:  `{{context.user.user_id}}` references the `user_id` of the `user` object.\n\n![Dashboard > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/3B8DRhXO2wGqeqSFb8KbQv/0a61cdbbb7f1d290950a2ddb9857aac3/Contex-variable.png)\n\n### Form fields variables\n\nField variables contain data collected from the user from input fields in the form and data from hidden fields. The data of each field varies depending on the field type. For example: `{{fields.first_name}}` references the input value of a field with the ID `first_name`.\n\n![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/4D42A6ww4XvFxweoxh04Rd/016c2ed9d25bc2267ed3ed31bf8b2bf6/form-fields-variable.png)\n\n### Flow output actions variables\n\nWhen a flow action is executed, it generates an output object response that can be referenced in subsequent actions. For example: `{{actions.generate_otp.code}}` references the output code of the action with ID `generate_otp`.\n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/6jYtEdYqSGXm3DDv0mxQ0o/2d48012629745e07137bf6ba42f4d829/flow-output-variable.png)\n\n### Shared variables\n\nYou can store variables to be shared with subsequent flows or even with form components in the same transaction. Shared variables are ephemeral and are associated with a specific form journey. Their values cannot be accessed outside of that journey. For example: `{{vars.external_id}}` references the value of a shared variable with ID `external_id`.\n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/4571ExRTHL0KZKJKX9pNwj/abb631b8608a6356b0e5b3784cf8b02f/flow-shared-variable.png)\n\n### Helper functions\n\nHelper functions let you transform data and perform simple operations. For example: `{{functions.toString(fields.privacy_policies)}}` transform the value of the field with ID `privacy_policies` using the `toString()` function.\n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/1gyox33XJEtdkT43NppblT/0e878cc5ae2bde11b4207e105bbac6c5/flow-helper-functions.png)\n\nThe available helper functions are:\n\n| Function | Description | Example |\n| --- | --- | --- |\n| random(min, max, \\[boolean\\]) | Returns a random number between the inclusive min and max | {{ functions.random(0, 6) }} // 4<br><br>{{ functions.random(0, 6, true) }} // 3.8523497... |\n| toNumber(value) | Converts value to a number | {{ functions.toNumber('123') }} // 123 |\n| toString(value) | Converts value to a string | {{ functions.toString(123) }} // '123' |\n| toBoolean(value) | Converts value to a boolean value | {{ functions.toBoolean(1) }} // true<br><br>{{ functions.toBoolean(0) }} // false |\n| toArray(value) | Converts value to an array | {{ functions.toArray('abc') }} // \\['abc'\\] |\n| length(value) | Returns the length of the parameter value | {{ functions.length('auth0') }} // 5 |\n| toTimestamp() | Returns the current UNIX timestamp | {{ functions.toTimestamp() }} // 1628761483 |\n| toTimestamp(date) | Returns the provided date in UNIX time | {{ functions.toTimestamp('2021-04-30T10:02:50.876Z') }} // 1619776970 |\n| mask(value) | Masks a value to avoid be exposed in Executions | {{ functions.mask('my\\_awesome\\_secret') }} // ███ |\n\n## Variables best practices\n\n### Use meaningful IDs\n\nWhen you add a Form field or a Flow action, the ID is automatically generated. \n\nUpdate the ID to a more descriptive value so you can identify the information it contains. For example, if you create a Form field that stores the user’s first name, update the ID to `first_name`.\n\n### Be mindful when updating existing IDs\n\nIf a variable is already in use and you need to modify the ID, identify where you have referenced it and update the ID accordingly to avoid undefined or empty values.\n\n### Check Flow executions\n\nIf you see an unexpected variable value, use the [**Executions**](https://auth0.com/docs/customize/forms/flow-execution-and-debugger) view to troubleshoot the variable.\n\nThe autocomplete menu helps you locate and properly reference existing variables.\n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/3SKnDuaMzSImxZtDDAoZaz/9ea800fad29ef71d1ded3c72b87660a4/Autocomplete-flows.png)![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/2kjRKozVgrd2a7UJXOANaN/ee5452d7210cd2f13b0e97763f11c82a/Autocomplete-forms.png)",
    "title": "Variables",
    "description": "Learn how to use variables in Forms for Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/vault",
    "markdown": "# Vault\n\nThe vault lets you securely store secrets or common settings (for example: API keys, access tokens, refresh tokens) to authenticate requests with external services or integrations as vault connections.\n\n## Create and modify vault connections\n\nCreate and modify vault connections from the vault page or from the flow editor when an action requires credentials.\n\n### Create vault connections from the vault page\n\nAdd a vault connection from the vault page by following these steps:\n\n1.  Open the Form editor by selecting **Auth0 Dashboard > Actions > Forms.**\n    \n2.  From the top left corner, **{tenantName} >** **Vault** to open the vault page.\n    \n    ![Dashboard > Forms > Vault](https://images.ctfassets.net/cdy7uua7fh8z/1sPNPKO6nuEDCuiYGRWSur/d85dc616170eaf2d7d5f321750863ccf/vault-connections-example.png)\n3.  Select **Add Vault Connection**.\n    \n4.  Select the desired action and **Continue**.\n    \n5.  Add a vault **Connection name** and select **Continue**.\n    \n6.  Enter the credentials. If you don't have the specific credentials, you can select **Create an empty connection** and add the credentials later. Empty connections have an orange icon indicating missing credentials.\n    \n7.  select **Add Vault Connection**.\n    \n\n### Create vault connections from the flow editor\n\nAdd a vault connection from a flow action, for example: Twilio by following these steps:\n\n1.  Open the Flow editor by selecting **Auth0 Dashboard > Actions > Forms > Flows**\n    \n2.  Select a flow and add a **Send SMS with Twilio** action.\n    \n3.  From the **Vault connection** setting of the action, select the **+** Icon.\n    \n    ![Dashboard > Forms > Vault ](https://images.ctfassets.net/cdy7uua7fh8z/1AsaznhRKxm5LZxPlcbfUw/10e5a8af700aab909f5b03fcd266da7e/twilio-vault-connection.png)\n4.  Add a vault **Connection name** and select **Continue**.\n    \n5.  Enter the credentials. If you don't have the specific credentials, you can select **Create an empty connection** and add the credentials later. Empty connections have an orange icon indicating missing credentials.\n    \n    ![Dashboard > Forms > Vault > Twilio connection settings](https://images.ctfassets.net/cdy7uua7fh8z/yobXanutPRCO3FWek8cOk/bc29e39fb8593cff35e2738234bfe6fe/twilio-vault-settings.png)\n6.  Select **Add Vault Connection.**",
    "title": "Vault",
    "description": "Describes how to use the Vault of Forms for Actions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/custom-messages-and-translation",
    "markdown": "# Custom Messages and Translation\n\nYou can  customize Form messages to provide your users with a unique Form experience. In addition, you can translate form components, errors, and other custom messages into other languages for a localized experience.\n\n## Messages\n\nThrough the Form editor, you can customize error messages and create other custom messages for your users.\n\n### Error messages\n\nYou can create custom error messages to replace the default error messages of your forms.\n\nTo create custom error messages, follow the steps below:\n\n1.  On the Auth0 Dashboard, navigate to **Actions > Forms**. \n    \n2.  Select **Messages** from the left menu of the Form editor. \n    \n3.  Select the **Errors** tab**.**\n    \n4.  Enter your custom error messages in the appropriate fields to replace the default messages.\n    \n5.  Select **Publish** to save. \n    \n\n### Custom messages\n\nYou can create custom messages to add to the default messages for an even further personalized Form experience. For example, you can add a custom message that displays to users when an action returns an error in a flow.\n\n#### Create custom messages\n\nTo create custom messages, follow the steps below:\n\n1.  From the left menu of the Form editor, select **Messages**.\n    \n2.  Select the **Custom** tab.Then, select **Add New Item**.\n    \n3.  To the left, add a unique key for your message**.** Then**, enter** your custom message in the field to the right. \n    \n4.  Select **Publish** to save. \n    \n\n![Dashboard > Forms > Custom messages and translations > Custom message](https://images.ctfassets.net/cdy7uua7fh8z/1upBOwWqntPPQF8fqGeN6T/a65674d05c823c5fbe703265558693e4/custom-message.png)\n\n#### Add custom messages to your forms\n\nTo reference your custom messages in your forms, use the function `{{t('custom_unique_key')}}` with the custom message unique key.\n\n![Dashboard > Forms > Custom messages and translations > Translation function](https://images.ctfassets.net/cdy7uua7fh8z/45p4V7w5gw7DQZyJ08ECSH/d040720d9aa19f6e97e21defcd428e55/translation-function.png)\n\n## Translations\n\nYou can use the Translations feature to create an international user experience of your forms. This feature leverages a user’s browser language to determine the appropriate language for your forms. By default, translations for some standard error messages are provided in Spanish. However, to promote a quality user experience, you can define the translations for your form components, errors, and custom messages in the language of your choice. \n\nTo enable translations, follow the steps below:\n\n1.  On the Auth0 Dashboard, navigate to **Actions > Forms**. \n    \n2.  Select **Translations** from the left menu of the Form editor. \n    \n3.  Check **Enable additional languages**.\n    \n4.  Select the desired languages from the **Additional languages** dropdown menu.\n    \n\n### Translate messages\n\nWith the language editor, you can define translations for your form components, errors, and other custom messages.\n\nTo define your translations, follow the steps below:\n\n1.  Select the desired language from the Select language dropdown menu.\n    \n2.  Select one of the following tabs to begin defining your translations: \n    \n    1.  **Components**\n        \n    2.  **Errors**\n        \n    3.  **Custom**\n        \n3.  For each available field, provide your translations as needed.\n    \n4.  Select **Publish** to save. \n    \n\n![Dashboard > Forms > Custom messages and translations > Translation message](https://images.ctfassets.net/cdy7uua7fh8z/5HY9FA6HZct2XNv5K4pCHY/c5977a7825e15285c3d77c2ca1e299a8/translation-message.png)",
    "title": "Custom Messages and Translation",
    "description": "Describes how to create custom messages and translations with Forms.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/configure-update-policy-form",
    "markdown": "# Use Cases: Configure an update policy form using Forms\n\nForms for Actions allows you to create custom privacy policies flows and store the consent under the `app_metadata` object.\n\n![Dashboard > Actions > Forms > Privacy policy use case](https://images.ctfassets.net/cdy7uua7fh8z/6i68dMvHDTijfRmSgN1x8Q/ad900e7d4c0fb34645921435472b8684/privavy-policy-form.png)\n\nThe sections below outline how you can create an Update Policy form using nodes and flows, along with steps for adding your form to a [Post Login](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) Action.\n\n## Create a form from scratch\n\nFollow these steps to create a form to gather information:\n\n1.  Open the Form editor by selecting **Auth0 Dashboard > Actions > Forms.**\n    \n2.  Select **Create Form** \\> **Start from scratch**.\n    \n\nBy default, a new form contains a Start node, a Step node, and an Ending screen node.\n\n![Dashboard > Forms > Use Cases > Form](https://images.ctfassets.net/cdy7uua7fh8z/2TZ9jSjgEcARFpULI6hz4R/a4319a1bd482f2ee5cc23100fdb2f42c/New-form-Forms-for-action-use-case.png)\n\n### Configure the Step node\n\nThe Step node is the graphical interface visible to users. Add [Fields](https://auth0.com/docs/customize/forms/nodes-and-components) to the Step node to collect the new agreement acceptance value by following these steps:\n\n1.  Drag a **Rich text** field from the **Components menu** into the **Step** node.\n    \n    *   **Rich text**: Enter a description of your privacy policies updates.\n        \n    *   Select **Save**.\n        \n2.  Drag a **Legal** field into the **Step** node.\n    \n    *   **ID**: Enter `privacy_policies`.\n        \n    *   **Required**: Enable the checkbox.\n        \n    *   **Legal**: Enter `I agree to the Privacy Policy`.\n        \n    *   Select **Save**.\n        \n3.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Use case privacy policy step node](https://images.ctfassets.net/cdy7uua7fh8z/59zFFjQjAnjogkc2QGIqqJ/0ad66b1b636544122aa4e65968b76c2c/privacy-policy-step-node.png)\n\n### Configure the Flow node\n\nAdd a **Flow** node after the **Step** node to update the `app_metadata` and resume the authentication flow by following these steps:\n\n1.  Select **Flow** from the bottom of the Form editor.\n    \n2.  Remove the existing link between the **Step** and **Ending Screen** nodes.\n    \n3.  Select the new **Flow** > **Click to add a flow** > **Create a new flow.**\n    \n    *   Enter `Update app_metadata` in the **Name** field.\n        \n    *   Select **Create**.\n        \n    *   Select **Save**.\n        \n4.  Link the **Flow** node to the **Step** and **Ending Screen** nodes as pictured below.\n    \n5.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/6YIkzm7SrpM9LW76AXuRzh/353c518fe82bbaa440836da1d83596d6/link-policies.png)\n\nAdd an Auth0 Update user action to the flow by following these steps:\n\n1.  Select the **Flow** **Update app\\_metadata** \\> **Edit flow** to open the Flow editor in a new tab.\n    \n2.  Below the Start Action, select the **+** icon to add an **Update user** action. Complete the fields below, then select **Save** to continue.\n    \n    *   **Connection**: Select from the dropdown the Vault connection to your M2M application.\n        \n    *   **User ID**: Enter `{{context.user.user_id}}`.\n        \n    *   **Body**: Copy and paste the following code to update the app\\_metadata with the privacy\\_policies and privacy\\_policies\\_timestamp properties.\n        \n        ```\n        {\n          \"app_metadata\": {\n            \"privacy_policies\": true,\n            \"privacy_policies_timestamp\": \"{{ functions.toTimestamp() }}\"\n          }\n        }\n        ```\n        \n    *   Select **Save**.\n        \n3.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > User case privacy policy code](https://images.ctfassets.net/cdy7uua7fh8z/CvMNIwWrOUwaFW4X3G28p/1fb70ae57a20749d9ffaaba8dc0b7e26/update-user-privacy.png)\n\n## Retrieve the form render code\n\nRetrieve your form render code to visually render the form with a custom Post Login Action by following these steps:\n\n*   From the Form editor, select **<> Render**.\n    \n*   Select **Copy**.\n    \n\n![Dashboard > Actions > Forms > Form > Embed](https://images.ctfassets.net/cdy7uua7fh8z/2EIUzc539sq9lwoTKbjoJv/496a864c0fc44a782c9cadca119dbfb0/embed.png)\n\n## Create a Post Login Action\n\nCreate a post-login Action to render your form by following these steps:\n\n1.  Navigate to **Auth0 Dashboard > Actions > Flows > Login.**\n    \n2.  Select the **+** icon and Select **Build from scratch**:\n    \n    *   **Name**: Enter `Render Update Policy Form`.\n        \n    *   **Trigger**: Select `Login / Post Login`.\n        \n    *   **Runtime**: Select the recommended version.\n        \n3.  Select **Create**.\n    \n\nTo configure the post-login Action:\n\n1.  Delete the existing code from the Code editor.\n    \n2.  Paste the form render code into the Code editor.\n    \n3.  Edit the code to define the conditional logic that will render the form.\n    \n    ```\n    /**\n    * @param {Event} event - Details about the user and the context in which they are logging in.\n    * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n    */\n    exports.onExecutePostLogin = async (event, api) => {\n      const FORM_ID = 'REPLACE_WITH_YOUR_FORM_ID';\n    \n      if (event.user.app_metadata.privacy_policies !== true) {\n        api.prompt.render(FORM_ID);\n      }\n    }\n    \n    exports.onContinuePostLogin = async (event, api) => { }\n    ```\n    \n4.  Select **Deploy.**\n    \n5.  Drag and Drop the **Render Update Policy Form** Action to the **Login** flow.\n    \n    ![Dashboard > Forms > Use Case > Render update policy form login action](https://images.ctfassets.net/cdy7uua7fh8z/5TOwDgevZsBqd7yZynUYWU/41ca909dc3007aed4f40ff794a05efa5/postlogin.png)\n6.  Select **Apply.**\n    \n\n### Test implementation\n\nTest the implementation by following these steps:\n\n1.  Log in with an existing user whose app`_metadata` attribute `privacy_policies` does not have a value.\n    \n2.  The post-login Action in the Login flow will render the form and prompt for acceptance.\n    \n3.  Select **Auth0 Dashboard > User Management > Users,** locate the user and verify that the `app_metadata` attribute `privacy_policies` contains a `true` value and a timestamp.",
    "title": "Use Cases: Configure an update policy form using Forms",
    "description": "Configure an update policy form using Forms for Actions",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/flow-execution-and-debugger",
    "markdown": "# Flow Execution and Debugger\n\nEach time a flow executes, Auth0 stores an entry that you can use to debug the execution. This is useful to understand why a flow execution error has occurred. For example: a flow can fail due to missing properties, typos, incorrect API keys, etc.\n\n## Review flow executions\n\nTo review an execution entry for a flow, follow the steps below:\n\n1.  Navigate to **Auth0 Dashboard > Actions > Forms**, then select **Flows**.\n    \n2.  Select a flow from the list. \n    \n3.  Select **Executions**.\n    \n\n![Dashboard > Actions > Forms > Flows > Execution](https://images.ctfassets.net/cdy7uua7fh8z/448jfjHtgCxfIeDOakuHyd/fba64deda0cf920f399de2190e94bdc9/Flows-execution.png)\n\nEvery execution entry has four properties:\n\n*   **Execution date**: The date of the flow execution.\n    \n*   **Execution ID**: The unique ID of the flow execution.\n    \n*   **Status**: The current stage of the flow execution. There are four possible execution statuses:\n    \n    *   **Running**: The execution is currently in progress.  \n        \n    *   **Failed**: The execution failed due to an internal error, such as missing required settings in a flow action.\n        \n    *   **Completed**: The execution finished without internal errors.\n        \n*   **View Details**: Opens the debug window of the execution.\n    \n\n![Dashboard > Actions >  Forms > Flows > Executions](https://images.ctfassets.net/cdy7uua7fh8z/1VqWEaVZg5lrXatXe9dbFB/dbcf7edca5aabdfc544f04cb18be4149/Flow-execution-details.png)\n\n## Debug flow executions\n\nTo help debug or troubleshoot a flow, you can review the flow’s input, output, and error data by accessing the **View Details** of the execution.\n\n![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/5aeniTfHXplDyZfwCKBcgK/a2098a476edde76da10a527b0a606e95/Flow-error.png)\n\nTo debug an error that interrupts the flow execution, follow these steps:\n\n1.  Navigate to **Auth0 Dashboard > Actions > Forms**\n    \n2.  Locate the flow linked to the step node.\n    \n    ![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/4LjULYyo0nhtNowm7J5okz/27ea3f8386bb5015d447c48facf6b90f/flow-error-linked.png)\n3.  Select **Edit Flow.**\n    \n4.  Select **Executions**.\n    \n5.  Select **View Details** of the Failed execution.\n    \n\nIn the example below, the `Update user` **Input** view shows a null value for the  `user_id` property.\n\n![Dashboard > Actions > Forms > Flow > Execution](https://images.ctfassets.net/cdy7uua7fh8z/6QNYKDqG9AIOEzQkP6Fnnr/db885e146179a0490eddd5ad6cb518dc/Flow-execution-failed.png)\n\nThe **Error** view indicates that the action’s schema validation failed due to a missing the required `user_id`. The flow returns an internal error that interrupts the flow execution.\n\n![Dashboard > Actions > Forms > Flow > Execution > Error](https://images.ctfassets.net/cdy7uua7fh8z/1kaKihtJtv8VvNAyTkW4cC/6b34bcecc8642d7d97aaf2c8dec51ebc/flow-execution-error-view.png)\n\nA review of the **Update user** action shows a syntax error in the `User ID` parameter, the correct syntax is `{{context.user.user_id}}`. Once the syntax is corrected, test the flow to confirm. To learn more about variable syntaxes, read [Variables](https://auth0.com/docs/customize/forms/variables).\n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/4YLRVNbzK5LjJEQjFXIJXM/5003833784ce5b0d9f63730ed46ff047/Action-typo-error.png)",
    "title": "Flow Execution and Debugger",
    "description": "Describes how to review Flow executions and debug executions of Forms.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/configure-progressive-profile-form",
    "markdown": "# Use Cases: Configure a progressive profile form using Forms\n\nForms for Actions allows you to create progressive profiling flows to decide when to prompt users to collect missing information, such as company name and job title, and store them as `user_metadata` attributes.\n\n![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/xUx9YmnHvnAqL19JvNtNP/60dae88f893d4ebe8e3523421e960596/Progressive-profle-overview.png)\n\nThe sections below outline how you can create a progressive profile form using nodes and flows, along with steps for adding your form to a [Post Login Action](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow).\n\n## Create a form from scratch\n\nFollow these steps to create a form to gather information:\n\n1.  Open the Form editor by selecting **Auth0 Dashboard > Actions > Forms.**\n    \n2.  Select **Create Form** \\> **Start from scratch**.\n    \n\nBy default, a new form contains a Start node, a Step node, and an Ending screen node.\n\n![Dashboard > Forms > Use Cases > Form](https://images.ctfassets.net/cdy7uua7fh8z/2TZ9jSjgEcARFpULI6hz4R/a4319a1bd482f2ee5cc23100fdb2f42c/New-form-Forms-for-action-use-case.png)\n\n### Configure the Step node\n\nThe Step node is the graphical interface visible to users. Add [Fields](https://auth0.com/docs/customize/forms/nodes-and-components) to the Step node to collect the user's company name and job title values by following these steps:\n\n1.  Drag a **Rich text** field from the **Components menu** into the **Step** node.\n    \n    *   **Rich text**: Enter a custom message.\n        \n        *   **Example**: `Complete your profile! We need you to complete your profile to personalize your experience.`\n            \n    *   Select **Save**.\n        \n2.  Drag a **Text** field into the **Step** node.\n    \n    *   **ID**: Enter `company_name`.\n        \n    *   **Label**: Enable the checkbox.\n        \n    *   **Label**: Enter `Company name`.\n        \n    *   **Required**: Enable the checkbox.\n        \n    *   Select **Save**.\n        \n3.  Drag a **Text** field into the **Step** node.\n    \n    1.  **ID**: Enter `job_title`.\n        \n    2.  **Label**: Enter `Job title`.\n        \n    3.  **Label**: Enable the checkbox.\n        \n    4.  **Required**: Enable the checkbox.\n        \n    5.  Select **Save**.\n        \n4.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Form > Step node](https://images.ctfassets.net/cdy7uua7fh8z/6H1lRzwKyYioQyQJ9MtIoM/aa248e92fc028a68a5b92ff361a11644/progressive-profile-step.png)\n\n### Configure the flow node\n\nAdd a **Flow** node after the **Step** node to update the `user_metadata` and resume the authentication flow by following these steps:\n\n1.  Select **Flow** from the bottom of the Form editor.\n    \n2.  Remove the existing link between the **Step** and **Ending Screen** nodes.\n    \n3.  Select the new **Flow** > **Click to add a flow** > **Create a new flow.**\n    \n    *   Enter `Update user_metadata` in the **Name** field.\n        \n    *   Select **Create**.\n        \n    *   Select **Save**.\n        \n4.  Link the **Flow** node to the **Step** and **Ending Screen** nodes as pictured below.\n    \n5.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Form](https://images.ctfassets.net/cdy7uua7fh8z/5C91DaWn4LGtJT9BF87ssu/095171d0c452a287c44bfde12fd6d13f/link-nodes.png)\n\nAdd an Auth0 Update user action to the flow by following these steps:\n\n1.  Select the **Update user\\_metadata** flow, then select the **Edit Flow** to open the Flow editor in a new tab.\n    \n2.  Below the **Start** action, select the **+** icon to add an **Update user** action. Complete the fields below, then select **Save** to continue.\n    \n    *   **Connection**: Select from the dropdown the Vault connection to your M2M application.\n        \n    *   **User ID**: Enter `{{context.user.user_id}}`.\n        \n    *   **Body**: Copy and paste the following code to update the user\\_metadata with `job_title` and `company_name` properties.\n        \n        ```\n        {\n          \"user_metadata\": {\n            \"job_title\": \"{{fields.job_title}}\",\n            \"company_name\": \"{{fields.company_name}}\"\n          }\n        }\n        ```\n        \n    *   Select **Save**.\n        \n3.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Flows](https://images.ctfassets.net/cdy7uua7fh8z/65Jx4W5oIZJyyvA8z4HqIx/0661b1a8ca6361c54fc4fef07ba59f0b/update-user.png)\n\n### Retrieve the form render code\n\nRetrieve the form render code to visually render the form with a custom Post Login Action by following these steps:\n\n*   From the Form editor, select **<> Render**.\n    \n*   Select **Copy**.\n    \n\n![Dashboard > Actions > Forms > Form > Embed](https://images.ctfassets.net/cdy7uua7fh8z/2EIUzc539sq9lwoTKbjoJv/496a864c0fc44a782c9cadca119dbfb0/embed.png)\n\n## Create a Post Login Action\n\nCreate a post-login Action to render your form by following these steps:\n\n1.  Navigate to **Auth0 Dashboard > Actions > Flows > Login.**\n    \n2.  Select the **+** icon and select **Build from scratch**:\n    \n    *   **Name**: Enter `Render Progressive Profile Form`.\n        \n    *   **Trigger**: Select `Login / Post Login`.\n        \n    *   **Runtime**: Select the recommended version.\n        \n3.  Select **Create**.\n    \n\nTo configure the post-login Action:\n\n1.  Delete the existing code from the Code editor.\n    \n2.  Paste the form embed code into the Code editor.\n    \n3.  Edit the code to define the conditional logic that will render the form.\n    \n    ```\n    /**\n    * @param {Event} event - Details about the user and the context in which they are logging in.\n    * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n    */\n    exports.onExecutePostLogin = async (event, api) => {\n      const FORM_ID = 'REPLACE_WITH_YOUR_FORM_ID';\n    \n      if (\n        event.stats.logins_count > 2 &&\n        !event.user.user_metadata.company_name &&\n        !event.user.user_metadata.job_title\n      ) {\n        api.prompt.render(FORM_ID);\n      }\n    }\n    \n    exports.onContinuePostLogin = async (event, api) => { }\n    ```\n    \n4.  Select **Deploy.**\n    \n5.  Drag and Drop the **Render Progressive Profile Form** Action to the **Login** flow.\n    \n    ![Dashboard > Forms > Use Cases Progressive Profile Login Action](https://images.ctfassets.net/cdy7uua7fh8z/1QjjZdpTqTxx012UDN4xk9/99fba5ef4068a5688f1762eea7f42976/renderprogessiveprofile.png)\n6.  Select **Apply**.\n    \n\n### Test implementation\n\nTest the implementation by following these steps:\n\n1.  Log in with an existing user whose login count is greater than 2 and their `user_metadata` attributes `company_name` and `job_title` have no values.\n    \n2.  The post-login action in the Login flow will render the form and prompt for the information.\n    \n3.  Select **Auth0 Dashboard > User Management > Users,** locate the user and verify that the `user_metadata` attributes `company_name` and `job_title` contain information.",
    "title": "Use Cases: Configure a progressive profile form using Forms",
    "description": "Learn how to configure a progressive profile form using Forms for Actions",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension",
    "markdown": "# Authorization Extension\n\nThe Authorization Extension provides support for user authorization via Groups, Roles, and Permissions. You can define the expected behavior during the login process, and your configuration settings will be captured in a rule that's executed during runtime. To learn more, read [Auth0 Rules](https://auth0.com/docs/customize/rules).\n\nWith the Authorization Extension, you can store authorization data like groups, roles, or permissions in the outgoing token issued by Auth0. Your application can then consume this information by inspecting the token and take appropriate actions based on the user's current authorization context.\n\nWith the Authorization Extension, roles and permissions are set on a per-application basis. If you need the same roles or permissions on another application, you'll have to create them separately. Conversely, the [Authorization Core](https://auth0.com/docs/manage-users/access-control/rbac) feature set provides much more flexibility with roles and permissions.\n\n## Prerequisites\n\nBefore you can use the extension, you'll need to:\n\n1.  [Install](https://auth0.com/docs/customize/extensions/authorization-extension/install-authorization-extension) the extension.\n    \n2.  [Configure](https://auth0.com/docs/customize/extensions/authorization-extension/configure-authorization-extension) how the extension will behave during the login transaction.\n    \n3.  [Set up](https://auth0.com/docs/customize/extensions/authorization-extension/set-up-authorization-extension-users) users, groups, roles, and permissions.\n    \n\n## Manage data\n\nYou can easily move data into or out of the extension using a JSON file. To learn more, read [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data).\n\n## Add functionality\n\nOnce the extension is up and running, you can add additional functionality to it.\n\n*   [Enable API access to the extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension): Learn how you can automate provisioning and query the authorization context of your users in real-time, using the extension's API.\n    \n*   [Explore Authorization Extension API endpoints](https://auth0.com/docs/api/authorization-extension): Learn about the Authorization Extension's API endpoints and how you can use them.\n    \n*   [Use Authorization Extension data in rules](https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension): Learn how you can use rules to configure extra logic for your logins.\n    \n\n## Troubleshoot\n\nReview our tips for [troubleshooting](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension) page for commonly-encountered issues.\n\n## Upgrade from previous versions\n\n### Upgrade from version 2.6 or later\n\nUpgrades from version 2.6 or later do not have breaking changes and require no special action.\n\n### Upgrade from versions before 2.6\n\nAuthorization Extension 2.6 contains breaking changes that result from changed logic for storing and handling the API Key; these require you to perform additional steps upon upgrade, as detailed below. Failing to complete these steps will result in either an `InvalidApiKey` or `You are not allowed to access this application` error on rule execution. For more information, see the [GitHub changelog](https://github.com/auth0/auth0-authorization-extension/blob/master/CHANGELOG.md).\n\n1.  Go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select the **Installed Extensions** view.\n    \n2.  Locate **Auth0 Authorization**, select **Upgrade**, and confirm. Wait for the upgrade to complete.\n    \n\n#### Rotate the extension's API key\n\n1.  Select **Auth0 Authorization** to open the extension.\n    \n2.  From the dropdown menu in the top-right of the extension dashboard, select **Configuration**.\n    \n3.  Locate the **API Key** section, and select **Rotate**.\n    \n\n#### Republish the extension's rule\n\nSelect **Publish Rule**.\n\n#### Delete the old extension rule if it exists\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules).\n    \n2.  Locate the `auth0-authz` rule. If it does not exist, you are done; otherwise, continue with the following steps.\n    \n3.  Locate the `auth0-authorization-extension` rule and drag it into the position below the `auth0-authz` rule.\n    \n4.  Check that the `auth0-authz` rule:\n    \n    *   Was authored by the Authorization Extension and has not been modified manually\n        \n    *   Will not change the authorization flow in a way that will grant access or privileges to undesired users if it is removed\n        \n5.  If the above conditions are true, use the toggle to disable the `auth0-authz` rule. After verifying that everything works appropriately, you can decide whether to leave the rule disabled or remove it entirely.\n    \n\n## Learn more\n\n*   [Install Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/install-authorization-extension)\n*   [Configure Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/configure-authorization-extension)\n*   [Enable API Access to Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension)\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Use Rules with the Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)",
    "title": "Authorization Extension",
    "description": "Learn how to use the Authorization Extension to control user authorization behavior during runtime.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension",
    "markdown": "# Delegated Administration Extension v3\n\nThe Delegated Administration Extension (DAE) allows you to grant administrative permissions to a select group of people without providing access to any other area.\n\n## Configure the DAE\n\nTo configure the DAE, you must:\n\n1.  [Register the application with Auth0](#register-the-application-with-auth0)\n    \n2.  [Create a database connection](#create-a-database-connection)\n    \n3.  [Disable all other connections for the Auth0 Application](#disable-all-other-connections-for-the-auth0-application)\n    \n4.  [Create users for database connection](#create-user-for-the-database-connection)\n    \n5.  [Assign roles to users](#assign-roles-to-users)\n    \n6.  [Install and configure the extension](#install-and-configure-the-extension)\n    \n7.  [Use the extension](#use-the-extension)\n    \n\n### Register the application with Auth0\n\nCreate the Application that the Delegated Administration Extension will expose to those who should have administrative privileges for the Users page. To do this, [create a delegated admin application](https://auth0.com/docs/customize/extensions/delegated-administration-extension/create-delegated-admin-applications) in Auth0.\n\nWhen finished, note the application's **Client ID**.\n\n### Create a database connection\n\nIn this example, a database connection will serve as the source of your users who are allowed access to the Users area. To configure this, [create a database connection](https://auth0.com/docs/get-started/applications/set-up-database-connections).\n\nWhile setting up your connection:\n\n*   Use a fitting connection name, such as `HelpDesk`.\n    \n*   Enable the **Disable Sign Ups** toggle. For security purposes, this ensures that even users who have the link to the database connection cannot sign themselves up.\n    \n\n### Disable all other connections for the Auth0 application\n\nBy default, Auth0 enables all connections associated with your tenant when you create a new Application. For this example, disable all connections other than your newly-created database connection. This helps keep the application secure because no one can add themselves using one of your existing connections.\n\nTo configure this, [update application connections](https://auth0.com/docs/get-started/applications/update-application-connections).\n\n### Create users for the database connection\n\nTo continue, you must [create at least one user](https://auth0.com/docs/manage-users/user-accounts/create-users) and attach it to your connection.\n\n### Assign roles to users\n\nAuth0 grants access to the Delegated Administration Extension (DAE) for the user(s) attached to your connection based on their roles. These are DAE-specific roles:\n\n| This role... | Grants permission to... |\n| --- | --- |\n| `Delegated Admin - User` | Search for users, create users, open users, and execute actions on users (such as delete or block). |\n| `Delegated Admin - Administrator` | Do everything that the Delegated Admin - User can, plus see all logs in the tenant and configure Hooks. |\n| `Delegated Admin - Auditor` | Search for users and view user information, but not make changes. Action-based buttons are not visible to this role. |\n| `Delegated Admin - Operator` | Access user management and logs, but not the extension configuration section. |\n\nWhen working with roles, we recommend that you use the [Authorization Core](https://auth0.com/docs/manage-users/access-control/rbac) feature set:\n\n1.  [Create DAE roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles). The names of the roles you create must match the names of the pre-defined DAE roles above.\n    \n2.  [Assign DAE roles to a user manually](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users).\n    \n3.  Add user roles to the DAE namespace in the ID Token using [Actions](https://auth0.com/docs/customize/actions)**:**\n    \n    ```\n    exports.onExecutePostLogin = async (event, api) => {\n      const namespace = `https://{yourTenant}/auth0-delegated-admin`;\n      if (event.client.client_id === 'CLIENT_ID' && event.authorization) {\n        api.idToken.setCustomClaim(namespace, { \"roles\": event.authorization.roles });\n      }\n    };\n    ```\n    \n\nRemember to replace the `CLIENT_ID` placeholder with your delegated admin application's **Client ID**.\n\nTo learn more about creating Actions, read [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action)\n\n## Install and configure the extension\n\nNow that we've created and configured an application, a connection, and our user, we can [install and configure the Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension/install-delegated-admin-extension) itself.\n\n## Use the extension\n\nOnce installed, you are ready to use the Delegated Admin Extension.\n\nNavigate to the extension using the appropriate login link for your region and your tenant's extensibility runtime.\n\n| Location | Name | Login Link |\n| --- | --- | --- |\n| Australia | AU  | `https://{yourTenant}.au.webtask.io/auth0-delegated-admin` |\n| Europe | EU  | `https://{yourTenant}.eu.webtask.io/auth0-delegated-admin` |\n| Europe | EU-2 | `https://{yourTenant}.eu.webtask.run/auth0-delegated-admin` |\n| Japan | JP-1 | `https://{yourTenant}.jp.webtask.run/auth0-delegated-admin` |\n| UK  | UK  | `https://{yourTenant}.uk.webtask.run/auth0-delegated-admin` |\n| USA | US-1 | `https://{yourTenant}.us.webtask.io/auth0-delegated-admin` |\n| USA | US-3 | `https://{yourTenant}.us.webtask.run/auth0-delegated-admin` |\n\nA new tab opens, displaying the login prompt.\n\n![Extensions - Delegated Admin - Login prompt](https://images.ctfassets.net/cdy7uua7fh8z/3vMz5sulIjCU3BHCfQDJyE/1fd90600422c7d6ae4ca909f37db6784/login-prompt.png)\n\nBecause (in this example) we disabled signups for the database connection while configuring it, the login screen does not display a **Sign Up** option. Once you provide valid credentials, Auth0 directs you to your custom **Delegated Administration Dashboard** page, which has the **Title** you provided at the top of the page and (if you provided a custom CSS file), your design.\n\n![Extensions - Delegated Admin - Standard dashboard](https://images.ctfassets.net/cdy7uua7fh8z/3TqngvmqfsSSajsAzP3M9N/e44325f2d60b05769ed2c7c395c26f25/standard-dashboard.png)\n\n#### Delegated Administration session timeout\n\nBy default, token expiration time is 10 hours. However, for security reasons, when using Delegated Administration, Auth0 doesn't save a token to cookies or `sessionStorage`. You must start a new session on each page reload.\n\n## Learn more\n\n*   [Delegated Administration: Extension Hooks](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks)\n*   [Delegated Administration: Manage Users](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-manage-users)",
    "title": "Delegated Administration Extension v3",
    "description": "Learn how to use the Delegated Administration Extension (DAE) to expose the Users section of the Auth0 Dashboard to a select group of users without allowing them access to the rest of the Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/forms/configure-additional-signup-steps",
    "markdown": "# Use Cases: Configure additional signup steps using Forms\n\nForms for Actions allows you to create additional steps in your signup or login flows and make them required before allowing users to access your application.\n\n![Dashboard > Actions > Forms > Use Case Custom Signup Form](https://images.ctfassets.net/cdy7uua7fh8z/ZOQNi6SrEC9OREcBbdiJ3/d79f84fb61acd5473bdf932527e26d58/custom-signup-form.png)\n\nThe sections below outline how to create additional signup steps forms using nodes and flows, along with steps for adding your form to a [Post Login](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) Action.\n\n## Create a form from scratch\n\nFollow these steps to create a form to gather information:\n\n1.  Open the Form editor by selecting **Auth0 Dashboard > Actions > Forms.**\n    \n2.  Select **Create Form** \\> **Start from scratch**.\n    \n\nBy default, a new form contains a Start node, a Step node, and an Ending screen node.\n\n![Dashboard > Forms > Use Cases > Form](https://images.ctfassets.net/cdy7uua7fh8z/2TZ9jSjgEcARFpULI6hz4R/a4319a1bd482f2ee5cc23100fdb2f42c/New-form-Forms-for-action-use-case.png)\n\n### Configure the Step node\n\nThe Step node is the graphical interface visible to users. Add [Fields](https://auth0.com/docs/customize/forms/nodes-and-components) to the Step node to collect the user's full name and job title values by following these steps:\n\n1.  Drag a **Rich text** field from the **Components menu** into the **Step** node.\n    \n    *   **Rich text**: Enter a custom message.\n        \n    *   Select **Save**.\n        \n2.  Drag a **Text** field into the **Step** node.\n    \n    *   **ID**: Enter `full_name`.\n        \n    *   **Label**: Enter `Full name`.\n        \n    *   **Label**: Enable the checkbox.\n        \n    *   **Required**: Enable the checkbox.\n        \n    *   Select **Save**.\n        \n3.  Drag a **Text** field into the **Step** node.\n    \n    *   **ID**: Enter `job_title`.\n        \n    *   **Label**: Enter `Job title.`\n        \n    *   **Label**: Enable the checkbox.\n        \n    *   **Required**: Enable the checkbox.\n        \n    *   Select **Save**.\n        \n4.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Use Case Custom Signup Steps Step node](https://images.ctfassets.net/cdy7uua7fh8z/6Kcn0ai9fsVsqHwZpTGByG/37cbf4ffee63a7010926b15f06dd20ac/custom-signup-step-node.png)\n\n### Configure the Flow node\n\nAdd a **Flow** node after the **Step** node to update the `user_metadata` and resume the authentication flow by following these steps:\n\n1.  Select **Flow** from the bottom of the Form editor.\n    \n2.  Remove the existing link between the **Step** and **Ending Screen** nodes.\n    \n3.  Select the new **Flow** > **Click to add a flow** > **Create a new flow.**\n    \n    *   Enter `Update user_metadata` in the **Name** field.\n        \n    *   Select **Create**.\n        \n    *   Select **Save**.\n        \n4.  Link the **Flow** node to the **Step** and **Ending Screen** nodes as pictured below.\n    \n5.  Select **Publish** to save.\n    \n\n![Dashboard > Actions > Forms > Use Case Custom Signup Step Update User metadata flow](https://images.ctfassets.net/cdy7uua7fh8z/4nTdYdA2Hu5vK65smkdvJg/db3294ebc25a7c2636be96362a3ea56e/custom-signup-step-flow.png)\n\nAdd an Auth0 Update user action to the flow by following these steps:\n\n1.  Select the **Flow** **Update user\\_metadata** \\> **Edit flow** to open the Flow editor in a new tab.\n    \n2.  Below the Start Action, select the **+** icon to add an **Update user** Action. Complete the fields below, then select **Save** to continue.\n    \n    *   **Connection**: Select from the dropdown the Vault connection to your M2M application.\n        \n    *   **User ID**: Enter `{{context.user.user_id}}`.\n        \n    *   **Body**: Copy and paste the following code to update the user\\_metadata with `full_name` and `job_title` properties.\n        \n        ```\n        {\n          \"user_metadata\": {\n            \"full_name\": \"{{fields.full_name}}\",\n            \"job_title\": \"{{fields.job_title}}\"\n          }\n        }\n        ```\n        \n    *   Select **Save**.\n        \n3.  Select Publish to save.\n    \n\n## Retrieve your form render code\n\nRetrieve your form render code to visually render the form with a custom Post Login Action by following these steps:\n\n*   From the Form editor, select **<> Render**.\n    \n*   Select **Copy**.\n    \n\n![Dashboard > Actions > Forms > Form > Embed](https://images.ctfassets.net/cdy7uua7fh8z/2EIUzc539sq9lwoTKbjoJv/496a864c0fc44a782c9cadca119dbfb0/embed.png)\n\n## Create a Post Login Action\n\nCreate a post-login Action to render your form by following these steps:\n\n1.  Navigate to **Auth0 Dashboard > Actions > Flows > Login.**\n    \n2.  Select the **+** icon and select **Build from scratch**:\n    \n    *   **Name**: Enter `Render Additional Signup Form`.\n        \n    *   **Trigger**: Select `Login / Post Login`.\n        \n    *   **Runtime**: Select the recommended version.\n        \n3.  Select **Create**.\n    \n\nTo configure the post-login Action:\n\n1.  Delete the existing code from the Code editor.\n    \n2.  Paste the form render code into the Code editor.\n    \n3.  Edit the code to define the conditional logic that will render the form.\n    \n    ```\n    /**\n    * @param {Event} event - Details about the user and the context in which they are logging in.\n    * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n    */\n    exports.onExecutePostLogin = async (event, api) => {\n      const FORM_ID = 'REPLACE_WITH_YOUR_FORM_ID';\n    \n      if (\n        !event.user.user_metadata.full_name &&\n        !event.user.user_metadata.job_title\n      ) {\n        api.prompt.render(FORM_ID);\n      }\n    }\n    \n    exports.onContinuePostLogin = async (event, api) => { }\n    ```\n    \n4.  Select **Deploy.**\n    \n5.  Drag and Drop the **Render Additional Signup Form** Action to the **Login** flow.\n    \n    ![Dashboard > Forms > Use Cases Custom Signup Steps Login Flow](https://images.ctfassets.net/cdy7uua7fh8z/1WBOicIOcH98hKj6Lq9HF2/4951e30a0cc08c7c5daa0116eaa17e11/Screenshot_2024-03-01_at_15.48.00.png)\n6.  Select **Apply**.\n    \n\n### Test implementation\n\nTest the implementation by following these steps:\n\n*   Sign up to an application with a new user.\n    \n*   The post-login Action in the Login flow will render the form and prompt for the information.\n    \n*   Select **Auth0 Dashboard > User Management > Users,** locate the new user, and verify that its attributes `full_name` and `job_title` contain the information from the additional signup step.",
    "title": "Use Cases: Configure additional signup steps using Forms",
    "description": "Learn how to configure additional signup steps using Forms for Actions",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/account-link-extension",
    "markdown": "# Account Link Extension\n\nThe Account Link extension prompts users that may have created a second account by mistake to link the new account with their old one upon their first login. The user may choose to either link the two accounts or keep them separate if creating the second account was intentional.\n\n## How does the extension work?\n\nThe extension triggers after authentication when the email address of the user who authenticated matches the email address of an existing user account attached to a different identity provider.\n\nFor example, if a user logs in with their Facebook account using the email `john@acme.com` and then later authenticates with Google using the same email address, they will be prompted with a page similar to the following:\n\n![Dashboard - Extensions - Account Link - Extension Example](https://images.ctfassets.net/cdy7uua7fh8z/5K3KBOkhyP1SbAVaYg1yxD/618568208eca3cd15000d716ae9a1e00/account-linking-extension.png)\n\nThe extension does not automatically link users with the same email, even if emails are verified, because verified emails are not enough evidence to prove that the user can currently authenticate to both accounts.\n\nIf the user selects **Continue**, they will be redirected to Facebook to authenticate. If the user is already logged in, Facebook will redirect back to the application, and the user will be automatically linked. If they are not logged in, they will be prompted to authenticate with their Facebook credentials. After Facebook redirects back to Auth0, the Facebook account will be linked with the Google account. This process ensures that the user has the credentials to authenticate to both accounts, which allows the accounts to be linked safely and correctly.\n\n### Limitations\n\nNote that the extension does not support passwordless connections, flows started using device authorization, or the SAML and WS-federation protocols. For connections not supported by the Account Link extension, see [Account Linking – Server-Side Implementation](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/suggested-account-linking-server-side-implementation) and [User Initiated Account Linking – Client-Side Implementation](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/user-initiated-account-linking-client-side-implementation) as alternative options.\n\n## Install and configure extension\n\nGo to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **Auth0 Account Link**. The **Install Extension** window opens.\n\nThe extension will create a new application named `auth0-account-link` to use internally and a new rule to redirect users to the extension if they login with a new account that has an email matching an existing account. This application needs to have enabled all the connections that you want to perform account linking with.\n\nTo test, create a React Sample Single Page Application with [this project](https://github.com/auth0-samples/auth0-link-accounts-sample.git).\n\nOpen the `auth_config.json` file in your text editor and update the domain and `client_id` with your details.\n\nAdd `http://localhost:3000` in the “Allowed Callback URLs”, “Allowed Logout URLs”, “Allowed Web Origins” field.\n\nLog in to `http://localhost:3000` and select a connection. Enter an email address that is already associated with a verified user with a different type of connection.\n\nTo link the account, select **Continue.**\n\nOnce logged in, check the user details on the Auth0 dashboard, we can see the user accounts are linked.\n\n## Set up extension\n\n### Change application name\n\nWe recommend changing the name of the default application used for the extension to something descriptive and easy to read for your customers, like `Account Linking`, since it will appear on the **Login Page** when they authenticate their primary account.\n\n### Update the login page\n\nBy default, Auth0's Universal Login allows a user to both log in and sign up, as one may expect. However, when the account linking asks you to authenticate your primary account in order to link it with the new account, providing a signup option can be confusing for users.\n\nTo learn more about what you can do with Universal Login, see [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login).\n\nTo prevent this, we send a query parameter to let the login page know that it should hide the **Sign Up** option. For this query parameter to take effect, however, you must customize the login page.\n\n1.  Go to [Auth0 Dashboard > Branding > Universal Login](https://manage.auth0.com/#/login_settings), and select the **Login** view.\n    \n2.  Enable the **Customize Login Page** switch to enable the custom editor below. In the editor, we're going to add a new line to the Lock config.\n    \n3.  Toward the bottom of the object configuring the Lock widget, add the following line (after the `closable` setting): `allowSignUp: !config.extraParams.prevent_sign_up,`\n    \n    ![Dashboard - Branding - Universal Login - Login Setting - Account Link Hosted Page Code Example](https://images.ctfassets.net/cdy7uua7fh8z/7gejLGgQB5hoLPqEAJXY5w/38b081b3ea4d8ab8cccc8b6c45e798b2/Dashboard_-_Branding_-_Universal_Login_-_Login_Settin_-_Account_Link_Hosted_Page_Code_Example.png)\n4.  Save your changes and attempt to link an account. You'll notice that the **Sign Up** option is no longer present and your users are safe from an extra level of confusion.\n    \n    ![Account Link Hosted Page Example](https://images.ctfassets.net/cdy7uua7fh8z/5LHWcm49M29Y00rI5xDaZV/773621dc56b4bff67ea618b2c919f750/hosted-page-example.png)\n\n## Customize theme\n\nAt installation (or any time after by clicking the **Settings** icon for the Account Link Extension), you can add a URL to a custom stylesheet if you would like to customize the extension page to look a bit different from the default theme.\n\n![Account Link Customize Theme](https://images.ctfassets.net/cdy7uua7fh8z/2as3Sx9y6UB0tyIuyJikR7/ee4ce139c19a0c2b8125e28b9059939e/extension-page-example.png)\n\n## Administration Panel\n\nYou can customize your account linking login page and widget using the extension administration panel.\n\n1.  Go to [Dashboard > Extensions > Installed Extensions > Auth0 Account Link](https://manage.auth0.com/#/extensions/installed).\n    \n    ![Dashboard - Extensions - Installed Extensions - Account Link](https://images.ctfassets.net/cdy7uua7fh8z/5OEQ3IDJfb5JAeVflAXvKl/3fb52ac2285dfebf5758146ec1c79c65/Dashboard_-_Extensions_-_Installed_Extensions_-_Account_Link.png)\n2.  You will be redirected to the admin site. There you can edit the HTML code of your hosted page and change some settings of the account linking widget such as title, logo, color, and language.\n    \n    ![Dashboard - Extensions - Account Link - HTML Editor](https://images.ctfassets.net/cdy7uua7fh8z/1iPL5K5PC7BfvXoFopCpbA/b161073e3903b766184505ac239d3128/html-editor.png)\n\n![Dashboard - Extensions - Account Link - Widget Settings](https://images.ctfassets.net/cdy7uua7fh8z/6rPRc4uxD9g04574WcJps/4b363dfb26563ca9059fafccb0138b71/widget-settings.png)\n\n## Custom domains\n\nIf you're using a custom domain, you'll need to set the configs rule `customDomain` with the custom domain (for example, `auth.custom.com`).\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules).\n    \n2.  By default, line 27 of the rule is: `issuer: auth0.domain` You will need to change this to: `issuer: \"myCustomDomain.com\" Make` sure to omit the protocol portion of the URL.\n    \n\n## Learn more\n\n*   [User Account Linking](https://auth0.com/docs/manage-users/user-accounts/user-account-linking)\n*   [Link User Accounts](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/link-user-accounts)\n*   [User Account Linking: Server-Side Implementation](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/suggested-account-linking-server-side-implementation)\n*   [User-Initiated Account Linking: Client-Side Implementation](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/user-initiated-account-linking-client-side-implementation)\n*   [Migrate to Access Tokens for Account Linking](https://auth0.com/docs/troubleshoot/product-lifecycle/past-migrations/link-user-accounts-with-access-tokens-migration)",
    "title": "Account Link Extension",
    "description": "Learn about the Account Link extension, which allows users with two accounts with the same email to be prompted to link them.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/single-sign-on-dashboard-extension",
    "markdown": "# Single Sign-On Dashboard Extension\n\nThe Single Sign-on (SSO) Dashboard is a web application designed to solve a problem familiar to many people. Organizations of all sizes maintain a variety of different applications to handle various business functions like accounting, HR, development, support, etc. Remembering usernames and passwords and login URLs for all of your applications can be cumbersome. With this extension, you can simplify the authentication experience by enabling SSO login for your users on multiple enterprise applications. It allows you to create a list of all the cloud services for which a user can authenticate with SSO logins.\n\nThe SSO Dashboard supports two types of users:\n\n*   **Users** who can log in to the dashboard to select an application to sign into with SSO.\n    \n*   **Admins** who can configure applications visible to the users.\n    \n\nTo configure this extension, do the following:\n\n1.  [Create an SSO Dashboard Application](https://auth0.com/docs/customize/extensions/single-sign-on-dashboard-extension/create-sso-dashboard-application)\n    \n2.  [Install the SSO Dashboard extension](https://auth0.com/docs/customize/extensions/single-sign-on-dashboard-extension/install-sso-dashboard-extension)\n    \n3.  [Add Applications to the SSO Dashboard](https://auth0.com/docs/customize/extensions/single-sign-on-dashboard-extension/add-applications-to-the-sso-dashboard)\n    \n4.  [Update Applications on the SSO Dashboard](https://auth0.com/docs/customize/extensions/single-sign-on-dashboard-extension/update-applications-on-the-sso-dashboard)\n    \n\nYou can also [view this SSO Dashboard Extension on GitHub](https://github.com/auth0-extensions/auth0-sso-dashboard-extension).\n\n## Learn more\n\n*   [Troubleshoot Extensions](https://auth0.com/docs/troubleshoot/integration-extensibility-issues/troubleshoot-extensions)\n*   [Sessions](https://auth0.com/docs/manage-users/sessions)\n*   [Single Sign-On](https://auth0.com/docs/authenticate/single-sign-on)\n*   [Enable Single Sign-On for Tenants](https://auth0.com/docs/get-started/tenant-settings/enable-sso-for-legacy-tenants)\n*   [Configure Session Lifetime Settings](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings)\n*   [Logout](https://auth0.com/docs/authenticate/login/logout)",
    "title": "Single Sign-On Dashboard Extension",
    "description": "Learn how to use the SSO Dashboard Extension to manage single sign-on login for your users on multiple enterprise applications.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/ad-ldap-connector-health-monitor",
    "markdown": "# Auth0 AD/LDAP Connector Health Monitor Extension\n\nThe Auth0 AD/LDAP Connector Health Monitor exposes an API endpoint of your choice so that you can monitor your AD/LDAP connectors.\n\n## Configure the extension\n\nTo install and configure this extension:\n\n1.  Navigate to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **Auth0 AD/LDAP Connector Health Monitor**. The **Install Extension** window opens.\n    \n2.  Set the following configuration parameters, and select **Install**:\n    \n\n*   **Auth0\\_Domain**: The domain for your Auth0 application, which you can find in your [Auth0 Application Settings](https://manage.auth0.com/#/applications/{yourClientId}/settings).\n    \n*   **Auth0\\_Global\\_Client\\_ID**: The Global Client ID for your Auth0 application, which you can find in the **Global Application Information** section of your [Tenant Advanced Settings](https://manage.auth0.com/#/tenant/advanced).\n    \n*   **Auth0\\_Global\\_Client\\_Secret**: The Global Client Secret for your Auth0 application, which you can find in the **Global Application Information** section of your [Tenant Advanced Settings](https://manage.auth0.com/#/tenant/advanced).\n    \n\n## Use the extension\n\nTo access the URL to use with your monitoring service:\n\n1.  Navigate to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and click **Installed Extensions**.\n    \n2.  Select **Auth0 AD/LDAP Connector Health Monitor**. A new window with a JSON snippet similar to this opens:\n    \n    ```\n    {\n      \"message\": \"Use this url: 'https://sandbox.it.auth0.com/api/run/auth0user/auth0-ldap-conector-health-monitor?connection={MY-LDAP-CONNECTOR}' for monitoring your AD/LDAP connector.\"\n    }\n    ```\n    \n3.  Enter the ID of your LDAP connection. To get the ID, go to  [Auth0 Dashboard > Authentication > Enterprise](https://manage.auth0.com/#/connections/enterprise), click the connection, and copy the value from the **Identifier** field.\n    \n    ![Auth0 - Extensions LDAP - Connection ID](https://images.ctfassets.net/cdy7uua7fh8z/6PAofLa601kTEBYajl6wm9/fd3259fd29ebd8dd94b9af3109a31468/image.png)\n\nOnce finished, the provided URL can be used with your monitoring service to monitor your AD/LDAP connectors.\n\n## Learn more\n\n*   [Troubleshoot AD/LDAP Connector](https://auth0.com/docs/troubleshoot/integration-extensibility-issues/troubleshoot-ad-ldap-connector)",
    "title": "Auth0 AD/LDAP Connector Health Monitor Extension",
    "description": "Learn how to install and use the Auth0 AD/LDAP Connector Health Monitor extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authentication-api-debugger-extension",
    "markdown": "# Authentication API Debugger Extension\n\nThe Authentication API Debugger extension allows you to test various endpoints of the Auth0 Authentication API.\n\n## Install the extension\n\nTo install this extension:\n\n1.  Navigate to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **Auth0 Authentication API Debugger**. The **Install Extension** window opens.\n    \n    ![Dashboard - Extensions - Auth API Debugger - Install](https://images.ctfassets.net/cdy7uua7fh8z/LCCCdFE4z9OJ4gW3C3hs9/bb81a0762c423bd3da6d9454b6b42359/Dashboard_-_Extensions_-_Auth_API_Debugger_-_Install.png)\n2.  Select **Install**.\n    \n\nBecause the extension will communicate with the Management API on your behalf to retrieve details about the Applications you have configured in your Auth0 Dashboard, you will need to authorize its access.\n\nTo authorize the extension:\n\n1.  If you're following this guide, you should already be on the [Installed Extensions](https://manage.auth0.com/#/extensions) view of [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions). Select **Auth0 Authentication API Debugger** to launch the extension. A consent dialog will appear, requesting access to your account.\n    \n    ![Dashboard - Extensions - Authentication API Debugger - Consent](https://images.ctfassets.net/cdy7uua7fh8z/5jT4QiRzF9sNZfDxqdNFxm/9a1aea3acc11172ec07d88b9c7d1c11d/Dashboard-Extensions-API-Debugger_Authorize.png)\n2.  Consent to allow the extension to access your account. After you consent, the extension launches.\n    \n\n## Configure the extension\n\nAfter the extension is installed, you should apply the basic configuration. To configure the extension:\n\n1.  If you're following this guide, you should already have launched the extension. Select the **Configuration** view.\n    \n    ![Dashboard - Extensions - Authentication API Debugger - Configuration](https://images.ctfassets.net/cdy7uua7fh8z/5riI24ArqUAKRXhZfNWIQ5/ab7d6825288752132d14e54db1e563d0/configuration.png)\n2.  Set the following configuration parameters, and select **Save**:\n    \n\n*   **Domain**: The domain for your tenant. This field is read-only and is displayed for informational purposes.\n    \n*   **Application**: The Application for which you want to initiate any authentication flows. You can manage your Applications at [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications).\n    \n*   **Callback URL**: The callback URL for this extension. You must also add this URL to the **Allowed Callback URLs** in the selected Application's settings.\n    \n*   **State**: Optional state information that can be sent with the authentication flow.\n    \n*   **Connection**: The name of the connection with which you want to log in. You can use this parameter to bypass the main login screen and go directly for the login screen of the relevant Identity Provider.\n    \n\n## Execute the flows\n\nAfter configuring the extension, you can execute any of the flows by selecting the **OAuth2/OIDC** view.\n\n![Dashboard - Extensions - Authentication API Debugger - OAuth OIDC Settings](https://images.ctfassets.net/cdy7uua7fh8z/72iYPxZU9OiHkKkHtgPTjI/fc166f3ae74e595c8d916276e78edb99/oauth-oidc-settings.png)\n\nOnce you have executed a particular flow, you will see a screen that displays the information returned from Auth0. The exact information returned will depend on which flow was executed. An example of the results after executing a normal **OAuth2/OIDC Login** flow is as follows:\n\n![Dashboard - Extensions - Authentication API Debugger - Flow Executed](https://images.ctfassets.net/cdy7uua7fh8z/13TRS8SQUd4OsfLYRWMoe6/3478778905ad253160022db1f1f6f31a/flow-executed.png)\n\nTo execute another flow, select the **Login** view to return to the **Configuration** screen.",
    "title": "Authentication API Debugger Extension",
    "description": "Learn how to configure and use the Auth0 Authentication API Debugger extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/user-import-export-extension",
    "markdown": "# User Import / Export Extension\n\nThe **User Import / Export Extension** allows you to:\n\n*   Bulk import your existing database users into Auth0\n    \n*   Search for and export some (or all) of your Auth0 database users\n    \n\nFor a list of user profile fields that can be imported and exported, see [User Profile Attributes](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure).\n\nYou must be a Dashboard Admin to use this extension.\n\n## Install the extension\n\nTo install this extension, go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **User Import / Export**.\n\nThe extension does not require any additional configuration before it can be installed, so select **Install** in the informational pop-up window to proceed.\n\n![Dashboard Extensions Users Import/Export Install Extension](https://images.ctfassets.net/cdy7uua7fh8z/6D9Z4RigtgFBZcd861KVlK/6e42ed005ee62b13b44b0fc91d302f6f/Screen_Shot_2021-05-18_at_9.07.39_PM.png)\n\n## Use the extension\n\nAfter you've installed your extension, you'll see it listed in your list of installed extensions. Click on **Import / Export Extension** to launch.\n\n![Dashboard Extensions Installed Extensions tab](https://images.ctfassets.net/cdy7uua7fh8z/7unxnXFjDkSQUvnyvrOyDn/14c456335df4f9334c4fa0020dca8860/Screen_Shot_2021-05-18_at_9.09.04_PM.png)\n\nYou'll be asked to grant permission for the extension to access your Auth0 account for the listed activities the first time you launch the extension.\"\n\n![Dashboard Extensions Authorize the Users Import/Export Extension](https://images.ctfassets.net/cdy7uua7fh8z/5CCKmxUv1HN5nDj9jL8qel/d7f02ccf3f4be166b00bbf217e14144f/Screen_Shot_2021-05-18_at_9.11.01_PM.png)\n\nClick the **check mark** to proceed.\n\nThere are two ways of using this extension:\n\n*   Bulk import your existing database users into Auth0\n    \n*   Search for and export some (or all) of your Auth0 database users\n    \n\nBoth use cases are explained in further detail below.\n\n### Import users\n\nBy default, any time you open the extension, you'll see the **User Import** screen (if you're on the export screen, you can return to this screen by click **Import** in the left-hand navigation bar).\n\n![Dashboard Extensions Users Import Export Import users from file](https://images.ctfassets.net/cdy7uua7fh8z/5JC6p1ZDDCYm9cCEtq0D7N/511c1241b1835772e7121eb5845f179f/import.png)\n\nTo import your users, drag and drop a valid JSON file ([schema and examples here](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples)) onto the area that says **Drop your file here, or click to select**. Alternatively, you can click on this area to browse your files and select the appropriate JSON file. The JSON file should contain the list of users that you are planning to import.\n\nSelect the database connection for which your users will be imported. Please make sure that the connection you choose has been enabled for at least one application.\n\nClick **Start Importing Users** to begin the import process.\n\nWhen done, you'll see the following **Completed** message.\n\n![Dashboard Extensions Users Import Export Import Complete](https://images.ctfassets.net/cdy7uua7fh8z/7hyE3DWBJuFuAulAAnZlfN/23303644d4c706f4c0937bd363bf6699/import-complete.png)\n\nOnce you've imported your users, you can manage them individually using [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users).\n\n### Export users\n\nTo export your existing Auth0 users associated with database connections, select **Export**.\n\n![Dashboard Extensions Users Import Export Export Users page](https://images.ctfassets.net/cdy7uua7fh8z/5wUhbGMjVQKIE9vx2SBIA3/a952aee6cc6027234631334c7174c4a8/export-users.png)\n\nUnder **User Fields**, you can decide which user attributes or expressions should be included in the export. The user attribute can be a static value like `user.user_metadata.name`, or it can be a JavaScript expression like `user.user_metadata.name || user.name`. Expressions will be evaluated during the export runtime. The **column name** value is how the value will be represented in the export.\n\nYou can click the **Add Default Fields** button to automatically select the default fields and populate their column names (this is also a good way for you to visualize how parameters/expressions will appear).\n\nYou can remove extraneous attributes/expressions by clicking on its associated **trash can** icon.\n\nUnder **Settings**, you can:\n\n*   Configure how your exported users are listed by providing a **User Attribute** by which users should be sorted (as well as whether the users should be sorted in ascending or descending order)\n    \n*   Choose your **Export Format**; you can choose between JSON and CSV files\n    \n    ![Dashboard Extensions Users Import Export Settings Export Format](https://images.ctfassets.net/cdy7uua7fh8z/1HVpo1IevSRJbFvwrEKkzf/761fa914f6c33cdee147e07b2c43f7c7/settings.png)\n\nWhen you're ready, click **Export X Users** (where `X` is the number of users you're exporting).\n\nYou can download the file containing your users when the export is complete.\n\n![Dashboard Extensions Users Import Export Progress Indicator Export Complete](https://images.ctfassets.net/cdy7uua7fh8z/2vtH1VMbGBZq1gxxJkM8K7/5086119751b1e38d686c9266fcf6f71e/export-complete.png)\n\n## Update Users\n\nThe Auth0 Management API allows bulk user profile updates to `user_metadata` and `app_metadata` with the User Import/Export Extension.\n\n### Export users\n\nUsing the [export process above](https://auth0.com/docs/customize/extensions/user-import-export-extension#export-users), create a complete export file including all your user attributes.\n\nChoose the JSON format for your export.\n\nDownload the file containing your users when the export is complete.\n\n### Update your configuration\n\nMake a **copy** of the JSON file you downloaded in the previous step.\n\nOpen the copy of the JSON file in a text editor. Your user schema should be similar to the one below:\n\n```\n[\n   {\n      \"Id\":\"auth0|626737a9813c000069daf462\",\n      \"Nickname\":\"testuser1\",\n      \"Name\":\"testuser1@auth0.com\",\n      \"email\":\"testuser1@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-04-26T00:07:05.098Z\",\n      \"Updated At\":\"2022-07-06T14:54:19.214Z\"\n   },\n   {\n      \"Id\":\"auth0|62d1a1853bdcf11ff5dca672\",\n      \"Nickname\":\"testuser2\",\n      \"Name\":\"testuser2@auth0.com\",\n      \"email\":\"testuser2@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-07-15T17:19:01.531Z\",\n      \"Updated At\":\"2022-07-15T17:19:01.532Z\"\n   },\n   {\n      \"Id\":\"auth0|62d1a1a524f32a4185c9ce23\",\n      \"Nickname\":\"testuser3\",\n      \"Name\":\"testuser3@auth0.com\",\n      \"email\":\"testuser3@auth0.com\",\n      \"Connection\":\"Username-Password-Authentication\",\n      \"Created At\":\"2022-07-15T17:19:33.484Z\",\n      \"Updated At\":\"2022-07-15T17:19:33.484Z\"\n   }\n]\n```\n\nDo not change the user email address because it is the lookup key for users in the database.\n\nTo add an attribute, create a new field in each user schema and update with a value. In the example below, the \"Family Name\" attribute has a value of \"Smith\" with a comma after the new attribute value.\n\nYou can also add the `email_verified` attribute to multiple users and set the value to `true`.\n\n```\n{\n   \"Id\":\"auth0|626737a9813c000069daf462\",\n   \"Nickname\":\"testuser1\",\n   \"Family Name\":\"Smith\",\n   \"Name\":\"testuser1@auth0.com\",\n   \"email\":\"testuser1@auth0.com\",\n   \"email_verified\":true,\n   \"Connection\":\"Username-Password-Authentication\",\n   \"Created At\":\"2022-04-26T00:07:05.098Z\",\n   \"Updated At\":\"2022-07-06T14:54:19.214Z\"\n}\n```\n\nSave the changes to your user file.\n\n### Import updated user profile data\n\nThe `users-import` endpoint allows you to upload your updated user profile file and update several users in one job. Navigate to the [Create import users job endpoint](https://auth0.com/docs/api/management/v2/#!/Jobs/post_users_imports).\n\nAdd your user file to the users parameter and add the database connection ID of the database you want to update.\n\nThe upsert value should be `true` to update the already existing user information. To add your updates, select **Try** or use Postman to import the users.\n\nUse the `job_id` to verify the status with the `jobs` [endpoint](https://auth0.com/docs/api/management/v2/#!/Jobs/get_jobs_by_id).",
    "title": "User Import / Export Extension",
    "description": "Learn about the User Import/Export extension, which allows you to import and export users from or to any database you have configured in your account.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/enable-disable-hooks",
    "markdown": "# Enable/Disable Hooks\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"enabled\": \"true\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"enabled\\\": \\\"true\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"enabled\\\": \\\"true\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"enabled\\\": \\\"true\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {enabled: 'true'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"enabled\": @\"true\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"enabled\\\": \\\"true\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"enabled\\\": \\\"true\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/hooks/HOOK_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"enabled\\\": \\\"true\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"enabled\": \"true\"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Enable/Disable Hooks",
    "description": "Learn how to enable and disable hooks using the Dashboard  and Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/delete-hooks",
    "markdown": "# Delete Hooks\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/hooks/HOOK_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Delete Hooks",
    "description": "Learn how to delete Hooks using the Dashboard and Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/create-hooks",
    "markdown": "# Create Hooks\n\nYou can create multiple hooks using the Dashboard or Management API.\n\nYou can also import and export hooks using the Deploy Command-Line Interface (CLI) tool.\n\n## Use the Dashboard\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Hooks](https://manage.auth0.com/#/hooks), and click **+Create**.\n    \n2.  Enter a descriptive name for your hook, select the extensibility point for which the hook should execute, and click **Create**.\n    \n3.  Locate the section for the extensibility point you selected, and click the pencil icon next to the hook you created.\n    \n4.  Update the hook using the Hook Editor, and click the disk icon to save.\n    \n\n## Use the Management API\n\nMake a `POST` call to the [Create a Hook endpoint](https://auth0.com/docs/api/management/v2/#!/Hooks/post_hooks). Be sure to replace `MGMT_API_ACCESS_TOKEN`, `HOOK_NAME`, `HOOK_SCRIPT`, and `EXTENSIBILITY_POINT_NAME` placeholder values with your Management API access token, Hook name, Hook script, and extensibility point name, respectively.\n\n*   [cURL](#a62c135e7e564294b15e54d0b3f242da_shell)\n*   [C#](#a62c135e7e564294b15e54d0b3f242da_csharp)\n*   [Go](#a62c135e7e564294b15e54d0b3f242da_go)\n*   [Java](#a62c135e7e564294b15e54d0b3f242da_java)\n*   [Node.JS](#a62c135e7e564294b15e54d0b3f242da_node)\n*   [Obj-C](#a62c135e7e564294b15e54d0b3f242da_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/hooks' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"HOOK_NAME\", \"script\": \"HOOK_SCRIPT\", \"triggerId\": \"EXTENSIBILITY_POINT_NAME\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/hooks\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/hooks',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    name: 'HOOK_NAME',\n    script: 'HOOK_SCRIPT',\n    triggerId: 'EXTENSIBILITY_POINT_NAME'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"HOOK_NAME\",\n                              @\"script\": @\"HOOK_SCRIPT\",\n                              @\"triggerId\": @\"EXTENSIBILITY_POINT_NAME\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/hooks\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"triggerId\\\": \\\"EXTENSIBILITY_POINT_NAME\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"HOOK_NAME\",\n  \"script\": \"HOOK_SCRIPT\",\n  \"triggerId\": \"EXTENSIBILITY_POINT_NAME\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| **Value** | **Description** |\n| --- | --- |\n| `MGMT_API_ACCESS_TOKEN` | Access Token for the Management API with the scope `create:hooks`. To learn more, read [Management API Access Tokens](https://auth0.com/docs/api/management/v2/tokens). |\n| `HOOK_NAME` | Name of the Hook to create. |\n| `HOOK_SCRIPT` | Script that contains the code for the Hook. Should match what you would enter if you were creating a new Hook using the Dashboard. |\n| `EXTENSIBILITY_POINT_NAME` | Name of the extensibility point for which the Hook should execute. Options include: `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`. To learn more about extensibility points, read [Extensibiity Points](https://auth0.com/docs/hooks/extensibility-points). |\n\n#### Handle rate limits when calling APIs from within Hooks\n\nIf you call Auth0 APIs from within a Hook's script, you will need to handle rate limits. To do so, check the `X-RateLimit-Remaining` header and act appropriately when the number returned nears 0.\n\nAdditionally, add logic to handle cases in which you exceed the provided rate limits and receive the `429` HTTP Status Code (`Too Many Requests`). In this case, if a re-try is needed, it is best to allow for a back-off to avoid going into an infinite retry loop.\n\nTo learn more about Auth0 rate limiting for Hooks, read Rate Limits.\n\n## Learn more\n\n*   [Migrate from Hooks to Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions)",
    "title": "Create Hooks",
    "description": "Learn how to create Hooks using the Dashboard and Management API. Hooks may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/update-hooks",
    "markdown": "# Update Hooks\n\nYou can update Hooks using the Dashboard or Management API.\n\nYou can also import and export hooks using the [Deploy Command-Line Interface (CLI) tool](https://auth0.com/docs/deploy-monitor/deploy-cli-tool).\n\n## Rename hooks using the Dashboard\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Hooks](https://manage.auth0.com/#/) and click the gear icon next to the hook you want to rename.\n    \n2.  Click **Rename**.\n    \n3.  Type a new name for the Hook and click **Rename**.\n    \n    ![Auth0 Rename Hooks](https://images.ctfassets.net/cdy7uua7fh8z/2Xp8Z3uYGoGZrF5EGXLPLQ/6c68c77f97133b2066219a68540b1e73/Screen_Shot_2021-05-19_at_12.08.00_PM.png)\n\n## Update hook scripts using the Dashboard\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Hooks](https://manage.auth0.com/#/) and click the pencil icon next to the hook you want to update.\n    \n    ![Auth0 Hooks select a Hook](https://images.ctfassets.net/cdy7uua7fh8z/2y2R713TkAvQWIMZPMd1zh/bf0a657261f2d090492660ea5962e0a3/dashboard-hooks-list.png)\n2.  Update the hook using the Hook Editor and click the disk icon to save.\n    \n    ![Auth0 Hook Editor](https://images.ctfassets.net/cdy7uua7fh8z/26u71QdXxZxg5zIH8SJQAg/e9bbd25b99d9b8fd44c281b6de83a5a3/dashboard-hooks-edit_menu.png)\n\n## Update hooks using the Management API\n\nMake a `PATCH` call to the [Update a Hook endpoint](https://auth0.com/docs/api/management/v2/#!/Hooks/patch_hooks_by_id). Be sure to replace `HOOK_ID` and `MGMT_API_ACCESS_TOKEN` placeholder values with your Hook ID and Management API Access Token, respectively.\n\n*   [cURL](#89a36c7e6c8844bdae983d5ce9999654_shell)\n*   [C#](#89a36c7e6c8844bdae983d5ce9999654_csharp)\n*   [Go](#89a36c7e6c8844bdae983d5ce9999654_go)\n*   [Java](#89a36c7e6c8844bdae983d5ce9999654_java)\n*   [Node.JS](#89a36c7e6c8844bdae983d5ce9999654_node)\n*   [Obj-C](#89a36c7e6c8844bdae983d5ce9999654_objc)\n*   [...](#)\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"HOOK_NAME\", \"script\": \"HOOK_SCRIPT\", \"enabled\": \"true\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {name: 'HOOK_NAME', script: 'HOOK_SCRIPT', enabled: 'true'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"HOOK_NAME\",\n                              @\"script\": @\"HOOK_SCRIPT\",\n                              @\"enabled\": @\"true\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/hooks/HOOK_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"HOOK_NAME\\\", \\\"script\\\": \\\"HOOK_SCRIPT\\\", \\\"enabled\\\": \\\"true\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"HOOK_NAME\",\n  \"script\": \"HOOK_SCRIPT\",\n  \"enabled\": \"true\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| Value | Description |\n| --- | --- |\n| `HOOK_ID` | ID of the Hook to update. |\n| `MGMT_API_ACCESS_TOKEN` | Access Tokens for the Management API with the scope `update:hooks`. To learn more, read [Management API Access Tokens](https://auth0.com/docs/api/management/v2/tokens). |\n| `HOOK_NAME` | Name of the Hook to create. |\n| `HOOK_SCRIPT` | Script that contains the code for the Hook. Should match what you would enter if you were creating a new hook using the Dashboard. |\n\n#### Handle rate limits when calling APIs from within Hooks\n\nIf you call Auth0 APIs from within a Hook's script, you will need to handle rate limits. To do so, check the `X-RateLimit-Remaining` header and act appropriately when the number returned nears 0.\n\nAdditionally, add logic to handle cases in which you exceed the provided rate limits and receive the `429` HTTP Status Code (`Too Many Requests`). In this case, if a re-try is needed, it is best to allow for a back-off to avoid going into an infinite retry loop.",
    "title": "Update Hooks",
    "description": "Learn how to update Hooks using the Dashboard or Management API. Hooks may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/view-hooks",
    "markdown": "# View Hooks\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/hooks' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/hooks\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/hooks',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/hooks\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View Hooks",
    "description": "Learn how to view hooks using the Dashboard and Management API. Hooks may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/view-logs-for-hooks",
    "markdown": "# View Logs for Hooks\n\nFrom the Dashboard, you can view real-time logging information for hooks (and also rules, actions, custom database scripts, and custom social connections).\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Hooks](https://manage.auth0.com/#/) and select the pencil icon next to a Hook.\n    \n    ![Auth0 Hooks select a Hook](https://images.ctfassets.net/cdy7uua7fh8z/2y2R713TkAvQWIMZPMd1zh/bf0a657261f2d090492660ea5962e0a3/dashboard-hooks-list.png)\n2.  In the top right corner of the Hooks Editor, select the logs icon.\n    \n    ![Auth0 Hook Editor](https://images.ctfassets.net/cdy7uua7fh8z/26u71QdXxZxg5zIH8SJQAg/e9bbd25b99d9b8fd44c281b6de83a5a3/dashboard-hooks-edit_menu.png)",
    "title": "View Logs for Hooks",
    "description": "Learn how to view logs for hooks using the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws",
    "markdown": "# Integrate with Amazon Web Services and Products\n\nThere are many ways to integrate Auth0 with Amazon products and services depending on your specific needs.\n\n## Product integrations\n\nYou can read further on how to use the products below to use in addition to your Auth0 and AWS services:\n\n*   [CloudFront](https://auth0.com/docs/customize/custom-domains/self-managed-certificates/configure-aws-cloudfront-for-use-as-reverse-proxy): Use as a reverse proxy with your custom domain.\n    \n*   [Simple Email Service (SES)](https://auth0.com/docs/customize/email/smtp-email-providers/configure-amazon-ses-as-external-smtp-email-provider): Manage email communications with your users.\n    \n*   [EventBridge](https://marketplace.auth0.com/integrations/amazon-log-streaming): Stream logs to EventBridge.\n    \n*   [Cognito](https://auth0.com/docs/customize/integrations/aws/amazon-cognito): Use as a backend for your application.\n    \n\n## Identity and access management (IAM) integrations\n\nWe have several how-to articles to configure AWS to work with Auth0:\n\n*   [Secure AWS API Gateway endpoints using custom authorizers](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-custom-authorizers): Accept Auth0-issued access tokens.\n    \n*   [Use AWS session tags with AWS APIs and resources](https://auth0.com/docs/customize/integrations/aws/session-tags): Tag resources and assign users key/value pairs for RBAC.\n    \n*   [Configure AWS for single sign-on](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso): Allow your users to log in to AWS using any supported identity provider.\n    \n*   [Add Amazon login to your app](https://auth0.com/docs/connections/social/amazon): Allow users to log in to your app using their Amazon profile.\n    \n\n## Learn more\n\n*   [Build Serverless Applications Using Token-Based Authentication with AWS API Gateway and Lambda](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation)\n*   [Configure Amazon Web Services as SAML Service Provider](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-aws)",
    "title": "Integrate with Amazon Web Services and Products",
    "description": "List of Amazon products and services, including Amazon Web Services (AWS) for identity and access management (IAM) with Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/hook-secrets",
    "markdown": "# Hook Secrets\n\nHooks feature integrated secret management to securely store secrets while making them conveniently available in code.\n\n## Manage Hook Secrets\n\nYou can create, update, delete, and view Hook Secrets from the Dashboard or Management API. To learn more, read:\n\n*   [Create Hook Secrets](https://auth0.com/docs/customize/hooks/hook-secrets/create-hook-secrets)\n    \n*   [Update Hook Secrets](https://auth0.com/docs/customize/hooks/hook-secrets/update-hook-secrets)\n    \n*   [Delete Hook Secrets](https://auth0.com/docs/customize/hooks/hook-secrets/delete-hook-secrets)\n    \n*   [View Hook Secrets](https://auth0.com/docs/customize/hooks/hook-secrets/view-hook-secrets)\n    \n\nHook Secrets can also be imported or exported using the [Deploy Command-Line Interface (CLI) tool.](https://auth0.com/docs/deploy-monitor/deploy-cli-tool)\n\n## Learn more\n\n*   [Auth0 Hooks](https://auth0.com/docs/customize/hooks)",
    "title": "Hook Secrets",
    "description": "Learn about integrated secret management used with Auth0 Hooks.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/secure-a-cli-with-auth0",
    "markdown": "# Secure a CLI with Auth0\n\nThe three ways to secure a CLI with Auth0, in order of most secure to least secure, are:\n\n*   [Device Authorization Flow](#device-authorization-flow) for when the user can't open a browser\n    \n*   [Client Credentials Grant Flow](#client-credentials-grant-flow) for applications acting on their own behalf and not attributable to a user\n    \n*   [Resource Owner Password Grant Flow](#resource-owner-password-grant-flow) only for when you're trying to authenticate the CLI client itself, which is a very rare situation (otherwise not recommended)\n    \n\nWith input-constrained devices that connect to the internet, rather than authenticate the user directly, the device asks the user to go to a link on their computer or smartphone and authorize the device. This avoids a poor user experience for devices that do not have an easy way to enter text. To do this, device apps use the Device Authorization Flow (drafted in [](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-15)OAuth 2.0), in which they pass along their Client ID to initiate the authorization process and get a token.\n\nThe easiest way to implement the [](https://auth0.com/docs/get-started/authentication-and-authorization-flow/device-authorization-flow)Device Authorization Flow is to follow the steps in [Call API Using Device Authorization Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/device-authorization-flow/call-your-api-using-the-device-authorization-flow).\n\nTo learn more about the Device Authorization Flow in OAuth 2.0, you can review the Internet Engineering Task Force (IEFT) draft [OAuth 2.0 Authorization Grant](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-15). You can also review our article, [Device Authorization Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/device-authorization-flow).\n\n## Client Credentials Grant Flow\n\nUse the Client Credentials Grant (CCG) flow when users and downstream identity providers aren't involved, and you want to authenticate based on distinct machines or devices.\n\nIf your identity provider supports sending credentials, then you should review our article, [Client Credentials Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow). For details on how to implement this flow, refer to [Call API Using the Client Credentials Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow/call-your-api-using-the-client-credentials-flow).\n\n## Resource Owner Password Grant Flow\n\nWe do not recommend using the Resource Owner Password Grant (ROPG) flow for native applications. In the IEFT article, [RFC 8252 OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252), it is recommended that “OAuth 2.0 authorization request from native apps should ONLY be made through external user-agents, primarily the user’s browser”. For details, see [RFC 8252 Embedded User-Agents](https://tools.ietf.org/html/rfc8252#section-8.12).\n\nUsing Resource Owner Password Grant (ROPG) are less secure than the redirect-based options described above. ROPG is only for legacy. In the context of CLIs, it only makes sense for things like connection strings where you need to support legacy programs.\n\nIf you must use ROPG in your native app instead of Device Flow as we recommend, then you can use our [OIDC Compliant ROPG endpoint](https://auth0.com/docs/api/authentication#resource-owner-password).",
    "title": "Secure a CLI with Auth0",
    "description": "How to use Auth0 to secure a CLI.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/apigee",
    "markdown": "# Secure Apigee with Auth0\n\nIf you are using Apigee Edge for developing and managing your backend service APIs, you can use Auth0 to secure access to your API proxies.\n\n## Prerequisites\n\nBefore you begin, you'll need to:\n\n1.  Have an Apigee Edge API proxy that needs to be secured. To learn more, read Apigee's [Get Started](https://docs.apigee.com/api-platform/get-started/get-started) article.\n    \n2.  [Sign up](https://auth0.com/signup) for an account with Auth0.\n    \n\nThe process of building your API proxy is outside the scope of this article. Instead, we will focus on securing an API proxy that you already have using Auth0.\n\n## Create a custom API\n\nFirst, [register your Apigee Edge API Proxy using the Dashboard](https://auth0.com/docs/get-started/auth0-overview/set-up-apis). Auth0 needs to recognize Apigee as an audience to make sure that any Access Tokens issued are issued with the correct audience. The user authenticates with Auth0 via the application, and the application specifies this audience value to make sure that the Access Token possesses the right scopes for the audience provided.\n\nYou'll need to do the following:\n\n1.  Provide a name for your API (e.g., `apigee`).\n    \n2.  Provide an identifier for your API: `urn:apigee:target:api`\n    \n3.  Choose a signing algorithm: `RS256` (default)\n    \n\nWhen you register your Apigee Edge API Proxy, Auth0 also creates a **Machine to Machine (M2M)** application on your behalf and names it to match the API you registered. You can use this application for testing; it is automatically configured to be authorized to call your API.\n\n## Note variables from the test application\n\nSwitch to the test application created when registering your API and make note of the variables that were set during the process of registering your API and creating the associated M2M application. You will need them for subsequent steps of this tutorial.\n\n1.  Navigate to the [Auth0 Dashboard > Applications](https://manage.auth0.com/#/applications)\\], and click the name of your test application.\n    \n2.  Scroll down and make note of the following variables:\n    \n    *   API audience\n        \n    *   Auth0 domain\n        \n    *   Client ID\n        \n    *   Allowed callback URL(s): The URLs to which the user can be redirected after authentication. You can specify multiple URLs by comma-separating them. (This is typically done to handle different environments where each needs its own redirects.)\n        \n\n## Implement the Client Credentials flow\n\nNow you're ready to implement the Client Credentials Flow to request the Access Tokens you can provide to Apigee Edge. Note that in this scenario, you will use the Client Credentials Flow because you are using Apigee with your backend service APIs, which represents a Machine-to-Machine (M2M) application; other scenarios may require the use of different flows.\n\nTo learn how to log in and get an Access Token that can be used to call Apigee Edge, see [Call API Using the Client Credentials Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow/call-your-api-using-the-client-credentials-flow).\n\n## Validate the Access Token\n\nOnce you've requested and received an Access Token from Auth0, you'll be able to use it to call the API proxy you set up with Edge.\n\nWhen you [use your Access Token](https://docs.apigee.com/api-platform/security/oauth/using-access-tokens.html), the first thing Apigee Edge will do is [verify the token](https://docs.apigee.com/api-platform/security/oauth/using-access-tokens.html#addingaverifyaccesstokenpolicy).\n\nAuth0 Access Tokens are JSON Web Tokens (JWTs), so you can take advantage of Apigee Edge's Verify JWT policy to do this. To learn more, read Apigee's [Verify JWT policy signed with the RS256 algorithm](https://docs.apigee.com/api-platform/reference/policies/verify-jwt-policy#verify-a-jwt-signed-with-the-rs256-algorithm) article.\n\nApigee Edge will verify the token before anything else happens; if the token is rejected, then all processing will stop and Edge will return an error to the client.\n\n## Testing\n\nTo test your implementation, make an HTTP POST call to Apigee Edge with the Auth0-issued Access Token included in the header of the call. You can learn how by reviewing Apigee's [Calling the protected API](https://docs.apigee.com/api-platform/security/oauth/oauth-20-client-credentials-grant-type.html#callingtheprotectedapi) article.\n\nWhen you receive a successful response, extract the token and review it to verify the inclusion of required/requested user claims.",
    "title": "Secure Apigee with Auth0",
    "description": "Learn how to use Auth0 to secure access to API proxies developed and managed by Apigee Edge.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/google-cloud-endpoints",
    "markdown": "# Secure Google Cloud Endpoints with Auth0\n\n[Google Cloud Endpoints (GCE)](https://cloud.google.com/endpoints/) is an API management system providing features to help you create, maintain, and secure your APIs. GCE uses [OpenAPI](https://www.openapis.org/) to define your API's endpoints, input and output, errors, and security description.\n\nFor more information on the OpenAPI spec, see the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) repository on GitHub.\n\nThis tutorial will cover how to secure Google Cloud Endpoints with Auth0.\n\n## Prerequisites\n\nBefore you begin you'll need a deployed GCE API. If you haven't already created an API, complete the [Cloud Endpoints Quickstart](https://cloud.google.com/endpoints/docs/quickstart-endpoints) located in Google documentation.\n\nThe quickstart will walk you through creating a simple GCE API with a single endpoint, `/airportName`, that returns the name of an airport from its three-letter [IATA code](https://en.wikipedia.org/wiki/IATA_airport_code).\n\n*   [cURL](#82b1bb71d89a4bfe87d8bf444f0dbc08_shell)\n*   [C#](#82b1bb71d89a4bfe87d8bf444f0dbc08_csharp)\n*   [Go](#82b1bb71d89a4bfe87d8bf444f0dbc08_go)\n*   [Java](#82b1bb71d89a4bfe87d8bf444f0dbc08_java)\n*   [Node.JS](#82b1bb71d89a4bfe87d8bf444f0dbc08_node)\n*   [Obj-C](#82b1bb71d89a4bfe87d8bf444f0dbc08_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO'\n```\n\n```\nvar client = new RestClient(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://%7ByourGceProject%7D.appspot.com/airportName',\n  params: {iataCode: 'SFO'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Define the API in Auth0\n\nGo to [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis), and create a new API.\n\n![Dashboard - Create APIs - Integrations -Google Endpoints](https://images.ctfassets.net/cdy7uua7fh8z/7wUHnYBFp1jnbBurqoThpD/9f3cee86f7991ce704065d8a2079b47e/Dashboard_-_Create_APIs_-_Integrations_-Google_Endpoints.png)\n\nMake note of the **API Audience** identifier (`http://google_api` in the screenshot above) to use in the following step.\n\n## Update the API Configuration\n\nNext, we'll update the OpenAPI configuration file for the GCE API. For the sample API created during the quickstart this file is `openapi.yaml`.\n\n### Add Security Definitions\n\nOpen the configuration file and add a new `securityDefinitions` section. In this section, add a new definition (`auth0_jwt`) with the following fields:\n\n| Field | Description |\n| --- | --- |\n| `authorizationUrl` | The authorization URL, should be set to `\"https://{yourDomain}/authorize\"` |\n| `flow` | The flow used by the OAuth2 security scheme. Valid values are `\"implicit\"`, `\"password\"`, `\"application\"` or `\"accessCode\"`. |\n| `type` | The type of the security scheme. Valid values are `\"basic\"`, `\"apiKey\"` or `\"oauth2\"` |\n| `x-google-issuer` | The issuer of a credential, should be set to `\"https://{yourDomain}/\"` |\n| `x-google-jwks_uri` | The URI of the public key set to validate the JSON Web Token (JWT) signature. Set this to `\"https://{yourDomain}/.well-known/jwks.json\"` |\n| `x-google-audiences` | The API's identifier, make sure this value matches what you defined on the Auth0 dashboard for the API. |\n\nto configure this snippet with your account\n\n```\nsecurityDefinitions:\n  auth0_jwt:\n    authorizationUrl: \"https://{yourDomain}/authorize\"\n    flow: \"implicit\"\n    type: \"oauth2\"\n    x-google-issuer: \"https://{yourDomain}/\"\n    x-google-jwks_uri: \"https://{yourDomain}/.well-known/jwks.json\"\n    x-google-audiences: \"{yourApiIdentifier}\"\n```\n\n### Update the Endpoint\n\nNow, update the endpoint by adding a `security` field with the `securityDefinition` we created in the previous step.\n\n```\npaths:\n  \"/airportName\":\n    get:\n      description: \"Get the airport name for a given IATA code.\"\n      operationId: \"airportName\"\n      parameters:\n        -\n          name: iataCode\n          in: query\n          required: true\n          type: string\n      responses:\n        200:\n          description: \"Success.\"\n          schema:\n            type: string\n        400:\n          description: \"The IATA code is invalid or missing.\"\n      security:\n       - auth0_jwt: []\n```\n\nIn the above example, the `security` field tells the GCE proxy that our `/airportName` path expects to be secured with the `auth0-jwt` definition.\n\nAfter updating the OpenAPI configuration, it should look something like this:\n\nto configure this snippet with your account\n\n```\n---\nswagger: \"2.0\"\ninfo:\n  title: \"Airport Codes\"\n  description: \"Get the name of an airport from its three-letter IATA code.\"\n  version: \"1.0.0\"\nhost: \"{yourGceProject}.appspot.com\"\nschemes:\n  - \"https\"\npaths:\n  \"/airportName\":\n    get:\n      description: \"Get the airport name for a given IATA code.\"\n      operationId: \"airportName\"\n      parameters:\n        -\n          name: iataCode\n          in: query\n          required: true\n          type: string\n      responses:\n        200:\n          description: \"Success.\"\n          schema:\n            type: string\n        400:\n          description: \"The IATA code is invalid or missing.\"\n      security:\n       - auth0_jwt: []\nsecurityDefinitions:\n  auth0_jwt:\n    authorizationUrl: \"https://{yourDomain}/authorize\"\n    flow: \"implicit\"\n    type: \"oauth2\"\n    x-google-issuer: \"https://{yourDomain}/\"\n    x-google-jwks_uri: \"https://{yourDomain}/.well-known/jwks.json\"\n    x-google-audiences: \"{yourApiIdentifier}\"\n```\n\n### Redeploy the API\n\nNext, redeploy your GCE API to apply the configuration changes. If you followed along with the [Cloud Endpoints Quickstart](https://cloud.google.com/endpoints/docs/quickstart-endpoints) you can redeploy by entering the following in Google's Cloud Shell:\n\n```\ncd endpoints-quickstart/scripts\n./deploy_api.sh\n```\n\n## Test the API\n\nOnce you've redeployed, call the API again with no security.\n\n*   [cURL](#9e15fa2c186746b4814a7daf8f2dc084_shell)\n*   [C#](#9e15fa2c186746b4814a7daf8f2dc084_csharp)\n*   [Go](#9e15fa2c186746b4814a7daf8f2dc084_go)\n*   [Java](#9e15fa2c186746b4814a7daf8f2dc084_java)\n*   [Node.JS](#9e15fa2c186746b4814a7daf8f2dc084_node)\n*   [Obj-C](#9e15fa2c186746b4814a7daf8f2dc084_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO'\n```\n\n```\nvar client = new RestClient(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://%7ByourGceProject%7D.appspot.com/airportName',\n  params: {iataCode: 'SFO'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nYou'll get the following response:\n\n```\n{\n \"code\": 16,\n \"message\": \"JWT validation failed: Missing or invalid credentials\",\n \"details\": [\n  {\n   \"@type\": \"type.googleapis.com/google.rpc.DebugInfo\",\n   \"stackEntries\": [],\n   \"detail\": \"auth\"\n  }\n ]\n}\n```\n\nWhich is exactly what we want!\n\nNow go to the **Test** page of your Google Endpoints API definition on the [Auth0 Dashboard](https://manage.auth0.com/#/apis), and copy the Access Token under the Response:\n\n![Dashboard - API - Integrations - Google Endpoints - Copy Token](https://images.ctfassets.net/cdy7uua7fh8z/4FXfoYMShSPVFo5W13j3p7/bb4d4ab14abfa34266fb5b8fe12a2e91/Dashboard_-_API_-_Integrations_-_Google_Endpoints_-_Copy_Token.png)\n\nPerform a `GET` request to your API with an Authorization Header of `Bearer {ACCESS_TOKEN}` to obtain authorized access:\n\n*   [cURL](#913a82fbed7b4196b9f4f10b4f99a32a_shell)\n*   [C#](#913a82fbed7b4196b9f4f10b4f99a32a_csharp)\n*   [Go](#913a82fbed7b4196b9f4f10b4f99a32a_go)\n*   [Java](#913a82fbed7b4196b9f4f10b4f99a32a_java)\n*   [Node.JS](#913a82fbed7b4196b9f4f10b4f99a32a_node)\n*   [Obj-C](#913a82fbed7b4196b9f4f10b4f99a32a_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO' \\\n  --header 'authorization: Bearer {accessToken}'\n```\n\n```\nvar client = new RestClient(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {accessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {accessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n  .header(\"authorization\", \"Bearer {accessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://%7ByourGceProject%7D.appspot.com/airportName',\n  params: {iataCode: 'SFO'},\n  headers: {authorization: 'Bearer {accessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {accessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {accessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {accessToken}\" }\n\nconn.request(\"GET\", \"%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {accessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {accessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://%7ByourGceProject%7D.appspot.com/airportName?iataCode=SFO\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nAnd that's it!",
    "title": "Secure Google Cloud Endpoints with Auth0",
    "description": "How to secure a Google Cloud Endpoints API with Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/azure-api-management",
    "markdown": "# Integrate with Azure API Management\n\nThe [Azure API Management](https://azure.microsoft.com/en-us/services/api-management/) service allows you to create new APIs or import existing API definitions and publish them for use by the approved audiences. Auth0 makes authorizing users of your API (using OAuth 2.0 standards) easy.\n\nIn this tutorial, you'll learn how to use Auth0 to authenticate and authorize users when they access a Basic Calculator API managed by Azure API Management.\n\n## Configure Auth0\n\n### Create an API\n\nYou'll need to create an API in Auth0 to represent the API managed by the Azure API Management Service. To learn more, read [Register APIs](https://auth0.com/docs/get-started/auth0-overview/set-up-apis).\n\n1.  Navigate to [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis), and select **Create API**.\n    \n2.  Set the following parameters:\n    \n    | **Field** | **Value** |\n    | --- | --- |\n    | **Name** | `Basic Calculator` |\n    | **Identifier** | `basic-calculator` |\n    | **Signing Algorithm** | `RS256` |\n    \n3.  Select **Create**.\n    \n\n### Create a Regular Web Application\n\nYou'll need to create a Regular Web Application (RWA) in Auth0 to communicate with the OAuth 2.0 authorization server in Azure:\n\n1.  Navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select the **Create Application** button.\n    \n2.  Enter a **Name** for your application, and select **Regular Web Applications** for the application type.\n    \n\n### Create and enable a connection\n\nYou'll need to create a connection in Auth0 and enable it for your application:\n\n1.  Navigate to [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database), and select **Create DB Connection**.\n    \n2.  Enter a **Name** for your connection. We suggest choosing a name that reflects the source of users (such as `Facebook` for a Connection that contains users using their Facebook credentials or `site-sign-ups` for a database connection where users sign up on your site).\n    \n3.  Select **Create**.\n    \n4.  Navigate to your connection's **Settings** page.\n    \n5.  Switch to the **Applications** view, where you'll see a list of all the applications on your tenant.\n    \n6.  Toggle the application you created previously to enable it for the connection.\n    \n\n### Create a user\n\nYou'll need to have at least one user on your connection to test authentication and authorization. If you do not have an existing set of users for the connection, you can create one manually:\n\n1.  Navigate to [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users), and select **Create User**.\n    \n2.  Enter an **Email** and **Password**, and select the connection you created in Step 3 for the **Connection** field.\n    \n3.  Select **Create**.\n    \n\n## Configure Azure\n\n### Create Azure API Management Service\n\nYou'll need to create an API Management Service instance in Azure to manage your API:\n\n1.  In the navigation bar, select **Create a resource**.\n    \n2.  Once redirected, select **Web** > **API Management**.\n    \n3.  Provide the following configuration variables:\n    \n    | **Parameter** | **Description** |\n    | --- | --- |\n    | **Name** | The name for your service (which will also be used to create the URL you need to access the service) |\n    | **Subscription** | The Azure subscription plan with which you'll use with the service |\n    | **Resource group** | The collection of [resources](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-portal) sharing a lifecycle, permissions, and policies. You can use an existing resource group or you can create a new one (you'll need to provide a name for the group if you create a new one) |\n    | **Location** | Choose the location that services your API instance |\n    | **Organization name** | The name of your organization |\n    | **Administrator email** | The email address of the person who will be administering this instance |\n    | **Pricing tier** | The pricing tier you want, which determines the number of calls you can make to your API, as well as the maximum amount of data transfer allowed. You must opt for the [Developer plan](https://azure.microsoft.com/en-us/pricing/details/api-management/) or higher; the Consumption plan does not offer sufficient functionality for this integration to work. |\n    \n4.  Select **Create** to begin provisioning your service (this may take up to 15 minutes to complete).\n    \n\n### Import the sample API\n\nFor this tutorial, we will be importing and using the Basic Calculator API provided by Microsoft. For detailed instructions, see [Import and Publish Your First API](https://docs.microsoft.com/en-us/azure/api-management/import-and-publish#go-to-your-api-management-instance) from Microsoft.\n\nWhen done, select **Create** to import your API. You'll be redirected to the summary page for your API when it's fully imported.\n\nTo use Auth0 to secure your Azure API, you'll need to register Auth0 as an OAuth 2.0 authorization server:\n\n1.  Find the **OAuth 2.0 + OpenID Connect** area of your API Management service instance near the navigation bar. Select **OAuth 2.0**, and then select **Add**.\n    \n2.  Go to the **Add OAuth2 service** configuration screen, and select the Authorization Code grant type.\n    \n3.  Set the following parameters:\n    \n    | **Parameter** | **Description** |\n    | --- | --- |\n    | **Display name** | Enter a descriptive name for your authorization server, such as `Auth0`. |\n    | **Id** | This field should auto-populate based on the display name you provide. |\n    | **Description** | Enter a description for your authorization server, such as `Auth0 API Authentication`. |\n    | **Client registration page URL** | Enter`https://placeholder.contoso.com` as a placeholder. |\n    | **Authorization code grant types** | Select `Authorization code`. |\n    | **Authorization endpoint URL** | Refer to your tenant's [OIDC Discovery endpoint](https://{yourdomain}/.well-known/openid-configuration) and append the `audience` parameter. For example: `https://{yourDomain}/authorize?audience={API_AUDIENCE}`. |\n    | **Authorization request method** | Default is `GET`. |\n    | **Token endpoint URL** | Refer to your tenant's [OIDC Discovery endpoint](https://{yourdomain}/.well-known/openid-configuration) . |\n    | **Client authentication methods** | Select `Basic`. |\n    | **Access Token sending method** | Select `Authorization header`. |\n    | **Default scope** | Specify a default scope , if required. |\n    \n4.  Under the **Client Credentials** section, enter your Auth0 applications client ID in the **Client ID** field and client secret in the **Client secret** field.\n    \n5.  Switch to the **Redirect URI** view, and copy the URI value in the **Authorization code flow grant** field.\n    \n6.  Select **Create**.\n    \n\n### Configure Azure API to use Auth0\n\nAfter you've created your OAuth 2.0 authorization server in Azure, you'll need to update your Azure API to use Auth0 for user authorization:\n\n1.  Under the **APIs** section in the navigation, select **APIs**.\n    \n2.  Select the Basic Calculator API, and go to the **Design** view.\n    \n3.  Switch to the **Settings** view.\n    \n4.  Navigate to the **Security** section, and select **OAuth 2.0** under **User Authorization**.\n    \n5.  Select the server you configured in the previous step for the **Authorization Server** field.\n    \n6.  Click **Save**.\n    \n\n## Set the Allowed Callback URL in Auth0\n\nAfter your Azure API is provisioned and configured to use Auth0 for user authorization, you'll need to update your Auth0 application:\n\n1.  Navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications).\n    \n2.  Select your application, and switch to the **Settings** view.\n    \n3.  Enter the Redirect URI you copied previously into the **Allowed Callback URLs** field.\n    \n4.  Click **Save**.\n    \n\n## Test the integration\n\nIn to the Azure Portal, open up your instance of the API Management Service.\n\n1.  Select **Developer Console** to launch the developer-facing side of your APIs.\n    \n2.  Go to **APIs** > **Basic Calculator**. This opens up to the page where you can make a `GET` call that allows you to add two integers.\n    \n3.  Select **Try It**. This will bring up the page where you can provide the parameters for your call.\n    \n4.  Navigate to the **Authorization** section, and select **Authorization Code** (next to the **Auth0** field).\n    \n5.  A popup window will appear with the Auth0 login widget (if it doesn't, ensure that any pop-up blockers are disabled for your browser). Enter the credentials for the Auth0 user you created in Step 4, and log in.\n    \n6.  If you were able to successfully log in, a message will appear with the expiration date of the access token you can use to call your API.\n    \n7.  Navigate to the bottom, and select **Send**. If the request is successful, you'll see a message containing the `HTTP 200` response at the bottom of the page.\n    \n\n### Configure a JWT validation policy for Access Tokens\n\nIn the previous step, the user is prompted to sign in when they try to make a call from the Developer Console. The Developer Console attempts to obtain an Access Token on behalf of the user to be included in the API request. All Access Tokens will be passed to the API via the `Authorization` header.\n\nIf you want to validate the Access Token included with each request, you can do so by using the [Validate JWT](https://docs.microsoft.com/en-us/azure/api-management/api-management-access-restriction-policies#ValidateJWT) policy. Please refer to Microsoft's documentation on [setting an API Management policy](https://docs.microsoft.com/en-us/azure/api-management/set-edit-policies).",
    "title": "Integrate with Azure API Management",
    "description": "Using Auth0 as an OAuth 2.0 server to authenticate users wanting access to an API managed by the Azure API Management service",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/sso-integrations",
    "markdown": "# Single Sign-On Integrations\n\nSingle Sign-on (SSO) Integrations are client applications that enable the use of external services (e.g., [Dropbox](https://marketplace.auth0.com/integrations/dropbox-sso), [Slack](https://marketplace.auth0.com/integrations/slack-sso), or [Zoom](https://marketplace.auth0.com/integrations/zoom-sso)) for SSO. The integration allows your users to log in using Auth0's identity providers. To see the full list, explore [Auth0 Marketplace: SSO Integrations](https://marketplace.auth0.com/features/sso-integrations).\n\nFor more information on Auth0's available Connections, see [Auth0 Connections](https://auth0.com/docs/authenticate/identity-providers).",
    "title": "Single Sign-On Integrations",
    "description": "Overview of Auth0 Single Sign-on (SSO) Integrations.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations",
    "markdown": "# Export User Data to Marketing Tools\n\nWas this article helpful?",
    "title": "Export User Data to Marketing Tools",
    "description": "Learn how to export Auth0 user data to marketing applications and services.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners",
    "markdown": "# Marketplace Partners\n\nAt Auth0, we consider **extensibility** to be one of our essential product capabilities. But while our endless options for integration are an excellent way to customize your own unique solution, it can sometimes be difficult and time-consuming for our customers to figure out how to implement them. Enter the [Auth0 Marketplace](https://marketplace.auth0.com/).\n\nWe built the Marketplace as a way to connect our customers with service providers and builders who implement these types of integrations regularly. Listing your integration with Auth0 promotes your company with our customers who are looking to do more with their authentication pipeline.\n\n## Plan your integration\n\nEach integration you build should have a clear and well-explained use case solving a specific customer problem. If multiple customer problems can be solved with integrations between Auth0 and your service, we can list multiple integrations.\n\nUse the pages below to learn more about integrating with Auth0.\n\n#### Defining your Integration Use Case\n\nOur customers need to understand what problem your integration will solve and how it will go about solving it.\n\n[Learn more about integration use cases](https://auth0.com/docs/customize/integrations/marketplace-partners/defining-an-integration-use-case)\n\n#### Introduction to Integration\n\nExplore Auth0 extensibility and all the different ways that Auth0 can be customized.\n\n[Learn more about integrating](https://auth0.com/docs/customize/integrations/marketplace-partners/introduction-to-integrating-with-auth0)\n\n## Build your integration\n\nIntegrations with Auth0 are built on one or more of our extensibility points. [Sign up for a free Auth0 tenant](https://auth0.com/signup), and use our documentation to get your service working with Auth0 and learn how to get listed in our Marketplace.\n\nWe have specific guidance for our most common integrations below. Please contact our partner account team using the link at the bottom of this page if you need an example that's not listed here.\n\n#### Actions\n\nActions Integrations are closed-source, self-contained functions written in JavaScript that execute at specific points in the Auth0 platform. \n\n[Learn how to build an Action Integration](https://auth0.com/docs/customize/integrations/marketplace-partners/actions-integrations-for-partners)\n\nSocial Connection Integrations are OAuth2 sources of identity that provide a profile to Auth0 after a user successfully logs in.\n\n[Learn how to build a Social Connection](https://auth0.com/docs/customize/integrations/marketplace-partners/social-connections-for-partners)\n\n#### SSO Integrations\n\nSSO Integrations use an Auth0 identity to log in, via SAML, to an external service.\n\n[Learn how to build an SSO Integration](https://auth0.com/docs/customize/integrations/marketplace-partners/sso-integrations-for-partners)\n\n## Get listed\n\nOnce you have an integration working, Auth0 will work with you to publish the integration in the [Auth0 Marketplace](http://marketplace.auth0.com/). When you submit your integration you must provide this information:\n\n1.  The business and marketing content for your Auth0 Marketplace listing. This includes your company's description and logo and describes what the integration does.\n    \n2.  The code and configuration you used for the integration. Partners typically submit the code using GitHub.\n    \n3.  An installation guide in Markdown format with instructions on how to configure your service to work with Auth0. Please follow our [Writing Tips for Installation Guides](https://auth0.com/docs/customize/integrations/marketplace-partners/writing-tips-for-installation-guides) when you create this document.\n    \n\nIf you're ready to become a partner and submit your integration to list in the Auth0 Marketplace, please fill out the [Auth0 Marketplace support center](https://autheco.atlassian.net/servicedesk/customer/portal/1). If you ware a new partner, you will need to Apply to become a Marketplace partner, after that you can fill out the \"Submit a new Integration\" form with the information described above.\n\nSee the integration types above for more information about the code, configuration, and documentation that should be included with each integration.\n\n## Additional resources\n\n*   [The Auth0 Marketplace](https://marketplace.auth0.com/)\n    \n*   [Introducing the Auth0 Marketplace](https://auth0.com/blog/introducing-auth0-marketplace/)\n    \n*   [Why and How We Built Auth0 Marketplace (video)](https://avocadolabs.dev/recordings/why-and-how-we-built-auth0-marketplace/)\n    \n*   [Become an Auth0 Partner](https://auth0.com/partners#form)",
    "title": "Marketplace Partners",
    "description": "Learn about integrating with Auth0 as part of the Auth0 Marketplace Community. For current and potential Marketplace Partners.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms",
    "markdown": "# CMS Identity Plugins\n\nAuth0 provides Content Management System Plugins/Extensions to integrate your CMS installation with your Auth0 account. These plugins enable Single Sign-on (SSO) for Enterprises, social login and user/password login through all your instances and platforms.\n\nLogin features are implemented through a new Login Widget (powered by Auth0) that enables:\n\n*   SSO with Enterprise Directories (LDAP, AD, Google Workspace, Office365 and SAML Provider)\n    \n*   Shared User/Password between multiple WordPress accounts for SSO\n    \n*   SSO with over 30 [Social Providers](https://auth0.com/docs/identityproviders)\n    \n*   User Management Dashboard\n    \n*   Optional Two Factor Authentication\n    \n*   SSO between WordPress and other applications\n    \n*   Reporting and Analytics\n    \n\n## WordPress Plugin\n\n*   [How does it work?](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n    \n*   [Installation](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n    \n*   [Configuration](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n    \n*   [Troubleshoot](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0)\n    \n\n## SharePoint\n\n*   [Github Source](https://github.com/auth0/auth0-sharepoint)",
    "title": "CMS Identity Plugins",
    "description": "Explains CMS Identity Plugins such as WordPress and Joomla",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/sharepoint-2010-2013",
    "markdown": "# Integrate with SharePoint 2010/2013\n\nAuth0 can help to radically simplify the authentication process for SharePoint. In this tutorial, you'll learn how to add Single Sign-on (SSO) to Sharepoint using Auth0. Your users will be able to log in using any of our [Social Identity Providers](https://auth0.com/docs/connections/identity-providers-social) (Facebook, X, Github, and so on), [Enterprise Providers](https://auth0.com/docs/connections/identity-providers-enterprise) (LDAP, Active Directory, ADFS, and so on) or with a username and password.\n\n## Setup\n\n### 1\\. Adding the Integration to your account\n\nThe first thing you need to do is go to the [SSO Integrations](https://manage.auth0.com/#/externalapps/create) section in the Dashboard and choose **SharePoint** from the list of apps.\n\n### 2\\. Follow the Live Documentation\n\nOn the **Settings** tab you'll need to enter the URL of the SharePoint Web Application and the external URL (typically the internet endpoint in your Alternate Access Mappings).\n\nThe Live Documentation will first start with the installation of the Auth0 CmdLets for SharePoint:\n\n![SharePoint Management Shell - cmdlets installation](https://images.ctfassets.net/cdy7uua7fh8z/10GyFjDBJS0PoXITPeh30v/4304616303b13441c0b306be2291271f/sharepoint-cmdlets-installation.png)\n\nOnce these have been installed you'll be able to enable/disable Auth0 and the Claims Provider for the different Web Applications. You will need to enable authentication with Auth0:\n\n![SharePoint Management Shell - Auth0 install - Enable Authentication](https://images.ctfassets.net/cdy7uua7fh8z/e3WetoxFwzfQ2uo7Rhum4/f53189f6fd8247ba2f472dbc10abe5dc/sharepoint-auth-installation.png)\n\nAnd then install the Claims Provider, to make sure that the People Picker and permissions work correctly:\n\n![SharePoint Management Shell - install claims provider](https://images.ctfassets.net/cdy7uua7fh8z/2WYY6vJdeRqFZUS9LfgzK5/5b35393140b7c818fc811afd0ddc3220/sharepoint-cp-installation.png)\n\nOnce these scripts have been executed you'll complete the configuration in Central Administration:\n\n![SharePoint central admin - complete configuration](https://images.ctfassets.net/cdy7uua7fh8z/3VgxRGBz9YNbFaJP7Sgz8T/64673af31849333bf370c3f46b9687f1/sharepoint-central-admin.png)\n\nNote that the call to `Enable-Auth0` can be adapted to:\n\n*   Change the unique identifier for users (such as email or a user id)\n    \n*   Allow additional claims to be passed through to SharePoint\n    \n*   Enable or disable the default Windows Authentication\n    \n\nThe following example also adds the Role claim to the claims mapping and allows Windows Authentication:\n\n```\nEnable-Auth0\n  -auth0Domain:\"fabrikam.auth0.com\"\n  -clientId:\"bOFty3tWgpijnwMcltysNFqHgO1ziz1I\"\n  -webAppUrl:\"http://fabrikam-sp/\"\n  -identifierClaimType:\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n  -claims:@(\n    \"Email|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n    \"Role|http://schemas.microsoft.com/ws/2008/06/identity/claims/role\", \"Client ID|http://schemas.auth0.com/clientID\",\n    \"Given Name|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\",\n    \"Surname|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\", \"Picture|http://schemas.auth0.com/picture\")\n  -allowWindowsAuth\n```\n\n### 3\\. You now have Sharepoint configured\n\nYou have configured SharePoint to use Auth0 as the SSO broker. When your users visit your site they'll be presented with a login page showing all the connections enabled for that application.\n\nDepending on which claims have been mapped when installing the claims provider this additional information will also be available in the user's personal settings page:\n\n![SharePoint - user information](https://images.ctfassets.net/cdy7uua7fh8z/7h2QeT1ama9IqZ2kDr4KT/5f689e49311471736c74a3eb5468c390/sharepoint-user-info.png)![SharePoint central admin - complete configuration](https://images.ctfassets.net/cdy7uua7fh8z/3VgxRGBz9YNbFaJP7Sgz8T/64673af31849333bf370c3f46b9687f1/sharepoint-central-admin.png)\n\nNote that you can adapt the call to `Enable-Auth0` to:\n\n*   Change the unique identifier for users (such as email or a user id)\n    \n*   Allow additional claims to be passed through to SharePoint\n    \n*   Enable or disable the default Windows Authentication\n    \n\nThis example also adds the Role claim to the claims mapping and allows Windows Authentication:\n\n```\nEnable-Auth0\n  -auth0Domain:\"fabrikam.auth0.com\"\n  -clientId:\"bOFty3tWgpijnwMcltysNFqHgO1ziz1I\"\n  -webAppUrl:\"http://fabrikam-sp/\"\n  -identifierClaimType:\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n  -claims:@(\n    \"Email|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n    \"Role|http://schemas.microsoft.com/ws/2008/06/identity/claims/role\", \"Client ID|http://schemas.auth0.com/clientID\",\n    \"Given Name|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\",\n    \"Surname|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\", \"Picture|http://schemas.auth0.com/picture\")\n  -allowWindowsAuth\n```\n\nSharePoint will now use Auth0 as the SSO broker.\n\n## Customizing the Login Page\n\nYou can customize the login page by following [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) instructions.\n\nYou might wish to provide a way to let users authenticate with Sharepoint using Windows Authentication, bypassing Auth0. You can do that by customizing the login page, adding a link to the Windows Authentication endpoint (usually similar to `https://yoursharepointserver/_windows/default.aspx?ReturnUrl=/_layouts/15/Authenticate.aspx`).\n\nOn way of doing it is by using jQuery to modify the Lock widget and add a link to the Windows Authentication endpoint.\n\nYou need to add a reference to jQuery at the top of the `<body>` section of the customized login page.\n\n```\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\n```\n\nBefore calling `lock.show()`, add code to modify the HTML DOM that adds the link.\n\n```\n// construct Lock\n// var lock = ...\n[...]\n// One or more SharePoint client IDs here for which you want\n// a Windows Auth button\nvar sharepointClientIDs = ['your_sharepoint_client_id'];\n\nif (sharepointClientIDs.indexOf(config.clientID) >= 0) {\n  lock.on('signin ready', function() { \n    var getParameterByName = function(name) {\n      name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n      var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n      var regex = new RegExp(regexS);\n      var results = regex.exec(window.location.search);\n      if (results == null) return null;\n      else return results[1];\n    };\n    // get the host from the callback URL\n    var parser = document.createElement('a');\n    parser.href = config.callbackURL;\n    var host = parser.host;\n    var windowsAuthURL = \"https://\" + host + \"/_windows/default.aspx?ReturnUrl=/_layouts/15/Authenticate.aspx\";\n    var wctx = getParameterByName(\"wctx\");\n    if (wctx) {\n      windowsAuthURL += \"&Source=\" + wctx;\n    }\n\n    $('.auth0-lock-tabs-container') \n    .after('<div><p class=\"auth0-lock-alternative\" style=\"padding:5px 0;\">' + \n      '<a class=\"auth0-lock-alternative-link\" ' + \n      'href=\"/docs/'+ windowsAuthURL + '\">' + \n      'Login with Windows Authentication!!!</a>' + \n      '</p><p><span>or</span></p></div>').attr('href','https://nowhere');\n  });\n}\n\nlock.show();\n```\n\n## Troubleshooting\n\nWhen working with additional claims and authorization it can always be useful to view the claims for the current user. Microsoft Professional [Liam Clearly](https://www.helloitsliam.com/)'s article, [Claims Viewer Web Part](https://sharepointobservations.wordpress.com/2013/08/21/sharepoint-2013-and-adfs-2-0-test-with-claims-viewer-web-part/), can be used to troubleshoot any issues with the user's claims:\n\n### Logs in SP2010\n\nErrors and warnings are logged to SharePoint's Unified Logging Service and tools like the ULS Viewer can be used to troubleshoot any issues you might have when using the Claims Provider.\n\nTo read more about ULS View and retrieve specifications, see Microsoft documentation [ULS Viewer](http://www.microsoft.com/en-us/download/details.aspx?id=44020).\n\n### Logs in SP2013\n\nFor SharePoint 2013 we no longer use the Unified Logging Service for our logs, but we've moved to Event Tracing for Windows instead. This delivers more performance and gives you multiple ways of capturing all the logged events.\n\nTo view the logs in real-time you can download the Auth0 [Logs Processor](https://github.com/auth0/auth0-sharepoint/releases) from Github. Run this tool on your SharePoint Server(s) to see every call SharePoint is making to the Claims Provider:\n\n## Next Steps\n\nThe claims being passed through from Auth0 can also be used for authorization in SharePoint. For example, a user with the Role claim containing **Fabrikam HR** should have access or be a Contributor on a specific site.\n\nLet's take Azure AD as an example. In this Cloud Directory users can be part of groups and David is part of Fabrikam HR.\n\nWhen David logs in using his Azure AD account (and the Security Groups attribute is enabled for that connection) the group memberships will be stored in the `groups` attribute of the user's profile.\n\nIf we want to make these groups available as Roles in SharePoint we'll need to write a [Rule](https://manage.auth0.com/#/rules) that adds this to the SAML configuration. This rule will only run for the application named **Fabrikam Intranet (SharePoint)**.\n\n```\nfunction (user, context, callback) {\n  if (context.clientName === 'Fabrikam Intranet (SharePoint)') {\n    context.samlConfiguration.mappings = {\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier': 'user_id',\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'email',\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname': 'given_name',\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname': 'family_name',\n        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn': 'upn',\n        'http://schemas.microsoft.com/ws/2008/06/identity/claims/role': 'groups'\n    };\n  }\n\n  callback(null, user, context);\n}\n```\n\nThis will add an additional outgoing claim `http://schemas.microsoft.com/ws/2008/06/identity/claims/role` containing the `groups` and which will be used by SharePoint for authorization.\n\nWhen installing the Claims Provider we need to allow the Role claim to be passed through to SharePoint, by adding it to the claims mapping list:\n\n```\nEnable-Auth0\n  -auth0Domain:\"fabrikam.auth0.com\"\n  ...\n  -claims:@(\n    \"Email|http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n    \"Role|http://schemas.microsoft.com/ws/2008/06/identity/claims/role\",\n    ...)\n  ...\n  -Verbose\n```\n\nBy default a user won't have access to the site.\n\nNow instead of adding that specific user to a SharePoint Group (eg: Contributors) we can now add a **Role** to a SharePoint Group. Here's a sample PowerShell script that shows how to add \"Fabrikam HR\" members to the Contributors group:\n\n```\n$webName = \"http://fabrikam-sp\"\n$groupName = \"Contributors\"\n$roleClaim = \"Fabrikam HR\"\n\n$sts = Get-SPTrustedIdentityTokenIssuer \"Auth0\"\n$claimPrincipal = New-SPClaimsPrincipal -ClaimValue $roleClaim -ClaimType \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -TrustedIdentityTokenIssuer $sts\n\n$web = Get-SPWeb $webName\n$user = New-SPUser -UserAlias $claimPrincipal.ToEncodedString() -Web $web\n\n$group = $web.SiteGroups[$groupName]\n$group.AddUser($user)\n```\n\nAfter adding this claim value to the Contributors group David will be able to access the site and edit its contents.\n\n### User Profile Synchronization\n\nBy default SharePoint is able to synchronize user profile information originating from Active Directory. Now with Auth0 users can come from different types of connections (from social to enterprise) which will require a different approach to synchronize user profiles.\n\nA first approach would be to create a timer job that runs every few hours, queries the Auth0 Users Endpoint and synchronizes the profile information for those users.\n\n```\nusing System;\n\nusing Microsoft.SharePoint;\nusing Microsoft.SharePoint.Administration;\n\nusing Microsoft.Office.Server;\nusing Microsoft.Office.Server.UserProfiles;\n\nnamespace UserProfileSync\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Call the Auth0 Management API - https://docs.auth0.com/api/v2\n\n            using (var site = new SPSite(\"http://servername\"))\n            {\n                var context = SPServiceContext.GetContext(site);\n                var profileManager = new UserProfileManager(context);\n\n                var accountName = \"i:05.t|auth0|john@example.org\";\n                var userProfile = profileManager.GetUserProfile(accountName);\n                userProfile[PropertyConstants.HomePhone].Value = \"+1 594 9392\";\n                userProfile.Commit();\n            }\n        }\n    }\n}\n```\n\nAlternatively this logic could also be implemented as an HttpModule which runs each time the user logs in:\n\n```\npublic class PersistUserClaimsHttpModule : IHttpModule\n{\n    private SPFederationAuthenticationModule FederationModule\n    {\n        get { return HttpContext.Current.ApplicationInstance.Modules[\"FederatedAuthentication\"] as SPFederationAuthenticationModule; }   \n    }\n\n    public void Init(HttpApplication context)\n    {\n        FederationModule.SecurityTokenValidated += OnFederationSecurityTokenValidated;\n    }\n\n    private void OnFederationSecurityTokenValidated(object sender, SecurityTokenValidatedEventArgs e)\n    {\n        // Use e.ClaimsPrincipal\n    }\n}\n```",
    "title": "Integrate with SharePoint 2010/2013",
    "description": "How to integrate with SharePoint 2010/2013, including set up, troubleshooting, accessing logs and next steps.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/connecting-provider-hosted-apps-to-sharepoint-online",
    "markdown": "# Connect Provider Hosted Apps to SharePoint Online\n\nAuth0 can help radically simplify the authentication process for SharePoint Apps. Auth0 will negotiate an Access Token you can the use to call SharePoint APIs.\n\nYou won't need any special libraries. You can use any of the SDKs supported by Auth0.\n\n## 1\\. Register your application in Auth0\n\nJust register a new application in Auth0 as you would normally do: **Applications > NEW**. Pick up any of the SDKs available for detailed instructions. Keep the `client_id` handy, as you will need it in the next step.\n\n## 2\\. Create a package for your application\n\nYou need to obtain a **Client ID** and a **Client Secret** for your application. There are many ways of registering your application depending on the expected usage.\n\n[Register SharePoint Add-ins (Microsoft Docs)](https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/register-sharepoint-add-ins) explains all different ways of registering your application in SharePoint. This step in the tutorial will use the simplest form: using self-registration in a specific tenant (yours).\n\n### Open SharePoint Online\n\nThe URL for the dashboard is `https://{your Office365 tenant}.sharepoint.com/_layouts/15/appregnew.aspx`\n\n### Generate a Client\\_Id and ClientSecret:\n\n![SharePoint - generate client id - generate client secret](https://images.ctfassets.net/cdy7uua7fh8z/2BLGIJdnfbknayoyF4U5wP/70e66c7d10a001e0eb7ffa7aaebfb035/90SvG.png)\n\n### Complete the information in the form:\n\nSince Auth0 is in between your app and the Office 365 infrastructure, you need to use this URL for the app:\n\n**App Domain**:\n\n{yourDomain}\n\n**Redirect URI**:\n\n[https://{yourDomain}/login/callback?SP\\_APP\\_TOKEN&connection=CONNECTION&client\\_id={yourClientId}&redirect\\_uri={https://yourApp/callback}](https://{yourdomain}/login/callback?SP_APP_TOKEN&connection=CONNECTION&client_id={yourClientId}&redirect_uri={https://yourApp/callback})\n\n*   `connection` is just the name you will use in Auth0's connections (such as \"sharepoint\").\n    \n*   `client_id` identifies your app in Auth0 (created in steps 1).\n    \n*   `redirect_uri` is the location in your actual app, where your users will land eventually after all negotiations complete. If you don't specify it, it will always be the app's callback URL defined in Auth0 (it could be localhost)\n    \n\n### Package the app and upload to SharePoint:\n\nComplete the information in your app manifest in Visual Studio:\n\n![SharePoint - Visual Studio - Application Manifest](https://images.ctfassets.net/cdy7uua7fh8z/36dscLHlLHZjJx1rLgrQ7N/8d64ec7a51f4e053627ecb5dfd3c7707/90SEc.png)\n\nNotice the `Query string` will be exactly like the `Redirect URI` you completed before. Then right-click on the project and select `Publish`:\n\nCreate a **Publishing Profile** (you will have to enter the same **Client Id** & **Client Secret** obtained in the SharePoint dashboard).\n\nClick on **Package** and upload the resulting file to SharePoint.\n\n## 3\\. Create the Connection in Auth0\n\nThe last step in the integration is to add a SharePoint connection in Auth0.\n\nYou will need:\n\n*   `Connection Name`. This is an arbitrary name. It has to match with what you entered in step 2.\n    \n*   `Client Id` & `Client Secret`. Also need to match what you entered in step 2.\n    \n*   `Test SharePoint Site Url`. This is the SP site URL used to test the connection. (such as when pressing the 'Try' button on the dashboard). This is never used at runtime because users will always follow the link to your site from within SharePoint.\n    \n\nUsers will install your app from the Office Marketplace. When they click on the link, they will be directed to Auth0, which will negotiate the Access Token for you, and finally to your app. Your app will receive a `User Profile` that will look like this:\n\n![Office Marketplace - Redirect -  User Profile Example](https://images.ctfassets.net/cdy7uua7fh8z/4piqwmx1ONWMd3kjTFMq4I/714545f5cda3ab1d1dd5c620bc96b083/8Xp6x.png)\n\nThe following properties will be included: `cacheKey`, `refresh_token`, `host`, and `site`. These will allow you to call back SharePoint APIs (such as lists).",
    "title": "Connect Provider Hosted Apps to SharePoint Online",
    "description": "How to connect provider hosted apps to SharePoint Online.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/authenticating-and-authorizing-a-tessel-device-with-auth0",
    "markdown": "# Authenticating & Authorizing a Tessel device with Auth0\n\n```\nvar http = require('https');\nvar tessel = require('tessel');\n\ntessel.syncClock(function () {\n\n  var device_id = 'tessel-01';\n  var password = 'THE TESSEL PASSWORD';\n\n  authenticate(device_id, password, function(e,token){\n\n    if(e) return console.log(\"Error:\" + e);\n\n    getDeviceProfile(token.access_token, function(e, profile){\n      console.log(\"Device profile:\");\n      console.log(profile);\n    });\n  });\n\n  function getDeviceProfile(token, done){\n    request('{yourDomain}',\n          '/userinfo',\n          'GET',\n          {\n          \"Content-type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + token\n        },\n        null,\n        function(e,response){\n          if(e) return done(e);\n          done(null, JSON.parse(response));\n        });\n  }\n\n  function authenticate(device_id, password, done)\n  {\n    request('{yourDomain}',\n          '/oauth/ro',\n          'POST',\n          {\n          \"Content-type\": \"application/json\",\n        },\n        JSON.stringify({\n            client_id:   '{yourClientId}',\n            username:    device_id,\n            password:    password,\n            connection:  'devices',\n            grant_type:  \"password\",\n            scope: 'openid'\n          }),\n          function(e,response){\n            if(e) return done(e);\n            done(null, JSON.parse(response));\n        });\n  }\n\n  function request(host, path, method, headers, body, done){\n    var options = {\n      hostname: host,\n      path: path,\n      method: method,\n      headers: headers\n    };\n\n    var req = http.request(options, function(res) {\n      res.setEncoding('utf8');\n\n      var response = \"\";\n\n      res.on('data', function (chunk) {\n        response += chunk;\n      });\n\n      res.on('end', function(){\n        done(null, response);\n        });\n    });\n\n    req.on('error', function(e) {\n      done(e);\n    });\n\n    if( body ) req.write(body);\n    req.end();\n  }\n});\n```",
    "title": "Authenticating & Authorizing a Tessel device with Auth0",
    "description": "How to authenticate and authorize a Tessel device with Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/authenticate-devices-using-mqtt",
    "markdown": "# Authenticating & Authorizing Devices using MQTT with Auth0\n\n[](http://en.wikipedia.org/wiki/MQ_Telemetry_Transport)MQTT is a lightweight protocol often used for devices to communicate with other systems. It is designed for the **publish/subscribe** messaging pattern. You can read more about [MQTT](http://en.wikipedia.org/wiki/MQ_Telemetry_Transport) on Wikipedia.\n\nGenerally speaking there are 3 components:\n\n1.  A `publisher` of messages.\n    \n2.  A `subscriber` to messages.\n    \n3.  A `broker` that connects one and the other.\n    \n\nThere's a notion of `topics` (a.k.a. as `channels` or `subjects`) which messages are associated with. Topics are used to route messages between publishers and subscribers.\n\nThe MQTT protocol supports a basic authentication mechanism based on `usernames` & `passwords`. These credentials are sent with the `CONNECT` message.\n\nThis article shows an integration between nodejs based MQTT broker: [mosca](https://github.com/mcollina/mosca) and [Auth0](http://auth0.com/). In this example, Auth0 is used to **authenticate** `publishers` and `subscribers` to the broker, and then **authorize** routing of messages.\n\n![MQTT Data Flow Diagram](https://images.ctfassets.net/cdy7uua7fh8z/1BAQm0lXvF7A3VqIciOagV/776a17e3372964acc3ac67a71a026e06/2023-09-22_13-15-29.png)\n\n## Components of the solution\n\n### The Broker\n\n**mosca** is straightforward to host and can be embedded in other servers. For the purpose of this sample, we simply self-host a **mosca** server:\n\n```\nvar mosca = require('mosca')\nvar Auth0Mosca = require('auth0mosca');\n\nvar settings = {\n  port: 9999,\n};\n\n//'Thermostats' is a Database connection where all devices are registered.\nvar auth0 = new Auth0Mosca('https://eugeniop.auth0.com', '{Your Auth0 ClientID}', '{Your Auth0 Client Secret}','Thermostats');\n\n//Setup the Mosca server\nvar server = new mosca.Server(settings);\n\n//Wire up authentication & authorization to mosca\nserver.authenticate = auth0.authenticateWithCredentials();\nserver.authorizePublish = auth0.authorizePublish();\nserver.authorizeSubscribe = auth0.authorizeSubscribe();\n\nserver.on('ready', setup);\n\n// Fired when the mqtt server is ready\nfunction setup() {\n    console.log('Mosca server is up and running');\n}\n\nserver.on('clientConnected', function(client) {\n  console.log('New connection: ', client.id );\n});\n```\n\nThis creates a server listening for MQTT messages on port 9999. **mosca** allows you to override the 3 functions used to authenticate and authorize operations.\n\nIn this sample, we are using a very simple module `auth0mosca` to perform these functions. Auth0 is wired up to **mosca**.\n\n### The Auth0Mosca module\n\nThis little [module](https://www.npmjs.org/package/auth0mosca) provides the 4 functions used by **mosca**, `authenticateWithCredentials`, `authenticateWithJWT`, `authorizePublish` and `authorizeSubscribe`:\n\n```\nvar request = require('request');\nvar jwt = require('jsonwebtoken');\n\nfunction Auth0Mosca(auth0Namespace, clientId, clientSecret, connection)\n{\n  this.auth0Namespace = auth0Namespace;\n  this.connection = connection;\n  this.clientId = clientId;\n  this.clientSecret = clientSecret;\n}\n\nAuth0Mosca.prototype.authenticateWithJWT = function(){\n\n  var self = this;\n\n  return function(client, username, password, callback) {\n\n    if( username !== 'JWT' ) { return callback(\"Invalid Credentials\", false); }\n\n    // console.log('Password:'+password);\n\n    jwt.verify(password, self.clientSecret, function(err,profile){\n          if( err ) { return callback(\"Error getting UserInfo\", false); }\n          console.log(\"Authenticated client \" + profile.user_id);\n          console.log(profile.topics);\n          client.deviceProfile = profile;\n          return callback(null, true);\n        });\n  }\n}\n\nAuth0Mosca.prototype.authenticateWithCredentials = function(){\n\n  var self = this;\n\n  return function(client, username, password, callback) {\n    \n    var data = {\n        client_id:   self.clientId, // {client-name}\n        username:    username.toString(),\n        password:    password.toString(),\n        connection:  self.connection,\n        grant_type:  \"password\",\n        scope: 'openid name email' //Details: https:///scopes\n    };\n\n    request.post({\n        headers: {\n                \"Content-type\": \"application/json\"\n            },\n        url: self.auth0Namespace + '/oauth/ro',\n        body: JSON.stringify(data)\n      }, function(e,r,b){\n        if(e){\n          console.log('Error in Authentication');\n          return callback(e,false);\n        }\n        var r = JSON.parse(b);\n\n        if( r.error ) { return callback( r, false); }\n\n        jwt.verify(r.id_token, self.clientSecret, function(err,profile){\n          if( err ) { return callback(\"Error getting UserInfo\", false); }\n          client.deviceProfile = profile;\n          return callback(null, true);\n        });\n    });\n  }\n}\n\nAuth0Mosca.prototype.authorizePublish = function() {\n  return function (client, topic, payload, callback) {\n   callback(null, client.deviceProfile && client.deviceProfile.topics && client.deviceProfile.topics.indexOf(topic) > -1);\n  }\n}\n\nAuth0Mosca.prototype.authorizeSubscribe = function() {\n  return function(client, topic, callback) {\n  callback(null, client.deviceProfile && client.deviceProfile.topics && client.deviceProfile.topics.indexOf(topic) > -1);\n}\n\nmodule.exports = Auth0Mosca;\n```\n\n`authenticateWithCredentials` uses the [OAuth2 Resource Owner Password Credential Grant](https://auth0.com/docs/authenticate/protocols) to authenticate the broker and all connections to it. Each time a `publisher` or a `subscriber` send a **CONNECT** message to the broker the `authenticate` function is called. In it we call the Auth0 endpoint and forward the device's `username`/`password`. Auth0 validates this against its account store (that is the first `request.post` in the code). If successful, it validates and parses the JSON Web Token (JWT) to obtain the device profile and adds it to the `client` object that represents either the `subscriber` or the `publisher`. That's done in the `jwt.verify` call.\n\nBy convention, all devices connected to the broker have an account in Auth0.\n\nNotice that the Device Profile also has a property `topics`. This is an array with all topics this particular device is allowed to. In the screenshot above, `thermostat-1a` will be allowed publishing (or subscribing) to topics `temperature` and `config`.\n\nThe `authorizePublish` and `authorizeSubscribe` functions simply check that a particular requested topic is present in this list.\n\nThe `authenticateWithJWT` expects a JWT in the `password` field. The flow in this case is slightly different:\n\n1.  The publisher & subscriber will obtain a token\n    \n2.  They connect to `mosca` submitting the JWT\n    \n3.  `mosca` validates the JWT\n    \n4.  Messages are sent and re-transmitted to subscribers\n    \n\n![MQTT JSON Web Token Data Flow ](https://images.ctfassets.net/cdy7uua7fh8z/38KV0HggAdQDkLxqZuAOph/e134f43c290d432064f288e549a59789/2023-09-22_13-15-47.png)\n\nPublishers and subscribers will obtain the JWT through some means. Notice that the broker doesn't need to communicate with Auth0 anymore. JWTs are self-contained artifacts that can be validated with the secret used to sign them.\n\n### The Publisher\n\nFor this sample, the publisher is a simple nodejs program that uses the `mqtt` module, and adds the right credentials:\n\n```\nvar mqtt = require('mqtt')\n  , host = 'localhost'\n  , port = '9999';\n\nvar settings = {\n  keepalive: 1000,\n  protocolId: 'MQIsdp',\n  protocolVersion: 3,\n  clientId: 'Thermostat 1a',\n  username:'thermostat-1a',\n  password:'the password'\n}\n\n// client connection\nvar client = mqtt.createClient(port, host, settings);\n\nsetInterval(sendTemperature, 2000, client);\n\nfunction sendTemperature(client){\n  var t = {\n    T: Math.random() * 100,\n    Units: \"C\"\n  };\n\n  client.publish('temperature', JSON.stringify(t));\n}\n```\n\nOf course `username` & `password` here will have to match whatever is stored in Auth0.\n\n### The subscriber\n\nThe subscriber is very similar to the publisher:\n\n```\nvar mqtt = require('mqtt')\n  , host = 'localhost'\n  , port = '9999';\n\nvar settings = {\n  keepalive: 1000,\n  protocolId: 'MQIsdp',\n  protocolVersion: 3,\n  clientId: 'Reader-X1',\n  username:'reader-X1',\n  password:'the password'\n}\n\n// client connection\nvar client = mqtt.createClient(port, host, settings);\n\n\nclient.subscribe('temperature');\n\nclient.on('message', function(topic, message) {\n\n  if(topic ==='temperature')\n  {\n    console.log('New reading', message);\n  }\n});\n```\n\n## Summary\n\nThis shows how easy it is to use Auth0 in various scenarios. Auth0's user store is being used to manage devices. Of course much more sophisticated authorization rules could be written based on other conditions: time, location, device\\_id, and so on All these would be very simple to implement, either through additional profile attributes or through [](https://auth0.com/docs/rules)Rules. This also shows how the flexible Auth0 Profile can be extended to support arbitrary artifacts (such as `topics` in the example).\n\nTo learn more about Rules, you can review [Auth0 Rules](https://auth0.com/docs/rules).\n\nΙt is never a good idea to send credentials (`username`/`password`) over unsecured networks. There are other implementations that provide transport level security that would prevent message contents to be revealed. **mosca** supports TLS as an example. Likely a production deployment would favor this, unless all traffic happens in a closed network.\n\n### Acknowledgements\n\nMany thanks to [Matteo Collina](http://www.matteocollina.com/) for the review of this article, and for building the awesome **mosca**.",
    "title": "Authenticating & Authorizing Devices using MQTT with Auth0",
    "description": "How to authenticate and authorize devices using MQTT with Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/migrate-office365-connections-to-windows-azure-ad",
    "markdown": "# Migrate Office365 Connections to Windows Azure AD\n\nOffice365 has been deprecated. You should migrate your Office365 Connections to Windows Azure AD Connections.\n\nSince early days, we supported authenticating users with Office365. Office365 has always used Windows Azure AD behind the scenes, but there wasn't a good UI to create an \"application\" in Windows Azure AD. That's why you had to create it in the Seller Dashboard. Moving forward Microsoft wants you to use Windows Azure AD and you can now easily create a directory associated with your Office365 account and the application.\n\n## How to migrate to Azure\n\n1.  Create a Windows Azure AD subscription (free)\n    \n2.  Create a Directory (that will be associated with your Office365 account) and an application. To learn more, read [Connect Your App to Microsoft Azure Active Directory](https://auth0.com/docs/waad-clientid).\n    \n\nIf you were using the `user_id` in your application, notice that it will change from `office365|....some-guid....` to `waad|...email....`.",
    "title": "Migrate Office365 Connections to Windows Azure AD",
    "description": "Details migrating Office365 connections to Windows Azure AD.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/office-365-custom-provisioning",
    "markdown": "# Office 365 Custom Provisioning\n\nThe default Office 365 setup includes Active Directory and DirSync/Azure AD Sync Services, which synchronize and provision AD users living in your Azure AD for SSO. In this configuration, Auth0 is the identity provider, we provide Single Sign-on (SSO) for these users.\n\nBut what if you want to allow contractors, partners or even customers to access your Office 365 environment (e.g., SharePoint)? In that case, the default approach is not optimal because these users would need to be created in your AD environment. Instead, you need to custom provision Azure AD users using [Auth0 Rules](https://auth0.com/docs/customize/rules).\n\nCustom provisioning allows you to create users in Azure AD (and effectively Office 365) just as they log in from any connection available in Auth0. (In this case, your rule takes over DirSync's task for any type of connection where DirSync would not work.) This configuration allows you to offer a variety of login options (including, Facebook, LinkedIn, Google Workspace) to your Office 365 environment.\n\n## Prerequisites\n\nBefore you can configure custom provisioning, you must:\n\n*   [Configure Office 365](https://marketplace.auth0.com/integrations/office-365-sso): Register a custom domain and configure Office 365 as a third-party application in Auth0.\n    \n\n## Configure Azure AD\n\nCustom provisioning uses the Azure AD Graph API to provision new users in Azure AD. To access the Azure AD Graph API, you must create an application within the Azure AD Directory that has been linked to the Office 365 subscription:\n\n1.  Log in to the [Azure Portal](https://portal.azure.com/).\n    \n2.  Choose [Azure Active Directory in the left navigation](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n    \n3.  Select **App registrations** in the new menu.\n    \n4.  Click on **New application registration**.\n    \n5.  Fill the form:\n    \n    1.  Input a name for the application (such as `Auth0 Provisioning`)\n        \n    2.  Select **Web app / API** as the **Application type**.\n        \n    3.  Insert a sign-on URL. You can enter any valid URL; this won't really be used.\n        \n6.  The recently-created app will appear in the **App registrations** list. Select it.\n    \n7.  In the **Settings** blade (Microsoft call these sections \"blades\"), choose **Keys**.\n    \n8.  Input a **Description** (like `Auth0 Provision`), and choose a **Duration** for the new key. If you choose to issue a non-permanent key, take note of the expiration date and create a reminder to replace the key with a new one before it expires.\n    \n9.  Click to save the key, then copy the **App Key**. This key will be shown only once, and it's needed for the Auth0 rule.\n    \n    ![Integrations - Office 365 - Application key](https://images.ctfassets.net/cdy7uua7fh8z/57fQqQpavwumy5VBoqxFjG/2ad33b1fd2151f64ea9a7ae236b4a3c6/office-365-app-key.png)\n10.  Choose **Required permissions**, and click **Add** in the new blade.\n    \n11.  Select the **Microsoft Graph** API, then check `Read and write directory data` under **Application Permissions**.\n    \n12.  Back in the **Required permissions**, click on the **Grant Permissions** button, and then click **Yes** to grant the requested permissions.\n    \n\nThe following rule shows the provisioning process:\n\n1.  If the user comes from the AD connection, skip the provisioning process (because this will be handled by DirSync).\n    \n2.  If the user was already provisioned in Azure AD, just continue with the login transaction.\n    \n3.  Use the Azure AD Client ID and Key to get an Access Token for the Graph API.\n    \n4.  Create a user in Azure AD.\n    \n5.  Assign a license to the user.\n    \n6.  Continue with the login transaction.\n    \n\nThe username is generated with the `createAzureADUser` function, which by default, generates a username in the format `auth0-c3fb6eec-3afd-4d52-8e0a-d9f357dd19ab@fabrikamcorp.be`. You can change this to whatever you like; just make sure this value is unique for all your users.\n\nMake sure you set the correct values for the `AUTH0_OFFICE365_CLIENT_ID`, `AAD_CUSTOM_DOMAIN`, `AAD_DOMAIN`, `AAD_APPLICATION_ID` and `AAD_APPLICATION_API_KEY` values in your configuration object to make the values available in your rule code. To learn more, read [Store Configuration for Rules](https://auth0.com/docs/customize/rules/configuration).\n\nIn the code, you'll also see that the rule will wait about 15 seconds after the user is provisioned. This is because it takes a few seconds before the provisioned user is available for Office 365.\n\n```\nfunction (user, context, callback) {\n  // Require the Node.js packages that we are going to use.\n  // Check this website for a complete list of the packages available:\n  // https://auth0-extensions.github.io/canirequire/\n  var rp = require('request-promise');\n  var uuidv4 = require('uuid');\n\n  // The name of your Active Directory connection (if using one)\n  var AUTH0_AD_CONNECTION = 'Travel0AD';\n  // The client_id of your Office 365 SSO integration\n  // You can get it from the URL when editing the SSO integration,\n  // it will look like\n  // https://manage.auth0.com/#/externalapps/{the_client_id}/settings\n  var AUTH0_OFFICE365_CLIENT_ID = configuration.AUTH0_OFFICE365_CLIENT_ID;\n  // The main domain of our company.\n  var YOUR_COMPANY_DOMAIN = 'mycompanyurl.com';\n  // Your Azure AD domain.\n  var AAD_DOMAIN = configuration.AAD_DOMAIN;\n  // The Application ID generated while creating the Azure AD app.\n  var AAD_APPLICATION_ID = configuration.AAD_APPLICATION_ID;\n  // The generated API key for the Azure AD app.\n  var AAD_APPLICATION_API_KEY = configuration.AAD_APPLICATION_API_KEY;\n  // The location of the users that are going to access Microsoft products.\n  var AAD_USAGE_LOCATION = 'US';\n  // Azure AD doesn't recognize the user instantly, it needs a few seconds\n  var AAD_USER_CREATE_DELAY = 15000;\n  // The key that represents the license that we want to give the new user.\n  // Take a look in the following URL for a list of the existing licenses:\n  // https://gist.github.com/Lillecarl/3c4727e6dcd1334467e0\n  var OFFICE365_KEY = 'O365_BUSINESS';\n\n  // Only execute this rule for the Office 365 SSO integration.\n  if (context.clientID !== AUTH0_OFFICE365_CLIENT_ID) {\n    return callback(null, user, context);\n  }\n\n  // Skip custom provisioning for AD users.\n  if (context.connection === AUTH0_AD_CONNECTION) {\n    return callback(null, user, context);\n  }\n\n  // If the user is already provisioned on Microsoft AD, we skip\n  // the rest of this rule\n  user.app_metadata = user.app_metadata || {};\n  if (user.app_metadata.office365Provisioned) {\n    return connectWithUser();\n  }\n\n  // Global variables that we will use in the different steps while\n  // provisioning a new user.\n  var token;\n  var userPrincipalName;\n  var mailNickname = user.email.split('@')[0];\n  var uuid = uuidv4.v4();\n  var immutableId = new Buffer(uuid).toString('base64');\n  var userId;\n\n  // All the steps performed to provision new Microsoft AD users.\n  // The definition of each function are below.\n  getAzureADToken()\n    .then(createAzureADUser)\n    .then(getAvailableLicenses)\n    .then(assignOffice365License)\n    .then(saveUserMetadata)\n    .then(waitCreateDelay)\n    .then(connectWithUser)\n    .catch(callback);\n\n  // Requests an Access Token to interact with Windows Graph API.\n  function getAzureADToken() {\n    var options = {\n      method: 'POST',\n      url: 'https://login.windows.net/' + AAD_DOMAIN + '/oauth2/token?api-version=1.5',\n      headers: {\n        'Content-type': 'application/json',\n        },\n      json: true,\n      form: {\n        client_id: AAD_APPLICATION_ID,\n        client_secret: AAD_APPLICATION_API_KEY,\n        grant_type: 'client_credentials',\n        resource: 'https://graph.windows.net'\n      },\n    };\n\n    return rp(options);\n  }\n\n  // Gets the Access Token requested above and assembles a new request\n  // to provision the new Microsoft AD user.\n  function createAzureADUser(response) {\n    token = response.access_token;\n    userPrincipalName = 'auth0-' + uuid + '@' + YOUR_COMPANY_DOMAIN;\n\n    var options = {\n      url: 'https://graph.windows.net/' + AAD_DOMAIN + '/users?api-version=1.6',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n      json: true,\n      body: {\n        accountEnabled: true,\n        displayName: user.nickname,\n        mailNickname: mailNickname,\n        userPrincipalName: userPrincipalName,\n        passwordProfile: {\n          password: immutableId,\n          forceChangePasswordNextLogin: false\n        },\n        immutableId: immutableId,\n        usageLocation: AAD_USAGE_LOCATION\n      },\n    };\n\n    return rp(options);\n  }\n\n  // After provisioning the user, we issue a request to get the list\n  // of available Microsoft products licenses.\n  function getAvailableLicenses(response) {\n    userId = response.objectId;\n    var options = {\n      url: 'https://graph.windows.net/' + AAD_DOMAIN + '/subscribedSkus?api-version=1.6',\n      json: true,\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    };\n    return rp(options);\n  }\n\n  // With the licenses list, we iterate over it to get the id (skuId) of the\n  // license that we want to give to the new user (office 365 in this case).\n  // We also issue a new request to the Graph API to tie the user and the\n  // license together.\n  function assignOffice365License(response) {\n    var office365License;\n\n    for (var i = 0; i < response.value.length; i++) {\n      if (response.value[i].skuPartNumber === OFFICE365_KEY) {\n        office365License = response.value[i].skuId;\n        break;\n      }\n    }\n\n    var options = {\n      url: ' https://graph.windows.net/' + AAD_DOMAIN + '/users/' + userId + '/assignLicense?api-version=1.6',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n      json: true,\n      body: {\n        'addLicenses': [\n          {\n            'disabledPlans': [],\n            'skuId': office365License\n          }\n        ],\n        'removeLicenses': []\n      }\n    };\n    return rp(options);\n  }\n\n  // After provisioning the user and giving a license to them, we record\n  // (on Auth) that this Google Workspace user has already been provisioned. We\n  // also record the user's principal username and immutableId to properly\n  // redirect them on future logins.\n  function saveUserMetadata() {\n    user.app_metadata = user.app_metadata || {};\n\n    user.app_metadata.office365Provisioned = true;\n    user.app_metadata.office365UPN = userPrincipalName;\n    user.app_metadata.office365ImmutableId = immutableId;\n\n    return auth0.users.updateAppMetadata(user.user_id, user.app_metadata);\n  }\n\n  // As mentioned, Windows Graph API needs around 10 seconds to finish\n  // provisioning new users (even though it returns ok straight away)\n  function waitCreateDelay() {\n    return new Promise(function (resolve) {\n      setTimeout(function() {\n        resolve();\n      }, AAD_USER_CREATE_DELAY);\n    });\n  }\n\n  // Adds the principal username and immutableId to the user object and ends\n  // the rule.\n  function connectWithUser() {\n    user.upn = user.app_metadata.office365UPN;\n    user.inmutableid = user.app_metadata.office365ImmutableId;\n      return callback(null, user, context);\n  }\n}\n```\n\n## User experience\n\nThe easiest way for your external users to authenticate is by using Identity Provider-initiated login.\n\nYou must redirect your users to the following URL (e.g., using a \"smart link\" like `https://office.travel0.com`):\n\n```\nhttps://{yourDomain}/login?client=AUTH0_OFFICE365_CLIENT_ID&protocol=wsfed&state=&redirect_uri=&\n```\n\nThis will show them the Auth0 login page after which they'll be redirected to Office 365. It will be important to explain external users that this is the only way they can authenticate, since the Office 365 login page does not support Home Realm Discover for these external users. This also means that, when they try to open a link, they'll need to visit the smart link first before the can access the link they tried to open.\n\n![Integrations - Office 365 - Different connections](https://images.ctfassets.net/cdy7uua7fh8z/37HoaM7uu4rNScJ2uZMzx9/22f0a556942f08b41cb63fb8d6d97c70/office-365-different-connections.png)\n\nIn this example, Travel0 enabled a few social accounts and a database connection for their Office 365 third-party application in Auth0.\n\n## Deep linking\n\nCertain implementations might require deep linking (for example, to SharePoint Online). In this case, a smart link needs to be constructed, which starts on the Office 365 login page:\n\n```\nhttps://login.microsoftonline.com/login.srf?wa=wsignin1.0&whr={yourCustomDomain}&wreply={deepLink}\n```\n\nThe first parameter, `{yourCustomDomain}`, should be the domain you've configured in Azure AD for <dfn data-key=\"single-sign-on\">Single Sign-on (SSO)</dfn> (e.g., `travel0.com`). By specifying this as the `whr`, Azure AD will know it needs to redirect to Auth0 instead of showing the login page.\n\nThe `DEEP_LINK` parameter should be an encoded URL within Office 365 (for example, a page in SharePoint Online or Exchange).\n\nExample URL:\n\n```\nhttps://login.microsoftonline.com/login.srf?wa=wsignin1.0&whr=travel0.com&wreply=https%3A%2F%2Ftravel0%2Esharepoint%2Ecom\n```",
    "title": "Office 365 Custom Provisioning",
    "description": "Learn how to set up Microsoft Office 365 custom provisioning.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/sumo-logic-dashboard",
    "markdown": "# Use Auth0 App for Sumo Logic\n\nYou can use the **Auth0 App for Sumo Logic** to visualize the data from your Auth0 tenant in a Sumo Logic dashboard. The dashboard allows you to monitor the health of the login traffic for a tenant. The app allows you to use recommended aggregations from Auth0, or to use them as a starting point to create your own custom visualizations.\n\n## Prerequisite\n\n[Set up log streaming to Sumo Logic](https://marketplace.auth0.com/integrations/sumo-logic-log-streaming).\n\n## Install the Auth0 App for Sumo Logic\n\n1.  Log in to [](https://www.datadoghq.com/)[](https://www.splunk.com/)[Sumo Logic](https://www.sumologic.com/).\n    \n2.  From the **App Catalog**, search for and select the Auth0 app.\n    \n3.  To install the app, complete the following fields:\n    \n    | **Field** | **Description** |\n    | --- | --- |\n    | **App Name** | Retain the existing name or enter a name of your choice. |\n    | **Data Source** | Choose **Source Category** and select a category from the list, or choose **Enter a Custom Data Filter** and enter a custom source category beginning with an underscore. For example: **_sourceCategory=MyCategory_**. |\n    | **Advanced** | Select the **Location in Library** (default is Personal folder) or click **New Folder** to add a new folder. |\n    \n4.  Select **Add to Library**.\n    \n\nOnce an app is installed, it appears in your **Personal** folder or the folder you selected. From here, you can share it with your organization.\n\nPanels will fill automatically over time. Panels fill slowly fills with data matching the time range query and received since the panel was created.\n\n![Sumo Logic Dashboard with Auth0 streaming data](https://images.ctfassets.net/cdy7uua7fh8z/2BynHH8t2c8axVoRK0h1Et/715854ee4e6774c64973ef1ecd7e8390/sumo-logic-dashboard.png)\n\nThe dashboard is broken down into the following categories or panels:\n\n*   **Login Metrics**: See the count of actions such as successful logins and failed logins. \n    \n*   **Account Creation Metrics**: See the breakdowns of account creation by country, platform, IP, and other demographics.\n    \n*   **Security Metrics**: See anomaly detection events over time to detect and attack.\n    \n\n## Dashboard filters\n\nEach dashboard has a set of filters that you can apply to the entire dashboard. Click the funnel icon in the top dashboard menu bar to display a scrollable list of filters that are applied across the entire dashboard. \n\nEach panel also has a set of filters that are applied to the results for that panel only. Click the funnel icon in the top panel menu bar to display a list of panel-specific filters.\n\n## Customize dashboard\n\nYou can customize your Sumo Logic Auth0 security dashboard to add custom data widgets.\n\n1.  Navigate to your Auth0 security dashboard and select **add panel** in the top right corner.\n    \n2.  Select a panel type by clicking the icon. See [Sumo Logic help](https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)/Panels) for details.\n    \n3.  Enter logs query, metrics query, or multiple queries from the drop-down.\n    \n4.  To change the chart type, see [Sumo Logic help](https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)/Panels/01Modify_a_Chart) for the available options.\n    \n5.  Click **Add to Dashboard** on the top right to add the panel to your dashboard.\n    \n\n## Learn more\n\n*   [Log Event Type Codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes)\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)",
    "title": "Use Auth0 App for Sumo Logic",
    "description": "Describes how to use the Auth0 App for Sumo Logic to create a Sumo Logic Auth0 dashboard to visualize your tenant traffic.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/check-log-stream-health",
    "markdown": "# Check Log Stream Health\n\nYou can troubleshoot potential issues with your stream by looking at the **Health** tab.\n\n1.  Go to [Dashboard > Monitoring > Streams](https://manage.auth0.com/#/log-streams).\n    \n2.  Locate the log stream you want to check in the list.\n    \n    Your log stream can have one of the following statuses:\n    \n    *   **Active**: Your stream is enabled with us, and we will attempt to deliver the next log events.\n        \n    *   **Paused**: You have requested that we stop delivery attempts for the stream. You can click **Resume Stream** to change the status back to **Active**.\n        \n    *   **Disabled**: We have disabled your stream because of successive errors. You can click **Restart Stream** to change the status back to **Active** and retry delivery for this stream.\n        \n3.  Select the more options menu (...) at the end of the stream, and click **Health** on the drop-down menu. To help diagnose issues with your stream, you can see the last ten errors we encountered while attempting to deliver logs to your stream within the last 5 days.\n    \n    ![Dashboard Log Streams List Health menu option](https://images.ctfassets.net/cdy7uua7fh8z/61tSLY5CZEOZiNbL8xbpsk/48996cf8a24e65a94254145c2c476b4a/dashboard-monitoring-streams-health.png)",
    "title": "Check Log Stream Health",
    "description": "Learn how to check the health of your log streaming configurations in the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/event-filters",
    "markdown": "# Log Stream Filters\n\nYou can filter your log streams so only select events and event categories are delivered. To configure a log stream's filter:\n\n1.  Go to [Dashboard > Monitoring > Streams](https://manage.auth0.com/#/log-streams).\n    \n2.  Select a log stream and go to the **Settings** tab.\n    \n3.  Enable or disable filters in the **Filter By Event Category** menu.\n    \n4.  Click **Save**.\n    \n\n## Authentication event filters\n\n| **Filter** | **Description** |\n| --- | --- |\n| Login - Failure | Failed login events |\n| Login - Notification | Login notification events |\n| Login - Success | Successful login events |\n| Logout - Failure | Failed logout events |\n| Logout - Success | Successful logout events |\n| Signup - Failure | Failed signup events |\n| Signup - Success | Successful signup events |\n| Silent Authentication - Failure | Failed silent authentication events |\n| Silent Authentication - Success | Successful silent authentication events |\n| Token Exchange - Failure | Failed token exchange events |\n| Token Exchange - Success | Successful token exchange events |\n\n### Login - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `f` | Failed login |\n| `fc` | Failed connector login |\n| `fco` | Origin is not in the application's Allowed Origins list |\n| `fcoa` | Failed cross-origin authentication |\n| `fens` | Failed native social login |\n| `fp` | Incorrect password |\n| `fu` | Invalid email or username |\n\n### Login - Notification\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `w` | Warnings during login |\n\n### Login - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `s` | Successful login |\n| `scoa` | Successful cross-origin authentication |\n| `sens` | Successful native social login |\n\n### Logout - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `flo` | User logout failed |\n| `oidc_backchannel_logout_failed` | Failed OIDC back-channel logout request |\n\n### Logout - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `oidc_backchannel_logout_succeeded` | Successful OIDC back-channel logout request |\n| `slo` | User successfully logged out |\n\n### Signup - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `fs` | User signup failed |\n\n### Signup - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `ss` | Successful user signup |\n\n### Silent Authentication - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `fsa` | Failed silent authentication |\n\n### Silent Authentication - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `ssa` | Successful silent authentication |\n\n### Token Exchange - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `feacft` | Failed exchange of Authorization Code for Access Token |\n| `feccft` | Failed exchange of Access Token for a Client Credentials Grant |\n| `fede` | Failed exchange of Device Code for Access Token |\n| `feoobft` | Failed exchange of Password and OOB Challenge for Access Token |\n| `feotpft` | Failed exchange of Password and OTP Challenge for Access Token |\n| `fepft` | Failed exchange of Password for Access Token |\n| `fepotpft` | Failed exchange of Passwordless OTP for Access Token |\n| `fercft` | Failed exchange of Password and MFA Recovery code for Access Token |\n| `ferrt` | Failed exchange of Rotating Refresh Token |\n| `fertft` | Failed exchange of Refresh Token for Access Token |\n\n### Token Exchange - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `seacft` | Successful exchange of Authorization Code for Access Token |\n| `seccft` | Successful exchange of Access Token for a Client Credentials Grant |\n| `sede` | Successful exchange of Device Code for Access Token |\n| `seoobft` | Successful exchange of Password and OOB Challenge for Access Token |\n| `seotpft` | Successful exchange of Password and OTP Challenge for Access Token |\n| `sepft` | Successful exchange of Password for Access Token |\n| `sercft` | Successful exchange of Password and MFA Recovery code for Access Token |\n| `sertft` | Successful exchange of Refresh Token for Access Token |\n\n## Management API event filters\n\n| **Filter** | **Description** |\n| --- | --- |\n| Management API - Failure | Failed Management API events |\n| Management API - Success | Successful Management API events |\n\n### Management API - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `fapi` | Failed Management API operation |\n\n### Management API - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `sapi` | Successful Management API operation |\n| `mgmt_api_read` | API GET operation returning secrets completed successfully |\n\n## System event filters\n\n| **Filter** | **Description** |\n| --- | --- |\n| System - Notification | System notification events |\n\n### System - Notification\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `admin_update_launch` | Auth0 Update Launched |\n| `api_limit` | The maximum number of requests to the Authentication or Management APIs in given time has reached |\n| `coff` | AD/LDAP Connector is offline |\n| `con` | AD/LDAP Connector is online and working |\n| `depnote` | Deprecation Notice |\n| `fcpro` | Failed to provision a AD/LDAP connector |\n| `fui` | Failed to import users |\n| `limit_delegation` | Rate limit exceeded to `/delegation` endpoint |\n| `limit_mu` | An IP address is blocked with 100 failed login attempts using different usernames, all with incorrect passwords in 24 hours, or 50 sign-up attempts per minute from the same IP address |\n| `limit_wc` | An IP address is blocked with 10 failed login attempts into a single account from the same IP address |\n| `sys_os_update_start` | Auth0 OS Update Started |\n| `sys_os_update_end` | Auth0 OS Update Ended |\n| `sys_update_start` | Auth0 Update Started |\n| `sys_update_end` | Auth0 Update Ended |\n\n## User/Behavioral event filters\n\n| **Filter** | **Description** |\n| --- | --- |\n| User/Behavioral - Failure | Failed user/behavioral events |\n| User/Behavioral - Notification | User/behavioral notification events |\n| User/Behavioral - Success | Successful user/behavioral events |\n\n### User/Behavioral - Failure\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `fce` | Failed to change user email |\n| `fcp` | Failed to change password |\n| `fcpn` | Failed to change phone number |\n| `fcpr` | Failed change password request |\n| `fcu` | Failed to change username |\n| `fd` | Failed to generate delegation token |\n| `fdeaz` | Device authorization request failed |\n| `fdecc` | User did not confirm device |\n| `fdu` | Failed user deletion |\n| `fn` | Failed to send email notification |\n| `fv` | Failed to send verification email |\n| `fvr` | Failed to process verification email request |\n\n### User/Behavioral - Notification\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `cs` | Passwordless login code has been sent |\n| `du` | User has been deleted |\n| `gd_enrollment_complete` | A first time MFA user has successfully enrolled using one of the factors |\n| `gd_start_enroll` | Multi-factor authentication enroll has started |\n| `gd_unenroll` | Device used for second factor authentication has been unenrolled |\n| `gd_update_device_account` | Device used for second factor authentication has been updated |\n| `ublkdu` | User block setup by anomaly detection has been released |\n\n### User/Behavioral - Success\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `sce` | Successfully changed user email |\n| `scp` | Successfully changed password |\n| `scpn` | Successfully changed phone number |\n| `scpr` | Successful change password request |\n| `scu` | Successfully changed username |\n| `sdu` | User successfully deleted |\n| `srrt` | Successfully revoked a Refresh Token |\n| `sui` | Successfully imported users |\n| `sv` | Successfully consumed email verification link |\n| `svr` | Successfully called verification email endpoint, verification email in queue. |\n\n## Other\n\nThis category contains unclassified events.\n\n### Miscellaneous\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `cls` | Passwordless login code or link has been sent |\n| `fpar` | Failed pushed authorization request (PAR) |\n| `resource_cleanup` | Resources exceeding defined limits have been removed |\n\n### Multi-factor authentication\n\nThe following unclassified events relate to multi-factor authentication (MFA):\n\n| **Event Code** | **Description** |\n| --- | --- |\n| `gd_auth_email_verification` | Email verification confirmed successfully |\n| `gd_auth_fail_email_verification` | Email verification failed |\n| `gd_auth_failed` | Mutli-factor authentication failed |\n| `gd_auth_rejected` | User rejected MFA request via push notification |\n| `gd_auth_succeed` | Multi-factor authentication succeeded |\n| `gd_recovery_failed` | User entered an invalid recovery code while attempting to authenticate |\n| `gd_recovery_succeed` | User successfully authenticated using a recovery code |\n| `gd_sent_email` | Email for MFA successfully sent |\n| `gd_send_email_failure` | Email for MFA failed to send |\n| `gd_send_email_verification` | Email verification successfully sent |\n| `gd_send_pn` | Push notification for MFA successfully sent |\n| `gd_send_pn_failure` | Push notification for MFA failed |\n| `gd_send_sms` | SMS for MFA successfully sent |\n| `gd_send_sms_failure` | SMS for MFA failed to send |\n| `gd_send_voice` | Voice call for MFA successfully sent |\n| `gd_send_voice_failure` | Voice call for MFA failed to send |\n| `gd_start_auth` | Second factor authentication event started for MFA |\n| `gd_start_enroll_failed` | Multi-factor authentication enrollment failed |\n| `gd_tenant_update` | MFA tenant settings have been updated |\n| `gd_webauthn_challenge_failed` | User failed to verify Webauthn factor |\n| `gd_webauthn_enrollment_failed` | Webauthn enrollment failed |\n| `mfar` | User prompted to complete MFA |",
    "title": "Log Stream Filters",
    "description": "Lists available event filters for log streams and the events included in each filter.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/custom-log-streams",
    "markdown": "# Create Custom Log Streams Using Webhooks\n\nWebhooks allow events to be delivered to an external web server. Auth0 offers several integrations that automatically push events to third-party log management and analysis systems. If however your third-party system isn't supported, you can set up a custom webhook integration.\n\n## Configure API endpoint\n\nYou'll build an API that serves a single route (such as `/api/logs`) that accepts `HTTP POST` requests.\n\n## Configure log stream\n\n1.  Go to [Dashboard > Monitoring > Streams](https://manage.auth0.com/#/log-streams) and click **Create Stream**.\n    \n    ![Dashboard Monitoring Streams](https://images.ctfassets.net/cdy7uua7fh8z/5ZY6sT68DabXNL9Dr4bhss/d14c4c42ff62634b1bd514e8b08aeda4/Log-Streaming2.png)\n2.  Select **Custom Webhook** and enter a unique name for your new stream.\n    \n    ![Dashboard Monitoring Streams Create New Custom Webhook](https://images.ctfassets.net/cdy7uua7fh8z/8gZAJmogSu5wk3ufzFqZf/d4d7fdc7d8550c65160b0b9441b05cf6/dashboard-monitoring-streams-new-custom-webhook.png)\n3.  Configure the following settings:\n    \n    ![Dashboard Monitoring Streams Custom Webhook Settings Tab](https://images.ctfassets.net/cdy7uua7fh8z/5vJVD09aqSF0xEZZFk6wh2/e6469041b2dd1e4f1b142961ca0a12ab/custom-webhook-settings.png)\n    \n    | **Setting** | **Description** |\n    | --- | --- |\n    | **Name** | A unique display name to distinguish this integration from other integrations. |\n    | **Payload URL** | The URL where the event payloads are sent as HTTP POST requests. |\n    | **Authorization Token** | (Optional) The value in the Authorization header of the request. |\n    | **Content Type** | The media type of the payload that will be delivered to the webhook. |\n    | **Content Format** | Receive data in JSON lines, arrays, or objects. |\n    | **Filter by Event Category** | List of log stream filters. |\n    | **Starting Cursor** | (Optional) Specific day and time to start the stream from. |\n    \n4.  Click **Save**.\n    \n\n## Test configuration\n\n1.  Switch to the **Health** view and confirm that the **Stream Status** is **Active.**\n    \n2.  Perform an action that creates a tenant log event, like a login, token exchange, or Auth0 Management API call.\n    \n3.  Confirm that the event was created in your tenant logs.\n    \n4.  Confirm that your API received an `HTTP POST` request with the event data.\n    \n5.  Go to the **Health** view and confirm that no errors occurred.\n    \n\n## Troubleshoot Webhooks\n\nIf your webhook isn't working, it can be difficult to troubleshoot and determine what is causing the issue. Webhooks are asynchronous, so testing them can involve you triggering the webhook, waiting, and then checking the response (assuming that you did receive a response).\n\nHowever, there are certainly alternatives to the inefficient process we detailed above. While full details of how to troubleshoot a particular webhook is outside the scope of this article, here are some steps you can take to debug:\n\n1.  Check [Auth0 Dashboard > Monitoring > Logs](https://auth0.com/docs/deploy-monitor/logs) for helpful messages.\n    \n2.  Analyze the requests your webhook is making using a tool like [Mockbin](http://mockbin.io/), [Beeceptor](https://beeceptor.com/), or (self-hosted) [RequestBin](https://github.com/Runscope/requestbin).\n    \n3.  Mock requests using cURL or [Postman](https://www.getpostman.com/).\n    \n4.  Test your webhook code locally using something like [localtunnel](https://github.com/localtunnel/localtunnel) or [ngrok](https://ngrok.com/).\n    \n5.  Use a tool like [Runscope](https://www.runscope.com/) or [Assertible](https://assertible.com/) to watch the whole execution flow.\n    \n\n## Learn more\n\n*   [Check Log Stream Health](https://auth0.com/docs/customize/log-streams/check-log-stream-health)\n*   [Filter Log Events](https://auth0.com/docs/deploy-monitor/logs/log-event-filters)\n*   [Log Event Type Codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes)",
    "title": "Create Custom Log Streams Using Webhooks",
    "description": "Learn how to configure a log stream using a custom webhook to stream log events to the URL of your choice.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/splunk-dashboard",
    "markdown": "# Use Auth0 App for Splunk\n\n#### Before you start\n\nYou can use the **Auth0 App for Splunk** to visualize the data from your Auth0 tenant in a Splunk dashboard. The dashboard allows you to monitor the health of the login traffic for a tenant. The app allows you to use recommended aggregations from Auth0, or to use them as a starting point to create your own custom visualizations.\n\n## Install the Auth0 App for Splunk\n\n1.  Log into [Splunk](https://www.splunk.com/).\n    \n2.  Navigate to the [Auth0 App for Splunk](https://splunkbase.splunk.com/app/5193) app page.\n    \n3.  Select the green **Install** button.\n    \n4.  Enter your username and password, accept the terms and conditions, and select **Login and Install**.\n    \n5.  On the **Complete** widget that results, select the **Open the App** button. The Auth0 Dashboard with default filters applied appears.\n    \n    ![Auth0 App for Splunk Security Dashboard](https://images.ctfassets.net/cdy7uua7fh8z/3TezBl7S7ZL4mEScWVibPP/0d28f7ea7f1851a1817b5fd1a3861597/splunk-dashboard.png)\n\n## Dashboard filters\n\nThe following filters exist to allow you to drill down into the specifics of your traffic. You can enter `*****` to search across all values for that field.\n\n| Filter | Description |\n| --- | --- |\n| Time Range | A Splunk time input element that lets you choose the duration over which to view events. |\n| Index | The Splunk `index` you want to search within. While creating your `Http Event Collector Token`, if you specified a particular index, you may use this value from the dropdown. |\n| HTTP Source | The Splunk `source` name. |\n| IP  | The IP address whose traffic you want to inspect. This maps to `data.ip` in the log event. |\n| Client | The client whose traffic you want to inspect. This maps to `data.client_name` in the log event. |\n| Country | The country whose traffic you want to inspect. This is a field obtained using the `iplocation data.ip` search command in the query. It results in a `Country` field being added to each log event. |\n| Username | The email address whose login traffic you want to inspect. This maps to `data.user_name` in the log event. |\n\n## Customize dashboard\n\nYou can customize your Splunk Auth0 security dashboard to add custom data widgets.\n\n1.  Navigate to your Auth0 security dashboard and select **edit** in the top right corner.\n    \n2.  In the Edit Dashboard panel, select **add panel** and then choose a content type. For example line chart, event, or area chart.\n    \n3.  Enter the time range, content title, and search string for the data visualization.\n    \n4.  Select **Add to dashboard** to add your new data widget.\n    \n\n## Learn more\n\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)",
    "title": "Use Auth0 App for Splunk",
    "description": "Learn how to use the Auth0 App for Splunk to create a Splunk Auth0 dashboard to visualize your tenant traffic.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/log-streams/datadog-dashboard-templates",
    "markdown": "# Use Auth0 Dashboard Templates with Datadog\n\nAuth0 provides predefined templates that you can use to visualize the data from your Auth0 tenant in Datadog. Display visualizations to monitor the health of the login traffic for a tenant. Templates allow you to use recommended aggregations from Auth0, or to use them as a starting point to create your own custom visualizations.\n\n| Template | Purpose | Downloadable File |\n| --- | --- | --- |\n| Security Dashboard | Monitor tenant login traffic including login, account creation, and anomaly detection metrics. | [Auth0SecDashboard.json](https://cdn.auth0.com/website/docs/logs/streams/datadog/Auth0SecurityDashboard.json) |\n\nYou can also organize your visualization using the following features:\n\n*   Use Datadog time selection to choose the window for your visualization. \n    \n*   Use filters to narrow down data analysis using configurable parameters such as IP address, Country, User, and Client Application. \n    \n*   Use **Edit Widgets** to rearrange the tiles and visualizations, as well as create copies where you can inspect and add parameters to queries as needed.\n    \n\n## Prerequisites\n\n*   [Set up log streaming to Datadog](https://marketplace.auth0.com/integrations/datadog-log-streaming).\n    \n*   Download the desired dashboard template JSON file from Auth0.\n    \n\n## Upload dashboard templates in Datadog\n\n1.  Log into [Datadog](https://www.datadoghq.com/).\n    \n2.  Navigate to **Dashboards** on the left navigation bar.\n    \n3.  Select **Screenboard** as the dashboard type.\n    \n4.  On the blank canvas, in the upper right, select the gear icon and click **Import Dashboard JSON**.\n    \n5.  Upload the JSON file for the dashboard you wish to use (for example, `Auth0SecDashboard.json`).\n    \n\n## Security Dashboard visualizations\n\nOnce you have imported the Security Dashboard from Auth0, you can use the following visualizations to determine the health of your tenant or as a starting point to build your own visualizations and alerts in Datadog.\n\n![Datadog Security Dashboard](https://images.ctfassets.net/cdy7uua7fh8z/4wePsuSDxyqijm4GghGRiN/a298aab5e7ed837e33ec649c4168bd68/datadog-security-dashboard.png)\n\n| Visualization | Purpose |\n| --- | --- |\n| Login Success | Displays the number of successful login events for the tenant. |\n| Login Failures | Displays the number of failed login events for the tenant. Spikes in login failures may be a signal of anomalous traffic. |\n| Login Failures by Geolocation | Displays the number of failed login events for the tenant by geolocation. Unexpected traffic spikes in certain geographies may be a signal of anomalous traffic. |\n| Number of Unique IPs sending traffic | Displays the number of IP addresses that are sending traffic to the tenant. This number often follows predictable patterns, and strong variations may signal anomalous traffic. |\n| Top 5 IPs with failures | Displays the 5 IP addresses that have experienced the highest number of login errors. |\n| Account Creation Events in top countries | Displays the number of accounts created in the top countries. Variations in the predictable patterns and geographies may signal anomalous traffic. |\n| Account Creation Events by Platform | Displays the number of accounts created by platform, such as Windows, OSX, Android, or iOS. |\n| IPs with most accounts created | Displays the IP addresses from which the most number of accounts have been created. |\n| Anomaly Detection Events | Displays the number of anomaly detection events for the tenant, including the number of blocked IP addresses due to Brute Force Protection and Breached Password Detection. |\n| Log Stream | Displays raw events from the tenant log. |\n\n## Customize dashboard\n\nYou can customize your Datadog Auth0 security dashboard to add custom data widgets.\n\n1.  Navigate to your Auth0 security dashboard and go to the **Dashboards** item in the side navigation.\n    \n2.  Select the name of the dashboard you created from the list.\n    \n3.  Select a visualization and drag it to the main section of the page.\n    \n    ![Customize Datadog Auth0 Security Dashboard](https://images.ctfassets.net/cdy7uua7fh8z/5aerr3kQ1wqmmkDf0PVQer/6af8c1cbf05d474405e8822de4e650c7/Auth0_Datadog_Security_Dashboard_customization_.png)\n4.  Configure your data graph preferences.\n    \n\n## Learn more\n\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)\n*   [Configure Datadog as SAML Service Provider](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-datadog)",
    "title": "Use Auth0 Dashboard Templates with Datadog",
    "description": "Describes how to import and use Auth0 dashboard templates to visualize the data from your Auth0 tenant in Datadog.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/create-first-organization",
    "markdown": "# Create Your First Organization\n\nTo begin using the [Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) feature, you must create and configure your organizations.\n\n#### Availability varies by Auth0 plan\n\nYour Auth0 plan or custom agreement affects whether this feature is available. To learn more, read [Pricing](https://auth0.com/pricing).\n\n## Create an organization\n\nWhen you [create an organization](https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations), the settings you define are used to customize the login page and email templates that end-users see when they authenticate in the context of the organization.\n\nWhen using Organizations out-of-the-box, these settings will override the settings for Universal Login pages. To learn more about further customizing the login page or email templates, read [Customize prompts and email templates](#customize-prompts-and-email-templates).\n\n## Define organization behavior\n\nYou may be familiar with applications like Heroku that present different behaviors depending on whether a user logs in with a personal account or selects an organization associated with their business account. Auth0 allows you to define similar organization behavior at the application level.\n\nFor each application you create in Auth0, you can decide whether end-users should log in directly or be required to authenticate in the context of an organization. For applications that require users to log in via an organization, you can also specify what happens if one is not provided to the login flow.\n\nYou may also want to update your Application's **Allowed Callback URLs** and **Allowed Origins (CORs)** [application settings](https://auth0.com/docs/get-started/applications/application-settings) to include Organization [placeholders for subdomains](https://auth0.com/docs/get-started/applications/wildcards-for-subdomains).\n\n## Customize prompts and email templates\n\nWhen using Organizations with Universal Login out-of-the-box prompts, the branding settings you configure when you [create organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations) override the branding for Universal Login pages and email templates. If you would like to further modify the Universal Login pages and emails that the end-user receives, you can customize page and email templates.\n\n### Page templates\n\nTo modify Universal Login page, customize a page template using the [Liquid template language](https://shopify.github.io/liquid/) and template variables, then apply the template using the Universal Login Page Templates API. To learn more, read [Universal Login Page Templates](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates).\n\nBecause the same template is used for all pages, you can implement consistent login pages with minimum effort.\n\nThe simplest template you can write is:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body>\n</html>\n```\n\nThe following tags must be present in the template:\n\n*   `**auth0:widget**`: Contains the HTML that structures the widget displayed on every page type (e.g., Login, Reset Password).\n    \n*   **`auth0:head`**: Contains tags required to render the widget.\n    \n\nTo center the widget in the page, replace the `<body>` tag with `<body class=\"_widget-auto-layout\">`.\n\n### Email templates\n\nTo modify emails the end-user receives, customize an email template using the [Liquid template language](https://shopify.github.io/liquid/) and template variables. To learn more, read [Customize Email Templates](https://auth0.com/docs/customize/email/email-templates).\n\nThe following email templates can be further customized for organizations:\n\n*   **Welcome**: Received by the end-user once they verify their email address or, if email verification is disabled, when they sign up (or log in for the first time).\n    \n*   **Password Change**: Received by the end-user when they request a password change. Contains a link that redirects them to the Password Reset page.\n    \n*   **Invite User**: Received by the end-user when they are invited to an organization. Contains a link that redirects them to your configured default login route. To learn more, read [Invite Organization Members](https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members).\n    \n\n### Template variables\n\nPage and email templates may access a set of context variables that you can use to impact how the template is rendered.\n\nFor lists of available variables, read [Universal Login Page Templates](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates) for page template variables and [Customize Email Templates](https://auth0.com/docs/customize/email/email-templates) for common email template variables.\n\nAdditional variables are available to the page template when a user logs in through an organization:\n\n*   `organization.id`\n    \n*   `organization.display_name`\n    \n*   `organization.name`\n    \n*   `organization.metadata`\n    \n*   `organization.branding.logo_url`\n    \n*   `organization.branding.colors.primary`\n    \n*   `organization.branding.colors.page_background`\n    \n\n## Configure organization membership\n\nEach organization has its own associated members, which represent the users who can access your applications by logging in through the organization’s configured login page.\n\nSaaS and B2B applications are usually provided to teams rather than to isolated individual users. In this context, a team could be an entire company, a small set of employees (for example, the marketing department), or even a transient group of users that are organized around a purpose (for example, a group of neighbors who have signed up to work with a charity and are competing as a team to raise the most money for a cause).\n\nOrganizations in Auth0 are flexible enough to support all of these use cases, but require some planning when building an application that supports teams. One of the first things to consider is how to manage team membership, which you can accomplish by:\n\n*   [Inviting users via email](https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members)\n    \n*   [Granting just-in-time membership](https://auth0.com/docs/manage-users/organizations/configure-organizations/grant-just-in-time-membership) to users that log in via an enabled connection\n    \n*   Directly managing membership via the Management API or Auth0 Dashboard by [assigning members](https://auth0.com/docs/manage-users/organizations/configure-organizations/assign-members) or [removing members](https://auth0.com/docs/manage-users/organizations/configure-organizations/remove-members)\n    \n\nOnce membership is defined, you can [retrieve members of organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-members) or [retrieve a user's organization membership](https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-user-membership).\n\n## Assign roles to members\n\nEach organization member can be assigned one or more roles, which are applied when users log in through the organization. Specifically, you can [add roles to organization members](https://auth0.com/docs/manage-users/organizations/configure-organizations/add-member-roles), [remove roles from organization members](https://auth0.com/docs/manage-users/organizations/configure-organizations/remove-member-roles), or [retrieve member roles for an organization](https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-member-roles). You can use roles and their associated permissions to control access to [applications that you build](https://auth0.com/docs/manage-users/organizations/custom-development). To learn more about roles, read [Role-base Access Control](https://auth0.com/docs/manage-users/access-control/rbac).\n\n## Learn more\n\n*   [Understand How Auth0 Organizations Work](https://auth0.com/docs/manage-users/organizations/organizations-overview)\n*   [Custom Development with Organizations](https://auth0.com/docs/manage-users/organizations/custom-development)\n*   [Work with Tokens and Organizations](https://auth0.com/docs/manage-users/organizations/using-tokens)\n*   [Configure Organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations)",
    "title": "Create Your First Organization",
    "description": "Learn how to create your first organization.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/login-flows-for-organizations",
    "markdown": "# Login Flows for Organizations\n\n[Auth0 Organizations](https://auth0.com/docs/manage-users/organizations) allows leaders of B2B products or SaaS applications to build multi-tenant architectures, store identification tokens appropriately, and minimize end user login friction.\n\n#### Configure Your Application to Use Organizations\n\nYour [Auth0 Application](https://auth0.com/docs/get-started/applications) can be configured in the [Organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior) tab to support three user types: Individuals, Business Users, or Both.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/Rz0i0zgIY7Yugx8M3D7pw/4cf50e68d32dc931ca18caae8cf48146/image3.png)\n\nApplications designed explicitly for consumers - for example, Netflix or Spotify - likely do **not** need Organization management. By choosing **Individuals**, users log in to the application directly and Organization context is not provided.\n\nB2B or SaaS applications - for example, Slack or Jira - are better-served by **Business Users,** so end users can only access your application in the context of an Auth0 Organization. Users in multiple Organizations are directed to the Organization Picker after the login flow, which displays the previous 20 organizations they joined. \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/3b6s5amCEjFyRTKWkTrFZI/ae9cd3bcbd55d299d7bdddfb8747ea0b/image4.png)\n\nChoose **Both** if your end user may maintain both a personal and business account with your application. For example, Github often stores both personal and professional code repositories.\n\nYou can configure your application's user type through the Auth0 Dashboard (as described above) or the Management API. Specifically, use the `organization_usage` parameter of the [Update a client](https://auth0.com/docs/api/management/v2/clients/patch-clients-by-id) endpoint to set the appropriate type of user. For more information on both methods, review [Define Organization Behavior](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior).\n\n#### Configure the Login Flow for your Application\n\nAfter selecting **Business Users** or **Both**, you can further customize the experience that your users have when logging into your application. \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/3e18zLZ8dPeXBohvBLpKAU/a7097d34c7e2aeecdbcf80bb7bc6e960/image1.png)\n\nMost organizations should choose **Prompt for Credentials**, then enable [Identifier First Authentication](https://auth0.com/docs/authenticate/login/auth0-universal-login/identifier-first). If you already know the Organization with which a user is attempting to log in, the **No Prompt** option along with [Custom Development with Organizations](https://auth0.com/docs/manage-users/organizations/custom-development) allows your app to maintain a branded and customized login flow. Administrators can further curate the end user experience by enabling the **Prompt for Organization** toggle, which requires users to identify the Organization they’re logging into.\n\nYou can configure the login flow for your application through the Auth0 Dashboard (as described above) or the Management API. Specifically, use the `organization_require_behavior` parameter of the [Update a client](https://auth0.com/docs/api/management/v2/clients/patch-clients-by-id) endpoint to set the appropriate flow. For more information on both methods, review [Define Organization Behavior](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior).\n\n##### Identifier First Authentication\n\nIf your enterprise application uses [Enterprise Federation](https://auth0.com/docs/authenticate/enterprise-connections), you can activate [Identifier First Authentication with Home Realm Discovery](https://auth0.com/docs/authenticate/login/auth0-universal-login/identifier-first) in its Authentication Profile. Once enabled, Home Realm Discovery detects email addresses from a known domain and automatically sends them to the proper Workforce login.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/1vyoeNqhRmqP3iYP58X59Y/eaa1556a41b5f4d9a3211f877d284b36/image2.png)\n\nIn this flow, exactly one Auth0 [Database Connection](https://auth0.com/docs/authenticate/database-connections/custom-db) can be used as a fallback when a user’s email domain does not match the identity provider (IdP) domain of any enterprise connections. Users are shown your application’s login prompt instead of an organization’s login prompt, and [Connections that are enabled for the Application](https://auth0.com/docs/get-started/applications/update-application-connections) are visible to the user.\n\nAfter a user provides an email address, Auth0 matches it with Enterprise Connections enabled for this application **and** all Enterprise Connections enabled for Organizations. If a match is found, the user is directed to authenticate with the associated IdP. If no match is found, a password field is displayed.\n\nYou can use the Management API to configure Identifier First Authentication. Specifically, use the `identifier_first` parameter of the [Update prompts settings](https://auth0.com/docs/api/management/v2/prompts/patch-prompts) endpoint.\n\n##### Auto-Membership\n\nInstead of inviting or assigning users to an Organization directly, you may want to allow any user that is able to authenticate with a federated IdP to be granted access to an Organization. For these scenarios, Auth0 recommends the [Auto-Membership](https://auth0.com/docs/manage-users/organizations/configure-organizations/grant-just-in-time-membership) setting.\n\nAuto-membership is typically triggered by [directing a user to log in using the Organization’s login prompt](https://auth0.com/docs/manage-users/organizations/custom-development), which can pass the connection and organization parameters on the user’s behalf. If a user’s desired organization cannot be determined prior to login, the Prompt for Credentials flow grants membership to the sole organization with auto-membership configured.\n\nHowever, there may be scenarios in which you cannot determine a user’s desired organization prior to sending them to log in. In this case, you can use the aforementioned Prompt for Credentials flow but note that the user will only be granted membership in the organization if **one and only one organization** has this connection set as an enabled connection for the organization with auto-membership activated.\n\nYou can use the Management API to configure auto-membership. Specifically, use the `assign_membership_on_login` parameter of the [Modify an organization's connection](https://auth0.com/docs/api/management/v2/organizations/patch-enabled-connections-by-connection-id) endpoint.",
    "title": "Login Flows for Organizations",
    "description": "How to use Auth0 Login Flow with your Organization",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations",
    "markdown": "# Configure Organizations\n\nYou can configure Organizations using the Auth0 Dashboard or Management API. To learn more about the steps involved in configuring your organization, read [Create Your First Organization](https://auth0.com/docs/manage-users/organizations/create-first-organization).\n\n#### Availability varies by Auth0 plan\n\nYour Auth0 plan or custom agreement affects whether this feature is available. To learn more, read [Pricing](https://auth0.com/pricing).",
    "title": "Configure Organizations",
    "description": "Reference the various options you have to configure organizations.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/custom-development",
    "markdown": "# Custom Development with Organizations\n\nYou can extend Auth0 capabilities using [organization](https://auth0.com/docs/manage-users/organizations/organizations-overview) metadata and Actions, or use our APIs and SDKs to build organization administration dashboards for your users.\n\n#### Availability varies by Auth0 plan\n\nYour Auth0 plan or custom agreement affects whether this feature is available. To learn more, read [Pricing](https://auth0.com/pricing).\n\n## Extensibility\n\nOrganizations support our extensibility points, so you can define properties within organization metadata and expose that data to [Actions](https://auth0.com/docs/customize/actions). This allows you to customize capabilities for individual customers; for example, you can execute custom logic in Actions for certain customers based on their subscription plan by storing that information in organization metadata.\n\n### Actions event object\n\nThe Action event object stores contextual information about the current authentication transaction, such as the user's IP address, application, or location.\n\nIf you change token content using the `event` object within an Action, your changes will be available in tokens after all Actions have finished running.\n\n## SDKs\n\nTo allow members to self-manage their organizations, you can assign roles to members, and use our API and SDKs to build dashboards in your products. Administrators can configure Single Sign-On (SSO), invite users to organizations, assign members to organizations, assign roles to members, and so on.\n\nExample tasks you may want to perform with organizations using the SDKs are outlined below.\n\n### I want users to log in to a specified organization\n\nWhen defining a new client, pass the organization ID into an organization parameter. Then on callback, ensure that the organization returned in the ID token is the same one that was sent in the `/authorize` request by validating the `org_id` claim in the same way that other claims like `exp` and `nonce` are validated.\n\nTo learn more, read:\n\n*   [Add Login Using the Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow/add-login-auth-code-flow)\n    \n*   [Call Your API Using the Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow/call-your-api-using-the-authorization-code-flow)\n    \n*   [Add Login Using the Authorization Code Flow with PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce/add-login-using-the-authorization-code-flow-with-pkce)\n    \n*   [Call Your API Using the Authorization Code Flow with PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce/call-your-api-using-the-authorization-code-flow-with-pkce)\n    \n*   [Add Login Using the Implicit Flow with Form Post](https://auth0.com/docs/get-started/authentication-and-authorization-flow/implicit-flow-with-form-post/add-login-using-the-implicit-flow-with-form-post)\n    \n*   [Call Your API Using the Hybrid Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/hybrid-flow/call-api-hybrid-flow)\n    \n\n### From my application, I want to get the organization to which the authenticated user logged in\n\nIf the user was authenticated using an organization, the organization ID will appear in the `org_id` claim in the ID token. Using the Auth0 SPA SDK, this can be retrieved as follows:\n\n`const { org_id } = await client.getIdTokenClaims();`\n\n### From my API, I want to get the organization with which the access token was issued\n\nIf the user was authenticated using an organization and an audience was specified, the access token will be a JWT and will contain the `org_id` claim with the ID of the organization to which the user logged in.\n\nThis can be validated along with the other claims on the backend, as in the following example for Ruby:\n\n```\nclass JsonWebToken\n  def self.verify(token)\n    decoded = JWT.decode(token, nil,\n               true, # Verify the signature of this token\n               algorithms: 'RS256',\n               iss: 'https://YOUR_DOMAIN/',\n               verify_iss: true,\n               aud: Rails.application.secrets.auth0_api_audience,\n               verify_aud: true) do |header|\n      jwks_hash[header['kid']]\n    end\n\n    // Retrieve the organization ID value from the decoded token\n    org = decoded[0]['org_id']\n  end\nend\n```\n\n## Learn more\n\n*   [Understand How Auth0 Organizations Work](https://auth0.com/docs/manage-users/organizations/organizations-overview)\n*   [Create Your First Organization](https://auth0.com/docs/manage-users/organizations/create-first-organization)\n*   [Work with Tokens and Organizations](https://auth0.com/docs/manage-users/organizations/using-tokens)\n*   [Configure Organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations)\n*   [Auth0 Actions](https://auth0.com/docs/customize/actions)",
    "title": "Custom Development with Organizations",
    "description": "Learn to use Actions and SDKs with Auth0 organizations.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/using-tokens",
    "markdown": "# Work with Tokens and Organizations\n\n#### Availability varies by Auth0 plan\n\nYour Auth0 plan or custom agreement affects whether this feature is available. To learn more, read [Pricing](https://auth0.com/pricing).\n\nMost identity (ID) tokens and access tokens returned by Auth0 are JSON Web Tokens (JWTs) containing a variety of claims, which are pieces of information asserted about a subject. For example, an [ID token](https://auth0.com/docs/secure/tokens/id-tokens) (which is always a JWT) can contain a claim called `name` that asserts that the name of the user authenticating is \"John Doe\".\n\nThere are two types of JWT claims:\n\n*   **Registered**: Claims defined by the [JWT specification](https://tools.ietf.org/html/rfc7519) to ensure interoperability with third-party, or external, applications. [OpenID Connect (OIDC)](https://auth0.com/docs/authenticate/protocols/openid-connect-protocol) standard claims are reserved claims.\n    \n*   **Custom**: Claims that you define yourself. These claims can be non-registered, collision-resistant public claims or non-registered, non-public private claims subject to collision. Name these claims carefully, such as through [namespacing](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims), to avoid collision with reserved claims or other custom claims. It can be challenging to deal with two claims of the same name that contain differing information.\n    \n\nTo learn more about claims, read [JSON Web Token Claims](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-claims).\n\n## Authenticate users through an organization\n\nTo authenticate a user through an organization, an `organization` parameter is added to a call to the `/authorize` endpoint. Examples of tokens returned when a user logs in through organizations are provided below.\n\n### ID token\n\nIn the following example, note that `https://marketplace/roles` and `https://namespace.exampleco.com/` are custom claims that have been added to the token, while the other included claims are standard.\n\n```\n{\n  \"https://marketplace/roles\": [\n    \"marketplace-administrator\"\n  ],\n  \"https://namespace.exampleco.com\": \"my custom claim\",\n  \"nickname\": \"firstName.lastName\",\n  \"name\": \"firstName.lastName@email.com\",\n  \"picture\": \"https://s.gravatar.com/avatar/638\",\n  \"updated_at\": \"2021-03-23T11:34:14.566z\",\n  \"email\": \"username@exampleco.com\",\n  \"email_verified\": true,\n  \"sub\": \"auth0|602c0dcab993d10073daf680\",\n  \"org_id\": \"org_9ybsU1dN2dKfDkBi\"\n}\n```\n\n### Access token\n\n```\n{\n  \"iss\": \"https://exampleco.auth0.com/\",\n  \"sub\": \"auth0|602c0dcab993d10073daf680\",\n  \"aud\": [\n    \"https://example-api/\",\n    \"https://exampleco.auth0.com/userinfo\"  \n  ],\n  \"iat\": 1616499255,\n  \"exp\": 1616585655,\n  \"azp\": \"ENDmmAJsbwI1hOG1KPJddQ8LHjV6kLkV\",\n  \"scope\": \"openid profile email\",\n  \"org_id\": \"org_9ybsU1dN2dKfDkBi\",\n  \"permissions\": [\n    \"delete:stuff\",\n    \"read:stuff\",\n    \"write:stuff\"  \n  ]\n}\n```\n\n## Validate tokens\n\nWhen the `organization` parameter is added to a call to the `/authorize` endpoint, Auth0 SDKs automatically validate the `org_id` claim, which is returned as part of any generated tokens. However, for security purposes, additional validation should be performed when tokens are received.\n\n**For web applications:**\n\nIf no `organization` parameter was passed to the `/authorize` endpoint, but an `org_id` claim is present in the ID token, then your application should validate the claim to ensure that the value received is expected or known and that it corresponds to an entity your application trusts, such as a paying customer. If the claim cannot be validated, then the application should deem the token invalid.\n\n**For APIs:**\n\nIf an `org_id` claim is present in the access token, then your API should validate the claim to ensure that the value received is expected or known and that it corresponds to an entity your application trusts, such as a paying customer. If the claim cannot be validated, then the API should deem the token invalid.\n\nIn particular:\n\n*   The `iss` (issuer) claim should be checked to ensure the token was issued by Auth0.\n    \n*   The `org_id` claim should be checked to ensure it is a value that is already known to the application. This could be validated against a known list of organization IDs, or perhaps checked in conjunction with the current request URL. For example, the subdomain may hint at which organization should be used when validating the ID Token.\n    \n\nNormally, validating only the issuer would be enough to ensure that the token was issued by Auth0. In the case of organizations, however, additional checks should be made to ensure that the organization within your Auth0 tenant is expected.\n\n## Learn more\n\n*   [Understand How Auth0 Organizations Work](https://auth0.com/docs/manage-users/organizations/organizations-overview)\n*   [Create Your First Organization](https://auth0.com/docs/manage-users/organizations/create-first-organization)\n*   [Custom Development with Organizations](https://auth0.com/docs/manage-users/organizations/custom-development)\n*   [Configure Organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations)",
    "title": "Work with Tokens and Organizations",
    "description": "Learn how tokens work with Auth0's Organizations feature and how to authenticate users belonging to an organization.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-email-endpoint",
    "markdown": "# Retrieve Users with Get Users by Email Endpoint\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users-by-email',\n  params: {email: '{userEmailAddress}'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users-by-email?email=%7BuserEmailAddress%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Users with Get Users by Email Endpoint",
    "description": "Learn how to retrieve lists of users using the get-users-by-email endpoint.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/view-search-results-by-page",
    "markdown": "# View Search Results by Page\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {\n    q: 'logins_count:[100 TO 200]',\n    page: '2',\n    per_page: '10',\n    include_totals: 'true',\n    search_engine: 'v3'\n  },\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&page=2&per_page=10&include_totals=true&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View Search Results by Page",
    "description": "Learn how to view search results page by page and include totals.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/sort-search-results",
    "markdown": "# Sort Search Results\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'logins_count:[100 TO 200]', sort: 'created_at:1', search_engine: 'v3'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=logins_count%3A%5B100%20TO%20200%5D&sort=created_at%3A1&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Sort Search Results",
    "description": "Learn how to sort search results by passing a field:order value to the sort parameter.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-endpoint",
    "markdown": "# Retrieve Users with the Get Users Endpoint\n\nThe [`GET /api/v2/users` endpoint](https://auth0.com/docs/api/management/v2#!/Users/get_users) allows you to retrieve a list of users. Using this endpoint, you can:\n\n*   Search based on a variety of criteria\n    \n*   Select the fields to be returned\n    \n*   Sort the returned results\n    \n\nThis endpoint is **eventually consistent**, and as such, we recommend that you use this endpoint for back office processes such as changing the display name of an existing user.\n\n## Request example\n\nTo search for users, make a `GET` request to the [`/api/v2/users` endpoint](https://auth0.com/docs/api/management/v2#!/Users/get_users). The request must include a [Management API access token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens). Pass your search query to the `q` parameter and set the `search_engine` parameter to `v3`.\n\nFor example, to search for a user whose email is exactly `jane@exampleco.com`, use `q=email:\"jane@exampleco.com\"`:\n\n*   [cURL](#9e36007721d54403a8e41967bdc1273c_shell)\n*   [C#](#9e36007721d54403a8e41967bdc1273c_csharp)\n*   [Go](#9e36007721d54403a8e41967bdc1273c_go)\n*   [Java](#9e36007721d54403a8e41967bdc1273c_java)\n*   [Node.JS](#9e36007721d54403a8e41967bdc1273c_node)\n*   [Obj-C](#9e36007721d54403a8e41967bdc1273c_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'email:\"jane@exampleco.com\"', search_engine: 'v3'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=email%3A%22jane%40exampleco.com%22&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nIf successful, you'll receive a response like this:\n\n```\n[\n  {\n    \"email\": \"jane@exampleco.com\",\n    \"email_verified\": false,\n    \"username\": \"janedoe\",\n    \"phone_number\": \"+199999999999999\",\n    \"phone_verified\": false,\n    \"user_id\": \"auth0|5457edea1b8f22891a000004\",\n    \"created_at\": \"\",\n    \"updated_at\": \"\",\n    \"identities\": [\n      {\n        \"connection\": \"Initial-Connection\",\n        \"user_id\": \"5457edea1b8f22891a000004\",\n        \"provider\": \"auth0\",\n        \"isSocial\": false\n      }\n    ],\n    \"app_metadata\": {},\n    \"user_metadata\": {},\n    \"picture\": \"\",\n    \"name\": \"\",\n    \"nickname\": \"\",\n    \"multifactor\": [\n      \"\"\n    ],\n    \"last_ip\": \"\",\n    \"last_login\": \"\",\n    \"logins_count\": 0,\n    \"blocked\": false,\n    \"given_name\": \"\",\n    \"family_name\": \"\"\n  }\n]\n```\n\n## Query examples\n\nBelow are some examples of the kinds of queries you can make with the Management API.\n\n| Use case | Query |\n| --- | --- |\n| Search for all users whose name contains \"john\" | `name:*john*` |\n| Search all users whose name is exactly \"jane\" | `name:\"jane\"` |\n| Search for all user names starting with \"john\" | `name:john*` |\n| Search for user names that start with \"jane\" and end with \"smith\" | `name:jane*smith` |\n| Search for all users whose email is exactly \"john@exampleco.com\" | `email:\"john@exampleco.com\"` |\n| Search for all users whose email is exactly \"john@exampleco.com\" or \"jane@exampleco.com\" using `OR` | `email:(\"john@exampleco.com\" OR \"jane@exampleco.com\")` |\n| Search for users without verified email | `email_verified:false OR NOT _exists_:email_verified` |\n| Search for users who have the `user_metadata` field named `full_name` with the value of \"John Smith\" | `user_metadata.full_name:\"John Smith\"` |\n| Search for users from a specific connection | `identities.connection:\"google-oauth2\"` |\n| Search for all users that have never logged in | `(NOT _exists_:logins_count OR logins_count:0)` |\n| Search for all users who logged in before 2018 | `last_login:[* TO 2017-12-31]` |\n| Search for all users whose last login was in December 2017 | `last_login:{2017-11 TO 2017-12]`, `last_login:[2017-12-01 TO 2017-12-31]` |\n| Search for all users with logins count >= 100 and <= 200 | `logins_count:[100 TO 200]` |\n| Search for all users with logins count >= 100 | `logins_count:[100 TO *]` |\n| Search for all users with logins count > 100 and < 200 | `logins_count:{100 TO 200}` |\n| Search for all users whose email domain is \"exampleco.com\" | `email.domain:\"exampleco.com\"` |\n\n## Limitations\n\nThe endpoint returns a maximum of 50 users, even if more users match your query.\n\nIf you need to return more than 50 users, use the `page` parameter to show more pages of results. Each page contains 50 users. For example, you can specify `&page=2` to show results 51-100, specify `&page=3` to show results 101-150, and so on. However, this endpoint never returns a total of more than 1000 users with the same search criteria, even with paging.\n\nThere is a 1 MB per-user limit on user data that can be indexed, queried, and returned by the [user search endpoint](https://auth0.com/docs/api/management/v2/users/get-users). For more information on how this affects custom metadata larger than 1MB, see [Metadata Field Names and Data Types](https://auth0.com/docs/manage-users/user-accounts/metadata/metadata-fields-data#size-limits-and-storage). The [get user endpoint](https://auth0.com/docs/api/management/v2/users/get-users-by-id) must be used to retrieve all user attributes for oversized user profiles.\n\nIf you need a complete export of all of your users, use the [export job](https://auth0.com/docs/api/management/v2#!/Jobs/post_users_exports) or the [User Import / Export](https://auth0.com/docs/extensions/user-import-export) extension.\n\nIf you get the error `414 Request-URI Too Large` this means that your query string is larger than the supported length. In this case, refine your search.\n\nWe do **not** recommend that you use this endpoint for:\n\n*   Operations that require immediate consistency. Instead, use the [Get Users by Email endpoint](https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-email-endpoint) or the [Get Users by ID endpoint](https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-id-endpoint).\n    \n*   User exports. Instead, use the [User Export endpoint](https://auth0.com/docs/manage-users/user-migration/bulk-user-exports).\n    \n*   Operations that require user search as part of authentication processes. Instead, use the Get Users by Email endpoint or the Get Users by ID endpoint.\n    \n*   Searching for Users for [Account Linking](https://auth0.com/docs/manage-users/user-accounts/user-account-linking) by Email. Instead, use the Get Users by Email endpoint.\n    \n\n## Learn more\n\n*   [User Search Query Syntax](https://auth0.com/docs/manage-users/user-search/user-search-query-syntax)\n*   [Sort Search Results](https://auth0.com/docs/manage-users/user-search/sort-search-results)\n*   [View Search Results by Page](https://auth0.com/docs/manage-users/user-search/view-search-results-by-page)\n*   [Bulk User Exports](https://auth0.com/docs/manage-users/user-migration/bulk-user-exports)\n*   [Check API Calls](https://auth0.com/docs/troubleshoot/authentication-issues/check-api-calls)",
    "title": "Retrieve Users with the Get Users Endpoint",
    "description": "Learn how to retrieve lists of users using the get_users endpoint.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-id-endpoint",
    "markdown": "# Retrieve Users with the Get Users by ID Endpoint\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/%7BuserId%7D' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/%7BuserId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/%7BuserId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/%7BuserId%7D\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/%7BuserId%7D',\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/%7BuserId%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/%7BuserId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/%7BuserId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/%7BuserId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/%7BuserId%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Users with the Get Users by ID Endpoint",
    "description": "Learn how to retrieve lists of users using the get-users-by-id endpoint.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/user-search-query-syntax",
    "markdown": "# User Search Query Syntax\n\nWhen searching for users, you can create queries using [Lucene query syntax](http://www.lucenetutorial.com/lucene-query-syntax.html) to refine your search.\n\nThe query string is parsed into a series of terms and operators:\n\n*   A term can be a single word such as `jane` or `smith`.\n    \n*   A term can be a phrase surrounded by double quotes (`\"green apple\"`), which will match all words in the phrase in the same order.\n    \n*   A term without a field name will not match text in the [user metadata](https://auth0.com/docs/manage-users/user-accounts/metadata) fields.\n    \n*   Multiple terms can be grouped together with parentheses to form sub-queries.\n    \n*   Search values for the normalized user fields (`email`, `name`, `given_name`, `family_name`, and `nickname`) are case insensitive. All other fields (including all `app_metadata`/`user_metadata` fields) are case sensitive.\n    \n*   Operators (`AND`, `OR`, `NOT`) work on all normalized user fields and root metadata fields.\n    \n*   Operators should always be capitalized.\n    \n\n## Searchable fields\n\nYou can search for users using all the [normalized user profile fields](https://auth0.com/docs/manage-users/user-accounts/user-profiles/normalized-user-profile-schema) and the fields below:\n\n| Search Field | Data Type | Description |\n| --- | --- | --- |\n| `phone_number` | text | The user's phone number. Only valid for users with SMS connections. |\n| `phone_verified` | boolean | The `true/false` value indicates whether the user's phone number has been verified. Only valid for users with SMS connections. |\n| `logins_count` | integer | The number of times the user has logged in. If a user is blocked and logs in, the blocked session is counted in `logins_count` and updates the `last_login` value. |\n| `created_at` | date time | The timestamp of when the user profile was first created. |\n| `updated_at` | date time | The timestamp of when the user's profile was last updated/modified. |\n| `last_login` | date time | The timestamp of when the user last logged in. In case this property executes from inside a [Rule](https://auth0.com/docs/rules) with the `user` object, the value will be associated with the login that triggered the rule (since rules execute after the actual login). |\n| `last_ip` | text (valid IP address) | The IP address associated with the user's last login. |\n| `blocked` | boolean | The `true` or `false` value indicates if the user has been blocked. Note: `true` _only_ brings back users blocked via the Admin Dashboard and Management API; it does not bring back users blocked by brute force anomaly detection. |\n| `email.domain` | text | The domain part of the user's email. |\n| `organization_id` | text (valid organization ID) | The organization that the user is a member of |\n\nMetadata fields may be used with:\n\n*   boolean\n    \n*   numeric: integer or double\n    \n*   text\n    \n*   objects: in order to search a scalar value nested in another object, use the path to the field. For example, `app_metadata.subscription.plan:\"gold\"`\n    \n*   arrays: in order to search fields in objects nested in arrays, use the path to the field and ignore the array level. For example, `user_metadata.addresses.city:\"Paris\"`\n    \n\nMetadata fields that contain an empty array, empty object, or `null` value are not indexed and cannot be searched for.\n\nRange and wildcard searches are not available on `user_metadata` fields.\n\n## Exact match\n\nTo find exact matches, use double quotes: `name:\"jane smith\"`.\n\nFor example, to find users with the name `jane smith`, use `q=name:\"jane smith\"`:\n\n*   [cURL](#05852b2d24db47e4b198946d08cf64b0_shell)\n*   [C#](#05852b2d24db47e4b198946d08cf64b0_csharp)\n*   [Go](#05852b2d24db47e4b198946d08cf64b0_go)\n*   [Java](#05852b2d24db47e4b198946d08cf64b0_java)\n*   [Node.JS](#05852b2d24db47e4b198946d08cf64b0_node)\n*   [Obj-C](#05852b2d24db47e4b198946d08cf64b0_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'name:\"jane smith\"', search_engine: 'v3'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=name%3A%22jane%20smith%22&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Wildcards\n\nWildcard searches can be run on terms using the asterisk character (`*`) to replace zero or more characters. Wildcard searches are not available on `user_metadata` fields.\n\n#### Examples\n\n*   `name:john*` returns all users with `john` at the beginning of their names.\n    \n*   `name:j*` returns all users with `j` at the beginning of their names.\n    \n*   `q=name:john*` returns all users whose names start with `john`.\n    \n*   For suffix matching, literals must have 3 characters or more. For example, `name:*usa` is allowed, but `name:*sa` is not.\n    \n\n*   [cURL](#eae0033ef5104cadb0cd5e480a0deb13_shell)\n*   [C#](#eae0033ef5104cadb0cd5e480a0deb13_csharp)\n*   [Go](#eae0033ef5104cadb0cd5e480a0deb13_go)\n*   [Java](#eae0033ef5104cadb0cd5e480a0deb13_java)\n*   [Node.JS](#eae0033ef5104cadb0cd5e480a0deb13_node)\n*   [Obj-C](#eae0033ef5104cadb0cd5e480a0deb13_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'name:john*', search_engine: 'v3'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=name%3Ajohn*&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Ranges\n\nYou can use ranges in your user search queries. Range searches are not available on user metadata fields.\n\n*   For inclusive ranges, use square brackets: `[min TO max]`.\n    \n*   For exclusive ranges, use curly brackets: `{min TO max}`.\n    \n*   Curly and square brackets can be combined in the same range expression: `logins_count:[100 TO 200}`.\n    \n*   Use ranges in combination with wildcards. For example, to find all users with more than 100 logins, use `q=logins_count:{100 TO *]`.\n    \n\n*   [cURL](#dbe3eea6a8a247e78127c919a4da25dd_shell)\n*   [C#](#dbe3eea6a8a247e78127c919a4da25dd_csharp)\n*   [Go](#dbe3eea6a8a247e78127c919a4da25dd_go)\n*   [Java](#dbe3eea6a8a247e78127c919a4da25dd_java)\n*   [Node.JS](#dbe3eea6a8a247e78127c919a4da25dd_node)\n*   [Obj-C](#dbe3eea6a8a247e78127c919a4da25dd_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'logins_count:{100 TO *]', search_engine: 'v3'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=logins_count%3A%7B100%20TO%20*%5D&search_engine=v3\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Searchable Profile Attribute Examples\n\nWhen searching for users in the Auth0 Management API, you can filter users by `user_metadata` or `app_metadata`. To do so, you can use Lucene Search Syntax with the `q` parameter.\n\nBecause the Auth0 Management API [list or the search users](https://auth0.com/docs/api/management/v2#!/Users/get_users) endpoint is limited to 1000 results (10 pages of 100 records), filtering is a useful way of ensuring that the most relevant results are returned.\n\nBelow is a sample of a user profile `user_metadata`:\n\n```\n{\n  \"favorite_color\": \"blue\",\n  \"approved\": false,\n  \"preferredLanguage\": \"en\",\n  \"preferences\": {\n    \"fontSize\": 13\n  },\n  \"addresses\":{\n    \"city\":[\"Paris\",\"Seattle\"]\n  }\n}\n```\n\n### Filter metadata attributes\n\nTo return a `user_metadata` value, update the `q` query with a filter for the attribute.\n\nFor `user_metadata` values, you can query the profile directly:\n\n`q: _exists_:user_metadata.fav_color`\n\nThis query returns all user profiles with the `fav_color` attribute in the `user_metadata`.\n\n### Filter metadata nested object attributes and values\n\nYou can also search on nested objects in `user_metadata`:\n\n`q: _exists_:user_metadata.preferences.fontSize`\n\nThis queries all user profiles with `preferences.fontSize` configured in the `user_metadata`.\n\nTo search for the values of a nested object from another object, review the query below:\n\n`q: user_metadata.preferences.fontSize:13`\n\nThis query returns all user profiles that match the `fontSize` attribute with the value of `13`.\n\n### Filter metadata nested array values\n\nYou can use the query below to search fields in nested arrays:\n\n`q: user_metadata.addresses.city:\"Seattle\"`\n\nThis returns all user profiles that return the value of `Seattle` from the `address.city` attributes in the `user_metadata`.\n\n## Learn more\n\n*   [Sort Search Results](https://auth0.com/docs/manage-users/user-search/sort-search-results)\n*   [View Search Results by Page](https://auth0.com/docs/manage-users/user-search/view-search-results-by-page)\n*   [Retrieve Users with the Get Users Endpoint](https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-endpoint)",
    "title": "User Search Query Syntax",
    "description": "Describes Auth0's user search query string syntax.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/v2",
    "markdown": "# User Search v2\n\nAuth0 allows you, as an administrator, to search for users using [Lucene Query Syntax](http://www.lucenetutorial.com/lucene-query-syntax.html).\n\nThis document provides sample queries and demonstrates how you can search for users. We also suggest that you refer to [Query Syntax](https://auth0.com/docs/manage-users/user-search/v2/query-syntax) for more examples of query string syntax.\n\n## Search for users using the Management API\n\nYou can also search for users using the [Management API](https://auth0.com/docs/api/management/v2). The easiest way to do this is by making use of the **API Explorer**. This technique is discussed briefly below, but please note that the Auth0 Management API is a REST API, so you can make API calls using anything that can make HTTP requests, or by using one of the [Auth0 SDKs](https://auth0.com/docs/libraries).\n\nIn order to make requests to the Management API, you will need a token. Please refer to [Access Tokens for the Management API](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens) for more information.\n\n### Search using the API Explorer\n\nTo search users using the [Management API Explorer](https://auth0.com/docs/api/management/v2#!/Users/get_users), go to the **Users** section and then select **List or search users**. Scroll down to the `q` parameter. You can use any query string which uses the [query syntax](https://auth0.com/docs/manage-users/user-search/v2/query-syntax) in this field.\n\n![undefined](https://images.ctfassets.net/cdy7uua7fh8z/018m6DHJ8UzAfNaY0c1Ci5/4d317693627d03b830ca80b0ebe0a82e/search-users-api.png)\n\n## Sorting search results\n\nTo sort the list of users returned from the Management API, you can make use of the `sort` parameter. Use the format `field:order` for the value of the `sort` field, where `field` is the name of the field you want to sort by, and `order` can be `1` for ascending and `-1` for descending. For example, to sort users in ascending order by the `created_at` field you can pass the value of `created_at:1` for the `sort` parameter. Sorting by `app_metadata` or `user_metadata` is not supported.\n\nFor more information on the `sort` and other parameters, please refer to the [Management API Explorer documentation](https://auth0.com/docs/api/management/v2/#!/Users/get_users).\n\n## Exact matching and tokenization\n\nBecause of the manner in which ElasticSearch handles tokenization on `+` and `-`, unexpected results can occur when searching by some fields. For example, when searching for a user whose `name` is `jane` (`name:\"jane\"`), the results will be both for `jane` and `jane-doe`, because both of these contain the exact search term that you used. The difference may not affect some searches, but it will affect others, and provide unanticipated results.\n\nYou can solve this problem either by using structured JSON in your metadata, or by using the raw subfield.\n\n## Using the raw subfield\n\nIf you wish to avoid the potential pitfalls of analyzed data and search for an exact match to your term - an exact string comparison - then for some fields you can use the `raw` subfield, which will be `not_analyzed`.\n\nSo, in the example `name.raw:\"jane\"`, the user data for `jane` would match, but `jane-doe` would not.\n\nThe fields that support `raw` subfield queries are:\n\n*   `identities.connection⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`identities.provider⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`identities.user_id⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`email⁠`\n    \n*   ⁠⁠⁠⁠`phone_number⁠⁠`\n    \n*   ⁠⁠⁠⁠`family_name⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`given_name⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`username⁠⁠⁠⁠`\n    \n*   ⁠⁠⁠⁠`name⁠⁠`\n    \n*   ⁠⁠⁠⁠`nickname`\n    \n\n## Example queries\n\nBelow are some example queries to illustrate the kinds of queries that are possible using the Management API V2.\n\n| Use Case | Query |\n| --- | --- |\n| Search for all users whose name _contains_ \"john\" | `name:\"john\"` |\n| Search all users whose name _is_ exactly \"john\" | `name.raw:\"john\"` |\n| Search for all user names starting with \"john\" | `name:john*` |\n| Search for user names that start with \"john\" and end with \"smith\" | `name:john*smith` |\n| Search for all users whose email _is_ exactly \"john@contoso.com\" | `email.raw:\"john@contoso.com\"` |\n| Search for all users whose email is exactly \"john@contoso.com\" or \"mary@contoso.com\" using `OR` | `email.raw:(\"john@contoso.com\" OR \"mary@contoso.com\")` |\n| Search for users without verified email | `email_verified:false OR NOT _exists_:email_verified` |\n| Search for users who have the `user_metadata` field named `name` with the value of \"John Doe\" | `user_metadata.name:\"John Doe\"` |\n| Search for users from a specific connection or provider | `identities.provider:\"google-oauth2\"` |\n| Search for all users that have never logged in | `(NOT _exists_:logins_count OR logins_count:0)` |\n| Search for all users who logged in before 2015 | `last_login:[* TO 2014-12-31]` |\n| Fuzziness: Search for terms that are similar to, but not exactly like, `jhn` | `name:jhn~` |\n| All users with more than 100 logins | `logins_count:>100` |\n| Logins count >= 100 and <= 200 | `logins_count:[100 TO 200]` |\n| Logins count >= 100 | `logins_count:[100 TO *]` |\n| Logins count > 100 and < 200 | `logins_count:{100 TO 200}` |\n\n### Example request\n\nBelow is an example request for searching all users whose email is exactly \"john@contoso.com\".\n\n*   [cURL](#5e39ab105c7e4d0398a0f2e44abd2d0d_shell)\n*   [C#](#5e39ab105c7e4d0398a0f2e44abd2d0d_csharp)\n*   [Go](#5e39ab105c7e4d0398a0f2e44abd2d0d_go)\n*   [Java](#5e39ab105c7e4d0398a0f2e44abd2d0d_java)\n*   [Node.JS](#5e39ab105c7e4d0398a0f2e44abd2d0d_node)\n*   [Obj-C](#5e39ab105c7e4d0398a0f2e44abd2d0d_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2' \\\n  --header 'authorization: Bearer ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\")\n  .header(\"authorization\", \"Bearer ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users',\n  params: {q: 'email.raw:\"john@contoso.com\"', search_engine: 'v2'},\n  headers: {authorization: 'Bearer ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users?q=email.raw%3A%22john%40contoso.com%22&search_engine=v2\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "User Search v2",
    "description": "This page lists several examples of user search queries using query string syntax.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/user-search-best-practices",
    "markdown": "# User Search Best Practices\n\nHere are some best practices for user search:\n\n*   You need a token to make requests to the Management API. To learn more, read [Management API Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).\n    \n*   To perform user search requests, the `read:users` scope is required.\n    \n*   To get the latest search results, use an **immediately consistent** endpoint during authentication processes, such as [Get Users by ID](https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-id-endpoint) and [Get Users by Email](https://auth0.com/docs/manage-users/user-search/retrieve-users-with-get-users-by-email-endpoint). Searches using these endpoints reflect the results of all successful write operations including those that occurred shortly prior to your request.\n    \n*   Use a well-known schema for metadata:\n    \n    *   Use consistent data types for properties.\n        \n    *   Avoid dynamic property names.\n        \n    *   Avoid large schema sizes and deep structures.\n        \n    *   Avoid storing data you do not need for authentication and authorization purposes.\n        \n*   Search queries time out (HTTP status code 503) if they're not completed in two seconds or less. Queries that take longer indicate that it's either an expensive query or that the query has an error resulting in it not completing quickly\n    \n*   Don't use a search criteria that returns a large data set (more than 1000 results).\n    \n*   Don't use existence queries (for example, \"give me all users with a property regardless of its value\").\n    \n*   Don't poll the search APIs.\n    \n*   Don't perform user search requests within login flow extension points, such as Rules or `post-login` Actions.\n    \n*   Don't use large metadata fields (try to keep metadata fields to 2 KB or less).\n    \n*   Using wildcard on searches can affect performance. In some cases, wildcard searches on large data sets can result in time out errors. We also recommend avoiding wildcards prefixed to the search term, while using them as suffixes yields better performance.\n    \n*   Escape the space character to improve performance (e.g., `q=name:John Doe` should be written as `q=name:John\\ Doe`).",
    "title": "User Search Best Practices",
    "description": "Learn about best practices when searching for users in Auth0",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/rbac",
    "markdown": "# Role-Based Access Control\n\nRole-based access control (RBAC) refers to the idea of assigning permissions to users based on their role within an organization. It offers a simple, manageable approach to access management that is less prone to error than assigning permissions to users individually.\n\nWhen using RBAC for Role Management, you analyze the needs of your users and group them into roles based on common responsibilities. You then assign one or more roles to each user and one or more permissions to each role. The user-role and role-permissions relationships make it simple to perform user assignments since users no longer need to be managed individually, but instead have privileges that conform to the permissions assigned to their role(s).\n\nFor example, if you were using RBAC to control access for an HR application, you could give HR managers a role that allows them to update employee details, while other employees would be able to view only their own details.\n\nWhen planning your access control strategy, it's best practice to assign users the fewest number of permissions that allow them to get their work done.\n\n## Benefits of RBAC\n\nWith RBAC, access management is easier as long as you adhere strictly to the role requirements. RBAC helps you:\n\n*   create systematic, repeatable assignment of permissions\n    \n*   easily audit user privileges and correct identified issues\n    \n*   quickly add and change roles, as well as implement them across APIs\n    \n*   cut down on the potential for error when assigning user permissions\n    \n*   integrate third-party users by giving them pre-defined roles\n    \n*   more effectively comply with regulatory and statutory requirements for confidentiality and privacy\n    \n\n## RBAC Model\n\n### Roles\n\nEssentially, a role is a collection of permissions that you can apply to users. Using roles makes it easier to add, remove, and adjust permissions than assigning permissions to users individually. As your user base increases in scale and complexity, roles become particularly useful.\n\nYou can also use roles to collect permissions defined for various APIs. For example, say you have a marketing module that allows users to create and distribute newsletters to customers. Your marketing content specialist creates all of the newsletters and prepares them for distribution. Similarly, you have an event module that allows users to create, publish, and manage event registration. Your event coordinator creates the events. Once the VP of Marketing approves the newsletters and events, their assistant publishes the events and distributes the newsletters. In this case, your Newsletter API could have a `distribute:newsletters` permission and your Event API could have a `publish:events` permission. These permissions could then be gathered into a role called `Marketing Publisher` and assigned to the VP of Marketing's assistant.\n\nIn addition, Organization-specific roles can be [added to Organization members](https://auth0.com/docs/manage-users/organizations/configure-organizations/add-member-roles) and used to allow access in your application based on the organizations with which an end-user is logging in. This is particularly useful when supporting multi-tenant & SaaS products, where a particular user might have a privileged role in one organization, but not in others.\n\n## Overlapping role assignments\n\nRBAC is an additive model, so if you have overlapping role assignments, your effective permissions are the union of your role assignments.\n\nFor example, let's say you have an API that provides data for an event application. You create a role of `Organizer` and assign it permissions that allow it to view, create, and edit events. You also create a role of `Registrant` and assign it permissions that allow it to view and register for events. Any users with both `Organizer` and `Registrant` roles will be able to view, create, edit, and register for events.\n\n## Role-based access control in Auth0\n\nCurrently, we provide two ways of implementing role-based access control (RBAC), which you can use in place of or in combination with your API's own internal access control system:\n\n*   [Authorization Core](https://auth0.com/docs/manage-users/access-control/configure-core-rbac)\n    \n*   [Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension)\n    \n\nWe are expanding our Authorization Core feature set to match the functionality of the Authorization Extension. Our new core RBAC implementation improves performance and scalability and will eventually provide a more flexible RBAC system than the Authorization Extension.\n\nFor now, both implement the key features of RBAC and allow you to restrict the custom scopes defined for an API to those that have been assigned to the user as permissions. For a comparison, see [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension).\n\n### Extending RBAC\n\nYou can provide more control by using [rules](https://auth0.com/docs/customize/rules) to restrict access based on a combination of attributes, such as user department, time of day, location of access, or any other user or API attribute (for example, username, security clearance, or API name).\n\nFor more info about using rules with authorization policies, see [Rules with Authorization Policies](https://auth0.com/docs/manage-users/access-control/rules-for-authorization-policies).\n\n## Learn more\n\n*   [Enable Role-Based Access Control for APIs](https://auth0.com/docs/get-started/apis/enable-role-based-access-control-for-apis)\n*   [Troubleshoot Role-Based Access Control and Authorization](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-rbac-authorization)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)",
    "title": "Role-Based Access Control",
    "description": "Understand the concept of role-based access control and how it applies in Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/authorization-policies",
    "markdown": "# Authorization Policies\n\nBehind the scenes, role-based authorization uses a pre-configured authorization policy, which contains conditions that allow code to evaluate whether a user should be permitted to access a protected API.\n\nThe authorization policy determines:\n\n*   how to define and organize the users or roles that are affected by the policy\n    \n*   what logic and conditions apply to the policy and whether their outcome permits or denies access\n    \n\nWhen using Auth0's core authorization and [role-based access control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac), the policy includes evaluating the roles and permissions assigned to users. To use these features, you must [enable role-based access control for APIs](https://auth0.com/docs/get-started/apis/enable-role-based-access-control-for-apis).\n\nYou can further customize the authorization policy by using [rules](https://auth0.com/docs/customize/rules). To learn more, read [Rules for Authorization Policies](https://auth0.com/docs/manage-users/access-control/rules-for-authorization-policies).",
    "title": "Authorization Policies",
    "description": "Understand the concept of authorization policies and how they apply in Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/rules-for-authorization-policies",
    "markdown": "# Rules for Authorization Policies\n\nYou can append [Rules](https://auth0.com/docs/customize/rules) to the pre-configured authorization policy to exercise additional control over permitting or denying user access. A rule contains custom code that makes an authorization decision based on appropriate logic. When combined with other rules, it helps define what happens in different contexts.\n\nRules can restrict access based on any combination of attributes you store for users, such as user department, time of day, location, or any other user or API attribute (like username, security clearance, or API name).\n\nFor example, if you were using rules to provide finely-grained access control at a non-profit organization, you could give only W2 employees working in the Research and Development department in the New Delhi office access to an application.\n\nFor samples of rule implementations with authorization policies, read [Sample Use Cases: Rules with Authorization](https://auth0.com/docs/manage-users/access-control/sample-use-cases-rules-with-authorization).\n\nBased on the order in which they run, rules can change the outcome of the authorization decision prior to the permissions being added to the Access Token. The basic process with rules injected is as follows:\n\n1.  The user tries to authenticate with the application.\n    \n2.  Auth0 brings the request to the selected identity provider.\n    \n3.  Once the identity provider confirms that user credentials are valid, all created rules run in the order in which they are configured in the Dashboard.\n    \n4.  Assuming no rule has restricted the user's access, the user is authorized to access the application.\n    \n\n## Learn more\n\n*   [Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/rbac)\n*   [Configure Core Authorization Features for Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/configure-core-rbac)",
    "title": "Rules for Authorization Policies",
    "description": "Understand how rules apply to authorization policies and Auth0's role-based access system (RBAC).",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/sample-use-cases-role-based-access-control",
    "markdown": "# Sample Use Cases: Role-Based Access Control\n\nLet's take a look at an example of why you might need and how you could use [role-based access control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac) in your authorization flow.\n\nLet's say you are a business who provides business-to-business software-as-a-service to non-profit organizations. Your product allows non-profits to create, manage, and market products to potential donors. Your application contains several different modules, two of which are:\n\n*   a gift shop point of sale (POS) module that enables non-profits to effectively create pop-up t-shirt shops and manage their sales.\n    \n*   a marketing module that allows non-profits to create and distribute newsletters to their donors.\n    \n\nYou want to use Auth0 to control the access of your non-profit customers to different parts of your application. Without RBAC, all non-profit employees and volunteers will have access to all features of your application, which is not ideal, especially since one of them is an animal rescue who has a variety of volunteers with knowledge of only the area in which they volunteer.\n\nInstead, you implement RBAC, [creating some permissions](https://auth0.com/docs/get-started/apis/add-api-permissions) that users of your gift shop POS module would need:\n\n*   `read:catalog-item`\n    \n*   `read:customer-profile`\n    \n*   `create:invoice`\n    \n\nAnd to make these easier to manage, you [create a role](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles) called `Gift Shop Manager` and [add these permissions to that role](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/add-permissions-to-roles).\n\nSimilarly, you create permissions for users of your marketing module, which include:\n\n*   `create:newsletter`\n    \n*   `edit:newsletter`\n    \n*   `delete:newsletter`\n    \n*   `send:newsletter`\n    \n*   `edit:distribution-list`\n    \n\nAnd you create a role called `Newsletter Admin` and add these permissions to that role.\n\nNow, when your animal rescue brings in their volunteer, Astrid, to run their pop-up t-shirt shop, Astrid can be [assigned the role](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users) of `Gift Shop Manager`. When you assign this role to Astrid, she is granted all the permissions that you assigned to the role. Since Astrid knows nothing about publishing newsletters (and isn't the best with email), you never assigned her the `Newsletter Admin` role, so she never has access to the marketing module.\n\nFrom a more technical perspective, when Astrid logs into your product, Auth0 authenticates and authorizes her and includes the permissions in the returned Access Token. Then, your product inspects the token to learn which module to display to Astrid.\n\nBy using Auth0's RBAC, you avoid building and maintaining separate authorization systems; instead, you use the token you already receive during authorization. And when Astrid moves away or decides she is tired of running the gift shop and would rather coordinate the foster program, you can easily [](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users)[remove the Gift Shop Manager role](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users) from her and assign her a new role.\n\nAnd if maintaining the roles and permissions for all of your customers becomes too unwieldy, you can also use the Auth0 API to create a module within your product that allows customers to manage their own RBAC, thereby reducing liability and cutting staffing costs.",
    "title": "Sample Use Cases: Role-Based Access Control",
    "description": "Learn how to implement roles-based authorization (RBAC) in different scenarios and explore how to use rules with RBAC.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac",
    "markdown": "# Configure Core Authorization Features for Role-Based Access Control\n\nThe core Authorization features of Auth0 allow for role-based access control (RBAC) of your APIs.\n\nFor RBAC to work properly, you must enable it for your API using either the Dashboard or the Management API. To learn more, read [Enable Role-Based Access Control for APIs](https://auth0.com/docs/get-started/apis/enable-role-based-access-control-for-apis).\n\nAuthorization Core functionality is different from the Authorization Extension. For a comparison between the two products, read [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension).\n\nTo use the core functionality most efficiently, you should do the following:\n\n1.  [Register API with Auth0](https://auth0.com/docs/get-started/auth0-overview/set-up-apis)\n    \n2.  [Define permissions for API](https://auth0.com/docs/get-started/apis/add-api-permissions)\n    \n3.  [Create roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles)\n    \n4.  [Assign roles to users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users)\n    \n5.  [Assign permissions to users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-permissions-to-users), if needed.\n    \n\n## Learn more\n\n*   [Enable Role-Based Access Control for APIs](https://auth0.com/docs/get-started/apis/enable-role-based-access-control-for-apis)\n*   [Manage Role-Based Access Control Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles)\n*   [Manage Role-Based Access Control Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users)\n*   [Manage Role-Based Access Control Permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions)",
    "title": "Configure Core Authorization Features for Role-Based Access Control",
    "description": "Learn how to configure Auth0 Core Authorization features for role-based access control (RBAC) of your APIs.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/session-layers",
    "markdown": "# Session Layers\n\nThere are typically three session layers that can be created when your users log in:\n\n*   **Application Session Layer**: This layer is the session inside your application. Though your application uses Auth0 to authenticate users, your application also tracks that the user has logged in to your application; in a regular web application, for example, you achieve this by storing this information inside a cookie.\n    \n*   **Auth0 Session Layer**: Auth0 also maintains a session on the Authorization Server for the user and stores their user information inside a cookie. This layer is used so that the next time a user is redirected to Auth0 for login the user's information will be remembered. This session layer makes the SSO experience possible for inbound SSO implementations.\n    \n*   **Identity Provider Session Layer**: When users attempt to sign in using an identity providers such as Facebook or Google, and they already have a valid sign-in (with whichever provider they choose) they will not be prompted again to sign in though they may be asked to give permission to share their information with Auth0 and, in turn, your application.\n    \n\n### Session logout\n\nLogout in the context of Auth0 implementations is the act of terminating an authenticated session. It is a security best practice to terminate sessions when they’re no longer needed to avoid a potential takeover by unauthorized parties.\n\nAuth0 provides tools to help you give users the ability to log out; this includes options for providing different levels of logout and also determining where the user will land after the logout is complete.\n\n*   **Application Session Layer Logout**: Logging users out of your applications typically results in their application session being cleared, and this should be handled by your application: for the Application Session Layer, there is nothing within your Auth0 tenant that you need to use to facilitate session termination. This will require you to utilize whatever application session stack you are using to clear out any session related information. Note that some of the Auth0 SDKs do provide some support for application sessions; please check the documentation to see if there is any local SDK session removal that needs to be done.\n    \n*   **Auth0 Session Layer Logout**: You can log users out of the Auth0 session layer by redirecting them to the Auth0 Logout endpoint so Auth0 can clear the SSO cookie.\n    \n*   **Identity Provider Session Layer Logout**: It is not necessary to log the users out of this session layer, but you can use Auth0 to force the logout if required.\n    \n\n#### Redirect URLs\n\nLogging out of your Auth0 Session Layer will require you to redirect the user to `https://<{yourCNAME}` or `{yourTenant}.auth0.com>/oidc/logout` - typically performed via use of the appropriate method in the Auth0 SDK for your technology stack. This will clear your Auth0 session. You will also want to add a query parameter for that request called `id_token_hint` - this parameter should contain a URL that has been pre-registered and protects you against open redirect attacks.\n\nAuth0 only redirects to AllowListed URLs after logout and there are two places you can configure these. The first place you can set this is at your Auth0 tenant level where you can put the set of logout URLs that are shared between all applications. The second place is in the application settings: if you need different redirects for each application, you can allowlist the URLs in your application settings. This allows you to set logout URLs in an application-specific context.\n\n#### Session lifetime and session timeout\n\nYou can set the behavior in cases where a user doesn’t explicitly log out of your application. Auth0 provides [session lifetime](https://auth0.com/docs/manage-users/sessions/session-lifetime-limits) limits to deal with Auth0 session termination in this scenario.\n\n#### Federated logout\n\nYou can also log the users out of the identity provider session layer. While this is not recommended, for many providers, Auth0 provides this behavior by having you add the `federated` query parameter to the redirect to `/oidc/logout`. This redirects the user to their identity provider and logs them out there as well. To learn more about federated logout, review the article [Log Users Out of Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps).\n\n## Learn more\n\n*   [Session Lifetime Limits](https://auth0.com/docs/manage-users/sessions/session-lifetime-limits)",
    "title": "Session Layers",
    "description": "Describes layers created when users log in.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension",
    "markdown": "# Authorization Core vs. Authorization Extension\n\nAuth0 currently provides two ways of implementing [role-based access control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac): our Core implementation and our Authorization Extension. Our Core implementation improves performance and scalability.\n\nWe recommend using Authorization Core for most implementations. If you are looking to represent teams, business customers, or partners in a B2B or SaaS application, we recommend representing them as [Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) and using Authorization Core. The Authorization Extension does not have support for Organizations.\n\nTo help you decide which feature is right for your implementation, we present the differences between the two:\n\n| Feature | Authorization Core | Authorization Extension |\n| --- | --- | --- |\n| Enhanced performance and scalability | Yes - Read [Entity Limit Policy](https://auth0.com/docs/policies/entity-limit-policy) | No - Limited to 500KB of data (1000 groups, 3000 users, where each user is a member of 3 groups; or 20 groups, 7000 users, where each user is a member of 3 groups) |\n| Create/edit/delete Roles | Yes | Yes |\n| Roles can contain permissions from one or more APIs | Yes | No  |\n| Users and Roles can be assigned to Groups | No  | Yes |\n| Roles are attached to specific applications | No  | Yes |\n| Create/edit/delete Users | Yes | Yes |\n| Search Users by user, email, connection | Yes | Yes |\n| Search Users by identity provider, login count, last login, phone number | Yes | No  |\n| Search Users using Lucene syntax | Yes | No  |\n| User import/export via JSON | Not currently | Yes |\n| Create custom authorization policies | Yes | No  |\n\n## Learn more\n\n*   [Authorization Policies](https://auth0.com/docs/manage-users/access-control/authorization-policies)\n*   [Configure Core Authorization Features for Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/configure-core-rbac)\n*   [Entity Limit Policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/entity-limit-policy)\n*   [Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)\n*   [Troubleshoot Role-Based Access Control and Authorization](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-rbac-authorization)",
    "title": "Authorization Core vs. Authorization Extension",
    "description": "Understand the differences between Auth0's core RBAC release and the Authorization Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/application-credentials/generate-rsa-key-pair",
    "markdown": "# Generate RSA Key Pair\n\nWhen you register the public key with Auth0, you must provide the public key encoded in PEM format. You may provide this as an X.509 certificate encoded in PEM format. Auth0 enforces a minimum RSA key size of 2048 bits and a maximum key size of 4096 bits. We recommend using [OpenSSL](https://www.openssl.org/) to generate a 2048-bit RSA key pair.\n\n1\\. Generate a private key and a public key in PEM. You should safeguard the private key and never share it, not even with Auth0:\n\n`openssl genrsa -out test_key.pem 2048`\n\n2\\. Extract the public key in PEM format using the following command. This command extracts the public key details so it can be safely shared without revealing the details of the private key:\n\n`openssl rsa -in test_key.pem -outform PEM -pubout -out test_key.pem.pub`\n\nThe example below shows the contents of the `test_key.pem.pub` PEM file:\n\n```\n----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA53VzmIVVZZWyNm266l82 mnoDc9g/snXklax5kChEhqK/WnTUvuXP4Gd4THj8rchxgUGKXd4PF3SUcKyn/qPm Tet0idVHk2PwP//FOVgYo5Lb04js0pgZkbyB/WjuMp1w+yMuSn0NYAP7Q9U7DfTb jmox8OQt4tCB4m7UrJghGqT8jkPyZO/Ka6/XsyjTYPOUL3t3PD7JShVAgo1mAY6g Sr4SORywIiuHsg+59ad7MXGy78LirhtqAcDECKF7VZpxMuEjMLg3o2yzNUeWI2Mg IF+t0HbO1E387fvLcuSyai1yWbSr1PXyiB2aXyDpbD4u7d3ux4ahU2opH11lBqvx +wIDAQAB -----END PUBLIC KEY-----\n```\n\n3\\. Save the PEM file. You will need the key contents in other application configuration steps.\n\n## Learn more\n\n*   [Authenticate with Private Key JWT](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authenticate-with-private-key-jwt)",
    "title": "Generate RSA Key Pair",
    "description": "Learn how to generate a RSA key pair. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/sample-use-cases-rules-with-authorization",
    "markdown": "# Sample Use Cases: Rules with Authorization\n\nWith [rules](https://auth0.com/docs/customize/rules), you can modify or complement the outcome of the decision made by the pre-configured [authorization policy](https://auth0.com/docs/manage-users/access-control/authorization-policies) to handle more complicated cases than is possible with [role-based access control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac) alone. Based on the order in which they run, rules can change the outcome of the authorization decision prior to the permissions being added to the Access Token. They can also allow you to customize the content of your tokens.\n\n## Allow access only on weekdays for a specific application\n\nLet's say you have an application that you want to make sure is only accessible during weekdays. To do this, you would [create the following rule](https://auth0.com/docs/customize/rules/create-rules):\n\n```\nfunction (user, context, callback) {\n\n  if (context.clientName === 'APP_NAME') {\n    const d = Date.getDay();\n\n    if (d === 0 || d === 6) {\n      return callback(new UnauthorizedError('This app is only available during the week.'));\n    }\n  }\n\n  callback(null, user, context);\n}\n```\n\nIf a user attempts to access the application during the weekend, access will be denied, even if they authenticate and have the appropriate privileges.\n\n## Allow access only to users who are inside the corporate network\n\nLet's say you want to allow access to an application, but only for users who are accessing the application from inside your corporate network. To do this, you would create the following rule:\n\n```\nfunction (user, context, callback) {\n  const ipaddr = require('ipaddr.js@1.9.0');\n  const corp_network = \"192.168.1.134/26\";\n  const current_ip = ipaddr.parse(context.request.ip);\n\n  if (!current_ip.match(ipaddr.parseCIDR(corp_network))) {\n    return callback(new UnauthorizedError('This app is only available from inside the corporate network.'));\n  };\n\n  callback(null, user, context);\n}\n```\n\nIf the user is outside the corporate network, they will be denied access even if they successfully authenticate and have the appropriate privileges.\n\n## Deny access to anyone calling an API\n\nLet's say you want to deny access to all users who are calling an API. This means that you need to deny access depending on the `audience` value for your API, which you can find in the **API Audience** field of your API in [Dashboard > Applications > APIs](https://manage.auth0.com/#/apis). To do this, you would create the following rule:\n\n```\nfunction (user, context, callback) {\n  /*\n   *  Denies access to user-based flows based on audience\n   */\n  var audience = '';\n  audience = audience\n              || (context.request && context.request.query && context.request.query.audience)\n              || (context.request && context.request.body && context.request.body.audience);\n  if (audience === 'http://todoapi2.api' || !audience) {\n    return callback(new UnauthorizedError('end_users_not_allowed'));\n  }\n  return callback(null, user, context);\n}\n```\n\nIn this case, the `audience` value for the API is `http:://todoapi2.api`, so this is the audience we will refuse. If anyone tries to access the API with this `audience` value, they will be denied access and receive an `HTTP 401` response.\n\n## Add user roles to tokens\n\nIf you [enable RBAC for APIs](https://auth0.com/docs/get-started/apis/enable-role-based-access-control-for-apis) along with \"Add Permissions in the Access Token\" (or enable RBAC via the Management API and set the **Token Dialect** to `access_token_authz`), you will receive user permissions in your Access Tokens. To add user roles to tokens, you would use the `context.authorization` object when you create the following rule:\n\n```\nfunction (user, context, callback) {\n  const namespace = 'http://demozero.net';\n  const assignedRoles = (context.authorization || {}).roles;\n\n  let idTokenClaims = context.idToken || {};\n  let accessTokenClaims = context.accessToken || {};\n\n  idTokenClaims[`${namespace}/roles`] = assignedRoles;\n  accessTokenClaims[`${namespace}/roles`] = assignedRoles;\n\n  context.idToken = idTokenClaims;\n  context.accessToken = accessTokenClaims;\n\n  callback(null, user, context);\n}\n```\n\nAlthough the [Delegated Administration Extension (DAE)](https://auth0.com/docs/customize/extensions/delegated-administration-extension) and the Authorization Core feature set are completely separate features, you can use the Authorization Core feature set to create and manage roles for the DAE if you use a rule.\n\n1.  [Create DAE roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles) using the Authorization Core feature set. The names of the roles you create must match the names of the [pre-defined DAE roles](https://auth0.com/docs/extensions/delegated-admin#assign-roles-to-users).\n    \n2.  [Assign the DAE roles you created to the appropriate users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users) using the Authorization core feature set.\n    \n3.  Add user roles to the DAE namespace in the ID Token. To do so, [create the following rule](https://auth0.com/docs/customize/rules/create-rules), remembering to replace the `CLIENT_ID` placeholder value with your application's Client ID:\n    \n    ```\n    function (user, context, callback) {\n        if (context.clientID === 'CLIENT_ID') {\n            const namespace = 'https://example.com/auth0-delegated-admin';\n            context.idToken[namespace] = {\n                roles: (context.authorization || {}).roles\n            };\n        }\n        callback(null, user, context);\n    }\n    ```",
    "title": "Sample Use Cases: Rules with Authorization",
    "description": "Learn how to use rules with roles-based access control (RBAC). For use with our Authorization Core feature set.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/sample-use-cases-actions-with-authorization",
    "markdown": "# Sample Use Cases: Actions with Authorization\n\nAuth0 [Actions](https://auth0.com/docs/customize/actions) allow you to modify or complement the outcome of the decision made by a pre-configured [authorization policy](https://auth0.com/docs/manage-users/access-control/authorization-policies) so that you can handle more complicated cases than is possible with [role-based access control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac) alone. Based on the order in which they run, Actions can change the outcome of an authorization decision prior to permissions being added to the Access Token. They can also allow you to customize the content of your tokens.\n\n## Allow access only on weekdays for a specific application\n\nLet's say you have an application that you want to make sure is only accessible during weekdays. [Create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action), and select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow. Copy the following code to the Actions Code Editor:\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.client.name === \"APP_NAME\") {\n    const d = new Date().getDay();\n\n    if (d === 0 || d === 6) {\n      api.access.deny(\"This app is only available during the week.\");\n    }\n  }\n}\n```\n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\nIf a user attempts to access the application during the weekend, access will be denied, even if they authenticate and have the appropriate privileges.\n\n## Allow access only to users who are inside the corporate network\n\nLet's say you want to allow access to an application, but only for users who are accessing the application from inside your corporate network. [Create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action), and select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow. Copy the following code to the Actions Code Editor:\n\n```\nconst ipaddr = require(\"ipaddr.js\");\n\nexports.onExecutePostLogin = async (event, api) => {\n  const corpNetwork = \"192.168.1.134/26\";\n  const currentIp = ipaddr.parse(event.request.ip);\n\n  if (!currentIp.match(ipaddr.parseCIDR(corpNetwork))) {\n    api.access.deny(\"This app is only available from inside the corporate network.\");\n  };\n};\n```\n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\nIf the user is outside the corporate network, they will be denied access even if they successfully authenticate and have the appropriate privileges.\n\n## Deny access to anyone calling an API\n\nLet's say you want to deny access to all users who are calling an API. This means that you need to deny access depending on the `identifier` value for your API, which you can find in the **API Audience** field of your API at [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis). [Create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action), and select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow. Copy the following code to the Actions Code Editor:\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  // In Actions, an API will be referred to as a Resource Server.\n  const { identifier } = event.resource_server || {};\n  if (identifier === \"https://api.example.com\") {\n    api.access.deny(\"end_users_not_allowed\");\n  }\n}\n```\n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\nIn this case, the `identifier` value for the API is `https://api.example.com`, so this is the audience we will refuse.\n\n## Add user roles to tokens\n\nTo add user roles to Auth0-issued tokens, use the `event.authorization` object along with the `api.idToken.setCustomClaim` and `api.accessToken.setCustomClaim` methods. [Create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action), and select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow. Copy the following code to the Actions Code Editor:\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = 'https://my-app.example.com';\n  if (event.authorization) {\n    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n  }\n}\n```\n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\nRemember:\n\n*   The JWT returned to the requesting application is built and signed at the end of the trigger processing. The final, signed JWT is not accessible in an Action.",
    "title": "Sample Use Cases: Actions with Authorization",
    "description": "Learn how to use Actions with roles-based access control (RBAC). ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/session-lifetime-limits",
    "markdown": "# Session Lifetime Limits\n\nSession lifetime limits determine how long the system should retain a login session. In Auth0, two settings can be configured for session lifetime:\n\n*   **Inactivity timeout**: Timeframe after which a user's session will expire if their session cookie hasn't interacted with the Authorization Server. Will be superseded by system limits if over 3 days for self-service plans or 100 days for enterprise plans.\n    \n*   **Require log in after**: Timeframe after which a user will be required to log in again, regardless of their activity. Will be superseded by system limits if over 30 days for self-service plans or 365 days for enterprise plans.\n    \n\nThese settings are configured on the tenant; you can configure them using either the [Auth0 Dashboard](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings) or the Management API.\n\nWhen a user performs a new standard login, it resets the login session. Here's an example:\n\n1.  You set the **Inactivity timeout** limit to 3 days and the **Require log in after** limit to 30 days.\n    \n2.  A user logs in and your entered values are set for their session.\n    \n    1.  If the user is active within the three-day **Inactivity timeout** timeframe, the session lifetime is extended for another three days. As long as the user is active within the next three days, their session lifetime will be extended for another three days, until the **Require log in after** limit is reached. At this point, the user will be required to log in again.\n        \n    2.  If the user is inactive for three days, they will automatically be logged out.\n        \n3.  While the user is logged in, you extend the existing session lifetime limits. The new settings will not take effect until the existing session ends, and the user logs in again.\n    \n4.  While the user is logged in, you reduce the existing lifetime limits. The new settings will take effect immediately upon the user's next activity. This allows you to shorten session lifetimes for security purposes.\n    \n\n### Application-specific logout URLs\n\nThere are two important things to consider when you use application-specific logout URLs:\n\n*   You **must** send `client_id` as a query parameter when calling the `/oidc/logout` endpoint and the `id_token_hint` URL must be in the application’s list of allowed logout URLs.\n    \n*   This will end the Auth0 Session for the entire tenant - i.e. for all defined applications, not just the one that matches the `client_id` supplied. Passing the `client_id` tells the /`logout` endpoint where to look for the logout URL white-list.\n    \n\nAfter the user logout occurs Auth0 will only redirect to a URL that is defined in this list.\n\nIf you redirect the user back to the application after logout and the application redirects to an identity provider that still has an authenticated session for that user, the user will be silently logged back into your application and it may appear that logout didn’t work. In these cases, we recommend that you have a specific logout landing page in your application so you can tell the user that they successfully logged out - and, if desired, you can also warn them that they may still be logged into their identity provider.\n\nIn the case where a user has not taken any actions that cause the Auth0 session to be updated, we recommend that you warn the user to choose to explicitly continue their session. The intent of this approach allows the session to go inactive if the user is no longer present but otherwise provides a means to trigger the silent token refresh so that they can continue their session without the need to be prompted again for credentials.\n\n*   **Inactivity Timer**: Add a rolling timer to the React SDK wrapper that aligns with the maximum idle lifetime of the Auth0 session. Each time a token is returned to the application, reset the timer.\n    \n*   **Timeout Modal**: When the timer hits 60 seconds from expiration, a timeout modal should render requesting the user to logout or continue their session.\n    \n    *   **Continue the session**: If the user chooses to continue their session, use the `getTokenSilently()` method to request a new token without redirecting the user from the page they are currently interacting with.\n        \n    *   **Logging out**: In the case, the user chooses to logout the `logout()` method should be called to assure the Auth0 session is ended as well.\n        \n    *   **Idle Timeout**: In the case that the idle timeout is reached no immediate action is necessary. To handle the fact that the user may still be active in another tab, the behavior **should not** be to log the user out.\n        \n    *   Other options include updating the modal with a login button, using the window.onfocus event to trigger `getTokenSilently()`, or redirecting the user to landing page.\n        \n\n## Learn more\n\n*   [Configure Session Lifetime Settings](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings)\n*   [Update Access Token Lifetime](https://auth0.com/docs/secure/tokens/access-tokens/update-access-token-lifetime)\n*   [Update ID Token Lifetime](https://auth0.com/docs/secure/tokens/id-tokens/update-id-token-lifetime)\n*   [Check Login and Logout Issues](https://auth0.com/docs/troubleshoot/authentication-issues/check-login-and-logout-issues)\n*   [Troubleshoot Invalid Token Errors](https://auth0.com/docs/troubleshoot/basic-issues/invalid-token-errors)",
    "title": "Session Lifetime Limits",
    "description": "Describes limits a system will allow a session to last before termination.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings",
    "markdown": "# Configure Session Lifetime Settings\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/tenants/settings' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"session_lifetime\": SESSION_LIFETIME_VALUE, \"idle_session_lifetime\": IDLE_SESSION_LIFETIME_VALUE }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/tenants/settings\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/tenants/settings\"\n\n\tpayload := strings.NewReader(\"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/tenants/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/tenants/settings',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ \"session_lifetime\": SESSION_LIFETIME_VALUE, \"idle_session_lifetime\": IDLE_SESSION_LIFETIME_VALUE }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"session_lifetime\": SESSION_LIFETIME_VALUE, \"idle_session_lifetime\": IDLE_SESSION_LIFETIME_VALUE }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/tenants/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/tenants/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/tenants/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/tenants/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"session_lifetime\\\": SESSION_LIFETIME_VALUE, \\\"idle_session_lifetime\\\": IDLE_SESSION_LIFETIME_VALUE }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ \"session_lifetime\": SESSION_LIFETIME_VALUE, \"idle_session_lifetime\": IDLE_SESSION_LIFETIME_VALUE }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/tenants/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Configure Session Lifetime Settings",
    "description": "Describes how to configure session lengths and limits for a tenant using the Auth0 Dashboard or the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/non-persistent-sessions",
    "markdown": "# Non-Persistent Sessions\n\nIn persistent sessions, users close a browser, but retain the session when re-opening the browser on the same device. To enhance the user experience and provide more secure access, non-persistent sessions invalidate a session cookie when the browser is closed.\n\n## Browser Limitations\n\nIn some cases, non-persistent sessions **cannot** be enforced by tenant settings. Examples include:\n\n*   The user has a session restore setting on the browser enabled; restoring the session also restores the session cookie.\n    \n*   The user closes a tab but not the browser window; the session cookie is not cleared until the session ends based on Idle or Absolute Expiration.\n    \n\n## Sessions\n\nSessions consist of a cookie on the browser and a session record on the server. In non-persistent sessions, cookies are not persisted, and a tenant timeout is set, so users don’t have to manually log out of a device. \n\nSession lifetime determines how long the system should keep the login session and is configured per tenant. The Absolute Expiration of a session is defined when the session is created. You can enable non-persisted settings for user sessions, or allow the session to continue even if the browser is closed. You can adjust the Absolute Expiration and non-persisted settings in the Dashboard or the Management API. To learn more, read [Configure Session Lifetime Settings](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings).\n\n## Cookies\n\nThe Auth0 platform uses three types of cookies: session, Multi-Factor Authentication, and device. All of these change to non-persistent once your Auth0 tenant is configured. The tenant timeout triggers the session expiration.\n\nWhen non-persistent sessions are enabled, the following cookies will be issued as session cookies when interacting with the authorization server:\n\n*   `auth0` / `auth0_compat`\n    \n*   `auth0-mf` / `auth0-mf_compat`\n    \n*   `did` / `did_compat`\n    \n\nTo learn more about cookies, read [Authentication API Cookies](https://auth0.com/docs/manage-users/cookies/authentication-api-cookies).\n\n## Tenant configuration\n\nYou can configure your tenant to handle sessions in one of two ways:\n\n*   Persistent Mode: session cookies persist when the browser is closed.\n    \n*   Non-Persistent Mode: session cookies do not persist. The browser retains session cookies until the browsing session is over. To learn more, read [HTTP State Management Mechanism on IETF Datatracker](https://datatracker.ietf.org/doc/rfc2109/).\n    \n    ![Auth0 Tenant Settings Advanced tab Log In Session Management](https://images.ctfassets.net/cdy7uua7fh8z/6vizfZo1O2vtufLmuaA6WB/5558dd4403bd87107db23808ae6c762a/dashboard-tenant-edit_view-advanced_log-in-session-management_non-persistent.png)\n\n| Settings | Description |\n| --- | --- |\n| Inactivity timeout | Timeframe (in minutes) after which a user's session will expire if they haven’t interacted with the Authorization Server. Will be superseded by system limits if over 4,320 minutes (3 days) for Essential or Professional or 144,000 minutes (100 days) for enterprise plans. |\n| Require log in after | Timeframe (in minutes) after which a user will be required to log in again, regardless of their activity. Will be superseded by system limits if over 43,200 minutes (30 days) for Developer or Developer Pro or 525,600 minutes (365 days) for enterprise plans. |\n\nTo configure these settings in the Dashboard:\n\n1.  Go to [Dashboard > Tenant Settings](https://manage.auth0.com/#/tenant), and select the **Advanced** view.\n    \n2.  Scroll to the **Log In Session Management** section, locate **Inactivity timeout** and **Require log in after**, enter the desired settings, and select **Save**.\n    \n\n## Management API\n\nYou can use the Management API to enable non-persistent sessions as well as set values for session lifetime, idle sessions lifetime, and properties for sessions cookies. To learn more, review the [Management API Tenant Update endpoint](https://auth0.com/docs/api/management/v2#!/Tenants/update_settings).",
    "title": "Non-Persistent Sessions",
    "description": "Describes non-persistent sessions available with Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/manage-multi-site-sessions",
    "markdown": "# Manage Multi-Site Sessions with Auth0 SDK\n\n## Short-lived sessions\n\nThis workflow shows how the auth0-spa-js SDK should be implemented to support multi-site session management. In this scenario, it is assumed that the tenant SSO Inactivity Timeout is set to 300 seconds, and the ID Token Expiration of each SPA application is set to 150 seconds. This is considered a \"short-lived\" session.\n\n### SDK features\n\n#### PKCE flow\n\nFor all methods of retrieving an ID Token or Access Token, the SDK manages all the intricacies of the Proof Key for Code Exchange workflow. No additional effort or configuration is needed for this to work.\n\n#### Deep linking\n\nTo improve the user experience the SDK includes an `appState` parameter for the `loginWithRedirect()` method. Details about the current app are packaged as part of the request to the Auth server that will be returned upon successful authentication. Allowing a seamless continuation of the user journey.\n\nIn the Quickstart, the `PrivateRoute` component sets a state parameter of `targetUrl` and the `onRedirectCallback` function of `index.js` unpacks this value to redirect the user when authentication is complete.\n\n#### Token storage\n\nTo keep the returned tokens stored in the safest manner possible all tokens are placed into a local cache. The ID and Access Tokens are stored as pairs with the audience and scope values being used to retrieve the tokens as needed.\n\nAdditionally the cache tokens are removed once either the ID Token or Access Token expires so that if a token is in the cache it can be assumed to stil be valid.\n\n#### Call APIs\n\nThe `getTokenSilently()` method is used to leverage the token cache first, and if none exists, will launch an invisible iframe to retrieve a new token. For this purpose all requests to APIs can use this method to construct the bearer token header without the need for additional logic to handle for expired tokens.\n\nIn the Quickstart, the `ExternalService` view makes a request to the express API using this feature.\n\n#### Warn users to continue their sessions\n\nIn the case where a user has not taken any actions that would cause the Auth0 session to be updated, Auth0 recommends that you raise a warning to the user to choose to explicitly continue their session.\n\nThe intent of this approach allows the session to go inactive if the user is no longer present, but otherwise provides a means to trigger the silent token refresh so that the can continue their session without the need to be prompted again for credentials.\n\nTo learn more about inactivity timers and timeout modals, read [Application-specific logout URLs](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings).\n\n### Example workflow\n\n1.  Initial Authentication\n    \n2.  Maintaining Auth0 Session\n    \n3.  Seamless SSO\n    \n4.  Prompting user to extend session\n    \n5.  User explicitly logs out of application\n    \n6.  User returns to initial app after logging out\n    \n\n#### Initial authentication\n\n1.  New tab is opened\n    \n2.  Requests to login\n    \n3.  User enters credentials\n    \n4.  SSO cookie (with expiration) is set\n    \n5.  Token exchange performed\n    \n\n![Diagram of Initial Authentication flow](https://images.ctfassets.net/cdy7uua7fh8z/2voC3vs36CJJlpDu4xl06Y/310fe5afe79ad7d083833baa2690dfa4/initial-authentication.png)\n\n#### Maintain Auth0 session\n\n1.  User requests data from protected resource\n    \n2.  `getTokenSilently()` called\n    \n3.  Resource retrieved\n    \n4.  User updates data from protected resource\n    \n5.  `getTokenSilently()` called\n    \n    1.  Iframe opened\n        \n    2.  Token exchange performed\n        \n6.  Resource is updated\n    \n\n![Diagram of maintaining a session](https://images.ctfassets.net/cdy7uua7fh8z/7CI29ouvhuJ4TFC1G2C5n8/4d2bd0c9372a6cc16e75fc76f438a0bd/maintain-auth0-session.png)\n\n#### Seamless SSO\n\n1.  User navigates to a private route\n    \n2.  Check with `isAuthenticated()`\n    \n3.  If false, `loginWithRedirect()`\n    \n\n![Diagram of seamless SSO flow for sessions](https://images.ctfassets.net/cdy7uua7fh8z/38heJlnN0letWMVhpTtXad/4d4127150fb818522ea29eea28ccc00e/seamless-sso.png)\n\n#### Prompt user to extend session\n\n1.  At 240 seconds prompt user with keep session alive with modal that lasts 60 seconds\n    \n2.  If they choose to maintain session, `getTokenSilently()`\n    \n\n![Diagram of prompting a user to maintain a session](https://images.ctfassets.net/cdy7uua7fh8z/6kH2G3oclCfSudwd0hJEUM/70651da37771c9945c5a34dcad409d9f/prompt-user-extend-session.png)\n\n#### User explicitly logs out of application\n\n1.  User chooses to logout\n    \n2.  `logout()` called\n    \n    1.  Token cache cleared\n        \n    2.  Call `/oidc/logout`\n        \n    3.  Clear SSO cookie & delete session data\n        \n    4.  Redirect user to logout page\n        \n\n![Diagram of a user logging out](https://images.ctfassets.net/cdy7uua7fh8z/4b55FKM2vZBoskXTPY4nxs/1a9e69437677f2cfac9a3d8e6bff7ffe/user-explicitly-logs-out-of-app.png)\n\n#### User returns to initial application after logging out\n\n1.  User requests data from protected resource\n    \n2.  `getTokenSilently()` called\n    \n3.  Application-dependent behavior\n    \n\n![Diagram of user returning to application after logging out](https://images.ctfassets.net/cdy7uua7fh8z/3geXGwsXkIgFkwopoGoLMx/01685b6b8e8473c6ce6f26e59b402cf3/user-returns-to-initial-app.png)\n\n## Long-lived sessions\n\nAuth0 supports long-lived sessions for enterprise plans. With long-lived sessions, you can configure session limits with up to 100 days of inactivity (idle timeout) and up to one year in total duration (absolute timeout). If you have quarterly, monthly, or other timelines, this allows you to reduce friction for end-users and provide access to low-risk content and capabilities. In addition, media companies can leverage long-lived sessions for improving user experiences through seamless access to content. You can also make the choices between long-lived sessions and password validation based on your requirements around user experience and security.\n\nWorkflow details would change in the case of a long-lived session where the application session would most likely be shorter than the [Single Sign-on (SSO)](https://auth0.com/docs/authenticate/single-sign-on) session.\n\nTo learn more, read [Configure Session Lifetime Limits](https://auth0.com/docs/manage-users/sessions/configure-session-lifetime-settings) and [Update Access Token Lifetime](https://auth0.com/docs/secure/tokens/access-tokens/update-access-token-lifetime).\n\n## Learn more\n\n*   [Troubleshoot Invalid Token Errors](https://auth0.com/docs/troubleshoot/basic-issues/invalid-token-errors)\n*   [Check API Calls](https://auth0.com/docs/troubleshoot/authentication-issues/check-api-calls)",
    "title": "Manage Multi-Site Sessions with Auth0 SDK",
    "description": "Describes the workflow with the auth0-spa-js SDK to support multi-site session management.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/cookies/samesite-cookie-attribute-changes",
    "markdown": "# SameSite Cookie Attribute Changes\n\nCookies, which are used for authentication and the maintenance of sessions, can be secured by setting attributes. Auth0 uses cookies for the following:\n\n*   OIDC Enterprise with `form_post`\n    \n*   SAML HTTP-POST Binding\n    \n*   Web message (aka `checkSession`)\n    \n\n## SameSite attributes\n\nYou can add [SameSite cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite) attributes in the `set-cookie` HTTP response header to restricts browser behavior. It may prevent the browser from sending the cookie's `key=value` pair based on the type of interaction that triggered the HTTP request.\n\nAccepted attribute values are as follows:\n\n| Attribute | Description |\n| --- | --- |\n| `strict` | Send the cookie if the user is navigating within the website origin bounds |\n| `lax` | Send the cookie if the user is navigating between domains but not for 3rd party contexts (iframes or posts) |\n| `none` | Send the cookie with requests crossing the website origin bounds. Unless other conditions are present (i.e., third-party cookies are blocked), do not send the cookie. |\n\nSome of the cookie attributes you may be familiar with include:\n\n| Attribute | Description |\n| --- | --- |\n| `httpOnly` | Allows a cookie to be sent only with HTTP requests; not readable using Javascript's `document.cookie` |\n| `secure` | Allows the browser to send the cookie only to a secure context; whether the context is considered secure or not is browser-dependent, but this typically requires the use of HTTPS |\n| `max-age / expires` | Controls whether the cookie is a **session** cookie (e.g., dropped when your browser terminates its session) or **persistent** (e.g., the cookie persists beyond the browser session) |\n\nThe browser, upon receipt, parses the headers and updates its cookie jar accordingly.\n\n## Browser cookie changes\n\nAs of February 2020, Google Chrome v80 changed the way it handles cookies. Auth0 implemented the following changes in the way it handles cookies:\n\n*   Cookies without the `SameSite` attribute set will be set to `lax`\n    \n*   Cookies with `SameSite=none` must be secured; otherwise they cannot be saved in the browser's cookie jar\n    \n\nThe goal of these changes is to improve security and help mitigate CSRF attacks.\n\nThese changes affect the following cookies:\n\n*   `auth0` (handles user sessions)\n    \n*   `auth0-mf` (handles information relevant to multi-factor authentication)\n    \n*   `did` (the identifier for a device/user agent)\n    \n\nFor these cookies, Auth0 will:\n\n*   Set the `SameSite` attribute to `none`, with the cookie requiring the use of HTTPS (regardless of environment)\n    \n*   Set fallback cookies in the event that a legacy browser does not support `SameSite` being set to `None`. These fallback cookies are `auth0_compat`, `auth0-mf_compat` and `did_compat`\n    \n\nThe diagram below shows what happens during a fresh interaction. The end user requests a page not previously visited. The server changes the way it renders when the visitor returns and sets a seen cookie. The grey part of the `set-cookie` header is the actual cookie `key=value.` The red portion are the cookie attributes the browser stores in the cookie jar to decide later if it should include the cookie `key+value` pair in requests.\n\n![sameSite Cookie Attributes Fresh Interaction Flow](https://images.ctfassets.net/cdy7uua7fh8z/ItaoOzUnri9dkCkZ3V0dj/e64711c0f3ae5c361fe2321e3666b1cf/cookie-fresh-interaction.png)\n\nThe following diagram shows what happens if you make the same request using the same browsing session. The request goes to the same server, and because the cookie attributes don't prohibit the seen cookie to be sent, it is automatically included as a cookie header in the request. The server will now respond differently based on the fact that it received this cookie.\n\n![sameSite Cookie Attributes Cookie Return Interaction flow](https://images.ctfassets.net/cdy7uua7fh8z/4dc2HWnmPBOV6cvdKbNM6g/50149f55e38fdf7453944932a3ef9d1c/cookie-return-interaction.png)\n\n## Features affected\n\nThe table below shows how the `SameSite` attribute changes may affect your apps.\n\n| App Behavior | Affected by Change |\n| --- | --- |\n| Cookies set as `sameSite=none` when the website is not `https://` | Yes |\n| Cookies don't have explicit `sameSite` attribute value set and are required in a cross-origin context (such as HTTP form\\_post, embedding an iframe) | Yes |\n| Native apps (everything not cookies + web based) | No (M2M) |\n| Already setting an explicit `sameSite` cookie attribute value | No  |\n| Different subdomain on the same eTLD+1 (app is on the same eTLD+1 as the custom domain Auth0 tenant) | Potentially |\n\nIf you are using a web app with sessions (e.g. for saving user preferences, shopping carts, etc.), and you allow users to sign in using identity providers such as Google, Github, or Auth0, then you rely on cookies to achieve that functionality. There are browser cookie behavior changes that may break the user experience. Google Chrome, for example, is the first browser vendor to roll out a change that might not be compatible with your web application.\n\nYou may notice that the Google Chrome and Microsoft Edge specs for setting `SameSite` to undefined has changed from `SameSite` defaulting to `none` to `lax` instead.\n\nFor example, let's say you build a new UI and have several services that you proxy to via an Auth0 gateway. At this gateway, you create a cookie session. If you make a cross-origin request, you may see this warning in the Javascript console:\n\n`A cookie associated with a cross-site resource (URL) was set without the SameSite attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with SameSite=None and Secure. You can review cookies in developer tools under Application>Storage>Cookies and see more details at https://www.chromestatus.com/feature/5088147346030592 and https://www.chromestatus.com/feature/5633521622188032`\n\n## Actions you need to take\n\nTo prepare for this change, you should:\n\n*   Review the list of [unsupported browsers](https://www.chromium.org/updates/same-site/incompatible-clients).\n    \n*   Set your application to use `SameSite=none` if it uses `response_mode=form_post` when interacting with Auth0 (note that Chrome makes no exceptions, even for `localhost`)\n    \n*   Set your cookie as secure if its `SameSite` attribute equals `None.` Otherwise, it will be rejected by the browser. If you use HTTP for your Callback URLs, these will break if you use such cookies for binding the authorization request state/nonce. Therefore, you must either use HTTPS or set `SameSite=lax`",
    "title": "SameSite Cookie Attribute Changes",
    "description": "Describes how browser changes, such as the SameSite cookie attribute, affects your web applications that embed content from third-party domains.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/cookies/spa-authenticate-with-cookies",
    "markdown": "# Authenticate Single-Page Apps With Cookies\n\nSecuring a single-page app (SPA) can be a challenge. However, if your SPA meets the following criteria, then you can simplify your implementation by using cookies to authenticate.\n\n*   Served to the client using your own backend.\n    \n*   Has the same domain as your backend.\n    \n*   Makes API calls that require authentication to your backend.\n    \n\nHere is a description of this approach as well as a sample implementation using [Node.js](https://nodejs.org/en/).\n\n## How it works\n\nThe steps below show how tokens are retrieved and used. In this approach, the [Implicit Flow with Form Post](https://auth0.com/docs/get-started/authentication-and-authorization-flow/implicit-flow-with-form-post) is used instead of a traditional [Authorization Code Flow with Proof Key for Code Exchange](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce). This is because Form Post Response Mode is a simpler way to implement login when it’s your own resource you are requesting to access.\n\n![Authenticate Single-Page Apps Using Cookies How it Works part 1 diagram](https://images.ctfassets.net/cdy7uua7fh8z/7suPpG6SuHuCOFHeFmE21T/1bf0a56fd21f65460cff7fd01b4c93f4/2023-09-22_13-21-34.png)\n\n1.  The user accesses a protected route using the browser, or performs some action that requires an authentication step to be initiated (such as clicking on a Login button)\n    \n2.  The browser client redirects to a `/login` route on the backend, or to the protected route depending on what the user did\n    \n3.  The backend constructs a request to the authorization server’s `/authorize` endpoint and redirects the browser client there\n    \n4.  The user is prompted to authenticate themselves using whatever method the authorization server presents\n    \n5.  The authorization server POSTs the tokens to the redirect URI as a URL-encoded form post. The backend is able to retrieve those tokens by parsing the body data.\n    \n\nAt this point, the user is authenticated and the backend has the required tokens. A cookie can now be created to represent this state on the client. The client browser is then redirected to a route that serves the SPA and also receives the authentication cookie.\n\nFrom now on, this cookie is traded between the client and backend when API calls are made using an AJAX call. On each request, the backend verifies if the cookie is still valid and if so, allows the request to continue.\n\n![Authenticate Single-Page Apps Using Cookies How it Works part 2 diagram](https://images.ctfassets.net/cdy7uua7fh8z/6SCp9KwQkwJV7L26TOuxIO/d625575a43d00a00fcf17c7310ac2bc8/2023-09-22_13-21-50.png)\n\n### Invalid or missing cookies\n\nWhen implementing this approach you'll need to handle cases where the authentication cookie is invalid or missing. The API call to the backend from the client happens in the background, so the client has to deal with any response from the server indicating the user should reauthenticate.\n\nIn the following sample application, this case is handled in a naive way by prompting the user to re-authenticate if the API call results in a 302 Redirect result. The 302 occurs because, upon unsuccessful validation of the cookie, the server tries to redirect to the Authorization endpoint of the authorization server and sends this response to the client.\n\n## Example\n\nThe example application uses Node.js and Express to demonstrate the concepts covered above.\n\n### Prerequisites\n\n*   To follow along, make sure you have the [latest version of Node](https://nodejs.org/en/download/) installed.\n    \n*   Once Node is installed, [download or clone the source code](https://github.com/auth0-blog/spa-cookie-demo/) and open the project folder inside a terminal window.\n    \n    ```\n    // Clone the tutorial respository using SSH\n    git clone git@github.com:auth0-blog/spa-cookie-demo\n    // ... or if you use HTTPS:\n    git clone https://github.com/auth0-blog/spa-cookie-demo.git\n    // Move into the project directory\n    cd spa-cookie-demo\n    ```\n    \n*   The `master` branch represents the state of the application before any authentication is added. If you would like to refer to the final version of the application, check out the `with-oidc` branch: `git checkout with-oidc`\n    \n\n### Initialize the Node.js app\n\nInstall the application dependencies by running `npm install` from your terminal window. To run the application, use `npm run dev`. This starts the Express server. Go to [http://localhost:3000](http://localhost:3000/) in your browser to view the application.\n\nThe development servers uses `nodemon`, which automatically restarts whenever it detects any file changes.\n\n### Explore the application\n\nWith the application open at [http://localhost:3000](http://localhost:3000/), click the **Call API** button. You should see a message displayed on the screen.\n\n![SPA Authentication with Cookies Explore the Application screen](https://images.ctfassets.net/cdy7uua7fh8z/7JhdgzFLig2xcDle7ziiGp/c1db6272d20d4a291ba90a6968460109/image3.png)\n\nNote that you were able to make the API call without being logged in. Let's fix that by adding some middleware that requires the user to authenticate before the API call can be made.\n\n### Set up environment\n\nFor the application to work with authentication, `express-openid-connect` requires some environment variables to be present. For this application, these variables can be specified in a `.env` file. Create a `.env` file in the root of the project directory and populate it with the following:\n\n```\nISSUER_BASE_URL=<YOUR OIDC URL>\nCLIENT_ID=<YOUR OIDC CLIENT ID>\nBASE_URL=http://localhost:3000\nAPP_SESSION_SECRET=<YOUR SECRET VALUE>\n```\n\n### Set up app in Auth0\n\n1.  Go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and click **Create Application**.\n    \n2.  Name your new application, select **Regular Web Applications**, and click **Create**\n    \n3.  In the **Settings** for your new app, add `http:/localhost:3000/callback` to **Allowed Callback URLs**.\n    \n4.  Add `http:/localhost:3000` to **Allowed Logout URLs**.\n    \n5.  Click **Save Changes**.\n    \n6.  Go to [Dashboard > Authentication > Social](https://manage.auth0.com/#/connections/social) and set up some social connections. Enable them for your app in the **Application** options in the **Connections** tab. The example uses username/password database, Facebook, Google, and X.\n    \n7.  On the **Settings** screen, note the domain and client ID settings at the top.\n    \n8.  There are two values that need to be configured as part of the application. Reopen the `.env` file and set these values:\n    \n    ```\n    ISSUER_BASE_URL={yourDomain}\n    CLIENT_ID={yourClientId}\n    BASE_URL=http://localhost:3000\n    APP_SESSION_SECRET=<YOUR SECRET VALUE>\n    ```\n    \n\n### Run the app\n\n1.  With the server and environment configuration done, find your browser window that has the application open. If you've closed the browser and stopped the server, run the following from the terminal to restart the application: `npm run dev`\n    \n2.  Open [http://localhost:3000](http://localhost:3000/) in the browser. From a user interface perspective, the app should look the same, however this time when the **Call API** button is clicked, you should receive a warning that the user is not logged in. Also note that you do not see the \"Hello, World\" message as before since the call to the API has been rejected.\n    \n3.  Click **Log in now** to log in. Once you have been authenticated, you'll return to the app and see an updated UI that reflects your new logged-in state. You should be able to press the **Call API** button once more to invoke an API call to the server, and it now works.\n    \n4.  Click the **Profile** link at the top of the page to show user information retrieved from the ID token.\n    \n    ![SPA Authentication Using Cookies User Profile](https://images.ctfassets.net/cdy7uua7fh8z/3f9uRrBolvtguRJDiHUpkn/061b7c4b76e6c342190ed4606e72f36f/image8.png)\n\n## Learn more\n\n*   [Implicit Flow with Form Post](https://auth0.com/docs/get-started/authentication-and-authorization-flow/implicit-flow-with-form-post)\n*   [Authenticate: SPA Example](https://auth0.com/docs/videos/get-started-series/authenticate-spa-example)\n*   [Secure](https://auth0.com/docs/secure)\n*   [SameSite Cookie Attribute Changes](https://auth0.com/docs/manage-users/cookies/samesite-cookie-attribute-changes)",
    "title": "Authenticate Single-Page Apps With Cookies",
    "description": "Describes how to use your backend server to authenticate a single-page app (SPA) with cookies.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/sessions/manage-user-sessions-with-auth0-management-api",
    "markdown": "# Manage User Sessions with Auth0 Management API\n\nAuth0 uses [sessions](https://auth0.com/docs/manage-users/sessions) to maintain the authentication state of a user across requests.\n\n## Management API endpoints\n\nThe [Management API](https://auth0.com/docs/api/management/v2) provides out-of-band access to the internals of user sessions in the [Auth0 Session Layer](https://auth0.com/docs/manage-users/sessions/session-layers), and deletion methods to force session termination.\n\n### Session resource\n\nYou can view or delete a specific session with the following endpoints:\n\n| **Name** | **URL** | **Required scope(s)** |\n| --- | --- | --- |\n| Introspect a specific session by ID | `GET /api/v2/sessions/{sessionId}` | `read:sessions` |\n| Delete a specific session by ID | `DELETE /api/v2/sessions/{sessionId}` | `delete:sessions` |\n\n### User resource\n\nYou can list or delete all sessions for a given user with the following endpoints:\n\n| **Name** | **URL** | **Required scope(s)** |\n| --- | --- | --- |\n| List sessions details of a user | `GET /api/v2/users/{userId}/sessions` | `read:sessions` |\n| Delete all user sessions | `DELETE /api/v2/users/{userId}/sessions` | `delete:sessions` |\n\n## Session properties\n\nThe session endpoints return relevant information about the session and its history.\n\n| **Field** | **Description** |\n| --- | --- |\n| Session ID | The session ID is a persistent identifier of the session in the Auth0 tenant.<br><br>Note that the session ID corresponds to the `sid` claim already in ID Tokens and Logout Tokens and can be used to cross-reference these entities. |\n| Relevant Time | Session creation, authentication time, and expiry information. |\n| Device Information | The device property traces details related to the user agent (for example, browser) used in the interactions with this Auth0 session. |\n| Authentication Information | Contains summary information about the methods used to authenticate in this session. |\n\nFor detailed information about these fields, refer to the [Management API documentation](https://auth0.com/docs/api/management/v2).\n\n## OIDC Back-Channel Logout Initiators\n\nSession deletion events are connected to [OIDC Back-Channel Logout](https://auth0.com/docs/authenticate/login/logout/back-channel-logout) through the `session-deleted` initiator. To learn more, read [OIDC Back-Channel Logout Initiators](https://auth0.com/docs/authenticate/login/logout/back-channel-logout/oidc-back-channel-logout-initiators).\n\n## Sessions and refresh tokens\n\nSessions and refresh tokens collaborate to reduce the friction of user authentication while optimizing security. To learn more, read [Best Practices for Application Session Management on Auth0 Blog](https://auth0.com/blog/application-session-management-best-practices).\n\nRefresh tokens can remain active after a session has expired or been deleted, or after the user logs out. You can use the Management API to [manage refresh tokens](https://auth0.com/docs/secure/tokens/manage-refresh-tokens-with-auth0-management-api) independently or in collaboration with sessions.\n\n## Limitations\n\nDelete session operations run asynchronously, and are eventually consistent.\n\n## Learn more\n\n*   [Log Users Out of Auth0 with OIDC Endpoint](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0)\n*   [OIDC Back-Channel Logout](https://auth0.com/docs/authenticate/login/logout/back-channel-logout)\n*   [OIDC Back-Channel Logout Initiators](https://auth0.com/docs/authenticate/login/logout/back-channel-logout/oidc-back-channel-logout-initiators)\n*   [Configure OIDC Back-Channel Logout](https://auth0.com/docs/authenticate/login/logout/back-channel-logout/configure-back-channel-logout)",
    "title": "Manage User Sessions with Auth0 Management API",
    "description": "Learn how to manage user sessions with the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/cookies/authentication-api-cookies",
    "markdown": "# Authentication API Cookies\n\nThe Auth0 Authentication API uses a set of HTTP cookies to enable [single sign-on (SSO)](https://auth0.com/docs/authenticate/single-sign-on), [multi-factor authentication (MFA)](https://auth0.com/docs/secure/multi-factor-authentication), and [attack protection](https://auth0.com/docs/secure/attack-protection) capabilities. The table below shows some of the cookies that the Authentication API relies on and describes their purposes:\n\n| **Cookie** | **Feature** | **Purpose** |\n| --- | --- | --- |\n| `auth0` | Single Sign-on | Used to implement the [Auth0 session layer](https://auth0.com/docs/manage-users/sessions/session-layers). |\n| `auth0_compat` | Single Sign-on | Fallback cookie for single sign-on on browsers that don’t support the `sameSite=None` attribute. |\n| `auth0-mf` | Multi-factor Authentication | Used to establish the trust level for a given device. |\n| `auth0-mf_compat` | Multi-factor Authentication | Fallback cookie for multi-factor authentication on browsers that don’t support the `sameSite=None` attribute. |\n| `a0_users:sess` | Classic Login | Used for CSRF protection in Classic Login flows. |\n| `a0_users:sess.sig` | Classic Login | Used for CSRF protection in Classic Login flows. |\n| `did` | Attack Protection | Device identification for attack protection. |\n| `did_compat` | Attack Protection | Fallback cookie for anomaly detection on browsers that don’t support the `sameSite=None` attribute. |\n\n## Cookies and custom domains\n\nIf you are using [custom domains](https://auth0.com/docs/customize/custom-domains), cookies from the Authentication API are sent to the custom host name, or CNAME you set up in the Auth0 Dashboard. Each cookie's domain attribute, which specifies the domain for which the cookie is valid, is defined in the cookie request header and domain-matches with the domain attribute.\n\nIf no domain is specified, the domain attribute defaults to the request-host. If you use IETF’s [HTTP State Management Mechanism](https://datatracker.ietf.org/doc/html/rfc2109#section-2) spec to set cookies on the parent domain, the cookie will be shared with all subdomains of the parent domain.\n\nFor example, you set your CNAME to `login.example_domain.com` as a subdomain of `example_domain.com`. You host other applications under the parent domain, such as `app1.example_domain.com` and `app2.example_domain.com`. When users visit `login.example_domain.com`, cookies from `app1.example_domain.com` and `app2.example_domain.com` may be sent along with requests to Auth0’s Authentication API.\n\nTo safeguard our platform and because these cookies may grow to a considerable size and can be shared with other subdomains, Auth0 may reject requests carrying excessively large (multiple kilobytes) headers. Applications should be designed such that excessively large cookies are not sent to the Auth0 Authentication API. To learn more about cookie behavior with custom domains, read [Sending Cookies to the Origin Server](https://datatracker.ietf.org/doc/html/rfc2109#section-4.3.4).\n\n## Learn more\n\n*   [SameSite Cookie Attribute Changes](https://auth0.com/docs/manage-users/cookies/samesite-cookie-attribute-changes)\n*   [Verify Domain](https://auth0.com/docs/troubleshoot/basic-issues/verify-domain)\n*   [Troubleshoot Multi-Factor Authentication Issues](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-mfa-issues)",
    "title": "Authentication API Cookies",
    "description": "Learn about Authentication API cookies, including what they are, what they are used for, and how they should be handled.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/bot-detection",
    "markdown": "# Bot Detection\n\nBot Detection mitigates scripted attacks by detecting when a request is likely coming from a bot. These types of attacks are sometimes called credential stuffing attacks or list validation attacks. Bot Detection provides support against certain attacks and adds very little friction to legitimate users. Auth Challenge is our default bot detection response, which provides a CAPTCHA-free user verification.\n\nTo learn more, read [Credential Stuffing Attacks: What Are They and How to Combat Them](https://auth0.com/resources/whitepapers/credential-stuffing-attacks).\n\nAuth0 uses a large amount of data and statistical models to identify patterns that signal when bursts of login, signup, or password reset traffic are likely from a bot or script. Users who attempt to log in, create accounts, or reset passwords from IP addresses that have a high likelihood of being part of a credential stuffing attack are required to complete an additional verification step. The triggers detect traffic relating to these attacks without adding unnecessary friction to legitimate users.\n\n![The login page with a success screen](https://images.ctfassets.net/cdy7uua7fh8z/7qq0mjypNbmtFgDD5CcJWT/b45d95ca2096cf277c40b7964920c6ab/2024-02-28_14-09-26.png)\n\n## Configure Bot Detection\n\nAuth0 enables Bot Detection by default for all connections.\n\nIf you do not configure **Response** settings with Bot Detection enabled, Bot Detection operates in [Monitoring](https://auth0.com/docs/secure/attack-protection#monitoring) mode. Monitoring mode records related events (with risk assessment information) in your tenant log for you to review. To learn more, read [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events).\n\nYou can configure Bot Detection in the [Auth0 Dashboard](https://manage.auth0.com/#).\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection) and select **Bot Detection**.\n    \n2.  In the **Detection** section, enable the toggle.\n    \n    ![Detection section of the Attack protection screen](https://images.ctfassets.net/cdy7uua7fh8z/3q0HlAm0m0aLilEOAhQ81h/d8626e6e7572a1eb026421d17799d2f0/Screenshot_2024-02-01_at_10.43.58_AM.png)\n3.  In the **Response** section, choose a bot detection response.\n    \n    ![Dashboard - Attack Protection - Bot Detection](https://images.ctfassets.net/cdy7uua7fh8z/3vuVvc01mfCPdc70AU9Oq1/0d5b1519818211ba49c17f5c9e1d1887/2024-05-06_15-47-06.png)\n    \n    When using Auth Challenge, the **Fail open** toggle is disabled by default.\n    \n4.  Select when you want to require CAPTCHA for password flows, passwordless flows, and password reset flows.\n    \n    ![Bot detection CAPTCHA flows image](https://images.ctfassets.net/cdy7uua7fh8z/3yb6jEGO2rL8cYQjtDxOk9/14156c7356b1a56851d4f944fb5e9689/Screenshot_2024-05-29_at_1.39.29_PM.png)\n    *   **Never**: Never require your users to complete a CAPTCHA to log in.\n        \n    *   **When Risky**: Only require your users to complete a CAPTCHA if the login matches your **Bot Detection Level** setting.\n        \n    *   **Always**: Always require your users to complete a CAPTCHA to log in.\n        \n5.  If you choose **When Risky** or **Always**, the **CAPTCHA Providers** field will appear in the **Response** section. Select **Auth Challenge** (provided by Auth0), **Simple CAPTCHA** (provided by Auth0), or one of the supported third-party provider integrations (requires external setup and registration).\n    \n    *   If you choose **Auth Challenge** or **Simple CAPTCHA**, you are done. If your login experience does not support JavaScript, you must select **Simple CAPTCHA**.\n        \n    *   If you choose one of our third-party provider integrations, enter the provider’s configuration details. To learn more, read [Configure third-party CAPTCHA provider integrations](https://auth0.com/docs/secure/attack-protection/bot-detection/configure-captcha).\n        \n6.  If you choose **When Risky**, the **Bot Detection Level** field will appear in the **Response** section. Select the security level that best fits your use case. For more information, read [Configure Bot Detection Level](https://auth0.com/docs/secure/attack-protection/bot-detection#configure-bot-detection-level).\n    \n7.  Select **Save**.\n    \n\n## Configure Bot Detection Level\n\nConfigure the **Bot Detection Level** setting to match your risk tolerance and business needs.\n\nThere are three settings to choose from:\n\n1.  **Low**: Triggers CAPTCHA when there is a high chance of bot activity, providing a relatively frictionless experience for real users.\n    \n2.  **Medium**: Default. Triggers CAPTCHA when there is a moderate chance of bot activity, providing a balance of security and experience for real users.\n    \n3.  **High**: Triggers CAPTCHA when there is a small chance of bot activity, providing more security but potentially more friction for real users.\n    \n\n![Auth0 Dashboard > Security > Attack Protection to access this slider](https://images.ctfassets.net/cdy7uua7fh8z/6HSMEXmDHVks6aUH0FUTPo/e7f0aedad84f0b022f854dbc5494df31/2023-07-24_15-28-04.png)\n\n## Allow trusted IP addresses to bypass Bot Detection\n\nYou can allow up to 100 discrete IP addresses and/or CIDR ranges (IPv4 or IPv6) to bypass Bot Detection by adding them to the **IP AllowList** field. Auth0 does not enforce blocking and does not send alerts for IP addresses or CIDR ranges on this list.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection), and select **Bot Detection**.\n    \n2.  In the **IP AllowList** field, enter the IP addresses and/or CIDR ranges you want to bypass Bot Detection. Separate multiple addresses or ranges with commas.\n    \n\n## Restrictions and limitations\n\n### Flow limitations\n\nBot Detection works for web and mobile applications that use [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login). For applications that do not use Universal Login, levels of support are limited, in particular for flows that cannot support a CAPTCHA or reCAPTCHA challenge.\n\nEnsure all of your login experiences are supported before you enable Bot Detection, or you may introduce errors into your application.\n\n| **Flow** | **Limitation** |\n| --- | --- |\n| Universal Login | Supported by default. |\n| Classic Login (no customizations) | Supported by default. |\n| Classic Login (Custom Login Page using **Lock** template) | Supported if using `lock.js` SDK version 12.4.0 or higher. |\n| Classic Login (Custom Login Page using **Custom Login Form** template) | Supported if using `auth0.js` SDK version 9.24 or higher, and you enhance your code to handle a CAPTCHA or reCAPTCHA challenge. |\n| Native applications | Supported if using one of the following SDKs:<br><br>*   `Auth0.swift` version 1.28.0+<br>*   `Auth0.Android` version 1.25.0+<br>*   `Lock.Swift` version 2.19.0+<br>*   `Lock.Android` version 2.22.0+ |\n| Regular Web or Native applications using Resource Owner Password Flow | Supported in a limited capacity. Bot Detection Response such as CAPTCHA requires an interactive flow and therefore is not supported. If the `requires_verification` error is returned by the SDK, you must trigger a web-based login flow for the user to complete authentication. |\n| Flows not hosted by Auth0 using `lock.js` or `auth0.js` SDK which perform cross-origin authentication (`co/authenticate` endpoint) | Not supported. |\n\n### Connection type limitations\n\nDepending on the types of connections you use, Bot Detection has the following limitations.\n\n| **Connection Type** | **Limitation** |\n| --- | --- |\n| Database | Supported if the login uses a compatible login flow as described in the Flow limitations table. |\n| Custom database | Supported if the login uses a compatible login flow as described in the Flow limitations table. |\n| Active Directory/LDAP | Supported if the login uses a compatible login flow as described in the Flow limitations table. |\n| Enterprise | Not supported. |\n| Social Login | Not supported. |\n| Passwordless | Supported if the login uses a compatible login flow as described in the Flow limitations table. |\n\n### Custom login page support\n\nIf you build a custom login page using Auth0.js, you can enable Bot Detection to render a CAPTCHA step in scenarios when a login request is determined by Auth0 to be high-risk.\n\nYour custom login form code must handle scenarios where the user is asked to pass a CAPTCHA step. To learn more, read [Add Bot Detection to Custom Login Pages](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages).\n\n### Native application support\n\nIf you build native applications using an Auth0 SDK for the login flow, you can enable Bot Detection to render a CAPTCHA step in scenarios when a login request is determined by Auth0 to be high-risk.\n\nYour custom login form code must handle scenarios where the user is asked to pass a CAPTCHA step. To learn more, read [Add Bot Detection to Native Applications](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-native-apps).\n\n## Learn more\n\n*   [Configure Third-Party CAPTCHA Provider Integrations](https://auth0.com/docs/secure/attack-protection/bot-detection/configure-captcha)\n*   [Add Bot Detection to Custom Login Pages](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages)\n*   [Add Bot Detection to Native Applications](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-native-apps)\n*   [Breached Password Detection](https://auth0.com/docs/secure/attack-protection/breached-password-detection)\n*   [Brute-Force Protection](https://auth0.com/docs/secure/attack-protection/brute-force-protection)\n*   [Suspicious IP Throttling](https://auth0.com/docs/secure/attack-protection/suspicious-ip-throttling)",
    "title": "Bot Detection",
    "description": "Describes how Auth0 detects attacks to protect against malicious attempts to access your application, alert you and your users of suspicious activity, and block further login attempts.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/breached-password-detection",
    "markdown": "# Breached Password Detection\n\nBreached password detection protects your applications from bad actors signing up or logging in with stolen credentials. Auth0 can both notify users and block at-risk accounts.\n\nAuth0 tracks large security breaches that occur on major third-party sites. If Auth0 identifies that any of your users’ credentials were part of a breach, the breached password detection security feature triggers. In response, Auth0 can:\n\n*   Block new users from signing up with stolen credentials. Entirely blocks the username/password combination.\n    \n*   Block anyone from logging in with stolen credentials. Entirely blocks the account and prevents bad actors from accessing your application. The user can’t log in until they change their password. \n    \n*   Send an email to the user when a login attempt happens. The email informs users about the risk and instructs them to change their password immediately. You can customize the message sent to users. To learn more, read [Customize Blocked Account Emails](https://auth0.com/docs/customize/email/customize-blocked-account-emails).\n    \n\n## Detect breaches faster with Credential Guard\n\nBreached password detection relies on breach data released to the public. Credential Guard is an additional Auth0 service you can add to breach password detection that screens for breaches to allow faster notification of compromised credentials.\n\n|     | **Breached Password Protection** | **Credential Guard** |\n| --- | --- | --- |\n| **Plans included** | B2B / B2C Professional and Enterprise | Part of Attack Protection add-on in Enterprise plan |\n| **Data collection method** | Web scanners and scrapers search for user credentials in published security breaches | Dedicated security team infiltrates criminal communities and gains access to breach data that isn’t otherwise available |\n| **Typical detection time** | Up to 7-13 months | 12-36 hours |\n| **Coverage** | English only | 200+ countries and territories |\n\nTo add Credential Guard to your Auth0 agreement, [contact us](https://auth0.com/get-started?place=header&type=button&text=talk%20to%20sales).\n\n## Configure breached password detection\n\nWhen enabled, you can customize breached password detection preferences, such as the detection method, response scenarios, and notifications.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection) and select **Breached Password Detection**.\n    \n    ![The toggle for turning on breached password detection in Auth0](https://images.ctfassets.net/cdy7uua7fh8z/239K5la6duvT7ZwpAt2ED1/b7db9665f372f0cf37bb3405f906a366/Screen_Shot_2022-01-20_at_3.46.04_PM.png)\n2.  To turn on breached password detection, enable the switch at the top-right corner of the page.\n    \n    ![Configure breached password detection in Auth0](https://images.ctfassets.net/cdy7uua7fh8z/4xxqrdFGgd5toF8r6MZNvw/bce8ec201496ecfa538dc5c69e433653/2022-08-22_16-10-13.png)\n\n### Configure detection method\n\nBased on features available with your plan, you can configure the detection method used to identify compromised credentials.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection) and select **Breached Password Detection**.\n    \n2.  In the **Detection** section, locate **Breached Password Detection Method**.\n    \n3.  If your agreement with Auth0 includes Credential Guard, select **As soon as possible based on data received from the dark web, with Credential Guard**.\n    \n4.  Otherwise, leave **When breach data is published** selected.\n    \n5.  Select **Save** to apply changes.\n    \n\n![Dashboard > Security > Attack Protection > Breached Password > Detection](https://images.ctfassets.net/cdy7uua7fh8z/5wb1JnQ0NetJ1kpbSMIm1V/6efa1366e2fc4e2f598915ef9ce885c8/breached-password-detection0.png)\n\n### Configure response scenarios\n\nYou can configure how Auth0 responds to different scenarios when users may provide compromised credentials.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection) and select **Breached Password Detection**.\n    \n2.  Locate the **Response** section.\n    \n    ![Dashboard > Security > Attack Protection > Breached Password > Response](https://images.ctfassets.net/cdy7uua7fh8z/2E752PH9A6glc8BnYFdr3d/275f0bdeb1080ef0e8da6d1243c45e91/2022-08-22_16-10-45.png)\n3.  Enable the **Block compromised credentials for new accounts** toggle to block users from using compromised credentials during signup.\n    \n4.  Enable the **Block compromised user accounts** toggle to block users from using compromised credentials during login.\n    \n\n### Configure notifications\n\nYou can configure how Auth0 notifies users and admins about the use of compromised credentials.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection) and select **Breached Password Detection**.\n    \n2.  Locate the **Notifications** section.\n    \n3.  Enable the **Send notifications to users with compromised credentials** toggle to send an email to a user when Auth0 detects their credentials may have been compromised.\n    \n4.  Enable the **Compromised user accounts** toggle to send an email to administrators when a user signs up with compromised credentials.\n    \n5.  Enable the **Compromised user accounts** toggle to send an email to administrators when a user logs in with compromised credentials.\n    \n6.  Choose the notification frequency: **Immediately**, **Daily**, **Weekly**, or **Monthly**.\n    \n7.  Select **Save**.\n    \n\n#### Customize email notifications to users\n\nYou can configure the notification Auth0 sends to your users when compromised credentials are used for login.\n\n1.  Navigate to [Dashboard > Branding > Email Templates](https://manage.auth0.com/#/templates). \n    \n2.  In the **Template** dropdown menu, select **Password Breach Alert**.\n    \n3.  Update the template accordingly. You can use any of the available [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables) to customize the message.\n    \n\n## Verify detection configuration\n\nYou can verify your configuration by testing signup and login flows with an Auth0-provided breached password.\n\n### Signup flow\n\nVerify a user’s signup experience when Auth0 detects a breached password:\n\n1.  Go through your signup flow and try to register a new account with a test breached password (`Paaf213XXYYZZ` or `Paat739!!WWXXYYZZ`) or any password starting with `AUTH0-TEST-`.\n    \n2.  If **Block compromised credentials for new accounts** is enabled, you will receive an error message, preventing you from using the breached password.\n    \n3.  Navigate to [Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs).\n    \n4.  Search the logs for `type: \"signup_pwd_leak\"` to verify Auth0 blocked the signup.\n    \n\n### Login flow\n\nVerify a user's login experience when Auth0 detects a breached password:\n\n1.  Create a test user in [Dashboard > User Management > User](https://manage.auth0.com/#/users), and assign a test breached password (`Paaf213XXYYZZ` or `Paat739!!WWXXYYZZ`) or any password starting with `AUTH0-TEST-`.\n    \n2.  Go through your login flow and submit the identifier and password that you assigned.\n    \n3.  If **Block compromised user accounts** is enabled, the user will receive an error message, preventing them from logging in and advising to reset their password.\n    \n4.  Navigate to [Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs).\n    \n5.  Search the logs for `type: \"pwd_leak\"` to verify Auth0 blocked the login.\n    \n6.  Navigate to [Dashboard > User Management > User](https://manage.auth0.com/#/users) to delete the test user.\n    \n\n## Learn more\n\n*   [Bot Detection](https://auth0.com/docs/secure/attack-protection/bot-detection)\n*   [Brute-Force Protection](https://auth0.com/docs/secure/attack-protection/brute-force-protection)\n*   [Suspicious IP Throttling](https://auth0.com/docs/secure/attack-protection/suspicious-ip-throttling)\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)\n*   [Customize Blocked Account Emails](https://auth0.com/docs/customize/email/customize-blocked-account-emails)",
    "title": "Breached Password Detection",
    "description": "Understand why a user receives a breached password email and general web security tips.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/suspicious-ip-throttling",
    "markdown": "# Suspicious IP Throttling\n\nSuspicious IP Throttling blocks traffic from any IP address that rapidly attempts too many logins or signups. This helps protect your applications from high-velocity attacks that target multiple accounts.\n\nSuspicious IP throttling is enabled by default when you create your Auth0 tenant. When Auth0 detects a high number of signup attempts or failed login attempts from an IP address, it responds to subsequent attempts with the [HTTP 429 Too Many Requests status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) until that IP address is no longer throttled.\n\n## Configure Suspicious IP Throttling\n\nYou can configure Suspicious IP Throttling in the [Auth0 Dashboard](https://manage.auth0.com/#) or with the [Auth0 Management API](https://auth0.com/docs/api/management/v2/attack-protection/patch-suspicious-ip-throttling).\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection), and select **Suspicious IP Throttling**.\n    \n2.  Select the toggle at the top of the page to enable or disable Suspicious IP Throttling.\n    \n\n![Auth0 suspicious IP throttling settings ](https://images.ctfassets.net/cdy7uua7fh8z/3CKuhfeU1nqDxrJJKAYR2k/2488411d3936efe2efcaf574b414538e/Screen_Shot_2021-09-23_at_2.00.09_PM.png)\n\n## Allow trusted IP addresses exceed throttling limits\n\nYou can make up to 100 discrete IP addresses and/or CIDR ranges (IPv4 or IPv6) exempt from Suspicious IP Throttling by adding them to the **IP AllowList**. Auth0 does not block or alert tenant administrators when these IP addresses exceed the throttling limits.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection), and select **Suspicious IP Throttling**.\n    \n2.  In the **IP AllowList** field, enter the IP addresses and/or CIDR ranges you want to allow unlimited login and signup attempts. Separate multiple IP addresses and/or CIDR ranges with commas.\n    \n\n## Configure response\n\nBy default, Auth0 sends email to tenant administrators when an IP address is marked as suspicious.\n\nYou can configure how Auth0 responds to high-velocity login or signup attempts.\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection), and select **Suspicious IP Throttling.**\n    \n2.  Locate the **Response** section.\n    \n3.  In the **Block Settings** section, enable **Limit high-velocity traffic targeting too many accounts** to throttle traffic from IP addresses that exceed the login or signup threshold.\n    \n4.  In the **Notifications** section, enable **Send notification to account administrator** to automatically send an email to tenant administrators when an IP address exceeds the login or signup threshold.\n    \n5.  Select **Save**.\n    \n\n## Configure throttling limits and rates\n\nYou can customize how Auth0 throttles suspicious IP addresses. You can change:\n\n*   The maximum number of failed login and signup attempts allowed from a given IP address.\n    \n*   The rate at which throttled IP addresses allow new login and signup attempts.\n    \n\nFor more information on maximum attempts and throttling rate and how they work, read [How suspicious IP throttling works](#how-suspicious-ip-throttling-works).\n\n1.  Go to [Dashboard > Security > Attack Protection](https://manage.auth0.com/#/security/attack-protection), and select **Suspicious IP Throttling.**\n    \n    ![Suspicious IP throttling customization in the Auth0 dashboard](https://images.ctfassets.net/cdy7uua7fh8z/5yLYmDn0FvDB061WgTH2fk/0f3dce552a41aa5756a2eca788944965/Screen_Shot_2021-09-29_at_10.19.32_AM.png)\n2.  Locate the **Detection** section.\n    \n3.  Select **Custom** for **Suspicious IP Thresholds.**\n    \n4.  Configure the **Login Threshold** settings:\n    \n    *   **Maximum Attempts**: Enter the number of failed login attempts a single IP address can make in one day before Auth0 blocks the next attempt.\n        \n    *   **Throttling Rate**: Enter the rate at which to grant new login tokens.\n        \n5.  Configure the **Signup Threshold** settings:\n    \n    *   **Maximum Attempts**: Enter the number of signup attempts a single IP address can make in one minute before Auth0 blocks the next attempt.\n        \n    *   **Throttling Rate**: Enter the rate at which to grant new signup tokens.\n        \n6.  Select **Save**.\n    \n\n### How suspicious IP throttling works\n\nAuth0 counts and allows login and signup attempts separately. IP addresses suspended from further login attempts can still try to sign up. IP addresses suspended from further signup attempts can still try to log in. \n\n#### Login attempts\n\nAuth0 throttles an IP address that attempts and fails too many logins in a day. The login throttling rate determines how many login attempts Auth0 grants to an IP address evenly over 24 hours. For example, a throttling rate of 100 means that Auth0 grants a new attempt approximately every 15 minutes.\n\n#### Signup attempts\n\nAuth0 throttles an IP address that attempts too many total signups in a minute. For example, if an IP address makes 50 signup attempts, Auth0 blocks further attempts. Unlike logins, the signup attempts do not need to be failures.\n\nThe signup throttling rate determines how many signup attempts Auth0 grants to an IP address evenly over 24 hours. For example, a throttling rate of 72,000 means that Auth0 grants a new attempt approximately every second.\n\n#### Malformed requests and schema validation errors\n\nLogin and signup requests that do not follow the proper structure or formatting are not considered valid attempts, and therefore do not count toward your configured threshold.\n\nFor more information about login and signup requests, read [Auth0 Authentication API](https://auth0.com/docs/api/authentication).\n\n## Special cases\n\nBecause suspicious IP throttling depends on the IP address of the user, the following use cases require additional configuration:\n\n*   **Using the Resource Owner Password Grant from the backend of an application**: Using this call does not get the IP address of the user; however, to make suspicious IP throttling work correctly, you can configure your application to send the IP address of the user as part of the request. See [Avoid Common Issues with Resource Owner Password Flow and Attack Protection: Send the user's IP address from your server](https://auth0.com/docs/get-started/authentication-and-authorization-flow/resource-owner-password-flow/avoid-common-issues-with-resource-owner-password-flow-and-attack-protection).\n    \n*   **Authenticating a large number of users from the same IP address**: Users who are behind a proxy are more likely to reach set limits and trigger throttling. You can avoid erroneously triggering throttling by configuring an AllowList for the proxy's IP and CIDR range. See [Avoid Common Issues with Resource Owner Password Flow and Attack Protection: Configure your Application to trust the IP address](https://auth0.com/docs/get-started/authentication-and-authorization-flow/resource-owner-password-flow/avoid-common-issues-with-resource-owner-password-flow-and-attack-protection).\n    \n\n## Learn more\n\n*   [Brute-Force Protection](https://auth0.com/docs/secure/attack-protection/brute-force-protection)\n*   [Bot Detection](https://auth0.com/docs/secure/attack-protection/bot-detection)\n*   [Breached Password Detection](https://auth0.com/docs/secure/attack-protection/breached-password-detection)\n*   [Customize Blocked Account Emails](https://auth0.com/docs/customize/email/customize-blocked-account-emails)\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)\n*   [User/Password Authentication Rate Limits](https://auth0.com/docs/support/policies/rate-limit-policy/database-connections-rate-limits)",
    "title": "Suspicious IP Throttling",
    "description": "Learn how suspicious IP throttling works and how to configure it in the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/data-processing",
    "markdown": "# Auth0 Data Processing\n\nThis document discusses what data Auth0 has, as well as how it processes this data.\n\n## Data Auth0 possesses\n\nAll of the data Auth0 has about an end user is located in the Auth0 user profile. The specific attributes contained in the user profile vary based on customer implementation and are based on a number of factors, such as connection type, user consent during the authentication flow, and whether you've augmented the user profiles with additional information.\n\n## When data is stored\n\nThe Auth0 user profile information is stored in Auth0 when you use a database connection. If a user logs in using any other type of connection (including custom database connections), Auth0 stores information provided by the external identity provider for future queries.\n\n## How data is used\n\nThe personal data stored in Auth0 is used only for the purposes of providing its services, namely authenticating users\n\n## What happens to data when an account is deleted\n\nWhen an end user's account is deleted, their user profile, included metadata, is removed. To learn more, read [Auth0 General Data Protection Regulation Compliance: Right to access, correct, and erase data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr).",
    "title": "Auth0 Data Processing",
    "description": "Describes how Auth0 processes data in its possession.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/highly-regulated-identity/transactional-authorization-with-contextual-sca",
    "markdown": "# Transactional Authorization with Contextual Strong Customer Authentication\n\nHighly Regulated Identity enables Transactional Authorization with Contextual Strong Customer Authentication (SCA) by applying SCA step-up authentication and [Dynamic Linking](https://auth0.com/docs/secure/highly-regulated-identity#dynamic-linking) to authorize a specific transaction. It challenges the user with a second authentication factor to explicitly authorize the transaction details of a one-time operation. This is useful for the following use cases that require financial-grade security:\n\n*   Securing sensitive operations executed from your own services, such as approving bank transfers, access to operations history, and changes in access credentials. \n    \n*   Securing sensitive operations requested from third-party services, such as approving digital payments and allowing one-time access for account verification.\n    \n\nThis article walks you through the end-to-end journey of approving a bank transfer. The same transactional authorization flow can be applied to other use cases.\n\n## Prerequisites\n\nFollow the instructions in [Configure Rich Authorization Requests](https://auth0.com/docs/get-started/apis/configure-rich-authorization-requests) for the API or resource server you want to configure:\n\n*   Set `transactional-authorization-with-mfa` as the `consent_policy`.\n    \n*   Register the `authorization_details.types` that you want to use.\n    \n\n## End-to-end flow\n\nThe following diagram shows the end-to-end flow for Transactional Authorization with Contextual SCA. There are four main phases:\n\n1.  Securely redirect the user to Auth0 with the transaction details. In this step, avoid revealing sensitive information on the front channel (e.g. the browser).\n    \n2.  Apply dynamic policy after the user authenticates. Using [Actions](https://auth0.com/docs/customize/actions), you can dynamically decide on the next steps based on the transaction details and other information you may get from sources such as external APIs. To learn more, read [Apply dynamic policy](#apply-dynamic-policy).\n    \n3.  Challenge the user with a second authentication factor and show transaction details for the user to explicitly approve. This step depends on the authentication factor you chose to apply using Actions.\n    \n4.  Get the access token and proceed with the sensitive operation. Your API validates the approved transaction details associated with the access token.\n    \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/6VYcY5YJRT9Ngaomj5f9yi/d150a6cb293539974047b07c960b15c8/HRI_diagrams_-_transactional_authorization_sca_end_to_end_flow_digram.png)\n\nWe will go through each phase in detail in the following sections.\n\n### Communicate transaction details and redirect to Auth0\n\nThe user first accesses your web application after authenticating with Auth0. Following our example use case, the user then requests a money transfer to one of their contacts.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/6loGZG5Llvz4QhyuWBJ2uI/70261b41e6e1afc06e4987d5644899dc/image8.png)\n\nTo meet financial-grade security standards, Highly Regulated Identity uses Pushed Authorization Requests (PAR) to hide transaction details from the browser. Instead of sending query parameters through the browser to the `/authorize` endpoint, PAR directly sends parameters from your backend to a special `/par` endpoint using a POST request. To learn how to set it up, read [Configure Pushed Authorization Requests](https://auth0.com/docs/get-started/applications/configure-par).\n\nIn the PAR request body, transaction details are sent as part of the `authorization_details` JSON object:\n\n```\n\"authorization_details\": [\n {\n   \"type\": \"money_transfer\",\n   \"instructedAmount\": {\n     \"amount\": 150,\n     \"currency\": \"USD\"\n   },\n   \"sourceAccount\": \"xxxxxxxxxxx1234\",\n   \"destinationAccount\": \"xxxxxxxxxxx9876\",\n   \"beneficiary\": \"Hanna Herwitz\",\n   \"subject\": \"A Lannister Always Pays His Debts\"\n }\n]\n```\n\nUse Actions to inspect the `authorization_details` to determine which authentication factors to use based on the transaction. To learn more about `authorization_details` and how to use it along PAR, read [Authorization Code Flow with Rich Authorization Requests](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow/authorization-code-flow-with-rar).\n\nIf you want to meet FAPI 1 Advanced Security compliance requirements, you must also use public key cryptography to authenticate the backend against the `/par` or the `/token` endpoint. This is more secure than sending a Client Secret. Auth0 offers the following public key cryptography authentication methods:\n\n*   [Private Key JWT](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authenticate-with-private-key-jwt)\n    \n*   [mutual-TLS (mTLS) for OAuth](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authenticate-with-mtls)\n    \n\nAfter receiving a successful response to your PAR request, redirect the user to your Auth0 tenant’s `/authorize` endpoint. Add the `request_uri` parameter received in the PAR response and the `client_id` as the only query parameters, thus effectively hiding any sensitive information from the browser.\n\n### Apply dynamic policy\n\nWhen the user logs in without using SSO and the browser hits your Auth0 tenant’s `/authorize` endpoint, Auth0 will attempt to authenticate the user. In our example of approving a bank transfer, Auth0 has already authenticated the user to access your web application. However, when a third party redirects the user, such as for a digital payment, Auth0 presents a login screen to the user. To learn more about the authentication flow, read the [Authenticate](https://auth0.com/docs/authenticate) documentation.\n\nOnce Auth0 has successfully authenticated the user, Auth0 triggers post-login [Actions](https://auth0.com/docs/customize/actions), which expose transaction details about the user, app, authentication factor(s) used, and more in the [post-login event object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object). Within the post-login event object, the `event.transaction.requested_authorization_details` property contains details about the authorization request that were received in the previous step.\n\nUse the [post-login event object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object) to decide how you want to proceed with the transaction. For example, you can send transaction details to an external risk engine, and after evaluating the risk level, determine whether to request step-up authentication using sms, as illustrated in the following code sample.\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.transaction?.requested_authorization_details.some(e => e.type === 'money_transfer')) {\n      const axios = require('axios');\n\n      //details to contact risk evaluation engine\n      const risk_url = 'https://risk.example.org/score';\n      const risk_options = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      const tx_data = {\n        email: event.user.email,\n        authorization_details: event.transaction?.requested_authorization_details,\n        linking_id: event.transaction.linking_id\n      };\n\n      //send operation details to risk evaluation engine\n      var risk = await axios.post(risk_url, tx_data, risk_options);\n\n      //if it is a risky operation use sms to authorize\n      if (risk.data.score >= 2) {\n        api.authentication.challengeWith({ type: 'phone' });\n      }\n\n     //add unique transaction_id to access token for traceablity\n      api.accessToken.setCustomClaim('transaction_id', event.transaction.linking_id);\n    }\n};\n```\n\nThe post-login Action also exposes `event.transaction.linking_id`, which holds a universally unique identifier (UUID) of the transaction. Later, when Auth0 prompts the user to approve the transaction, the `linking_id` provides a reference for [Dynamic Linking](https://auth0.com/docs/secure/highly-regulated-identity#dynamic-linking). You can also add the `linking_id` to the access token as a [custom claim](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims) to associate the authorization details of a specific transaction with the API calls on your end. This helps with traceability, as Auth0 includes the `linking_id` in tenant logs.\n\n### Challenge the user to get transaction details approval\n\nYou can customize what authentication factor to use depending on factors enrolled by the user, factors already satisfied by the session, and/or your own preferences. You can also provide alternatives for the user to choose from. To learn more, read [Customize MFA Selection in New Universal Login](https://auth0.com/docs/secure/multi-factor-authentication/customize-mfa/customize-mfa-selection-universal-login).\n\nAdditionally, for SMS, email, and WebAuthn, you can customize the consent screen that Auth0 presents to the user with the information you want to show from authorization\\_details and other transaction details. To learn more, read [Configure Rich Authorization Requests](https://auth0.com/docs/get-started/apis/configure-rich-authorization-requests). For push notifications, this does not apply as the mobile application is the one showing the transaction details to the end user.\n\nThe following sections explain the different authentication factors that you can configure for transactional authorization.\n\n#### Push notifications\n\nSend a push notification to a user’s enrolled mobile device while Auth0 prompts the user with the Multi-Factor Authentication (MFA) waiting screen on the consumption device (e.g. the laptop where the transaction originated).\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/4mEJTT4VsAAAb6I0HhJI6r/b1e3852e0e63630a51f36160e90b2bc3/image11.png)\n\nFor push notifications, the mobile application is responsible for showing the transaction details to the user for explicit approval. To do that, using Actions, store the transaction details you want to show to the user along with the `linking_id` on an external server or endpoint and make them available only for a few minutes. After that, challenge the user with a push notification as illustrated in the following code sample. Remember to forbid the option to fallback to manually entering an OTP by adding the option `otpFallback: false`.\n\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.transaction?.requested_authorization_details.some(e => e.type === 'money_transfer')) {\n      const axios = require('axios');\n\n      //details to store tx_details in external server\n      const tx_server_url = 'https://consent.example.org/transactions';\n      const tx_server_options = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const tx_data = {\n        email: event.user.email,\n        authorization_details: event.transaction?.requested_authorization_details,\n        linking_id: event.transaction.linking_id\n      };\n\n      //store the transaction details in an external endpoint\n      var response = await axios.post(tx_server_url, tx_data, tx_server_options);\n\n      //event.transaction.linking_id is automatically added to the push challenge\n      api.authentication.challengeWith({ type: 'push-notification', options: {otpFallback: false}});\n\n     //add unique transaction_id to access token for traceablity\n      api.accessToken.setCustomClaim('transaction_id', event.transaction.linking_id);\n    }\n};\n```\n\nThe push notification includes the `event.transaction.linking_id`, which [Auth0 Guardian SDK](https://auth0.com/docs/secure/multi-factor-authentication/auth0-guardian) passes to the mobile application. Over the wire, the property name is shortened to `txlnkid`. With the `linking_id`, the mobile application can now fetch transaction details and show them to the user. Once the user approves or declines the operation, the mobile application can allow or reject the MFA challenge respectively! The transaction progresses to the [Complete the operation](#complete-the-operation) phase.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/2sy04NuQrzQ3OTiMbXNI9v/8d09efc3531723f456abafcf48f07f23/image5.png)![](https://images.ctfassets.net/cdy7uua7fh8z/29ugIpjRjoMWQkCcSDGRrk/777a32dd86f8877407cb758853af5a19/image7.png)\n\n**Note:** To verify the identity of the user opening the push notification, you can add biometric authentication to the mobile application. To learn more, read [Configure WebAuthn with Device Biometrics for MFA](https://auth0.com/docs/secure/multi-factor-authentication/fido-authentication-with-webauthn/configure-webauthn-device-biometrics-for-mfa).\n\n#### SMS, Email, or WebAuthn\n\nYou can also set up phone, email, or Webauthn as authentication factors to challenge the user. For these authentication factors, Auth0 prompts the user with the corresponding MFA waiting screen. After the user validates the challenge on the MFA waiting screen, Auth0 shows the transaction details to the user for explicit approval. Remember you have to [Configure Rich Authorization Requests](https://auth0.com/docs/get-started/apis/configure-rich-authorization-requests) for the approval step to work properly.\n\nFor the phone authentication factor, Auth0 sends a verification code to the user through SMS or voice. The following screenshot shows the MFA waiting screen after Auth0 sent the code through SMS:\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/kYn2A0p2jTY5CUn1FsjVf/f23649485b9ae835672edd7c01c2327f/image10.png)\n\nThe user then receives the SMS with the verification code.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/7dkldrgsng6FfnGerJk57N/8b37709be8725b526e51000a5a0f49d8/image13.png)\n\nAfter the user inputs the verification code in the MFA waiting screen, Auth0 prompts the user with the transaction details on a consent screen. Once the user approves or declines the transaction details, the transaction progresses to the [Complete the operation](#complete-the-operation) phase.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/1KXXiizJYA2Ooo6no7D2aE/3a2face26a1484c7927ef38f49ed078c/image2.png)\n\nEmail and Webauthn use the same transactional approval flow and similar MFA waiting and explicit approval screens.\n\n#### No Challenge\n\nIf you don’t challenge the user with a second authentication factor, Auth0 prompts the user with the consent screen to get explicit approval for the transaction details.\n\n### Complete the operation\n\nTo complete the operation, Auth0 follows the standard [Authorization Code Flow](https://auth0.com/docs/login/flows/authorization-code-flow). If the transaction is approved, the user browser is redirected to your application with an authorization code, which is then exchanged for an access token encrypted using [JSON Web Encryption](https://auth0.com/docs/secure/tokens/access-tokens/json-web-encryption). The access token contains the `authorization_details` that you originally passed. The following code sample shows the contents of a decrypted access token:\n\n```\n{\n \"iss\": \"https://my_tenant.auth0.com/\",\n \"sub\": \"auth0|me\",\n \"aud\": \"https://myapi.zewobnak.com\",\n \"iat\": 1683661385,\n \"exp\": 1683747785,\n \"azp\": \"my_client\",\n \"transaction_linking_id\": \"ce4842e8-2894-418a-b1f9-39a330cd4911\",\n \"authorization_details\": [\n   {\n     \"type\": \"money_transfer\",\n     \"instructedAmount\": {\n       \"amount\": 150,\n       \"currency\": \"USD\"\n     },\n     \"sourceAccount\": \"xxxxxxxxxxx1234\",\n     \"destinationAccount\": \"xxxxxxxxxxx9876\",\n     \"beneficiary\": \"Hanna Herwitz\",\n     \"subject\": \"A Lannister Always Pays His Debts\",\n   }\n ]\n}\n```\n\nPass the access token to the API that facilitates the money transfer. The API then checks the access token’s `authorization_details` to verify the transaction details, such as the amount, sender, destination, and more. Once verified, the money transfer successfully executes, and you should see the approval screen.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/dXeBbLxt1w1fqGt67ALCG/a4e9ce5feb4375f0a2c123a6bb85227b/image9.png)\n\nIf the transaction is rejected at any step, the user browser displays an `access_denied` error code.",
    "title": "Transactional Authorization with Contextual Strong Customer Authentication",
    "description": "Learn about how Highly Regulated Identity enables transactional authorization with Contextual Strong Customer Authentication. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/tips",
    "markdown": "# General Security Tips\n\nUsers can't usually prevent certain sites from experiencing security breaches, but there are some things they can do to help keep their accounts safe.\n\n### Check emails carefully\n\nCheck where an email is coming from and the links that they provide. Often phishing emails do not include a user's name but something generic such as \"Dear Customer\".\n\n### Reset passwords directly from sites\n\nAlways do a password reset through the actual site itself not via potentially false links in emails. Also, note that a secure website URL always starts with `https`.\n\nHere are some links for password resets on commonly-used sites:\n\n*   [Google](https://www.google.com/accounts/recovery/)\n    \n*   [Facebook](https://www.facebook.com/settings)\n    \n*   [Twitter](https://twitter.com/settings/password)\n    \n\n### Never enter personal or financial information in emails\n\nEmails in general are not very secure and are not a good way to communicate sensitive information. A trusted company/application would not ask for information in this way. Make sure not to enter confidential information through false links in emails.\n\n### Never download files from unreliable sources\n\nMost web browsers detect suspicious sites. An alert should appear when you try to access a malicious site. Never download files from suspicious emails or websites.\n\n### Do not reuse passwords\n\nWhen one site has a breach of user data, if a user uses the same credentials elsewhere, the information in other sites can also be accessed. The only way to prevent this is by not reusing passwords for multiple sites. The problem is that remembering countless passwords is frustrating and often impossible. One solution to this problem is the use of a password manager. There are many password managers available which can help users to use separate and secure passwords for each account, but at the same time not be responsible for remembering all of them.\n\n### Use strong passwords\n\nThe longer a password is, the harder it becomes to be guessed via brute force methods. Many sites allow the use of pass-phrases (a phrase or sentence instead of just a complicated word.) Try to make passwords long and use a mix of special characters, numbers, and upper- and lowercase letters.\n\n### Keep software current\n\nApplications release patches and updates when they find security vulnerabilities in their systems. Keeping applications, web browsers, and operating systems up to date can help prevent security breaches.\n\n### Check the security of your email inbox\n\nIf you use Gmail, Google offers the [Security Checkup](https://myaccount.google.com/security-checkup) tool to let you know if there are any security issues related to your inbox.\n\nYou can also use third-party tools, such as websites like [HaveIBeenPwned](https://haveibeenpwned.com/PwnedWebsites) to see if there might be security issues associated with your email address.\n\n## Learn more\n\n*   [Attack Protection](https://auth0.com/docs/secure/attack-protection)\n*   [View Attack Protection Log Events](https://auth0.com/docs/secure/attack-protection/view-attack-protection-events)",
    "title": "General Security Tips",
    "description": "Describes general security tips to prevent security breaches. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-center/metrics",
    "markdown": "# Metrics\n\nSecurity Center uses tenant log events to identify patterns that are usually an indicator of known attack types. We classify tenant log event patterns into categories: normal traffic, credential stuffing threats, signup attack threats, and MFA bypass threats.\n\n## Normal traffic\n\nWe use normal traffic to establish a benchmark against different threat types we may observe. Normal traffic includes all successful and failed events for a given hour, which includes the following event codes:\n\n| Event code | Event |\n| --- | --- |\n| `s` | Successful login |\n| `ss` | Successful signup |\n| `sepft` | Successful exchange of password for access token |\n| `f` | Failed user login |\n| `fu` | Failed user login due to invalid username |\n| `fp` | Failed user login due to invalid password |\n| `pwd_leak` | Attempted login with a leaked password |\n\n## Credential stuffing\n\nWe identify credential stuffing threats within a single hour with the following event codes:\n\n| Event code | Event |\n| --- | --- |\n| `f` | Failed user login |\n| `fu` | Failed user login due to invalid username |\n| `fp` | Failed user login due to invalid password |\n| `pwd_leak` | Attempted login with a leaked password |\n| `limit_wc` | IP blocked for >10 failed login attempts to a single account |\n| `limit_sul` | User blocked for >20 login per minute from the same IP address |\n| `limit_mu` | IP blocked for >100 failed login attempts or >50 signup attempts |\n\n## Signup attack\n\nWe identify signup attack threats within a single hour with the following event codes:\n\n| Event code | Event |\n| --- | --- |\n| `fs` | Failed signup |\n\n## MFA bypass\n\nWe identify MFA bypass threats within a single hour with the following event codes:\n\n| Event code | Event |\n| --- | --- |\n| `cs` | Sent code |\n| `cls` | Sent code/link |\n| `gd_send_pn` | Sent push notification |\n| `gd_send_sms` | Sent SMS |\n| `gd_auth_failed` | Failed OTP authentication |\n| `gd_auth_rejected` | Rejected OTP authentication |\n| `gd_otp_rate_limit_exceed` | Too many OTP authentication failures |\n| `gd_recovery_failed` | Failed recovery |\n| `gd_recovery_rate_limit_exceed` | Too many recovery failures |",
    "title": "Metrics",
    "description": "Learn about the tenant log events we use to identify patterns that are usually an indicator of known attack types.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr",
    "markdown": "# Auth0 General Data Protection Regulation Compliance\n\nOn 27 April 2016, the European Parliament and the European Council adopted legislation known as General Data Protection Regulation (GDPR), which became enforceable **25 May 2018**. This legislation replaces European Privacy Directive 95/46/EC.\n\nGDPR is intended to unify and strengthen data privacy for individuals located in the European Union (EU). GDPR also extends the applicability of EU data privacy legislation to non-EU companies who store or process data on EU residents and increases the fines that may be levied against companies who are responsible for preventing breaches of personal data or who violate GDPR requirements.\n\nTo learn more about GDPR, read the [Complete Guide to GDPR Compliance on gdpr.eu](https://gdpr.eu/).\n\n## Definitions\n\nHere are the definitions used for Auth0's GDPR documentation:\n\n| Term | Definition |\n| --- | --- |\n| Subject | An individual/natural person |\n| Data Controller | The entity that collects and processes data on subjects ([read GDPR for exact definition](https://gdpr-info.eu/art-4-gdpr/)) |\n| Data Processor | The entity that processes data on behalf of a data controller ([read GDPR for exact definition](https://gdpr-info.eu/art-4-gdpr/)) |\n| Personal Data | Data that can be used to identify (directly or indirectly) a subject, particularly via reference to an identifier (such as a name, identification number, location data, or online identifier), or to the physical, physiological, genetic, mental, economic, cultural, or social identity of that person |\n| Sensitive Personal Data | Personal data that reveals racial or ethnic origin, political opinions, religious or philosophical beliefs, or trade-union membership; genetic data or biometric data |\n| Auth0 Subprocessors | Third party systems to which Auth0 provides personal data |\n\n### Applicability\n\nGDPR applies to a wide scope of territory including non-EU based services/companies that possess data on EU residents.\n\n### Notifications and consent\n\nBefore you collect personal data from your end users, you must obtain their consent to do so. When requesting consent, your notifications must:\n\n*   Be clear and easy to understand\n    \n*   State the purpose of the data involved and how it will be processed\n    \n\nYou must also:\n\n*   Explicitly request consent\n    \n*   Make it as easy for your end-user to revoke their consent as it is to grant consent\n    \n\n### Rights of individuals\n\nYour end users, as individuals, have the right to:\n\n*   See the data the company has about them\n    \n*   Know how their data will be processed or used\n    \n*   Be forgotten (the individual may ask the controller of their data to erase the data in question, cease disseminating the data, or halt further data processing)\n    \n*   Portability (the individual can ask for their data in a standard, machine-readable format and can transmit their data to another data controller)\n    \n*   Not be subjected to automatic decision making (a process typically called **profiling**)\n    \n\n### Privacy by design and privacy by default\n\nAs the data controller, you must design your app to abide by both privacy by design and privacy by default principles.\n\n**Privacy by design** means that each new implementation that uses personal data must take the protection of such data into consideration.\n\n**Privacy by default** means that the strictest privacy settings automatically apply once the end user acquires a new product or service (that is, without any manual change required on the part of the user).\n\n### Requirements for data processors and controllers\n\nAs the data controller, you must:\n\n*   Do due diligence to ensure that your data processors provide adequate protection of provided data\n    \n\nAuth0, as the data processor, must:\n\n*   Comply with instructions provided by data controllers\n    \n*   Maintain adequate documentation\n    \n*   Implement adequate security\n    \n*   Conduct data protection impact assessments\n    \n*   Appoint a data protection officer or establish a privacy office\n    \n*   Comply with rules on international data transfers\n    \n*   Agree to and sign a written data processing agreement that meets GDPR requirements\n    \n\n### Enforcement\n\n*   GDPR mandates that data controllers release notifications regarding data breaches within 72 hours of the incident\n    \n*   Fines for non-compliance are much higher and are determined using a tiered system\n    \n*   Supervisory authorities in the European Union have greater investigative powers\n    \n*   Organizations controlling data must appoint a Data Protection Officer, while organizations processing data should have a Data Privacy Office\n    \n\n## Roles and responsibilities under GDPR\n\nAuth0 customers are **data controllers**. Auth0 is a **data processor**.\n\n### Personal data handled by Auth0\n\nAuth0 handles end-user data present in user profiles, including metadata.\n\n### Data controller (customer) responsibilities\n\nUltimately, you, as the data controller, are responsible for GDPR compliance, which mostly consists of operational procedures and documentation.\n\nMore specifically, the customer is responsible for:\n\n*   End-user notification, consent, and withdrawal of consent\n    \n*   Deciding what data they expose to Auth0\n    \n*   Deciding what connections (where end user data and passwords reside) to use\n    \n*   Signing up and, if necessary, creating new users\n    \n*   Ensuring their users meet the age requirements and obtaining the appropriate consent if necessary (such as parental consent for children)\n    \n*   Implementing the mechanisms necessary for their end users to retrieve, review, correct, or remove personal data\n    \n*   Deleting user data after receiving right-to-be-forgotten requests\n    \n*   Providing data in standardized formats\n    \n*   Responding to their end users' privacy-related requests (DSAR)\n    \n*   Responding to communications from the European Union Data Privacy Authorities\n    \n*   Data breach notifications sent to supervisory authorities and end users (Auth0 will assist the customer and provide the necessary information if we are involved)\n    \n*   Selecting an EU tenant when setting up their Auth0 tenants\n    \n\nThe customer is the party that's responsible for the security of their data. Auth0 has no knowledge of how the customer processes data, configures their applications, and so on.\n\n### Data processor (Auth0) responsibilities\n\nAuth0 is responsible for:\n\n*   Following the data processor's instructions as explicated in the Subscription Agreement (SA) and Data Processing Addendum (DPA) (for enterprise customers) or Terms of Service (for self-service customers)\n    \n*   Notifying the customer if it receives requests from the customer's end users exercising their GDPR rights as subjects for data access, erasure, and so on\n    \n*   Notifying the customer if it receives requests from EU Data Privacy Authorities (unless prohibited by law enforcement)\n    \n*   Notifying the customer if it becomes aware of a confirmed security breach\n    \n*   Notifying the customer if any of its sub-processors notify Auth0 about a confirmed data breach that impacts Auth0 customer data (unless prohibited by law enforcement)\n    \n*   Providing a privacy policy, terms of service, security statement, data protection agreement, and so on, to provide info on its policies and practices\n    \n*   Providing information about its data processing, so that customer has info it needs to process data lawfully\n    \n*   Defining its services and features, how data is processed, and the rights and obligations of customers\n    \n*   Providing the means to enable customers to retrieve, review, correct, or delete customer data via the Auth0 Dashboard and the Auth0 Management API\n    \n*   Providing a mechanism for customers to display consent terms and a consent agreement checkbox on the Lock widget. Customers can also design custom signup and login forms if more elaborate consent schemes are needed\n    \n\n## Auth0 data processing\n\n### Data Auth0 possesses\n\nAll of the data Auth0 has about an end user is located in the Auth0 user profile. The specific attributes contained in the user profile vary based on customer implementation and are based on a number of factors, such as connection type, user consent during the authentication flow, and whether you've augmented the user profiles with additional information.\n\n### When Auth0 data is stored\n\nThe Auth0 user profile information is stored in Auth0 when you use a database connection. If a user logs in using any other type of connection (including custom database connections), Auth0 stores information provided by the external identity provider for future queries.\n\n### How Auth0 uses the data it stores\n\nThe personal data stored in Auth0 is used only for the purposes of providing its services, namely authenticating users\n\n### What happens to data when an end user's account is deleted\n\nWhen an end user's account is deleted, their user profile, included metadata, is removed.\n\nHere is a list of GDPR regulations and how Auth0 can help you comply with them.\n\n### Conditions for consent\n\nAccording to Article 7 of GDPR, you must:\n\n*   Ask users to consent on the processing of their personal data in a clear and easily accessible form\n    \n*   Be able to show that the user has consented, and\n    \n*   Provide an easy way to withdraw consent at any time\n    \n\nYou can use Auth0 to ask your users for consent upon signup (using either Lock or a custom form) and save this information at the user profile. You can later update this information using the Management API. To learn more, read [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent).\n\n### Right to access, correct, and erase data\n\nAccording to Articles 15, 16, 17, and 19 of GDPR, users have the right to:\n\n*   Get a copy of their personal data you are processing\n    \n*   Ask for rectifications if they are inaccurate, and\n    \n*   Ask you to delete their personal data\n    \n\nWith Auth0, you can access, edit, and delete user information, either manually or using our API. To learn more, read [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data).\n\n### Data minimization\n\nAccording to Article 5 of GDPR:\n\n*   The personal data you collect must be limited to what is necessary for processing\n    \n*   Must be kept only as long as needed, and\n    \n*   Appropriate security must be ensured during data processing, including protection against unauthorised or unlawful processing and against accidental loss, destruction, or damage\n    \n\nThere are several Auth0 features than can help you achieve these goals, like account linking, user profile encryption, and more. To learn more, read [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization).\n\n### Data portability\n\nAccording to Article 20 of GDPR, users have the right to receive the personal data concerning them in a structured, commonly used and machine-readable format.\n\nYou can export user data, stored in the Auth0 user store, either manually or programmatically. Raw data from Auth0 can be exported in JSON format (which is machine-readable). To learn more, read [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability).\n\n### Protect and secure user data\n\nAccording to Article 32 of GDPR, you must implement appropriate measures to ensure a level of security, including (but not limited to):\n\n*   data encryption\n    \n*   ongoing confidentiality\n    \n*   data integrity, and\n    \n*   availability and resilience of processing systems and services\n    \n\nThere are several Auth0 features than can help you meet this requirement, like user profile encryption, brute-force protection, breached password detection, step-up authentication, and more. To learn more, read [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data).\n\n## Security advice\n\nAuth0 recommends the following practices to help ensure the security of your end users data and minimize the probability of a data breach:\n\n*   Protect client secrets and keys\n    \n*   Protect Management Dashboard credentials, and require multi-factor authentication for access to the Dashboard\n    \n*   Review the list of administrators for the Dashboard on a regular basis and remove outdated entries\n    \n*   Review the list of connections and applications associated with your Auth0 tenants and remove outdated entries\n    \n*   Ensure that Dashboard administrators use corporate credentials that can be easily revoked if necessary, not personal credentials such as a personal email account\n    \n*   Remove accounts for terminated employees promptly\n    \n*   Ensure that administrators use devices with mandatory screen locking\n    \n*   Provide regular training to all Dashboard administrators and developers on security and privacy best practices\n    \n\nMake sure that you monitor any log streaming solution you use to send log data to logging tools with reporting capability.\n\n## Learn more\n\n*   [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent)\n*   [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data)\n*   [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization)\n*   [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability)\n*   [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data)",
    "title": "Auth0 General Data Protection Regulation Compliance",
    "description": "Describes how Auth0 complies with the EU's General Data Protection Regulation (GDPR).",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/view-attack-protection-events",
    "markdown": "# View Attack Protection Log Events\n\nYour tenant logs contain useful data that you can use to build charts to look at the profile of the traffic going through your tenant. This is helpful when evaluating attack protection activity. For example, you can look for the following events to determine if you're under attack:\n\n*   Abnormal bursts in traffic to the login flow that result in errors (such as wrong username or password errors).\n    \n*   Abnormal bursts in traffic coming from IP locales that are not expected.\n    \n\nThese events tend to happen without much change to the rate of successful logins.\n\nYou can use your tenant log data `event` field to view tenant traffic data. We recommend building a daily histogram of failure events of the following types:\n\n| **Event Code** | **Event** |\n| --- | --- |\n| `f` | Failed login |\n| `fcoa` | Failed cross-origin authentication |\n| `feccft` | Failed exchange |\n| `fepft` | Failed exchange |\n| `fsa` | Failed silent authentication |\n| `fu` | Failed login (invalid email/username) |\n| `pla` | Pre-login assessment |\n| `sepft` | Success exchange |\n\nThese failure events depend on the flow you have set up with Auth0.\n\nThe following example shows a credential stuffing attack on 11/20, with a large surge of events of type `fu` which is a failed username (typical of a credential stuffing attack).\n\n![Example traffic failure trends graph](https://images.ctfassets.net/cdy7uua7fh8z/3fTdEeLJSvDT4JVs1Ebza2/a82830a32a08f6dc78c5c763cd2979e8/traffic-failure-trends.png)\n\n## Rate of errors in login flow\n\nLook for a surge or an abnormal number of errors for incorrect username or password. For example: Do you expect >30,000 errors per hour?\n\n| Event Code | Event |\n| --- | --- |\n| `s` | Login success |\n| `fu` | Failed login, invalid email/username |\n| `fp` | Failed login, incorrect password |\n\nHere's an example of what the data might look like.\n\n![Example graph of surge in login failures compared to normal traffic](https://images.ctfassets.net/cdy7uua7fh8z/5PQBhfw1B1yx8S2BnHSDTk/529d61308a4113a11868c7883163e101/login-flow-errors.png)\n\n## Rate of attack protection events\n\nLook for abnormally high traffic for attack protection events such as breached password detection or brute-force attacks for multiple accounts.\n\n| Event Code | Event |\n| --- | --- |\n| `limit_mu` | Blocked IP address |\n| `limit_wc` | Blocked account |\n| `pwd_leak` | Breached password during login |\n| `signup_pwd_leak` | Breached password during signup |\n\nHere's an example of what the data might look like.\n\n![Example graph of anomaly detection events](https://images.ctfassets.net/cdy7uua7fh8z/4hCSxSwOq5jmiwChEKnSuQ/ca58ac5ea43a3daf3b5d07af23cc687b/anomaly-detection-events.png)\n\n## Number of IPs producing errors and their locations\n\nLook for a high number of IPs from locales that do not make sense. For example: Do you expect traffic from 10,000 IPs from Russia every day? Observe `ip` address data in conjunction with `fu` event traffic to determine where the failure traffic is coming from.\n\nIP geolocation data isn't available in the tenant logs unless you're able to enrich it from another location. The IP locale is only available from Kibana where the logs are already enriched with the information.\n\nHere's an example of what the data might look like:\n\n![Example graph of failed access attempts by region](https://images.ctfassets.net/cdy7uua7fh8z/6fP5CSgHUpn66orFrhwh84/3b656bd3f2d4227d429ec0d4918bcbff/ips-location.png)\n\n## Learn more\n\n*   [Bot Detection](https://auth0.com/docs/secure/attack-protection/bot-detection)\n*   [Breached Password Detection](https://auth0.com/docs/secure/attack-protection/breached-password-detection)\n*   [Brute-Force Protection](https://auth0.com/docs/secure/attack-protection/brute-force-protection)\n*   [Logs](https://auth0.com/docs/deploy-monitor/logs)\n*   [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax)",
    "title": "View Attack Protection Log Events",
    "description": "Describes how to use tenant traffic log data to view attack protection events.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins",
    "markdown": "# Security Bulletins\n\nHere is a list of Auth0 security bulletins that address security vulnerabilities in Auth0 software. Each bulletin contains a description of the vulnerability, how to identify if you are affected, and what to do to fix it.\n\n| **Date** | **Bulletin number** | **Title** | **Affected software** |\n| --- | --- | --- | --- |\n| December 21, 2022 | [Auth0 Bulletin](https://auth0.com/docs/secure/security-guidance/security-bulletins/2022-12-21-jsonwebtoken) | Auth0 security bulletin for jsonwebtoken | [node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) |\n| December 12, 2022 | [CVE-2022-23505](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2022-23505) | Security Update for passport-wsfed-saml2 Library | [passpord-wsfed-saml2](https://github.com/auth0/passport-wsfed-saml2) |\n| March 30, 2022 | [CVE-2022-24794](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2022-24794) | Security Update for Express OpenID Connect Library | [express-openid-connect](https://github.com/auth0/express-openid-connect) |\n| December 16, 2021 | [CVE-2021-43812](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-43812) | Security Update for Next.js Auth0 Library <=1.6.1 | [nextjs-auth0](https://github.com/auth0/nextjs-auth0) |\n| December 08, 2021 | [CVE-2021-41246](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-41246) | Security Update for Express OpenID Connect >= 2.3.0, <= 2.5.1 | [express-openid-connect](https://github.com/auth0/express-openid-connect) |\n| June 23, 2021 | [CVE-2021-32702](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-32702) | Security Update for Auth0 Next.js <= 1.4.1 | [nextjs-auth0](https://github.com/auth0/nextjs-auth0) |\n| June 4, 2021 | [CVE-2021-32641](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-32641) | Security Update for Auth0 Lock <= 11.30.0 | [Auth0 Lock](https://github.com/auth0/lock) |\n| November 05, 2020 | [CVE-2020-15259](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15259) | Auth0 Security Bulletin for ad-ldap-connector versions <= 5.0.12 | [AD/LDAP Connector](https://github.com/auth0/ad-ldap-connector) |\n| October 21, 2020 | [CVE-2020-15240](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15240) | Security Update for omniauth-auth0 JWT Validation | [omniauth-auth0](https://github.com/auth0/omniauth-auth0) |\n| August 16, 2020 | [CVE-2020-15119](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15119) | Security Update for Auth0 Lock <= 11.25.1 | [Auth0 Lock](https://github.com/auth0/lock) |\n| July 28, 2020 | [CVE-2020-15125](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15125) | Auth0 Security Bulletin for node-auth0 <= 2.27.0 | [node-auth0](https://github.com/auth0/node-auth0) |\n| June 30, 2020 | [CVE-2020-15084](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15084) | Auth0 Security Bulletin for express-jwt versions < 6.0.0 | [express-jwt](https://github.com/auth0/express-jwt) |\n| April 09, 2020 | [CVE-2020-5263](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-5263) | Auth0 Security Bulletin for auth0.js versions <= 9.13.1 | Auth0.js |\n| March 31, 2020 | [Auth0 Bulletin](https://auth0.com/docs/secure/security-guidance/security-bulletins/2020-03-31-wpauth0) | Auth0 Security Bulletin for WordPress Plugin for Auth0 versions < 4.0.0 | WordPress Plugin for Auth0 |\n| January 31, 2020 | [CVE-2019-20173](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-20173) | Auth0 Security Bulletin for WordPress Plugin for Auth0 versions 3.11.0, 3.11.1 and 3.11.2 | WordPress Plugin for Auth0 |\n| January 30, 2020 | [CVE-2019-20174](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-20174) | Auth0 Security Bulletin for Auth0 Lock < 11.21.0 | Auth0 Lock |\n| October 04, 2019 | [CVE-2019-16929](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-16929) | Auth0 Security Bulletin for auth0.net between versions 5.8.0 and 6.5.3 inclusive | auth0.net |\n| September 05, 2019 | [Auth0 bulletin](https://auth0.com/docs/secure/security-guidance/security-bulletins/2019-09-05-scopes) | Auth0 Security Bulletin for assigning scopes based on email address | Custom code within Auth0 rules |\n| July 23, 2019 | [CVE-2019-13483](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-13483) | Security Bulletin for Passport-SharePoint < 0.4.0 | Passport-SharePoint |\n| February 15, 2019 | [CVE-2019-7644](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-7644) | Security Bulletin for Auth0-WCF-Service-JWT < 1.0.4 | Auth0-WCF-Service-JWT |\n| January 10, 2019 | [Auth0 bulletin](https://auth0.com/docs/secure/security-guidance/security-bulletins/2019-01-10-rules) | Auth0 Security Bulletin for Vulnerable Patterns in Custom Rule Code | Custom code within Auth0 Rules |\n| August 6, 2018 | [CVE-2018-15121](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-15121) | Security vulnerability in deprecated Auth0 middleware for ASP.NET | auth0-aspnet, auth0-aspnet-owin |\n| June 5, 2018 | [CVE-2018-11537](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-11537) | Security update for angular-jwt allowlist bypass | angular-jwt |\n| April 4, 2018 | [CVE-2018-6874](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-6874) | Security vulnerability for Auth0 authentication service | Auth0 Authentication Service |\n| April 4, 2018 | [CVE 2018-6873](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-6873) | Security vulnerability for Auth0 authentication service | Auth0 Authentication Service |\n| February 26, 2018 | [CVE 2018-7307](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-7307) | Security vulnerability for auth0.js < 9.3 | Auth0.js |\n| December 22, 2017 | [CVE 2017-16897](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2017-16897) | Security update for passport-wsfed-saml2 Passport strategy library | passport-wsfed-saml2 Passport strategy library |\n| December 4, 2017 | [CVE 2017-17068](https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2017-17068) | Security update for auth0.js popup callback vulnerability | Auth0.js |",
    "title": "Security Bulletins",
    "description": "Lists Auth0 security bulletins.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/data-security",
    "markdown": "# Data Security\n\nWas this article helpful?",
    "title": "Data Security",
    "description": "Learn about data security related to token and user data storage, Allow Lists and Deny Lists.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/prevent-threats",
    "markdown": "# Prevent Common Cybersecurity Threats\n\nSome common cybersecurity threats include:\n\n*   Bucket brigade attacks\n    \n*   Replay attacks\n    \n*   Cross-site Request Forgery (CSRF or XSRF) attacks\n    \n*   Brute-force attacks\n    \n*   Suspicious IP throttling\n    \n*   Credential stuffing attacks\n    \n*   List validation attacks\n    \n\nAuth0 has [attack protection features](https://auth0.com/docs/secure/attack-protection) that can shield against certain types of attacks.\n\n## Bucket brigade attacks\n\nOne type of threat is a bucket brigade attack, sometimes called a \"man-in-the-middle\" attack, where the attacker gets between two parties. Each party thinks they are interacting over a private connection, but the interaction is actually being controlled by the third-party attacker. For this type of attack to succeed the attacker must create mutual authentication between both parties.\n\nUsually, bucket brigade attacks involve the attacker using a WiFi router to intercept a user's communication. The user connects to the attacker's router then visits a website and logs in with their confidential credentials. The attacker saves that user's login credentials for which they can then use to impersonate the user.\n\nSome bucket brigade attacks can also modify the data transmitted between the application and the server. Attacks can occur from new PC trial and preinstalled software, software update tools, and other software vulnerabilities. In a worst-case scenario, this could result in remote code execution, backdooring the system, installing malware, and so on. This could also lead to the compromise of other network assets.\n\nTo help defend against this type of attack it is important to use strong encryption and authentication between the application and the server. Using encryption the server authenticates the application's request by presenting a digital certificate, and only then can the connection be established. For example, HTTPS uses the secure sockets layer (SSL) capability of the browser to mask web traffic. To decrypt HTTPS, an attacker would have to obtain the keys used to encrypt the network traffic.\n\nWith the configuration of TLS on your servers, we suggest using the [Mozilla OpSec recommendations](https://wiki.mozilla.org/Security/Server_Side_TLS) which use TLSv1.2. Mozilla also provides an [SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/), to use this first choose which platform your server is running and then choose the most modern configuration based on what your application base can support. The more modern configurations provide stronger ciphers to help prevent attacks.\n\n## Replay attacks\n\nReplay (or playback) attacks allow attackers to:\n\n*   Gain access to a network and information which would not have been easily accessible\n    \n*   Complete a duplicate transaction\n    \n\nThese are attacks on the security protocol using replays of data transmission from a different sender into the intended receiving system. The attacks fool the participants into believing they have successfully completed the data transmission.\n\nReplay attacks can be avoided by using session tokens. However, if these credentials are stolen from local storage (like during an XSS attack), there are ways to prevent someone from holding on to a valid token forever:\n\n*   Set a short expiration time for tokens\n    \n*   Provide a way to add tokens to the DenyList that have been used (and possibly even the users)\n    \n*   Use one-time passwords\n    \n\nThe [JWT](https://auth0.com/docs/secure/tokens/json-web-tokens) spec provides the `jti` field as a way to prevent replay attacks. Though Auth0 tokens currently don't return the `jti`, you can add tokens to the DenyList using the `jti` to prevent a token being used more than a specified number of times. In this way, you are implementing something similar to a nonce (think of the token's signature as the nonce). If a token gets stolen or it gets used more than the specified number of times, it should be added to the DenyList. This prevents a valid token from being used maliciously. Once the token expires, the attacker will no longer be able to impersonate the user.\n\nYou can also avoid replay attacks by using one-time passwords. With Auth0, you can use Passwordless Authentication, which relies on single-use codes and email links instead of traditional passwords. Auth0 also provides multi-factor authentication (MFA) which uses one-time passwords as a second-factor authentication which can be sent via push notifications and texts.\n\n## Cross-site Request Forgery\n\nA Cross-site Request Forgery (CSRF or XSRF) attack occurs when a malicious program causes a user's web browser to perform an unwanted action on a trusted site on which the user is currently authenticated. This type of attack specifically targets state-changing requests to initiate a type of action instead of getting user data because the attacker has no way to see the response of the forged request.\n\nOne way to verify the requests that are being sent is to utilize the OAuth 2.0 protocol [state parameter](https://auth0.com/docs/secure/attack-protection/state-parameters) to authenticate the response.\n\n## Learn more\n\n*   [Tokens](https://auth0.com/docs/secure/tokens)\n*   [Attack Protection](https://auth0.com/docs/secure/attack-protection)\n*   [General Security Tips](https://auth0.com/docs/secure/security-guidance/tips)",
    "title": "Prevent Common Cybersecurity Threats",
    "description": "Describes different types of cyberattacks and what steps can be taken to prevent them.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/how-to-run-production-checks",
    "markdown": "# Run Production Readiness Checks\n\nReview production check results for your tenant before you deploy your production environment.\n\n1.  Go to the Auth0 Management Dashboard and log in to your account.\n    \n2.  From the dropdown, select the tenant for which you want to run the Production Checks\n    \n3.  From the same dropdown, click **Run Readiness Check** to launch the interface\n    \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/nHS8TrcMAsgUUWOv5gcNO/66d641136222fe6634b1d53f0a455ffd/Screenshot_2023-06-02_at_10.53.40_AM.jpeg)![Auth0 Support pre-deployment production checks](https://images.ctfassets.net/cdy7uua7fh8z/4EjetzpVocGQKy6HYVTHMw/b6eeefdaa52fac656d2dc7ea47ec466d/FullScreenReadinessCheck.png)\n\nOptional:\n\n1.  Select one or more [Applications](https://auth0.com/docs/get-started/applications) associated with this tenant for which you want checks to run by clicking **Filters.**\n    \n2.  Click **Apply**.\n    \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/n0YbLOV9gxaEFC7c6svFa/8e4b64839ad24edf8bcf9bbf05940a54/FiltersReadinessCheck.png)\n\nWhen the test is complete, your screen will automatically refresh to display your check results.\n\n## Production check results\n\nThere are three categories of check result fixes:\n\n*   [Critical fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-required-fixes)\n    \n*   [Non-critical fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-recommended-fixes)\n    \n*   [Best practices](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-checks-best-practices)\n    \n\nThe following are possible results for your check:\n\n*   Passed\n    \n*   Failed\n    \n*   Best practices\n    \n\nUnder each set of results, Auth0 tells you how many checks your application passed, as well as how many checks require review.\n\nIf your application **failed** for one or more checks, you'll see:\n\n*   The name of the check\n    \n*   Information on what the check is looking for\n    \n*   A **Configure** link to the appropriate area where you can make the required fixes so that your Application passes the check\n    \n*   Hyperlink to corresponding documentation\n    \n\nAll of the checks that your application **passed** are grouped together in the passed object of the results set. You can view the name of and information about the check, as well as review the associated documentation and use the hyperlink to go to the corresponding configuration area where you can make changes (if desired).\n\n## Learn more\n\n*   [Production Readiness Checks: Critical Fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-required-fixes)\n*   [Production Readiness Checks: Non-Critical Fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-recommended-fixes)\n*   [Production Readiness Checks: Best Practices](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-checks-best-practices)\n*   [Get Management API Access Tokens for Production](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production)",
    "title": "Run Production Readiness Checks",
    "description": "Learn how to run the Auth0 Production Checks to ensure that your Applications are production-ready.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-required-fixes",
    "markdown": "# Production Readiness Checks: Critical Fixes\n\nAll Actions are running a [recommended version of NodeJS](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations/migrate-actions-nodejs-16-to-nodejs-18) Set all [Actions](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations/migrate-actions-nodejs-16-to-nodejs-18) to a recommended version of NodeJS to take advantage of security patches and new features. [Allow ID Tokens for Management API v2 Authentication](https://auth0.com/docs/migrations/guides/calling-api-with-idtokens) is disabled The capabilities for using ID Tokens to authorize some of the Users and Device Credentials endpoints of the Management API are being deprecated. After completing migration to Access Tokens, make sure the [Allow ID Tokens for Management API v2 Authentication](https://manage.auth0.com/#/tenant/advanced) toggle is turned off. If you can't see this setting, then your tenant was created after this feature was deprecated, so it is already disabled by default. allowLegacyRoGrantTypes The legacy [oauth/ro endpoint](https://auth0.com/docs/troubleshoot/product-lifecycle/past-migrations/migration-oauthro-oauthtoken) in tenant migration settings is being deprecated. After updating your applications to use supported endpoints, make sure you turn this endpoint off. allowOtherLegacyGrantTypes The legacy [oauth/access\\_token endpoint](https://auth0.com/docs/api/authentication#social-with-provider-s-access-token) in tenant migration settings is being depricated. After updating your applications to use supported endpoints, make sure you turn this endpoint off. allowLegacyTokenInfoEndpoint The legacy [tokeninfo endpoint](https://auth0.com/docs/troubleshoot/product-lifecycle/past-migrations#tokeninfo-endpoint-validation) in tenant migration settings is being depricated. After updating your applications to use supported endpoints, make sure you turn this endpoint off. allowLegacyDelegationGrantTypes The legacy [delegation endpoint](https://auth0.com/docs/authenticate/login/oidc-conformant-authentication/oidc-adoption-delegation) in tenant migration settings is being depricated. After updating your applications to use supported endpoints, make sure you turn this endpoint off. [Allowed Callback URLs](https://auth0.com/docs/protocols/oauth2/redirect-users) should not include Localhost Validates the [Application Allowed Callback URLs](https://manage.auth0.com/#/applications) do not point to `localhost`, `127.0.0.1`, and so on. [Allowed Origins (CORS)](https://auth0.com/docs/cross-origin-authentication) should not be Localhost Validates that the [Location URL](https://manage.auth0.com/#/applications) for the page does not point to `localhost`. [Allowed Web Origins](https://auth0.com/docs/dashboard/reference/settings-application) should not include `localhost` Validates that the [Allowed Web Origins URLs](https://manage.auth0.com/#/applications) do not point to `localhost`. [Email Provider](https://auth0.com/docs/email/providers) should be configured Verifies that the [custom email provider](https://manage.auth0.com/#/emails/provider) has been configured. Hooks are being deprecated and must be [migrated to Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions) Hooks are being deprecated. We strongly recommend that you begin using [Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions) and start the migration process. Existing Hooks will stay active until Nov 18, 2024. [Multi-Factor Auth](https://auth0.com/docs/mfa/guides/configure-sms) should be configured (Dependency: MFA is configured) If you are using MFA with the [Phone Message factor](https://manage.auth0.com/#/mfa), configure it with a Twilio or custom delivery provider to avoid rate limits of the default delivery provider. [Legacy User Profile](https://auth0.com/docs/guides/migration-legacy-flows#user-profiles) should be disabled The legacy authentication flows that allow ID Tokens and the `/userinfo` endpoint to include the complete user profile are being deprecated. After completing the migration to the new OIDC-conformant APIs, make sure the [Legacy User Profile](https://manage.auth0.com/#/account/advanced) toggle is turned off. Rules are being deprecated and must be [migrated to Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions) Rules are being deprecated. We strongly recommend that you begin using [Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions) and start the migration process. Existing Rules will stay active until Nov 18, 2024. [Social Connections](https://auth0.com/docs/connections/social/devkeys) should not use Auth0 Developer Keys Verifies that [Social Connections](https://manage.auth0.com/#/connections/social) are not using the default Auth0 developer keys. Support Email should be configured Ensures the [Support Email](https://manage.auth0.com/#/account) is configured in Tenant Settings. Support URL is configured Ensures the [Support URL](https://manage.auth0.com/#/account) is configured in Tenant Settings. Tenant Environment Tag should be configured Ensures the [tenant environment tag](https://support.auth0.com/tenants/public) is set appropriately to Production, Staging, or Development. Changes to this tag affect your tenant's rate limit. Tenant is set to use a recommended default [NodeJS version](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations/migrate-actions-nodejs-16-to-nodejs-18) Update your tenant to a [recommended version of NodeJS](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations/migrate-actions-nodejs-16-to-nodejs-18) to take advantage of security patches and new features. Tenant Login URI Ensures that [Tenant Login URI](https://manage.auth0.com/#/tenant/advanced) is configured in Tenant Settings. Use Custom Domain in Branded Email Templates Ensure your emails templates use a [custom domain](https://auth0.com/docs/customize/custom-domains/configure-features-to-use-custom-domains#use-custom-domains-in-emails). We strongly recommend customizing all user-facing emails to use your custom domain and company branding.",
    "title": "Production Readiness Checks: Critical Fixes",
    "description": "Fixes you must make to your Auth0 Application prior to production deployment",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/incident-response-using-logs",
    "markdown": "# Incident Response: Using Logs\n\nReviewing logs to assess the impact of an attack is a crucial step in your incident response plan. On this page you'll see how to access logs on the Auth0 Dashboard and some examples of log search queries to find indicators of an attack and review account activity.\n\n## Check Auth0 logs\n\n1.  [Login to the Auth0 Dashboard](https://manage.auth0.com/#)\n    \n2.  The Logs page is located under **Monitoring** in the menu on the left.\n    \n3.  On the Logs page, you’ll see a search bar along with a filter selection and date picker.\n    \n\n![Dashboard Monitoring Logs](https://images.ctfassets.net/cdy7uua7fh8z/2l9LfKEjrprVmHfWt80VX0/bb1b8d9927d5c83d0ba094907abe5fb6/dashboard-monitoring-logs.png)\n\nSelect a log event from the list to see a **Summary** of the event along with further **Details** including the raw JSON.\n\n### Log structure\n\nEach log event has the following fields:\n\n| Field | Description |\n| --- | --- |\n| `date` | Timestamp when this event occurred. |\n| `log_id` | The id of the log event |\n| `type` | The log event type |\n| `description` | The description of the event. |\n| `connection` | The connection name related to the event. |\n| `connection_id` | The connection id related to the event. |\n| `client_id` | The client id related to the event |\n| `client_name` | The name of the client related to the event. |\n| `ip` | The IP address from where the request that caused the log event originated. |\n| `user_agent` | The user agent that is related to the event. |\n| `details` | An object containing further information for this log event. |\n| `user_id` | The user id related to the event. |\n| `user_name` | The user name related to the event. |\n| `strategy` | The connection strategy related to the event. |\n| `strategy_type` | The connection strategy type related to the event. |\n\n### Example of failed login log event\n\nHere is an example log event for a failed login due to an incorrect password:\n\n```\n{\n  \"date\": \"2020-10-27T19:39:54.699Z\",\n  \"type\": \"fp\",\n  \"description\": \"Wrong email or password.\",\n  \"connection\": \"Username-Password-Authentication\",\n  \"connection_id\": \"con_ABC123\",\n  \"client_id\": \"ABCDEFG123456789\",\n  \"client_name\": \"All Applications\",\n  \"ip\": \"99.xxx.xxx.xxx\",\n  \"user_agent\": \"Chrome 86.0.4240 / Mac OS X 10.15.6\",\n  \"details\": {\n    \"error\": {\n      \"message\": \"Wrong email or password.\"\n    }\n  },\n  \"user_id\": \"auth0|ABC123\",\n  \"user_name\": \"test@test.com\",\n  \"strategy\": \"auth0\",\n  \"strategy_type\": \"database\",\n  \"log_id\": \"123456789\",\n  \"_id\": \"123456789\",\n  \"isMobile\": false\n}\n```\n\n## Indicators of an attack\n\nIdentifying an attack early on may be difficult, but here are some things to look for in your logs along with example search queries:\n\n*   High numbers of failed logins with invalid usernames or login attempts for non-existent users.\n    \n    *   `type:\"fu\"`\n        \n    *   `description:\"missing username parameter\"`\n        \n    *   `description:\"Wrong email or password\"`\n        \n*   Large number of accounts reaching the failed login attempts limit.\n    \n    *   `type:\"limit_wc\"`\n        \n*   A high number of login attempts using a leaked password.\n    \n    *   `type:\"pwd_leak\"`\n        \n\nDuring your investigation take note of IP addresses, applications being targeted, and connections or identity providers used.\n\n## Identify compromised user accounts\n\nTo identify user accounts that may have been compromised you can search for:\n\n*   Successful login events from a suspicious IP address:\n    \n    *   `type:\"s\" AND ip:\"99.xxx.xxx.xxx\"`\n        \n\n## Check compromised user account activity\n\nAfter identifying a compromised user account you'll want to check the account's activity:\n\n*   Search for other log events with the same `user_id`: `user_id:\"auth0|ABC123\"`\n    \n*   Check the `client_name` or `client_id` log event fields to see which applications were accessed. Make a note of when access occurred.\n    \n*   Check for administration access or Auth0 configuration changes\n    \n*   Search for recent Management API calls: `type:\"sapi\"`\n    \n\n## Delete or block users from the dashboard\n\n1.  Go to [Dashboard > User Management > Users](https://manage.auth0.com/#/users).\n    \n2.  Search for the user to delete or block.\n    \n3.  Click the \"**...**\" button on the far right of the user.\n    \n4.  Select **Block** or **Delete** and confirm.",
    "title": "Incident Response: Using Logs",
    "description": "How to use Auth0 logs as part of your incident response plan.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/use-as-a-cli",
    "markdown": "# Use as a CLI\n\nThe Deploy CLI can be used as a standalone command line utility. Doing so provides a simple way to manage your Auth0 tenant configuration in CI/CD workflows.\n\nFor a comprehensive list of configuration settings, please read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n## export command\n\nFetching configurations from Auth0 tenant to the local machine.\n\n### \\--output\\_folder, -o\n\nPath. Specifies the target directory for configuration files to be written to.\n\n### \\--config\\_file, -c\n\nPath. Specifies the user-defined configuration file (`config.json`). To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n### \\--format, -f\n\nOptions: `yaml` or `directory`. Determines the file format of the exported resource configuration files. To learn more, read [Available Resource Configuration Formats](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/available-resource-configuration-formats).\n\n### \\--export\\_ids, -e\n\nBoolean. When enabled, will export the identifier fields for each resource. Default: `false`.\n\n### \\--env\n\nBoolean. Indicates if the tool should ingest environment variables or not. Default: `true`.\n\n### \\--debug\n\nBoolean. Enables more verbose error logging; useful during troubleshooting. Default: `false`.\n\n### \\--proxy\\_url, -p\n\nA url for proxying requests. Only set this if you are behind a proxy.\n\n### Examples\n\n#### Fetching Auth0 tenant configuration in the YAML format\n\n`a0deploy export -c=config.json --format=yaml --output_folder=local`\n\n#### Fetching Auth0 tenant configuration in directory (JSON) format\n\n`a0deploy export -c=config.json --format=directory --output_folder=local`\n\n#### Fetching Auth0 tenant configurations with IDs of all assets\n\n`a0deploy export -c=config.json --format=yaml --output_folder=local --export_ids=true`\n\n## import command\n\nApplying configurations from local machine to Auth0 tenant.\n\n### \\--input\\_file, -i\n\nPath. Specifies the location of the resource configuration files. For YAML formats, this will point to the `tenant.yaml` file, for directory formats, this will point to the resource configuration directory.\n\n### \\--config\\_file, -c\n\nPath. Specifies the user-defined configuration file (`config.json`). To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n### \\--env\n\nBoolean. Indicates if the tool should ingest environment variables or not. Default: `true`.\n\n### \\--proxy\\_url, -p\n\nA url for proxying requests. Only set this if you are behind a proxy.\n\n### \\--debug\n\nBoolean. Enables more verbose error logging; useful during troubleshooting. Default: `false`.\n\n### Examples\n\n#### Deploying configuration for YAML formats\n\n`a0deploy import -c=config.json --input_file=local/tenant.yaml`\n\n#### Deploying configuration for directory format\n\n`a0deploy import -c=config.json --input_file=local`\n\n#### Deploying configuration with environment variables ignored\n\n`a0deploy import -c=config.json --input_file=local/tenant.yaml --env=false`",
    "title": "Use as a CLI",
    "description": "Learn how to the use the Auth0 Deploy CLI as a standalone command-line utility.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-checks-best-practices",
    "markdown": "# Production Readiness Checks: Best Practices\n\nThe following checks cannot be automated, so we recommend manually checking these areas prior to deployment to Production.\n\n| Check | Description |\n| --- | --- |\n| [Anomaly Detection](https://auth0.com/docs/anomaly-detection) | Review your account's [Anomaly Detection capability and configuration](https://manage.auth0.com/#/anomaly). |\n| Externalize [Configuration Parameters](https://auth0.com/docs/connections/database/mysql#4-add-configuration-parameters) | [Externalize, instead of hard code, all configuration parameters](https://manage.auth0.com/#/connections/database), such as credentials, connection strings, API keys, and so on, when developing Rules, Hooks, or custom database connections. |\n| [Restrict Delegation](https://auth0.com/docs/dashboard/reference/settings-application#advanced-settings) | If not using Delegation, set the Allowed Apps and APIs field of your Application Settings to the current Client ID. |\n| Single Sign-on (SSO) Timeout Values | Review the default [SSO cookie timeout values](https://manage.auth0.com/#/account/advanced) and ensure they align with your requirements. |\n| Tenants and Administrators | Review all tenants and tenant administrators to ensure they are correct. Decommission tenants that are no longer in use. Ensure that tenant administrators are limited to the necessary users. |\n| Verify Client IDs in App Code | Ensure that the Client IDs in your application code align with their Auth0 Application configurations. |\n| Allowlist Auth0 Public IPs | Allowlist Auth0 IPs if you're connecting to internal services or services behind a firewall when using Rules, Hooks, or custom databases. You can get a list of IP addresses in the tool tip when configuring any of these items. |\n\n## Learn more\n\n*   [Production Readiness Checks: Critical Fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-required-fixes)\n*   [Production Readiness Checks: Non-Critical Fixes](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-recommended-fixes)\n*   [Get Management API Access Tokens for Production](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production)",
    "title": "Production Readiness Checks: Best Practices",
    "description": "Checks to ensure that your Applications comply with Auth0 best practices",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/pre-launch-tips",
    "markdown": "# Pre-Launch Tips\n\nHere is a list of tips our customers have found most useful when first getting started with Auth0 services:\n\n*   Check the URLs in your allowed callbacks, CORS and allowed redirect URLs for Logout to make sure they are correct, complete, and do not involve use of `file:///` or `localhost`. Minimize the use of wildcards and consider carefully the security ramifications of wildcards.\n    \n*   Separate production use from ongoing development work by [using separate tenants for prod, test and dev.](https://auth0.com/docs/get-started/auth0-overview/create-tenants/set-up-multiple-environments)\n    \n*   Configure your network correctly to allow traffic to and from our sets of public APIs (prod envs might have a different configuration than dev/staging).\n    \n*   Check the expiration date of certificates you have added to your configuration to make sure certificates uploaded during development cycles won’t expire during or shortly after launch.\n    \n*   Make sure any remote IDPs are running NTP so that the time will be properly synced.\n    \n*   The number of days of log data available varies by plan up to a max of 30 days. If you need log data for a longer retention period, you should configure one of our [log streaming solutions](https://marketplace.auth0.com/features/log-streaming). This will enable you to keep log data for longer periods. Be sure to set this up before you go live so you are sure to have log data when you need it.\n    \n*   Make sure your usage of our APIs remains within [allowed limits](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy) and you have written your code to dynamically adjust to rate limit information returned in the header and to handle errors. If you anticipate rate limits being a problem for your application, discuss with us up-front to check if it would be possible to momentarily raise them until the traffic returns to normal. You should consider using a cache of user data in order to not have to query an API endpoint more than necessary.\n    \n*   If using [social connections](https://auth0.com/docs/identityproviders), make sure to obtain your own credentials from the provider and add them to the configuration of the social connection.\n    \n*   If using [custom DB connections](https://auth0.com/docs/connections/database/mysql), make sure all custom DB scripts are implemented and return a consistent user-profile with a unique user ID.\n    \n*   For sending emails, first make sure to [set up a custom email provider.](https://auth0.com/docs/customize/email/smtp-email-providers)\n    \n*   If you use our CDN for the Lock widget, make sure to pin to a specific version.\n    \n*   Make sure **external** components called from Actions, Rules, Hooks, and custom database connection scripts can handle the expected load.\n    \n*   Adequately protect any client secret values.\n    \n*   Check your [grant types](https://auth0.com/docs/get-started/applications/application-grant-types) for your applications. Make sure you have the right ones enabled and more importantly, disable any grant types that aren't needed.\n    \n*   If you make use of user\\_metadata, confirm that this is data that users should be able to change on their own (e.g., not “payment status”).\n    \n*   Review your [Attack Protection settings](https://manage.auth0.com/#/security/attack-protection) and read [Attack Protection](https://auth0.com/docs/secure/attack-protection) to understand how to unblock users that have been blocked.\n    \n*   Review your [Tenant Settings Admin section](https://manage.auth0.com/#/tenant/admins) to make sure that only appropriate admins have access to the Auth0 Dashboard. See [Manage Dashboard Access](https://auth0.com/docs/get-started/manage-dashboard-access) for more information.\n    \n*   Make sure you have tested all core use cases for your application on all devices that might be used by the end-user population for your application. Be sure to test login, single sign-on (if supported), and log, as well as what happens if a user runs your application in multiple browser tabs.\n    \n*   Review your [list of rules](https://manage.auth0.com/#/rules) and make sure only the appropriate rules are turned on.\n    \n*   Review your rule code, any custom DB scripts, and any custom code in the login page to ensure that every call has adequate error trapping and handling. Also, review to make sure that return/callback statements are called correctly.\n    \n*   Configure your application name, support URL, and support email in the [Tenant Settings General](https://manage.auth0.com/#/tenant) section so when an error occurs your end users will be directed to an appropriate page.\n    \n*   Make sure that your application is [dynamically obtaining a management API token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).\n    \n*   Remove any `console.log` statements from your rules or custom DB scripts. Especially those that might leak user identifiable information such as email, username or password.\n    \n*   Do not use plain text secrets in rules or db-connections. They should be added in the configuration part of the interface. The configuration is encrypted and provided just in time. Do not log the configuration object.",
    "title": "Pre-Launch Tips",
    "description": "A list of helpful tips for when getting started with Auth0 services based on feedback and experience from others",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/predeployment-tests",
    "markdown": "# Run Pre-Deployment Tests\n\nYou should run unit and integration tests before deploying Auth0 on a live application or service. Performing tests against Auth0 APIs may lead to your account being [rate limited](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy), so we recommend creating mock Auth0 APIs during testing. Depending on your development environment, your test tools may also provide mock API functionality. There are also numerous API mocking tools available, such as [MockServer](http://www.mock-server.com/) or [JSON Server](https://github.com/typicode/json-server), you can use to quickly create fake APIs for testing.\n\nIf you have an Enterprise subscription, you can request [load testing](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) against Auth0.\n\n## Performance tests\n\nIf you encounter issues while conducting performance tests, use the following methods to troubleshoot.\n\n### Auth0 Dashboard\n\nThe [Monitoring > Logs](https://manage.auth0.com/#/logs) section of the Dashboard stores data on:\n\n*   Actions taken in the Dashboard by administrators\n    \n*   Authentications made by your users\n    \n\nThere are also [extensions](https://auth0.com/docs/customize/extensions) that you can use for logging purposes, including exporting logs to third-party tools and gathering information on the use of custom code in your account.\n\n### Third-party test tools\n\nThere are a number of third-party test tools that you can use for performance testing against RESTful APIs. Here are some options you might consider (note that Auth0 does not endorse any particular product or tool):\n\n*   [Apache JMeter](http://jmeter.apache.org/)\n    \n*   [Artillery](https://artillery.io/)\n    \n*   [Micro Focus LoadRunner](https://www.radview.com/)\n    \n*   [Loader](https://loader.io/)\n    \n*   [RadView Webload](https://www.radview.com/)\n    \n*   [SmartBear LoadUI](https://smartbear.com/)\n    \n*   [Vegeta](https://github.com/tsenart/vegeta)\n    \n*   [Wrk](https://github.com/wg/wrk)\n    \n\nThese tools provide activity logs that help you identify anything that is concerning. If you need assistance with deciphering your log or identifying the potential issue, please contact Support.\n\n### HTTP archive files\n\nIf you discover an issue that you can reproduce, we recommend that you [create an HTTP archive (HAR) file](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files) and send it to our Support team for additional assistance.\n\n## Learn more\n\n*   [Professional Services: Implement](https://auth0.com/docs/get-started/professional-services/implement)\n*   [Rules Testing Best Practices](https://auth0.com/docs/rules-best-practices/rules-testing-best-practices)\n*   [Set Up AD/LDAP Connector Test Environment](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-test-environment)\n*   [Generate and Analyze HAR Files](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files)",
    "title": "Run Pre-Deployment Tests",
    "description": "Learn how to test your Auth0 implementation prior to deployment to production environments.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-check-recommended-fixes",
    "markdown": "# Production Readiness Checks: Non-Critical Fixes\n\nThe following checks see if you've completed all recommendations (which are optional) for successful deployment to Production.",
    "title": "Production Readiness Checks: Non-Critical Fixes",
    "description": "Recommendations on how you can improve your Auth0 Application prior to production deployment",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/use-as-a-node-module",
    "markdown": "# Use as a Node Module\n\nThe Deploy CLI can not only be used as a standalone CLI, but as a node module. Doing so allows you to manage Auth0 resources within expressive node scripts.\n\nFor a comprehensive list of configuration settings, please read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n## dump function\n\nFetches configurations from Auth0 tenant to the local machine.\n\n### Argument parameters\n\n#### format\n\nOptions: `yaml` or `directory`. Determines the file format of the exported resource configuration files. To learn more, read [Available Resource Configuration Formats](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/available-resource-configuration-formats).\n\n#### output\\_folder\n\nPath. Specifies the target directory for configuration files to be written to.\n\n#### config\n\nObject. Configures behavior of utility. To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n#### config\\_file\n\nPath. Specifies the user-defined configuration file (`config.json`). To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n#### export\\_ids\n\nBoolean. When enabled, will export the identifier fields for each resource. Default: `false`.\n\n#### env\n\nBoolean. Indicates if the tool should ingest environment variables or not. Default: `false`.\n\n#### proxy\\_url\n\nA url for proxying requests. Only set this if you are behind a proxy.\n\n### Example\n\n```\nimport { dump } from 'auth0-deploy-cli';\n\ndump({\n  output_folder: './local',\n  format: 'yaml',\n  config: {\n    AUTH0_DOMAIN: '<YOUR_AUTH0_TENANT_DOMAIN>',\n    AUTH0_CLIENT_ID: '<YOUR_AUTH0_CLIENT_ID>',\n    AUTH0_CLIENT_SECRET: '<YOUR_AUTH0_CLIENT_SECRET>',\n  },\n})\n  .then(() => {\n    console.log('Auth0 configuration export successful');\n  })\n  .catch((err) => {\n    console.log('Error during Auth0 configuration export:', err);\n  });\n```\n\n## deploy function\n\nApplies configurations from local machine to Auth0 tenant.\n\n### Argument parameters\n\n#### input\\_file\n\nPath. Specifies the location of the resource configuration files. For YAML formats, this will point to the `tenant.yaml` file. For directory formats, this will point to the resource configuration directory.\n\n#### config\n\nObject. Configures behavior of utility. To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n#### config\\_file\n\nPath. Specifies the user-defined configuration file (`config.json`). To learn more, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\n#### export\\_ids\n\nBoolean. When enabled, will export the identifier fields for each resource. Default: `false`.\n\n#### env\n\nBoolean. Indicates if the tool should ingest environment variables or not. Default: `false`.\n\n#### proxy\\_url\n\nA url for proxying requests. Only set this if you are behind a proxy.\n\n### Example\n\n```\nimport { deploy } from 'auth0-deploy-cli';\n\ndeploy({\n  input_file: './local/tenant.yaml',\n  config: {\n    AUTH0_DOMAIN: '<YOUR_AUTH0_TENANT_DOMAIN>',\n    AUTH0_CLIENT_ID: '<YOUR_AUTH0_CLIENT_ID>',\n    AUTH0_CLIENT_SECRET: '<YOUR_AUTH0_CLIENT_SECRET>',\n  },\n})\n  .then(() => {\n    console.log('Auth0 configuration applied to tenant successful');\n  })\n  .catch((err) => {\n    console.log('Error when applying configuration to Auth0 tenant:', err);\n  });\n```",
    "title": "Use as a Node Module",
    "description": "Learn how to the use the Auth0 Deploy CLI as a node module.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli",
    "markdown": "# Configure the Deploy CLI\n\nConfiguring the Deploy’s CLI is essential for establishing Auth0 credentials as well as generally modifying the behavior of the tool to your specific needs. There are two ways the Deploy CLI can be configured:\n\n1.  Use the configuration file (`config.json`).\n    \n2.  Set environment variables.\n    \n\n## Configuration file\n\nA standalone JSON file can be used to configure Deploy CLI. This file will usually reside in the root directory of your project and should be named `config.json`.\n\n### Example\n\n```\n{\n  \"AUTH0_DOMAIN\": \"<YOUR_TENANT_DOMAIN>\",\n  \"AUTH0_CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n  \"AUTH0_ALLOW_DELETE\": false\n}\n```\n\n## Environment variables\n\nBy default, the Deploy CLI ingests environment variables, providing the ability to pass credentials and other configurations to the tool without needing to publish to the `config.json` file. Environment variables can either be used to augment the `config.json` file or replace it altogether depending on the project needs.\n\nNon-primitive configuration values like `AUTH0_KEYWORD_REPLACE_MAPPINGS` and `AUTH0_EXCLUDED` can also be passed in through environment variables so long as these values are properly serialized JSON.\n\nTo disable the consumption of environment variables for either the `import` or `export` commands, pass the `--env=false` argument.\n\n### Examples\n\n#### Deploying configuration for YAML formats without a config.json file\n\n```\n$ export AUTH0_DOMAIN=<YOUR_AUTH0_DOMAIN>\n$ export AUTH0_CLIENT_ID=<YOUR_CLIENT_ID>\n$ export AUTH0_CLIENT_SECRET=<YOUR_CLIENT_SECRET>\n$ a0deploy import --input_file=local/tenant.yaml\n```\n\n#### Disable environment variable ingestion\n\n```\n$ a0deploy export -c=config.json --format=yaml --output_folder=local --env=false\n```\n\n#### Non-primitive configuration values\n\n```\n$ export AUTH0_EXCLUDED='[\"actions\",\"organizations\"]'\n$ export AUTH0_KEYWORD_REPLACE_MAPPINGS='{\"ENVIRONMENT\":\"dev\"}'\n$ a0deploy export -c=config.json --format=yaml --output_folder=local\n```\n\n## Available Configuration Properties\n\n### AUTH0\\_DOMAIN\n\nString. The domain of the target Auth0 tenant.\n\n### AUTH0\\_CLIENT\\_ID\n\nString. The ID of the designated Auth0 application used to make API requests.\n\n### AUTH0\\_CLIENT\\_SECRET\n\nString. The secret of the designated Auth0 application used to make API requests.\n\n### AUTH0\\_ACCESS\\_TOKEN\n\nString. Short-lived access token for Management API from designated Auth0 application. Can be used in replacement to client ID and client secret combination.\n\n### AUTH0\\_CLIENT\\_SIGNING\\_KEY\\_PATH\n\nString. The path to the private key used by the client when facilitating Private Key JWT authentication. Path relative to the working directory. Also note `AUTH0_CLIENT_SIGNING_ALGORITHM` for specifying signing algorithm.\n\n### AUTH0\\_CLIENT\\_SIGNING\\_ALGORITHM\n\nString. Specifies the JWT signing algorithms used by the client when facilitating Private Key JWT authentication. Only used in combination with `AUTH0_CLIENT_SIGNING_KEY_PATH`.\n\nAccepted values: `RS256`, `RS384`, `PS256`.\n\n### AUTH0\\_ALLOW\\_DELETE\n\nBoolean. When enabled, will allow the tool to delete resources. Default: `false`.\n\n### AUTH0\\_EXCLUDED\n\nArray of strings. Excludes entire resource types from being managed, bi-directionally. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\nCannot be used simultaneously with [AUTH0\\_INCLUDED\\_ONLY](#auth0_included_only).\n\nPossible values: `actions`, `attackProtection`, `branding`, `clientGrants`, `clients`, `connections`, `customDomains`, `databases`, `emailProvider`, `emailTemplates`, `guardianFactorProviders`, `guardianFactorTemplates`, `guardianFactors`, `guardianPhoneFactorMessageTypes`, `guardianPhoneFactorSelectedProvider`, `guardianPolicies`, `logStreams`, `migrations`, `organizations`, `pages`, `prompts`, `resourceServers`, `roles`, `tenant`, `triggers`.\n\n#### Example\n\n```\n{\n  \"AUTH0_EXCLUDED\": [\"organizations\", \"connections\", \"hooks\"]\n}\n```\n\n### AUTH0\\_INCLUDED\\_ONLY\n\nArray of strings. Specifies which resource types to manage bi-directionally. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\nCannot be used simultaneously with [AUTH0\\_EXCLUDED](#auth0_excluded).\n\nPossible values: `actions`, `attackProtection`, `branding`, `clientGrants`, `clients`, `connections`, `customDomains`, `databases`, `emailProvider`, `emailTemplates`, `guardianFactorProviders`, `guardianFactorTemplates`, `guardianFactors`, `guardianPhoneFactorMessageTypes`, `guardianPhoneFactorSelectedProvider`, `guardianPolicies`, `logStreams`, `migrations`, `organizations`, `pages`, `prompts`, `resourceServers`, `roles`, `tenant`, `triggers`.\n\n#### Example\n\n```\n{\n  \"AUTH0_INCLUDED_ONLY\": [\"clients\", \"connections\", \"tenant\", \"branding\"]\n}\n```\n\n### AUTH0\\_KEYWORD\\_REPLACE\\_MAPPINGS\n\nMapping of specific keywords to facilities dynamic replacement. To learn more, read [Keyword Replacement](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/keyword-replacement).\n\n#### Example\n\n```\n{\n  \"ENVIRONMENT\": \"DEV\",\n  \"ALLOWED_ORIGINS\": [\"https://dev.test-site.com\", \"localhost\"]\n}\n```\n\n### AUTH0\\_PRESERVE\\_KEYWORDS\n\nBoolean. When enabled, will attempt to preserve keyword replacement markers in local resource files during export. Otherwise, the remote values will overwrite those manually-placed keyword markers.\n\nThis configuration requires the presence of local configuration files and defined keyword replace mappings via the `AUTH0_KEYWORD_REPLACE_MAPPINGS` configuration property.\n\nSee also: [Preserve Keywords on Export](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/keyword-replacement#preserve-keywords-on-export).\n\n### AUTH0\\_EXPORT\\_IDENTIFIERS\n\nBoolean. When enabled, will return identifiers of all resources. May be useful for certain debugging or record-keeping scenarios within a single-tenant context. Default: `false`.\n\n### EXCLUDED\\_PROPS\n\nProvides ability to exclude any unwanted properties from management.\n\n#### Example\n\n```\n{\n  \"connections\": [\"options.twilio_token\"]\n}\n```\n\n### AUTH0\\_AUDIENCE\n\nString. Separate value from audience value while retrieving an access token for the Management API. Useful when default Management API endpoints are not publicly exposed.\n\n### AUTH0\\_EXCLUDED\\_RULES\n\nArray of strings. Excludes the management of specific rules by ID. Note: This configuration may be subject to deprecation in the future. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\n### AUTH0\\_EXCLUDED\\_CLIENTS\n\nArray of strings. Excludes the management of specific clients by ID. Note: This configuration may be subject to deprecation in the future. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\n### AUTH0\\_EXCLUDED\\_DATABASES\n\nArray of strings. Excludes the management of specific databases by ID. Note: This configuration may be subject to deprecation in the future. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\n### AUTH0\\_EXCLUDED\\_CONNECTIONS\n\nArray of strings. Excludes the management of specific connections by ID. Note: This configuration may be subject to deprecation in the future. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).\n\n### AUTH0\\_EXCLUDED\\_RESOURCE\\_SERVERS\n\nArray of strings. Excludes the management of specific resource servers by ID. Note: This configuration may be subject to deprecation in the future. To learn more, read [Exclude Resources from Management](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management).",
    "title": "Configure the Deploy CLI",
    "description": "Learn how to configure the Auth0 Deploy CLI to modify the tool for your needs.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/keyword-replacement",
    "markdown": "# Keyword Replacement\n\nThe Deploy CLI supports dynamic keyword replacement with environment-specific values. This enables a scalable multi-tenant workflow where all tenants share the same resource configuration files but inject subtly different values.\n\nTo use the keyword replacement, the `AUTH0_KEYWORD_REPLACEMENT_MAPPINGS` configuration property needs to contain the appropriate mappings. Then, in the resource configuration files, keywords can be injected through one of two ways:\n\n1.  `@@EXAMPLE_KEY@@`: Using the `@` symbols causes the tool to perform a `JSON.stringify` on your value before replacing it. So if your value is a string, the tool will add quotes; if your value is an array or object, the tool will add braces.\n    \n2.  `##EXAMPLE_KEY##`: Using the `#` symbol causes the tool to perform a literal replacement; it will not add quotes or braces.\n    \n\n## Example config.json\n\n```\n{\n  \"AUTH0_DOMAIN\": \"test-tenant.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"FOO\",\n  \"AUTH0_CLIENT_SECRET\": \"BAR\",\n  \"AUTH0_KEYWORD_REPLACE_MAPPINGS\": {\n    \"ENVIRONMENT\": \"dev\",\n    \"ALLOWED_LOGOUT_URLS\": [\"https://dev-test-site.com/logout\", \"localhost:3000/logout\"],\n    \"ALLOWED_ORIGINS\": [\"https://dev-test-site.com\", \"localhost:3000\"]\n  }\n}\n```\n\n## Example tenant.yaml\n\n```\ntenant:\n  friendly_name: \"##ENVIRONMENT## tenant\"\n  allowed_logout_urls: @@ALLOWED_LOGOUT_URLS@@\n  enabled_locales:\n    - en\nclients:\n  - name: Test App\n    allowed_origins: @@ALLOWED_ORIGINS@@\n    allowed_logout_urls: @@ALLOWED_LOGOUT_URLS@@\n```\n\n## Example tenant.json\n\n```\n{\n  \"friendly_name\": \"##ENVIRONMENT## tenant\",\n  \"allowed_logout_urls\": \"@@ALLOWED_LOGOUT_URLS@@\"\n}\n```\n\n## Array Concatenation\n\nYou may encounter situations where you would want to concatenate values onto a static array through keyword replacement. There is no special syntax to support this case, however, it is possible to achieve this by escaping double quotes in a single string that contains the appropriate values and injecting with the `##` keyword syntax. This technique works for both the [YAML and directory formats](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/available-resource-configuration-formats).\n\n### Example config.json\n\n```\n{\n  \"AUTH0_KEYWORD_REPLACE_MAPPINGS\": {\n    \"GLOBAL_WEB_ORIGINS\": \"\\\"http://local.me:8080\\\", \\\"http://localhost\\\", \\\"http://localhost:3000\\\"\"\n  }\n}\n```\n\n### Example tenant.yaml\n\n```\nclients:\n  - name: Test App\n    web_origins: [ \"http://production-app.com\", \"https://production-app.com\", ##GLOBAL_WEB_ORIGINS## ]\n```\n\n## Preserve Keywords on Export\n\nGenerally, the Deploy CLI works best when operating in a uni-directional workflow from your lower-level environments (ex: dev, test) up to your production environments. However, there will be times when it is necessary to export configuration from a higher-level environment onto your local configuration directory. By default, the remote values will overwrite your local values, **causing the deletion of your keyword markers**. However, keyword replacement preservation can be enabled through the `AUTH0_PRESERVE_KEYWORDS` boolean configuration property. By enabling this configuration, the Deploy CLI will attempt to preserve the keyword markers defined in your local configuration files during export.\n\nThe keyword preservation functionality will attempt to preserve as many keywords while also maintaining the accuracy of your resource configuration files. And it the majority of cases, it will work without any intervention by the user. However, some key limitations exist:\n\n*   In the case of a keyword-replaced configuration field with differing values between local and remote, the local configuration value will always be favored. This will cause **any out-of-band changes on remote to be wiped away** if a keyword replace marker exists anywhere in that field's value in the resource definition file; there is no \"intelligent\" reconciliation.\n    \n*   Arrays without a specific identifiers are not eligible for preservation. Ex: `[\"http://site.com/logout\", \"localhost:3000/logout\", \"##LOGOUT_URL##\"]`. This is because the ordering of these values are non-deterministic. Alternatively, to preserve these values, it is recommended to leverage the `@@ARRAY_REPLACE@@` keyword replace syntax with the entire value.\n    \n\nTo learn more about the history and technical challenges of of keyword preservation, refer to [RFC: Keyword Preservation During Export](https://github.com/auth0/auth0-deploy-cli/issues/688).",
    "title": "Keyword Replacement",
    "description": "Learn how to manage a multi-tenant workflow with the Auth0 Deploy CLI using keyword replacement.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/authenticate-with-your-tenant",
    "markdown": "# Authenticate with your Tenant\n\nThere are three supported methods of authenticating the Auth0 Deploy CLI with your tenant.\n\n## Client credentials\n\n[Client credentials](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow) authentication requires you provide a client ID and client secret pair directly to the application. This option is straightforward and enables the quickest path to setup for the tool.\n\nTo configure client credentials authentication, set the the following fields in your [configuration file](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli):\n\n| **Field** | **Value** |\n| --- | --- |\n| `AUTH0_CLIENT_ID` | Client ID of your Auth0 application. |\n| `AUTH0_CLIENT_SECRET` | Client secret of your Auth0 application. |\n\n## Private key JWT\n\n[Private key JWT](https://auth0.com/docs/get-started/applications/configure-private-key-jwt) authentication requires you configure a private key for the application and a public key for the remote tenant. This option is ideal if do not want to store credentials remotely on Auth0.\n\nTo configure private key JWT authentication, set the following fields in your [configuration file](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli):\n\n| **Field** | **Value** |\n| --- | --- |\n| `AUTH0_CLIENT_SIGNING_KEY_PATH` | Relative path to the JWT signing key certificate. |\n| `AUTH0_CLIENT_SIGNING_ALGORITHM` | Optional. JWT signing algorithm used for the certificate. |\n\n## Access token\n\n[Access token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production) authentication requires you provide an Auth0 Management API access token directly to the application. This option puts more responsibility on developers but can enable flexible and specific workflows when necessary.\n\nTo configure access token authentication, pass a Management API Auth0 access token through the `AUTH0_ACCESS_TOKEN` [environment variable](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).",
    "title": "Authenticate with your Tenant",
    "description": "Learn about the different methods of authenticating the Auth0 Deploy CLI with your tenant.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/exclude-resources-from-management",
    "markdown": "# Exclude Resources From Management\n\nIn some cases, you may find it useful to exclude resources from being managed. This could be because your tenant has a large number of a particular resource and it’s operationally burdensome to manage them, or your development workflow only pertains to a specific subset of resources and you’d like to omit all other resources for performance. Regardless, there are several options available for excluding resources when using the Deploy CLI.\n\n## Exclude entire resources by type\n\nFor more complex tenants, you may find yourself wanting to omit entire resource types. For example:\n\n*   Enterprise tenant with thousands of organizations, where managing all would be operationally burdensome.\n    \n*   CI/CD process only focuses on managing roles, and you want to exclude all others.\n    \n*   Feature development pertains to hook, and you want to temporarily exclude all others to optimize performance.\n    \n\nThis type of exclusion is expressed by passing an array of resource names into either the `AUTH0_EXCLUDED` or `AUTH0_INCLUDED_ONLY` configuration properties. The `AUTH0_EXCLUDED` configuration property excludes only the resource types provided to it. Inversely, the `AUTH0_INCLUDED_ONLY` property excludes all properties except the ones defined. Exclusion works bi-directionally, that is, both when export from Auth0 and importing to Auth0, regardless if resource configuration files exist or not.\n\nAll supported resource values for exclusion: `actions`, `attackProtection`, `branding`, `clientGrants`, `clients`, `connections`, `customDomains`, `databases`, `emailProvider`, `emailTemplates`, `guardianFactorProviders`, `guardianFactorTemplates`, `guardianFactors`, `guardianPhoneFactorMessageTypes`, `guardianPhoneFactorSelectedProvider`, `guardianPolicies`, `logStreams`, `migrations`, `organizations`, `pages`, `prompts`, `resourceServers`, `roles`, `tenant`, `triggers`.\n\n### Exclusion example\n\nThe following example shows how to exclude `clients`, `connections`, `databases`, and `organizations` from being managed by the Deploy CLI.\n\n```\n{\n  \"AUTH0_DOMAIN\": \"example-site.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"<YOUR_AUTH0_CLIENT_ID>\",\n  \"AUTH0_EXCLUDED\": [\"clients\", \"connections\", \"databases\", \"organizations\"]\n}\n```\n\n### Inclusion example\n\nThe following example shows how to specify to only manage `actions`, `clients` and `connections` by the Deploy CLI.\n\n```\n{\n  \"AUTH0_DOMAIN\": \"example-site.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"<YOUR_AUTH0_CLIENT_ID>\",\n  \"AUTH0_INCLUDED_ONLY\": [\"actions\", \"clients\", \"connections\"]\n}\n```\n\n## Exclude single resources by ID\n\nSome resource types support exclusions of the individual resource by ID. This is useful if you work in a multi-environment context and wish to omit a production-specific resource from your lower-level environments.\n\nThis method is supported for rules, clients, databases, connections and resource servers with the `AUTH0_EXCLUDED_RULES`, `AUTH0_EXCLUDED_CLIENTS`, `AUTH0_EXCLUDED_DATABASES`, `AUTH0_EXCLUDED_CONNECTIONS`, `AUTH0_EXCLUDED_RESOURCE_SERVERS` configuration values respectively.\n\n### Example\n\n```\n{\n  \"AUTH0_DOMAIN\": \"example-site.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"<YOUR_AUTH0_CLIENT_ID>\",\n  \"AUTH0_EXCLUDED_CLIENTS\": [\"PdmQpGy72sHksV6ueVNZVrV4GDlDDm76\"],\n  \"AUTH0_EXCLUDED_CONNECTIONS\": [\"con_O1H3KyRMFP1IWRq3\", \"con_9avEYuj19ihqKBOs\"]\n}\n```\n\n## Omission and empty states\n\nIn addition to excluding resources, which forcefully ignore configurations bi-directionally, the Auth0 Deploy  CLI supports two similar concepts: omission and empty states.\n\n### Omission\n\nResource configuration that is absent, either intentionally or unintentionally, will be skipped during import. For example, if your resource configuration were deleted, it would be skipped during import and would not alter the state of the remote tenant.\n\nThere is no concept of omission for exporting. Unless specifically excluded, all your tenant configurations will be written to resource configuration files.\n\n#### Example\n\n```\nroles: # roles configuration is not omitted\n  - name: Admin\n    description: Can read and write things\n    permissions: []\n  - name: Reader\n    description: Can only read things\n    permissions: []\n# The omission of all other configurations means they'll be skipped over\n```\n\n### Empty\n\nResource configuration that is explicitly defined as empty. For set-based configurations like hooks, organizations, and actions, setting these configurations to an empty set expresses an intentional emptying of those resources. This would signal a deletion, so long as the AUTH0\\_ALLOW\\_DELETE deletion configuration property is enabled. To learn more about this property, read [Configure the Deploy CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli).\n\nFor non-set-based resource configuration like tenant and branding, the concept of emptiness does not apply, and will not trigger any deletions or removals.\n\n#### Example of emptiness\n\n```\nhooks: [] # Empty hooks\nconnections: [] # Empty connections\ntenant: {} # Effectively a no-op, emptiness does not apply to non-set resource config\n```",
    "title": "Exclude Resources From Management",
    "description": "Learn how to exclude resources from being managed when using the Auth0 Deploy CLI.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/incorporate-into-multi-environment-workflows",
    "markdown": "# Incorporate into Multi-environment Workflows\n\nThe Deploy CLI supports working within a multi-tenant, multi-environment context. When integrated into your CI/CD development workflows, can be used to propagate Auth0 changes from feature development all the way through production.\n\nIn general, the advised workflow is as follows:\n\n1.  Create a separate Auth0 tenant for each environment (development, staging, production).\n    \n2.  Create a single repository of resource configuration files for all environments.\n    \n3.  Add a step in your CI/CD pipeline when deploying to environments that applies the Auth0 resource configurations to the appropriate Auth0 tenant.\n    \n\n## Tenant to environment\n\nIt is recommended to have a separate Auth0 tenant/account for each environment you have. For example:\n\n| **Environment** | **Tenant** |\n| --- | --- |\n| Development | `travel0-dev` |\n| Testing | `travel0-uat` |\n| Staging | `travel0-stage` |\n| Production | `travel0-prod` |\n\n## Resource configuration repository\n\nWhen exported, your Auth0 tenant state will be represented as a set of resource configuration files, either in a [YAML or directory format](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/available-resource-configuration-formats). In a multi-environment context it is expected to have a single repository of resource configurations that is applied to all environments. In practice, this may exist as a directory in your project’s codebase or in a separate codebase altogether.\n\nYou should have at least one branch for each tenant in your repository, which allows you to make changes without deploying them. This way, changes will only deploy when you merge the working branch into the primary branch (such as `main` or `master`). With this setup, you can have a continuous integration task for each environment that automatically deploys changes to the targeted environment whenever the primary branch receives updates.\n\nYour workflow could potentially look something like this:\n\n1.  Make changes to development.\n    \n2.  Merge changes to testing (or uat).\n    \n3.  Test changes to uat. When ready, move and merge the changes to staging.\n    \n4.  Test staging. When ready, move and merge the changes to production.\n    \n\nAs a precaution, you may want to set your production environment to deploy only when triggered manually.\n\n## Unidirectional flow\n\nThe multi-environment workflow works best when changes are propagated “up” in a single direction. Changes to the resource configuration files should first be applied to the lowest level environment (such as development) and then incrementally applied up through all other environments until applied to production. This unidirectional practice ensures sufficient testing and approval for changes to your tenant. Once set, it is recommended to not apply configurations directly to production through other means such as the Auth0 Dashboard or Management API unless those changes are captured by a subsequent Deploy CLI export. Otherwise, those changes are subject to overwrite.\n\n## Environment-specific values\n\nWhile it is expected that all environments will share the same set of resource configuration files, environment-specific values can be expressed through separate tool configuration files and dynamic [Keyword Replacement](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/keyword-replacement).\n\n## Separate configuration files\n\nSpecifying a separate tool configuration file per environment can be used to keep the resource configuration files agnostic of the environment, but still support the needs of each environment. At a minimum, you will need to provide separate credentials for each environment, but it is also possible to exclude certain resources, enable deletion, and perform dynamic keyword replacement on a per-environment basis.\n\n### Example file structure\n\n```\nproject-root\n│\n└───auth0\n│   │   config-dev.json   # Dev env config file\n│   │   config-test.json  # Test env config file\n│   │   config-prod.json  # Prod env config file\n│   │   ... all other resource configuration files\n│\n└───src\n    │   ... your project code\n```\n\n## Dynamic values with keyword replacement\n\nOnce separate configuration files are adopted for each environment, keyword replacement through the `AUTH0_KEYWORD_REPLACE_MAPPINGS` configuration property can be used to express the dynamic replacement values depending on the environment. For example, you may find it necessary to have a separate set of allowed origins for your clients. To learn more, read [Keyword Replacement](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/keyword-replacement).\n\n### Example config-dev.json\n\n```\n{\n  \"AUTH0_DOMAIN\": \"travel0-dev.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"PdwQpGy62sHcsV6ufZNEVrV4GDlDhm74\",\n  \"AUTH0_ALLOW_DELETE\": true,\n  \"AUTH0_KEYWORD_REPLACE_MAPPINGS\": {\n    \"ENV\": \"dev\",\n    \"ALLOWED_ORIGINS\": [\"http://localhost:3000\", \"http://dev.travel0.com\"]\n  }\n}\n```\n\n### Example config-prod.json\n\n```\n{\n  \"AUTH0_DOMAIN\": \"travel0.us.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"vZCEFsDYzXc1x9IomB8dF185e4cdVah5\",\n  \"AUTH0_ALLOW_DELETE\": false,\n  \"AUTH0_KEYWORD_REPLACE_MAPPINGS\": {\n    \"ENV\": \"prod\",\n    \"ALLOWED_ORIGINS\": [\"http://travel0.com\"]\n  }\n}\n```",
    "title": "Incorporate into Multi-environment Workflows",
    "description": "Learn how to support multi-tenant, multi-environment workflows when using the Auth0 Deploy CLI.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/resource-specific-documentation",
    "markdown": "# Resource-specific Documentation\n\nIn general, the Deploy CLI resource configuration files closely match the payload schemas of the [Auth0 Management API](https://auth0.com/docs/api/management/v2), but there are some notable nuances to be aware of.\n\n## Client grants\n\nThe Deploy CLI's own client grant is intentionally not exported nor configurable by itself. This is done to prevent breaking changes, otherwise the tool could potentially revoke access or otherwise crash in the midst of an import. In a multi-tenant, multi-environment context, it is expect that new tenants will have a designated client already established for the Deploy CLI, as mentioned in [Getting Started](https://auth0.com/docs/deploy-monitor/deploy-cli-tool).\n\n## Prompts\n\nMultilingual custom text prompts follow a particular hierarchy. Under the root-level prompts resource property is a proprietary `customText` property that is used to bundle custom text translations with other prompts settings. Underneath `customText` is the two-character language code. Thirdly is the prompt ID, followed by the screen ID, followed by text ID.\n\n### Hierarchy\n\n```\nprompts:\n  customText:\n    <LANGUAGE>: # two character language code\n      <PROMPT_ID>: # prompt ID\n        <SCREEN_ID>: # prompt screen ID\n          <TEXT_ID>: 'Some text'\n```\n\n### Example\n\n```\nprompts:\n  identifier_first: true\n  universal_login_experience: classic\n  customText:\n    en:\n      login:\n        login:\n          description: Login description in english\n          buttonText: Button text\n      mfa:\n        mfa-detect-browser-capabilities:\n          pickAuthenticatorText: 'Try another method'\n          reloadButtonText: 'Reload'\n          noJSErrorTitle: 'JavaScript Required'\n        mfa-login-options:\n          pageTitle: 'Log in to ${clientName}'\n          authenticatorNamesSMS: 'SMS'\n```\n\n## Databases\n\nWhen managing database connections, the values of `options.customScripts` point to specific javascript files relative to the path of the output folder. Otherwise, the payload closely matches that of the [Auth0 Management API](https://auth0.com/docs/api/management/v2#!/Connections/post_connections).\n\n### YAML example\n\nFolder structure when in YAML mode:\n\n```\n./databases/\n    /Username-Password-Authentication\n        /change_password.js   \n        /create.js   \n        /delete.js   \n        /get_user.js   \n        /login.js   \n        /verify.js   \n./tenant.yaml\n```\n\n Contents of `tenant.yaml`:\n\n```\ndatabases:\n  - name: Username-Password-Authentication\n    # ...\n    options:\n      # ...\n      customScripts:\n        change_password: ./databases/Username-Password-Authentication/change_password.js\n        create: ./databases/Username-Password-Authentication/create.js\n        delete: ./databases/Username-Password-Authentication/delete.js\n        get_user: ./databases/Username-Password-Authentication/get_user.js\n        login: ./databases/Username-Password-Authentication/login.js\n        verify: ./databases/Username-Password-Authentication/verify.js\n```\n\n### Directory example\n\nFolder structure when in directory mode:\n\n```\n./database-connections/\n    ./Username-Password-Authentication/\n        ./change_password.js\n        ./create.js\n        ./database.json\n        ./delete.js\n        ./get_user.js\n        ./login.js\n        ./verify.js\n```\n\nContents of `database.json`:\n\n```\n{\n  \"options\": {\n    \"customScripts\": {\n      \"change_password\": \"./change_password.js\",\n      \"create\": \"./create.js\",\n      \"delete\": \"./delete.js\",\n      \"get_user\": \"./get_user.js\",\n      \"login\": \"./login.js\",\n      \"verify\": \"./verify.js\"\n    }\n  }\n}\n```\n\n## Universal Login\n\n### Pages\n\nWhen overriding the Universal Login with custom HTML, the error, login, multi-factor authentication, and password reset contents are organized in specific HTML pages.\n\n#### YAML example\n\nFolder structure when in YAML mode:\n\n```\n./pages/\n    /error_page.html\n    /guardian_multifactor.html\n    /login.html\n    /password_reset.html\n./tenant.yaml\n```\n\nContents of `tenant.yaml`:\n\n```\npages:\n  - name: error_page\n    html: ./pages/error_page.html\n    show_log_link: false\n    url: https://mycompany.org/error\n  - name: guardian_multifactor\n    enabled: true\n    html: ./pages/guardian_multifactor.html\n  - name: login\n    enabled: false\n    html: ./pages/login.html\n  - name: password_reset\n    enabled: true\n    html: ./pages/password_reset.html\n```\n\n#### Directory Example\n\nFolder structure when in directory mode:\n\n```\n./pages/\n    ./error_page.html\n    ./error_page.json\n    ./guardian_multifactor.html\n    ./guardian_multifactor.json\n    ./login.html\n    ./login.json\n    ./password_reset.html\n    ./password_reset.json\n```\n\nContents of `login.json`:\n\n```\n{\n  \"name\": \"login\",\n  \"enabled\": false,\n  \"html\": \"./login.html\"\n}\n```\n\nContents of `error_page.json`:\n\n```\n{\n  \"html\": \"./error_page.html\",\n  \"show_log_link\": false,\n  \"url\": \"https://mycompany.org/error\",\n  \"name\": \"error_page\"\n}\n```\n\nContents of `guardian_multifactor.json`:\n\n```\n{\n  \"enabled\": true,\n  \"html\": \"./guardian_multifactor.html\",\n  \"name\": \"guardian_multifactor\"\n}\n```\n\nContents of `password_reset.json`:\n\n```\n{\n  \"enabled\": true,\n  \"html\": \"./password_reset.html\",\n  \"name\": \"password_reset\"\n}\n```",
    "title": "Resource-specific Documentation",
    "description": "Learn about the specifics of resource documentation for the Auth0 Deploy CLI.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-cli-tool/available-resource-configuration-formats",
    "markdown": "# Available Resource Configuration Formats\n\nAuth0 resource state is expressed in two available different configuration file formats: YAML and directory (JSON). When using the Deploy CLI’s `export` command, you will be prompted with the choice of one versus the other.\n\n## YAML\n\nThe YAML format is expressed mostly as a flat tenant.yaml file with supplemental code files for resources like actions and email templates. The single file makes tracking changes over time in version control more straightforward. Additionally, the single file eliminates a bit of ambiguity with directory and file names, which may not be immediately obvious.\n\n## Directory (JSON)\n\nThe directory format separates resource types into separate directories, with each single resource living inside a dedicated JSON file. This format allows for easier conceptual separation between each type of resource as well as the individual resources themselves. Also, the Deploy CLI closely mirrors the data shapes defined in the [Auth0 Management API](https://auth0.com/docs/api/management/v2), so referencing the JSON examples in the docs may be useful when using this format.\n\n## How to choose\n\nThe decision to select which format to use should be primarily made off of preference. Both formats are tenable solutions that achieve the same task, but with subtly different strengths and weaknesses described above. Be sure to evaluate each in the context of your context. Importantly, this choice is not permanent, and switching from one to the other with the `import` command is an option at your disposal.",
    "title": "Available Resource Configuration Formats",
    "description": "Learn about the available configuration formats when using the Auth0 Deploy CLI.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-private-cloud/private-cloud-on-aws",
    "markdown": "# Private Cloud on AWS\n\nThe Private Cloud on AWS deployment option is a dedicated, managed instance of the Auth0 identity platform running on Amazon Web Services. It provides isolation, higher performance, separate development instances, various add-ons, and more.\n\n## Operational differences\n\nThe table below compares each deployment option for Private Cloud on AWS.\n\n| **Feature** | **Public Cloud** | **Private Cloud Basic on AWS** | **Private Cloud Performance on AWS** |\n| --- | --- | --- | --- |\n| Tenancy | Multi | Single | Single |\n| Requests per second (Multiples of 100 RPS) | 100 RPS (1x) | 100 RPS (1x) | 500 RPS (5x)  <br>1,500 RPS (15x)  <br>3,000 RPS (30x)  <br>6,000 RPS (60x) |\n| Service level agreement (SLA) | 99.99% | 99.99% | 99.99% |\n| Data residency | Public cloud regions only | Yes | Yes |\n| Dev environment | No  | No  | 1   |\n\n### Data residency\n\nWith Private Cloud on AWS, you choose the region where your data is stored. Auth0 can provide a list of available regions that use multiple [availability zones](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/) for the deployment. A list of current regions where we offer private cloud deployments can be found in our Sub-processor Information posted to our [Trust & Compliance page](https://www.okta.com/trustandcompliance/). In most cases, Okta deploys backups in the same selected AWS region.\n\n### Maximum availability\n\nPrivate Cloud on AWS instances have a 99.99% service level agreement (SLA).\n\n### High demand apps\n\nIf your application requires a significantly high amount of requests per second (RPS), you may also wish to consider Private Cloud on AWS. See the [rate limits policies](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy) for more information about the standard rate limits. The Private Cloud on AWS deployments have a rate limit of 100 RPS for Private Basic, and enhanced rate limits of 500 RPS, 1,500 RPS, 3,000 RPS, and 6,000 RPS for Private Performance options.\n\n## Additional dev environments\n\nPrivate Cloud on AWS Performance deployments include a fully-isolated and independently-updated instance for development and testing. You can add additional pre-production environments to meet your business requirements.\n\nGuaranteed requests per second (RPS) and SLA do not apply to non-production environments.\n\n## Limitations\n\n### Data Center Locations\n\nPrivate Cloud on AWS is fully deployable in the following regions:\n\n*   Australia\n    \n*   Bahrain\n    \n*   Brazil\n    \n*   Canada\n    \n*   France\n    \n*   Germany\n    \n*   Hong Kong\n    \n*   India\n    \n*   Indonesia\n    \n*   Ireland\n    \n*   Italy\n    \n*   Japan\n    \n*   Singapore\n    \n*   South Africa\n    \n*   South Korea\n    \n*   Sweden\n    \n*   United Kingdom\n    \n*   USA\n    \n\n### Bursty Traffic \n\nOkta provides rate limits for orgs based on the traffic that they expect to have, and subject to the RPS tier purchased. If your org experiences higher traffic than what is expected, this unplanned usage may potentially have an impact on end users.The Private Cloud offering is designed to handle gradual increases in transaction rate (e.g. an increase from 100 RPS to 1000 RPS over a period of 10 minutes) without any service impact. However, sudden and severe bursts in traffic (e.g. 100 RPS to 1000RPS increase in a matter of seconds) could lead to service instability and increased latency while the solution adjusts to handle the new load. \n\n## Onboarding\n\nAfter choosing Private Cloud on AWS, an onboarding and deployment process will be followed to configure your environment(s).\n\n### Customer onboarding requirements\n\nUpon contract signing, we will ask you to provide key information regarding your onboarding requirements, which we will then validate.\n\n### Kickoff meeting\n\nOnce we validate your onboarding requirements, we will host a kickoff meeting with you to begin the implementation process. We strongly recommend that this meeting occur no later than five (5) days after the contract signing.\n\n### Implementation\n\nImmediately after the onboarding form validation, we will begin provisioning your environment.\n\nAt the end of this process, you're ready for the environment handover and your Private Cloud on AWS deployment is ready for use.\n\n## Secure Outbound Networking\n\nSome Auth0 platform customizations—[Actions](https://auth0.com/docs/customize/actions), [custom webhooks](https://auth0.com/docs/customize/log-streams/custom-log-streams), and [custom database action scripts](https://auth0.com/docs/authenticate/database-connections/custom-db/templates), for example—let you make outbound connections from the Auth0 platform to your own services. With Private Cloud on AWS, you can establish network connectivity between your Private Cloud deployment and your own services without exposing your data to the Internet.\n\nSecure outbound networking uses AWS PrivateLink. First, you share your service through PrivateLink by [establishing an endpoint service](https://docs.aws.amazon.com/vpc/latest/privatelink/create-endpoint-service.html) in your AWS account. The underlying service can be an AWS-native service or a service running in a data center. The service must be in a VPC in the same AWS region as your Private Cloud deployment.\n\nNext, we will configure your Private Cloud deployment to make your endpoint service available. Once you provide Auth0 with your endpoint service information, we will integrate the service with your deployment and provide information on how to access it from your customization code.\n\nFor more info on setting up endpoint services with PrivateLink, contact AWS. To coordinate service onboarding with Auth0, file a request to the [Support Center](https://support.auth0.com/).\n\n## Updates\n\nPrivate Cloud on AWS deployments are updated every week automatically. You can set a specific day and time during the week, if required.\n\n## Testing\n\n### Load testing\n\nThis policy outlines the necessary requirements for Auth0 to perform load testing for Private Cloud on AWS customers who submit a request. You can file a load testing request via the [Support Center](https://support.auth0.com/). Under the Issue field, select Private Cloud Support Incident.\n\nIf you purchased a dedicated load testing environment, there is no limit to the frequency of load tests you can run. Standard environments are limited to two (2) per year, given proper load testing procedures.\n\nTo be considered for approval, the request must:\n\n*   Be filed at least two (2) weeks prior to the desired test date; in many cases, Auth0 encourages one (1) month of advance notice to ensure time for a thorough review and any required modifications.\n    \n*   Receive approval in writing before any testing is conducted.\n    \n*   Stay within our [published production rate limits](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy).\n    \n\nIf changes to infrastructure are requested, the cost will be determined based on your specific requirements.\n\n#### Testing capacity considerations\n\nYou should start with a low load and slowly increase until the environment has reached its peak. Should you require a load greater than what the environment can handle, the environment size should be increased.\n\nPrivate Cloud environments can be upsized via contract addendum; please contact your Account Executive and TAM to discuss this purchase.\n\n| Subscription | Load Test Capacity | Ramp up |\n| --- | --- | --- |\n| Private Cloud Performance 500 RPS (5x) | 325 RPS | 100 RPS/min |\n| Private Cloud Performance 1500 RPS (15x) | 975 RPS | 100 RPS/min |\n| Private Cloud Performance 3000 RPS (30x) | 1950 RPS | 100 RPS/min |\n| Private Cloud Performance 6000 RPS (60x) | 3900 RPS | 100 RPS/min |\n\nFor more information on load testing in Private Cloud, see [Environment request limits (Private Cloud Only)](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy#environment-request-limits-private-cloud-only-).\n\n#### High load notifications\n\nFor periods of anticipated high load, you must inform your account team no later than 14 days prior to the event. The notification provides the opportunity to adequately test scenarios (if possible) and aligns reactive support to the event.\n\n### Penetration testing\n\nTo conduct a security test, please notify us in advance via the Auth0 Support Center. Auth0 requires at least one week (seven days) notice prior to your test's planned start date.\n\nIf the test is isolated to your infrastructure (that is, there will be no testing of Auth0 services), you do not need to notify Auth0.\n\nFor the information that we require, see our [Penetration Testing Policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy).\n\n### Failover testing\n\nThis policy outlines the necessary requirements for Okta to perform failover testing for Private Cloud customers on either the AWS or Azure Customer Identity Cloud (Auth0) platform with the required Geo Failover add-on. You may file a failover testing request via the [Support Center.](https://support.auth0.com/) Under the Issue field, select Private Cloud Support Incident.\n\nTo be considered for approval, the request must:\n\n*   Be filed at least two (2) weeks prior to the desired test date and time (in UTC). In many cases, Okta encourages one (1) month of advance notice to ensure time for a thorough review and any required modifications.\n    \n*   Fall under the limit of (2) failover tests per calendar year.\n    \n*   Receive approval in writing before any testing is conducted.\n    \n*   Specify windows (in UTC)  for both the failover and the fallback to the primary region, with an understanding that both windows will result in downtime of up to 15 minutes.\n    \n*   Designated point-of-contact specified with whom Okta will coordinate all testing logistics\n    \n\nPlease note that Okta reserves the right to suggest alternative windows for the failover and fallback to correspond to availability of Staff to perform the requested testing. Additionally, any service interruption that results as part of the failover or fallback procedures is exempt of any SLA provisions.\n\n## Certificate renewal process\n\nAuth0-managed certificates (in the format \\*.auth0app.com) are the responsibility of Auth0 to both obtain and apply. Auth0 will manage the process end-to-end and will prompt you with any action required.\n\nRenewal of Auth0-issued certificates for custom domains is managed by Auth0.\n\nRenewal of customer-managed certificates for [custom domains](https://auth0.com/docs/customize/custom-domains) (in the format \\*.<CustomerName>.com) is the customer’s responsibility to manage and obtain.\n\n## Reporting and monitoring\n\nAuth0 provides logs that are accessible via the Dashboard or the [log streaming endpoint](https://auth0.com/docs/customize/log-streams).\n\n## Support\n\nYou can reach out to the Auth0 [Support](https://support.auth0.com/) team with any questions or concerns you might have. To help expedite your request, please provide as much information as possible in the [Support ticket you open](https://auth0.com/docs/troubleshoot/customer-support/open-and-manage-support-tickets).",
    "title": "Private Cloud on AWS",
    "description": "Learn about the Auth0 identity platform on AWS deployment option and its capabilities.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/monitor/monitor-applications",
    "markdown": "# Monitor Applications\n\nYour applications and services depend on Auth0. Monitoring Auth0's health lets you report specific errors to customers or reduce user impact in case there's an issue with Auth0.\n\nThere's many ways to monitor Auth0 and each approach complements the others. You should pick based on your needs and investment possibilities.\n\n## Synthetic transactions\n\nThe simplest approach to monitor Auth0:\n\n*   Set up a periodic request to perform an authentication transaction.\n    \n*   If the request succeeds, Auth0 is working fine.\n    \n*   If the request fails, this may indicate:\n    \n    *   an issue with Auth0\n        \n    *   an issue specific to the tenant used for the synthetic transaction\n        \n    *   or just a single failed request.\n        \n\nFor synthetic transactions, use an environment as close to your production tenant configuration as possible. You may potentially even use the same production tenant. Since setting up synthetic transactions with redirect flows and third party providers can be tricky, using the [Resource Owner Password Grant](https://auth0.com/docs/get-started/authentication-and-authorization-flow/resource-owner-password-flow/call-your-api-using-resource-owner-password-flow) is recommended. This flow doesn't involve browser redirects or require a UI.\n\nIf you are using [rules](https://auth0.com/docs/customize/rules) or [custom database connection(s)](https://auth0.com/docs/connections/database/custom-db) or other extensibility points, the synthetic transaction(s) should be configured to utilize the rules and/or custom DB scripts to ensure that aspect of the system is working.\n\nTools like [Pingdom](http://pingdom.com/) make setting up synthetic transactions a simple thing.\n\n### Check period\n\nWe recommend running synthetic transactions on one minute intervals. With this simple approach, that frequency won't consume a lot of your Auth0 rate limit quota, while also providing timely responses.\n\n### Limitations of synthetic transactions\n\nSynthetic transactions are a simple and inexpensive way monitoring an Auth0 tenant's health. However, they do have some limitations:\n\n*   Synthetic transactions do not represent your end user's experience. Instead they give you a proxy metric for them.\n    \n*   Synthetic transactions might not use the same flows as your users.\n    \n*   They lack atomicity (typically run once a minute) and do not report on errors your end users might have seen.\n    \n\nIf you are interested in getting more granular data read about [Error Tracking](#error-tracking) and [Metrics and Logs](#metrics-and-logs).\n\n## Error tracking\n\nThis approach is useful to track errors in existing calls to Auth0. It involves reporting errors whenever a call to Auth0 fails. [Sentry](https://sentry.io/) is a tool commonly used for these cases, which works both on frontend and backend scenarios.\n\nThis approach is useful because it allows you to know about real errors that your end users are experiencing. However, because you are only tracking errors (and not all requests) it is not possible to get an accurate perception of \"how many\" end users are affected: is it 1% or 5%? It also doesn't require you to set up a separate \"synthetic call\", which might consume part of your rate limit quota, especially if misconfigured.\n\n## Metrics and logs\n\nThis approach is useful if calls to Auth0 are performed from a backend you control. This is the case for:\n\n*   Most calls to [Auth0's Management API](https://auth0.com/docs/api/management/v2)\n    \n*   Calls to the [Authentication API](https://auth0.com/docs/api/authentication) from Regular Web Applications and Machine-to-machine applications ([learn more about client types](https://auth0.com/docs/get-started/applications)).\n    \n\nThe approach consists of using metrics and/or logs to track error rates on calls to Auth0. Metrics/logs report error rates that accurately describe what end users are experiencing, without requiring you to set up a separate \"synthetic call\", which might consume part of your rate limit quota, especially if misconfigured.\n\n## Alerting\n\nRegardless of the monitoring approaches you use, it's common to get an alert or page when errors happen at a particular rate. That rate depends on your application.\n\nWhen your team gets an alert from Auth0, we recommend adding a link to [Check Auth0 Status](https://auth0.com/docs/deploy-monitor/monitor/check-auth0-status) to the alert payload/playbook. This will allow them to quickly check Auth0's official status reporting channel to see if the issue is coming from Auth0 or your application/service.\n\n## Learn more\n\n*   [Check Auth0 Status](https://auth0.com/docs/deploy-monitor/monitor/check-auth0-status)\n*   [Check External Services Status](https://auth0.com/docs/deploy-monitor/monitor/check-external-services-status)\n*   [Monitor Auth0 Using System Center Operations Manager](https://auth0.com/docs/deploy-monitor/monitor/monitor-using-scom)",
    "title": "Monitor Applications",
    "description": "Your applications depend on Auth0. Monitoring Auth0's health lets you report errors or reduce user impact in case there's an issue with Auth0. Learn more.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/monitor/check-auth0-status",
    "markdown": "# Check Auth0 Status\n\nGo to the [Auth0 Public Cloud Status](https://status.auth0.com/) page to check the service availability of the public cloud version of Auth0.\n\nSelect a **Region** from the dropdown menu to see the status of Core Services (such as User Authentication and Machine-to-Machine Authentication) and Supporting Services (such as MFA, Management API, Tenant Logs, and CDN).\n\nFor more information on available regions, refer to the [Region, locality, and sub-locality](https://auth0.com/docs/get-started/auth0-overview/create-tenants#region-locality-and-sub-locality) table in [Create Tenants](https://auth0.com/docs/get-started/auth0-overview/create-tenants).\n\n## Subscribe to status updates\n\nSelect a **Region**, and then select **Subscribe to Updates** to get updates. You can choose from two options to view status:\n\n1.  Follow [@auth0status](https://twitter.com/auth0status) on X to get the latest status updates.\n    \n2.  Subscribe to the Auth0 Atom or RSS feed to get status updates that affect your tenant. Replace `{YOUR_TENANT_DOMAIN}` with your tenant's **Domain**. RSS feeds for Private Cloud are not currently supported.\n    \n\nTo find your tenant's **Domain**, go to [Auth0 Dashboard > Applications](https://manage.auth0.com/dashboard/#/applications), select an application, and then go to **Settings**. Your tenant's **Domain** is listed under **Basic Information**.\n\n## Check Auth0 status for Private Cloud\n\nGo to the [Auth0 Public Cloud Status](https://status.auth0.com/), and then select **Private Cloud Login**.\n\nOnce authenticated, you can see the status of any non-development environment (for example, `travel0-prod-1`) if it's available on the Auth0 Converged Platform.\n\nTo go back to the Auth0 Public Cloud Status page, select **Auth0 Public Cloud Status** from the top-right navigation.\n\n![Generic example of a private cloud authenticated status page experience](https://images.ctfassets.net/cdy7uua7fh8z/96ORa2wB8LuMh9nehPeZB/8afb82058ac82f027f82a5b870d5b479/Screen_Shot_2022-12-02_at_1.21.42_PM.png)",
    "title": "Check Auth0 Status",
    "description": "Learn how to check Auth0 public cloud service availability, incident reports, and historical uptime reports.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-private-cloud/private-cloud-add-on-features",
    "markdown": "# Private Cloud Add-on Features\n\nThe Private Cloud deployment option comes with two additional add-on features: Geo-failover and PCI compliance. If you have any questions about these features, please [contact Auth0 Sales](https://auth0.com/get-started?place=documentation%20post&type=link&text=contact%20auth0%20sales).\n\n## Private Cloud Geo-Failover\n\nGeo-failover is an active-passive failover configuration, which allows customers to specify a secondary failover region to use in the event of a major regional outage. In general, any region in the same cloud provider that is within 100ms latency can be selected as a failover region. In some cases, however, cloud providers prefer specific failover regions. The Auth0 onboarding team will work with you to select the best regions for your use case.\n\nAdditionally, a third \"tie break\" region is required for one of our data stores. This third region never receives live traffic but is required to elect a new leader in the event of a failover. Auth0 can also help you select the best option for this region.\n\nIf a regional failure is detected, Geo-failover triggers on the customer's behalf by Auth0. The entire process is automated once triggered. When confirmation the region is no longer experiencing issues is received, Auth0 will failback to the primary region.\n\n## PCI Compliance\n\nPCI Compliance is available as an add-on to customers who require it.",
    "title": "Private Cloud Add-on Features",
    "description": "Learn about add-on features that can complement your Auth0 Private Cloud deployment.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/deploy-private-cloud/private-cloud-on-azure",
    "markdown": "# Private Cloud on Azure\n\nThe Private Cloud on Azure deployment option is a dedicated, managed instance of the Auth0 identity platform running on Microsoft Azure. It provides isolation, higher performance, separate development instances, various add-ons, and more.\n\n## Operational differences\n\nThe table below compares each deployment option for Private Cloud on Azure.\n\n| **Feature** | **Public Cloud** | **Private Cloud on Azure Basic** | **Private Cloud on Azure Performance** |\n| --- | --- | --- | --- |\n| Tenancy | Multi | Single | Single |\n| Requests per second (RPS) | 100 | 100 | 500 |\n| Service level agreement (SLA) | 99.99% | 99.99% | 99.99% |\n| Data residency | Public cloud regions only | Yes | Yes |\n| Dev environment | No  | No  | 1   |\n\n#### Data residency\n\nWith Private Cloud on Azure, you choose the region where your data is stored. Auth0 can provide a list of available regions that use three [availability zones](https://azure.microsoft.com/en-us/global-infrastructure/geographies/) for the deployment. A list of current regions where we offer private cloud deployments can be found in our Sub-processor Information posted to our [Trust & Compliance page](https://www.okta.com/trustandcompliance/). In most cases, Okta deploys backups in the same selected Azure region.\n\n### Maximum availability\n\nPrivate Cloud on Azure instances have a 99.99% service level agreement (SLA).\n\n### High demand apps\n\nIf your application requires a significantly high amount of requests per second (RPS), you may also wish to consider Private Cloud on Azure. See the [rate limits policies](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy) for more information about the standard rate limits. The Private Cloud on Azure deployments have a rate limit of 100 RPS for Private Basic, and enhanced rate limits of 500 RPS, 1,500 RPS, 3,000 RPS, and 6,000 RPS for Private Performance options.\n\n## Additional dev environments\n\nPrivate Cloud on Azure Performance deployments include a fully-isolated and independently-updated instance for development and testing. You can add additional pre-production environments to meet your business requirements.\n\nGuaranteed requests per second (RPS) and SLA do not apply to non-production environments.\n\n## Limitations\n\n### Data Center Locations\n\nPrivate Cloud on Azure is fully deployable in the following regions:\n\n*   Australia\n    \n*   Brazil\n    \n*   Canada\n    \n*   France\n    \n*   Germany\n    \n*   India\n    \n*   Ireland\n    \n*   Japan\n    \n*   Netherlands\n    \n*   Norway\n    \n*   South Africa\n    \n*   South Korea\n    \n*   Sweden\n    \n*   Switzerland\n    \n*   United Arab Emirates\n    \n*   United Kingdom\n    \n*   USA\n    \n\n### Bursty Traffic \n\nOkta provides rate limits for orgs based on the traffic that they expect to have, and subject to the RPS tier purchased. If your org experiences higher traffic than what is expected, this unplanned usage may potentially have an impact on end users. The Private Cloud offering is designed to handle gradual increases in transaction rate (e.g. an increase from 100 RPS to 1000 RPS over a period of 10 minutes) without any service impact. However, sudden and severe bursts in traffic (e.g. 100 RPS to 1000RPS increase in a matter of seconds) could lead to service instability and (increased latency) while the solution adjusts to handle the new load.\n\n### Add-on limitations\n\nThe [Credential Guard add-on](https://auth0.com/docs/secure/attack-protection/breached-password-detection#detect-breaches-faster-with-credential-guard) for breached password detection and the [HIPAA compliance add-on](https://auth0.com/docs/secure/data-privacy-and-compliance#hipaa-and-hitech) are not currently available on Azure deployments.\n\n## Onboarding\n\nAfter choosing Private Cloud on Azure, an onboarding and deployment process will be followed to configure your environment(s).\n\n### Customer onboarding requirements\n\nUpon contract signing, we will ask you to provide key information regarding your onboarding requirements, which we will then validate.\n\n### Kickoff meeting\n\nOnce we validate your onboarding requirements, we will host a kickoff meeting with you to begin the implementation process. We strongly recommend that this meeting occur no later than five (5) days after the contract signing.\n\n### Implementation\n\nImmediately after the onboarding form validation, we will begin provisioning your environment.\n\nAt the end of this process, you're ready for the environment handover and your Private Cloud on Azure deployment is ready for use.\n\n## Updates\n\nPrivate Cloud on Azure deployments are updated every week automatically. You can set a specific day and time during the week, if required.\n\n## Testing\n\n### Load testing\n\nThis policy outlines the necessary requirements for Auth0 to perform load testing for Private Cloud on Azure customers who submit a request. You can file a load testing request via the [Support Center](https://support.auth0.com/). Under the Issue field, select **Private Cloud Support Incident**.\n\nIf you purchased a dedicated load testing environment, there is no limit to the frequency of load tests you can run. Standard environments are limited to two (2) per year, given proper load testing procedures.\n\nTo be considered for approval, the request must:\n\n*   Be filed at least two (2) weeks prior to the desired test date; in many cases, Auth0 encourages one (1) month of advance notice to ensure time for a thorough review and any required modifications.\n    \n*   Receive approval in writing before any testing is conducted.\n    \n*   Stay within our [published production rate limits](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy).\n    \n\nIf changes to infrastructure are requested, the cost will be determined based on your specific requirements.\n\n#### Testing capacity considerations\n\nYou should start with a low load and slowly increase until the environment has reached its peak. Should you require a load greater than what the environment can handle, the environment size should be increased.\n\nPrivate Cloud environments can be upsized via contract addendum; please contact your Account Executive and TAM to discuss this purchase.\n\n| Subscription | Load Test Capacity | Ramp up |\n| --- | --- | --- |\n| Private Cloud Performance 500 RPS (5x) | 325 RPS | 100 RPS/min |\n| Private Cloud Performance 1500 RPS (15x) | 975 RPS | 100 RPS/min |\n| Private Cloud Performance 3000 RPS (30x) | 1950 RPS | 100 RPS/min |\n| Private Cloud Performance 6000 RPS (60x) | 3900 RPS | 100 RPS/min |\n\nFor more information on load testing in Private Cloud, see [Environment request limits (Private Cloud Only)](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy#environment-request-limits-private-cloud-only-).\n\n#### High load notifications\n\nFor periods of anticipated high load, you must inform your account team no later than 14 days prior to the event. The notification provides the opportunity to adequately test scenarios (if possible) and aligns reactive support to the event.\n\n## Secure Outbound Networking\n\nSome Auth0 platform customizations, including [Actions](https://auth0.com/docs/customize/actions), [custom webhooks](https://auth0.com/docs/customize/log-streams/custom-log-streams), and [custom database action scripts](https://auth0.com/docs/authenticate/database-connections/custom-db/templates), allow secure outbound connections from the Auth0 platform to your own services and establish network connectivity between your Private Cloud deployment and your own services.\n\nSecure outbound networking uses Azure Private Link by [establishing an endpoint service](https://learn.microsoft.com/en-us/azure/private-link/private-link-service-overview) in your Azure account. The underlying service can be an Azure-native service or a service running in a data center and must be in an Azure Virtual Network in the same Azure region as your Private Cloud deployment.\n\nAfter you configure your Private Cloud deployment to make your endpoint service available, provide Auth0 with your endpoint service information so we can integrate the service with your deployment and provide information on how to access it from your customization code.\n\nFor more info on setting up endpoint services with Private Link, contact Azure. To coordinate service onboarding with Auth0, contact Auth0's [Support Center](https://support.auth0.com/).\n\n### Penetration testing\n\nTo conduct a security test, please notify us in advance via the Auth0 Support Center. Auth0 requires at least one week (seven days) notice prior to your test's planned start date.\n\nIf the test is isolated to your infrastructure (that is, there will be no testing of Auth0 services), you do not need to notify Auth0.\n\nFor the information that we require, see our [Penetration Testing Policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy).\n\n## Certificate renewal process\n\nAuth0-managed certificates (in the format \\*.auth0app.com) are the responsibility of Auth0 to both obtain and apply. Auth0 will manage the process end-to-end and will prompt you with any action required.\n\nRenewal of Auth0-issued certificates for custom domains is managed by Auth0.\n\nRenewal of customer-managed certificates for [custom domains](https://auth0.com/docs/customize/custom-domains) (in the format \\*.<CustomerName>.com) is the customer’s responsibility to manage and obtain.\n\n## Reporting and monitoring\n\nAuth0 provides logs that are accessible via the Dashboard or the [log streaming endpoint](https://auth0.com/docs/customize/log-streams).\n\n## Support\n\nYou can reach out to the Auth0 [Support](https://support.auth0.com/) team with any questions or concerns you might have. To help expedite your request, please provide as much information as possible in the [Support ticket you open](https://auth0.com/docs/troubleshoot/customer-support/open-and-manage-support-tickets).",
    "title": "Private Cloud on Azure",
    "description": "Learn about the Auth0 identity platform on Azure deployment option and its capabilities.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/monitor/check-external-services-status",
    "markdown": "# Check External Services Status\n\nWe recommend that you monitor any remote identity providers you use with your Auth0 connections to quickly isolate the source of the problem.\n\nIf you see potential issues with your Auth0 service, but [Auth0 Status](https://status.auth0.com/) doesn't indicate any problems, check the status of any external services that you use with Auth0, such as:\n\n*   [Amazon Web Services](https://status.aws.amazon.com/)\n    \n*   [Azure Active Directory](https://azure.microsoft.com/en-us/status/)\n    \n*   [Citrix](https://status.cloud.com/)\n    \n*   [Facebook](https://developers.facebook.com/status/)\n    \n*   [GitHub](https://status.github.com/)\n    \n*   [Google Cloud](https://status.cloud.google.com/)\n    \n*   [Google Workspace](https://www.google.com/appsstatus#hl=en&v=status)\n    \n*   [Heroku](https://status.heroku.com/)\n    \n*   [IBM](https://console.bluemix.net/status)\n    \n*   [Mandrill](http://status.mandrillapp.com/)\n    \n*   [Microsoft Azure](https://azure.microsoft.com/en-gb/status/)\n    \n*   [SAP](https://www.sap.com/about/cloud-trust-center/cloud-service-status.html)\n    \n*   [SendGrid](http://status.sendgrid.com/)\n    \n*   [SFDC](https://status.salesforce.com/)\n    \n*   [Slack](https://status.slack.com/)\n    \n*   [Twilio](https://status.twilio.com/)\n    \n*   [VM Ware](https://status.vmware-services.io/)\n    \n\nYour customers may have some of the same concerns, so you may want to document any monitoring pages or endpoints that they can view to help them troubleshoot and narrow down the location of an issue.",
    "title": "Check External Services Status",
    "description": "Learn how to check the status of services external to Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/pii-in-logs",
    "markdown": "# Personally Identifiable Information in Auth0 Logs\n\nMany events in Auth0 tenant logs can contain personally identifiable information (PII). Authentication events trigger log entries that can include users' PII. And if you use the Auth0 Management API or the Dashboard to add users, Auth0 logs the user account details.\n\nThese fields in log entries can contain PII:\n\n*   Name\n    \n*   Phone number (used for multi-factor authentication)\n    \n*   Email address\n    \n*   IP address (which can reveal location)\n    \n*   Any custom user information you define\n    \n\nAt no point does Auth0 log access tokens from Auth0 or any identity provider. When authorization code exchanges occur, the logs show only a partial code (for example: `code: 31XXXXX`).\n\n## Learn more\n\n*   [Log Data Retention](https://auth0.com/docs/deploy-monitor/logs/log-data-retention)\n*   [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax)",
    "title": "Personally Identifiable Information in Auth0 Logs",
    "description": "Describes the potential personally identifiable information (PII) that Auth0 writes to tenant logs.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/log-data-retention",
    "markdown": "# Log Data Retention\n\nYour Auth0 log retention period depends your subscription level.\n\n| **Plan** | **Log Retention** |\n| --- | --- |\n| Starter | 1 day |\n| B2C Essentials | 2 days |\n| B2C Professional | 10 days |\n| B2B Essentials | 10 days |\n| B2B Professional | 10 days |\n| Enterprise | 30 days |\n\n[Auth0 Support](https://support.auth0.com/) can help you integrate with external logging services if you need to retain logs beyond your retention time. This approach is also useful for aggregating logs across your organization.\n\nIn addition, you can use Auth0 log streaming to export log data. To learn more, navigate to [Log Streaming](https://marketplace.auth0.com/features/log-streaming) in Auth0 Marketplace.\n\n## Learn more\n\n*   [Log Streams](https://auth0.com/docs/customize/log-streams)",
    "title": "Log Data Retention",
    "description": "Describes how long log data is stored depending on your Auth0 plan.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/monitor/monitor-using-scom",
    "markdown": "# Monitor Auth0 Using System Center Operations Manager\n\nYou can monitor Auth0 as a standard web application using System Center Operations Manager (SCOM) or any tool that supports synthetic transactions. We recommend adding a synthetic login transaction that includes the extensions your applications rely on (such as rules that execute custom code for integration with your company's other services).\n\n## Set up SCOM\n\n1.  Add a new SCOM instance using the **Add Monitoring Wizard**:\n    \n    | Field | Description |\n    | --- | --- |\n    | Name | Description name for the SCOM instance. |\n    | Description | Description of what this SCOM instance monitors. |\n    | Select destination management pack | Default Management Pack |\n    \n    When finished, click **Next** to continue.\n2.  Click **Add** to enter the URLs you want SCOM to monitor. When finished, click **Next** to continue.\n    \n3.  Click **Add** to set up a location from which you want to monitor.\n    \n4.  In the pop-up dialog, search for **Internal location - Agent**. Select the appropriate address, and click **Add**. Then click **Ok** to finish selecting the location. When finished, click **Next** to continue.\n    \n5.  Set the frequency with which SCOM collects data from each endpoint:\n    \n    | Data | Frequency |\n    | --- | --- |\n    | Test frequency | 60 seconds |\n    | Performance data collection interval | 60 seconds |\n    | Test time-out | 30 seconds |\n    | HTTP status code | Greater than or equals 400 |\n    \n6.  When finished, click **Next** to continue.\n    \n\n## Run SCOM tests\n\n1.  Click **Run Test** to test each endpoint and ensure that the connection settings provided are correct.\n    \n2.  Once you have finished configuring your SCOM instance, you can view activity through the **Monitoring** tab.\n    \n\n## Review test results\n\nClick **Web Application Status** to bring up the information SCOM has gathered.\n\n## Learn more\n\n*   [Check Auth0 Status](https://auth0.com/docs/deploy-monitor/monitor/check-auth0-status)\n*   [Monitor Applications](https://auth0.com/docs/deploy-monitor/monitor/monitor-applications)\n*   [Check External Services Status](https://auth0.com/docs/deploy-monitor/monitor/check-external-services-status)",
    "title": "Monitor Auth0 Using System Center Operations Manager",
    "description": "Describes how to monitor Auth0 as a standard web application using System Center Operations Manager (SCOM) or any tool that supports synthetic transactions.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/view-log-events",
    "markdown": "# View Log Events\n\nUse the Auth0 Dashboard to view all the events that occur in your tenants including user authentication and administrative actions such as adding and updating applications, connections, and rules. Administrative actions will show up in the logs as **API Operation** events.\n\n1.  Go to [Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs).\n    \n    ![Dashboard Monitoring Logs](https://images.ctfassets.net/cdy7uua7fh8z/2l9LfKEjrprVmHfWt80VX0/bb1b8d9927d5c83d0ba094907abe5fb6/dashboard-monitoring-logs.png)\n2.  The list displays the latest events. To perform a search, put your cursor in the search field, enter a query and press **Enter**. For example, to search all logs with connections that contain \"Pass,\" enter `connection:*pass*`. To learn more about the search query syntax and examples, read [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax).\n    \n3.  You can choose to filter your search by event types. Choose a filter from the drop-down list and click **Apply**. For example, you can choose the **Failed Login** to filter for failed user login events. To learn about log event filters and examples, read [Log Event Filters](https://auth0.com/docs/deploy-monitor/logs/log-event-filters).\n    \n    ![Dashboard Monitoring Logs Filters](https://images.ctfassets.net/cdy7uua7fh8z/3bfjw3WURyQRiNhj6f8VlJ/5c71550ff0a1d51f81b0c65a4d2cc22a/dashboard-monitoring-logs-filters.png)\n4.  You can choose a date range for your search. Click the drop-down next to the date field, choose a specific date or range, and click **Apply**.\n    \n    ![Dashboard Monitoring Logs Date Range](https://images.ctfassets.net/cdy7uua7fh8z/6V9SRyQ2GlSyObjmNjBg80/41a1fe9594dfe5a1fad3f5a7f1d3cf9f/dashboard-monitoring-logs-date-range.png)\n\n## Learn more\n\n*   [Log Data Retention](https://auth0.com/docs/deploy-monitor/logs/log-data-retention)\n*   [Filter Log Events](https://auth0.com/docs/deploy-monitor/logs/log-event-filters)\n*   [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax)\n*   [Export Log Events with Rules](https://auth0.com/docs/deploy-monitor/logs/export-log-events-with-rules)",
    "title": "View Log Events",
    "description": "Learn how to view log events in the Dashboard including user authentication and administrative actions such as adding and updating applications, connections, and rules.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes",
    "markdown": "# Log Event Type Codes\n\n`api_limit` Rate Limit on the Authentication or Management APIs The maximum number of requests to the Authentication or Management APIs in a given time has been reached. `appi` API Peak Performance initiated Increases the Elevated Public Authentication API Limits by the 100 RPS multiple purchased by the customer for up to 48 hours per month. For more information, see [Public performance rate limit policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy#public-performance). `cls` Code/Link Sent Passwordless login code/link has been sent `cs` Code Sent Passwordless login code has been sent `depnote` Deprecation Notice `f` Failed Login `fc` Failed by Connector `fce` Failed Change Email Failed to change user email `fco` Failed by CORS Origin is not in the Allowed Origins list for the specified application `fcoa` Failed cross-origin authentication `fcp` Failed Change Password `fcph` Failed Post Change Password Hook `fcpn` Failed Change Phone Number `fcpr` Failed Change Password Request `fcpro` Failed Connector Provisioning Failed to provision a AD/LDAP connector `fcu` Failed Change Username Failed to change username `fd` Failed Delegation Failed to generate delegation token `fdeac` Failed Device Activation Failed to activate device. `fdeaz` Failed Device Authorization Request Device authorization request failed. `fdecc` User Canceled Device Confirmation User did not confirm device. `fdu` Failed User Deletion `feacft` Failed Exchange Failed to exchange authorization code for Access Token `feccft` Failed Exchange Failed exchange of Access Token for a Client Credentials Grant `fede` Failed Exchange Failed to exchange Device Code for Access Token `fens` Failed Exchange Failed exchange for Native Social Login `feoobft` Failed Exchange Failed exchange of Password and OOB Challenge for Access Token `feotpft` Failed Exchange Failed exchange of Password and OTP Challenge for Access Token `fepft` Failed Exchange Failed exchange of Password for Access Token `fepotpft` Failed Exchange Failed exchange of Passwordless OTP for Access Token `fercft` Failed Exchange Failed Exchange of Password and MFA Recovery code for Access Token `fertft` Failed Exchange Failed Exchange of Refresh Token for Access Token. This could occur if the refresh token is revoked or expired. `ferrt` Failed Exchange Failed Exchange of Rotating Refresh Token. This could occur when reuse is detected. `fi` Failed invite accept Failed to accept a user invitation. This could happen if the user accepts an invitation using a different email address than provided in the invitation, or due to a system failure while provisioning the invitation. `flo` Failed Logout User logout failed `fn` Failed Sending Notification Failed to send email notification `fp` Failed Login (Incorrect Password) `fpar` Failed Pushed Authorization Request `fs` Failed Signup `fsa` Failed Silent Auth `fu` Failed Login (Invalid Email/Username) `fui` Failed users import Failed to import users `fv` Failed Verification Email Failed to send verification email `fvr` Failed Verification Email Request Failed to process verification email request `gd_auth_failed` MFA Auth failed Multi-factor authentication failed. This could happen due to a wrong code entered for SMS/Voice/Email/TOTP factors, or a system failure. `gd_auth_rejected` MFA Auth rejected A user rejected a Multi-factor authentication request via push-notification. `gd_auth_succeed` MFA Auth success Multi-factor authentication success. `gd_enrollment_complete` MFA enrollment complete A first time MFA user has successfully enrolled using one of the factors. `gd_otp_rate_limit_exceed` Too many failures A user sends more than 10 requests to their device within one hour.\n\nUsers can only send 10 OTP requests within an hour. If they exceed this limit, they must wait at least an hour to request another OTP. One additional attempt is allowed with the passage of each subsequent hour.\n\n**Note**: The request limit does not reset upon a successful login event. Users must wait an hour after their first request to send another OTP to their device.\n\n`gd_recovery_failed` Recovery failed A user enters a wrong recovery code when attempting to authenticate. `gd_recovery_rate_limit_exceed` Too many failures A user enters a wrong recovery code too many times. `gd_recovery_succeed` Recovery success A user successfully authenticates with a recovery code. `gd_send_email` Email Sent Email for MFA successfully sent. `gd_send_pn` Push notification sent Push notification for MFA successfully sent. `gd_send_pn_failure` Push notification sent Push notification for MFA failed. `gd_send_sms` SMS sent SMS for MFA successfully sent. `gd_send_sms_failure` SMS sent failures Attempt to send SMS for MFA failed. `gd_send_voice` Voice call made Voice call for MFA successfully made. `gd_send_voice_failure` Voice call failure Attempt to make Voice call for MFA failed. `gd_start_auth` Second factor started Second factor authentication event started for MFA. `gd_start_enroll` Enroll started Multi-factor authentication enroll has started. `gd_start_enroll_failed` Enrollment failed Push to start enrollement failed. `gd_tenant_update` Guardian tenant update `gd_unenroll` Unenroll device account Device used for second factor authentication has been unenrolled. `gd_update_device_account` Update device account Device used for second factor authentication has been updated. `gd_webauthn_challenge_failed` Enrollment challenge issued User failed to verify Webauthn factor. `gd_webauthn_enrollment_failed` Enroll failed WebAuthn factor enrollment failed. `limit_delegation` Too Many Calls to /delegation Rate limit exceeded to `/delegation` endpoint `limit_mu` Blocked IP Address An IP address is blocked because it attempted too many failed logins without a successful login. Or an IP address is blocked because it attempted too many sign-ups, whether successful or failed. For more information, see [Attack Protection](https://auth0.com/docs/configure/attack-protection). `limit_wc` Blocked Account An IP address is blocked because it reached the maximum failed login attempts into a single account. `limit_sul` Blocked Account A user is temporarily prevented from logging in because they reached the maximum logins per time period from the same IP address. For more information, see [Attack Protection](https://auth0.com/docs/configure/attack-protection). `mfar` MFA Required A user has been prompted for multi-factor authentication (MFA). When using Adaptive MFA, Auth0 includes details about the risk assessment. `mgmt_api_read` Management API read Operation API GET operation returning secrets completed successfully `oidc_backchannel_logout_failed` Failed OIDC Back-Channel Logout request Failed OIDC Back-Channel Logout request `oidc_backchannel_logout_succeeded` Successful OIDC Back-Channel Logout request Successful OIDC Back-Channel Logout request `pla` Pre-login assessment This log is generated before a login and helps in monitoring the behavior of bot detection without having to enable it. `pwd_leak` Breached password Someone behind the IP address `ip` attempted to login with a leaked password. `resource_cleanup` Refresh token excess warning Emitted when resources exceeding defined limits were removed. `s` Success Login Successful login event. `sapi` Success API Operation Successful management API write event. `sce` Success Change Email `scoa` Success cross-origin authentication `scp` Success Change Password `scpn` Success Change Phone Number `scpr` Success Change Password Request `scu` Success Change Username `sd` Success Delegation `sdu` Success User Deletion User successfully deleted `seacft` Success Exchange Successful exchange of authorization code for Access Token `seccft` Success Exchange Successful exchange of Access Token for a Client Credentials Grant `sede` Success Exchange Successful exchange of device code for Access Token `sens` Success Exchange Native Social Login `seoobft` Success Exchange Successful exchange of Password and OOB Challenge for Access Token `seotpft` Success Exchange Successful exchange of Password and OTP Challenge for Access Token `sepft` Success Exchange Successful exchange of Password for Access Token `sercft` Success Exchange Successful exchange of Password and MFA Recovery code for Access Token `sertft` Success Exchange Successful exchange of Refresh Token for Access Token `si` Successful invite accept Successfully accepted a user invitation `signup_pwd_leak` Breached password Someone behind the IP address `ip` attempted to signup with a leaked password. `srrt` Success Revocation Successfully revoked a Refresh Token `slo` Success Logout User successfully logged out `ss` Success Signup `ssa` Success Silent Auth `sui` Success users import Successfully imported users `sv` Success Verification Email Successfully consumed email verification link `svr` Success Verification Email Request Successfully called verification email endpoint. Verification email in queue to send. `ublkdu` User login block released User block setup by anomaly detection has been released `w` Warnings During Login Filters for logs of type `warning` during login `wum` Warning User Management Filters for logs of type `warning` during user management operations",
    "title": "Log Event Type Codes",
    "description": "Lists the event codes associated with log events. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/prompt-details-in-tenant-logs",
    "markdown": "# Prompt Details in Tenant Logs\n\nAuth0 tenant logs provide transaction details for user authentication actions. Tenant logs capture information from the sign-in, login, and verification processes for review. You can review how the user authenticated, which credentials they provided, length of transaction, and connection status.\n\nBelow are the default values captured in tenant logs:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `completedAt` | Stage completion time, including user interaction time |\n| `elapsedTime` | Difference between `completedAt` and `initiatedAt` |\n| `flow` | Varies based on login experience (i.e., Universal or Classic) |\n| `initiatedAt` | Stage start time |\n| `name` | Name of the stage |\n\n## login\n\nThe login stage provides the following values:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `flow` | Able to take two values dependent on Universal or Classic Login |\n| `user_id` | Auth0 ID of the user authenticated in this stage |\n| `user_name` | Name of the user authenticated in this stage |\n\nAdditional fields with the following information:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `connection` | Connection used to authenticate the user |\n| `connection_id` | ID of the connection used to authenticate the user |\n| `strategy` | Strategy of the connection used to authenticate user |\n| `identity` | Users’ authenticated identity |\n\nValues for additional events in the login flow:\n\n| **Name** | **Universal Login Experience** | **Description** |\n| --- | --- | --- |\n| `federated-authenticate` | Universal | Federated connection used for authentication, social, legal, or enterprise |\n| `lock-password-authenticate` | Classic | User authenticated with a username and password |\n| `oauth1-authenticate` | Classic | User authenticated with an oauth1 federation |\n| `oauth2-authenticate` | Classic | User authenticated with an oauth2 federation |\n| `oidc-authenticate` | Classic | User authenticated with an oidc federation |\n| `prompt-authenticate` | Universal | User authenticated with a username and password |\n| `prompt-authenticate-password` | Universal | User authenticated with username and password in the `idfirst` flow |\n| `prompt-signup` | Universal | User signed up using a username and password |\n| `prompt-signup-password` | Universal | User signed up using username and password using the `idfirst` flow |\n| `saml-authenticate` | Classic | User authenticated with a SAML federation |\n| `wsfed-authenticate` | Classic | User authenticated with a WS-FED federation |\n\n## consent\n\nThe consent stage provides the following values:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `grantInfo` | The `{myApiIdentifier}` or identifier of the API granted permission by the user |\n| `audience` | Token audience |\n| `id` | User grant persisted in the database |\n| `scope` | Approved scope granted by the user |\n\n## login-email-verification\n\nThe email verification prompt provides the following values:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `login-email-verification` | Is included if the email verification prompt was presented |\n\n## redirect\n\nThe redirect stage provides the following values:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `URL` | URL the user was redirected to |\n\n## mfa\n\nMulti-factor authentication provides the following values:\n\n| **Attribute** | **Description** |\n| --- | --- |\n| `flow` | Can take two values depending if used with the Classic experience (`mfa`) or the Universal experience (`universal-mfa`). |\n| `performed_acr` | `acr` that will be included in the `id_token`. |\n| `performed_amr` | `amr` that will be included in the `id_token`. |\n| `provider` | Provider used to perform mfa. |",
    "title": "Prompt Details in Tenant Logs",
    "description": "Describes attributes and values from user prompts in Auth0 tenant logs.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/retrieve-log-events-using-mgmt-api",
    "markdown": "# Retrieve Log Events Using the Management API\n\nYou can use the Management API to retrieve up to 100 log events per request using the [/get\\_logs](https://auth0.com/docs/api/management/v2/#!/Logs/get_logs) endpoint, which supports two types of consumption:\n\n*   **By checkpoint**: Recommended if you want to export log events to the external data analytics service.\n    \n*   **By search criteria**: Used by the Dashboard.\n    \n\nLogs stored by Auth0 are subject to a retention period that is based on your Auth0 subscription. To learn more, read [Log Data Retention](https://auth0.com/docs/deploy-monitor/logs/log-data-retention).\n\nYou can also use these endpoints to look for logs:\n\n*   `/api/v2/logs/{id}`: Retrieves the single log entry associated with the provided log ID.\n    \n*   `/api/v2/users/{user_id}/logs`: Retrieves log events for a specific user ID.\n    \n\n## Retrieve logs by checkpoint\n\nThis method allows you to retrieve log events newer than a given `log_id`. It is commonly used to send your Logs to an external system, such as Splunk, Datadog, Application Insights, Mixpanel, and more.\n\nTo search by checkpoint, use the following parameters:\n\n| **Parameter** | **Description** |\n| --- | --- |\n| `from` | Log event ID to start retrieving logs. You can limit the amount of logs using the `take` parameter. |\n| `take` | The total amount of entries to retrieve when using the `from` parameter. |\n\nAny parameter other than `from` and `take` will be ignored. The logs are ordered by the `log_id`.\n\n#### Semantics\n\nRetrieving logs by checkpoint have the following semantics:\n\n*   All logs available to your role's permissions will be returned\n    \n*   The logs are ordered by the `log_id`, rather than event generation time, to prevent skipping past records due to Auth0 system delays\n    \n*   Pagination is unbounded, meaning there is no limit, in contrast to the `1,000` record limit when retrieving logs by search criteria\n    \n\nWhen retrieving logs by checkpoint, only the first request should be made manually. Each subsequent request should be made using the `next` relation URL inside of the `Link` header. This simplifies the work for integrating with the API, and allows Auth0 to make optimizations without impacting the customer experience.\n\n#### Example\n\nLet's assume your tenant name in the `us` is `acme`. To start retrieving records by checkpoint:\n\n1.  Grab the `log_id` from any log in your system. Example: `90020211201185132572079310688835925971249535794074878050`.\n    \n2.  Make a request to `https://TENANT_NAME.LOCALITY.auth0.com/api/v2/logs?from=LOG_ID&take=100` to request the next `100` logs newer than the given `LOG_ID`.\n    \n3.  The HTTP response will contain\n    \n    1.  A JSON array of `0` to `100` logs newer than the given `LOG_ID`\n        \n    2.  An HTTP `Link` header with a `next` relation\n        \n4.  If the result set is empty you will receive an empty array, and the `next` relation will match the same URL you used in the most recent request\n    \n\n## Retrieve logs by search criteria\n\nThis method allows you to retrieve log events that match the specified search criteria or, if no criteria is used, lists all events. To search by criteria use the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `q` | Search criteria using Query String Syntax. |\n| `page` | The zero-based page number. |\n| `per_page` | The number of entries per page. |\n| `sort` | The field to use for sorting. Use `field:order`, where `order` is `1` for ascending and `-1` for descending. For example `date:-1`. |\n| `fields` | A comma-separated field list to include or exclude (depending on `include_fields`) from the result. Leave empty to retrieve all fields. |\n| `include_fields` | `true` if the fields specified are to be included in the result, `false` otherwise. Defaults to `true`. |\n\nTo see a list of fields and sort parameters that can be used in the search query, read [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax).\n\n## Limitations\n\nBesides the limitation of 100 log events per request to retrieve logs, you may only paginate through up to 1,000 search results.\n\nIf you get the error `414 Request-URI Too Large` this means that your query string is larger than the supported length. In this case, refine your search.\n\n#### Private Cloud search field limitations\n\nThe following fields are searchable only for Private Cloud:\n\n*   `user`\n    \n*   `connection`\n    \n*   `application`\n    \n*   `type`\n    \n*   `ip`\n    \n\nUse double quotes for exact searches (e.g., `application:\"test\"` will search for all log events specific to the application named `test`, but `application:test` will search log events for applications with \"test\" in their name.\n\n## Learn more\n\n*   [Log Event Type Codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes)\n*   [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax)\n*   [Log Data Retention](https://auth0.com/docs/deploy-monitor/logs/log-data-retention)",
    "title": "Retrieve Log Events Using the Management API",
    "description": "Learn how to retrieve log events using the Auth0 Management API get_logs endpoint by checkpoint or by search criteria.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/log-event-filters",
    "markdown": "# Filter Log Events\n\nBlock Account IP blocked for >10 failed attempts to login to single account Blocked IP Address IP blocked for >100 failed login attempts or >50 signup attempts Breached password Attempted login with a leaked password Device Confirmation Canceled by User User did not confirm device Error sending MFA Push Notification Push notification for MFA failed Error sending MFA SMS SMS for MFA failed Failed API Operation Operation on API failed Failed Change Email Failed to change user email Failed Change Password Failed to change user password Failed Change Password Request Change password request failed Failed Change Phone Number Failed to change user phone number Failed Change Username Failed to change username Failed Connector Provisioning Failed to provision a AD/LDAP connector Failed Delegation Failed to generate delegation token Failed Exchange Token Exchange Failed Exchange Native Socal Login Failed Exchange Authorization Code for Access Token Failed Exchange Client Credentials for Access Token Failed Exchange Password for Access Token Failed Exchange Refresh Token for Access Token Failed Exchange Password and OOB Challenge for Access Token Failed Exchange Password and OTP Challenge for Access Token Failed Exchange Password and MFA Recovery code for Access Token Failed Exchange Device Code for Access Token Failed Login User failed to login Failed Login (invalid email/username) User failed to login due to invalid username Failed Login (wrong password) User failed to login due to invalid password Failed Logout User logout failed Failed OIDC Back-Channel Logout Request Back-Channel Logout request failed Failed Post Change Password Hook Post-change password hook failed Failed Post User Registration Hook Post user registration hook failed Failed Sending Notification Failed to send email notification Failed Signup Sign up failed Failed Silent Auth Silent authentication failed Failed User Deletion User deletion failed Failed Verification Email Failed to send verification email Failed Verification Email Request Failed to process verification email request Failed CORS Origin is not in the Allowed Origins list for the specified application Failed by Connector AD/LDAP Connector Failure Failed cross origin authentication Cross-origin authentication failed Failed device activation Failed to activate device Failed device authorization request Device authorization request failed MFA Enrollment start failed Multi-factor authentication enroll failed OTP Auth failed One-time password authentication failed OTP Auth rejected One-time password authentication rejected Rate Limit on API Maximum number of requests to the Authentication API in given time has been reached Recovery failed Multi-factor recovery code failed Second factor email failed Email for MFA failed Too Many Calls to /delegation Rate limt exceeded to /delegation endpoint Too Many Calls to /userinfo Rate limit exceeded to /userinfo endpoint Too Many Invalid Device Codes Rate limit exceeded for invalid device codes",
    "title": "Filter Log Events",
    "description": "Lists the log filters for errors, warnings, and success events. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/export-log-events-with-rules",
    "markdown": "# Export Log Events with Rules\n\nYou can create an Auth0 rule to capture specific events, such as user signups, logins, and user location, then send that data to your preferred analytics service. Here are some links to services you can choose from:\n\n*   [MixPanel](http://mixpanel.com/)\n    \n*   [Firebase](http://firebase.com/)\n    \n*   [TowerData](https://www.towerdata.com/email-intelligence/email-enhancement)\n    \n*   [Parse](http://parse.com/)\n    \n*   [Splunk](https://www.splunk.com/)\n    \n*   [Keen](https://keen.io/)\n    \n*   [Segment](https://segment.com/)\n    \n\n## Rule examples\n\nHere are a few examples of rules. In most cases, before you run the rule, you will need to have a write key value that you obtain from the service and store it in the rule's global `configuration` object. The following examples require a write key value.\n\nFor more examples, see our [Auth0 Rules Repository](https://github.com/auth0/rules) on GitHub.\n\n### Keen\n\n[Keen](https://keen.io/) provides a service to capture and analyze events generated in your apps. In this example, the rule sends contextual information, such as IP address (to deduce location), user ID, and username. For this rule, we track the event type using the property `user.signedUp`. When the property is set to `true`, we assume the event is a login. Otherwise, we assume the event is a new signup, and set it to `true`. Thus, the next time the user logs in, the event will be recorded as a login.\n\n```\nfunction(user, context, callback) {\n\n  var request = require('request');\n\n  if(user.signedUp){\n    return callback(null, user, context);\n  }\n\n  var writeKey = configuration.KEENIO_WRITE_KEY;\n  var projectId = configuration.KEENIO_PROJECT_ID;\n  var eventCollection = 'signups';\n\n  var keenEvent = {\n    userId: user.user_id,\n    name: user.name,\n    ip: context.request.ip //Potentially any other properties in the user profile/context\n  };\n\n  request.post({\n      method: 'POST',\n      url: 'https://api.keen.io/3.0/projects/' + projectId + '/events/' + eventCollection,\n      headers: {\n        \"Authorization: \" + writeKey,\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(keenEvent),\n      }, \n      function (e, r, body) {\n        if( e ) return callback(e,user,context);\n        //We assume everything went well\n        user.persistent.signedUp = true;\n        return callback(null, user, context);\n       });\n}\n```\n\n### Segment\n\n[Segment](https://segment.com/) provides a large number of analytics with a single API. In this example, the rule sends signup and login events to Segment. We will use [Segment's Node.js library](https://github.com/segmentio/analytics-node) to record the Auth0 data.\n\n```\nfunction(user, context, callback) {\n  var Analytics = require('analytics-node');\n  var analytics = new Analytics(configuration.WRITE_KEY, { flushAt: 1 });\n\n  // Note: Set { flushAt: 1 } and use analytics.flush to ensure\n  // the data is sent to Segment before the rule/Webtask terminates\n\n  // Identify your user\n  analytics.identify({\n      userId: user.user_id,\n      traits: {\n      email: user.email,\n      signed_up: user.created_at,\n      login_count: user.logins_count\n    },\n    \"context\": {\n      \"userAgent\": context.request.UserAgent,\n      \"ip\": context.request.ip\n    }\n  });\n  analytics.track({\n    userId: user.user_id,\n    event: 'Logged In',\n    properties: {\n      clientName: context.clientName,\n      clientID: context.clientID,\n      connection: context.connection\n    },\n    \"context\": {\n      \"userAgent\": context.request.UserAgent,\n      \"ip\": context.request.ip\n    }\n  });\n  analytics.flush(function(err, batch){\n    callback(null, user, context);\n  });\n}\n```\n\n### Splunk\n\n[Splunk](http://splunk.com/) provides a web interface for searching, monitoring, and examining data. In this example, the rule sends signup and login events to Splunk. We will use [Splunk's REST API](http://dev.splunk.com/view/rest-api-overview/SP-CAAADP8) to record the Auth0 data. Splunk's API supports basic and token-based auth. In this example, we use token-based auth.\n\nFor this rule, we track the event type using the property `user.app_metadata.signedUp` as in the Keen example above.\n\n```\nfunction (user, context, callback) {\n  const request = require('request');\n\n  user.app_metadata = user.app_metadata || {};\n  const endpoint = 'https://http-inputs-mysplunkcloud.example.com:443/services/collector'; // replace with your Splunk HEC endpoint;\n\n  //Add any interesting info to the event\n  const hec_event = {\n    event: {\n      message: user.app_metadata.signedUp ? 'Login' : 'Signup',\n      application: context.clientName,\n      clientIP: context.request.ip,\n      protocol: context.protocol,\n      userName: user.name,\n      userId: user.user_id\n    },\n    source: 'auth0',\n    sourcetype: 'auth0_activity'\n  };\n\n  request.post({\n    url: endpoint,\n    headers: {\n      'Authorization': 'Splunk ' + configuration.SPLUNK_HEC_TOKEN\n    },\n    strictSSL: true, // set to false if using a self-signed cert\n    json: hec_event\n  }, function(error, response, body) {\n    if (error) return callback(error);\n    if (response.statusCode !== 200) return callback(new Error('Invalid operation'));\n    user.app_metadata.signedUp = true;\n    auth0.users.updateAppMetadata(user.user_id, user.app_metadata)\n      .then(function () {\n        callback(null, user, context);\n      })\n      .catch(function (err) {\n        callback(err);\n      });\n  });\n\n}\n```\n\n## Learn more\n\n*   [Log Data Retention](https://auth0.com/docs/deploy-monitor/logs/log-data-retention)\n*   [Filter Log Events](https://auth0.com/docs/deploy-monitor/logs/log-event-filters)\n*   [Log Event Type Codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes)\n*   [Log Search Query Syntax](https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax)",
    "title": "Export Log Events with Rules",
    "description": "Learn how to create Auth0 rules to export specific log events to a third-party service, such as Keen, Segment, or Splunk..",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/deploy-monitor/logs/log-search-query-syntax",
    "markdown": "# Log Search Query Syntax\n\nWhen searching for logs, you can create queries using a subset of [Lucene query syntax](http://www.lucenetutorial.com/lucene-query-syntax.html) to refine your search.\n\nThe query string is parsed into a series of terms and operators:\n\n*   A term can be a single word such as `jane` or `smith`.\n    \n*   A term can be a phrase surrounded by double quotes (`\"customer log\"`), which will match all words in the phrase in the same order.\n    \n*   A term without a field name will only match these selected fields fields.\n    \n*   Multiple terms can be grouped together with parentheses to form sub-queries.\n    \n*   All search fields are case sensitive.\n    \n*   Operators (`AND`, `OR`, `NOT`) work on all searchable fields.\n    \n\n## Searchable fields\n\nThe following fields are searchable and case sensitive:\n\n| **Field** | **Description** |\n| --- | --- |\n| `client_id` | Client ID related to the event. |\n| `client_name` | Client name related to the event. |\n| `connection` | Connection name related to the event. |\n| `connection_id` | Connection ID related to the event. |\n| `description` | Description of the event. |\n| `date` | Date the event occurred in YYYY-MM-DD format. |\n| `hostname` | Hostname used for the authentication flow. |\n| `ip` | IP address from where the request that caused the log entry originated. |\n| `log_id` | Log ID of the event. |\n| `organization_id` | Organization ID related to the event. |\n| `user_id` | User ID related to the event. |\n| `user_name` | User name related to the event. |\n| `user_agent` | User agent related to the event. |\n| `strategy` | Connection strategy related to the event. |\n| `strategy_type` | Connection strategy type related to the event. |\n| `type` | Type of the event. |\n\n## Fields searchable against bare terms\n\nIf a search term is entered without a field name, it will only be searched against the following fields:\n\n*   `client_name`\n    \n*   `connection`\n    \n*   `description`\n    \n*   `ip`\n    \n*   `log_id`\n    \n*   `type`\n    \n*   `user_name`\n    \n\n## Exact matching\n\nTo find exact matches, use double quotes: `description:\"Username invalid\"`.\n\nFor example, to find logs with the description `Username invalid`, use `q=description:\"Username invalid\"`.\n\n## Wildcards\n\nWildcard searches can be run on terms using the asterisk character (`*`) to replace zero or more characters: `user_name:john*`. They can be used for prefix matching, for example `user_name:j*`. For other uses of wildcards (for example, suffix matching), literals must have 3 characters or more. For example, `name:*usa` is allowed, but `name:*sa` is not.\n\nThe question mark character (`?`), is not supported.\n\nFor example, to find all logs for users whose usernames start with `john`, use `q=user_name:john*`.\n\n## Ranges\n\nYou can use ranges in your log search queries. For inclusive ranges use square brackets: `[min TO max]`, and for exclusive ranges use curly brackets: `{min TO max}`.\n\nCurly and square brackets can be combined in the same range expression. You can also use wildcards within ranges.\n\nAs an example, to find all logs from December 18, 2018 until the present, use `q=date:[2018-12-18 TO *]`.\n\nIf you'd like to search logs from the beginning of your retention period until, but not including, December 19, 2018, use `q=date:[* TO 2018-12-19}`.\n\n## Example queries\n\nBelow are some examples to show the kinds of queries you can make with the Management API.\n\n| Use Case | Query |\n| --- | --- |\n| Search all logs with connections that contains \"Pass\" | `connection:*pass*` |\n| Search all logs for users with a user name that contains \"fred\" | `user_name:*fred*` |\n| Search all logs with user id's matching exactly \"123\" | `user_id:\"123\"` |\n| Search for all logs with a type starting with \"s\" | `type:s*` |\n| Search for user names that start with \"jane\" and end with \"smith\" | `user_name:jane*smith` |\n| Search for all logs in December 2018 | `date:[2018-12 TO 2018-01-01}` |\n| Search for all logs from December 10, 2018 forward | `date:[2018-12-10 TO *]` |\n| Search for all logs from January 1, 2019 at 1AM, until, but not including January 1, 2019 at 12:23:45 | `date:[2019-01-01T01:00:00 TO 2019-01-01T12:23:45}` |\n\n## Limitations\n\n*   If you get the error `414 Request-URI Too Large` this means that your query string is larger than the supported length. In this case, refine your search.\n    \n*   Log fields are not tokenized , so `description:rule` will not match a description with value `Create a rule` nor `Update a rule`. Instead, use `description:*rule`. See wildcards and exact matching.\n    \n*   The `.raw` field extension is not supported. Fields match the whole value that is provided and are not tokenized.\n    \n\nWhen calling the `GET /api/v2/logs` or `GET /api/v2/users/{user_id}/logs` endpoints using the `include_totals` parameter, the result is a JSON object containing a summary of the results and the requested logs. The JSON object looks something like:\n\n```\n{\n  \"length\": 5,\n  \"limit\": 5,\n  \"logs\": [...],\n  \"start\": 0,\n  \"total\": 5\n}\n```\n\nWhen searching for logs, the **totals** field tells you how many logs are returned in the page (similar to what the **length** field returns).\n\n## Learn more\n\n*   [View Log Events](https://auth0.com/docs/deploy-monitor/logs/view-log-events)\n*   [Log Event Type Codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes)\n*   [Filter Log Events](https://auth0.com/docs/deploy-monitor/logs/log-event-filters)\n*   [Migrate to Tenant Log Search v3](https://auth0.com/docs/troubleshoot/product-lifecycle/past-migrations/migrate-to-tenant-log-search-v3)",
    "title": "Log Search Query Syntax",
    "description": "Describes search query syntax using a subset of the Lucene query syntax to refine Auth0 log searches.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/login/logout/redirect-users-after-logout",
    "markdown": "# Redirect Users with Alternative Logout\n\nYou can redirect users to a specific URL after they logout. You will need to register the redirect URL in your tenant or application settings. Auth0 only redirects to allow list URLs after logout. If you need different redirects for each application, you can add the URLs to the allow list in your application settings.\n\n1.  Add a `returnTo` query string parameter with the target URL as the value. Encode the target URL being passed in. For example, to redirect the user to `https://www.example.com` after logout, make the following request: `https://{yourDomain}/v2/logout?returnTo=http%3A%2F%2Fwww.example.com`.\n    \n2.  Add the non-encoded `returnTo` URL (for these examples, it is `http://www.example.com`) as an **Allowed Logout URLs** in one of two places:\n    \n    *   **Tenant Settings**: For logout requests that do not include the `client_id` parameter you must add the `returnTo` URL (for example `http://www.example.com`) to the **Allowed Logout URLs** list in the [Advanced tab of your Tenant Settings](https://manage.auth0.com/#/tenant/advanced). For example: `https://{yourDomain}/v2/logout?returnTo=http%3A%2F%2Fwww.example.com`.\n        \n        To add a list of URLs that the user may be redirected to after logging out at the tenant level, go to the [Tenant Settings > Advanced](https://manage.auth0.com/#/tenant/advanced) of the Auth0 Dashboard.\n        \n        ![Auth0 Dashboard Settings Advanced Tab Login and Logout](https://images.ctfassets.net/cdy7uua7fh8z/77s6AWMuzH78ABObR3lg0o/48d7be12c2a63c3114b28cf20e57f217/dashboard-tenant-settings-advanced-login_and_logout.png)\n    *   **Auth0 Application Settings**: For logout requests that include the `client_id` parameter you must add the `returnTo` URL (for example `http://www.example.com`) to the **Allowed Logout URLs** list in the **Settings** tab of your Auth0 app that is associated with the specified `CLIENT_ID`. For example: `https://{yourDomain}/v2/logout?returnTo=http%3A%2F%2Fwww.example.com&client_id={clientId}`\n        \n        To redirect the user after they log out from a specific application, you must add the URL used in the `returnTo` parameter of the redirect URL to the **Allowed Logout URLs** list in the **Settings** tab of your Auth0 application that is associated with the `CLIENT_ID` parameter.\n        \n        ![Dashboard Applications Application Settings Application URIs](https://images.ctfassets.net/cdy7uua7fh8z/1QhW2i4fTCCp8owey2tMPI/c44593dffdcc786731930d394d0da515/Application_URIs.png)\n\nWhen providing the URL list, you can:\n\n1.  Specify multiple, valid, comma-separated URLs.\n    \n2.  Use `*` as a [wildcard for subdomains](https://auth0.com/docs/get-started/applications/wildcards-for-subdomains) (such as `http://*.example.com`).\n    \n\nIf the `client_id` parameter is included and the `returnTo` URL is not set, the server returns the user to the first Allowed Logout URLs set in the Dashboard.\n\nIn order to avoid validation errors, make sure that you include the protocol part of the URL. For example, setting the value to `*.example.com` will result in a validation error, so you should use `http://*.example.com` instead.\n\n## Federated logouts\n\n[Several providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps#federated-logout-support) support federated logout.\n\nTo redirect users from applications using federated logout, initiate federated logout with the following endpoint:\n\n`https://{yourDomain}/v2/logout?federated`\n\nYou are responsible for ensuring your application terminates the user session before redirecting.\n\nWhen the user reaches the `/logout` endpoint, Auth0 terminates the Auth0 session, redirects the user to the Identity Providers logout endpoint, and terminates the session with the Identity Provider.\n\n## Limitations\n\n*   The validation of URLs provided as values to the `returnTo` parameter, the query string, and hash information provided as part of the URL are not taken into account.\n    \n*   The behavior of federated logouts with social providers is inconsistent. Each provider will handle the `returnTo` parameter differently and for some it will not work. Please check your social provider's settings to ensure that they will accept the `returnTo` parameter and how it will behave.\n    \n*   The URLs provided in the **Allowed Logout URLs** list are case-sensitive, so the URL used for logouts must match the case of the logout URL configured on the dashboard. However, do note that the scheme and host parts are case insensitive. For example, if your URL is `http://www.Example.Com/FooHoo.html`, the `http://www.Example.Com` portion is case insensitive, while the `FooHoo.html` portion is case sensitive.\n    \n\nIf you are working with social identity providers such as Google or Facebook, you must set your `Client ID` and `Secret` for these providers in the [Dashboard](https://manage.auth0.com/#) for the logout to function properly.\n\n## Additional requirements for Facebook\n\nUse the `returnTo` parameter to specify how to redirect the user after logout.\n\nNot all IdPs support `returnTo`.\n\nFor Facebook, the example code below uses the `returnTo` parameter and specifies a website for the redirect.\n\n```\nhttps://{yourDomain}/v2/logout?federated&\n      returnTo=https://{yourDomain}/logout?returnTo=http://www.example.com\n      &access_token={facebookAccessToken}\n```\n\n## Learn more\n\n*   [Log Users Out of Applications](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-applications)\n*   [Log Users Out of Auth0 with OIDC Endpoint](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0)\n*   [Log Users Out of Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps)\n*   [Log Users Out of SAML Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-saml-idps)\n*   [Check Login and Logout Issues](https://auth0.com/docs/troubleshoot/authentication-issues/check-login-and-logout-issues)",
    "title": "Redirect Users with Alternative Logout",
    "description": "Describes how to redirect users with the legacy logout endpoint.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps",
    "markdown": "# Log Users Out of Identity Providers\n\nSome providers allow you to force a user to log out of their identity provider. Auth0 often accomplishes this by adding the `federated` query string parameter to the redirect at the `/oidc/logout` endpoint.\n\nTo do this, add a `federated` query string parameter to the logout URL:\n\n`https://{yourDomain}/oidc/logout?federated`\n\n## Federated logout support\n\nThe following identity providers support federated logout:\n\n*   Evernote\n    \n*   Facebook\n    \n*   Fitbit\n    \n*   GitHub\n    \n*   Google\n    \n    *   Apps\n        \n    *   OAuth 2.0\n        \n*   Microsoft\n    \n    *   Active Directory Federation Services\n        \n    *   Office 365\n        \n    *   Windows Azure Active Directory\n        \n    *   Windows Live\n        \n*   Salesforce/Salesforce Sandbox\n    \n*   X\n    \n*   Yahoo\n    \n*   Yammer\n    \n\n## Clear application session\n\nThe Auth0 Logout endpoint logs you out from Auth0 and, optionally, from your identity provider. It does not log you out of your application! This is something that you must implement on your side. You need to log out the user from your application by clearing their session.\n\n## Alternative logout\n\nTo add federated logout to the [alternative logout endpoint](https://auth0.com/docs/api/authentication#logout), add the `federated` query string parameter to the logout URL:\n\n`https://{yourDomain}/v2/logout?federated`\n\n### Alternative logout limitations\n\n*   No validation is performed on any URL provided as a value to the `returnTo` parameter, nor any query string or hash information provided as part of the URL.\n    \n*   The behavior of federated logouts with social providers is inconsistent. Each provider will handle the returnTo parameter differently and for some, it will not work. Please check your social provider's settings to determine how it will behave.\n    \n*   If you are working with social identity providers such as Google or Facebook, you must set your Client ID and Secret for these providers in the Dashboard for the logout to function properly.\n    \n*   If you are an Auth0 Enterprise user, you will typically have SSO enabled for multiple applications, for example, SharePoint, a few .NET applications, a few Java applications, Zendesk, etc. In this case, it's very common that when users sign out, this needs to happen for all of their applications.\n    \n\n## Learn more\n\n*   [Log Users Out of Applications](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-applications)\n*   [Log Users Out of Auth0 with OIDC Endpoint](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0)\n*   [Log Users Out of SAML Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-saml-idps)\n*   [Redirect Users with Alternative Logout](https://auth0.com/docs/authenticate/login/logout/redirect-users-after-logout)",
    "title": "Log Users Out of Identity Providers",
    "description": "Describes how to force a user to log out of their identity provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/tenants/patch-settings",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/secure/multi-factor-authentication/adaptive-mfa/adaptive-mfa-log-events",
    "markdown": "# Adaptive MFA Log Events\n\n```\n{\n  \"_id\": \"5ef3bb0a72487a0047c32959\",\n  \"date\": \"2020-06-24T20:43:54.159Z\",\n  \"type\": \"s\",\n  \"description\": \"Successful login\",\n  \"connection\": \"Username-Password-Authentication\",\n  \"connection_id\": \"con_16Tpc6YqlWZ4HCut\",\n  \"client_id\": \"9ZteveEZ8CqSLtCNXgvhoCJQ0jt2xSxe\",\n  \"client_name\": \"jwt.io\",\n  \"ip\": \"10.12.13.1\",\n  \"client_ip\": null,\n  \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0\",\n  \"details\": {\n    \"prompts\": [\n      {\n        \"name\": \"prompt-authenticate\",\n        \"completedAt\": 1593031413909,\n        \"connection\": \"Username-Password-Authentication\",\n        \"strategy\": \"auth0\",\n        \"identity\": \"5ee10b1ca85332004e44ce3e\",\n        \"stats\": {\n          \"loginsCount\": 67\n        },\n        \"elapsedTime\": null\n      },\n      {\n        \"name\": \"login\",\n        \"flow\": \"universal-login\",\n        \"initiatedAt\": 1593031371948,\n        \"completedAt\": 1593031413953,\n        \"timers\": {\n          \"rules\": 443\n        },\n        \"user_id\": \"auth0|5ee10b1ca85332004e44ce3e\",\n        \"user_name\": \"user@josh.local.dev.auth0.com\",\n        \"elapsedTime\": 42005\n      },\n      {\n        \"name\": \"mfa\",\n        \"flow\": \"universal-mfa\",\n        \"initiatedAt\": 1593031414863,\n        \"completedAt\": 1593031433795,\n        \"performed_acr\": [\n          \"http://schemas.openid.net/pape/policies/2007/06/multi-factor\"\n        ],\n        \"performed_amr\": [\n          \"mfa\"\n        ],\n        \"provider\": \"guardian\",\n        \"elapsedTime\": 18932\n      }\n    ],\n    \"initiatedAt\": 1593031371938,\n    \"completedAt\": 1593031434151,\n    \"elapsedTime\": 62213,\n    \"session_id\": \"ulYRdsS1F4wIKLpUfQDfhyXgKVJqJaEv\",\n    \"riskAssessment\": {\n      \"confidence\": \"medium\",\n      \"assessments\": {\n        \"UntrustedIP\": {\n          \"confidence\": \"high\",\n          \"code\": \"ip_not_found\"\n        },\n        \"NewDevice\": {\n          \"confidence\": \"medium\",\n          \"code\": \"match_useragent\",\n          \"details\": {\n            \"device\": \"unknown\",\n            \"useragent\": \"known\",\n          }\n        },\n        \"ImpossibleTravel\": {\n          \"confidence\": \"low\",\n          \"code\": \"missing_geoip\"\n        }\n      }\n    },\n    \"stats\": {\n      \"loginsCount\": 67\n    }\n  },\n  \"hostname\": \"josh.local.dev.auth0.com\",\n  \"user_id\": \"auth0|5ee10b1ca85332004e44ce3e\",\n  \"user_name\": \"user@josh.local.dev.auth0.com\",\n  \"strategy\": \"auth0\",\n  \"strategy_type\": \"database\"\n}\n```",
    "title": "Adaptive MFA Log Events",
    "description": "Describes tenant log events that capture Adaptive Multi-Factor Authentication (MFA) activities in Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/login/logout/back-channel-logout",
    "markdown": "# OIDC Back-Channel Logout\n\nAuth0 supports the [OpenID Connect Back-Channel Logout 1.0 specification](https://openid.net/specs/openid-connect-backchannel-1_0.html#Backchannel) in all tenants with an Enterprise plan subscription.\n\nThis specification leverages the session ID (`sid`) included in ID tokens and the Logout Tokens to coordinate session termination via back-channel communication. Different session IDs represent individual sessions of a user agent or device in your tenant. Logout Tokens identify the end-user and session to logout.\n\n## Back-channel communications\n\nTo use Back-Channel Logout, an application must expose a Back-Channel Logout URI, reachable from the tenant server, where the application expects to receive the requests with the Logout Token. When an application receives this request, it is compelled to clear the local session state matching the claims in the token.\n\n### Tokens in OIDC Back-Channel Logout communications\n\nApplications cannot rely on session cookies to determine which session to terminate when communications are performed via the back-channel. Rather, the service depends on a shared session identifier (`sid`) on ID and Logout Tokens.\n\nWhen end-users successfully authenticate with Auth0 during login, the authorization server assigns an access, ID, and Logout Token. The ID and Logout Token contain the claims your application needs in the Back-Channel Logout workflow. To learn more about claims, read [JSON Web Token Claims](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-claims).\n\n![Workflow for back-channel logout](https://images.ctfassets.net/cdy7uua7fh8z/5jQ5HogFNeD9tqUGEJuJHE/663f1f52b285f7019fd1157f5a26caf0/2023-09-29_09-32-00.png)\n\n1.  Login - During user authentication, the Auth0 tenant adds the `sid` to the ID token.\n    \n2.  Login - The application stores the received session identifier in its own session store and associates it with the application-specific session.\n    \n3.  Logout - The IdP calls the pre-registered logout callback URL and posts the Logout Token to this endpoint. The token contains the `user_id` (`sub`) and the `sid` along with other parameters.\n    \n4.  Logout - The application’s backend needs to validate the Logout Token as per OIDC spec and extract the `sid`. Then the backend can use this token to find the session associated with the identifier and terminate it as necessary.\n    \n\n### How it works\n\nThe sample use case demonstrates how Back-Channel Logout works with more than one application:\n\n![Back-channel logout multiple app use case](https://images.ctfassets.net/cdy7uua7fh8z/54mbNobsvLec0A2tz0DXUG/99ce79c9e93ffe526472d6250373778c/2023-06-20_09-39-12.png)\n\n1.  During application configuration, Application A registers a Back-Channel Logout URI with Auth0.\n    \n2.  During application configuration, Application B registers a Back-Channel Logout URI with Auth0.\n    \n3.  During end-user login, a user authenticates with Auth0 to access Application A.\n    \n4.  Auth0 sends an ID token with `sid` to Application A. To learn more, read [ID Token Structure](https://auth0.com/docs/secure/tokens/id-tokens/id-token-structure).\n    \n5.  User authenticates with Auth0 to access Application B.\n    \n6.  Auth0 sends an ID token with the same `sid` to Application B. Your application should store the session information.\n    \n7.  During logout, Application A or other entities initiate logout on the front-channel.\n    \n8.  Auth0 terminates the Auth0 session layer via session cookie.\n    \n9.  Auth0 calls Application A’s Back-Channel Logout URI and posts the Logout Token.\n    \n10.  Application A validates the Logout Token and terminates the session.\n    \n11.  Auth0 calls Application B’s Back-Channel Logout URI and posts the Logout Token.\n    \n12.  Application B validates the Logout Token and terminates the session.\n    \n\n#### Sample token\n\nYour application must be able to parse and validate JWTs to use as Logout Tokens with Auth0. To learn more, read [Validate JSON Web Tokens](https://auth0.com/docs/secure/tokens/json-web-tokens/validate-json-web-tokens). \n\nOnce your application validates and decodes your token, the contents are similar to the example below:\n\n```\n{\n  \"iss\": \"https://artex-dev.eu.auth0.com/\",\n  \"sub\": \"auth0|602e93db83fa6f00749a23e6\",\n  \"aud\": \"TuhNLv7ulXD3RfyLlSMbOvszzwJJFPpO\",\n  \"iat\": 1698160928,\n  \"exp\": 1698161048,\n  \"jti\": \"44a91215-dfb4-4dfe-a1eb-fcafa911deba\",\n  \"events\": {\n    \"http://schemas.openid.net/event/backchannel-logout\": {}\n  },\n  \"trace_id\": \"81b336a94a4a5707\",\n  \"sid\": \"375UIp_ID5mCTClIeBEHpXfGwq51tF_L\"\n}\n```\n\n### Auth0 SDKs\n\nA full example and production code is already included under the **Back-Channel Logout Example** section of our [express-openid-connect SDK](https://github.com/auth0/express-openid-connect/blob/master/EXAMPLES.md#11-back-channel-logout).\n\n## Implementation examples\n\n### Session storage\n\nThe session storage example is built in Node (Express) and based on the [Express OpenID Connect Web App Sample](https://github.com/auth0-samples/auth0-express-webapp-sample/tree/master/01-Login).\n\nIn your application sessions tab, expose the route you configured to receive the Logout Token. Validate the token and terminate the user session.\n\n**routes/index.js**\n\n```\nconst express = require('express');\nconst router = express.Router();\nconst { requiresAuth } = require('express-openid-connect');\n\n// middleware to validate the logout token\nconst requiresValidLogoutToken = require('../middlewares/validateLogoutToken');\n\n// helper function to delete user sessions\nconst deleteUserSessions = require('../utils/sessions');\n\n// new route to receive backchannel logout tokens\n// must be configured in the Application -> Sessions tab \n// in the Auth0 Management Dashboard\nrouter.post(\n  '/backchannel-logout',\n  requiresValidLogoutToken,\n  function (req, res, next) {\n    // at this point the logout token is valid, checked by requiresValidLogoutToken middleware\n    // you can access it from the request object: req.logoutToken\n\n    // delete user session so the user gets logged out\n    deleteUserSessions(\n      req.app.locals.sessionStore,\n      req.logoutToken.sub,\n      req.logoutToken.sid\n    );\n\n    res.sendStatus(200);\n  }\n);\n\nrouter.get('/', function (req, res, next) {\n  res.render('index', {\n    title: 'Auth0 Webapp sample Nodejs',\n    isAuthenticated: req.oidc.isAuthenticated(),\n    headline: process.env.APP_NAME,\n    backgroundColor: process.env.BACKGROUND_COLOR,\n    baseURL: process.env.BASE_URL,\n  });\n});\n\nrouter.get('/profile', requiresAuth(), function (req, res, next) {\n  res.render('profile', {\n    userProfile: JSON.stringify(req.oidc.user, null, 2),\n    title: 'Profile page',\n    headline: process.env.APP_NAME,\n    backgroundColor: process.env.BACKGROUND_COLOR,\n    baseURL: process.env.BASE_URL,\n  });\n});\n\nmodule.exports = router;\n```\n\n**middlewares/validateLogoutToken.js**\n\n```\n// This middleware validates the logout token as defined here:\n// https://openid.net/specs/openid-connect-backchannel-1_0.html#Validation\n\nconst jose = require('jose');\n\nasync function requiresValidLogoutToken(req, res, next) {\n\n  // get remote key set for token verification\n  const JWKS = jose.createRemoteJWKSet(\n    new URL(process.env.ISSUER_BASE_URL + '/.well-known/jwks.json')\n  );\n\n  const logoutToken = req.body.logout_token;\n\n  if (!logoutToken) {\n    res.status(400).send('Need logout token');\n  }\n\n  try {\n    const { payload, protectedHeader } = await jose.jwtVerify(\n      logoutToken,\n      JWKS,\n      {\n        issuer: process.env.ISSUER_BASE_URL + '/',\n        audience: process.env.CLIENT_ID,\n        typ: 'JWT',\n        maxTokenAge: '2 minutes',\n      }\n    );\n\n    // Verify that the Logout token contains a sub claim, a sid claim, or both\n    if (!payload.sub && !payload.sid) {\n      res\n        .status(400)\n        .send(\n          'Error: Logout token must contain either sub claim or sid claim, or both'\n        );\n    }\n\n    // Verify that the logout token contains an events claim\n    // whose value is a JSON object containing the member name http://schemas.openid.net/event/backchannel-logout\n    if (!payload.events['http://schemas.openid.net/event/backchannel-logout']) {\n      res\n        .status(400)\n        .send(\n          'Error: Logout token must contain events claim with correct schema'\n        );\n    }\n\n    // Verify that the Logout token does not contain a nonce claim.\n    if (payload.nonce) {\n      res\n        .status(400)\n        .send('Error: Logout token must not contain a nonce claim');\n    }\n\n    // attach valid logout token to request object\n    req.logoutToken = payload;\n\n    // token is valid, call next middleware\n    next();\n  } catch (error) {\n    res.status(400).send(`Error:  ${error.message}`);\n  }\n}\n\nmodule.exports = requiresValidLogoutToken;\n```\n\n### Logout token store\n\nA common approach for token storage is to define a logout store as an alternative to the session store model. Your application(s) keeps a collection of Logout Tokens in the persistence level. \n\nWherever the application wants to check its authentication status, it queries the Logout Token store to find if its session is still active. The logout store flushes obsolete information regularly to keep only the necessary information.\n\n![Logout Token Store](https://images.ctfassets.net/cdy7uua7fh8z/2zTtcie1d0fjiSuxZ4huyV/dbcf45fb68a045bd1b1918315f8025f7/image__21_.png)\n\n## Security considerations\n\nBack-Channel Logout Tokens are delivered over the internet, therefore the callback endpoints receiving them must follow the best practices to ensure reliable and secure operation. The recommendations list below is not exhaustive and you must always consider the specific deployment and operational situations to adapt accordingly. In the list below, any apps that handle the Back-Channel Logout Tokens are referenced as “apps”.\n\n*   Apps must have the ability to store the session ID (`sid` claim) received during user login in order to retrieve them later when receiving a Back-Channel Logout token.\n    \n*   Apps must verify any received tokens as per [JWT validation best practices](https://auth0.com/docs/secure/tokens/json-web-tokens/validate-json-web-tokens).\n    \n*   Apps must accept tokens issued only by trusted tenants. A malicious actor can attempt to send tokens issued by other Auth0 tenants - such attempts must be rejected.\n    \n*   Apps must accept tokens only when they contain a `sid` value (session ID) that the app recognizes. Tokens containing an invalid session ID (being it expired or unrecognized) must be rejected.\n    \n*   Apps must expose the callback endpoints only via TLS. Unencrypted communication channels are not recommended.\n    \n*   Apps are recommended to accept requests only from the published list of [outbound IP addresses](https://auth0.com/docs/secure/security-guidance/data-security/allowlist).\n    \n*   Apps are recommended to follow the general best practices in terms of monitoring, logging and rate limiting - however details of these are outside of scope of this document.\n    \n*   Apps are recommended to regularly clean stale or expired sessions.\n    \n*   Any changes in the endpoint address must be synchronised with the tenant configuration in order to ensure the Logout Tokens are always delivered to the correct Back-Channel Logout Callback URL.\n    \n\n## Learn more\n\n*   [Configure OIDC Back-Channel Logout](https://auth0.com/docs/authenticate/login/logout/back-channel-logout/configure-back-channel-logout)\n*   [Check Login and Logout Issues](https://auth0.com/docs/troubleshoot/authentication-issues/check-login-and-logout-issues)\n*   [Log Users Out of SAML Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-saml-idps)\n*   [Log Users Out of Auth0 with OIDC Endpoint](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0)\n*   [Log Users Out of Applications](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-applications)\n*   [Log Users Out of Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps)",
    "title": "OIDC Back-Channel Logout",
    "description": "Describes Auth0's OIDC Back-Channel Logout feature.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/tenants/tenant-settings-route",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/clients/patch-clients-by-id",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production",
    "markdown": "# Get Management API Access Tokens for Production\n\nTo make scheduled frequent calls for a production environment, you have to build a process at your backend that will provide you with a token automatically (and thus simulate a non-expiring token).\n\n## Prerequisites\n\n*   [Register Machine-to-Machine Applications](https://auth0.com/docs/get-started/auth0-overview/create-applications/machine-to-machine-apps).\n    \n\n## Get access tokens\n\nTo ask Auth0 for a Management API v2 token, perform a `POST` operation to the `https://{yourDomain}/oauth/token` endpoint, using the credentials of the Machine-to-Machine Application you created in the prerequisite step.\n\nThe payload should be in the following format:\n\n*   [cURL](#db090eb774e64ade9c808fe56ea6d9dd_shell)\n*   [C#](#db090eb774e64ade9c808fe56ea6d9dd_csharp)\n*   [Go](#db090eb774e64ade9c808fe56ea6d9dd_go)\n*   [Java](#db090eb774e64ade9c808fe56ea6d9dd_java)\n*   [Node.JS](#db090eb774e64ade9c808fe56ea6d9dd_node)\n*   [Obj-C](#db090eb774e64ade9c808fe56ea6d9dd_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/oauth/token' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data grant_type=client_credentials \\\n  --data 'client_id={yourClientId}' \\\n  --data 'client_secret={yourClientSecret}' \\\n  --data 'audience=https://{yourDomain}/api/v2/'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/oauth/token\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/oauth/token\"\n\n\tpayload := strings.NewReader(\"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/oauth/token\")\n  .header(\"content-type\", \"application/x-www-form-urlencoded\")\n  .body(\"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/oauth/token',\n  headers: {'content-type': 'application/x-www-form-urlencoded'},\n  data: new URLSearchParams({\n    grant_type: 'client_credentials',\n    client_id: '{yourClientId}',\n    client_secret: '{yourClientSecret}',\n    audience: 'https://{yourDomain}/api/v2/'\n  })\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/x-www-form-urlencoded\" };\n\nNSMutableData *postData = [[NSMutableData alloc] initWithData:[@\"grant_type=client_credentials\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_id={yourClientId}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_secret={yourClientSecret}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&audience=https://{yourDomain}/api/v2/\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/oauth/token\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/oauth/token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/x-www-form-urlencoded\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\"\n\nheaders = { 'content-type': \"application/x-www-form-urlencoded\" }\n\nconn.request(\"POST\", \"/{yourDomain}/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/oauth/token\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest.body = \"grant_type=client_credentials&client_id={yourClientId}&client_secret=%7ByourClientSecret%7D&audience=https%3A%2F%2F{yourDomain}%2Fapi%2Fv2%2F\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"content-type\": \"application/x-www-form-urlencoded\"]\n\nlet postData = NSMutableData(data: \"grant_type=client_credentials\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_id={yourClientId}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&client_secret={yourClientSecret}\".data(using: String.Encoding.utf8)!)\npostData.append(\"&audience=https://{yourDomain}/api/v2/\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/oauth/token\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nRemember to update `` `{yourClientSecret}` `` with the client secret in the [Settings tab of your Application](https://manage.auth0.com/#/applications/{yourClientId}/settings).\n\nThe request parameters are:\n\n| **Request Parameter** | **Description** |\n| --- | --- |\n| **grant\\_type** | Denotes which [OAuth 2.0 flow](https://auth0.com/docs/protocols/oauth2#grant-types) you want to run. For machine to machine communication use the value `client_credentials`. |\n| **client\\_id** | This is the value of the **Client ID** field of the Machine-to-Machine Application you created. You can find it on the [Settings tab of your Application](https://manage.auth0.com/#/applications/{yourClientId}/settings). |\n| **client\\_secret** | This is the value of the **Client Secret** field of the Machine-to-Machine Application you created. You can find it at the [Settings tab of your Application](https://manage.auth0.com/#/applications/{yourClientId}/settings). |\n| **audience** | This is the value of the **Identifier** field of the `Auth0 Management API`. You can find it at the [Settings tab of the API](https://manage.auth0.com/#/apis). |\n\nThe response will contain a [signed JWT](https://auth0.com/docs/secure/tokens/json-web-tokens), an expiration time, the scopes granted, and the token type.\n\n```\n{\n  \"access_token\": \"eyJ...Ggg\",\n  \"expires_in\": 86400,\n  \"scope\": \"read:clients create:clients read:client_keys\",\n  \"token_type\": \"Bearer\"\n}\n```\n\nFrom the above, we can see that our Access Token will expire in 24 hours (86400 seconds), it has been authorized to read and create applications, and it is a [Bearer Access Token](https://tools.ietf.org/html/rfc6750).\n\n### Use Auth0's Node.js client library\n\nAs an alternative to making HTTP calls, you can use the [node-auth0](https://www.npmjs.com/package/auth0) library to automatically [obtain tokens for the Management API](https://www.npmjs.com/package/auth0#user-content-management-api-client).\n\n## Use access tokens\n\nTo use this token, include it in the `Authorization` header of your request.\n\n*   [cURL](#ce0247c43d2049118245ee3c8412d354_shell)\n*   [C#](#ce0247c43d2049118245ee3c8412d354_csharp)\n*   [Go](#ce0247c43d2049118245ee3c8412d354_go)\n*   [Java](#ce0247c43d2049118245ee3c8412d354_java)\n*   [Node.JS](#ce0247c43d2049118245ee3c8412d354_node)\n*   [Obj-C](#ce0247c43d2049118245ee3c8412d354_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url http:///%7BmgmtApiEndpoint%7D \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}' \\\n  --header 'content-type: application/json'\n```\n\n```\nvar client = new RestClient(\"http:///%7BmgmtApiEndpoint%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http:///%7BmgmtApiEndpoint%7D\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"http:///%7BmgmtApiEndpoint%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'http:///%7BmgmtApiEndpoint%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer {yourMgmtApiAccessToken}'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"http:///%7BmgmtApiEndpoint%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"http:///%7BmgmtApiEndpoint%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPConnection(\"\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer {yourMgmtApiAccessToken}\"\n    }\n\nconn.request(\"POST\", \"%7BmgmtApiEndpoint%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\n\nurl = URI(\"http:///%7BmgmtApiEndpoint%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer {yourMgmtApiAccessToken}\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"http:///%7BmgmtApiEndpoint%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nFor example, in order to [Get all applications](https://auth0.com/docs/api/management/v2#!/Clients/get_clients) use the following:\n\n*   [cURL](#818b4877174e4652a801fa98f99a25ad_shell)\n*   [C#](#818b4877174e4652a801fa98f99a25ad_csharp)\n*   [Go](#818b4877174e4652a801fa98f99a25ad_go)\n*   [Java](#818b4877174e4652a801fa98f99a25ad_java)\n*   [Node.JS](#818b4877174e4652a801fa98f99a25ad_node)\n*   [Obj-C](#818b4877174e4652a801fa98f99a25ad_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/clients' \\\n  --header 'authorization: Bearer {yourAccessToken}' \\\n  --header 'content-type: application/json'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/clients\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer {yourAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/clients\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer {yourAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/clients\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer {yourAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/clients',\n  headers: {'content-type': 'application/json', authorization: 'Bearer {yourAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer {yourAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/clients\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/clients\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourAccessToken}\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer {yourAccessToken}\"\n    }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/clients\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/clients\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer {yourAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer {yourAccessToken}\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/clients\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n## Example: Python implementation\n\nThis python script gets a Management API v2 Access Token, uses it to call the [Get all applications](https://auth0.com/docs/api/management/v2#!/Clients/get_clients) endpoint, and prints the response in the console.\n\nBefore you run it make sure that the following variables hold valid values:\n\n*   `AUDIENCE`: The **Identifier** of the `Auth0 Management API`. You can find it at the [Settings tab of the API](https://manage.auth0.com/#/apis).\n    \n*   `DOMAIN`: The **Domain** of the Machine-to-Machine Application you created.\n    \n*   `CLIENT_ID`: The **Client ID** of the Machine to Machine Application you created.\n    \n*   `CLIENT_SECRET`: The **Client Secret** of the Machine-to-Machine Application you created.\n    \n\n```\ndef main():\n  import json, requests\n  from requests.exceptions import RequestException, HTTPError, URLRequired\n\n  # Configuration Values\n  domain = 'YOUR_DOMAIN'\n  audience = f'https://{domain}/api/v2/'\n  client_id = 'YOUR_CLIENT_ID'\n  client_secret = 'YOUR_CLIENT_SECRET'\n  grant_type = \"client_credentials\" # OAuth 2.0 flow to use\n\n  # Get an Access Token from Auth0\n  base_url = f\"https://{domain}\"\n  payload =  { \n    'grant_type': grant_type,\n    'client_id': client_id,\n    'client_secret': client_secret,\n    'audience': audience\n  }\n  response = requests.post(f'{base_url}/oauth/token', data=payload)\n  oauth = response.json()\n  access_token = oauth.get('access_token')\n\n  # Add the token to the Authorization header of the request\n  headers = {\n    'Authorization': f'Bearer {access_token}',\n    'Content-Type': 'application/json'\n  }\n\n  # Get all Applications using the token\n  try:\n    res = requests.get(f'{base_url}/api/v2/clients', headers=headers)\n    print(res.json())\n  except HTTPError as e:\n    print(f'HTTPError: {str(e.code)} {str(e.reason)}')\n  except URLRequired as e:\n    print(f'URLRequired: {str(e.reason)}')\n  except RequestException as e:\n    print(f'RequestException: {e}')\n  except Exception as e:\n    print(f'Generic Exception: {e}')\n\n# Standard boilerplate to call the main() function.\nif __name__ == '__main__':\n  main()\n```\n\n## Learn more\n\n*   [Get Management API Access Tokens for Testing](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-testing)\n*   [Get Management API Access Tokens for Single-Page Applications](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-tokens-for-single-page-applications)\n*   [Applications in Auth0](https://auth0.com/docs/get-started/applications)",
    "title": "Get Management API Access Tokens for Production",
    "description": "Learn how to get Access Tokens to make scheduled frequent calls to the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/tokens/id-tokens/id-token-structure",
    "markdown": "# ID Token Structure\n\nID tokens follow the [JSON Web Token (JWT)](https://auth0.com/docs/secure/tokens/json-web-tokens) standard, which means that their basic structure conforms to the typical [JWT Structure](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-structure), and they contain standard [JWT Claims](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-claims) asserted about the token itself.\n\nBeyond what is required for JWT, ID tokens also contain claims asserted about the authenticated user, which are pre-defined by the OpenID Connect (OIDC) protocol, and are thus known as standard OIDC claims. Some standard OIDC claims include:\n\n*   `name`\n    \n*   `nickname`\n    \n*   `picture`\n    \n*   `email`\n    \n*   `email_verified`\n    \n\nFor a full list of standard OIDC claims, see [OIDC specification: Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims). You can also create [custom claims](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-claims), which are claims that you define, control, and add to a token using Auth0 Actions.\n\nYou control which OIDC claims are included in the ID token consumed by your application by including specific [OpenID Connect Scopes](https://auth0.com/docs/get-started/apis/scopes/openid-connect-scopes) in a parameter when you request tokens while authenticating users. To learn how to request an ID token, see [Get ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens/get-id-tokens).\n\n## Sample ID Token\n\nThis example shows the contents of an ID token. Notice that the audience value (located in the `aud` claim) is set to the application's identifier, which means that only this specific application should consume the token. To learn more about the claims in this example, read [JSON Web Token Claims](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-claims).\n\n```\n{\n  \"iss\": \"http://my-domain.auth0.com\",\n  \"sub\": \"auth0|123456\",\n  \"aud\": \"my_client_id\",\n  \"exp\": 1311281970,\n  \"iat\": 1311280970,\n  \"name\": \"Jane Doe\",\n  \"given_name\": \"Jane\",\n  \"family_name\": \"Doe\",\n  \"gender\": \"female\",\n  \"birthdate\": \"0000-10-31\",\n  \"email\": \"janedoe@example.com\",\n  \"picture\": \"http://example.com/janedoe/me.jpg\"\n}\n```\n\n## Learn more\n\n*   [Get ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens/get-id-tokens)\n*   [Validate ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens/validate-id-tokens)\n*   [Update ID Token Lifetime](https://auth0.com/docs/secure/tokens/id-tokens/update-id-token-lifetime)",
    "title": "ID Token Structure",
    "description": "Describes how ID tokens conform to the JWT standard and contain JWT claims asserted about the token itself, standard OIDC claims about the authenticated user, and custom claims that you define, control, and add to a token using a rule.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/clients/get-clients-by-id",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations",
    "markdown": "# SAML Single Sign-On Integrations\n\nWhen you implement SAML single sign-on (SSO), it's important to consider:\n\n*   Which system(s) will serve as the authoritative source for user profile information if there's ever a conflict between two or more sources.\n    \n*   What user profile attributes each application needs.\n    \n*   How user profile information will be distributed to the systems that need it.\n    \n\n## Identity provider-initiated SSO\n\nYou typically set up a SAML federation by configuring SSO initiated by the service provider. The service provider returns a browser redirect so that the user authenticates using the IdP. After authentication, the browser redirects the user back to the service provider with a SAML assertion containing information about the authentication status. This is commonly used for consumer-facing scenarios.\n\nYou can also configure the IdP to initiate SSO instead of the service provider. In this scenario, the user invokes a URL on the IdP and is prompted to authenticate, then is redirected to the service provider with a SAML assertion. This is commonly used in enterprise scenarios. To learn more, read [Configure SAML Identity Provider-Initiated Single Sign-On](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/identity-provider-initiated-single-sign-on).\n\n## Auth0 as identity provider for SAML SSO integrations\n\nSome of the following integrations make use of the Auth0 SAML2 Web App addon.\n\n*   [Amazon Web Services](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-aws)\n    \n*   [Atlassian](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-atlassian)\n    \n*   [Cisco-WebEx](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-cisco-webex)\n    \n*   [DataDog](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-datadog)\n    \n*   [Egencia](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-egencia)\n    \n*   [Freshdesk](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-freshdesk)\n    \n*   [GitHub Enterprise Cloud](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-github-enterprise-server)\n    \n*   [GitHub Enterprise Server](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-github-enterprise-server)\n    \n*   [Google Workspace](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-idp-for-google-g-suite)\n    \n*   [Heroku](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-heroku)\n    \n*   [Hosted Graphite](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-hosted-graphite)\n    \n*   [Litmos](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-litmos)\n    \n*   [Oracle Eloqua Marketing Cloud](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-addon-eloqua)\n    \n*   [PluralSight](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-pluralsight)\n    \n*   [Sprout Video](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-sprout-video)\n    \n*   [Tableau Online](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-tableau-online)\n    \n*   [Tableau Server](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-tableau-server)\n    \n*   [Workday](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-workday)\n    \n*   [Workpath](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-auth0-as-identity-provider-for-workpath)\n    \n\nTo learn more, read [Enable SAML2 Web App Addon](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/enable-saml2-web-app-addon).\n\n## Other SAML identity provider SSO integrations\n\nAuth0 provides SSO integrations for using the following services as identity providers:\n\n*   [ADFS](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-adfs-saml-connections)\n    \n*   [Okta](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-okta-as-saml-identity-provider)\n    \n*   [OneLogin](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-onelogin-as-saml-identity-provider)\n    \n*   [PingFederate](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-pingfederate-as-saml-identity-provider)\n    \n*   [Salesforce](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-salesforce-as-saml-identity-provider)\n    \n*   [SiteMinder](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-siteminder-as-saml-identity-provider)\n    \n*   [SSOCircle](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-service-provider/configure-ssocircle-as-saml-identity-provider)\n    \n\n## Special scenarios\n\nOnce you've set up a basic SAML integration, there are a number of additional requirements you might need to implement so that your integration reflects your needs and requirements.\n\nYou have set up a connection or an application and that you're altering specific settings for an existing SAML integration, not configuring an integration from scratch.\n\nTo learn more about special scenarios, read [Configure Identity Provider-Initiated Single Sign-On](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/identity-provider-initiated-single-sign-on) and [Sign and Encrypt SAML Requests](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/sign-and-encrypt-saml-requests).\n\n## Learn more\n\n*   [SAML Identity Provider Configuration Settings](https://auth0.com/docs/authenticate/protocols/saml/saml-identity-provider-configuration-settings)\n*   [Customize SAML Assertions](https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/customize-saml-assertions)\n*   [Configure SAML Identity Provider-Initiated Single Sign-On](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/identity-provider-initiated-single-sign-on)\n*   [Sign and Encrypt SAML Requests](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/sign-and-encrypt-saml-requests)\n*   [Troubleshoot SAML Configurations](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-saml-configurations)",
    "title": "SAML Single Sign-On Integrations",
    "description": "Describes the Security Assertion Markup Language (SAML) for single sign-on (SSO) integration options. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/protocols/saml/saml-identity-provider-configuration-settings",
    "markdown": "# SAML Identity Provider Configuration Settings\n\n## Common settings\n\nThese are the settings used to configure a SAML identity provider (IdP).\n\n### post-back URL\n\nWhen using IdP-Initiated SSO, make sure to include the connection parameter in the post-back URL:\n\n```\nhttps://{yourDomain}/login/callback?connection={yourConnectionName}\n```\n\nIf you are using the [Organizations](https://auth0.com/docs/manage-users/organizations) feature, you can optionally include an organization parameter containing the organization ID of the desired organization:\n\n```\nhttps://{yourDomain}/login/callback?connection={yourConnectionName}&organization={yourCustomersOrganizationId}\n```\n\n### Entity ID\n\nThe ID of the service provider is:\n\n```\nurn:auth0:{yourTenant}:{yourConnectionName}\n```\n\nYou can create a custom Entity ID using the property `connection.options.entityId`. To learn more, read [Specify a Custom Entity ID](https://auth0.com/docs/connections/enterprise/saml#specify-a-custom-entity-id).\n\nYou can obtain the custom Entity ID value using the Get a Connection endpoint:\n\n*   [cURL](#4c28d9bb601f4acd926f9431a4450f84_shell)\n*   [C#](#4c28d9bb601f4acd926f9431a4450f84_csharp)\n*   [Go](#4c28d9bb601f4acd926f9431a4450f84_go)\n*   [Java](#4c28d9bb601f4acd926f9431a4450f84_java)\n*   [Node.JS](#4c28d9bb601f4acd926f9431a4450f84_node)\n*   [Obj-C](#4c28d9bb601f4acd926f9431a4450f84_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D' \\\n  --header 'authorization: Bearer {yourAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\")\n  .header(\"authorization\", \"Bearer {yourAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D',\n  headers: {authorization: 'Bearer {yourAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/connections/%7ByourConnectionID%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nReplace the `ACCESS_TOKEN` header value, with a Management APIv2 access token.\n\n### SAML Request Binding\n\nAlso called the **Protocol Binding**, is sent to the IdP from Auth0. If possible, dynamically set the value based on `connection.options.protocolBinding`:\n\n| `connection.options.protocolBinding` value | SAML Request Binding value |\n| --- | --- |\n| Empty value (\"\") or not present | `HTTP-Redirect` |\n| `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` | `HTTP-Redirect` |\n| `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST` | `HTTP-POST` |\n\nIf dynamically setting the value isn't possible, then set as either `HTTP-Redirect` (default) or `HTTP-Post` if you selected this option in **Protocol Binding**.\n\n### SAML Response Binding\n\nHow the SAML token is received by Auth0 from IdP, set as `HTTP-Post`.\n\n### NameID format\n\nUnspecified.\n\n### SAML assertion and response\n\nThe SAML assertion, and the SAML response can be individually or simultaneously signed.\n\n### SingleLogout service URL\n\nThis is where the SAML identity provider will send logout requests and responses:\n\n```\nhttps://{yourDomain}/logout\n```\n\nSAML logout requests must be signed by the identity provider.\n\n## Signed assertions\n\nUse the following links to obtain the public key in different formats:\n\n*   [CER](https://{yourdomain}/cer?cert=connection)\n    \n*   [PEM](https://{yourdomain}/pem?cert=connection)\n    \n*   [raw PEM](https://{yourdomain}/rawpem?cert=connection)\n    \n*   [PKCS#7](https://{yourdomain}/pb7?cert=connection)\n    \n*   [Fingerprint](https://{yourdomain}/fingerprint?cert=connection)\n    \n\nDownload the certificate in the format requested by the IdP.\n\n### IdP-initiated Single Sign-on\n\nTo learn about IdP-initiated SSO, read [Configure SAML IdP-Initiated Single Sign-On](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/identity-provider-initiated-single-sign-on).\n\n## Metadata\n\nSome SAML identity providers can accept importing metadata directly with all the required information. You can access the metadata for your connection in Auth0 here:\n\n```\nhttps://{yourDomain}/samlp/metadata?connection={yourConnectionName}\n```\n\n## Organizations\n\nUse the ACS URL for your organization in the federated IdP to start the Organizations login flow.\n\n```\nhttps://{yourDomain}/samlp?connection={yourConnectionName}&organization=${yourOrgID}\n```\n\n## Learn more\n\n*   [Locate the Connection ID or Name](https://auth0.com/docs/authenticate/identity-providers/locate-the-connection-id)\n*   [Customize SAML Assertions](https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/customize-saml-assertions)\n*   [Troubleshoot SAML Configurations](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-saml-configurations)",
    "title": "SAML Identity Provider Configuration Settings",
    "description": "Describes the SAML identity provider configuration settings. ",
    "languageCode": null
  }
]