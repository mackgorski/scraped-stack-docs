[
  {
    "url": "https://docs.stripe.com/invoicing/integration/automatic-advancement-collection",
    "markdown": "# Automatic invoice advancement | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe Invoicing handles automatic advancement and collection.\n\nUnless you explicitly disable it, invoices you create in the [Dashboard](https://dashboard.stripe.com/invoices) ​automatically finalize when they leave the draft state. Invoices you create with the API, however, ​​won’t automatically finalize. You must turn on automatic collection by setting the [auto\\_advance](https://docs.stripe.com/api/invoices/update#update_invoice-auto_advance) property on the invoice to `true`. You must also configure a webhook endpoint to receive their associated events. When you turn `auto_advance` to `false`, you’re responsible for transitioning the invoice between statuses. To learn more, see [Webhooks and finalizing invoices](https://docs.stripe.com/billing/subscriptions/webhooks#understand).\n\n#### Note\n\nWhen you turn on automatic collection, Stripe does everything to drive the invoice towards payment—including automatically finalizing draft invoices after one hour. During this wait period, the invoice shows a **Scheduled** status.\n\n## Update automatic advancement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can toggle the `auto_advance` property on `draft` and `open` invoices. Automatic advancement and collection ​​never occur on invoices that are marked `uncollectible`, `void`, or `paid`. For these invoices, `auto_advance` is always set to `false`:\n\n`curl https://api.stripe.com/v1/invoices/id \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d auto_advance=false`\n\n## Pause automatic advancement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you might want to stop Stripe from automatically advancing your invoices toward collection. For example, if you want to:\n\n*   Use your own business logic to manage the lifecycle of an invoice.\n*   ​Decide if and when to send invoice emails on a per-invoice basis.\n\n​​In both of these cases, use the `auto_advance` property to disable the automatic advancement and collection behavior.\n\n## Automatic advancement feature comparison ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you set `auto_advance` to `false`, Stripe disables most of the automatic features for Invoicing—leaving collection up to you. The following table outlines some key changes in the behavior of automatic collection, depending on whether `auto_advance` is set to `true` or `false`:\n\n| Feature | True | False |\n| --- | --- | --- |\n| Finalize drafts to open | (after [approximately 1-hour](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)) |     |\n| Emailing invoices |     |     |\n| Attempting payments |     |     |\n| Retries (email and charge) |     |     |\n| Invoice reminder emails |     |     |\n| 3D Secure reminder emails |     |     |\n| Email receipts |     |     |\n\n#### Legend![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   \\= Can be enabled depending on your settings.\n*   \\= Configurable in your settings.\n*   \\= Not enabled. The invoice isn’t automatically transitioned.",
    "title": "Automatic invoice advancement | Stripe Documentation",
    "description": "Learn how Stripe Invoicing handles automatic advancement and collection.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/au-becs-debit",
    "markdown": "# BECS Direct Debit payments in Australia\n\n## Learn how to accept payments with BECS Direct Debit in Australia.\n\nStripe users in Australia can accept Bulk Electronic Clearing System (BECS) Direct Debit payments from customers with an Australian bank account.\n\nAs part of the payment process, businesses must collect a mandate that includes the customer’s bank account details (account holder’s name, the Bank-State-Branch or BSB number, and the bank account number) and must also accept the mandate Service Agreement. This gives the business an authorization to debit the account. Stripe can generate this mandate for businesses to present to their customers.\n\nBECS Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to three business days to receive notification on the success or failure of a payment after you initiate a debit from the customer’s account.\n\nFor new users, BECS Direct Debit transactions have a default limit of 1,500 AUD per transaction and 4,500 AUD per week. If you need higher limits, contact [support](https://support.stripe.com/contact).\n\n*   **Customer locations**\n    \n    Australia\n    \n*   **Presentment currency**\n    \n    AUD\n    \n*   **Payment confirmation**\n    \n    Business-intiated\n    \n*   **Payment method family**\n    \n    Bank debits\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing BECS Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects BECS Direct Debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer completes the Direct Debit Request\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\nPreview the payment flow using the test information below or view the [sample code](https://github.com/stripe-samples/au-becs-debit-payment) on GitHub.\n\n*   Any name\n*   Any email address\n*   Test BSB number: 000-000\n*   Test bank account number: 000123456\n\n[Preview BECS payment flow](https://codesandbox.io/p/devbox/stripe-sample-au-becs-debit-payment-v0n15)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate BECS Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable BECS Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nIf you prefer to manually list payment methods or want to save BECS Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure BECS Direct Debit as a payment](https://docs.stripe.com/payments/au-becs-debit/accept-a-payment)\n*   [Save BECS Direct Debit details for future payments](https://docs.stripe.com/payments/au-becs-debit/set-up-payment)\n\n## Debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe BECS scheme advises that you notify your customer when a mandate is established and each time you debit their account. By default, Stripe automatically sends emails to the customer.\n\nIf you decide to send your customer a custom notification:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Use the [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event to trigger debit initiation emails.\n    \n*   It’s best to share (a link to) the mandate in the mandate notification\n    \n*   The pre-debit notifications ideally include:\n    \n    *   The last 4 digits of the customer’s bank account\n    *   The amount to be debited\n    *   Your contact information\n    *   The day you plan to debit the customer’s bank account\n*   The BECS guidelines suggest sending notifications at least 14 calendar days before you create a payment, but this isn’t mandatory. The default Stripe pre-debit email happens the day before the account gets debited. These pre-debit notifications should help you avoid unnecessary debit failures and disputes. For recurring payments of the same amount (for example, a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") of a fixed amount), you can include multiple upcoming debits with corresponding dates in a single notice.\n    \n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBECS Direct Debit provides a dispute process for bank account holders to dispute payments so you should familiarize yourself with this process if you decide to accept BECS Direct Debit payments.\n\nFor up to 7 years, a customer can dispute a debit payment through their bank on a “no questions asked” basis. Their bank honors all disputes within this period. If they dispute a charge and their bank accepts the request to return the funds, Stripe immediately removes the funds from your Stripe account.\n\nIf a dispute gets created, Stripe sends both the `charge.dispute.created` and `charge.dispute.closed` [webhook](https://docs.stripe.com/webhooks \"webhook\") events, and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), all BECS Direct Debit disputes are final and can’t be appealed. If a customer successfully disputes a payment, contact them to resolve the situation. ​​If you can come to an agreement and your customer is willing to return the funds to you, they need to make a new payment.\n\n#### Warning\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. You should follow the [refund guidelines](#refunds) to avoid this.\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the payment process, businesses must collect a mandate that authorizes them to debit the account. In the BECS Direct Debit system, these mandates are called Direct Debit Requests, or DDRs.\n\nBank account holders can request the cancellation of active mandates at any time. To cancel a mandate, a bank account holder must either contact their bank or the party they established the mandate with. Canceling a mandate invalidates any future debit requests that you issue using it. If you want to accept additional payments from your customer, establish a new mandate with them.\n\n### Mandate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Event name | Description |\n| --- | --- |\n| `mandate.updated` | Occurs whenever a mandate is canceled by the customer or due to a permanent debit failure. The `status` property will change to `inactive`. |\n\nYou can see the events in your Dashboard, but you should still set up a [webhook endpoint](https://docs.stripe.com/webhooks).\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for payments made with BECS Direct Debit must be issued within 90 days from the date of the original payment. Refunds require additional time to process (typically 3-5 business days). If you accidentally debit your customer, contact them immediately to avoid a payment dispute.\n\nRefunds are processed only after the payment process completes. If you create a full or partial refund on a payment that hasn’t completed yet, the refund process starts when the `Charge`​ object’s status transitions to `succeeded​`. If the `Charge`​ object’s status transitions to `failed`​, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\nBECS doesn’t explicitly label refunds when they’re deposited back into a bank account. Instead, refunds are processed as a credit and include a visible reference to the original payment’s statement descriptor.\n\nDue to longer settlement time periods and how banks process BECS Direct Debit transactions, there is potential for confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction.\n\nWhen issuing a refund, you should inform your customer immediately that the refund can take up to 5 business days to arrive in their bank account. Stripe won’t automatically send the customer any email to inform them about this.\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery BECS Direct Debit payment shows two fields on the customers’ bank statements: the _name of the merchant_ and the _lodgement reference_ unique to this transaction.\n\nFor BECS Direct Debit payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, specify the `statement_descriptor` parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nYour statement descriptor gets truncated to the first 9 alphanumeric characters in the lodgement reference, followed by a unique ID. For example, if your statement descriptor is `ROCKETRIDES`, the customer will see `ROCKETRID_XXXXXXX`.\n\nThe table below illustrates the _merchant name_ and _lodgement reference_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Lodgement reference |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `RocketRides` | `RocketRid_AB1234CD` |\n| Rocket Rides | `Sunday Ride` | `RocketRides` | `SundayRid_AB1234CD` |\n\nEach bank in Australia formats these fields differently. Depending on your customer’s bank, some fields might appear in all lowercase or all uppercase.\n\n### Statement descriptors and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the statement descriptor and the merchant name, which appear on the customer’s bank statement.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\nYou can’t use a mandate collected for a `PaymentIntent` `on_behalf_of` a Connected Account with a different Connected Account.",
    "title": "BECS Direct Debit payments in Australia | Stripe Documentation",
    "description": "Learn how to accept payments with BECS Direct Debit in Australia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/japan-config-guide",
    "markdown": "# Best practices for setting up invoices in Japan\n\nWe recommend the following best practices when you make sales to business customers because Business-to-Business (B2B) sales require compliant invoices (適格請求書等) under the [Qualified Invoice System](https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/pdf/0020006-027.pdf) (適格請求書等保存方式, also known as インボイス制度) in order for the purchaser to claim a tax credit. Registered businesses (適格請求書等発行事業者)​​ can issue this type of invoice. There’s no obligation to issue invoices for Business-to-Consumer (B2C) sales.\n\nWe don’t automatically populate all of the fields on an invoice. In Japan, a missed or improperly added field can render an invoice noncompliant. If you intend to utilize the Qualified Invoice System, make sure that you include the required fields when you prepare your invoices.\n\nYou can use [tax calculation with Stripe Tax or Tax Rates](https://docs.stripe.com/billing/taxes/collect-taxes) to assist with including tax information in your invoices.\n\n![A sample invoice with various fields annotated, to be referenced against the table below](https://b.stripecdn.com/docs-statics-srv/assets/invoice-japan-config-annotations.91eb9198fe857fae2b437125d15460a1.png)\n\n[](#Invoice-fields)\n\nThe following table explains the ways that you can populate different invoice fields with reference to the Qualified Invoice System. To make sure that your invoices are compliant and adhere to applicable geographic requirements, we recommend that you consult with your tax and legal advisors.\n\n| Key | Field | Requirements | How to populate |\n| --- | --- | --- | --- |\n| 1   | Invoice number | There’s no requirement to show invoice numbers. | Stripe populates this by default. You can change how invoices are numbered (customer or account level) in the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). |\n| 2   | Date of issue | You must use this field to list the transaction date (取引年月日), or set line item supply dates. | Stripe populates this by default. |\n| 3   | Date due | While there’s no requirement to display the date that a customer must pay an invoice by, it’s a best practice to do so. | Stripe populates this by default. |\n| 4a  | Business company name (適格請求書発行事業者の氏名又は名称) | This is required. | Stripe populates this by default from the value in [**Public business information**](https://dashboard.stripe.com/settings/public) section of the Dashboard. |\n| 4b  | Business company address | There’s no requirement to display your address. | Enter your **Support address** under [Public business information](https://dashboard.stripe.com/settings/public). You can also default to your business address as listed in your [account settings](https://dashboard.stripe.com/settings/account). |\n| 5   | Business registration number | ​​Invoices require a business registration number (適格請求書発行事業者の登録番号). | Add your business registration number as **JP TRN** in your [invoice settings](https://dashboard.stripe.com/settings/billing/invoice). |\n| 6a  | Recipient name (書類の交付を受ける事業者の氏名又は名称) | This is required. | Stripe populates this by default from the Customer details. |\n| 6b  | Recipient address | There’s no requirement to display the recipient address. | You can add this field by clicking the **Additional details** button when you first create a customer. |\n| 7   | Name of the good or service (取引内容) | This is required. | Stripe populates this by default from the Invoice Items. |\n| 8   | Invoice line item supply date (取引年月日) | This is required when the supply date of individual line items is different from the invoice send date. | You can display line item supply dates by clicking the toggle under **Item options**. |\n| 9   | Price of the good or service | It’s considered a best practice to show the unit price, quantity, and total payable amount for each invoice line item. | Stripe populates this by default. |\n| 10  | Invoice line item tax rate percentage | This is required to indicate if an item is subject to the reduced tax rate (軽減税率). It’s sufficient to display the tax percentage amount for an invoice line item. You aren’t required to display the cash amount of the tax per invoice line item. | Determine the tax to display on an invoice using either of the following methods:<br><br>*   Use [Stripe Tax](https://docs.stripe.com/tax/invoicing) to automatically calculate the tax.<br>*   Or, manually add the tax rate when you create an item:<br>    1.  Select **Item taxes and coupons**.<br>    2.  Enter your desired tax rate.<br>    3.  **Create a [new tax rate](https://dashboard.stripe.com/test/tax-rates)**.<br>    4.  On the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page, configure the taxes to round after subtotaling. This setting applies to all invoices generated from your account. |\n| 11  | Invoice subtotal (excludes tax) | This is required. | Stripe populates this by default. |\n| 12  | Total tax amounts and rates (税率ごとに区分して合計した対価の額、適用税率、消費税額) | This is required and must include the total tax amount per tax rate. | Stripe populates this by default. |\n| 13  | Invoice total (includes tax) | This is required. | Stripe populates this by default. |\n\n[](#facilitate-customer-payment)\n\nAfter you set up your invoices to meet Japanese requirements, you can facilitate customer payment by:\n\n*   Adding the most popular Japanese payment methods. By accepting a wider range of payment methods, such as [Bank Transfers](https://docs.stripe.com/payments/bank-transfers), you can lower your costs and increase conversions (especially with large customers).\n*   Using the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page).\n*   [Localizing your Invoices](https://docs.stripe.com/invoicing/customize#customer-language) to the language of your customers.\n*   Allowing a single invoice to be [paid over multiple due dates](https://docs.stripe.com/invoicing/payment-plans). By reflecting a payment schedule, you can extend more flexible net terms or collect a deposit.\n    \n    If you provide a financial product or service, please consult with your legal advisors regarding applicable restrictions and requirements before setting up invoices. Installment payments, lending, credit, and Buy Now Pay Later services are subject to regulation in Japan and you may need to register or obtain approvals before engaging in those services.\n    \n\n[](#refunds)\n\nIf you need to produce a refund document (適格返還請求書) for your customer, you can [issue a credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes). If you’ve completed the steps above to create invoices with the necessary fields, such as your business registration number (適格請求書発行事業者の登録番号), the credit notes will also contain them.\n\n[](#connect-platforms)\n\nMake sure your connected account’s invoices contain the necessary information required by the Qualified Invoice System, such as the account’s tax ID and business details. You can [configure the information](https://docs.stripe.com/invoicing/connect#account-tax-ids) shown on invoices and receipts that Connect creates.\n\nIf you use manual taxes on invoices, [configure](https://docs.stripe.com/billing/taxes/tax-rates#rounding) the taxes to round after subtotaling, rather than at the line item level. This setting applies to all invoices generated across your connected accounts and across different geographies.",
    "title": "Best practices for setting up invoices in Japan | Stripe Documentation",
    "description": "Learn the best practices for setting up invoices in Japan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/global-config-guide",
    "markdown": "# Best practices for setting up invoices in Europe\n\nThe following table explains the ways that you can populate different invoice fields. To ensure that your invoices are compliant and adhere to geographic and business regulations, Stripe recommends that you consult with your tax and legal advisors.\n\n| Key | Field | Required? | How to populate |\n| --- | --- | --- | --- |\n| 1   | Invoice number | This is always required. | Stripe populates this by default. You can change how invoices are numbered (customer or account level) in the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). |\n| 2   | Date of issue | This is always required. | Stripe populates this by default. |\n| 3   | Date due | There’s no requirement to display the date by which a customer must pay an invoice. However, it’s a best practice. | Stripe populates this by default. |\n| 4a  | Merchant company name | This is always required. | Stripe populates this by default. |\n| 4b  | Merchant company address | Sending an invoice to another business always requires this field. | Enter your **Support address** under [Public business information](https://dashboard.stripe.com/settings/public). You can also default to your business address as listed in your [account settings](https://dashboard.stripe.com/settings/account). |\n| 5   | Merchant VAT ID | ​​Invoices generally require a merchant VAT ID (or tax ID). If you sell goods or services to a business customer in another EU country, you must mention your VAT ID, which is a number that contains a country prefix. | Add your relevant tax or VAT ID by navigating to **Manage tax information** in the **Invoice template**. |\n| 6a  | Recipient name | This is always required. | Stripe populates this by default. |\n| 6b  | Recipient address | This is always required. | You can add this field by clicking the **Additional details** button when you first create a customer. |\n| 7   | Recipient VAT ID | Sending an invoice to another business typically requires this field. ​​If you sell goods or services to a business customer in another EU country, you must mention the customer’s VAT ID, which is a number that contains a country prefix. | You can add this field by:<br><br>1.  Clicking **Add additional details** (just like with the recipient address) when you create a new customer, and scrolling down to **Tax ID** at the bottom of the dialog.<br>2.  Adding it as a custom field under **Advanced options** when you create an invoice. |\n| 8   | Name of the good or service | This is always required. | Stripe populates this by default. |\n| 9   | Invoice line item supply date | This is always required when the supply date of individual line items is different from the invoice send date. | You can display line item supply dates by clicking the toggle under **Item options**. |\n| 10  | Price of the good or service | For an invoice to be compliant, it must display tax-exclusive prices. For each invoice line item, you must show the following:<br><br>1.  Unit price (excluding VAT).<br>2.  Quantity.<br>3.  Any applicable discounts.<br>4.  Total amount payable (excluding VAT), which is the unit price times the quantity, minus discounts. | You must display tax-exclusive prices to comply with EU invoicing rules.1 |\n| 11  | Invoice line item tax rate percentage2 | This is always required. It’s sufficient to display the tax percentage amount for an invoice line item. You’re not required to display the cash amount per invoice line item. | You can determine the tax to display on an invoice by:<br><br>1.  Using [Stripe Tax](https://docs.stripe.com/tax/invoicing) to automatically calculate the tax.<br>2.  ​​Manually adding the tax rate when you are create an item. Select **Item taxes and coupons**, enter your desired tax rate, then **Create a [new tax rate](https://dashboard.stripe.com/test/tax-rates)**. |\n| 12  | Invoice subtotal (excludes VAT) | This is always required. | Stripe populates this by default. |\n| 13  | VAT amount | This is always required. | Stripe populates this by default. |\n| 14  | Invoice total (includes VAT) | This is always required. | Stripe populates this by default. |\n| N/A | Custom fields | In some European countries, you must also display additional information including the business registration number, purchase order (PO), or payment due date. | Under **Advanced options** in the [Invoice Editor](https://dashboard.stripe.com/invoices/create), click **Add custom field**. |\n\n1To display tax-exclusive prices with Stripe Tax, select **No** under **Include tax in price** to exclude tax. This excludes tax in prices in the invoice PDF, the Invoice Details page, and in the invoice email. You can also select **Yes** under **Include tax in price**, then check the **Display tax-exclusive prices** option in the **Items Options** dialog of the **Items** section. This excludes tax in prices in the invoice PDF, but includes tax on the Invoice Details page and in the email. If you’re adding tax rates manually for a business, you can either set **Include tax in price** to **No**, or set **Include tax in price** to **Yes** and check **Display tax-exclusive prices** in the **Items Options** dialog. The second approach includes tax on the Invoice Details page and in the email, but not in the invoice PDF.\n\n2​​If a transaction isn’t subject to tax, you must state the reason for not applying it. For example, if the tax liability shifts to your customer (that is, your customer now has to account for tax), you must mention it as a “reverse charge” on the invoice. In the case of an EU business selling to another EU business, you must mention “zero-rated intra-Community supply.\" To include these references in your invoice, add a custom field under **Advanced options** in the [Invoice Editor](https://dashboard.stripe.com/test/invoices/create).",
    "title": "Best practices for setting up invoices in Europe | Stripe Documentation",
    "description": "Learn the best practices for setting up invoices in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/bacs-debit",
    "markdown": "# Bacs Direct Debit payments in the UK\n\n## Learn how to accept payments with Bacs Direct Debit in the UK.\n\nStripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account.\n\nTo debit an account, businesses must collect a mandate from their customers. The mandate includes the customer’s sort code, account number, name, email, and full address. Stripe can generate this mandate for businesses to present to their customers.\n\nBACS Direct Debit transactions have a limit of 100,000 GBP each. New users have an additional weekly limit of 10,000 GBP, which quickly increases as you process more BACS Direct Debit payments. If you need higher limits, [contact support](https://support.stripe.com/?contact=true).\n\nBacs Direct Debit is a [reusable, delayed notification payment method](https://docs.stripe.com/payments/payment-methods#payment-notification). That means it takes 3 business days to confirm the success or failure of a payment when a mandate is already in place, but when you must collect a new mandate, it can take 6 business days.\n\n*   **Customer locations**\n    \n    UK\n    \n*   **Presentment currency**\n    \n    GBP\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing Bacs Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bacs Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bacs Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bacs Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save Bacs Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure Bacs Direct Debit as a payment](https://docs.stripe.com/payments/bacs-debit/accept-a-payment)\n*   [Save Bacs Direct Debit details for future payments](https://docs.stripe.com/payments/bacs-debit/save-bank-details)\n\n## Debit notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit requires that customers are notified of the following:\n\n*   When payment details are initially collected and confirmed\n*   Each time a debit will be made on their account\n\nBy default, Stripe automatically sends emails to the customer for the above cases. You can [customize the colors and logo](https://dashboard.stripe.com/account/branding) for these emails to fit the design and branding of your business.\n\nIf you require sending your own customer email notifications, [follow these steps](https://docs.stripe.com/payments/bacs-debit/email-customization) to customize your Business Display Name and contact us for approval of your email templates.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit provides a [dispute process](https://stripe.com/legal/bacs-direct-debit-guarantee) for customers to dispute payments.\n\n#### Caution\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank for an unlimited period of time.\n\nWhen a dispute is created, Stripe sends a `charge.dispute.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") event and deducts the dispute amount from your Stripe balance. Bacs Direct Debit disputes don’t incur a fee.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), Bacs Direct Debit disputes are final and can’t be appealed. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of the payment process, businesses must collect a mandate which gives them authorization to debit an account. For Bacs, this mandate is called a Direct Debit Instruction, or DDI. You can find information on how to collect a mandate with Stripe [Checkout](https://docs.stripe.com/payments/checkout) on the [Accept a payment](https://docs.stripe.com/payments/bacs-debit/accept-a-payment) page.\n\nCustomers can request the cancellation of a mandate at any time. To cancel a mandate, a customer must either reach out to the party they established the mandate with, or to their bank. Canceling a mandate invalidates any future debit requests that you issue using this mandate. If you want to accept additional payments from your customer, you need to establish a new mandate with them.\n\n### Mandate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe mandate can change at any time after you’ve collected it. This might be the result of the customer instructing their bank to amend the mandate or because of a change in the bank itself (for example, the customer changes to a different one). Stripe sends the following events when the mandate changes:\n\n| Event name | Description | Can accept payments? |\n| --- | --- | --- |\n| `mandate.updated` | Occurs whenever a mandate is rejected, canceled, or reactivated by the Bacs network. Check [mandate.status](https://docs.stripe.com/api/mandates/object#mandate_object-status) to determine if the mandate can continue to be used. | Yes, if the new status is `active` |\n| `payment_method.automatically_updated` | Occurs when a customer’s bank account details change. | Yes |\n\nThese events are available in the [Dashboard](https://dashboard.stripe.com/events), but you can set up a [webhook](https://docs.stripe.com/webhooks \"webhook\") to handle these programatically.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for payments made with Bacs Direct Debit must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically 3-4 business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\n#### Warning\n\nRefunds aren’t part of the Bacs Direct Debit scheme and are provided outside of Bacs Direct Debit by Stripe. Since Bacs Direct Debit has an indefinite indemnity period, if a customer creates a [dispute](https://docs.stripe.com/disputes) _any time after_ a refund has been issued, you can lose both the disputed amount and the amount you refunded separately.\n\nYou can issue full or partial refunds for Direct Debit payments by using the API to [create a refund](https://docs.stripe.com/api#create_refund) with the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object.\n\nRefunds are processed only after the payment process is complete. If you create a full or partial refund on a payment that hasn’t completed yet, the refund process starts when the [Charge](https://docs.stripe.com/api/charges/object) object’s status transitions to `succeeded`. If the [Charge](https://docs.stripe.com/api/charges/object) object’s status transitions to `failed`, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\n## Timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt takes 3 business days to confirm the success or failure of a Bacs Direct Debit payment when a mandate is already in place and 6 business days when a new mandate must be collected. Payments made after 20:00 UTC are submitted the following business day.\n\nIn some cases, the bank might notify us of a payment failure after the payment has been marked as successful in your Stripe account. In this case the payment failure is identified as a dispute with the appropriate reason code.\n\nThis table shows the Bacs timeline in business days from the time (T) that a payment is made when a new mandate must be collected:\n\n|     |     |\n| --- | --- |\n| T+0 | Mandate submitted |\n| T+3 | Mandate is active and the payment is submitted |\n| T+5 | Funds leave the customer’s bank account |\n| T+6 | Funds are available in Stripe |\n\n## Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Checkout](https://stripe.com/checkout) creates a secure, Stripe-hosted payment page that lets you collect payments quickly. You can use Checkout to collect Bacs Direct Debit payments, or collect payment details that you can use to initiate payments at a later date.\n\n### Request the bacs\\_debit\\_payments capability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatforms in the UK don’t need to request the `bacs_debit_payments` capability for their UK Connect accounts when performing [destination charges](https://docs.stripe.com/connect/destination-charges). Platforms outside the UK might still need to process Bacs Direct Debit payments for their UK Connect accounts, and they must have the `bacs_debit_payments` capability enabled.\n\nIn both scenarios, you must [request the `bacs_debit_payments` capability](https://docs.stripe.com/connect/account-capabilities) if you want to use the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of) parameter.\n\nRequesting the `bacs_debit_payments` capability with `settings.bacs_debit_payments.display_name` automatically enables custom branding. This allows you to collect mandates using the connected account’s chosen display name as the statement descriptor.\n\nEach account that uses custom branding incurs a 50 GBP monthly fee.\n\nIf you don’t want to use custom branding, you can do either of the following:\n\n*   Request the capability without specifying `settings.bacs_debit_payments.display_name`\n*   Set the default value of `settings.bacs_debit_payments.display_name = Stripe` before requesting the capability\n\n## Custom Branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpgrade to Custom Branding if you want to customize your customer’s bank statements, Stripe Checkout, and customer emails for direct debits to show your business name.\n\nYou can enable Custom Branding for your account in your [Bacs Direct Debit settings](https://dashboard.stripe.com/settings/payment_methods).\n\nFor your Express or Custom accounts, you can enable Custom Branding by selecting `settings.bacs_debit_payments.display_name` in the [API](https://docs.stripe.com/api/accounts/object#account_object-settings-bacs_debit_payments-display_name).\n\nYou can do this during account creation or when updating the account after setup.\n\nIf you request the `bacs_debit_payments` capability without specifying `settings.bacs_debit_payments.display_name`, the account defaults to Stripe branding.\n\nCustom Branding is charged at 50 GBP per active month. Your business name is shown for new mandates created 5 business days after your request. To expedite Custom Branding or apply it to multiple connected accounts for a single fee, [contact us](https://support.stripe.com/contact).\n\nIf you don’t use your custom branding for a long period of time, your account automatically reverts back to the default Stripe branding.",
    "title": "Bacs Direct Debit payments in the UK | Stripe Documentation",
    "description": "Learn how to accept payments with Bacs Direct Debit in the UK.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sepa-debit",
    "markdown": "# SEPA Direct Debit payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Single Euro Payments Area (SEPA) Direct Debit, a common payment method in the European Union.\n\nThe [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. They established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region.\n\nIn order to debit an account, businesses must collect their customer’s name and bank account number in IBAN format. During the payment flow, customers must accept a mandate that gives the business an authorization to debit the account. Stripe is able to generate this mandate for businesses to present to their customers. Locate the ID of the mandate used for this payment on the Charge under the [payment\\_method\\_details.sepa\\_debit.mandate](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property. Then, use the mandate ID to [retrieve the Mandate](https://docs.stripe.com/api/mandates/retrieve).\n\nSEPA Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to 14 business days to receive notification on the success or failure of a payment after you initiate a debit from the customer’s account, though the average is 7 to 8 business days.\n\nSEPA Direct Debit transactions have a limit of 10,000 EUR each. For new users, there’s an additional weekly limit of 10,000 EUR, which quickly increases as you process more SEPA direct debit payments. If you need higher limits, [contact support.](https://support.stripe.com/contact)\n\n*   **Customer locations**\n    \n    Europe\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Recurring Payments**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Refunds/ Partial refunds**\n    \n    Yes/yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing SEPA Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") selects SEPA Direct Debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer provides full name, IBAN, and authorizes mandate\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate SEPA Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable SEPA Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add SEPA Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save SEPA Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure SEPA Direct Debit as a payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Save SEPA Direct Debit details for future payments](https://docs.stripe.com/payments/sepa-debit/set-up-payment)\n\n## Debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [SEPA Direct Debit rulebook](http://www.europeanpaymentscouncil.eu/index.cfm/sepa-direct-debit/sepa-direct-debit-core-scheme-sdd-core) requires that you notify your customer each time you debit their account. For this case, by default, Stripe automatically sends the customer an email.\n\n#### Note\n\nWhen processing SEPA Direct Debit payments using the Stripe [Creditor ID](https://docs.stripe.com/payments/sepa-debit#creditor-identifiers-(creditor-id)), debit notification emails are always sent automatically by Stripe.\n\nIf you decide to send your customer a custom notification:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails). However, if you use the Sources API, you can only control emails using [mandate.notification\\_method](https://docs.stripe.com/api/sources/update#update_source-mandate-notification_method) (for more information, see [notifying customers of recurring payments](https://docs.stripe.com/sources/sepa-debit#notifying-customers-of-recurring-payments)).\n*   Use the [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event to trigger debit initiation emails.\n*   The email must include:\n    *   The last 4 digits of the debtor’s bank account\n    *   The mandate reference (`sepa_debit[reference]` on the Mandate)\n    *   The amount to be debited\n    *   Your SEPA creditor identifier\n    *   Your contact information\n*   It’s standard to send notifications at least 14 calendar days before you create a payment. However, SEPA rules let you send notifications closer to the payment date—just make sure your mandate clearly states when customers can expect to receive a notification. The mandate provided by Stripe specifies this can happen up to two calendar days in advance of future payments, allowing you to send notifications at payment creation. For recurring payments of the same amount (for example, a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") of a fixed amount), you may indicate multiple upcoming debits with corresponding dates in a single notice.\n\n## Creditor Identifiers (Creditor ID)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA SEPA Creditor Identifier (Creditor ID) is an ID associated with each SEPA Direct Debit payment that identifies the company requesting the payment. While companies may have multiple creditor identifiers, each creditor identifier is unique and allows your customers to easily identify the debits on their account.\n\nBy default your Stripe account is configured to use a Stripe Creditor ID when collecting SEPA Direct Debit Payments. `Stripe Payments` will appear on bank statements alongside your configurable [Stripe statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). We recommend configuring a recognizable statement descriptor to ensure customers recognize payments and to reduce the risk of disputes. If you’re using the Stripe Creditor ID, we also recommend you use Stripe Checkout to collect mandates from your customers for SEPA Direct Debits.\n\nIf you’re based in the EU, Stripe recommends that you use your own Creditor ID to both reduce dispute rates and improve your customer experience. You can configure your own Creditor ID on the [Payment Method Settings](https://dashboard.stripe.com/settings/payment_methods) page. When using your own Creditor ID your business name appears on statements instead of Stripe’s and you can use the [Stripe statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) for per-payment customization.\n\n#### Note\n\nAfter you’ve collected live SEPA Direct Debit payments on your account, you can’t change your Creditor ID in the dashboard. If you need help with this issue, contact [Stripe support](https://support.stripe.com/contact) for information about migrating to a new Creditor ID.\n\n### Creditor identifiers and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the creditor identifier and name which appear on the customer’s bank statement.\n\n## Failed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Debit payment failures can occur for a number of reasons, such as a customer’s account being frozen or having insufficient funds.\n\nWhen a payment fails, Stripe provides a failure reason in the `failure_code` field on the `Charge`. Stripe also provides an extended description in the `failure_message` field on the `Charge`.\n\nThe following table lists the possible SEPA Debit payment failure codes with recommended next steps.\n\n| Failure code | Explanation | Next steps |\n| --- | --- | --- |\n| refer\\_to\\_customer | We don’t have detailed information about the payment failure because your customer’s bank didn’t provide a reason code. | Reach out to your customer for additional information. |\n| insufficient\\_funds | The payment process can’t be completed because your customer’s bank account lacks the necessary funds. | Reach out to your customer to verify that they have the required funds, then retry the transaction. |\n| debit\\_disputed | Your customer requested that their bank refund this payment. | Reach out to your customer to resolve any dispute, then retry the transaction. |\n| authorization\\_revoked | Your customer revoked their authorization and refused this payment. | Reach out to your customer to understand the reasons for this revocation, then collect a new mandate and retry the transaction. |\n| debit\\_not\\_authorized | The payment lacks an authorized mandate. | Collect a new mandate and retry the transaction. |\n| account\\_closed | The payment can’t be processed because your customer’s bank account is closed. | Reach out to your customer for new account details, then try the transaction again. |\n| bank\\_account\\_restricted | The payment can’t be processed because your customer’s bank has blocked Direct Debits, due to either the bank’s actions or your customer’s. | Reach out to your customer to understand the reason for the block. If the bank unblocks the account, attempt the transaction again. |\n| debit\\_authorization\\_not\\_match | The transaction can’t be processed due to missing or incorrect mandate information. | Collect a new mandate from your customer, then attempt the transaction again. |\n| recipient\\_deceased | The mandate was set up on the account of a possibly deceased individual. | Verify your customer’s status before proceeding further. |\n| branch\\_does\\_not\\_exist | The payment can’t be processed because the bank branch associated with your customer’s IBAN does not exist. | Reach out to your customer to provide new bank details, then attempt the transaction again. |\n| incorrect\\_account\\_holder\\_name | The transaction can’t be processed because your customer’s account information is missing or incorrect. | Collect a new mandate and ask your customer to provide their name and address exactly as it appears on their bank account. Then, retry the transaction. |\n| invalid\\_account\\_number | The transaction can’t be processed because the IBAN provided by your customer is incorrect. | Reach out to your customer for correct bank details, then attempt the transaction again. |\n| generic\\_could\\_not\\_process | Stripe can’t identify a particular reason for the payment failure. | Reach out to [https://stripe.com/support](https://stripe.com/support) for more information. |\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Direct Debit provides a dispute process for customers to dispute payments.\n\nCustomers can dispute a payment through their bank on a “no questions asked” basis up to eight weeks after their account is debited. Any disputes within this period are automatically honored.\n\nAfter eight weeks and up to 13 months, a customer can only dispute a payment with their bank if the debit is considered unauthorized. If this occurs, we automatically provide the bank with the mandate that the customer approved. This does not guarantee cancellation of the dispute; the bank can still decide that the debit was unauthorized and the customer is entitled to a refund.\n\nA dispute can also occur if the bank is unable to debit the customer’s account because of an issue (for example, the account is frozen or has insufficient funds), but has already provided the funds to make the charge successful. If this occurs, the bank reclaims the funds in the form of a dispute.\n\nWhen a dispute is created, a `charge.dispute.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") event is sent and Stripe deducts the dispute amount and dispute fee from your Stripe balance. The dispute fee varies based on your account’s default settlement currency:\n\n| Settlement Currency | Failure Fee | Dispute Fee |\n| --- | --- | --- |\n| AUD | 5 AUD | 25 AUD |\n| BGN | 7 BGN | 30 BGN |\n| CAD | 5 CAD | 20 CAD |\n| CHF | 3 CHF | 15 CHF |\n| CZK | 85 CZK | 360 CZK |\n| DKK | 25 DKK | 115 DKK |\n| EUR | 3.50 EUR | 15 EUR |\n| GBP | 3 GBP | 13 GBP |\n| HKD | 30 HKD | 130 HKD |\n| HUF | 1350 HUF | 5750 HUF |\n| JPY | 550 JPY | 2375 JPY |\n| MXN | 65 MXN | 280 MXN |\n| NOK | 40 NOK | 175 NOK |\n| NZD | 5 NZD | 30 NZD |\n| PLN | 15 PLN | 65 PLN |\n| RON | 15 RON | 75 RON |\n| SEK | 40 SEK | 175 SEK |\n| SGD | 5 SGD | 20 SGD |\n| USD | 5 USD | 15 USD |\n| ZAR | 70 ZAR | 300 ZAR |\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), SEPA Direct Debit disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\nIn general, each dispute includes the reason for its creation, but this varies from country to country. For example, disputed payments in Germany do not provide additional information for privacy reasons.\n\nIf a payment is disputed, and that payment is associated with a multi-use mandate, that mandate could be deactivated. Make sure to check the status of such mandates after a dispute. You have to recollect mandate acceptance from your customers if their previous mandate is deactivated.\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Direct Debit payments are subject to a 5 business day [payout timing](https://docs.stripe.com/payouts#standard-payout-timing) if your current payout timing is less than 5 business days or 7 calendar days. When you reach 35,000 USD of SEPA Direct Debit processing volume, payout timing for SEPA Direct Debit payments returns to normal.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers can dispute a payment with their bank even after it has been refunded, resulting in two credits for the same payment. To prevent fraud, refunds may be disabled upon first refund attempt until your account has been reviewed. The review can take up to 2 business days. If you need assistance processing a refund please contact us via [support.stripe.com/contact](https://support.stripe.com/contact/) for further information.\n\nFor accounts with refunds enabled, Stripe recommends issuing refunds on SEPA Direct Debit payments only when:\n\n*   It is a trusted and verified customer\n*   You have confirmed with the customer that you’re refunding the payment\n*   7 business days have passed since you initiated the payment\n\nRefunds for payments made with SEPA Direct Debit must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically three to four business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\nSEPA does not explicitly label refunds when the funds are deposited back to a customer’s bank account. Instead, refunds are processed as a credit and include a visible reference to the original payment’s statement descriptor.\n\nWhen issuing a refund, you should inform your customer immediately that the refund can take up to five business days to arrive in their bank account.",
    "title": "SEPA Direct Debit payments | Stripe Documentation",
    "description": "Learn about Single Euro Payments Area (SEPA) Direct Debit, a common payment method in the European Union.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/what-is-link",
    "markdown": "# Link authentication and payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Link works.\n\n[Link](https://stripe.com/payments/link) is Stripe’s fast-checkout solution. It securely saves and autofills customer address and payment details, with support for credit cards, debit cards, US bank accounts, and other payment methods. Customers can save their shipping and payment details on your site or the checkout page of a different business—Link saves and autofills the information on any site where Link’s enabled.\n\nIf your customer wants to make changes to their account, view their purchase history, or reach out to the Link customer support team, have them visit [link.com](https://www.link.com/).\n\n## Link authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s how Link authenticates existing customers:\n\n1.  Link automatically detects if a customer is enrolled by using their email address, phone number, or browser cookie.\n2.  The customer receives a one-time passcode to authenticate their session.\n3.  After authentication succeeds, Link autofills their card (or bank payment) details and shipping information, allowing them to pay with one click.\n4.  After a customer enrolls with Link, they can add backup payment methods and change shipping addresses.\n\nLink is a wallet and works with [Checkout](https://docs.stripe.com/payments/checkout), [Payment Links](https://docs.stripe.com/payment-links), [Web Elements](https://docs.stripe.com/payments/elements), [Mobile Elements](https://docs.stripe.com/payments/link/mobile-payment-element-link), and [Invoicing](https://docs.stripe.com/invoicing). To accept payments using Link, go to your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n\n## Link instant bank payments Beta ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink instant bank payments let you accept payments from customers with a US bank account. This gives your customers a choice in how they pay without you needing to manage the operational complexity of [ACH Direct Debit](https://docs.stripe.com/payments/ach-debit).\n\nUnlike ACH Direct Debit, where it can take up to four business days to successfully process a transaction, Link instant bank payments are instantly authorized. With this, settlement timing matches your card payments and you’re protected from bank-initiated returns that might occur after authorization.\n\nYou can’t accept both ACH Direct Debit and Link instant bank payments. If you’d rather accept ACH Direct Debit, you can toggle it on in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). To learn more about ACH transaction fees, see its [pricing details](https://stripe.com/pricing#pricing-details).\n\n#### Note\n\nAccess to Link instant bank payments is currently limited to beta users. If you’re interested in getting early access, please enter your email address in the signup form below.\n\nWhen Link instant bank payments is enabled, a **Bank** tab appears on your checkout page. To be eligible for this beta, you must meet the following conditions:\n\n*   Your integration must use Checkout or the Payment Element.\n*   **Enablement**: You must enable Link on your account through your [payment settings dashboard](https://dashboard.stripe.com/settings/payment_methods) or [Link settings](https://dashboard.stripe.com/settings/link). You must also disable ACH Direct Debit in your payment method settings.\n*   **Parameters**: You use [automatic\\_payment\\_methods](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods) in your integration. Alternatively, you can update your integration to set [payment\\_method\\_type](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types) to `link`.\n*   **Two-step authentication**: You’ve enabled [two-step authentication](https://support.stripe.com/questions/enable-two-step-authentication) on your Stripe account.\n*   **Onboarding criteria**: You must satisfy a set of onboarding criteria, including but not limited to: being a US business and having a history of Stripe usage.",
    "title": "Link authentication and payments | Stripe Documentation",
    "description": "Learn how Link works.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/address-element/collect-addresses?platform=react-native",
    "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nUse the Address Element to collect local and international addresses for your customers.\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they are taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for your user to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.6061212dc737aa700b79242cb5f77782.png)\n\n[](#react-native-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [React Native SDK](https://github.com/stripe/stripe-react-native) is open source and fully documented. Internally, it uses the native [iOS](https://github.com/stripe/stripe-ios) and [Android](https://github.com/stripe/stripe-android) SDKs. To install Stripe’s React Native SDK, run one of the following commands in your project’s directory (depending on which package manager you use):\n\n`yarn add @stripe/stripe-react-native`\n\nNext, install some other necessary dependencies:\n\n*   For iOS, navigate to the **ios** directory and run `pod install` to make sure that you also install the required native dependencies.\n*   For Android, you don’t need to install any more dependencies.\n\n### Stripe initialization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initialize Stripe in your React Native app, either wrap your payment screen with the `StripeProvider` component, or use the `initStripe` initialization method. Only the API [publishable key](https://docs.stripe.com/keys#obtain-api-keys) in `publishableKey` is required. The following example shows how to initialize Stripe using the `StripeProvider` component.\n\n`import { StripeProvider } from '@stripe/stripe-react-native';  function App() {   return (     <StripeProvider       publishableKey=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `>       // Your app code here     </StripeProvider>   ); }`\n\n#### Note\n\nUse your API keys for [test mode](https://docs.stripe.com/keys#obtain-api-keys) while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#react-native-setup-autocomplete)\n\nAutocomplete is enabled by default on iOS, but to enable autocomplete suggestions on Android, you need to include the [Google Places SDK](https://developers.google.com/maps/documentation/places/android-sdk/overview) dependency in your app’s `build.gradle`:\n\n`dependencies {     implementation 'com.google.android.libraries.places:places:2.6.0' }`\n\nAddress autocomplete suggestions requires a Google Places API key. Follow the [Google Places SDK setup guide](https://developers.google.com/maps/documentation/places/android-sdk/cloud-setup) to generate your API key.\n\n[](#react-native-configure-address-element)\n\nYou can configure the Address Element with details such as displaying default values, setting allowed countries, customizing the appearance, and so on. See the [list of available options](https://github.com/stripe/stripe-react-native/blob/master/src/components/AddressSheet.tsx#L19-L51) for more information.\n\n`<AddressSheet   appearance={{     colors: {       primary: '#F8F8F2',       background: '#272822'     }   }}   defaultValues={{     phone: '111-222-3333',     address: {       country: 'United States',       city: 'San Francisco',     },   }}   additionalFields={{     phoneNumber: 'required',   }}   allowedCountries={['US', 'CA', 'GB']}   primaryButtonTitle={'Use this address'}   sheetTitle={'Shipping Address'}   googlePlacesApiKey={'(optional) YOUR KEY HERE'} />`\n\n[](#react-native-retrieve-address-details)\n\nRetrieve the address details by setting the `visible` property to `true`, and adding callback methods for the `onSubmit` and `onError` properties:\n\n``<AddressSheet   visible={true}   onSubmit={async (addressDetails) => {     // Make sure to set `visible` back to false to dismiss the address element.     setAddressSheetVisible(false);      // Handle result and update your UI   }}   onError={(error) => {     if (error.code === AddressSheetError.Failed) {       Alert.alert('There was an error.', 'Check the logs for details.');       console.log(err?.localizedMessage);     }    // Make sure to set `visible` back to false to dismiss the address element.     setAddressSheetVisible(false);   }} />``",
    "title": "Listen for address input | Stripe Documentation",
    "description": "Collect addresses to use in custom ways using an event listener",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/address-element/collect-addresses",
    "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nYou can configure the Address Element to suit your needs.\n\n### Autocomplete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element has a built in address autocomplete feature that uses the [Google Maps API Places Library](https://developers.google.com/maps/documentation/javascript/places). By default, the autocomplete is enabled with a Stripe provided Google Maps API key if any of the following conditions are met:\n\n*   In a single page checkout flow where the [Payment Element](https://docs.stripe.com/payments/payment-element) is mounted in the same elements group as the Address Element.\n*   In a checkout flow that uses the Address Element in an active [Link](https://docs.stripe.com/payments/link) session.\n\nTo enable autocomplete in the Address Element for all other scenarios, you can use the [`autocomplete`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-autocomplete) option with `mode` set to `google_maps_api`. Set the `apiKey` to be your own [Google Maps API key](https://developers.google.com/maps/documentation/javascript/get-api-key#create-api-keys) that’s configured to allow the [Places API](https://developers.google.com/maps/documentation/javascript/places#add-places-api-to-the-api-keys-api-restrictions-list) usage. Your Google Maps API key is only used when the Stripe provided Google Maps API key isn’t available.\n\n#### Note\n\nIf you’ve deployed a [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) and want to enable autocomplete with your own Google Maps API key, include `https://maps.googleapis.com` as a `connect-src` and `script-src` directive. Refer to the [Google Maps API official guide](https://developers.google.com/maps/documentation/javascript/content-security-policy) for the most updated CSP requirement.\n\n`const addressElement = elements.create(\"address\", {   mode: \"shipping\",   autocomplete: {     mode: \"google_maps_api\",     apiKey: \"{YOUR_GOOGLE_MAPS_API_KEY}\",   }, });`\n\n### Prefill address form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element accepts a [`defaultValues`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-defaultValues) which lets you prefill the address form when the page loads. An Address Element with all values prefilled looks similar to:\n\n`const addressElement = elements.create(\"address\", {   mode: \"shipping\",   defaultValues: {     name: 'Jane Doe',     address: {       line1: '354 Oyster Point Blvd',       line2: '',       city: 'South San Francisco',       state: 'CA',       postal_code: '94080',       country: 'US',     },   }, });`\n\n### Other options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to [Stripe.js](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options) for the complete list of options in detail.\n\n`// Sample of a options object const addressElement = elements.create(\"address\", {   mode: 'shipping',   allowedCountries: ['US'],   blockPoBox: true,   fields: {     phone: 'always',   },   validation: {     phone: {       required: 'never',     },   }, });`",
    "title": "Listen for address input | Stripe Documentation",
    "description": "Collect addresses to use in custom ways using an event listener",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/element/express_checkout_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/docs/js/element/express_checkout_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/mount",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/supported_browsers",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-element/best-practices",
    "markdown": "# Payment Element integration best practices\n\n## Learn about best practices before building your Payment Element integration.\n\nUse the checklist on this page to make sure you build your Payment Element integration for optimal performance. The following features enable you to access additional integration options. For example, if you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), you can use [payment method rules](https://docs.stripe.com/payments/payment-method-rules) to present payment methods with custom criteria.\n\n## Integration checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Choose the Payment Element’s [layout](https://docs.stripe.com/payments/payment-element#layout) to match the style of your site, then run an A/B test to confirm the best choice. If you have over 4 payment methods, we recommend the accordion layout.\n    \n*   [Style the Payment Element](https://docs.stripe.com/payments/payment-element#appearance) to match the visual design of your website using the Appearance API. You can apply this style to any element you add to your integration.\n    \n*   Choose how to collect a payment\n    \n    Consider if you want to [collect a payment](https://docs.stripe.com/payments/accept-a-payment-deferred?type=payment) before you create the PaymentIntent API call. To [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements), you must create a PaymentIntent that contains an amount and currency, and confirm that payment to trigger Stripe to make a charge. However, you can alternate the order that you collect the payment and create the PaymentIntent. We recommend that you [collect the payment first](https://docs.stripe.com/payments/accept-a-payment-deferred?type=payment).\n    \n*   Send [metadata](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-metadata) in your PaymentIntent to allow metadata to show up in your reports. This indexes your metadata to make sure that it’s searchable in the Stripe Dashboard. You can use this metadata to find and reference transactions.\n    \n*   Make sure to use the latest API\n    \n    Check to make sure your PaymentIntent uses the [latest API version](https://docs.stripe.com/upgrades#api-versions).\n    \n*   Select the payment methods you want to display\n    \n    Use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), part of the default Stripe integration, to present eligible payment methods to your customers. Stripe handles the logic for dynamically displaying the most relevant eligible payment methods to each customer to maximize conversion based on factors such as the amount, currency, location, and so on. Dynamic payment methods allow you to:\n    \n    *   Choose the [payment methods](https://stripe.com/guides/payment-methods-guide) that your customers can use from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n    *   Use additional features, such as [payment method rules](https://docs.stripe.com/payments/payment-method-rules), which allows you to present payment methods using custom criteria.\n*   When your integration is complete, test and [View how payment methods appear to customers](https://dashboard.stripe.com/settings/payment_methods/review). From the **Review displayed payment methods** form, enter a [PaymentIntent ID](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-id) to learn which payment methods were and weren’t available for that specific transaction. You can also simulate which payment methods display in a given scenario by changing factors such as the amount, currency, capture method, and future usage.\n    \n\n## Additional features checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   After you integrate your UI and dynamic payment methods, enable [Link](https://docs.stripe.com/payments/link/payment-element-link) in the [Payment Method settings page](https://dashboard.stripe.com/settings/payment_methods). Link securely saves and fills in customer payment and shipping details. It supports various payment methods, including credit cards, debit cards, and US bank accounts. For logged-in customers that already use Link, this feature prefills their information, regardless of whether they initially saved it on the checkout page of another business.\n    \n*   Add the Link Authentication Element\n    \n    To collect and prefill shipping addresses and sell physical goods, we recommend using the [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element) to create a single email input field for both email collection and Link authentication.\n    \n*   The Address Element streamlines collection of shipping and billing information during checkout. It integrates with other elements and prefills addresses with Link. It supports auto-suggestions for new address entry using free Google Autocomplete support.\n    \n    *   In `shipping` mode, customers have the option to use their shipping address as their billing address.\n    *   In `billing` mode, Stripe hides billing fields within the Payment Element to make sure that customers only need to enter their details once.\n*   Add the Payment Method Messaging Element\n    \n    If you choose to offer BNPLs, we recommend that you promote them ahead of checkout to help drive awareness, increase order value, and positively impact conversion using the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging).\n    \n    *   You can display this unified embeddable component on product detail, cart, and payment pages.\n    *   This element includes support for [Affirm](https://docs.stripe.com/payments/affirm), [Afterpay](https://docs.stripe.com/payments/afterpay-clearpay), and [Klarna](https://docs.stripe.com/payments/klarna).\n*   Add the Express Checkout Element\n    \n    Use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to show customers multiple one-click payment buttons in a single UI component, including [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [PayPal](https://docs.stripe.com/payments/paypal), and [Link](https://docs.stripe.com/payments/link/express-checkout-element-link).\n    \n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements)",
    "title": "Payment Element integration best practices | Stripe Documentation",
    "description": "Learn about best practices before building your Payment Element integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-element/design-an-integration",
    "markdown": "# Design an integration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what choices you need to make before integrating the Payment Element.\n\nBefore building your Payment Element integration, choose an integration path that aligns with your business requirements.\n\nThe diagram below provides an overview of the integration guides available when integrating the Payment Element.\n\nThe sections below demonstrate the two architectural choices required when integrating the Payment Element.\n\n[](#when-to-create-intent)\n\nThe Payment Element collects payment information from your customer and populates it onto either a [PaymentIntent](https://docs.stripe.com/api/payment_intents) or a [SetupIntent](https://docs.stripe.com/api/setup_intents) object, depending on whether you’re collecting payment or setting up a payment method for future use. When a customer enters your checkout, you can either:\n\n*   **Create only the Payment Element**: Defer creating and confirming the PaymentIntent or SetupIntent until the customer submits the payment form by pressing the **Pay** button. Choose this option if:\n    \n    *   You have a multi-page checkout flow where the page for collecting payment details comes before the page for payment submission or order summary. Learn how to [build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n        \n    *   You have a dynamic checkout page where the amount can change based on customer selections, such as changing the items or quantity of items being purchased, or adding discount codes. By deferring Intent creation until after the customer presses **Pay**, you eliminate the need to synchronize your Intent with the changes made on the client. This is necessary because changes to amount affect the eligibility of certain payment methods. Learn how to [collect payment details before creating a PaymentIntent](https://docs.stripe.com/payments/accept-a-payment-deferred) if you’re confirming the Intent on your client and how to [finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server) if you’re confirming the Intent on your server.\n        \n*   **Create both the PaymentIntent/SetupIntent and the Payment Element**: Create the PaymentIntent or SetupIntent before loading the checkout page and then create the Payment Element, associating the two by providing the Intent’s `client_secret` [as a parameter when creating the Elements object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-clientSecret). Choose this option if:\n    \n    *   You have a static checkout page and want to quickly set up your integration. Learn how to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements).\n\n[](#where-to-confirm-intent)\n\nPayment information collected by the Payment Element is transferred onto the PaymentIntent or SetupIntent at confirmation time. When the customer presses **Pay**, you can either:\n\n*   **Confirm the PaymentIntent/SetupIntent on your client**: Code on your client calls a Stripe SDK, which invokes the API to confirm the Intent. The Stripe SDK also automatically handles additional next actions that might be required, such as authenticating with [3D Secure](https://docs.stripe.com/payments/3d-secure), and also localizes [error](https://docs.stripe.com/api/errors) messages. Choose this option if:\n    \n    *   You don’t require the additional control of confirming the Intent on your server, and you prefer the quickest integration.\n*   **Confirm the PaymentIntent/SetupIntent on your server**: Code on your server directly invokes the API to confirm the Intent. If next actions are required, you must handle them either manually or by using a Stripe SDK, e.g. [`stripe.handleNextAction`](https://docs.stripe.com/js/payment_intents/handle_next_action). Choose this option if:\n    \n    *   You have to execute business logic on your server before the confirmation, such as payment method restrictions or adjusting application fees. After your business logic runs, immediately confirm the Intent on your server to guarantee that the client can’t make any changes that could invalidate your business logic.",
    "title": "Design an integration | Stripe Documentation",
    "description": "Learn what choices you need to make before integrating the Payment Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/grabpay",
    "markdown": "# GrabPay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about GrabPay, a common payment method in Southeast Asia.\n\nGrabPay is a payment method developed by [Grab](https://www.grab.com/sg/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with.\n\nIn order to pay with GrabPay, customers are redirected to GrabPay’s website, where they have to authenticate the transaction using a one-time password. After authenticating, customers will be redirected back to your website.\n\n*   **Customer locations**\n    \n    Singapore, Malaysia\n    \n*   **Presentment currency**\n    \n    SGD, MYR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using GrabPay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate GrabPay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable GrabPay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add GrabPay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure GrabPay as a payment](https://docs.stripe.com/payments/grabpay/accept-a-payment).\n\nCheck out the GrabPay [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#refunds)\n\nGrabPay payments can be refunded up to 90 days after the original payment. Refunds for GrabPay payments are asynchronous and take up to 5 minutes to complete. We will notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we will return the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n[](#disputed-payments)\n\nGrabPay payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment with Grab. Therefore, there is no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.",
    "title": "GrabPay payments | Stripe Documentation",
    "description": "Learn about GrabPay, a common payment method in Southeast Asia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/wechat-pay",
    "markdown": "# WeChat Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about WeChat Pay, a digital wallet popular with customers from China.\n\nAs China’s largest internet company, Tencent offers a number of web and mobile products across social networking, communications, media, games, finance, and so on. WeChat, owned by Tencent, is China’s leading mobile app with over 1 billion monthly active users.\n\nWeChat is a leading lifestyle ‘super app’ used for messaging between people, as well as connecting people, services and businesses in China and around the world through a number of e-commerce and social features inside the app. WeChat Pay, the payment wallet inside the WeChat app, has over 800 million users.\n\nChinese consumers can use WeChat Pay to pay for goods and services inside of businesses’ apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education and food/nutrition.\n\n*   **Customer locations**\n    \n    Chinese consumers, overseas Chinese, and Chinese travelers\n    \n*   **Presentment currency**\n    \n    CNY, AUD, CAD, EUR, GBP, HKD, JPY, SGD, USD, DKK, NOK, SEK, CHF (depending on business location)\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Partial (request an invite to create charges [on behalf of](https://docs.stripe.com/connect/charges#on_behalf_of) other accounts)\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate WeChat Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable WeChat Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add WeChat Pay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure WeChat Pay as a payment](https://docs.stripe.com/payments/wechat-pay/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWeChat payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment via the WeChat Pay app. Therefore, there is no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayments made with WeChat Pay can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge. Refunds for WeChat Pay payments are asynchronous. Stripe notifies you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and Stripe returns the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create WeChat Pay payments in the currencies that map to your country. The default local currency for WeChat Pay is `cny` and customers also see their purchase amount in `cny`.\n\n| Currency | Country |\n| --- | --- |\n| `cny` | All countries |\n| `aud` | Australia |\n| `cad` | Canada |\n| `eur` | Austria, Belgium, Denmark, Finland, France, Germany, Ireland, Italy, Luxembourg, Netherlands, Norway, Portugal, Spain, Sweden, Switzerland |\n| `gbp` | United Kingdom |\n| `hkd` | Hong Kong |\n| `jpy` | Japan |\n| `sgd` | Singapore |\n| `usd` | United States |\n| `dkk` | Denmark |\n| `nok` | Norway |\n| `sek` | Sweden |\n| `chf` | Switzerland |",
    "title": "WeChat Pay payments | Stripe Documentation",
    "description": "Learn about WeChat Pay, a digital wallet popular with customers from China.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/secure-remote-commerce",
    "markdown": "# Secure Remote Commerce program guide\n\n## Accept payments via Secure Remote Commerce in your existing Stripe integration.\n\n[Secure Remote Commerce (SRC)](https://www.mastercard.us/en-us/merchants/grow-your-business/find-solutions-by-need/improve-checkout/secure-digital-checkout.html) is an easy and secure way to pay online and is powered by the global payments industry to protect users’ payment information. Users can add cards from Visa, Mastercard, American Express, and Discover to enable Click to Pay simply and securely. Secure Remote Commerce delivers an enhanced online checkout experience and supports all network brands participating in SRC.\n\n#### Note\n\nBefore implementing, please refer to the [implementation requirements](https://developer.mastercard.com/page/masterpass-requirements-and-best-practices). By using Secure Remote Commerce through Stripe, you agree to the [Operating Rules](https://masterpass.com/assets/pdf/masterpassoperatingrules.pdf). Note that Mastercard offers SRC through its Masterpass platform.\n\n## Integrating the Secure Remote Commerce button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your Masterpass **Checkout ID** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings) and configure your sandbox and production callback URLs. Note that Mastercard is offering SRC as an update to their Masterpass service, so you will see references to Masterpass within the documentation and code.\n\nTo use SRC on your website, add the following script tag to your HTML document:\n\n| Parameter | Description |\n| --- | --- |\n| `locale` | The country (and language) of the merchant. `en_US` is currently the only valid value as SRC is only available to US merchants. |\n| `checkoutid` | The Checkout ID from Mastercard, copied from the Masterpass section of the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n\nTo display the Masterpass button, use one of the following images:\n\nFor a button with black Masterpass text\n\nFor a button with white Masterpass text\n\n| Parameter | Description |\n| --- | --- |\n| `locale` | The country (and language) of the merchant. `en_US` is currently the only valid value as SRC is only available to US merchants. |\n| `paymentmethod` | The list of accepted card brands, comma separated (for example: “master,amex,visa,diners,discover,jcb,maestro”). |\n| `checkoutid` | The Checkout ID from Mastercard, copied from the Masterpass section of the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n\nAttach a click handler to the image and use it to invoke the `masterpass.checkout` function with the desired parameters:\n\n`const button = document.getElementById('mpbutton');  button.addEventListener('click', (ev) =>   masterpass.checkout({     checkoutId: '{{MASTERPASS_CHECKOUT_ID}}',     allowedCardTypes: ['master', 'amex', 'visa'],     amount: '10.00',     currency: 'USD',     cartId: '{{UNIQUE_ID}}',     callbackUrl: '{{CALLBACK_URL}}'   }));`\n\nThe `masterpass.checkout` function requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `checkoutId` | The Checkout ID for your Masterpass project, copied from the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n| `allowedCardTypes` | A list of the Masterpass-compatible payment providers that you want to support |\n| `amount` | The amount of the transaction, expressed in decimal format |\n| `currency` | The currency to use for the transaction |\n| `cartId` | A unique string that you generate to identify the purchase |\n| `callbackUrl` | You can use this optional parameter to override the default callbackUrl configured when activating Masterpass. |\n\nFor more details about the `masterpass.checkout` function and the parameters that it accepts, refer to [Mastercard’s documentation](https://developer.mastercard.com/documentation/masterpass-merchant-integration-v7/7#standard-checkout1).\n\n## Completing the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the user clicks the Masterpass button on your checkout page, it takes them to the Masterpass website where they can select an existing payment method from their account or input a new one. When the user completes the process, Masterpass redirects them to the callback URL that you configured when activating Masterpass, or to the specified callback URL when invoking `masterpass.checkout` function. It appends an `oauth_verifier` URL query parameter that your application can use to complete the transaction.\n\nIn the route handler for the redirect destination, extract the URL query parameter and use it to [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) that you have created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment) to learn how to manage your checkout flow using Payment Intents.\n\nThe following code example demonstrates how to confirm a PaymentIntent with SRC in Node.js with the Express framework:\n\n`app.get('/callback', async (req, res) => {   // retrieve the PaymentIntent ID created at the beginning of the checkout flow.   const payment_intent_id = '{{PAYMENT_INTENT_ID}}';    const payment_intent = await stripe.paymentIntents.confirm(payment_intent_id, {     amount: 1000,     currency: 'usd',     payment_method_data: {       type: 'card',       card: {         masterpass: {           cart_id: '{{UNIQUE_ID}}',           transaction_id: req.query.oauth_verifier,         },       },     },   });    res.send('<h1>Charge succeeded</h1>'); });`\n\n## Testing Secure Remote Commerce ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your SRC integration against Mastercard’s sandbox, create a new SRC user account during the checkout process on your website. Configure the account to use one of the [test cards](https://developer.mastercard.com/masterpass/documentation/migration/masterpass_to_src_migration/#mastercard-test-cards) from the Masterpass documentation. Complete the checkout process as normal, selecting the test card as your payment method. If everything works correctly, Mastercard redirects you back to your application, which creates the charge as expected.\n\nThe SRC integration only works correctly when included on an http or https page. Serving from the filesystem is not supported, even during testing.",
    "title": "Secure Remote Commerce program guide | Stripe Documentation",
    "description": "Accept payments via Secure Remote Commerce in your existing Stripe integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/revolut-pay",
    "markdown": "# Revolut Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.\n\nRevolut Pay, developed by [Revolut](https://www.revolut.com/business/revolut-pay/), a global finance app, is a digital wallet payment method. Revolut Pay uses the customer’s stored balance or cards to fund the payment, and offers the option for non-Revolut customers to save their details after their first purchase.\n\nWhen customers select Revolut Pay as their payment method, Stripe redirects them to Revolut Pay’s website, where they have to authenticate with their account details or checkout as a first time user. After authenticating, Revolut Pay redirects customers back to your website.\n\n*   **Customer locations**\n    \n    UK and EU customers\n    \n*   **Presentment currency**\n    \n    EUR Beta, GBP\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Revolut Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Revolut Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Revolut Pay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Revolut Pay as a payment](https://docs.stripe.com/payments/revolut-pay/accept-a-payment).\n\nCheck out the Revolut Pay [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#refunds)\n\nRevolut Pay supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Revolut Pay payments are asynchronous and take up to 5 minutes to complete. We notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund object](https://docs.stripe.com/api/refunds/object) transitions to `succeeded`. If a refund fails, the status of the Refund object transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way of providing a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Revolut Pay payments by logging into their Revolut account. This requirement helps reduce the risk of fraud or unrecognized payments. With [Revolut’s Buyer Protection Policy](https://www.revolut.com/legal/buyer-protection-policy/), customers can file a dispute, which can result in a chargeback and funds being withdrawn from your Stripe account.\n\nCustomers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Revolut resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Revolut determine if a dispute is valid or if they need to reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Revolut makes a decision within 35 calendar days of evidence submission. If Revolut resolves the dispute in your favor, Stripe returns the disputed amount to your Stripe balance. If Revolut rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Revolut Pay payments in the currencies that map to your country. Currently, we support `gbp` and `eur`. The default local currency for Revolut Pay UK customers is `gbp` and for other EU customers it’s `eur`.\n\n| Currency | Country |\n| --- | --- |\n| `gbp` | United Kingdom |\n| `eur` | Austria, Belgium, Bulgaria, Croatia, Cyprus, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden |",
    "title": "Revolut Pay payments | Stripe Documentation",
    "description": "Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/cartes-bancaires",
    "markdown": "# Cartes Bancaires (CB) | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Cartes Bancaires, a common payment method in France.\n\nCartes Bancaires is France’s local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Businesses processing co-badged cards in the EEA must provide customers a choice of which network they prefer at checkout time. See our [guide for co-badged cards compliance](https://docs.stripe.com/co-badged-cards-compliance) for more information.\n\nCartes Bancaires will likely have a positive effect on your acceptance rate in France. If a charge is declined on the Cartes Bancaires network for a technical reason, Stripe [automatically retries the charge](https://stripe.com/payments/features#authorization) on Visa or Mastercard’s networks.\n\nAs with Visa and Mastercard, cardholders can dispute Cartes Bancaires charges. Because Cartes Bancaires dispute rules are more stringent, there are fewer reasons that a cardholder can dispute a charge, which on average leads to a lower dispute rate compared to Visa and Mastercard for many of our merchants. Merchants cannot contest Cartes Bancaires disputes - the dispute fee is 0 Euro on Cartes Bancaires.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMerchants located in these [countries](https://docs.stripe.com/connect/payment-method-available-countries#cartes-bancaires) have Cartes Bancaires available. If your business isn’t based in France, Cartes Bancaires won’t be fully enabled until your account has processed 50 EUR from Cartes Bancaires eligible cards. French Stripe accounts with the “type of business” set as “Particulier / Micro-entrepreneur / Auto-entrepreneur” are eligible for Cartes Bancaires after providing their business tax ID in the Dashboard settings.\n\n## Integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you can already [accept card payments](https://docs.stripe.com/payments/accept-a-payment), you can accept Cartes Bancaires. See the [co-badged cards compliance guide](https://docs.stripe.com/co-badged-cards-compliance) to learn how to best handle customer priority selection, and to find multiple test cards that you can use to test your integration as soon as it’s active. If you require that Cartes Bancaires is never the default network for any payments, please contact [support](https://support.stripe.com/contact).",
    "title": "Cartes Bancaires (CB) | Stripe Documentation",
    "description": "Learn about Cartes Bancaires, a common payment method in France.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/acss-debit",
    "markdown": "# Pre-authorized debit payments in Canada\n\n## Learn how to accept pre-authorized debit payments in Canada.\n\nStripe users in Canada and the United States can accept pre-authorized debit payments (PADs) from customers with a Canadian bank account using the Automated Clearing Settlement System (ACSS) provided by [Payments Canada](https://www.payments.ca/).\n\nBefore debiting a customer’s bank account, businesses must first collect a [mandate](#mandates) from the customer defining a specific payment schedule or terms. The mandate includes the customer’s institution number, transit number, account number, name and email.\n\nWhen you use Stripe.js, our foundational JavaScript library for building payment flows, Stripe provides a hosted solution for collecting mandates from customers using your preferred terms, as well as fully-hosted collection of bank account details and instant bank verification (and delayed verification using micro-deposits in rare cases). This verification process is a requirement to accept PADs, and can also help to reduce payment failures and fraudulent activities.\n\nCanadian pre-authorized debits are a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to 5 business days after initiating a payment to receive notification of success or failure. PADs are not a guaranteed payment method, there is a risk of failed payments and [disputes](#disputed-payments).\n\n*   **Customer locations**\n    \n    CA\n    \n*   **Presentment currency**\n    \n    CAD, USD (in [rare cases](#presentment-currency))\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    5-7 days\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") selects pre-authorized debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer provides bank information and accepts mandate\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nSubscription mode in [Checkout](https://docs.stripe.com/payments/checkout) isn’t yet supported. To learn about early access when this feature is available, [contact us](mailto:payment-methods-feedback@stripe.com?subject=PADs%20Subscription%20Mode%20User%20Interest) to join the waitlist.\n\nYou don’t have to integrate Canadian pre-authorized debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Canadian pre-authorized debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Canadian pre-authorized debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save Canadian pre-authorized debit details for future payments, see the following guides:\n\n*   [Manually configure Canadian pre-authorized debit as a payment](https://docs.stripe.com/payments/acss-debit/accept-a-payment)\n*   [Save Canadian pre-authorized debit details for future payments](https://docs.stripe.com/payments/acss-debit/set-up-payment)\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the payment flow, Stripe helps you collect a mandate which gives your business authorization to debit the customer’s account. In Canada, these are called pre-authorized debit agreements or PAD agreements. The mandate collection, confirmation and pre-debit notification requirements for pre-authorized debits are governed by Payments Canada’s [Rule H1 for pre-authorized debits (PADs)](https://www.payments.ca/sites/default/files/h1eng.pdf).\n\nInstructions for collecting mandate acceptance can be found on the [Accept a payment](https://docs.stripe.com/payments/acss-debit/accept-a-payment) page. In the unlikely event that your business requires a custom agreement, information on how to create a mandate that meets Payments Canada requirements can be found on the [Custom PAD mandate agreements](https://docs.stripe.com/payments/acss-debit/custom-pad-agreement) page.\n\nStripe will initiate the first debit immediately after mandate acceptance. Your customers must receive confirmation of a new mandate within 5 days after they have accepted the mandate (see [Mandate and debit notification emails](#mandate-and-debit-notification-emails)).\n\nCustomers can at any time request the cancellation of a mandate, including by properly giving oral notice of cancellation. To cancel a mandate, a customer must either reach out to the business they established the mandate with, or to their bank. Canceling a mandate invalidates any further debit requests that you issue using this mandate. If you wish to accept additional payments from the customer, a new mandate must be established with them.\n\n### Payment Schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach PAD mandate must specify a [payment schedule](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-acss_debit-mandate_options-payment_schedule) that defines when and how debits can be automatically charged to a customer.\n\n| Schedule | Use Case |\n| --- | --- |\n| `interval` | Subsequent payments for set interval PADs can be charged to customers outside of your checkout flow on a specified schedule or based on triggering events clearly described in the mandate with an [interval description](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-acss_debit-mandate_options-interval_description).<br><br>One or more debits that occur with predictability, such as:<br><br>*   a one-time payment on a specific date<br>*   on a set of dates<br>*   on a regular basis (for example, weekly, monthly)<br>*   on the occurrence of certain criteria or events<br><br>Some example `interval_description` values for which you could debit:<br><br>*   on the 5th of every month<br>*   on completion of checkout<br>*   on acceptance of a contract<br>*   when a customer balance owing reaches $100<br>*   when any invoice becomes due |\n| `sporadic` | Debits that are infrequent or irregular and not at specified or predictable periods or time. Sporadic PADs can be charged to customers at arbitrary times, but only with the express authorization of the customer at the time of payment (such as logging into your website).<br><br>An example of a sporadic payment could be a balance owed by the customer where payment is triggered by the customer rather than automatically by you at a certain time. Collecting bank account details and a `sporadic` mandate ahead of time would allow your customer to trigger payment with a single step. |\n| `combined` | A mandate that would allow both `interval` and `sporadic` debits. |\n\n## Mandate and debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Payments Canada network rules](https://www.payments.ca/sites/default/files/h1eng.pdf) require that you notify your customer:\n\n*   When a mandate is established\n*   Each time a debit is made on their account\n\nIn addition, should your customer’s bank account need to be verified using micro-deposits, Stripe will send reminder emails linking to a hosted verification page.\n\nBy default, Stripe automatically sends emails to the customer for these cases. You can [customize the colors and logo](https://dashboard.stripe.com/account/branding) for these emails to fit the design and branding of your business.\n\n#### Warning\n\nIf you prefer to send custom notifications, all of these emails must be supported. It is not possible to send custom notifications for only one of them.\n\nTo send custom notifications:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails)\n*   Send a **mandate confirmation** email when you have collected your customer’s bank account and mandate authorization.\n    *   Mandate confirmation emails must be sent no later than 5 calendar days after your customer has accepted the mandate. Stripe will initiate the first debit immediately after mandate acceptance.\n    *   The email must include the mandate you created for the debit (see [Custom PAD mandate agreements](https://docs.stripe.com/payments/acss-debit/custom-pad-agreement)) and the bank account information collected from your customer, including the institution number, transit number and last four digits of the account number.\n*   Use the [charge.pending](https://docs.stripe.com/api/events/types#event_types-charge.pending) event to trigger **debit notification** emails.\n    *   Debit notification emails must include: your contact information, the last 4 digits of your customer’s bank account, and the amount to be debited.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanadian pre-authorized debits provide a dispute process for bank account holders to dispute payments. Customers can dispute a debit payment through their bank on a “no questions asked” basis for up to 90 calendar days after a debit on a personal account or up to 10 business days for a business account. The customer’s bank can honor any dispute within this period.\n\nWhen a dispute is created, Stripe sends both the [charge.dispute.created](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created) and [charge.dispute.closed](https://docs.stripe.com/api/events/types#event_types-charge.dispute.closed) [webhook](https://docs.stripe.com/webhooks \"webhook\") events, and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), all PAD disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\n#### Warning\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. You should follow the guidelines in the following section on refunds to avoid this happening.\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPre-authorized debit payments are subject to a minimum 5 business day [payout timing](https://docs.stripe.com/payouts#standard-payout-timing) from charge creation. If your payout timing is longer than 5 business days, payouts from PAD payments will be unified with card payouts.\n\n## Presentment currency Optional![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost bank accounts in Canada hold Canadian dollars (CAD), with a small number of accounts in other currencies, including US dollars (USD). It is possible to accept PAD payments in either CAD or USD, but choosing the correct currency for your customer is important to avoid payment failures.\n\nUnlike many card-based payment methods, you might not be able to successfully debit a CAD account in USD or debit a USD account in CAD. Most often, attempting to do so will result in a delayed payment failure that will take up to 5 business days.\n\nTo avoid these failures, it is safest to take PAD payments in CAD unless you are confident your customer’s account will accept USD debits.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for PADs must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically 3 business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\nRefunds are processed only after the payment process is complete. If you create a full or partial refund on a payment that hasn’t yet completed, the refund is actioned when the `Charge` object’s status transitions to `succeeded`. If the `Charge` object’s status transitions to `failed`, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\nPAD refunds are not explicitly labeled as refunds when the funds are deposited back to a customer’s bank account. Instead, refunds are processed as a credit and include a reference to the original payment’s statement descriptor.\n\nDue to longer settlement time periods and how banks process PAD transactions, there is potential for confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction.\n\nWhen issuing a refund, you should inform your customer immediately that the refund typically takes 3 business days to arrive in their bank account.\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery PAD payment shows up on customers’ bank statements with the _name of the merchant_. For PAD payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, you can specify the [`statement_descriptor`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nPlease note that your statement descriptor will be truncated to the first 15 alphanumeric characters on the bank statement. For example, if your statement descriptor is `ROCKETRIDESLIMITED`, the customer will see `ROCKETRIDESLIMI`.\n\nAdditionally, statement descriptors cannot use the special characters `<`, `>`, `'`, or `\"`.\n\nThe table below illustrates the _merchant name_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Bank statement descriptor |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `Rocket Rides` | `Rocket Rides` |\n| Rocket Rides | `Sunday Ride` | `Rocket Rides` | `Sunday Ride` |\n\nEach bank in Canada formats these fields differently. Depending on your customer’s bank, some fields might appear in all lowercase or uppercase.\n\n### Statement descriptors and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the statement descriptor and the merchant name, which appears on the customer’s bank statement.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\nA mandate collected for a `PaymentIntent` `on_behalf_of` a Connected Account cannot be used with a different Connected Account.",
    "title": "Pre-authorized debit payments in Canada | Stripe Documentation",
    "description": "Learn how to accept pre-authorized debit payments in Canada.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/fpx",
    "markdown": "# FPX payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about FPX, a common payment method in Malaysia.\n\nFinancial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and 11 other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It’s one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM.\n\nIn order to pay with FPX, customers are redirected to their online banking environment where they have to perform two-step authorization. The exact customer experience varies depending on their bank. The FPX payment flow is well understood and intuitive to Malaysian customers.\n\nAs part of being regulatory compliant, Stripe requires merchants to provide their Business Registration Number (BRN) to process FPX charges and receive payouts.\n\n*   **Customer locations**\n    \n    Malaysia\n    \n*   **Presentment currency**\n    \n    MYR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    5 business days\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Watch a video](#payment-flow-video)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects FPX at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nChooses bank and gets redirected\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer gets notification that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate FPX and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable FPX. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add FPX from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure FPX as a payment](https://docs.stripe.com/payments/fpx/accept-a-payment).\n\nCheck out the FPX [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#disputed-payments)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n[](#refunds)\n\nFPX payments can be refunded up to 60 days after the original payment. Refunds for FPX payments are asynchronous and take approximately 1 week to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. A refund can fail if the customer’s bank is unable to process it correctly (for example, the bank account is closed). In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we’ll return the amount to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.",
    "title": "FPX payments | Stripe Documentation",
    "description": "Learn about FPX, a common payment method in Malaysia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bancontact",
    "markdown": "# Bancontact payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Bancontact, a common payment method in Belgium.\n\nBancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://docs.stripe.com/api/customers \"Customers\") use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately.\n\nIn order to pay with Bancontact, customers are redirected to the Bancontact website or mobile app to [authorize the payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and then return to your website where there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of the payment.\n\n*   **Customer locations**\n    \n    Belgium\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank-debit\n    \n*   **Recurring payments**\n    \n    via SEPA Direct Debit\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Bancontact at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer is redirected to Bancontact and enters credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Bancontact at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/alipay-redirect.a7d55d9f51dfd309abbb223e64bcec9c.svg)\n\nCustomer is redirected to Bancontact and scans QR code\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-pincode.7ddc36e8cb2d507facc1c0eb19ce7435.svg)\n\nCustomer enters pincode\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-redirect.043807104eb6fd382652e3ea987daf95.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bancontact and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bancontact. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bancontact from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods or want to save Bancontact details for future payments, see the following guides:\n\n*   [Manually configure Bancontact as a payment](https://docs.stripe.com/payments/bancontact/accept-a-payment)\n*   [Save Bancontact details for future payments](https://docs.stripe.com/payments/bancontact/set-up-payment)\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBancontact payments can be refunded up to 180 days after the original payment date.",
    "title": "Bancontact payments | Stripe Documentation",
    "description": "Learn about Bancontact, a common payment method in Belgium.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/blik",
    "markdown": "# BLIK payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about BLIK, a common payment method in Poland.\n\nBLIK is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form.\n\nThe bank sends a push notification to your customer’s mobile phone asking to authorize the payment inside their banking application. The BLIK code is valid for 2 minutes; customers have 60 seconds to authorize the payment after starting a payment. After 60 seconds, it times out and they must request a new BLIK code. Customers typically approve BLIK payments in less than 10 seconds.\n\n*   **Customer locations**\n    \n    Poland\n    \n*   **Presentment currency**\n    \n    PLN\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_1.7e386c77d6410d13caf823130b7ec68a.svg)\n\nCustomer selects BLIK at checkout.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_2.5caa9f807d50579710cc01b361a2d0fc.svg)\n\nCustomer is directed to their mobile banking app to generate a 6-digit code.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_3.8e52c5c894b439baae7bec85b96b71b2.svg)\n\nCustomer puts the code into the checkout.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_4.a93b15c949981d6a0b61463ff201fc53.svg)\n\nCustomer is notified that payment is complete.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate BLIK and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable BLIK. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nIf you prefer to manually list payment methods, learn how to [manually configure BLIK as a payment](https://docs.stripe.com/payments/blik/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBLIK has a claims process that allows transaction disputes. Customers can open disputes for cases of suspected fraud, double payments, or a difference between an order and a transaction amount.\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email\n*   The Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until BLIK resolves the dispute.\n\nWe request that you upload compelling evidence proving that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include the:\n\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as IP address or email receipt\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt\n*   Record of refund (for purchase you have already refunded)\n\nTo handle disputes programmatically, [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps BLIK determine if a dispute is valid. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 12 calendar days. If BLIK resolves the dispute with you winning, we return the disputed amount to your Stripe balance. If BLIK rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBLIK supports full and partial refunds. Depending on the bank, refunds are processed immediately or within a couple of hours.\n\n## Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/connect \"Connect\"), you must consider the following before you enable and use BLIK.\n\n### Request BLIK capabilities for your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the `blik_payments` capability to `active` on your platform account, and on any connected accounts you want to enable BLIK for. You can also [request more account capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting).\n\n### Merchant of record and statement descriptors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the default statement descriptor and the merchant name that appears on the customer’s banking application and confirmation emails.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |",
    "title": "BLIK payments | Stripe Documentation",
    "description": "Learn about BLIK, a common payment method in Poland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paynow",
    "markdown": "# PayNow payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PayNow, a popular payment method in Singapore.\n\nPayNow is a Singapore based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions.\n\nCustomers see a QR code when checking out with PayNow. They complete the payment by scanning it using [a participating app](https://www.abs.org.sg/consumer-banking/pay-now). You receive confirmation from Stripe instantly when they complete the payment.\n\n*   **Customer locations**\n    \n    Singapore\n    \n*   **Presentment currency**\n    \n    SGD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    T+1 availability\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Not applicable\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n*   **Pricing**\n    \n    1.3%\n    \n\n[](#refunds)\n\nYou don’t have to integrate PayNow and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable PayNow. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add PayNow from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure PayNow as a payment](https://docs.stripe.com/payments/paynow/accept-a-payment).\n\n[](#refunds)\n\nYou can refund PayNow payments up to 90 days after the original payment. Refunds for PayNow payments are asynchronous and Stripe notifies you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund](https://docs.stripe.com/api/refunds/object) object transitions to `succeeded`. If a refund fails, the status of the Refund object transitions to `failed` and Stripe returns the amount to your Stripe balance. At this point, you need to arrange an alternative way of providing your customer with a refund.\n\n[](#statement-descriptors)\n\nCustomized statement descriptors aren’t supported by PayNow, the value specified in the [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) is ignored. Stripe’s company name (`STRIPE PAYMENTS SINGAPORE PTE. LTD.`) is shown when your customers complete payments on their mobile app. It’s also shown on bank statements along with the amount and a Stripe-generated reference code.\n\n[](#repeated-payments)\n\nTo prevent your customers from being charged multiple times, after your customer successfully completes a transaction, any subsequent attempts to pay using the same QR code are rejected. The rejection behavior depends on the bank and payment app used by the customer to attempt the transaction. If your customers contact you about repeated payments, you can advise them to check for text messages or notifications from their bank or payment app, which will show that the payment attempt was rejected.\n\n[](#payout-timing)\n\nBy default, it takes 1 day from the time of the transaction for the funds to be available in your Stripe balance. Stripe pays out available funds to your bank account according to the payout schedule set on your Stripe account.\n\nFor example, if the payment was made on Wednesday, the funds are available in your Stripe balance on Thursday. If you’re on an automatic daily payout schedule, the funds are paid out on Thursday. If you’re on a weekly (Monday) payout schedule, the funds are paid out on the coming Monday.\n\n[](#disputed-payments)\n\nPayNow payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment through participating apps. As a result, there’s no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.",
    "title": "PayNow payments | Stripe Documentation",
    "description": "Learn about PayNow, a popular payment method in Singapore.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/eps",
    "markdown": "# EPS payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about EPS, a common payment method in Austria.\n\nEPS is an Austria-based payment method that lets customers complete transactions online using their bank credentials. All Austrian banks support EPS, and over 80% of Austrian online retailers accept it.\n\nEPS redirects customers to their bank’s website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions). You receive [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Austria\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects EPS at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nCustomer chooses their bank and is redirected to that bank’s login page\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process (with scanner or SMS)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to the business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate EPS and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable EPS. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add EPS from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure EPS as a payment](https://docs.stripe.com/payments/eps/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEPS payments can be refunded up to 180 days after the original payment date.",
    "title": "EPS payments | Stripe Documentation",
    "description": "Learn about EPS, a common payment method in Austria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/giropay",
    "markdown": "# giropay payments | Stripe DocumentationThe Stripe Docs logo\n\n## giropay paymentsDeprecated\n\n## Learn about giropay, a common payment method in Germany.\n\n#### Warning\n\nOur financial partners are deprecating Giropay. No new business onboarding or transactions will be possible after June 30, 2024. Read our [support page](https://support.stripe.com/questions/june-2024-update-to-giropays-availability) for more details.\n\ngiropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany.\n\ngiropay redirects customers to their website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Germany\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Giropay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate giropay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable giropay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add giropay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure giropay as a payment](https://docs.stripe.com/payments/giropay/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\ngiropay payments can be refunded up to 180 days after the original payment date.",
    "title": "giropay payments | Stripe Documentation",
    "description": "Learn about giropay, a common payment method in Germany.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/p24",
    "markdown": "# Przelewy24 payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Przelewy24, a common payment method in Poland.\n\nPrzelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks.\n\nPrzelewy24 redirects customers to their website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Poland\n    \n*   **Presentment currency**\n    \n    EUR or PLN\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Przelewy24 at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nCustomer is redirected to Przelewy24 and chooses bank\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Przelewy24 and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Przelewy24. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Przelewy24 from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Przelewy24 as a payment](https://docs.stripe.com/payments/p24/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Przelewy24 can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.",
    "title": "Przelewy24 payments | Stripe Documentation",
    "description": "Learn about Przelewy24, a common payment method in Poland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/twint",
    "markdown": "# TWINT payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about TWINT, a popular payment method in Switzerland.\n\nTWINT is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Switzerland. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using an approved TWINT mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n*   **Customer locations**\n    \n    Switzerland\n    \n*   **Presentment currency**\n    \n    CHF\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Bank Redirects\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds/Partial refunds**\n    \n    Yes/yes\n    \n*   **Maximum Amount** CHF 5000.00\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers pay with TWINT by using one of the following methods:\n\n*   **Mobile**: Customers follow a mobile redirect from your website or mobile app to a TWINT app, where they authorize the payment, then return to your website or mobile app.\n    \n*   **Desktop**: Customers scan a QR code you present on your website using a TWINT app, which allows them to authorize the payment.\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate TWINT and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable TWINT. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add TWINT from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure TWINT as a payment method](https://docs.stripe.com/payments/twint/accept-a-payment).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund TWINT charges up to 365 days after the payment completes. Refunds usually take a few minutes to complete. TWINT supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBuyers can dispute TWINT transactions by filing a complaint with their bank. TWINT disputes are rare, with 25-50 disputes recorded for every 1,000,000 transactions.\n\n## TWINT with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with TWINT to process payments on behalf of a connected account. Connect users can use TWINT with the following account and charge types:\n\n### Enable TWINT for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable TWINT in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To check which accounts have enabled TWINT, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-twint_payments) to see if the `twint_payments` capability is set to `active`.\n\n### Enable TWINT for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities). The name of your connected account is the name customers see during checkout and in the TWINT app.",
    "title": "TWINT payments | Stripe Documentation",
    "description": "Learn about TWINT, a popular payment method in Switzerland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/afterpay-clearpay",
    "markdown": "# Afterpay and Clearpay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer your customers flexible financing while getting paid upfront with Afterpay (also known as Clearpay in the UK).\n\nAfterpay is a global payment method that allows your customers to split purchases into 4 interest-free installments, or longer term interest-bearing monthly installments (US only).\n\nTo pay with Afterpay, customers are redirected to Afterpay’s site, where they authorize the payment by agreeing to the terms of a payment plan, then return to your website to complete the order. Afterpay offers payment options based on factors such as customer credit, prior account history, order amount, and the type of goods or services being underwritten. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account upfront, and Afterpay collects the purchase amount from your customer, who repays Afterpay directly over time. For more information, see [Payment options and limits](#collection-schedule).\n\n*   **Customer locations**\n    \n    United States, Canada, United Kingdom, Australia, New Zealand\n    \n*   **Presentment currency**\n    \n    USD, CAD, GBP, AUD, or NZD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n#### Note\n\nAfterpay and Clearpay only support domestic transactions, meaning you can only sell to customers in the same country as your business. If you’re using [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles a customer’s payment method eligibility automatically. If you use [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types), you must either configure your integration so that it only presents Afterpay and Clearpay to eligible customers, or use dynamic payment methods.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Afterpay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Afterpay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Afterpay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding Afterpay from the Dashboard.\n\nIf you prefer to manually list payment methods, learn how to [manually configure Afterpay as a payment](https://docs.stripe.com/payments/afterpay-clearpay/accept-a-payment).\n\nYou can also let customers know Afterpay payments are available by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product, cart, and payment pages. We recommend adding a site messaging Element to help drive conversion.\n\n## Payment options and limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment options vary by cart order size and country. In the US, Afterpay presents customers with Pay in 4, monthly installments, or both options. For all other markets, Afterpay presents customers with Pay in 4 only.\n\n*   **Pay in 4**: customers pay for purchases in four or fewer interest-free, bi-weekly payments over a 6 week term.\n*   **Monthly installments**: (US only) customers pay for purchases over a 6 or 12 month term that includes capped interest.\n\nAfterpay collects the first installment from the customer immediately, and the next installment either 2 weeks or 1 month after, depending on the payment schedule. You can accept payments from customers in the same country that you registered your Stripe account. Payments must also match the local currency of the country.\n\nThe following table lists total transaction limits and installment schedules by country.\n\n| Stripe account and customer country | Currency | Transaction limits |\n| --- | --- | --- |\n| Australia | AUD | 1 - 2,000 AUD |\n| Canada | CAD | 1 - 2,000 CAD |\n| New Zealand | NZD | 1 - 2,000 NZD |\n| United Kingdom | GBP | 1 - 1,200 GBP |\n| United States | USD | 1 - 4,000 USD |\n\n### United States![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Afterpay.\n\n*   Alcohol\n*   Donations\n*   Pre-orders\n*   NFTs\n*   B2B\n\nFor the complete list, see the [terms of service](https://stripe.com/afterpay-clearpay/legal#restricted-businesses).\n\n## Adding Afterpay branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLet your customers know you accept payments with Afterpay by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages.\n\nAfterpay also provides static [visual assets and branding guidance](https://www.afterpay.com/retailer-resources). In AU, CA, NZ and the US, consumers know Afterpay as ‘Afterpay’. In the UK, they know it as ‘Clearpay’. Make sure you pick the right location (see the footer in the [Afterpay documentation](https://www.afterpay.com/retailer-resources)) so that you get the appropriate assets. For Clearpay, see the [UK assets and branding guidance](https://www.clearpay.co.uk/en-GB/retailer-resources).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers must authenticate Afterpay payments by logging into their Afterpay account. This requirement helps reduce the risk of fraud or unrecognized payments. Afterpay covers losses incurred from customer fraud or the inability to repay installments. However, Stripe might contact you on behalf of Afterpay and request to stop or pause a shipment before any losses are incurred. It’s important to comply promptly with these requests.\n\nCustomers can dispute Afterpay payments in certain cases—for example, if they don’t receive the goods they paid for. Customers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email\n*   The Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Afterpay resolves the dispute.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   A received return confirmation (for shipped goods returned from the customer to you)\n*   The tracking ID\n*   The shipping date\n*   A record of purchase for intangible goods, such as IP address or email receipt\n*   A record of purchase for services or physical goods, such as phone number or proof of receipt\n\nIf you prefer to handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Afterpay determine if a dispute is valid or if they should reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Afterpay makes a decision within 30 calendar days of evidence submission. If Afterpay resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Afterpay rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Afterpay charges up to 120 days after the original payment. Refunds for Afterpay payments are asynchronous.\n\n## Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Afterpay to process payments on behalf of a connected account. [Connect](https://docs.stripe.com/connect \"Connect\") users can use Afterpay with the following charge types:\n\nStripe and Afterpay rely on merchant category codes (MCC) to determine eligibility of the connected accounts against the Afterpay [prohibited business categories](#prohibited-business-categories). Make sure that you set [correct MCCs](https://docs.stripe.com/connect/setting-mcc) for your connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe.",
    "title": "Afterpay and Clearpay payments | Stripe Documentation",
    "description": "Offer your customers flexible financing while getting paid upfront with Afterpay (also known as Clearpay in the UK).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/affirm",
    "markdown": "# Affirm payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer your US and Canadian customers flexible financing while getting paid upfront with Affirm\n\n[Affirm](https://www.affirm.com/) is a popular payment method in the US and Canada that gives your customers a way to split purchases over a series of payments. Pay in 4 interest-free installments or in monthly installments of up to 36 months.\n\nTo pay with Affirm, customers are redirected to Affirm’s site, where they [authorize](https://docs.stripe.com/payments/payment-methods#customer-actions) the payment by agreeing to the terms of a payment plan, then return to your website to complete the order. Affirm offers payment options based on factors such as customer credit, prior account history, order amount, and the type of goods or services being underwritten. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account upfront, and Affirm collects the purchase amount from your customer, who repays Affirm directly over time.\n\n*   **Customer locations**\n    \n    United States, Canada\n    \n*   **Presentment currency**\n    \n    USD or CAD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes, by email from Stripe\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n#### Note\n\nAffirm only supports domestic transactions, meaning you can only sell to customers in the same country as your business. If you’re using [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles a customer’s payment method eligibility automatically. If you use [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types), you must either configure your integration so that it only presents Affirm to eligible customers, or use dynamic payment methods.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Affirm.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Affirm and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Affirm. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding Affirm from the Dashboard.\n\nIf you prefer to manually list payment methods, learn how to [manually configure Affirm as a payment](https://docs.stripe.com/payments/affirm/accept-a-payment).\n\nYou can also let customers know Affirm payments are available by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product, cart, and payment pages. We recommend adding a site messaging Element to help drive conversion.\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the cart order size, Affirm presents customers with Pay in 4, monthly installments, or both.\n\n*   **Pay in 4**: customers pay for purchases in four or fewer interest-free, bi-weekly payments over an 8 week term. Available for cart sizes between $50 and $250\\*.\n*   **Monthly Installments**: customers pay for purchases over a longer term of up to 36 months, which might include interest. Available for cart sizes between 100 USD and 30,000 USD\\*.\n\n\\* Term lengths and cart ranges are determined by Affirm and might change at their discretion.\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Affirm.\n\n*   Business to business services\n*   Home improvement services, including contractors and special trade contractors\n*   Titled goods and auto loans, including entire cars, boats, and other motor vehicles (parts and services allowed)\n*   Professional services (including legal, consulting, and accounting)\n*   NFTs\n*   Pre-orders\n\nHealthcare services are approved to use Affirm, however they’re subject to additional requirements. For the complete list of prohibited businesses and additional requirements, see [the Affirm Payment Terms](https://stripe.com/legal/affirm).\n\n## Adding Affirm branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your site to let customers know that you offer Affirm ahead of checkout. You must comply with Affirm’s [marketing compliance guides](https://docs.affirm.com/developers/docs/compliance_and_guidelines) and use the Affirm [guide](https://businesshub.affirm.com/hc/en-us/articles/10653174159636-Affirm-Marketing-Compliance-Guides) that relates to the Affirm payment options you offer your customers.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReturns are subject to the return policy that you display on your website. If your business allows returns, you can [refund](https://docs.stripe.com/refunds) Affirm transactions as you normally would for card payments. Affirm supports partial or full refunds for up to 120 days after the original purchase, and processes them asynchronously. After Stripe initiates a refund, Affirm pauses the customer’s payment plan and refunds the customer for any payments they’ve already made, minus any interest paid. Stripe doesn’t credit back the processing fees in the event of a refund.\n\n## Disputes and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate Affirm payments by logging into their Affirm account. This requirement helps reduce the risk of fraud or unrecognized payments. While Affirm covers losses incurred from customer fraud, Stripe might contact you on behalf of Affirm and request to stop or pause shipment before any losses are incurred. Comply promptly with these requests.\n\nCustomers can dispute Affirm payments in certain cases—for example, if they receive faulty goods or don’t receive them at all. Customers have up to 60 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email notification\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Affirm resolves the dispute, which can take a maximum of 30 calendar days from dispute creation.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   Received return confirmation (for shipped goods returned from the customer to you)\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as IP address or email receipt\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt\n\nIf you would rather handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Affirm determine if a dispute is valid or if they should reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 15 calendar days. Affirm makes a decision within 15 calendar days of evidence submission. If Affirm resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Affirm rules in favor of the customer, the balance charge becomes permanent.\n\n## Customer emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a customer uses Affirm to make a purchase, Affirm emails the customer with updates. These updates include information about the following events:\n\n*   Affirm confirms or denies a loan. Affirms sends these updates when the payment\\_intent succeeds or when Affirm denies the loan.\n*   A [refund](https://docs.stripe.com/refunds) completes.\n*   A payment is cancelled, which results in Affirm cancellling the loan.\n*   The customer completes a payment as part of the payment plan.\n\nAffirm only sends email updates about Affirm’s loan issuance to your customer. You should continue to separately send emails related to the purchase such as order confirmation and shipping updates.\n\n## Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [Stripe Connect](https://docs.stripe.com/connect) with Affirm to process payments on behalf of a connected account. [Connect](https://docs.stripe.com/connect \"Connect\") users can use Affirm with the following charge types:\n\n### Request Affirm capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure you [request](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting) the `affirm_payments` capability and it’s set to `active` on both your platform account and any connected accounts you want to enable.\n\n### Set correct MCC![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and Affirm rely on merchant category codes (MCC) to determine eligibility of the connected accounts against the Affirm [prohibited business categories](https://docs.stripe.com/payments/affirm#prohibited-and-restricted-business-categories). Make sure that you set [correct MCCs](https://docs.stripe.com/connect/setting-mcc) for your connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe.\n\n### Merchant of record![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the merchant name that appears on Affirm’s website or app during the redirect. The merchant of record determines the Stripe account authorized to create payments with a particular [PaymentMethod](https://docs.stripe.com/api/payment_methods/object).",
    "title": "Affirm payments | Stripe Documentation",
    "description": "Offer your US and Canadian customers flexible financing while getting paid upfront with Affirm",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/klarna",
    "markdown": "# Klarna payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer flexible payment options and get paid up front with Klarna.\n\nKlarna is a global payment method that gives customers a range of payment options during checkout. These payment options make it convenient for customers to purchase items in all price ranges.\n\nTo pay with Klarna, customers are redirected to Klarna’s site, where they select their preferred payment option, then return to your website to complete the order. Klarna presents payment options based on the customer’s billing address and transaction amount. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account up front, and Klarna collects the purchase amount from your customer, including any future installment payments, if applicable.\n\nThis demo shows the customer experience when using Klarna.\n\nThe following tabs capture Klarna’s properties and country availability:\n\n*   **Supported customer countries**\n    \n    Australia, Austria, Belgium, Canada, Czechia, Denmark, Finland, France, Greece, Germany, Ireland, Italy, Netherlands, New Zealand, Norway, Poland, Portugal, Spain, Sweden, Switzerland, United Kingdom, and the United States\n    \n*   **Presentment currency**\n    \n    AUD, CAD, CHF, CZK, DKK, EUR, GBP, NOK, NZD, PLN, SEK, or USD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\nIf you’re based in the EEA, UK, or Switzerland, then you can transact with consumers across the EEA, UK, and Switzerland, provided the presentment currency matches the currency of the customer’s country. For example, a Swedish business can present in EUR to accept Klarna from a buyer in Germany.\n\nIf you’re based outside of the EEA, UK, or Switzerland, then you can only transact with customers within your country, and the presentment currency must be the currency of your country. For example, an Australian business must present in AUD, and can only transact with buyers in Australia.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Klarna and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Klarna. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nYou can also [manually list](https://docs.stripe.com/payments/klarna/accept-a-payment) Klarna as a payment method and use it with [Payment Links](https://docs.stripe.com/payment-links) or the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging).\n\n## Payment options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDepending on the customer’s billing country and the transaction amount, Klarna can present customers with various payment options. Cart ranges and geographic availability for payment options are determined by Klarna and may change at their discretion. Regardless of the underlying payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Klarna collects the purchase amount from your customer, who repays Klarna directly. These options include:\n\n*   **Pay now**: Customers pay for the purchase immediately using a linked card, bank debit, or bank transfer.\n*   **Pay later**: Customers pay for the purchase in a single payment in 30 days.\n*   **Pay in 3 or 4** (also known as Installments): Customers pay for the purchase in three or four interest-free payments. The total transaction amount is typically spread equally across the installments, but Klarna might occasionally charge your customer more in the first installment based on the customer’s purchase power and other credit factors.\n*   **Financing** (also known as Monthly installments): Customers pay for the purchase over a longer term of up to 36 months, which might include interest. Not all customers are approved for the maximum amount, and approval is subject to credit worthiness.\n\nThe following tables list the supported payment options for the countries in each region. If a payment option isn’t listed for a country, it isn’t currently supported.\n\n### Canada\n\n### United States\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and restricted business](https://stripe.com/restricted-businesses), the following categories aren’t allowed to use Klarna:\n\n*   Charities\n*   Political organizations, parties, or initiatives\n*   B2B\n\nFor more information about Klarna eligibility for your account, navigate to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n## Klarna branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLet your customers know you accept payments with Klarna by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages. You must comply with Klarna’s [marketing compliance guides](https://docs.klarna.com/marketing/solutions/grab-and-go).\n\nIf you’re in the UK, there are [FCA](https://www.fca.org.uk/) regulatory requirements in the UK regarding advertising Klarna’s BNPL payment methods. Failure to comply can result in criminal charges. Per these requirements, you must only advertise Klarna with messaging approved by Klarna. You can find Klarna approved messaging in Klarna’s [UK Financial Promotion Rules](https://docs.klarna.com/marketing/solutions/grab-and-go/gb/Klarna-Financial-Promotion-Rules/).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKlarna covers disputes driven by customer fraud or inability to repay installments provided you follow [Klarna’s shipping policy](https://www.klarna.com/international/shipping-policies/). Merchants aren’t involved in these disputes.\n\nCustomers can open a dispute within 180 days of the original transaction. Communicate directly with your customer to try and solve the issue together. If you can’t reach a solution, Klarna intervenes to help solve the dispute. You can manage disputes in the Stripe Dashboard and with APIs.\n\n### Dashboard or API disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrior to November 15, 2023, you could only manage Klarna disputes through emails. Now, all new Klarna disputes are managed in the Stripe Dashboard and with APIs. As you transition from managing disputes through email to handling them in the Dashboard or with the API, you must continue to respond to existing email disputes by email.\n\nTo learn how to use the Dashboard or API to manage disputes, see [Respond to disputes](https://docs.stripe.com/payments/klarna/disputes).\n\n### Email disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nKlarna reaches out to both you and the customer, requesting convincing evidence that you fulfilled the purchase order. Klarna emails the support email address that you list in your [Dashboard settings](https://dashboard.stripe.com/settings/public) when you activate Klarna. If you haven’t provided a support email address, Klarna defaults to your primary Stripe account email address. [Contact us](https://support.stripe.com/contact) to modify the email address Klarna uses.\n\nKlarna might request evidence such as:\n\n*   Received return confirmation (for shipped goods returned from the customer to you).\n*   Tracking ID.\n*   Shipping date.\n*   Record of purchase for intangible goods, such as IP address or email receipt.\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt.\n\nThis information helps Klarna determine if a dispute is valid or if they’ll reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 7 days. If Klarna rules in favor of the customer, they might initiate a dispute, with funds withdrawn from your Stripe account. Klarna dispute decisions are final, and they have no appeal process.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Klarna charges up to 180 days after the payment completes. Klarna cancels any remaining payments on a refunded charge and returns the already-paid amount to the customer. Refunds usually take 5-7 business days to complete, but may take longer depending on the customer’s financial institution and the type of purchase. Klarna supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge. Partial refunds update the Klarna order to reflect the new total amount.\n\n*   If the partial refund is greater than the remaining balance of the order, Klarna deducts the refund amount from the outstanding balance and returns the difference.\n*   If the partial refund is less than the remaining balance of the order, Klarna deducts the amount from the outstanding balance and spreads refunds evenly across the remaining payments.\n\n## Klarna with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Klarna to process payments on behalf of a connected account. Connect users can use Klarna with the following charge types:\n\n### Enable Klarna for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable Klarna through their Dashboard. To check which accounts have enabled Klarna, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-klarna_payments) to see if the `klarna_payments` capability is set to `active`.\n\n### Request capabilities for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRequest the `klarna_payments` capability on any connected account you want to enable Klarna for. See [this guide](https://docs.stripe.com/connect/account-capabilities) to learn more about requesting capabilities for your connected accounts. The name of your connected account is the name customers see during checkout and in the Klarna app.\n\n## Termination rights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the termination and suspension rights included in the [Stripe Services Agreement](https://stripe.com/klarna/legal), Klarna has certain additional rights to suspend or terminate your use of Klarna, such as for breach of the prohibited business categories listed above or for high dispute rates that aren’t promptly remedied.\n\n## Additional requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou acknowledge that:\n\n*   Klarna decides if customers can use Klarna for purchases and has the sole right to receive payment from Klarna customers. Stripe acquires those purchases for you and settles the funds to you.\n*   You must provide customers with any required or requested payment instructions or documents (such as VAT). These documents must refer to Klarna as the payee and not contain any of your bank details.\n*   You can’t impose fees or higher prices for Klarna purchases or act unfairly towards Klarna.\n*   You must promptly follow Stripe’s instructions to stop an order process or shipping to help reduce the risk of fraudulent transactions.\n*   You can’t use any design that’s confusingly similar to Klarna’s trademarks (see [Klarna’s branding guidelines](https://docs.klarna.com/marketing/)).\n*   You must not permit use of Klarna for purchases by a person who might reasonably be considered to share a financial interest with you, including owners, directors, and employees of your business or any affiliated company.\n\nIf you’re in Australia, Klarna provides guidance on how to comply with the [Design and Distribution Obligations (DDO)](https://docs.klarna.com/marketing/au/advertising-legal-guidelines/design-and-distribution-obligations-ddo/) when accepting Klarna in Australia. Most Stripe users don’t need to do anything to comply. If you actively promote or recommend Klarna’s Pay in 4 product in Australia, you may be considered a “distributor” under the DDO and may have to:\n\n*   Help Klarna as needed to comply with the DDO, including only promoting Pay in 4 consistent with Klarna’s [Target Market Determination (TMD)](https://www.klarna.com/au/legal/target-market-determinations/)\n*   Promptly advise Klarna of any “significant adverse dealing” such as:\n    *   a major complaint or large number of complaints that Pay in 4 causes a customer harm or\n    *   a customer under 18 makes a purchase using Pay in 4\n*   If requested, provide Klarna with reports about any Pay in 4 complaints you receive\n*   Keep and, if requested, provide Klarna information relating to any reported significant adverse dealings",
    "title": "Klarna payments | Stripe Documentation",
    "description": "Offer flexible payment options and get paid up front with Klarna.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/zip",
    "markdown": "# Zip payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Zip, a popular payment method in Australia and the US for customers to buy now and pay later.\n\n[Zip](https://zip.co/) gives your customers in Australia and the US (beta) a way to split purchases over a series of payments.\n\nCustomers who elect to pay with Zip are redirected to the Zip site, where they [authorize](https://docs.stripe.com/payments/payment-methods#customer-actions) the payment by agreeing to the terms of a payment plan. After payment terms acceptance, Zip transfers funds to your Stripe account up front and your customer repays Zip over time according to their agreement terms.\n\n*   **Customer locations**\n    \n    Australia, United States Beta\n    \n*   **Presentment currency**\n    \n    AUD, USD Beta\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBelow is a demonstration of the Zip payment flow from your checkout page:\n\nThis demo shows the customer experience when using Zip.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Zip and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Zip. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Zip from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure Zip as a payment](https://docs.stripe.com/payments/zip/accept-a-payment).\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvailable payment options vary by country. In Australia, Zip offers Zip Pay and Zip Money, which have flexible repayment plans. In the US, Zip offers a Pay in 4 plan that splits repayment into 4 installments over 6 weeks. Regardless of the payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Zip collects the purchase amount from your customer, who repays Zip directly.\n\n*   [Zip Pay](https://zip.co/au/zip-pay): A line of credit up to 1000 AUD. Customers can select their repayment frequency, either weekly, bi-weekly, or monthly. Zip charges customers a monthly account fee, but waives it if the balance is repaid in full.\n    \n*   [Zip Money](https://zip.co/au/zip-money): A line of credit between 1000 AUD and 5000 AUD, and potentially up to 50,000 AUD. Customers can adjust the installment period with no interest for 3-36 months, depending on the retailer. If you want to offer your customers interest-free repayment periods longer than 3 months, or credit limits higher than 5000 AUD, [contact Stripe support](https://support.stripe.com/contact/email?question=other&topic=payment_apis&subject=ZipPayments&refcode=yN2i). Zip charges customers an account establishment fee and a monthly fee, but waives the monthly fee when the account balance is zero.\n    \n*   [Zip pay-in-4](https://zip.co/us/how-it-works): Customers pay for purchases over 4 installments. Zip [adds a finance charge](https://help.us.zip.co/hc/en-us/articles/4402386045979--Are-there-any-fees-to-use-Zip) based on the purchase amount, and splits the total amount into 4 equal installments. Customers pay the first installment at time of purchase, then make the 3 remaining repayments at 2-week intervals.\n    \n\nThe following table lists total transaction limits, currency and payment options by country:\n\n| Stripe account and customer country | Currency | Transaction limits | Zip Pay | Zip Money | Zip pay-in-4 |\n| --- | --- | --- | --- | --- | --- |\n| Australia | AUD | 1 - 50,000\\* |     |     |     |\n| United States Beta | USD | 35 - 1,500 |     |     |     |\n\n\\* If the purchase amount is greater than their available credit, customers can pay the rest with cards up front.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to standard [Stripe business restrictions](https://stripe.com/legal/restricted-businesses), some other business categories are prohibited from accepting Zip payments through Stripe, depending on your country.\n\nFor detailed information, see Zip prohibited and restricted business information for [Australia](https://help.zip.co/hc/en-us/articles/6544802536591) and the [United States](https://merchant-help.us.zip.co/hc/en-us/articles/12709915538971-Prohibited-and-Restricted-Business-Information).\n\n## Adding Zip branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nZip works closely with partners to constantly test and enhance the way Zip is presented to customers. Their integration and marketing requirements aim to improve customer experience and benefit businesses by converting more browsers into shoppers and increasing average basket sizes. You must use and display Zip’s branding according to their guidance, which varies by country:\n\n*   Australia: See [best practice integration](https://developers.zip.co/docs/best-practice-implementation) guide and [static visual assets and branding guidelines](https://developers.zip.co/docs/zip-marketing-assets).\n*   United States: See [marketing guidelines](https://zip.co/us/merchant-resources)\n\n## Disputes and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate Zip payments by logging into their Zip account. This requirement helps reduce the risk of fraud or unrecognized payments. While Zip covers losses incurred from customer fraud, Stripe might contact you on behalf of Zip and request to stop or pause shipment before any losses are incurred. Comply promptly with these requests.\n\nCustomers can dispute Zip payments in certain cases—for example, if they receive faulty goods or don’t receive them at all. Customers have up to 180 calendar days from the date of purchase to file a dispute.\n\nIn Australia, Zip requires customers to first contact you directly to resolve a dispute. If, after 14 days from the date of purchase, that doesn’t resolve it, the customer can initiate a dispute case with Zip.\n\nStripe notifies you of a dispute using:\n\n*   Email\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Zip resolves the dispute.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   Received return confirmation (for shipped goods returned from the customer to you)\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as an IP address or email receipt\n*   Record of purchase for services or physical goods, such as a phone number or proof of receipt\n\nIf you would rather handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Zip determine if a dispute is valid or if they need to reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. If Zip resolves the dispute with you winning, Stripe returns the disputed amount and dispute fee to your Stripe balance. If Zip rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Zip can only be submitted for refund within 180 calendar days from the date of the original charge. After 180 days, it’s no longer possible to refund the charge.\n\n## Additional requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**You acknowledge that:**\n\n*   Zip decides if customers can use Zip for purchases and has the sole right to receive payment from Zip customers. Stripe acquires those purchases for you and settles the funds to you.\n*   You must not process a Zip transaction unless delivery will be completed within 60 days.\n*   You must retain information about each Zip transaction for at least 18 months.\n*   You can’t give return credits in cash unless required by law.\n*   You can’t impose fees or higher prices for Zip purchases (that is, no surcharging).\n*   If a customer has questions about how Zip handles their information, you will refer them to Zip’s privacy policy.\n\n**If you’re in the United States, you acknowledge that:**\n\n*   All goods and services for Zip transactions must be located in the United States.\n*   Zip can’t be used to pay for a gift card, gift voucher, prepaid stored value card, or prepaid stored value voucher.\n*   Transactions must be recorded in US dollars.\n*   Zip or its lending partner may extend credit to Zip customers for a fee.",
    "title": "Zip payments | Stripe Documentation",
    "description": "Learn about Zip, a popular payment method in Australia and the US for customers to buy now and pay later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/swish",
    "markdown": "# Swish payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Swish, a popular payment method in Sweden.\n\nSwish is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Sweden. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n*   **Customer locations**\n    \n    Sweden\n    \n*   **Presentment currency**\n    \n    SEK\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds/Partial refunds**\n    \n    Yes/yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![The customer follows a mobile redirect flow to pay with Swish.](https://d37ugbyn3rpeym.cloudfront.net/docs/payments/swish/mobile-payment-flow-2160.png)\n\nThe customer follows a mobile redirect flow to pay with Swish.\n\nCustomers pay with Swish by using one of the following methods:\n\n*   **Mobile**: Customers follow a mobile redirect from your website or mobile app to the Swish app, where they authorize the payment, then return to your website or mobile app.\n    \n*   **Desktop**: Customers scan a QR code you present on your website using the Swish app, which allows them to authorize the payment.\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLearn how to [manually configure Swish as a payment method](https://docs.stripe.com/payments/swish/accept-a-payment).\n\nYou don’t have to integrate Swish and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Swish. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Swish from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\n## Merchant of record ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Swish payments, Stripe operates as the merchant of record. Therefore, Stripe’s name appears as the recipient of payments in the Swish app and as the statement descriptor in the customer’s bank statements. Your business name appears in the message field in the Swish app.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and Restricted Businesses](https://stripe.com/restricted-businesses), the following categories aren’t allowed to use Swish:\n\n*   Precious stones and metals, watches and jewelry\n*   Digital wallet top-ups\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Swish charges up to 365 days after the payment completes. Refunds usually take a few minutes to complete. Swish supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\n## Swish with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Swish to process payments on behalf of a connected account. Connect users can use Swish with the following charge types:\n\n### Enable Swish for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe dashboard can enable Swish in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To check which accounts have enabled Swish, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-swish_payments) to see if the `swish_payments` capability is set to `active`.\n\n### Enable Swish for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities). The name of your connected account is the name customers see during checkout and in the Swish app.",
    "title": "Swish payments | Stripe Documentation",
    "description": "Learn about Swish, a popular payment method in Sweden.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/pix",
    "markdown": "# Pix payments | Stripe DocumentationThe Stripe Docs logo\n\n## Pix paymentsInvite only\n\n## Learn how to accept payments with Pix, a Brazilian instant payment method.\n\n* * *\n\nPix is an instant payment method in Brazil. Customers receive a Pix string or QR code that contains the amount to pay for services or goods to complete transactions. Customers then pay the Pix, before its expiration date, using their bank apps or internet banking. You’ll receive payment confirmation as soon as the Pix is paid. Funds are available for payout 2 business days after payment confirmation.\n\n*   **Customer locations**\n    \n    Brazil\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Presentment currency**\n    \n    BRL\n    \n*   **Recurring Payments**\n    \n    No\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payout timing**\n    \n    2 business days\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes",
    "title": "Pix payments | Stripe Documentation",
    "description": "Learn how to accept payments with Pix, a Brazilian instant payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/promptpay",
    "markdown": "# PromptPay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PromptPay, a popular payment method in Thailand.\n\nPromptPay is a Thailand based payment method that allows customers to make a payment using their preferred app from participating banks.\n\nCustomers see a QR code when checking out with PromptPay. They complete the payment by scanning it using a Thailand bank app. You receive confirmation from Stripe instantly when they complete the payment.\n\n*   **Customer locations**\n    \n    Thailand\n    \n*   **Presentment currency**\n    \n    THB\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Not applicable\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n1\\. Selects PromptPay at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scan.2074e5bcfa4b800f9f8b7414c886cc49.svg)\n\n2\\. Scans displayed QR code with preferred app\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/authorize.3d8b09a8035d24ad7cb68d6f57552a1e.svg)\n\n3\\. Authorizes payment\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n4\\. Gets notification that payment is complete\n\n[](#get-started)\n\nYou don’t have to integrate PromptPay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable PromptPay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add PromptPay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods, learn how to [manually configure PromptPay as a payment](https://docs.stripe.com/payments/promptpay/accept-a-payment).\n\n[](#refunds)\n\nStripe supports refunds of PromptPay payments either through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund). To complete a refund, your customer must tell us where to return the funds. Stripe automatically contacts the customer at the email address provided at time of PaymentIntent confirmation and requests refund account information from them. Your customer must provide the account number of the bank account from which the payment was made, or the refund may fail. We will process the refund automatically after receiving the refund account information.\n\n[](#statement-descriptors)\n\nPromptPay doesn’t support customized statement descriptors, and it ignores the value specified in the [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor). Customers see the Stripe company name (`STRIPE PAYMENTS (THAILAND) LTD`) when they complete payments on their banking app. They also see it on bank statements, along with the amount and a unique reference code.\n\n[](#repeated-payments)\n\nAfter a customer successfully completes a transaction, any attempt to use the same QR code again may result in having the funds deducted from their bank account. If Stripe receives any excess funds from your customers, we reimburse them to your account balance and notify you. You will need to issue the refund to your customers outside of Stripe (for example, with a check, cash, or store credit).\n\n[](#disputed-payments)\n\nPromptPay payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment through banking apps. However, cases of irregularities similar to disputes, or other unexpected/repeated payments may arise. Stripe reviews these cases, and may contact you or take other action if required.",
    "title": "PromptPay payments | Stripe Documentation",
    "description": "Learn about PromptPay, a popular payment method in Thailand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/multibanco",
    "markdown": "# Multibanco payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments with Multibanco.\n\nMultibanco is a voucher-based payment method in Portugal. If your business is based in Europe or the United States, you can accept Multibanco payments from customers in Portugal using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nTo complete a transaction, customers receive a voucher that includes Multibanco entity and reference numbers. Customers use these voucher details to make a payment outside your checkout flow through online banking or from an ATM.\n\nPayment confirmation might be delayed by several days due to the initiation of a bank transfer when a customer pays for a Multibanco voucher. Bank transfers can encounter delays, particularly over weekends, contributing to the delay in payment confirmation.\n\n*   **Customer locations**\n    \n    Portugal\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Voucher\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Refunds and partial refunds**\n    \n    Yes, yes\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Minimum charge amount**\n    \n    €0.50\n    \n*   **Maximum charge amount**\n    \n    €99,999\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Online banking flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects Multibanco at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-show-details.205fb1ea119d617de6ad43b928c1bbfc.svg)\n\nReceives voucher details (incl. entity, reference, and amount)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nLogs into online banking\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-pincode.058b5caea306873f13033038ad2ddf02.svg)\n\nUses voucher details to complete the payment with online banking\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nReceives confirmation of funds sent\n\n### ATM flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects Multibanco at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-show-details.205fb1ea119d617de6ad43b928c1bbfc.svg)\n\nReceives voucher details (incl. entity, reference, and amount)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-atm.1b6045c8a3d0e409e437e974ee182358.svg)\n\nUses voucher details to complete the payment at an ATM\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-atm-success.b24342e253541b82c193b33e51cc5af6.svg)\n\nReceives confirmation of funds sent\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Multibanco and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Multibanco. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Multibanco from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure Multibanco as a payment method](https://docs.stripe.com/payments/multibanco/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe risk of fraud or unrecognized payments is low with Multibanco because the customer must push funds from their bank account. As a result, there’s no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Multibanco payments in the [Dashboard](https://dashboard.stripe.com/payments) or using the [Refunds API](https://docs.stripe.com/api/refunds).\n\nThe refund period for Multibanco is up to 365 days after the original payment. Full and partial refunds are supported. Customers typically receive refunds in their bank accounts within one day. However, this time frame varies by bank.\n\nIf a Multibanco [Refund](https://docs.stripe.com/api/refunds/object) object’s `status` transitions to `succeeded`, the [destination\\_details.multibanco.reference](https://docs.stripe.com/api/refunds/object#refund_object-destination_details-multibanco-reference) property contains a refund identifier that you can provide the customer.\n\n## Multibanco with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Multibanco to process payments on behalf of a connected account. Connect users can use Multibanco with the following account and charge types:\n\n### Enable Multibanco for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable Multibanco in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\n### Enable Multibanco for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRequest the `multibanco_payments` capability on any connected account you want to enable Multibanco for. Follow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities).",
    "title": "Multibanco payments | Stripe Documentation",
    "description": "Learn how to accept payments with Multibanco.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout",
    "markdown": "# Collect physical addresses and phone numbers\n\n### Collect an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect a customer’s billing address in a checkout session, pass the `billing_address_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create). You have to specify whether to always collect the billing address (`required`) or only when it’s necessary (like for tax calculations) (`auto`).\n\nTo collect a customer’s shipping address in Checkout, pass the `shipping_address_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).\n\nWhen you collect a shipping address, you must also specify which countries to allow shipping to. Configure the `allowed_countries` property with an array of [two-letter ISO country codes](https://www.nationsonline.org/oneworld/country_code_list.htm).\n\nWhen the customer completes the session, the [Checkout session](https://docs.stripe.com/api/checkout/sessions/object) object saves the collected shipping address on the `shipping_details` property and includes it in the payload of the `checkout.session.completed` [webhook](https://docs.stripe.com/webhooks \"webhook\"). You can also see shipping information in the Dashboard on the payment details page.\n\n### Collect a phone number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect a customer’s phone number in a checkout session, pass the `phone_number_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).",
    "title": "Collect physical addresses and phone numbers | Stripe Documentation",
    "description": "Collect physical addresses and phone numbers from your customers with Stripe's Payment Links, Checkout, or Elements integrations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations",
    "markdown": "# Compare payment integrations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different integration options for accepting payments.\n\nStripe provides a few different ways to accept online payments. While each integration method ultimately produces the same, secure, payment processing, they each offer different levels of complexity, flexibility, feature compatibility, and customization.\n\n**Payment Links** are the simplest way to accept a payment using Stripe. You enter the payment details like product description and price in the Dashboard and Stripe generates a link, QR code, or button that you can put on your website or send in an email. When your buyer clicks the link, Stripe presents our hosted payment collection form.\n\n**Hosted Checkout** allows you to direct your users from your website to a pre-configured payment collection form. It requires minimal coding and supports limited customization.\n\n**Embedded Checkout** allows you to present Stripe’s pre-configured payment collection form directly in your website without redirecting to Stripe and also supports limited customization.\n\n**Custom flow** integrations offer the most flexibility because you can pick and choose which [Stripe Elements](https://docs.stripe.com/payments/elements) to include in the payment collection form, fully customize the look and feel, and use in your mobile app in addition to your website. This option also requires the most development effort on your side.\n\n**Direct API** integrations are open-ended, but require a large development investment, as well as [permission to pass PAN data to the Stripe API](https://support.stripe.com/questions/enabling-access-to-raw-card-data-apis). You can develop a completely custom payment collection form and all other aspects of the payment lifecycle, invoking the [Stripe APIs](https://docs.stripe.com/api) directly as needed. We’ve omitted this method from the comparisons on this page because it supports all generally available features and products (except for Stripe hosting), provided you write the code and demonstrate [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance).\n\nThe following table shows a high level comparison of Stripe’s online payment integration types, and the additional sections on this page compare the integrations relative to specific business use cases.\n\n1Limited customization provides [20 preset fonts](https://docs.stripe.com/payments/checkout/customization/font-compatibility), 3 preset border radius options, logo and background customization, and custom button color.\n\n[](#payment-scenarios)\n\nStripe supports many different payment scenarios. See how those are supported by each integration option.\n\n1 Not supported on Dashboard created Payment Links.\n\n[](#features)\n\n1 Requires additional integration.\n\n2 Available for Subscriptions & Invoices only.\n\n[](#product-support)\n\nSee how the various integration options work with other Stripe products.\n\n3 Requires integration with [Terminal](https://docs.stripe.com/terminal).\n\n### Detailed Billing feature support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Detailed Connect feature support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Compare payment integrations | Stripe Documentation",
    "description": "Learn about the different integration options for accepting payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/migrating-from-charges",
    "markdown": "# Migrating from the Charges API\n\n### Create a PaymentIntent with a Bank Account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Bank Accounts](https://docs.stripe.com/api/customer_bank_accounts) that are already [verified](https://docs.stripe.com/ach-deprecated#verifying) and have been attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\") are usable in any API that accepts a `PaymentMethod` object. You can use a saved `BankAccount` as a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") when creating a PaymentIntent. This eliminates the need to recollect payment details. However, make sure that you also [update your integration](https://docs.stripe.com/payments/ach-debit/accept-a-payment) to begin creating PaymentMethods instead.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"payment_method\"=\"{{BANK_ACCOUNT_ID}}\"`\n\nSimilarly, you can use a saved BankAccount as a PaymentMethod when creating a SetupIntent.\n\n`curl https://api.stripe.com/v1/setup_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method\"=\"{{BANK_ACCOUNT_ID}}\"`\n\n### Collect mandate acknowledgement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfirming a PaymentIntent or SetupIntent requires having your customer authorize a [mandate](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-mandate_data) to debit the account. Learn more about [SEC codes](https://docs.stripe.com/payments/ach-debit/sec-codes) to understand which authorization type is right for your business.\n\nIn some cases, you might have pre-authorization from your customer from an earlier purchase or SetupIntent that you can use to create an off-session payment. For example:\n\n*   If you previously collected an online mandate from the customer, you can use both the IP address and user agent information to create a mandate object.\n*   If you previously collected payment and mandate information offline on paper, you can create a [PPD mandate](https://docs.stripe.com/payments/ach-debit/sec-codes#ppd-sec-code).\n\nTo create an off-session payment, you can use offline mandate acceptance to provide a record of your customer’s original authorization.\n\nAuthorization is only required the first time you use a `BankAccount` object with the PaymentIntents API. After that, you can use the `BankAccount` object as a PaymentMethod to [accept future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment#web-future-payments).\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"mandate_data[customer_acceptance][type]\"=\"offline\" \\   -d \"mandate_data[customer_acceptance][accepted_at]\"=\"{{ACCEPTANCE_TIMESTAMP}}\" \\   -d \"payment_method_options[us_bank_account][mandate_data][collection_method]\"=\"paper\"`\n\n### Retrieving a BankAccount as a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve saved BankAccounts through the [Payment Methods API](https://docs.stripe.com/api/payment_methods).\n\n`curl https://api.stripe.com/v1/payment_methods/ba_1IsleZ2eZvKYlo2CI3To1g72 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nWhen using a BankAccount as a PaymentMethod, no new objects are created. The Payment Methods API simply provides a different view of the same underlying object.\n\n`{   \"id\": \"ba_1IsleZ2eZvKYlo2CI3To1g72\",   \"object\": \"payment_method\",   \"billing_details\": {     \"address\": {       \"city\": null,       \"country\": null,       \"line1\": null,       \"line2\": null,       \"postal_code\": null,       \"state\": null     },     \"email\": null,     \"name\": \"Jenny Rosen\",     \"phone\": null   },   \"us_bank_account\": {     \"last4\": \"6789\",     \"routing_number\": \"110000000\",     \"fingerprint\": \"1JWtPxqbdX5Gamtc\",     \"account_holder_type\": \"individual\",     \"bank_name\": \"STRIPE TEST BANK\",   },   \"created\": 123456789,   \"customer\": \"cus_CY5bH92D99f4mn\",   \"livemode\": false,   \"metadata\": {},   \"type\": \"us_bank_account\" }`",
    "title": "Migrating from the Charges API | Stripe Documentation",
    "description": "Upgrade to the Payment Intents API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/cards/overview",
    "markdown": "# How cards work | Stripe DocumentationThe Stripe Docs logo\n\n## See how a credit or debit card payment works online, step by step.\n\n[Cards](https://docs.stripe.com/payments/cards) are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process. To build a Stripe integration that supports all of your customers, see what goes on behind the scenes of a card payment.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/1ab45e9a3dd360cdbbe998626aaa5ca1.svg)\n\nChecking card details\n\nStripe checks that the details provided are formatted correctly (for example, the expiry date isn’t in the past). There’s no guarantee that the card itself is valid yet.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/collect-card-details.2a81817764a4adc86c6d37e7efbb53cf.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/b7c1464dd02fdcfd323588c65e417322.svg)\n\nCustomer authentication\n\nSome banks, especially in regulated regions like Europe and India, may prompt the customer to authenticate a purchase (for example, by texting the customer a code to enter on the bank’s website). [Watch our video](https://www.youtube.com/watch?v=2kc-FjU2-mY) to learn more.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-action.a062dfa0d428b32132566ba7ef1d7243.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/e7ac3b4c7ee721fbac555ab73ac53443.svg)\n\nAuthorization\n\nThe bank checks for sufficient funds and, if successful, holds the amount on the customer’s account to guarantee it for the Stripe user.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Card-statement-pending.8c8594ba68e57f92be51bea871cd51de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/6423ea22ac10bfa6996c6f9db9b0ad1d.svg)\n\nCapture\n\nThe money moves from the issuing bank to the Stripe user’s account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Card-statement-succeeded.25905919ede8f790dec2989ab3111f04.svg)\n\n## Card updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Updating a saved card](https://docs.stripe.com/api/cards/update) can only change its name, billing address, expiration date, or metadata. To make any other changes, you must delete the card and create a new one.\n\nTo let your customers manage their own payment methods, implement processes that allow them to manually update and replace their saved cards.\n\nTo change a customer’s default payment method for invoices and subscriptions, make an API call to [update customer](https://docs.stripe.com/api#update_customer) and provide a new value for the `invoice_settings.default_payment_method` property.\n\n`curl https://api.stripe.com/v1/customers/cus_V9T7vofUbZMqpv \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"invoice_settings[default_payment_method]\"=pm_1Msy7wLkdIwHu7ixsxmFvcz7`\n\nFor information on how Checkout handles saved payment methods, see the [create session](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) API reference. To consider default payment methods in other scenarios, use custom code.\n\n## Automatic card updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSaved payment method details can continue to work even if the issuing bank replaces the physical card. Stripe works with card networks and automatically attempts to update saved card details whenever a customer receives a new card (for example, replacing an expired card or one that was reported lost or stolen). This allows your customers to continue using your service without interruption and reduces the need for you to collect new card details whenever a card is replaced.\n\nAutomatic card updates require card issuers to participate with the network and provide this information. It’s widely supported in the United States, allowing Stripe to automatically update most American Express, Visa, Mastercard, and Discover cards issued there. International support varies from country to country. It isn’t possible to identify cards that support automatic updates.\n\nYou can listen for Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to learn of card update activity:\n\n*   The `payment_method.updated` event notifies you of updates to a card through an API call.\n*   The `payment_method.automatically_updated` event notifies you of automatic card updates from the network.\n\nThese events include the card’s new expiration date and last four digits, so you can update your own records as needed. If the card update includes a new card number, the [fingerprint](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-fingerprint) changes.",
    "title": "How cards work | Stripe Documentation",
    "description": "See how a credit or debit card payment works online, step by step.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sofort",
    "markdown": "# Sofort payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Sofort, a common payment method in Europe.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\nStripe users in Europe and the United States can use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers in the following countries:\n\n*   Austria\n*   Belgium\n*   Germany\n*   Netherlands\n*   Spain\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. It redirects them to their bank’s portal to authenticate the payment, and it typically takes 2 to 14 days to receive notification of success or failure.\n\n#### Caution\n\n*   **Customer locations**\n    \n    Europe\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    via SEPA Direct Debit\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Sofort.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Sofort and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Sofort. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Sofort from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods or want to save Sofort details for future payments, see the following guides:\n\n*   [Manually configure Sofort as a payment](https://docs.stripe.com/payments/sofort/accept-a-payment)\n*   [Save Sofort details for future payments](https://docs.stripe.com/payments/sofort/set-up-payment)\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSofort payments can be refunded up to 180 days after the original payment.",
    "title": "Sofort payments | Stripe Documentation",
    "description": "Learn about Sofort, a common payment method in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customer-balance/refunding",
    "markdown": "# Refund bank transfer payments | Stripe DocumentationThe Stripe Docs logo\n\n## Refund payments made with bank transfers, or refund a customer’s available cash balance.\n\nYou can refund customer balance payments through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund).\n\n[](#refund-customer-balance-payment-bank-account)\n\nStripe requires customer bank account details to process the refund. In some cases, Stripe receives the customer’s bank account details when performing the transfer. Stripe emails the customer to let them know that the refund is in process.\n\nWhen we can’t determine the destination bank account automatically due to unavailable or ambiguous customer bank account information, Stripe requests it by contacting the customer at the email address in the customer object you created. If you didn’t include an email address when you created the customer object, creating a refund results in an error. Update the customer object with a valid email address for the customer, and try creating the refund again. You can specify a new email address when you create a refund.\n\nIn some cases, Stripe performs additional checks before processing a refund or asking your customers for bank account information. Stripe contacts you if we require more information before finalizing the refund.\n\nCustomers have 45 days from receipt of the request to submit bank account details. After 45 days without a valid response, Stripe cancels the refund and returns the funds to the customer’s account cash balance. We recommend you then contact your customer to discuss alternative ways of returning the funds.\n\nYou can refund a payment up to 180 days after it was created.\n\n### Creating a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To refund a payment made with a bank transfer, navigate to the payment page and click **Refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-page-header.57a436368ac47f5d34cbba18c2896b69.png)\n\n1.  In the following dialog, enter the amount you want to refund, if different than the full payment amount, and any other details about the refund. Then click **Refund**.\n\n### Creating a payment refund using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=  {{PAYMENT_INTENT_ID}}   \\   --data-urlencode instructions_email=\"customeremail@example.com\"`\n\nRefunds are sent to the customer’s bank account, and the customer receives a notification at their default email address. If you want to override the default email address used to contact the customer, specify the new email address using the [`instructions_email`](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) parameter.\n\nThe refund’s status transitions as follows:\n\n| Event | Refund status |\n| --- | --- |\n| Refund is created | `requires_action` |\n| Customer submits bank account details, and Stripe begins processing the refund | `pending` |\n| Refund is expected to arrive in customer’s bank | `succeeded` |\n| Customer’s bank returns the funds back to Stripe | `requires_action` |\n| Refund is in `requires_action` 45 days after creation | `failed` |\n| Refund is canceled from a `requires_action` state | `canceled` |\n\nIf the customer’s bank can’t successfully complete the transfer, the funds are returned to Stripe and the refund transitions to `requires_action`. This can happen if the account holder’s name doesn’t match what the recipient bank has on file or if the provided bank account number has a typo. In these cases, Stripe emails the customer to inform them of the failure and to request that they resubmit their bank account details.\n\nIf your customer does not provide their bank account details within 45 days, the refund’s status transitions to `failed` and the [charge.refund.updated](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) event is sent. This means that Stripe is unable to process the refund, and you must [return the funds to your customer outside of Stripe](https://docs.stripe.com/refunds#failed-refunds).\n\nThe [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund is the email that the refund was sent to. While a refund is waiting for a response from the customer, details of the email sent to the customer can also be found under the [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field on the refund.\n\nEach individual refund (including each partial refund) may incur a fee. Please reach out to your point of contact at Stripe to learn more about this.\n\n[](#refund-customer-balance-payment-bank-account-cancel)\n\nIf a bank transfer payment refund has been sent to the customer, and the customer hasn’t submitted their bank details, you can still cancel the refund.\n\n### Canceling a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To cancel a refund for a bank transfer payment, navigate to the payment page and click **Cancel refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cancel-payment-refund.b4596e21f2ee32cf1b2bff824de8d4b7.png)\n\n1.  If the payment has multiple partial refunds in the `requires_action` state, select the correct refund from the **Refund** dropdown in the following dialog.\n2.  Confirm the cancellation by selecting **Cancel refund** in the dialog.\n\n### Canceling a payment refund using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/refunds/`\n\n`{{REFUND_ID}}`\n\n`/cancel \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X POST`\n\nAfter the payment refund has been canceled, the refund transitions from `requires_action` to `canceled`. If there are no other refunds, the payment transitions back to its original pre-refund state.\n\n[](#refund-customer-balance-payment-customer-balance)\n\nA refund to the customer balance succeeds immediately. Refunds to the customer balance are free of charge.\n\n### Creating a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To refund a payment made with a bank transfer, navigate to the payment page and click **Refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-page-header.57a436368ac47f5d34cbba18c2896b69.png)\n\n1.  In the following dialog, select **Customer balance** in the **Destination** dropdown. Selecting this option deposits the refund into the customer’s Stripe account, which allows them to use the funds for future payments on your site.\n\n[](#create-return-dashboard)\n\nYou can return a customer’s cash balance directly to them. For example, you might need to do this when a customer transfers more funds than expected for a payment.\n\n### Refund a customer’s cash balance using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Navigate to the [Customer list](https://dashboard.stripe.com/customers) page.\n2.  Click the customer in the list of customers.\n3.  Expand the **Cash Balance** row in the **Payment methods** section.\n4.  Click **Initiate Refund** button at the end of the row.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customer_balance_row.224a651cdaecf7e3b05c8046dc0e103a.png)\n\n1.  In the next dialog, enter the amount to refund.\n2.  Click **Initiate Refund**.\n\nView the status of the refund on the customer balance transactions list page.\n\n### Refund a customer’s cash balance using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo refund a customer’s cash balance with the API, set the [origin](https://docs.stripe.com/api/refunds/object#refund_object-origin) parameter to `customer_balance` and specify the [customer](https://docs.stripe.com/api/refunds/object#refund_object-customer). The customer’s default email address is used to contact them. To override it, specify the new email address using the [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) parameter.\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\   --data-urlencode instructions_email=\"jenny.rosen@example.com\" \\  -d origin=customer_balance`\n\n[](#create-return-dashboard-cancel)\n\nYou can only cancel un-processed refunds. After the customer submits their bank account details, you can’t cancel a refund. Currently, you must use the Stripe Dashboard to cancel a refund:\n\n1.  Navigate to the [Customer list](https://dashboard.stripe.com/customers) page.\n2.  Click the customer in the list of customers.\n3.  Expand the **Cash Balance** row in the **Payment methods** section.\n4.  Click the **View balance details** link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cash_balance_transactions_link.2315ea0a6110fd68d550961b570622e6.png)\n\n1.  Click the overflow menu (**•••**) next to the refund you want to cancel and click the **Cancel** link\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cancel_customer_return.2b049b51896c523d27f56eaa437db52f.png)\n\nThe refund amount is credited back to the available cash balance.\n\n[](#tracking-refunds)\n\nYou can track the state of a refund through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api/refunds).\n\n### When and where refund email is sent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends an email to the email address provided in the [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund. While a refund is waiting for a response from the customer, you can also check the refund’s [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field for details such as the sent time and the address. The sent time is also the time when the refund transitioned to the `requires_action` state.\n\n### Pending refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the customer has submitted their bank account details, the refund transitions to `pending`.\n\n### Successful refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe refund transitions to `succeeded` when the refund is successfully paid out to the customer.\n\n[](#testing-refunds)\n\nYou can test refund behavior in test mode using the following test bank accounts on the bank account details collection page linked in the email sent to the customer. Bank account details outside of these test bank accounts won’t be accepted.\n\n#### Note\n\nIn test mode, refund instruction emails are only sent to email addresses linked to the Stripe account.\n\nSpecify the appropriate [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) (for example, GB, IL, CR, and so on) to test IBANs for any IBAN country and any valid currency for that country. For instance, the following IBANs specify Germany with the `DE` prefix.\n\n| Number | Type |\n| --- | --- |\n| `DE89370400440532013000` | Refund succeeds. |\n| `DE62370400440532013001`<br><br>`DE89370400440532013002`<br><br>`DE89370400440532013003`<br><br>`DE89370400440532013004`<br><br>`DE89370400440532013005` | Refund fails. |\n\n#### Testing Refunds Expiry ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make an API call to simulate the expiry of a testmode refund.\n\n`curl https://api.stripe.com/v1/test_helpers/refunds/{{REFUND_ID}}/expire \\   -X POST \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`",
    "title": "Refund bank transfer payments | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-intents/migration",
    "markdown": "# Migrating to the Payment Intents API\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nLearn how to migrate your existing cards and Charges API integration.\n\nMigrating your payment flow can be daunting. It is safe to incrementally adopt the Payment Intents API and use it in parallel with the Charges API. To this end, you can split up the migration into the following steps:\n\n1.  [Update your API version and your client library](#api-version).\n2.  If applicable, [migrate code that reads from Charge properties](https://docs.stripe.com/payments/payment-intents/migration/charges) so that you have a consistent read path between charges created by the Charges API and charges created by the Payment Intents API. This ensures a read-side integration that works for both your old and new payments integrations.\n3.  Migrate your existing Charges API integration on [Web](#web), [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios), and [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android) to use the Payment Intents API.\n4.  Migrate your integration that [saves cards on Customer objects](#saved-cards).\n5.  [Test with regulatory test cards](https://docs.stripe.com/testing#regulatory-cards) to ensure your upgraded integration handles authentication correctly.\n\n## Update your API version and your client library ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile the Payment Intents API works on all API versions, we recommend that you [upgrade to the latest API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api). If you decide to use an API version older than [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), note the following two changes as you go through the code examples:\n\n*   `requires_source` has been renamed to `requires_payment_method`\n*   `requires_source_action` has been renamed to `requires_action`\n\nIn addition, if you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Payment Intents API.\n\n## Migrate your one-time payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn integration built with Stripe.js & Elements consists of the following steps:\n\n1.  Register your intent to collect payment on the server side\n2.  Collect payment details on the client side\n3.  Initiate creation of the payment\n4.  Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on your server and make it [accessible on the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\nNot possible before\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Step 2: Collect payment details on the client side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) function, which collects the payment information and submits it directly to Stripe.\n\n`stripe.createToken(   cardElement ).then(function(token) {   // Send token to server });`\n\n`stripe.confirmCardPayment(   INTENT_SECRET_FROM_STEP_1,   {     payment_method: {card: cardElement}   } ).then(function(result) {   if (result.error) {     // Display error.message in your UI.   } else {     // The payment has succeeded     // Display a success message   } });`\n\n### Step 3: Initiate creation of the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your existing integration, the final step is using tokenized payment information to create a charge on your server. This is no longer necessary, as the `confirmCardPayment` function—called in the previous step—initiates creation of the charge.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith automatic confirmation, the charge is created for you asynchronously based on customer action on the client side, so you must [monitor webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to determine when the payment completes successfully. To perform steps like order fulfillment after a customer’s payment is successful, implement support for webhooks and monitor the `payment_intent.succeeded` event.\n\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook handler.\n\nNow that you have migrated, use the test cards in the following section to verify your upgraded integration handles 3D Secure authentication.\n\n## Migrate your integration that saves cards on Customer objects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA Payment Intents API integration that collects card information in the checkout flow consists of the following steps:\n\n1.  Register your intent to collect payment on the server side\n2.  Collect payment details on the client side\n3.  Initiate creation of the payment\n4.  Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on your server. Set [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) to `off_session` if you primarily intend to charge users when they are outside of your application, or `on_session` if you plan to charge them in the application. If you plan to use the card for both on and off session payments use `off_session`. Providing the `setup_future_usage` parameter along with a Customer ID will save the resulting PaymentMethod to that Customer after the PaymentIntent has been confirmed and any required actions from the customer are complete. Next, make the PaymentIntent [accessible on the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\nNot possible before\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"setup_future_usage\"=\"off_session\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Step 2: Collect payment details on the client side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) function, which collects the payment information and submits it directly to Stripe.\n\n`stripe.createToken( // or stripe.createSource   cardElement ).then(function(token) {   // Send token to server });`\n\n`stripe.confirmCardPayment(   '{{INTENT_SECRET_FROM_STEP_1}}',   {     payment_method: {card: cardElement},   } ).then(function(result) {   if (result.error) {     // Display error.message in your UI.   } else {     // The payment has succeeded     // Display a success message   } });`\n\nFinally, attach the payment method (`paymentIntent.payment_method`) to the customer.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}}/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{TOKEN_OR_SOURCE}}\"`\n\n`curl https://api.stripe.com/v1/payment_method/{{PAYMENT_METHOD_ID}}/attach \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\"`\n\n### Step 3: Initiate creation of the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your existing integration, the final step is using tokenized payment information to create a charge on your server. This is no longer necessary, as the `confirmCardPayment` function—called in the previous step—initiates creation of the charge.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith automatic confirmation, the charge is created for you asynchronously based on customer action on the client side, so you must [monitor webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to determine when the payment completes successfully. To perform steps like order fulfillment after a customer’s payment is successful, implement support for webhooks and monitor the `payment_intent.succeeded` event.\n\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook handler.\n\nNow that you have migrated, use the test cards in the following section to verify your upgraded integration handles 3D Secure authentication.\n\n## Access saved payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo display the customer’s previously saved Cards, Sources, and PaymentMethods, [list the payment methods](https://docs.stripe.com/api/payment_methods/list) instead of reading the [sources](https://docs.stripe.com/api/customers/object#customer_object-sources) property of the customer object. This is required because new PaymentMethods added to a customer will not be duplicated in the sources property of the customer object.\n\n`curl https://api.stripe.com/v1/payment_methods?customer={{CUSTOMER_ID}}&type=card \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n## Test the integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s important to thoroughly test your integration to make sure you’re correctly handling cards that require additional authentication and cards that don’t. Use these card numbers in [test mode](https://docs.stripe.com/keys#test-live-modes) with any expiration date in the future and any three digit CVC code to validate your integration when authentication is required and when it’s not required.\n\n| Number | Authentication | Description |\n| --- | --- | --- |\n|     | Required on setup or first transaction | This test card requires authentication for [one-time payments](https://docs.stripe.com/payments/accept-a-payment?platform=web). However, if you set up this card using the [Setup Intents API](https://docs.stripe.com/payments/save-and-reuse) and use the saved card for subsequent payments, no further authentication is needed. |\n|     | Required | This test card requires authentication on all transactions. |\n|     | Required | This test card requires authentication, but payments will be declined with an `insufficient_funds` failure code after successful authentication. |\n|     | Supported | This test card supports authentication via 3D Secure 2, but does not require it. Payments using this card do not require additional authentication in test mode unless your [test mode Radar rules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) request authentication. |\n\nUse these cards in your application or the [payments demo](https://stripe-payments-demo.appspot.com/) to see the different behavior.",
    "title": "Migrating to the Payment Intents API | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bank-transfers/accept-a-payment",
    "markdown": "# Accept a bank transfer | Stripe DocumentationThe Stripe Docs logo\n\nThe first time you accept a bank transfer payment from a customer, Stripe generates a virtual bank account for them, which you can then share with them directly. All future bank transfer payments from this customer get sent to this bank account. In some countries, Stripe also provides you with a unique transfer reference number that your customer should include with each transfer to make it easier to match the transfer against outstanding payments. Some countries have limits on the number of virtual bank account numbers that you can create for free.\n\nYou can find an overview of the common steps when accepting a bank transfer payment in the following sequence diagram:\n\nWith bank transfer payments, it’s possible that the customer sends you more or less than the expected payment amount. If the customer sends too little, Stripe partially funds an open payment intent. Invoices won’t be partially funded and remain open until incoming funds cover the full invoice amount.\n\nIf the customer sends more than the expected amount, Stripe attempts to reconcile the incoming funds against an open payment and keep the remaining excess amount in the customer cash balance. You can find more details on how Stripe handles reconciliation in the [reconciliation section](https://docs.stripe.com/payments/customer-balance/reconciliation) of our documentation.\n\nYou might have multiple open payments or invoices which can be paid with a bank transfer. In the default setup, Stripe attempts to [automatically reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation) the bank transfer by using information like the transfer’s reference code or the amount transferred.\n\nYou can disable automatic reconciliation and [manually reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation) payments and invoices yourself. You can override the automatic reconciliation behavior on a per-customer basis by setting [reconciliation mode](https://docs.stripe.com/api/customers/create#create_customer-cash_balance-settings-reconciliation_mode) to manual.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-a-customer)\n\nYou must associate a [Customer](https://docs.stripe.com/api/customers) object to reconcile each bank transfer payment. If you have an existing Customer object, you can skip this step. Otherwise, create a new Customer object.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Create and confirm a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-create-and-confirm-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage. Create and confirm a PaymentIntent on the server, specifying the amount and currency you want to collect. You must also populate the [customer parameter](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer) of the PaymentIntent creation request. Bank transfers aren’t available on PaymentIntents without a customer.\n\nBefore creating a Payment Intent, make sure to turn **Bank transfer** on in the [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) page of your Dashboard.\n\n#### Note\n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\" \\  -d \"payment_method_data[type]\"=customer_balance \\  -d confirm=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nIf the customer already has a balance high enough to cover the payment amount, the PaymentIntent immediately succeeds with a `succeeded` status. Customers can accrue a balance when they accidentally overpay for a transaction—a common occurrence with bank transfers. You must [reconcile customer balances within a certain period based on your location](https://docs.stripe.com/payments/customer-balance/reconciliation).\n\n[](#web-complete-bank-transfer)\n\nIf the customer balance isn’t high enough to cover the request amount, the PaymentIntent shows a `requires_action` status. The response has a `next_action` field containing a `type` value of `display_bank_transfer_instructions`. The `next_action[display_bank_transfer_instructions]` hash contains information to display to your customer so that they can complete the bank transfer.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n| Field | Description |\n| --- | --- |\n| [`type`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-type) | The type of bank transfer to use. Type must be `us_bank_transfer` in the US. |\n| [`reference`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) | A unique reference code to identify the bank transfer. Instruct your customer to include this code in the reference field of their bank transfer. |\n| [`amount_remaining`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-amount_remaining) | The remaining amount that needs to be transferred to complete the payment. Instruct your customer to transfer this amount. This might be different from the PaymentIntent amount if pre-existing funds in the customer balance were applied to the PaymentIntent or if your customer underpaid. |\n| [`currency`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-currency) | The currency for the remaining amount. |\n| [`financial_addresses`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions) | List of financial addresses for US bank accounts. Types include `aba` and `swift`. See below for details. |\n| [`hosted_instructions_url`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-hosted_instructions_url) | A link to a hosted page that guides your customer through completing the transfer. |\n\n#### `aba` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of an `aba` hash:\n\n`{   \"aba\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"routing_number\": \"444555666\"   },   \"supported_networks\": [     \"ach\",     \"domestic_wire_us\"   ],   \"type\": \"aba\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `aba` | The type of financial address. |\n| `supported_networks` | *   `ach`<br>*   `domestic_wire_us` | The list of networks supported by this address. |\n| `aba.account_number` | 111222333444 | The ABA account number. |\n| `aba.routing_number` | 444555666 | The ABA routing number. |\n| `aba.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### `swift` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of a `swift` hash:\n\n`{   \"swift\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"swift_code\": \"AAAA-BB-CC-123\"   },   \"supported_networks\": [     \"swift\"   ],   \"type\": \"swift\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `swift` | The type of financial address. |\n| `supported_networks` | *   `swift` | The list of networks supported by this address. |\n| `swift.account_number` | 111222333444 | The SWIFT account number. |\n| `swift.swift_code` | AAAA-BB-CC-123 | The SWIFT code. |\n| `swift.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter instructing your customer to initiate a transfer with their bank using the information you provide, it can take up to 5 days for the transfer to complete. The settlement timing depends on the banking rails that the transfer arrived through to Stripe:\n\n*   ACH transfers arrive within 1-3 business days.\n*   Domestic wire transfers (Fedwire) arrive on the same day (depending on whether the transfer is sent before the bank’s cut-off time).\n*   International wire transfers (SWIFT) arrive within 1-5 business days.\n\n[](#web-confirm-success)\n\nThe PaymentIntent stays in a `requires_action` status until funds arrive in the bank account. When funds are ready, the PaymentIntent status updates from `requires_action` to `succeeded`.\n\nYou need to set up your [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint to start receiving the `payment_intent.partially_funded` event.\n\nYou can [add a webhook from the Dashboard](https://dashboard.stripe.com/webhooks/create).\n\nAlternatively, you can use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints) to start receiving the [`payment_intent.partially_funded`](https://docs.stripe.com/api/events/types#event_types-payment_intent.partially_funded) event.\n\nStripe sends the following events during the payment funding flow when we update the PaymentIntent.\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.requires_action` | Sent during confirmation when the customer balance doesn’t have sufficient funds to reconcile the PaymentIntent, the PaymentIntent transitions to `requires_action`. | Instruct your customer to send a bank transfer with the `amount_remaining`. |\n| `payment_intent.partially_funded` | The customer sent a bank transfer that was applied to the PaymentIntent, but wasn’t enough to complete the payment. This might happen because the customer transferred an insufficient amount (because of a mistaken underpayment or fees charged by their bank) or because a remaining customer balance was applied to this PaymentIntent. PaymentIntents that are partially funded aren’t reflected in your account balance until the payment is complete. | Instruct your customer to send another bank transfer with the new `amount_remaining` to complete the payment. If you want to complete the payment with the partially applied funds, you can update the `amount` and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the PaymentIntent again. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n\n#### Caution\n\nWhen you change the amount of a partially funded PaymentIntent, the funds are returned to the customer balance. If other PaymentIntents are open, Stripe funds those automatically. If the customer is configured for manual reconciliation, you need to [apply the funds](https://docs.stripe.com/api/payment_intents/apply_customer_balance) again.\n\nWe recommend [using webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete.\n\n### Sample code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)`\n\n### View pending payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all pending bank transfer PaymentIntents in the [Dashboard](https://dashboard.stripe.com/payments) by applying the **Waiting on funding** filter to **Status** .\n\n[](#test-your-integration)\n\nYou can test your integration by simulating an incoming bank transfer using either the Dashboard or an HTTP request.\n\n### With the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate a bank transfer using the Dashboard, navigate to the customer’s page in the Dashboard. Under **Payment methods**, click **Add** and select **Fund cash balance (testmode only)**.\n\n### With the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make an API call to simulate a bank transfer.\n\n`curl https://api.stripe.com/v1/test_helpers/customers/ic_xxxxxxxxx/fund_cash_balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d reference=REF-4242`\n\n[\n\n## Handling temporary availability issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-temporary-availability-issues)\n\nThe following error codes indicate temporary issues with the availability of the payment method:\n\n| Code | Description | Handling |\n| --- | --- | --- |\n| `payment_method_rate_limit_exceeded` | Too many requests were made in quick succession for this payment method, which has stricter limits than the [API-wide rate limits](https://docs.stripe.com/rate-limits). | These errors can persist for several API requests when many of your customers try to use the same payment method, such as during an ongoing sale on your website. In this case, ask your customers to choose a different payment method. |\n\n#### Caution\n\nIf you anticipate heavy usage in general or because of an upcoming event, contact us as soon as you know about it.",
    "title": "Accept a bank transfer | Stripe Documentation",
    "description": "Use the Payment Intents API to accept bank transfer payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customer-balance",
    "markdown": "# Customer balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the customer balance with payments.\n\nYour customers might have associated balances that contain two types of funds—cash and credit.\n\n## Cash balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer’s cash balance represents funds that they can use for payment. When they overpay or send an amount using a bank transfer that isn’t automatically reconciled with any outstanding payment, we add these funds to the customer cash balance. You can use these funds for later payments for the same customer, or [initiate a refund](https://docs.stripe.com/payments/customer-balance/refunding#create-return-dashboard) from their cash balance to return the funds to their bank account, limited to the amount available in the customer balance.\n\nA customer is able to have cash balances in all currencies that you can accept bank transfer payments in- each with it’s own [funding instruction](https://docs.stripe.com/payments/bank-transfers#funding-instructions).\n\nYou can’t add funds to the customer cash balance directly. This isn’t a balance that customers can top up and is only there as a reconciliation layer—it’s not a digital wallet or e-money. You can’t use the cash balance for any other purpose besides future payments, or returns to the customer it’s associated with.\n\n## Credit balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn contrast to a cash balance, a _credit balance_ is an [Invoices](https://docs.stripe.com/api/invoices \"invoices\") feature that represents liability between you and the customer. You can’t use credit balance funds for payment, but you can apply them to offset future invoices. You can update the customer credit balance by creating an adjustment [Customer Balance Transaction](https://docs.stripe.com/api/customer_balance_transactions/object). For more information on credit balances, refer to [Customer Credit Balance](https://docs.stripe.com/invoicing/customer/balance).\n\n## View the customer balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can find a customer’s balance with both the API and through the Stripe Dashboard. To view a customer’s balance using the API, first retrieve the `customer` and then expand the `cash_balance` field.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}}?expand[]=cash_balance \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\`\n\n`{   \"id\": \"cus_HgrkK7bxHMy65g\",   \"object\": \"customer\",   \"address\": null,   \"cash_balance\": {     \"available\": {         \"usd\": 50,     },     \"settings\": {       \"reconciliation_mode\": \"automatic\"     },     \"livemode\": \"true\",     \"object\": \"cash_balance\",   },   \"created\": 1598918400,`\n\nTo view a customer’s balance in the Dashboard, navigate to the **Customer** page. The customer’s balance appears in the **Payment methods** section.\n\n## Make a payment from the cash balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer has a cash balance, you can use the funds immediately to make a payment up to the available amount. To do this, create a PaymentIntent using the `customer_balance` payment method type.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1099 \\   -d currency=usd \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method_types[]\"=customer_balance \\   -d \"payment_method_data[type]\"=customer_balance \\   -d confirm=true`\n\nWhen your customer has a cash balance, you can use the funds immediately to make a payment up to the available amount. You can do this by using either the API or the Dashboard.\n\nTo make a payment using the API, create a PaymentIntent using the `customer_balance` payment method type.\n\nThe payment succeeds if the cash balance has sufficient funds, and fails otherwise.\n\nTo collect more funds from the customer when the cash balance is insufficient, use the customer balance with a [bank transfer funding](https://docs.stripe.com/payments/bank-transfers/accept-a-payment).\n\n## List changes to the customer balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChanges to the customer’s cash balance are modeled as a list of [cash balance transactions](https://docs.stripe.com/api/cash_balance_transactions/object). You can retrieve these transactions for a customer to see how their cash balance has changed over time.\n\n#### Note\n\nFor a customer with multiple cash balances in different currencies, listing changes to the cash balance will return changes for all the different currencies.\n\n## Cash balance transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCash balance transactions have a [`type`](https://docs.stripe.com/api/cash_balance_transactions/object#customer_cash_balance_transaction_object-type) value indicating the type of action that caused the cash balance to change.\n\n| Type | Description |\n| --- | --- |\n| `funded` | The customer has funded their balance by making a bank transfer. Funds represented by these transactions might be automatically applied to payment intents and invoices depending on the [reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation) procedure. If these funds are applied automatically, you’ll see additional transactions of type `applied_to_payment` representing that. |\n| `applied_to_payment` | Funds from the cash balance were applied to a payment intent, either by [reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-automatic-reconciliation) after funding arrives, or by [manual reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation). |\n| `unapplied_from_payment` | A [partially funded](https://docs.stripe.com/payments/bank-transfers/accept-a-payment?payment-ui=direct-api#handling-underpayments-and-overpayments) payment intent was [modified](https://docs.stripe.com/api/payment_intents/update) or [canceled](https://docs.stripe.com/api/payment_intents/cancel), and the funds were returned to the customer’s cash balance. You can use these funds for future payments. |\n| `refunded_from_payment` | A successful payment intent has been [refunded to the customer cash balance](https://docs.stripe.com/payments/customer-balance/refunding#refund-customer-balance-payment-customer-balance). You can use these funds for future payments. |\n| `return_initiated` | Unspent funds are being returned to the customer’s bank account from their cash balance. |\n| `return_canceled` | An attempt to return funds to the customer’s bank account has been canceled, either because you [canceled the refund before the customer submitted their bank details](https://docs.stripe.com/payments/customer-balance/refunding#create-return-dashboard-cancel), or we weren’t able to collect bank account details from the customer. For more information about refund state transitions, see [Refund bank transfer payments](https://docs.stripe.com/payments/customer-balance/refunding#refund-customer-balance-payment-bank-account). |\n| `funding_reversed` | Funds have been debited from the cash balance due to an [ACH reversal](https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us). |\n| `adjusted_for_overdraft` | Funds have been returned to the cash balance after an [ACH reversal](https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us) caused the balance to go negative. |\n| `transferred_to_balance` | Funds have been moved from the cash balance to your Stripe balance due to failed refunds or insufficient refund details. |",
    "title": "Customer balance | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customer-balance/reconciliation",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Reconciliation\n\n## Learn about how Stripe reconciles the customer balance to payments and invoices.\n\nStripe offers the `automatic` or `manual` reconciliation behavior for funds in the cash balance.\n\nBy default, Stripe applies the automatic reconciliation mode to the cash balance of all of your customers. You can use the Bank Transfers [reconciliation settings](https://dashboard.stripe.com/settings/bank_transfers) to change the reconciliation behavior for everyone.\n\n![Bank Transfer reconciliation settings](https://b.stripecdn.com/docs-statics-srv/assets/bank-transfer-reconciliation-settings.930a07d8937809fddf187138649fc419.png)\n\nBank Transfer reconciliation settings\n\n## Override reconciliation behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the Dashboard or API to override, for a specific customer, the Bank Transfers reconciliation settings.\n\nTo override a customer’s reconciliation behavior in the Dashboard:\n\n1.  Select the customer, then find **Cash Balance** in the **Payment methods** section.\n2.  Expand the overflow menu () next to the cash balance details.\n3.  From the expanded options, select **Change reconciliation mode**. This displays a modal that allows you to change the reconciliation behavior for the customer.\n\n![Cash Balance section on the Customer page](https://b.stripecdn.com/docs-statics-srv/assets/cash-balance-settings.fbc9cb0a50beaf42ab1ff6baab7dc09f.png)\n\nThe Cash Balance section on the Customer page\n\nTo override a customer’s reconciliation behavior using the API, set the customer’s [reconciliation mode](https://docs.stripe.com/api/customers/object#customer_object-balance_settings-reconciliation_mode) to `manual`.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"cash_balance[settings][reconciliation_mode]\"=manual`\n\nTo point the reconciliation mode for an overridden customer back to the user’s default, you can do so in the Dashboard. You can also use the API to set the [reconciliation mode](https://docs.stripe.com/api/customers/object#customer_object-balance_settings-reconciliation_mode) on the customer to `merchant_default`.\n\n## Automatic cash balance reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Stripe automatically applies any available cash balance to PaymentIntents and [invoices](https://docs.stripe.com/api/invoices \"invoices\") that are awaiting funding. A PaymentIntent is awaiting funding if it’s incomplete. An invoice is awaiting funding if it’s `open` and either hasn’t passed its due date or became overdue within the last 30 days.\n\nStripe applies funds in the following order:\n\n1.  Stripe initially attempts to match a bank transfer reference with a single invoice that has a matching [invoice number](https://docs.stripe.com/api/invoices/object#invoice_object-number).\n2.  If the first attempt is unsuccessful, Stripe attempts to match the bank transfer reference with a single incomplete PaymentIntent that has a matching reference stored in the PaymentIntent’s [display\\_bank\\_transfer\\_instructions](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) field.\n3.  If Stripe doesn’t receive a bank transfer reference or can’t match the reference with a single invoice or PaymentIntent, we search for a group of between one and five invoices and PaymentIntents awaiting the exact amount the user sent. For multiple valid combinations, Stripe prioritizes as follows:\n    *   We filter for the smallest group. If there’s two groups of invoices or PaymentIntents that can both receive the funds, we select the one with fewer objects.\n    *   If there are multiple smallest-sized groups, we select the smallest group that contains the most invoices.\n    *   If multiple groups contain the same number of invoices, we select the group with the oldest PaymentIntents.\n4.  If we can’t find a group that equals the exact funds available, we fund as many invoices that can be fully funded, starting with the oldest finalized ones first.\n5.  If any funds remain, we apply the remaining funds to incomplete PaymentIntents, starting with the oldest ones first.\n\n## Manual cash balance reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen manual reconciliation is enabled on a customer, Stripe does not automatically apply any funds from the customer balance.\n\nYou can apply funds from the customer balance manually using either the API or the Dashboard.\n\nFor both the API and the Dashboard, you can apply funds to an incomplete or partially funded PaymentIntent, or an open Invoice. You can also fund Invoices that are still open but marked overdue with this method.\n\nIn the Dashboard, you can apply funds to a PaymentIntent on the Payments page or on the page for the individual payment.\n\nTo fund a PaymentIntent from the Payments page, find the payment you want to fund, select the overflow menu (), then click **Fund from cash balance**.\n\n![The overflow menu for a single Payment on the Stripe Dashboard Payments page](https://b.stripecdn.com/docs-statics-srv/assets/fund-from-cash-balance-payments-list.16be7818811602d966d2ce4f1aadbc0f.png)\n\nTo fund a PaymentIntent from the page for the individual payment, click the **Fund from cash balance** button.\n\nIn both cases, selecting the **Fund from cash balance** button prompts you to confirm the payment. This button doesn’t appear on either page if the customer doesn’t have any funds available on their cash balance.\n\nIn order to apply funds to an invoice, navigate to the **Invoice** page, click the **Charge customer** button, and then select **Cash Balance** as the payment method.\n\nYou can partially or fully fund an invoice using the Dashboard. This option allows you to pay a portion of the invoice, if the customer doesn’t have sufficient funds on their cash balance to fully pay the invoice.\n\nIn order to apply funds using the API:\n\n`curl https://api.stripe.com/v1/payment_intents/`\n\n`{{PAYMENT_INTENT_ID}}`\n\n`/apply_customer_balance \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d amount=1500 \\  -d currency=usd`\n\nThe amount is optional. When omitted, the amount defaults to the remaining amount requested on the PaymentIntent.\n\nThe following code is an example of a full pass of manual reconciliation. You receive the `cash_balance.funds_available` webhook, find PaymentIntents that are awaiting funding, and use the funds available to reconcile the open PaymentIntents.\n\nThe object sent in the `cash_balance.funds_available` message always contains a representation of the customer’s full cash balance, regardless of the event triggering the webhook. This means that the cash balance might contain funds that were previously added to the customer’s cash balance, not just those added immediately before the triggering event.\n\n`require 'stripe' require 'sinatra'  Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/webhook' do   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   endpoint_secret = ENV['ENDPOINT_SECRET']   payload = request.body.read    begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     status 400     return   rescue Stripe::SignatureVerificationError => e     status 400     return   end    case event['type']     when 'cash_balance.funds_available'     # The cash_balance.funds_available webhook always contains a complete cash balance,     # regardless of the event triggering the webhook.     #     # This means that the cash balance might contain funds that were previously added to the customer's cash balance,     # not just those added immediately before the triggering event.     cash_balance = event['data']['object']     customer_id = cash_balance['customer']      # Cash balances might contain multiple currencies.     currencies_available = cash_balance['available'].keys      # Getting all payment intents for a customer.     customer_payment_intents = Stripe::PaymentIntent.list({customer: customer_id})['data']      # We can order the funding of PaymentIntents in whichever order we like - here we'd     # like to pay the oldest first.     customer_payment_intents = customer_payment_intents.sort_by { |payment_intent| payment_intent['created'] }      # We allow a customer's balance to include multiple currencies.     #     # If a customer has balances in multiple currencies, we only allow reconciliation using the balance that matches     # the currency of the PaymentIntent.     intents_for_currency = {}     currencies_available.each do |currency|       intents_for_currency[currency] = customer_payment_intents.select do |payment_intent|         allowed_payment_methods = payment_intent['payment_method_types']         awaiting_further_payment = ['requires_payment_method', 'requires_action'].include? payment_intent['status']         payment_intent['currency'] == currency.to_s and awaiting_further_payment and allowed_payment_methods.include? 'customer_balance'       end     end      # Here we attempt to fund every fundable PaymentIntent for as long as there are funds available     # in the customer's Cash Balance for the correct currency. Each time we attempt to fund a     # PaymentIntent, we repoll the Cash Balance to make sure that we still have funds available for     # the next PaymentIntent.     currencies_available.each do |currency|       payment_intents = intents_for_currency[currency]       payment_intents.each do |payment_intent|         if cash_balance['available'][currency] == 0           break         end         Stripe::PaymentIntent.apply_customer_balance(payment_intent['id'])         cash_balance = Stripe::Customer.retrieve_cash_balance(customer_id, nil)       end     end   end end`\n\n## Unreconciled cash balance funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes funds in the customer balance remain unreconciled—for example, when a customer sends too much money and you haven’t created any more PaymentIntents or Invoices for that customer.\n\nTo reconcile outstanding funds in the customer cash balance, you can either create a new PaymentIntent or invoice to accept a payment, or return the funds to the customer.\n\n#### Caution\n\nYou’re responsible for making sure that you reconcile customer cash balances promptly and accurately. Reconcile outstanding customer balances quickly, rather than leaving them in your account for an extended period.\n\nStripe periodically sends a reminder email when you have unreconciled balances in your account to make sure that you can review these unreconciled funds. If a customer balance remains unreconciled for 75 days, Stripe automatically attempts to return the funds to the customer’s bank account. When Stripe doesn’t have the customer’s account information, Stripe might reach out to the customer directly to initiate a refund of unreconciled funds. If Stripe is unable to determine the customer’s account information by the 90 day mark, we sweep the unreconciled funds to your Stripe account balance. Coordinate directly with the customer to make sure they receive the returned funds.\n\nYou can see the full list of customers who have unreconciled cash balances and the date that we’ll return them to the customer in your [Dashboard](https://dashboard.stripe.com/test/customer-balances).\n\n## Credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n_Credit balance_ is handled differently from cash balance. Customer credit balance is an [Invoices](https://docs.stripe.com/api/invoices \"invoices\")\\-only feature which represents liability between you and the customer. When an invoice is finalized, the customer’s credit balance is applied to the invoice, decreasing the amount due.\n\nFor more information on credit balances, see [Customer Credit Balance](https://docs.stripe.com/invoicing/customer/balance).",
    "title": "Reconciliation | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/bank-transfer",
    "markdown": "# Set up a subscription with bank transfers\n\n## Allow customers to set up recurring payments by transferring funds from their bank account.\n\nUse this guide to set up a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") using [bank transfers](https://docs.stripe.com/payments/bank-transfers) as a payment method.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") are core resources for Subscriptions. Create a product and a recurring price by following the steps in the [product and prices guide](https://docs.stripe.com/products-prices/overview). Save the price ID—you’ll need it later in this guide.\n\n[](#create-customer)\n\nTo start, create a [customer](https://docs.stripe.com/api/customers \"Customers\") with a valid email address, if one doesn’t already exist. The valid email address ensures that the customer can receive invoices you send to them. Funds from bank transfers are held in the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance), so you have to associate a [Customer](https://docs.stripe.com/api/customers) object with each bank transfer subscription.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\"`\n\n[](#create-subscription)\n\n[Create](https://docs.stripe.com/api/subscriptions/create) the subscription using the customer ID and price ID from the previous steps.\n\n*   Set [`collection_method`](https://docs.stripe.com/api/subscriptions/create#create_subscription-collection_method) to `send_invoice`.\n*   Set [`days_until_due`](https://docs.stripe.com/api/subscriptions/create#create_subscription-days_until_due) to configure how many days the customer has to pay the [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d collection_method=send_invoice \\  -d days_until_due=30 \\  -d \"payment_settings[payment_method_types][0]\"=customer_balance`\n\nAn invoice is sent to the customer when the Subscription is due. The invoice is marked as paid if the customer has enough funds in their [cash balance](https://docs.stripe.com/payments/customer-balance). Otherwise, it contains the necessary information needed for the customer to push funds from their bank account. This invoice also has a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). Subsequent invoices use the price you created in the first step.\n\nLearn more about [bank transfer invoices](https://docs.stripe.com/invoicing/bank-transfer).",
    "title": "Set up a subscription with bank transfers | Stripe Documentation",
    "description": "Allow customers to set up recurring payments by transferring funds from their bank account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customer-balance/funding-instructions",
    "markdown": "# Funding instructions | Stripe DocumentationThe Stripe Docs logo\n\n## Provide customer balance funding instructions without creating a PaymentIntent.\n\nThis guide describes how to retrieve instructions for funding the customer’s cash balance without creating a PaymentIntent. Funding instructions are typically useful if you’re accepting payments from larger companies who require these details before you send them an [invoice](https://docs.stripe.com/api/invoices \"invoices\") or request for payment.\n\nMost users rely on this API for a first-time customer signup flow. If a customer selects bank transfers as their preferred payment method, you can call this endpoint to get the funding instructions right away rather than waiting for the first PaymentIntent or Invoice to be created.\n\nThe funding instructions will always be the same for a given customer across both the Customer Balance Funding Instructions API and the [PaymentIntents API](https://docs.stripe.com/payments/bank-transfers/accept-a-payment). As with PaymentIntents, you can request funding instructions using the bank transfer type and currency that best fits your customer.\n\n[](#create-funding-instructions)\n\nUse the Customer Balance Funding Instructions API to retrieve a set of `financial_addresses` that can receive funds from the customer. Provide these bank account details to your customer so that they can initiate a bank transfer using any of the `supported_networks`.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n`/funding_instructions \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d funding_type=bank_transfer \\  -d \"bank_transfer[type]\"=us_bank_transfer \\  -d currency=usd`\n\nThe response contains the following fields:\n\n[](#vban-confirmation-letters)\n\nSome customers might request additional assurance that the account they’re transferring money into is yours, because the account might be listed as owned by Stripe. To provide this assurance, you can generate a letter confirming your ownership of the account to the customer. In this letter, Stripe confirms that you’re the owner of the virtual bank account corresponding to the account details you have passed to that customer.\n\nTo download a letter confirming account ownership:\n\n1.  Navigate to the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard.\n    \n2.  Select the customer who has requested additional verification that you own the account.\n    \n3.  Navigate to their cash balance details. This page shows the account details that the customer must use to pay you by bank transfer.\n    \n4.  Click the button to download a confirmation letter in a PDF format with today’s date.\n    \n\n![Button to download confirmation of account ownership](https://b.stripecdn.com/docs-statics-srv/assets/vban-confirmation-letter-button.cfd3f902e44069f96d011b7fb8cba336.png)\n\nDownload confirmation of account ownership",
    "title": "Funding instructions | Stripe Documentation",
    "description": "Create or retrieve VBAN details for customers to fund their cash balance without a PaymentIntent, and download a confirmation letter for the VBAN ownership.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/mastercard-installments",
    "markdown": "# Mastercard Installments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Mastercard Installments, a program that allows issuers and lenders to provide buy now, pay later payments.\n\nMastercard Installments is a program that allows merchants to offer installment payment options to customers, leveraging their existing Mastercard relationship:\n\n*   Merchants are automatically enrolled to accept Mastercard Installments when they start accepting Mastercard payments.\n*   Customers who have a Mastercard Installments virtual card from their bank can pay in 4 interest-free installments during checkout, just like a regular Mastercard transaction.\n*   The same fee structure applies to Mastercard Installments as regular Mastercard transactions.\n*   Surcharging for Mastercard Installments is prohibited.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe](https://stripe.com/legal/restricted-businesses), the following categories are prohibited from accepting a Mastercard Installments virtual card.\n\n*   Money transfer\n*   Funding transactions\n*   Quasi cash\n*   Merchandise and services: Customer financial institution\n*   Payment transaction\n*   MoneySend\n\n## Recurring payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMastercard Installments doesn’t support recurring payments such as subscriptions. If a buyer attempts to purchase a recurring product or service with this card, it will be declined.\n\n## Disable Mastercard Installments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t want to accept Mastercard Installments payments either:\n\n*   Create a support inquiry at [Stripe Support](https://support.stripe.com/) using the subject “MC Installments Opt Out”\n*   Navigate to [this link](https://support.stripe.com/contact/email?question=other&topic=payment_apis&subject=MC%20Installments%20Opt%20Out&body=I%20would%20like%20to%20request%20that%20Stripe%20XXX&refcode=cQ6o) directly to request “opting out”.\n\nThis process might take 1-3 days to complete. Opting out of Mastercard Installments also opts you out of Apple Pay Later.",
    "title": "Mastercard Installments | Stripe Documentation",
    "description": "Learn about Mastercard Installments, a program that allows issuers and lenders to provide buy now, pay later payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/alma",
    "markdown": "# Alma payments | Stripe DocumentationThe Stripe Docs logo\n\n## Alma paymentsBeta\n\n## Offer French customers the ability to pay in 2, 3, or 4 installments while getting paid instantly.\n\n[Alma](https://almapay.com/) is a Buy Now, Pay Later payment method available in France that gives your customers flexibility.\n\nWhen customers select Alma as their payment method, Stripe redirects them to Alma’s website, where they get the ability to choose between 2, 3, or 4 installments to complete their purchase. You are paid immediately.\n\n*   **Customer locations**\n    \n    France\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    T+3\n    \n*   **Connect support**\n    \n    Connected accounts that use the Stripe Dashboard\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Alma and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Alma. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Alma from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Alma as a payment](https://docs.stripe.com/payments/alma/accept-a-payment).\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the customer’s billing country and the transaction amount, Alma can present customers with various payment options. Cart ranges and geographic availability for payment options are determined by Alma and may change at their discretion. Regardless of the underlying payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Alma collects the purchase amount from your customer, who repays Alma directly. These options include:\n\nPay in 2, 3, or 4 (also known as Installments): Customers pay for the purchase in two,three or four interest-free payments. The total transaction amount is typically spread equally across the installments, but Alma might occasionally charge your customer more in the first installment based on the customer’s purchase power and other credit factors.\n\nThe following tables list the supported payment options for the countries in each region. If a payment option isn’t listed for a country, it isn’t currently supported.\n\n### France\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and restricted business](https://stripe.com/restricted-businesses), Alma prohibits the following categories:\n\n*   Sole proprietorships or individual accounts\n*   Business to Business Services\n*   Educational services\n*   Professional services (including, but not limited to, legal, consulting, and accounting)\n*   Transportation services\n*   Travel services\n*   Telecommunication services and utilities\n*   Veterinary services\n\nSee a [full list of prohibited activities](https://help.almapay.com/hc/en-gb/articles/360006779359-Which-activities-are-not-eligible-for-payment-with-Alma). Even if an activity isn’t listed as prohibited, your business might still be ineligible for Alma due to risk-related reasons.\n\n## Customer terms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlma requires that you add the following terms to your general terms of sale:\n\n*   Customers can make purchases in installments using Alma.\n*   A customer’s purchase using Alma is subject to Alma’s terms and conditions.\n*   Non-approval by Alma for a purchase can result in the cancellation of that purchase.\n*   A customer using Alma to purchase a good or service has a period of 14 calendar days in which they can withdraw the purchase.\n\n[](#refunds)\n\nAlma supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Alma payments are asynchronous and take up to 5 minutes to complete. We will notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we will return the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Alma payments by logging into their Alma account. This requirement helps reduce the risk of fraud or unrecognized payments. While Alma covers losses incurred from customer fraud, Alma might contact you and request to stop or pause shipment before incurring any losses. Please comply promptly with these requests.\n\nCustomers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Alma resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Alma determine if a dispute is valid or if it should be rejected. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Alma makes a decision within 25 calendar days of evidence submission. If Alma resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Alma rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Warning\n\nAlma requires merchants to maintain reasonable fraud and dispute rates. Increases to your fraud and dispute rates might result in losing access to Alma.\n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Alma payments in the currencies that map to your country. The default local currency for Alma is `eur` and customers also see their purchase amount in `eur`.",
    "title": "Alma payments | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/billie",
    "markdown": "# Billie payments | Stripe DocumentationThe Stripe Docs logo\n\n## Billie paymentsBeta\n\n## Offer businesses \"Pay in 30\" payment terms while getting paid instantly.\n\n[Billie](https://billie.io/) is a Buy Now, Pay Later payment method available in Germany, France, and the Netherlands that gives your customers payment flexibility.\n\nWhen customers select Billie as their payment method, Stripe redirects them to Billie’s website, where they’re granted the ability to pay in 30 days. You’re paid immediately.\n\n*   **Customer locations**\n    \n    EU customers\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Billie and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Billie. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Billie from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Billie as a payment](https://docs.stripe.com/payments/billie/accept-a-payment).\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of goods or services sold and businesses [restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Billie:\n\n*   Sale of high-priced goods (such as jewels and gold)\n*   Sale of weapons\n*   Production and distribution of adult entertainment or pornography\n*   Money Service Businesses\n*   Embassies or consulates\n*   Virtual currencies\n*   Conducting gambling and lottery activities\n*   Manufacturing of weapons and ammunition\n*   Construction of military vehicles\n*   Construction of buildings\n*   Civil engineering\n*   Gambling\n*   Private households, production for own needs\n*   Gyms\n\n[](#refunds)\n\nBillie supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Billie payments are asynchronous and take up to 5 minutes to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we return the amount to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Billie payments in the currencies that map to your country. The default local currency for Billie is `eur` and customers also see their purchase amount in `eur`.\n\n| Currency | Country |\n| --- | --- |\n| `eur` | France, Germany, Netherlands |",
    "title": "Billie payments | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication/plugins",
    "markdown": "# SCA migration guide for plugins and developer libraries\n\n## Learn how to update your Stripe plugin or developer library to support Strong Customer Authentication (SCA).\n\n#### Note\n\nThis [SCA](https://docs.stripe.com/strong-customer-authentication) guide is designed for developers of Stripe plugins or libraries. If you’re a Stripe user looking for an SCA-ready plugin, visit [Stripe Partners](https://stripe.com/partners/sca-ready).\n\n## Do I need to support SCA for my users? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBusinesses in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) accepting online payments from customers in the EEA require a different user experience, namely [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") . Transactions that don’t follow the new authentication guidelines may be declined by a customer’s bank, as of September 14th, 2019. This additional layer of authentication requires migrating to SCA-ready solutions like the new version of [Checkout](https://stripe.com/checkout) or the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), described in Step 2.\n\n[](#determine-integration)\n\nRefer to the [SCA migration guide](https://docs.stripe.com/strong-customer-authentication/migration) to review the integration paths for the new version of [Stripe Checkout](https://stripe.com/checkout), the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), the [Setup Intents API](https://docs.stripe.com/payments/save-and-reuse), Stripe Billing, and iOS or Android. For developers of plugins or libraries:\n\n*   **Choose Stripe Checkout when possible.** Stripe’s new version of [Checkout](https://stripe.com/checkout) is a fully hosted payment page that can be branded by businesses, supports recurring [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and is the easiest way to provide SCA support to your users.\n*   **For more control over your checkout experience, use the Payment Intents and Setup Intents APIs.** These APIs work with [Elements](https://stripe.com/payments/elements), Stripe’s customizable UI components for payment flows, and other Stripe APIs like [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), [Customers](https://docs.stripe.com/api/customers \"Customers\"), and [Connect](https://docs.stripe.com/connect \"Connect\"). The [Payment Intents](https://docs.stripe.com/payments/payment-intents) and [Setup Intents](https://docs.stripe.com/payments/save-and-reuse) APIs display authentication flows like 3D Secure 2, save cards to use later, and ensure your integration is SCA-ready.\n*   **Programmatically subscribe your user to webhooks**: You can [register a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) for your account or connected accounts and manage them with the [Webhooks](https://docs.stripe.com/webhooks \"webhook\") API, simplifying setup for your users.\n\nIf none of these options work for your integration, please [let us know](mailto:plugins+sca@stripe.com).\n\n[](#notify-users)\n\nWe recommend releasing an update for your users to let them know your payments solution is SCA-ready. You can share the [guide to Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) with your users to help them understand these regulatory changes. When you’ve released an SCA-ready update, please [let us know](mailto:plugins+sca@stripe.com) as well.\n\n#### Caution\n\nProvide an SCA-ready update as soon as you’re finished updating. We direct users to SCA-ready solutions on the [Stripe Partners](https://stripe.com/partners/sca-ready) page.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Checkout Overview](https://docs.stripe.com/payments/checkout)\n*   [One-time Payments](https://docs.stripe.com/payments/payment-intents)\n*   [Saving and Reusing Cards](https://docs.stripe.com/payments/save-and-reuse)\n*   [Migrating to Payment Intents](https://docs.stripe.com/payments/payment-intents/migration)",
    "title": "SCA migration guide for plugins and developer libraries | Stripe Documentation",
    "description": "Learn how to update your Stripe plugin or developer library to support Strong Customer Authentication (SCA).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication/migration",
    "markdown": "# Update your integration for SCA\n\n## Learn how to update your integration to avoid declined payments due to Strong Customer Authentication (SCA).\n\nUpdating your integration to support [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") consists of the following steps:\n\n1.  Identify your payment flow\n2.  Determine your integration path\n3.  Implement the new integration path\n4.  Test dynamic authentication\n\nStart updating your integration today. After your integration is live, [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") authentication is displayed when required by SCA.\n\n## 1\\. Identify your payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, identify the payment flow that most closely matches your business. Read more about various flows to [design a payment flow for SCA](https://stripe.com/guides/sca-payment-flows).\n\n| Payment flow | Description | Example Business Scenario |\n| --- | --- | --- |\n| One-time payments | You charge the customer’s cards immediately after they confirm payment. | [E-commerce](https://stripe.com/guides/sca-payment-flows#e-commerce) |\n| Recurring payments | You charge the customer on a recurring basis. | [Gym membership](https://stripe.com/guides/sca-payment-flows#gym-membership) for fixed-amount recurring charges, or [utility bill](https://stripe.com/guides/sca-payment-flows#utility-bill) for metered billing |\n| Payments with [separate authorize and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) within 7 days. | You separately authorize and capture card payments within 7 days after the customer confirms payment. | [Ridesharing](https://stripe.com/guides/sca-payment-flows#ridesharing) |\n| Payment captured more than seven days after authorization. | You charge the customer’s card more than 7 days after they submit payment details. | [Crowdfunding](https://stripe.com/guides/sca-payment-flows#crowdfunding), or [car rental](https://stripe.com/guides/sca-payment-flows#car-rental) if final amount may change. |\n| Other off-session payments | You save the customer’s cards and charge some time later when the customer is not available to complete authentication. | N/A |\n\n## 2\\. Determine your integration path ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose an integration option based on your payment flow below:\n\n[](#one-time)\n\nFor one-time payments, you can complete the full integration today.\n\n### Stripe Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet prebuilt, conversion-optimized checkout flows with minimal code. Choose this option if you prefer a low-maintenance integration. For this payment flow, you can complete the full integration, and handling exemptions doesn’t require any additional work.\n\n*   See [how to integrate Stripe Checkout](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) to learn more.\n\n### Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild dynamic payment flows and custom checkout pages by migrating to the Payment Intents API with one of our client libraries:\n\n*   [Stripe.js & Elements](https://docs.stripe.com/payments/payment-intents/migration)\n*   [Stripe iOS SDK](https://docs.stripe.com/payments/accept-a-payment?platform=ios#setup-client-side)\n*   [Stripe Android SDK](https://docs.stripe.com/payments/accept-a-payment?platform=android#setup-client-side)\n\nFor this payment flow, you can complete the full integration, and handling exemptions requires no additional work.\n\n*   See [how to use the Payment Intents API](https://docs.stripe.com/payments/payment-intents) to learn more.\n\n[](#recurring)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Stripe Billing with the new version of Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCheckout is a prebuilt checkout page that lets you collect payments and manage simple [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") with a single integration.\n\n*   See [how to build subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions) to learn more.\n\n### Stripe Billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTake advantage of automated tools to protect your revenue and scale your business. Build your own custom checkout experience.\n\n1.  Update your client-side integration to [save and reuse cards](https://docs.stripe.com/payments/save-and-reuse).\n2.  Then, [implement SCA-changes for Stripe Billing](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n[](#separate-auth-capture)\n\nFor payments with separate authorize and capture, you can complete the full integration today.\n\n### The new version of Stripe Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet prebuilt, conversion-optimized checkout flows with minimal code. Choose this option if you prefer a low-maintenance integration. For this payment flow, you can complete the full integration today, and no additional work will be needed to handle exemptions.Use Stripe Checkout with separate auth and capture\n\n[Use Stripe Checkout with separate auth and capture](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\n\n### Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild dynamic payment flows and custom checkout pages by migrating to the Payment Intents API with one of our client libraries:\n\n*   [Stripe.js & Elements](https://docs.stripe.com/payments/payment-intents/migration)\n*   [Stripe iOS SDK](https://docs.stripe.com/payments/accept-a-payment?platform=ios#setup-client-side)\n*   [Stripe Android SDK](https://docs.stripe.com/payments/accept-a-payment?platform=android#setup-client-side)\n\nFor this payment flow, you can complete the full integration, and handling exemptions requires no additional work.\n\n*   See [how to use the Payment Intents API](https://docs.stripe.com/payments/payment-intents) to learn more.\n\n[](#deferred-auth)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n[](#other-off-session)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n#### Note\n\n## 3\\. Implement the new integration path ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to make server-side and client-side changes.\n\n### Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to create a payment. A [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) tracks the lifecycle of a customer checkout flow and triggers additional authentication steps when required by SCA.\n\nFollow the [migration guide](https://docs.stripe.com/payments/payment-intents/migration) to learn how to migrate from the Charges API to the Payment Intents API.\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to dynamically display [3D Secure](https://docs.stripe.com/payments/3d-secure) authentication for card payments, client-side changes are also required alongside server-side changes for the Payment Intents API.\n\nFollow the guides to learn how to use the Payment Intents API with [Stripe.js & Elements](https://docs.stripe.com/payments/accept-a-payment?platform=web), [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios), and [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android).\n\n### Using Stripe Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the guides to integrate Checkout for [one-time](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) and [subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n## 4\\. Test dynamic authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo verify that your updated integration handles 3D Secure correctly, be sure to test both successful and unsuccessful authentication flows, using the [regulatory test cards](https://docs.stripe.com/testing#regulatory-cards).\n\nBy default, 3D Secure authentication is only shown when the customer’s bank requires it, so your checkout conversion isn’t negatively affected. As of September 14, 2019, your updated integration displays the 3D Secure authentication flow automatically whenever required by SCA.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Stripe Checkout Overview](https://docs.stripe.com/payments/checkout)\n*   [Payment Intents Overview](https://docs.stripe.com/payments/payment-intents)\n*   [Payment Intents Migration Guide](https://docs.stripe.com/payments/payment-intents/migration)",
    "title": "Update your integration for SCA | Stripe Documentation",
    "description": "Learn how to update your integration to avoid declined payments due to Strong Customer Authentication (SCA).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication/previous-authorization-agreements",
    "markdown": "# Previous authorization agreements | Stripe DocumentationThe Stripe Docs logo\n\n## Learn which payments previous authorization agreements can be used for (sometimes referred to as grandfathering).\n\n#### Warning\n\n## Eligibility ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires an additional step of customer authentication, but sometimes you collect payments when your customer isn’t actively using your application. Even if they authenticated in the past, SCA may require your customer to come back online and re-authenticate. To reduce friction in these off-session payments, Stripe APIs enable upfront authentication—so you can authenticate your customer on-session once and reuse the card off-session repeatedly. As of September 14, 2019, you need to use these APIs to reduce the chance of failed payments when [reusing cards](https://docs.stripe.com/payments/save-and-reuse) or [creating subscriptions and invoices](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\nHowever, you can use previous authorization agreements for off-session payments that meet the following criteria:\n\n*   Cards from EU customers saved before December 31, 2020\n*   Cards from UK customers saved before September 14, 2021\n\nThis means you don’t have to use Stripe’s new APIs to set up saved cards again, and your off-session payments can proceed normally—without re-authentication from customers.\n\n## How it works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use previous authorization agreements for all off-session payments that meet both of these conditions, regardless of payment amount and frequency:\n\n*   You saved the card details before the [eligibility](#eligibility) cutoff\n*   You explicitly tell Stripe the transaction is off-session\n\nStripe automatically looks for a transaction made with the card prior to the eligibility cutoff. If found, Stripe uses the previous authorization agreement for the current transaction. If the bank accepts the previous authorization agreement, the transaction is categorized as out of scope for SCA and can proceed without additional authentication.\n\nIf the bank declines the previous authorization agreement, it’s like any other PaymentIntent failing the confirmation step. The PaymentIntent’s [status changes](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to [requires\\_payment\\_method](https://docs.stripe.com/upgrades#2019-02-11 \"requires_payment_method\"), and you have to [notify your customer to complete the payment](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n\n## Saving cards after the eligibility period ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow that SCA has taken effect, [save and reuse cards](https://docs.stripe.com/payments/save-and-reuse) with the Payment Intents and [Setup Intents APIs](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") to qualify for off-session exemptions. You can also save cards using [Stripe Checkout](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\n## Preparing your saved cards for SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Stripe to reuse authorization agreements, you need to use PaymentIntents and tell Stripe the payment is off-session.\n\nFor [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") and [invoices](https://docs.stripe.com/api/invoices \"invoices\") managed with Stripe Billing, refer to the [Billing SCA guide](https://docs.stripe.com/billing/migration/strong-customer-authentication#previous-agreements).",
    "title": "Previous authorization agreements | Stripe Documentation",
    "description": "Learn which payments previous authorization agreements can be used for (sometimes referred to as grandfathering).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/recurring-payments",
    "markdown": "# Recurring payments | Stripe DocumentationThe Stripe Docs logo\n\n## Understand your options for charging customers on a recurring basis.\n\nStripe offers several ways to charge customers on a recurring basis. This guide helps you understand which method or approach best supports your business.\n\nThis guide offers a few ways to understand your options:\n\n*   [Use cases](#use-cases): Find the right use case for your business.\n*   [Types of recurring payments](#recurring-payment-types): See all the recurring payment types that Stripe supports.\n*   [Stripe products](#stripe-products): Check which Stripe products support your recurring payment use case.\n\n[](#recurring-payment-types)\n\nThe following tabs describe the different types of recurring payments that Stripe supports.\n\n|     |     |\n| --- | --- |\n| **Overview** | Use [Stripe Billing](https://docs.stripe.com/billing) to create and manage your subscriptions through the Dashboard or programmatically through the API.<br><br>*   [Create a payment link with a recurring product](https://docs.stripe.com/payment-links/create).<br>*   Create a subscription through the [Dashboard](https://dashboard.stripe.com/subscriptions) or [build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).<br>*   Create [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) for complex subscription use cases.<br>*   If you use Connect, [create subscriptions](https://docs.stripe.com/connect/subscriptions) for connected accounts and end customers. |\n| **Features** | *   No coding required. (You can optionally use the Subscriptions API and prebuilt components like Stripe Checkout and Elements to build a programmatic subscriptions integration.)<br>*   Customize appearance and behavior in your app.<br>*   Supports multiple products and prices in different currencies.<br>*   Supports responsive web and mobile native.<br>*   Website required. You can use Stripe Elements to customize the appearance of payment forms. |\n| **Use cases** | *   [Accept payments from customers on a recurring basis](#accept-recurring-payments)<br>*   [Accept recurring donations](#recurring-donations)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Migrate existing subscriptions to Stripe](#migrate-subscriptions) |\n\n[](#stripe-products)\n\nThe following table describes which Stripe products support recurring payments.\n\n| Product | Features | Use cases |\n| --- | --- | --- |\n| **Payment Links** | *   No coding<br>*   Customize branding<br>*   One payment link for one or more products<br>*   Mobile support for responsive web<br>*   No website required; share link through SMS, email, or social media<br>*   [Stripe Tax](https://docs.stripe.com/tax) support | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Invoicing** | *   No coding required. (You can optionally use the [Invoices API](https://docs.stripe.com/api/invoices) and prebuilt components like Stripe Checkout and Elements to build a programmatic invoicing integration.)<br>*   Customize branding and templates.<br>*   One invoice for one or more products. Optionally combine one-time and recurring products.<br>*   Mobile support for responsive web.<br>*   No website required. Share invoices through customer portal, hosted invoice page, or as PDFs.<br>*   [Stripe Tax](https://docs.stripe.com/tax) support. | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Subscriptions** | *   No coding required. (You can optionally use the [Subscriptions API](https://docs.stripe.com/api/subscriptions) and prebuilt components like Stripe Checkout and Elements to build a programmatic subscriptions integration.)<br>*   Customize full appearance of payment forms and checkout experience.<br>*   Multiple products, prices, pricing models, and currencies.<br>*   Mobile support for responsive web.<br>*   No website required. You can also add subscriptions to your site.<br>*   [Stripe Tax](https://docs.stripe.com/tax) support. | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Checkout** | *   Minimal coding<br>*   Customize branding<br>*   Multiple products and prices in different currencies<br>*   Mobile support for responsive web<br>*   Website required, but Stripe hosts the payment page<br>*   [Stripe Tax](https://docs.stripe.com/tax) support | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Elements** | *   More coding<br>*   Customize full appearance<br>*   Multiple products and prices in different currencies<br>*   Responsive web and mobile native<br>*   Website required; you add Elements to your payment page<br>*   [Stripe Tax](https://docs.stripe.com/tax) supported with your own [tax integration](https://docs.stripe.com/tax/custom) | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n| **API** | *   Most coding<br>*   Customize full appearance, accept payments through your own UI<br>*   Multiple products and prices in different currencies<br>*   Website required; accept payments through your own UI<br>*   [Stripe Tax](https://docs.stripe.com/tax) supported with your own [tax integration](https://docs.stripe.com/tax/custom) | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n\n[](#enable-customer-portal)\n\nIf you want your customers to manage their own accounts and recurring subscriptions, use the customer portal. Stripe hosts the customer portal, which allows your customers to self-manage their payment details, download invoices, and manage their subscriptions in one place. Read the [no-code customer portal guide](https://docs.stripe.com/customer-management/activate-no-code-customer-portal) for complete details.\n\n[Integrate with the customer portal API](https://docs.stripe.com/customer-management/integrate-customer-portal)\n\n### Set up the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee what your customers can do in the customer portal\n\n[View demo](https://billing.stripe.com/customer-portal-demo)\n\n[](#recurring-donations)\n\nYou can accept recurring donations with Stripe, in the same way as recurring payments. For example, you have a llama rescue organization, Llama House, and want to allow supporters to choose an amount for a recurring, monthly donation. You can use Payment Links to create a link to share on social media and email. From the same payment link, you can also generate a QR code to add to flyers, and an embeddable buy button for your website–all from the Dashboard.\n\n### Accept recurring donations with Payment Links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#migrate-subscriptions)\n\nIf you have existing subscriptions in another system, you can migrate them to Stripe Billing. Read [the guide](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Get an overview of subscriptions](https://docs.stripe.com/billing)\n*   [Create a payment link](https://docs.stripe.com/payment-links/create)\n*   [Add an Apple Pay merchant token for recurring payments](https://docs.stripe.com/apple-pay/merchant-tokens)\n*   [Get started with no-code invoices](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Save payment details during a payment to set up future payments](https://docs.stripe.com/payments/save-during-payment)\n*   [Save card details to set up future payments](https://docs.stripe.com/payments/save-and-reuse)",
    "title": "Recurring payments | Stripe Documentation",
    "description": "Understand your options for charging customers on a recurring basis.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication/sca-enforcement",
    "markdown": "# SCA enforcement | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how European regulators enforce Strong Customer Authentication (SCA).\n\nAlthough Europe is phasing it in unevenly, you should prepare your payment flows to be ready for SCA as soon as possible if SCA regulations impact you. Preparing for SCA helps prevent an increase in declines from European cards, and prepares you in case of early enforcement by banks. Read more about how [enforcement varies by country](https://support.stripe.com/questions/strong-customer-authentication-sca-enforcement-date).\n\n## Make sure your integration is SCA-ready![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour integration is SCA-ready when you process all of your payments volume using [SCA-ready products](https://docs.stripe.com/strong-customer-authentication#preparing). Your business must use an SCA-ready product, such as a recent version of Stripe Checkout, Billing, the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), or an SCA-ready partner solution. Additionally, you should:\n\n*   Test [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS) authentication thoroughly. Use our [regulatory test cards](https://docs.stripe.com/testing#regulatory-cards) to ensure that your integration can handle 3DS.\n*   For off-session payments, make sure you set up and authenticate the card when saving the payment method, and use the API to [flag off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n*   If your business uses the Stripe Billing [Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") or [Invoice](https://docs.stripe.com/api/invoices \"invoices\") APIs, make sure your integration can handle [incomplete statuses](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n## Understand incomplete, declined, or failed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayments can be unsuccessful for a number of reasons, including incomplete, declined, or failed payments. If you look in the Dashboard and see that your payments aren’t advancing past the incomplete status (`requires_action` in the API):\n\n*   Make sure that your customer isn’t in the process of authenticating. If they’re authenticating and it’s an on-session payment, they may expect to see this. It’s also possible that they’ve abandoned the checkout flow.\n*   Check that you’re [handling next actions](https://docs.stripe.com/payments/payment-intents/verifying-status#next-actions) such as authentication—next actions failures can also cause payments to fail.\n*   For off-session payments, set [off\\_session](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-off_session) to `true` when creating the payment.\n\nBanks can decline payments that require 3DS authentication but don’t have 3DS enabled. Go to the Dashboard to see which payments were declined for this reason. For off-session payments, [filter by failed payments](https://dashboard.stripe.com/payments?status%5B%5D=failed) in the Dashboard. Hovering over the status badge highlights the decline reason (for example, authentication required). You can view on-session payments by applying the [incomplete payments filter](https://dashboard.stripe.com/payments?status%5B%5D=incomplete) and seeing if the payment is incomplete, since it requires authentication.\n\nYou may see off-session payments failing even though you think they’re exempt from SCA requirements. For off-session payments, make sure that you’re authenticating the card when saving card details, either without a payment or during a payment. When saving cards without a payment, use the Setup Intents API and set usage to `off_session`. When saving cards during a payment, set setup\\_future\\_usage to `off_session`. Finally, be aware that exemptions aren’t guaranteed and off-session payments may still require authentication by the bank.\n\n## Monitor disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen monitoring disputes, it’s important to understand the mechanics of the dispute process as it pertains to payments that have been authenticated using 3DS. Payments that 3DS successfully authenticates are covered by what’s known as a _liability shift_. If a cardholder [disputes a 3D Secure payment](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) as fraudulent, the liability shifts from you to the card issuer. If the card issuer applies exemptions, the payment isn’t authenticated through 3D Secure, and is therefore not covered by a liability shift.\n\n## Collect permission to reuse cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set up your payment flow to properly save a card with the Payment Intents or Setup Intents API, Stripe marks any subsequent off-session payment as a [merchant-initiated transaction](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") (MIT) to reduce the need to authenticate. Merchant-initiated transactions require an agreement (also known as a _mandate_) between you and your customer. Add terms to your website or application on how you plan to process payments that your customer can opt into. At a minimum, make sure that your terms cover the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf\n*   The anticipated frequency of payments (that is, one-time or recurring)\n*   How you determine the payment amount\n\nAdd text in your checkout flow that references the terms of the payment, for example: I authorize \\[your business name\\] to send instructions to the financial institution that issued my card to take payments from my card account in accordance with the terms of my agreement with you.\n\n## Use SCA-ready Stripe plugins![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re searching for an SCA-ready plugin, refer to [Stripe Partners](https://stripe.com/partners/directory). If you want to migrate an existing Stripe plugin or developer library to support SCA, refer to the [SCA migration guide for plugins and developer libraries](https://docs.stripe.com/strong-customer-authentication/plugins).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [SCA readiness](https://docs.stripe.com/strong-customer-authentication)",
    "title": "SCA enforcement | Stripe Documentation",
    "description": "Learn how European regulators enforce Strong Customer Authentication (SCA).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/charges-api",
    "markdown": "# Card payments on the Charges API\n\n## Card payments on the Charges APIDeprecated\n\n## Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.\n\n#### Legacy API\n\nThe [Charges](https://docs.stripe.com/api/charges) and [Tokens](https://docs.stripe.com/api/tokens) APIs are legacy APIs used in older Stripe integrations to accept debit and credit card payments. Use [PaymentIntents](https://docs.stripe.com/payments/accept-a-payment) for new integrations.\n\nThe Charges API limits your ability to take advantage of Stripe features. To get the latest features, use [Stripe Checkout](https://docs.stripe.com/payments/checkout) or [migrate to the Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration).\n\n## Payment flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, the PaymentIntents API offers more flexibility and integration options.\n\n| Charges API | Payment Intents API |\n| --- | --- |\n| 1.  Collect the customer’s payment information in the browser with Elements.<br>2.  Tokenize the payment information with Stripe.js.<br>3.  Perform a request to send the token to your server.<br>4.  Use the token to create a charge on your server with the desired amount and currency.<br>5.  Fulfill the customer’s order if payment is successful. | 1.  Create a PaymentIntent on your server with the desired amount and currency.<br>2.  Send the PaymentIntent’s client secret to the client side.<br>3.  Collect the customer’s payment information in the browser with Elements.<br>4.  Use Stripe.js or the mobile SDKs to handle [3D Secure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) and complete the payment on the client.<br>5.  Use webhooks to fulfill the customer’s order if the payment is successful. |\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo refund a payment via the API, create a [Refund](https://docs.stripe.com/api#create_refund) and provide the ID of the charge to be refunded.\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge={{CHARGE_ID}}`\n\nTo refund part of a payment, provide an `amount` parameter, as an integer in cents (or the charge currency’s smallest currency unit).\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge={{CHARGE_ID}} \\   -d amount=1000`\n\n## Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer approves the payment, your app receives a [PKPayment](https://developer.apple.com/documentation/passkit/pkpayment) instance containing their encrypted card details by implementing the [PKPaymentAuthorizationViewControllerDelegate](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate) methods.\n\n1.  Use the [createTokenWithPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPAPIClient.html#/c:@CM@StripePayments@StripeCore@objc(cs)STPAPIClient(im)createTokenWithPayment:completion:) SDK method to turn the `PKPayment` into a Stripe `Token`\n2.  Use this `Token` to [create a charge](https://docs.stripe.com/payments/accept-a-payment-charges#ios-create-charge).\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController: PKPaymentAuthorizationViewControllerDelegate {      func paymentAuthorizationViewController(_ controller: PKPaymentAuthorizationViewController, didAuthorizePayment payment: PKPayment, handler: @escaping (PKPaymentAuthorizationResult) -> Void) {         // Convert the PKPayment into a Token         STPAPIClient.shared.createToken(withPayment: payment) { token, error in               guard let token = token else {                   // Handle the error                   return               }             let tokenID = token.tokenId             // Send the token identifier to your server to create a Charge...             // If the server responds successfully, set self.paymentSucceeded to YES         }     }      func paymentAuthorizationViewControllerDidFinish(_ controller: PKPaymentAuthorizationViewController) {`\n\n## Dynamic statement descriptor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) appears on customer statements whenever you charge their card. Additionally, you can set the statement descriptor dynamically on every charge request with the `statement_descriptor` argument on the Charge object.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"statement_descriptor\"=\"Custom descriptor\"`\n\nStatement descriptors are limited to 22 characters, can’t use the special characters `<`, `>`, `'`, `\"`, or `*`, and must not consist solely of numbers.\n\nWhen setting the statement descriptor dynamically on credit and debit card charges, the dynamic portion is appended to the settlement merchant’s statement descriptor (separated by an `*` and an empty space). For example, a statement descriptor for a business, named FreeCookies, that includes the kind of cookie purchased might look like `FREECOOKIES* SUGAR`.\n\nThe `*` and empty space count towards the 22 character limit and Stripe automatically allots 10 characters for the dynamic statement descriptor. This means that the settlement merchant’s descriptor might be truncated if it’s longer than 10 characters (assuming the dynamic statement descriptor is also greater than 10 characters). If the dynamic statement descriptor is also greater than 10 characters, both descriptors are truncated at 10 characters.\n\nIf you’re having issues with the character limits, you can set a [shortened descriptor](https://dashboard.stripe.com/settings/public) in the Stripe Dashboard to shorten the settlement merchant’s descriptor. This allows more room for the dynamic statement descriptor. The shortened descriptor:\n\n*   Replaces the settlement merchant’s statement descriptor when using dynamic descriptors.\n*   Can be between 2 and 10 characters.\n\n#### Note\n\nIf your account’s statement descriptor is longer than 10 characters, set a [shortened descriptor](https://dashboard.stripe.com/settings/public) in the Dashboard or use `statement_descriptor_prefix`. This prevents your statement descriptor from being truncated in unpredictable ways.\n\nIf you’re not sure what the statement descriptors look like when they’re combined, you can check them in the [Stripe Dashboard](https://dashboard.stripe.com/settings/public).\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the most common requests you make, such as processing charges. Metadata isn’t shown to customers or factored into whether or not a charge is declined or blocked by our fraud prevention system.\n\nThrough metadata, you can associate other information—meaningful to you—with Stripe activity. Any metadata you include is viewable in the Dashboard (for example, when looking at the page for an individual charge), and is also available in common reports and exports. As an example, your store’s order ID can be attached to the charge used to pay for that order. Doing so allows you, your accountant, or your finance team to easily reconcile charges in Stripe to orders in your system.\n\nIf you are using [Radar](https://docs.stripe.com/radar \"Radar\"), consider passing any additional customer information and order information as metadata. By doing so, you can write [Radar rules using metadata attributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes) and have more information about the payment available within the Dashboard which can expedite your review process.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"metadata[order_id]\"=6735`\n\n#### Caution\n\nDon’t store any sensitive information (personally identifiable information, card details, and so on) as metadata or in the charge’s `description` parameter.\n\n## Declines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want your integration to respond to payment failures automatically, you can access a charge’s `outcome` in two ways.\n\n*   [Handle the API error](https://docs.stripe.com/api#error_handling) that’s returned when a payment fails. For blocked and card issuer-declined payments, the error includes the charge’s ID, which you can then use to [retrieve](https://docs.stripe.com/api#retrieve_charge) the charge.\n*   Use [webhooks](https://docs.stripe.com/webhooks) to monitor status updates. For example, the `charge.failed` event triggers when a payment is unsuccessful.",
    "title": "Card payments on the Charges API | Stripe Documentation",
    "description": "Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/india-recurring-payments",
    "markdown": "# India recurring payments | Stripe DocumentationThe Stripe Docs logo\n\n## India recurring paymentsBeta\n\n## Learn how to update an integration to support RBI e-mandates.\n\nThe Reserve Bank of India (RBI) issued a [directive](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=11668) (amended subsequently in [December 2020](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=12002) and [March 2021](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=12051&Mode=0)) that introduces additional security measures for recurring payments on India issued cards. These measures include:\n\n*   Banks need to register cardholders and create an e-mandate through a one-time process, using additional factor authentication (AFA) like [3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n*   Banks must alert cardholders at least 24 hours before charges take place and give them the ability to opt out of transactions.\n*   Recurring transactions over 15,000 INR (or equivalent in other currencies) must go through AFA each time.\n\nIf you’re an India-based Stripe user or an international (non-IN) Stripe user, your business is impacted if you have customers who use India cards for:\n\n*   Off-session payments\n*   Subscriptions or Invoices where the `collection_method` is set to `charge_automatically`\n\n## How payments work with an e-mandate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe has worked with a partner platform to support registering e-mandates and issuing pre-debit notifications to customers.\n\n#### Note\n\nWe don’t currently offer the use of e-mandates to Stripe users in Mexico and Japan.\n\nDepending on how you’ve integrated with Stripe, you might need to send Stripe additional information to set up a mandate. The customer must go through AFA (3DS) to register the mandate.\n\nSubsequent off-session payments or auto-debits for a Subscription undergo a significant change. Customers need to receive a pre-debit notification at least 24 hours before the actual payment with the exact debit amount mentioned. The pre-debit notification contains information about the payment and an option to cancel the mandate. If the payment amount is above 15,000 INR or the mandate’s maximum amount, the pre-debit notification contains a link to perform AFA (3DS) to authorize the payment.\n\nBecause Stripe is integrating with a partner platform, we wait 26 hours before charging the customer after receiving a payment request (we add a buffer for possible downstream issues, which necessitates the 26 hours advance notification). This means that Stripe delays collecting payment by 26 hours.\n\nWithout a mandate for an off-session payment, the payment will be declined.\n\n## Integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe RBI regulations impact Subscriptions that use `collection_method=charge_automatically` to charge India issued cards.\n\n### Subscription creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a new Subscription with the API,\n\n*   If you have a default payment method set, the Subscription uses the latest SetupIntent on the payment method, and attempts to find a corresponding mandate.\n*   If no mandate is in place, Stripe automatically attempts to create one even if you don’t pass in the relevant parameters in [mandate\\_options](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_settings-payment_method_options-card-mandate_options). The customer then needs to authenticate the payment.\n\nTo learn how to create a new Subscription, see [Build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n### Subscription Revenue Recovery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides a number of automated recovery features to help collect payments that might’ve been unsuccessful. If you want to handle these payment failures on your own, refer to [Build your own handling for recurring charge failures](https://docs.stripe.com/billing/subscriptions/overview#build-your-own-handling-for-recurring-charge-failures) for guidance. Otherwise, some recommendations are listed below.\n\n#### Note\n\nPayments from India issued cards are attempted only once. This behavior is independent of your payment retry settings. If the payment from an India issued card fails, your Subscription and Invoice status will still be updated based on what you configured in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) for “If all retries for a payment fail”.\n\n#### 3D Secure emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a mandate doesn’t exist on the default payment method during Subscription renewals or updates, Stripe attempts to create a new one. To register the mandate, the customer needs to complete AFA (3DS). Enable the [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) to `Send a Stripe-hosted link for customers to confirm their payments when required` so that customers can be brought back on-session to complete authentication if required.\n\n#### Note\n\nStripe doesn’t attempt to create a new mandate if the current mandate used by the Subscription is `inactive`.\n\n#### Manage failed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe recommend enabling notifications to your customers if their Subscription payments fail and their Subscription is paused. Stripe can send emails to customers to update failed card payment methods if you enable it in the [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic).\n\n### Mandate creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you rely on Stripe to automatically create the mandate, the mandate details are returned in the Invoice’s underlying PaymentIntent and corresponding Charge, or the SetupIntent if you’re creating the Subscription with a trial.\n\nStripe doesn’t return a mandate ID if any of the following is true:\n\n*   A card isn’t an India issued card.\n*   The currency for the mandate isn’t supported by either the issuer or for the Stripe account’s country.\n*   The India issued card is neither Visa nor Mastercard. Stripe only supports mandates for these two card brands.\n\nStripe supports INR mandates for all businesses. The following currencies are supported only for international (non-IN) businesses:\n\n*   USD\n*   EUR\n*   GBP\n*   SGD\n*   CAD\n*   CHF\n*   SEK\n*   AED\n*   JPY\n*   NOK\n*   MYR\n*   HKD\n\nThere are over 100 issuing banks in India and the process of fully adapting to the new requirements is expected to take some time. An issuer might not support e-mandates for a particular currency yet. If so, Stripe doesn’t return a mandate ID.\n\n### Mandate status and troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf Stripe can’t create a mandate, you can suggest using a different card, or you can offer alternative options such as setting [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) as `send_invoice` for the Subscription instead.\n\nAlso, a previously active mandate can become inactive, for instance if the customer cancels it. In that case, the mandate becomes `inactive` and Stripe sends a `mandate.updated` event.\n\nFor more information on receiving webhooks, see [Steps to receive webhooks](https://docs.stripe.com/webhooks#webhooks-summary).\n\n### Subscription updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe pre-debit notification that the bank sends tells the cardholder, at minimum, about the name of the business, the transaction amount, the date or time of the debit, the reference number of the mandate, and the reason for debit. Make sure that your mandate details match what you’re actually debiting the customer for to avoid confusion or declines.\n\nIf you depend on Stripe to automatically create mandates for your Subscription and want to update a Subscription, we recommend that you bring the customer back on-session to cancel the original Subscription. Doing so creates a new subscription in the following scenarios, and creates a new mandate that reflects the Subscription details accurately:\n\n*   Changes to the billing interval of a Subscription\n*   Upgrades to a Subscription where the customer wants to avoid having to authorize the payment each renewal. For context, Stripe creates the mandate with `amount_type=maximum` by default. A customer can still be charged more than the maximum amount with `amount_type=maximum`. However, the customer must authorize payments for amounts more than the `mandate_options[amount]` or 15,000 INR (whichever is less).\n\nExamples:\n\n*   If you have `amount_type=maximum` , `amount=100000`, the customer would need to authenticate for amounts over 1,000 INR.\n*   If you have `amount=2000000`, the customer would need to authenticate for amounts over 15,000 INR.\n\n### Pre-debit notification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the off-session PaymentIntent is [confirmed](https://docs.stripe.com/api/payment_intents/confirm), the issuing bank sends the customer the pre-debit notification. The PaymentIntent transitions to a `processing` state for the entire duration of the pre-debit notification period (26 hours) and can’t be canceled.\n\n`{   \"object\": \"payment_intent\",   ...   \"processing\": {     \"card\": {       \"customer_notification\": {         \"approval_requested\": true,         \"completes_at\": 1677307005       }     },     \"type\": \"card\"   },   ...   \"status\": \"processing\",   ... }`\n\nIf [processing.card.customer\\_notification.approval\\_requested](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-processing-card-customer_notification-approval_requested) is `true`, the customer needs to authenticate the payment using the pre-debit notification sent to them by the issuing bank.\n\nThe [processing.card.customer\\_notification.completes\\_at](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-processing-card-customer_notification-completes_at) attribute specifies the time that the Stripe attempts to charge the card. If successfully processing the payment requires customer approval, they need to authenticate the payment by the specified time.\n\n### Error and decline codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe return error [codes](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) for the following scenarios:\n\n| Error code | Description |\n| --- | --- |\n| `payment_intent_mandate_invalid` | Attempting a recurring payment using an inactive mandate returns this code. You can prevent this by checking the mandate status before attempting to charge. |\n| `india_recurring_payment_mandate_canceled` | Attempting a recurring payment using a canceled mandate returns this code. This can happen when we only learn that a mandate has been canceled at this point. |\n| `processing_error` | Discovery of a (usually transient) processing error returns this code. |\n\nIn the context of e-mandates, certain [decline codes](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) have potentially more specific explanations than [in general scenarios](https://docs.stripe.com/declines/codes):\n\n| Decline code | Description |\n| --- | --- |\n| `transaction_not_approved` | Attempting a subsequent payment when the customer has paused permissions to auto-debit, or doesn’t authenticate the payment when it’s required returns this code. |\n\n## Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use these test card numbers to simulate different scenarios.\n\nIn test mode, it takes approximately 15 minutes for an off-session PaymentIntent to transition out of the `processing` state. The on-session PaymentIntent for an initial payment never enters the `processing` state.\n\n| Test card number | Scenario |\n| --- | --- |\n|     | Simulates successful mandate setup and renewals. |\n|     | Simulates a cardholder receiving a pre-debit notification for an off-session payment either canceling or pausing the payment for a mandate of any amount. |\n|     | Simulates the issuing bank’s failure to send a pre-debit notification to the cardholder during off-session payment for a mandate of any amount. |\n|     | Simulates a cardholder canceling a mandate of any amount. |\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep in mind the following limitations:\n\n*   Stripe attempts to automatically create mandates only on Subscriptions created after October 1, 2021. If you have a Subscription created before then, cancel and create a new Subscription to make sure a mandate is created.\n*   You can’t create a mandate using the [Charges](https://docs.stripe.com/api/charges) and [Sources](https://docs.stripe.com/api/sources) APIs.\n*   You can’t pass an existing mandate to a Subscription.\n*   You can’t cancel or update a mandate.",
    "title": "India recurring payments | Stripe Documentation",
    "description": "Learn how to update an integration to support RBI e-mandates.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/strong-customer-authentication/connect-platforms",
    "markdown": "# SCA migration guide for Connect platforms\n\n## Learn how to update your Connect platform for Strong Customer Authentication (SCA).\n\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") applies to businesses based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) that accept online payments from customers located in the EEA. Many card payments require additional authentication through [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"). As of September 14, 2019, transactions that don’t follow the new authentication guidelines may be declined by a customer’s bank.\n\nYou need to update your platform if you create any of the following charges:\n\n*   [Direct charges](https://docs.stripe.com/connect/direct-charges) on a connected account based in the EEA.\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges) if the `on_behalf_of` parameter is set and specifies a connected account based in the EEA.\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) if your platform is based in the EEA or if the `on_behalf_of` parameter is set and specifies a connected account based in the EEA.\n\n[\n\n## Choose an SCA-ready integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#choose-integration)\n\nYou need to update your Stripe integration to meet SCA requirements. For example, SCA requires off-session payments to be authenticated when customers enter payment details, and subsequent off-session payments may require notifying the customer to return to the application to re-authenticate. Refer to the [SCA migration guide](https://docs.stripe.com/strong-customer-authentication/migration#step-1) to review the integration paths for Stripe Checkout, Stripe Billing, and the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nChoose [Stripe Checkout](https://docs.stripe.com/payments/checkout) if it supports the features your integration requires. Checkout is a hosted payment page that can be branded by businesses, supports recurring [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and is the easiest way to provide SCA support to your connected accounts. It supports creating [direct charges](https://docs.stripe.com/connect/direct-charges) and [destination charges](https://docs.stripe.com/connect/destination-charges) for [Connect](https://docs.stripe.com/connect \"Connect\").\n\nIf you want to build a custom payments experience, use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) as the legacy Charges API isn’t SCA-ready. The Payment Intents API supports the same set of Connect features as the Charges API.\n\n[\n\n## Examine Connect-specific changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#examine-connect-specific-changes)\n\n### Destination charge changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re using the `destination`, `destination[account]`, or `destination[amount]` parameters with the Charges API, note that these parameters have been replaced with `transfer_data[destination]` and `transfer_data[amount]` in both the Charges and the Payment Intents APIs. See the following table for more information.\n\n| Use case | Charges API | Payment Intents API |\n| --- | --- | --- |\n| Your platform is the merchant of record, but you wish to create a transfer to a connected account after the payment completes | Not possible | Set [transfer\\_data\\[destination\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data-destination) to the connected account’s ID |\n| You want your connected account to be the settlement merchant _without_ creating a separate transfer after the payment completes | Set `on_behalf_of` to the connected account’s ID | No change |\n| You want your connected account to be the settlement merchant _and_ you wish to create a transfer to that account after the payment completes | Set `destination` or `destination[account]` to the connected account’s ID | Set [transfer\\_data\\[destination\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data-destination) and [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) to the connected account’s ID |\n| You wish to collect an application fee | Set `application_fee` to the amount desired | Set [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-application_fee_amount) to the amount desired |\n| You wish to transfer a partial amount to your connected account after the payment completes | Set `destination[amount]` to the amount to transfer | Set [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data) to the amount to transfer |\n\n### 3D Secure and Radar rules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout and the Payment Intents API triggers [dynamic 3D Secure authentication](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) based on [Radar rules](https://docs.stripe.com/radar/rules). With Connect, the rules you create only apply to payments created on the platform account. Payments [created directly on the connected account](https://docs.stripe.com/connect/direct-charges) are subject to the connected account’s rules. Configure your default rules and test your integration with [3D Secure test cards](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards).\n\n### SCA impact on saving payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUnder SCA, authentication is required when saving a card in order to collect customer permission and qualify for [off-session exemptions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions) for subsequent off-session payments. To reduce the rate of customers having to authenticate their payment method, [update your integration to use the off-session API](https://docs.stripe.com/strong-customer-authentication/migration#recurring).\n\nIf you [clone saved payment methods](https://docs.stripe.com/connect/cloning-customers-across-accounts) to reuse across multiple connected accounts, note that sharing a payment method with a connected account automatically shares customer permission as well. This allows the platform to make off-session payments on any of their connected accounts without requiring the customer to authenticate their payment method again.\n\n[\n\n## Determine whether connected accounts need to make changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#connected-account-changes)\n\nIn most cases, once you update your payments integration for SCA, your connected accounts don’t have to do any additional work.\n\nIf you provide your own payments API to your connected accounts in addition to or on top of Stripe’s API, your connected accounts may need to make changes to continue accepting payments on your platform. For example, if you run a subscriptions platform on Stripe in which your connected accounts pass payment information to you via your own API, and then you pass those payment details to Stripe’s API, you’ll need to ensure both APIs are SCA-ready. If this is the case for your platform, provide guidance to your connected accounts on any changes they need to make.\n\n[\n\n## Educate your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#educate)\n\nFinally, inform your connected accounts about how SCA can affect them and when your platform will be SCA-ready, regardless of whether they need to [make any changes](#implement-changes).\n\nIn particular, provide them with the following information, tailored for your business:\n\nStrong [Customer](https://docs.stripe.com/api/customers \"Customers\") Authentication (SCA) is a new European regulatory requirement to reduce fraud and make online payments more secure. Since SCA took effect September 14, 2019, online payments require additional customer authentication. Transactions that don’t adhere to the new guidelines may be declined by your customers’ banks. This regulation applies to transactions where both the business and the cardholder’s bank are located in the European Economic Area (EEA).\n\nIf you’d like, you can also send along the [SCA video](https://stripe.com/payments/strong-customer-authentication) and [guide](https://stripe.com/guides/strong-customer-authentication).\n\n### How your platform should support SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re not migrating to an SCA-ready solution, reach out to any of your connected accounts with significant business from European customers so they can move to a new solution before experiencing declines due to SCA.\n\n### Any actions your connected accounts need to take ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf no action is required on their end, let your connected accounts know. Similarly, if action is required, provide them with instructions on the necessary changes.\n\n### How SCA can affect their business ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSCA changes the checkout flow for card payments. Payments that require authentication ask for [3D Secure](https://docs.stripe.com/payments/3d-secure) (often known by its brand names, “Verified by Visa” or “Mastercard SecureCode”), which typically adds an extra step in which the cardholder must provide additional information, such as a one-time passcode or biometric ID.",
    "title": "SCA migration guide for Connect platforms | Stripe Documentation",
    "description": "Learn how to update your Connect platform for Strong Customer Authentication (SCA).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/satispay",
    "markdown": "# Satispay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Satispay paymentsBeta\n\n## Learn how to accept payments with Satispay, a digital wallet popular with Italian customers.\n\n[Satispay](https://satispay.com/) is a stored value wallet payment method available to businesses in Italy.\n\nWhen customers select Satispay as their payment method, Stripe redirects them to Satispay’s website to finish the transaction. You’re paid immediately.\n\n*   **Customer locations**\n    \n    Italy\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Satispay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Satispay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Satispay from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Satispay as a payment](https://docs.stripe.com/payments/satispay/accept-a-payment).\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of goods or services sold and businesses [restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Satispay:\n\n*   Wire transfers and money orders\n*   Pawn shops\n*   Door-to-door sales\n*   Direct marketing\n*   Direct marketing — outbound telemarketing merchants\n*   Financial institutions — merchandise and services\n*   Non-Financial Institutions – Foreign Currency, Non-Fiat Currency Liquid and Cryptocurrency Assets, Money Orders (Not Money Transfer)\n*   Securities — brokers and dealers\n*   Counselling services — debt, marriage and personal\n*   Consumer credit reporting agencies\n*   Employment agencies and temporary help services\n*   Detective agencies, protective agencies and security services, including armoured cars and guard dogs\n*   Betting, including lottery tickets, casino gaming chips, off-track betting and wagers at race tracks\n*   Charitable and social service organizations\n*   Civic, social and fraternal associations\n*   Political organizations\n*   Religious organizations\n*   Automobile associations\n*   Membership organization — not elsewhere classified\n*   Court costs, including alimony and child support\n*   Government services — not elsewhere classified\n*   Nightclubs and Discotheques\n*   Weapons and Military Equipments\n*   CBD - hemp shops\n\n[](#refunds)\n\nSatispay supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Satispay payments are asynchronous and take up to 5 minutes to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Satispay payments in the currencies that map to your country. The default local currency for Satispay is `eur` and customers also see their purchase amount in `eur`.",
    "title": "Satispay payments | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/flexible-payments",
    "markdown": "# Flexible payment scenarios | Stripe DocumentationThe Stripe Docs logo\n\n## Support complex payment flows through flexible and customizable acquiring features.\n\nStripe’s payment acquiring features provide the flexibility needed to manage complex payment scenarios, such as capturing funds as you fulfill shipments or incrementing an authorization amount when order details change.\n\nThe functionality highlighted below is available to all users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\").",
    "title": "Flexible payment scenarios | Stripe Documentation",
    "description": "Support complex payment flows through flexible and customizable acquiring features.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/build-a-two-step-confirmation",
    "markdown": "# Build two-step confirmation | Stripe DocumentationThe Stripe Docs logo\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).",
    "title": "Build two-step confirmation | Stripe Documentation",
    "description": "Add an optional review page or run validations after a user enters their payment details.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment-deferred",
    "markdown": "# Collect payment details before creating an Intent\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, learn how to build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from the buyer’s browser. If you prefer to confirm the payment from the server instead, see [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server).\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-intent)\n\n#### Run custom business logic immediately before payment confirmation\n\nNavigate to [step 5](https://docs.stripe.com/payments/finalize-payments-on-the-server?platform=web&type=payment#submit-payment) in the finalize payments guide to run your custom business logic immediately before payment confirmation. Otherwise, follow the steps below for a simpler integration, which uses `stripe.confirmPayment` on the client to both confirm the payment and handle any next actions.\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` enabled. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nIncluded on a PaymentIntent is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"). Return this value to your client for Stripe.js to use to securely complete the payment process.\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``post '/create-intent' do   intent = Stripe::PaymentIntent.create({     # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.     automatic_payment_methods: {enabled: true},     amount: 1099,     currency: 'usd',   })   {client_secret: intent.client_secret}.to_json end``\n\n[](#submit-the-payment)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to complete the payment using details from the Payment Element.\n\nProvide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment. Your user might be initially redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card payments immediately redirect to the `return_url` when a payment is successful.\n\nIf you don’t want to redirect for card payments after payment completion, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`. This only redirects customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentIntent and obtain clientSecret   const res = await fetch(\"/create-intent\", {     method: \"POST\",   });    const {client_secret: clientSecret} = await res.json();    // Confirm the PaymentIntent using the details collected by the Payment Element   const {error} = await stripe.confirmPayment({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point is only reached if there's an immediate error when     // confirming the payment. Show the error to your customer (for example, payment details incomplete)     handleError(error);   } else {     // Your customer is redirected to your `return_url`. For some payment     // methods like iDEAL, your customer is redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``",
    "title": "Collect payment details before creating an Intent | Stripe Documentation",
    "description": "Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server",
    "markdown": "# Finalize payments on the server\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. This integration builds a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-ct)\n\n#### Use createPaymentMethod through a legacy implementation\n\nIf you’re using a legacy implementation, you might be using the information from `stripe.createPaymentMethod` to finalize payments on the server. While we encourage you to follow this guide to [Migrate to Confirmation Tokens](https://docs.stripe.com/payments/payment-element/migration-ct) you can still access our old documentation to [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy)\n\nWhen the customer submits your payment form, call [`stripe.createConfirmationToken`](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token) to create a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens \"ConfirmationTokens\") to send to your server for additional validation or business logic before payment confirmation.\n\nConfirming the PaymentIntent generates a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can read the [payment\\_method](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method) ID off the PaymentIntent confirmation response.\n\n#### Caution\n\nYou must immediately use the created ConfirmationToken to confirm a PaymentIntent; if unused, it expires after 12 hours.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the ConfirmationToken using the details collected by the Payment Element   // and additional shipping information   const {error, confirmationToken} = await stripe.createConfirmationToken({     elements,     params: {       shipping: {         name: 'Jenny Rosen',         address: {           line1: '1234 Main Street',           city: 'San Francisco',           state: 'CA',           country: 'US',           postal_code: '94111',         },       },       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)'     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the ConfirmationToken. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       confirmationTokenId: confirmationToken.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the ConfirmationToken sent by your client to create and confirm the PaymentIntent in a single request.\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       confirmation_token: req.body.confirmationTokenId, // the ConfirmationToken ID sent by your client     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design an integration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
    "title": "Finalize payments on the server | Stripe Documentation",
    "description": "Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/without-card-authentication",
    "markdown": "# Card payments without bank authentication\n\nThis integration supports businesses accepting only US and Canadian cards. It’s simpler up front, but does not scale to support a global customer base.\n\n### How does this integration work?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### How does it compare to the global integration?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGrowing or global businesses should use Stripe’s [global integration](https://docs.stripe.com/payments/accept-a-payment) to support bank requests for two-factor authentication and allow customers to pay with more payment methods.\n\n[](#web-collect-payment-details)\n\n[Elements](https://docs.stripe.com/payments/elements), part of Stripe.js, provides drop-in UI components for collecting card information from customers. They are hosted by Stripe and placed into your payment form as an iframe so your customer’s card details never touch your code.\n\nFirst, include the [Stripe.js](https://docs.stripe.com/js) script in the head of every page on your site.\n\nIncluding the script on every page of your site lets you take advantage of Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar) and ability to detect anomalous browsing behavior.\n\n### Security requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis script must always load directly from **js.stripe.com** to remain [PCI compliant](https://docs.stripe.com/security/guide). You can’t include the script in a bundle or host a copy of it yourself.\n\nWhen you use Elements, all payment information is submitted over a secure HTTPS connection.\n\nThe address of the page that contains Elements must also start with **https://** rather than **http://**. For more information about getting SSL certificates and integrating them with your server to enable a secure HTTPS connection, see the [security](https://docs.stripe.com/security) documentation.\n\n### Add Elements to your page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nCreate empty DOM elements (containers) with unique IDs within your payment form.\n\n`<form id=\"payment-form\">   <div id=\"card-element\"><!-- placeholder for Elements --></div>   <button id=\"card-button\">Submit Payment</button>   <p id=\"payment-result\"><!-- we'll pass the response from the server here --></p> </form>`\n\nCreate an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. Afterwards, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to [mount](https://docs.stripe.com/js#element-mount) a Card element in the empty DOM element container on the page.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements(); const cardElement = elements.create('card'); cardElement.mount('#card-element');`\n\nUse [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) on your client to collect the card details and create a [PaymentMethod](https://docs.stripe.com/api/payment_methods) when the customer submits the payment form. Send the ID of the PaymentMethod to your server.\n\n`const form = document.getElementById(\"payment-form\");  var resultContainer = document.getElementById('payment-result');  // cardElement is defined in the previous step cardElement.on('change', function(event) {   if (event.error) {     resultContainer.textContent = event.error.message;   } else {     resultContainer.textContent = '';   } });  form.addEventListener('submit', async event => {   event.preventDefault();   resultContainer.textContent = '';   const result = await stripe.createPaymentMethod({     type: 'card',     card: cardElement,   });   handlePaymentMethodResult(result); });  const handlePaymentMethodResult = async ({ paymentMethod, error }) => {   if (error) {     // An error happened when collecting card details, show error in payment form     resultContainer.textContent = result.error.message;   } else {     // Send paymentMethod.id to your server (see Step 3)     const response = await fetch(\"/pay\", {       method: \"POST\",       headers: { \"Content-Type\": \"application/json\" },       body: JSON.stringify({ payment_method_id: paymentMethod.id })     });      const responseJson = await response.json();      handleServerResponse(responseJson);   } };  const handleServerResponse = async responseJson => {   if (responseJson.error) {     // An error happened when charging the card, show it in the payment form     resultContainer.textContent = responseJson.error;   } else {     // Show a success message     resultContainer.textContent = 'Success!';   } };`\n\n[](#web-setup)\n\nUse an official library to make requests to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-intent)\n\nSet up an endpoint on your server to receive the request from the client.\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\nAlways decide how much to charge on the server, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\nCreate an HTTP endpoint to respond to the AJAX request from step 1. In that endpoint, you should decide how much to charge the customer. To create a payment, create a PaymentIntent using the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") ID from step 1 with the following code:\n\n`# Check the status of the PaymentIntent to make sure it succeeded  curl https://api.stripe.com/v1/payment_intents \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1099 \\  -d currency=usd \\  # A PaymentIntent can be confirmed some time after creation, # but here we want to confirm (collect payment) immediately.  -d confirm=true \\  -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\  # If the payment requires any follow-up actions from the # customer, like two-factor authentication, Stripe will error # and you will need to prompt them for a new payment method.  -d error_on_requires_action=true`\n\n#### Warning\n\nIf you set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to `true` when confirming a payment, Stripe automatically fails the payment if it requires two-factor authentication from the user.\n\n#### Payment Intents API response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you make a payment with the API, the response includes a status of the PaymentIntent. If the payment was successful, it will have a status of `succeeded`.\n\n`{   \"id\": \"pi_0FdpcX589O8KAxCGR6tGNyWj\",   \"object\": \"payment_intent\",   \"amount\": 1099,   \"charges\": {     \"object\": \"list\",     \"data\": [       {         \"id\": \"ch_GA9w4aF29fYajT\",         \"object\": \"charge\",         \"amount\": 1099,         \"refunded\": false,         \"status\": \"succeeded\",       }     ]   },   \"client_secret\": \"pi_0FdpcX589O8KAxCGR6tGNyWj_secret_e00tjcVrSv2tjjufYqPNZBKZc\",   \"currency\": \"usd\",   \"last_payment_error\": null,   \"status\": \"succeeded\", }`\n\nIf the payment is declined, the response includes the error code and error message. Here’s an example of a payment that failed because two-factor authentication was required for the card.\n\n``{   \"error\": {     \"code\": \"authentication_required\",     \"decline_code\": \"authentication_not_handled\",     \"doc_url\": \"[https://docs.stripe.com/error-codes#authentication-required](https://docs.stripe.com/error-codes#authentication-required)\",     \"message\": \"This payment required an authentication action to complete, but `error_on_requires_action` was set. When you're ready, you can upgrade your integration to handle actions at [https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions.](https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions)\",     \"payment_intent\": {       \"id\": \"pi_1G8JtxDpqHItWkFAnB32FhtI\",       \"object\": \"payment_intent\",       \"amount\": 1099,       \"status\": \"requires_payment_method\",       \"last_payment_error\": {         \"code\": \"authentication_required\",         \"decline_code\": \"authentication_not_handled\",         \"doc_url\": \"[https://docs.stripe.com/error-codes#authentication-required](https://docs.stripe.com/error-codes#authentication-required)\",         \"message\": \"This payment required an authentication action to complete, but `error_on_requires_action` was set. When you're ready, you can upgrade your integration to handle actions at [https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions.](https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions)\",         \"type\": \"card_error\"       },     },     \"type\": \"card_error\"   } }``\n\n[](#web-test)\n\nThere are several test cards you can use in test mode to make sure this integration is ready. Use them with any CVC, postal code, and future expiration date.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n|     | Requires authentication, which in this integration will fail with a decline code of `authentication_not_handled`. |\n\nSee the full list of [test cards](https://docs.stripe.com/testing).\n\n[\n\n## Upgrade your integration to handle card authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-upgrade-to-handle-card-authentication)\n\nCongratulations! You completed a payments integration for basic card payments. Note that this integration **declines cards that require authentication during payment**.\n\nIf you start seeing payments in the Dashboard listed as `Failed`, then it’s time to [upgrade your integration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions). Stripe’s global integration handles these payments instead of automatically declining them.",
    "title": "Card payments without bank authentication | Stripe Documentation",
    "description": "Build a simpler integration with regional limitations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/vault-and-forward",
    "markdown": "# Forward card details to third-party API endpoints\n\n## Use the Vault and Forward API to securely share card details across multiple processors.\n\nThe Vault and Forward API allows you to tokenize and store card details in Stripe’s PCI-compliant vault and route that data to supported processors or endpoints. Leverage the API to:\n\n*   Use the [Payment Element](https://docs.stripe.com/payments/payment-element) [across multiple processors](https://docs.stripe.com/payments/forwarding-third-party-processors).\n*   Use Stripe as your primary vault for card details across processors.\n*   Route card details to your own [PCI compliant token vault](https://docs.stripe.com/payments/forwarding-token-vault).\n\n#### Request access\n\nTo gain access to use Stripe’s forwarding service, contact [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n### Forward requests to destination endpoints and populate card details from Stripe’s vault![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#collect-card-details)\n\nTo collect card details, use the Payment Element to create [a PaymentMethod](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment#create-pm). After you create a PaymentMethod, we automatically store card details in Stripe’s PCI compliant vault. If you have your own frontend, you can still use the Vault and Forward API by [creating a PaymentMethod directly](https://docs.stripe.com/api/payment_methods/create).\n\nTypically, you can only reuse PaymentMethods by attaching them to a Customer. However, the Vault and Forward API accepts all PaymentMethod objects, including those not attached to a customer. Similarly, the Vault and Forward API doesn’t [confirm](https://docs.stripe.com/api/payment_intents/confirm) or [capture](https://docs.stripe.com/api/payment_intents/capture) PaymentIntents. As a result, you might unintentionally use them to capture a payment on Stripe that was already captured on another processor.\n\nCVCs expire automatically after a certain time period and also expire when used with the Vault and Forward API. If you require a CVC after either of these conditions are met, you must recollect the card details.\n\n[](#create-fwd-request)\n\nTo send card details from Stripe’s vault, you must [Create a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/create) and include the following parameters:\n\n*   `payment_method`: Object that enables Stripe to identify your customer’s card details within Stripe’s vault and insert that data into the request body.\n*   `url`: The exact destination endpoint of your request.\n*   `request.body`: The API request body that you want to send to the destination endpoint (for example, the payments request you send to another processor). Leave any field where you normally input your customer’s card details blank.\n*   `replacements`: Fields that you want Stripe to substitute in the `request.body`. The [available fields](https://docs.stripe.com/api/forwarding/forwarding_requests/create#forwarding_request_create-replacements) that we recommend always setting are `card_number`, `card_expiry`, `card_cvc`, and `cardholder_name`. For example, including `card_number` in the `replacements` array replaces the appropriate card number field for your destination endpoint in the `request.body`.\n\nYou must format your request based on the data that the destination endpoint expects. In the example below, the destination endpoint expects an `Idempotency-Key` header and accepts a JSON body with the payment details.\n\n`curl https://api.stripe.com/v1/forwarding/requests \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Idempotency-Key:   {{IDEMPOTENCY_KEY}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\   --data-urlencode url=\"https://endpoint-url/v1/payments\" \\   -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\   -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}} \\   --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name`\n\n#### Security tip\n\nWe require you to pass API keys for the destination endpoint on each API request. Stripe forwards the request using the API keys you provide, and only retains hashed and encrypted versions of destination endpoint API keys.\n\n#### Caution\n\nYou can provide a `Idempotency-Key` to make sure that requests with the same key result in only one outbound request. Use a different and unique key for Stripe and any idempotency keys you provide on the underlying third-party request.\n\nUse a new `Idempotency-Key` every time you make updates to `request.body` or `request.header` fields. Passing in the older idempotency key results in the API replaying older responses, including any previous validation errors.\n\n[](#forward-request)\n\nStripe makes a request to the destination endpoint on your behalf by inserting the card details from the PaymentMethod into the `request.body`. Where enabled and available, [Card Account Updater (CAU)](https://stripe.com/resources/more/what-is-a-card-account-updater-what-businesses-need-to-know) automatically attempts to update and provide the latest available card details for requests.\n\nStripe then forwards the request to the destination endpoint. For example:\n\n1.  Stripe makes a POST request to the endpoint:\n    \n    `POST /v1/payments HTTP/1.1 User-Agent: Stripe Accept: */* Host: endpoint-url Content-Type: application/json Content-Length: 321`\n    \n2.  Stripe includes the following headers:\n    \n    `Destination-API-Key: {{DESTINATION_API_KEY}} Destination-Idempotency-Key: {{DESTINATION_IDEMPOTENCY_KEY}}`\n    \n3.  Stripe includes the following JSON body in the request:\n    \n    `{   amount: {     value: 1000,     currency: 'usd'   },   paymentMethod: {     number: '4242424242424242',     expiryMonth: '03',     expiryYear: '2030',     cvc: '123',     holderName: 'First Last',   },   reference: '{{REFERENCE_ID}}' }`\n    \n\n#### Note\n\nIf you’re using the Vault and the Forward API to make an authorization request, you must handle any post-transaction actions, such as refunds or disputes, directly with the third-party processor. Contact Stripe support if you require 3DS authentication across your multiprocessor setup.\n\n[](#return-response)\n\nWhen you use the Vault and Forward API to forward card details to a third-party processor, Stripe synchronously waits for a response from the destination endpoint. The timeout period for this response is less than a minute. Stripe redacts identified PCI-sensitive data, stores the redacted response from the destination endpoint, and returns a [ForwardingRequest](https://docs.stripe.com/api/forwarding/request/object) object, which contains data about the request and response.\n\n#### Caution\n\nWhen you use the Vault and Forward API to forward card details to a third-party processor, Stripe can’t guarantee that the processor will provide any particular response to your forwarded API requests. If the third-party processor is unresponsive, you must reach out directly to that processor to resolve the issue.\n\n`{   id: \"fwdreq_123\",   object: \"forwarding.request\",   payment_method: \"{{PAYMENT_METHOD}}\",   request_details: {     body: '{       \"amount\": {         \"value\": 1000,         \"currency\": \"usd\"       },       \"paymentMethod\": {         \"number\": \"424242******4242\",         \"expiryMonth\": \"03\",         \"expiryYear\": \"2030\",         \"cvc\": \"***\",         \"holderName\": \"First Last\",       },       \"reference\": \"{{REFERENCE_ID}}\"     }',     headers: [       {         name: \"Content-Type\",         value: \"application/json\",       },       {         name: \"Destination-API-Key\",         value: \"{{DESTINATION_API_KEY}}\",       },       {         name: \"Destination-Idempotency-Key\",         value: \"{{DESTINATION_IDEMPOTENCY_KEY}}\",       },       ...     ]   },   request_context: {       \"destination_duration\": 234,       \"destination_ip_address\": \"35.190.113.80\"   },   response_details: {     body: '{       // Response from the third-party endpoint goes here       ...     }',     headers: [       ...     ],     status: 200,   },   replacements: [     \"card_number\",     \"card_expiry\",     \"card_cvc\",     \"cardholder_name\"   ]   ... }`\n\n[](#configuring)\n\nTo set up your Vault and Forward API endpoint, you must:\n\n*   [Confirm that we support the destination endpoint](#confirm-endpoint).\n*   Provide a test and production account with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n*   [Share the production details](#share-production-details) for the destination endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n### Confirm that we support the destination endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports forwarding API requests to the following endpoints:\n\n*   **Adyen**:\n    *   `[prefix]-checkout-live.adyenpayments.com/v68/payments`\n    *   `[prefix]-checkout-live.adyenpayments.com/v69/payments`\n    *   `[prefix]-checkout-live.adyenpayments.com/v70/payments`\n*   **Braintree**: `payments.braintree-api.com/graphql`\n*   **Checkout**:\n    *   `api.checkout.com/tokens`\n    *   `api.checkout.com/payments`\n*   **GMO Payment Gateway**: `p01.mul-pay.jp/payment/ExecTran.json`\n*   **PaymentsOS**: `api.paymentsos.com/tokens`\n*   **Worldpay**: `access.worldpay.com/tokens`\n*   [Your own PCI-compliant token vault](https://docs.stripe.com/payments/forwarding-token-vault)\n\nThe Vault and Forward API can only forward requests to the following countries:\n\n### Supported countries\n\nWe can support HTTPS-based APIs that accept JSON requests and return JSON responses. If we don’t already have support for destination endpoint or you require a different API format, provide the details of the endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520Access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F) so we can support your destination endpoint.\n\n### Provide test accounts to Stripe support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo access the Vault and Forward API, share the [account IDs](https://dashboard.stripe.com/settings/account) (`acct_xxxx`) for your test accounts with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\nShare the production details for destination endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F). These include the following for destination endpoint: URL, HTTP method, documentation, fields, request headers, and encryption keys. Stripe then sets up destination endpoint for use with the Vault and Forward API in live mode.\n\nTo share third-party API keys, you must encrypt them by using the Stripe public key that’s specific to the Vault and Forward API. Start by [importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84) using [the GNU Privacy Guard (PGP)](http://gnupg.org/). After you familiarize yourself with the basics of PGP, use the following PGP key to encrypt your third-party API keys:\n\n### Vault and Forward API PGP key\n\nTo encrypt your third-party API keys with the Vault and Forward API PGP key:\n\n1.  Calculate the `SHA256` hash of your private key and hex encode the hash. Treat this hash as a secret.\n    \n    `echo -n \"{{THIRD_PARTY_SECRET_KEY}}\" | sha256sum`\n    \n2.  Encrypt the `SHA256` hash with Stripe’s public key, `Base64` encode the result, and set the Stripe key as `trusted`.\n    \n    `echo -n \"{{SHA256_HASH}}\" |  gpg -e -r AE863ADA1603150856C0A853A7B203177D034588 --always-trust | base64 > encrypted_base64.txt`\n    \n3.  Verify `encrypted_base64.txt` by running the following command:\n    \n    `cat encrypted_base64.txt | base64 -d | gpg --list-only --list-packets`\n    \n\nMake sure that `encrypted_base64.txt` contains the following characteristics:\n\n*   **Key ID**: `27E4B9436302901A`\n*   **Key type**: RSA\n*   **Key size**: 4096 bits\n*   **User ID**: `Forward API Secret Encryption Key (Forward API Secret Encryption Key) <multiprocessor-ext@stripe.com>`\n\n[](#testing-your-integration)\n\nTo confirm that your integration works correctly with destination endpoint, initiate a ForwardingRequest using the PaymentMethod you created. This example uses `pm_card_visa` as a payment method.\n\n`curl https://api.stripe.com/v1/forwarding/requests \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Idempotency-Key:   {{IDEMPOTENCY_KEY}}  \" \\  -d payment_method=pm_card_visa \\  -d url=\"{{DESTINATION ENDPOINT}}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\   -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}} \\   --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name`\n\n#### Caution\n\nThe Vault and Forward API treats any response from the destination endpoint as a `success` and returns a `200`, along with the destination endpoint’s response code in the `response.body`. For example, when the destination endpoint returns a status code of `400` to Stripe, the Vault and Forward API responds with a status code of `200`. The `response.body` includes the destination endpoint’s `400` response and error message. Separately test the API request that you send to your destination endpoint to make sure that you don’t have any errors.\n\n### View your request logs in the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view request logs and errors related to the Vault and Forward API in the [Developers Dashboard](https://docs.stripe.com/development/dashboard/request-logs). Additionally, you can use the [List API](https://docs.stripe.com/api/forwarding/forwarding_requests/list) to fetch the logs from Stripe.\n\n#### Security tip\n\nThe `request.headers` and `request.body` in the incoming request are encrypted and appear as `encrypted_request` in the Dashboard.",
    "title": "Forward card details to third-party API endpoints | Stripe Documentation",
    "description": "Use the Vault and Forward API to securely share card details across multiple processors.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/sample-app",
    "markdown": "# Issuing and Treasury sample app\n\n## Learn how to onboard customers, issue cards, and make outbound payments.\n\nTo see how you can use Issuing and Treasury APIs in your integration, try our sample app. It lets you onboard as a customer, create cards, test authorizations, and make outbound payments from a financial account.\n\nWithout writing any code, you can also copy the sample app to use with your platform, following the API logs generated by your actions.\n\n[Try our sample app](https://baas.stripe.dev/auth/register)\n\n[](https://baas.stripe.dev/auth/register)\n\n[![The Issuing and Treasury demo app's Card details page](https://b.stripecdn.com/docs-statics-srv/assets/issuing-treasury-demo-app.54ad51387e0606a4b240347f4cb02cfb.png)](https://baas.stripe.dev/auth/register)\n\n[The Issuing and Treasury sample app’s card details page](https://baas.stripe.dev/auth/register)\n\nThis app is for [platforms onboarding business customers](https://docs.stripe.com/issuing/connect#when-to-use-connect). If you only need cards for yourself or your own employees, use [Issuing in the Dashboard](https://dashboard.stripe.com/test/issuing/overview) instead.\n\n[](#create-account)\n\nTo use the sample app, first [create an account](https://baas.stripe.dev/auth/register) to onboard as a customer of the platform.\n\nAfter you provide an email and password, the app’s backend creates a connected account and requests the `card_issuing` and `treasury` capabilities.\n\n### (Optional) Simulate hosted onboarding to provide full account details\n\n### See the code and API logs for these steps\n\n[](#add-funds)\n\n1.  On the **Overview** page, click **Generate test data**, and then click **Simulate received credit** in the drawer.\n    \n2.  The transaction appears as a [received credit](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits) (an incoming ACH) for 500 USD, and appears in the [transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts).\n    \n3.  Go to the **Financial account** page to [view your account number](https://docs.stripe.com/treasury/account-management/financial-accounts#retrieve-a-financialaccount-and-account-number).\n    \n\n### See the code and API logs for these steps\n\n[](#send-money)\n\n1.  On the **Financial account** page, click **Send money**.\n2.  Select **ACH**, then enter the recipient’s information and the amount to send.\n3.  Select `POSTED` as the transaction result to simulate a completed payment.\n4.  The transaction appears as an [outbound payment](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments).\n\n### See the code and API logs for these steps\n\n[](#create-test-purchase)\n\n1.  On the **Cardholder** page, click **Create a new cardholder**.\n2.  Enter the cardholder’s information, then click **Issue card** to create a virtual card.\n3.  You’re redirected to the **Cards** page. Click **Details** on the card row to view the new virtual card.\n4.  Click **Generate test data**, then **Simulate test purchase.**\n\n### See the code and API logs for these steps",
    "title": "Issuing and Treasury sample app | Stripe Documentation",
    "description": "This sample app shows an embedded finance integration built with Issuing and Treasury APIs. You can use the source code to start your development.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/onboarding-overview",
    "markdown": "# Onboarding overview | Stripe DocumentationThe Stripe Docs logo\n\n## Take your integration live.\n\nUse this guide to develop and launch an integration using Stripe [Issuing](https://docs.stripe.com/issuing) (in the US, EU, or UK) and/or [Treasury](https://docs.stripe.com/treasury) (US only). To successfully go live, your offering must be a supportable business use case, and you must integrate systems and establish business processes.\n\nBefore you go live, you must:\n\n1.  **Get your use case approved:** Submit information pertaining to your use case, familiarize yourself with the compliance requirements, and explore test mode.\n2.  **Obtain live mode access:** Build in the production environment, manage the necessary operational responsibilities, and complete the required compliance tasks.\n3.  **Get ready to launch your BaaS offering:** Test the program out with your employees using real funds.\n\nCreate cards and financial accounts for your customers (US only).\n\n**Complexity:** ●●●○○\n\n**Example segments:** SaaS platforms, e-commerce businesses, and corporate benefits providers.\n\n[](#use-case-approval)\n\nStart by submitting an [intake form](https://stripe.com/contact/sales) that includes a high-level overview of what you’re looking to use Stripe Issuing and Treasury for. If you’re a funded business with a dedicated team of developers, or simply working with a single developer, include those details in the form.\n\nAfter you submit the form, our team will reach out within 5 days to let you know if your use case is a good fit. We also let you know if we think your desired product or products don’t [serve your use case](https://support.stripe.com/questions/supported-business-use-cases-for-stripe-issuing) well. During the call, an assigned Stripe account representative asks you more about your use case and motivation as part of our supportability assessment. We also advise you on best practices and how to build a [compelling financial services offering](https://stripe.com/guides/building-a-fintech-company).\n\nFollowing the call, we deliver you the supportability outcome within 5 business days (certain use cases can take longer). While you wait, you can build a [test mode](https://docs.stripe.com/test-mode \"test mode\") integration to explore the product’s capabilities, and familiarize yourself with our compliance requirements. If we deem your use case supportable, your account representative provides you with any necessary agreements, and once signed, configures your program.\n\n[](#obtain-live-mode-access)\n\nTo obtain live mode access, you must complete the required compliance tasks. In parallel, we recommend you build your integration in a production environment and operationalize required processes.\n\n### Build your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt any time, you can explore an integration in test mode using our [sample app](https://docs.stripe.com/baas/start-integration/sample-app). After you sign the legal agreement, Stripe configures your program to the capabilities required for your business model. After you receive approval, you can begin submitting live mode transactions.\n\n|     | Test mode | Live mode |\n| --- | --- | --- |\n| Usage limits | With no permissions necessary, explore a broad set of platform use cases by using the sample app or the [Issuing](https://docs.stripe.com/api/issuing/authorizations) or [Treasury](https://docs.stripe.com/api/treasury/financial_accounts) APIs | Limited to what you’re approved for |\n| Immediate access | Yes | No, you’re granted access after you receive bank partner approval |\n| Use real funds | No  | Yes |\n\n### Manage operational responsibilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPrior to go-live, you need to take care of various operational responsibilities:\n\n*   **Customer support:** Understand what types of customer inquiries you need to handle and [equip your support team](https://docs.stripe.com/issuing/customer-support) with the appropriate information and tools.\n*   **Compliance management:** Set up the necessary compliance processes outlined in the [compliance section](#complete-compliance-tasks).\n*   **Physical cards:** If your use case requires [physical cards](https://docs.stripe.com/issuing/cards/physical), you can order [standard cards](https://docs.stripe.com/issuing/cards/physical/standard) if you want to go to market quickly. Or you can [fully customize](https://docs.stripe.com/issuing/cards/physical/custom) your cards with unique artwork and materials, if physical cards are a core part of your business.\n*   **Mobile wallets:** If your use case necessitates Apple Pay, [review the steps](https://docs.stripe.com/issuing/cards/digital-wallets) required for approval.\n\n### Complete compliance tasks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to complete a set of compliance tasks before you can launch your integration. Stripe must also review and approve your fees, terms of service, marketing material, and user interfaces. To help in this process, we provide a workflow tool to manage compliance submissions and feedback as well as to help you stay organized.\n\n1.  **Implement all requirements for a public launch**\n    \n    You must submit screenshots of your marketing, onboarding, and account servicing flows using the [compliance intake form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835) to demonstrate compliance. Before you build user-facing marketing, onboarding, and account servicing pages, review the following content guidelines:\n    \n    *   [Unfair and Deceptive Acts or Practices (UDAP):](https://docs.stripe.com/treasury/compliance#udap-and-correct-messaging) Keep your advertising clear and honest.\n    *   [Controlling the Assault of Non-Solicited Pornography And Marketing (CAN-SPAM):](https://docs.stripe.com/treasury/compliance#can-spam) Comply with commercial email messaging.\n    *   [Messaging and marketing:](https://docs.stripe.com/treasury/compliance#issuing-messaging-guidelines) Use the right terms to accurately reflect the account structure and benefits, including [Treasury-specific messaging](https://docs.stripe.com/treasury/marketing-treasury).\n    *   [Prohibition on international marketing:](https://docs.stripe.com/treasury/compliance#prohibition-on-international-marketing) Limit to US-based merchants.\n    *   Required agreements and disclosures for [Treasury](https://docs.stripe.com/treasury/compliance#treasury-terms), [Issuing](https://docs.stripe.com/treasury/compliance#issuing-terms), and [other features](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms): Appropriately disclose fees and required identifying information.\n    \n    Stripe requires that you submit screenshots to demonstrate the following:\n    \n    *   You include all required agreements and disclosures in your onboarding flow, and make them available outside of onboarding.\n    *   Customers have a channel to [submit complaints](https://docs.stripe.com/treasury/handling-complaints) to you and to [initiate transaction disputes](https://docs.stripe.com/issuing/purchases/disputes).\n    *   [Regulatory emails](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices) are sent when required for Issuing accounts.\n    *   [Regulatory receipts](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) are provided when required for Treasury transactions.\n    *   If you choose to provide [account statements](https://docs.stripe.com/treasury/compliance#statements), you must submit evidence they meet statement requirements.\n2.  **Get approved to launch to the public**\n    \n    After you submit your screenshots, Stripe reviews and approves within two weeks or requests additional revisions. If there are any adjustments that need to be made to your submissions, we let you know, so that you can resubmit with the needed adjustments.\n    \n\n[](#get-ready-launch-your-offering)\n\nNow you’re ready to request your first virtual or physical card. Using real funds, test the program out by having designated employees complete initial transactions.\n\n### Operationalize ongoing activities to remain compliant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce live, you need to dedicate resources to ongoing operational requirements:\n\n*   **Marketing reviews:** Learn how to [submit new marketing material or user interfaces](https://docs.stripe.com/treasury/compliance#going-live) for approval.\n*   **Customer complaints:** Receive and resolve customer complaints, and [report them to Stripe](https://docs.stripe.com/treasury/handling-complaints#complaints-tracking) each month.\n*   **Dispute handling:** Set up [dispute handling](https://docs.stripe.com/issuing/purchases/disputes) processes for your card program.\n*   **Lost or stolen cards:** Allow customers to report lost or stolen cards so you can cancel them immediately and (optionally) [request replacements](https://docs.stripe.com/issuing/cards/replacements#replacements-for-lost-or-stolen-cards).\n*   **Recordkeeping:** [Record](https://docs.stripe.com/treasury/compliance#recordkeeping) all marketing materials, customer data, and [regulatory receipts](https://docs.stripe.com/treasury/moving-money/regulatory-receipts), and disclosures you make for at least 5 years.",
    "title": "Onboarding overview | Stripe Documentation",
    "description": "Take your integration live.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/integration-guides",
    "markdown": "# Integration guides | Stripe DocumentationThe Stripe Docs logo\n\n## Use these guides to launch a Stripe Issuing and/or Treasury integration.\n\nUse these guides to develop and launch a Stripe [Issuing](https://docs.stripe.com/issuing) and/or [Treasury](https://docs.stripe.com/treasury) integration in the US. To successfully go live, your offering must be a supportable business use case, and you must integrate systems and establish business processes. To learn more, see [Onboarding overview](https://docs.stripe.com/baas/start-integration/onboarding-overview).",
    "title": "Integration guides | Stripe Documentation",
    "description": "Use these guides to launch a Stripe Issuing and/or Treasury integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/baas/start-integration/integration-guides/fleet",
    "markdown": "# Fleet integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build a Fleet financial services integration with Issuing.\n\nBuild a fleet offering by using Stripe [Issuing](https://docs.stripe.com/issuing) to create cards and process transactions for your customers’ business.\n\nBy the end of this guide, you’ll know how to:\n\n*   Create verified connected accounts representing your business customers.\n*   Create cards for your business customers and use these cards to spend funds.\n*   Understand the additional fleet specific fields collected at the pump or point of sale.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Sign up for a [Stripe account](https://dashboard.stripe.com/register).\n2.  [Activate Issuing test mode](https://dashboard.stripe.com/test/issuing/overview) in the Dashboard.\n3.  Configure your [Connect platform branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) for your business and add an icon.\n\n## Overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Issuing enables fleet management platforms and operators to create and manage customized fleet card programs with physical or virtual payment cards. Issuing allows users to efficiently control, manage, and reconcile expenses related to their clients’ electric or traditional fuel vehicle fleets.\n\nStripe’s platform provides advanced capabilities with open-loop cards accepted anywhere, real-time spend controls at the point of purchase, advanced fraud protection leveraging Stripe’s fraud tools and authorization signals, and the ability to define card benefits unique to your program, such as 1% cashback on fuel spend. Fleet providers can also issue cards tied to individual or groups of vehicles, facilitating precise expense tracking (including odometer readings) and limiting spend to authorized drivers, merchants, or certain purchase categories.\n\nStripe’s platform provides data access to identify insights in spend patterns, mileage, maintenance, and transaction details, allowing businesses to optimize their fleet program. This approach provides greater operational efficiency with realized cost savings, as well as an oversight of card-based expenditure across fuel, repairs, food, accommodation, and more.\n\n[](#set-up-connect)\n\n### Create a connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a connected account to represent a business customer of your platform. For your platform, each fleet operator would be represented as a connected account.\n\n#### Connect account types\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing. If your existing accounts don’t match this configuration, you must recreate them.\n\nThe following request creates a US-based connected account with the correct configuration and requests the requisite capabilities:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nThe user’s account information appears in the response:\n\n`{     ...     \"id\":   \"{{CONNECTED_ACCOUNT_ID}}\",     \"controller\": {       \"stripe_dashboard\": {         \"type\": \"none\"       },       \"fees\": {         \"payer\": \"application\"       },       \"losses\": {         \"payments\": \"application\"       },       \"is_controller\": true,       \"type\": \"application\",       \"requirement_collection\": \"application\"     },     ... }`\n\nNote the connected account’s `id`. You’ll provide this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nIf a connected account already exists, you can add the requisite capabilities by specifying the connected account `id` in the request:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true`\n\n### Verify the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose one of the following onboarding options:\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of your brand in the Branding section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an `external_account` (which is required for payouts) by enabling it through your [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links API](https://docs.stripe.com/api/account_links/create).\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account={{CONNECTED_ACCOUNT_ID}} \\   --data-urlencode refresh_url=\"https://example.com/reauth\" \\   --data-urlencode return_url=\"https://example.com/return\" \\   -d type=account_onboarding`\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to your connected account. We recommend that you distribute the account link URL from within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for your connected account to onboard to your platform.\n\nAt this point, Stripe has created and verified the connected account with `active` relevant capabilities to use Issuing and Treasury.\n\nTo learn more, see:\n\n*   [Set up an Issuing and Connect integration](https://docs.stripe.com/issuing/connect)\n*   [Stripe hosted onboarding for connected accounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n*   [Creating and using connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Identify verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n\n[](#create-cardholders-cards)\n\nThe [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object) is the individual driver (that is, employee or contractor) that’s authorized by your business customer to use card funding by the associated balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address of the connected account or your platform.\n\nUse the embedded [Issuing cards list component](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list) to enable your connected accounts to create a [Card](https://docs.stripe.com/api/issuing/cards/object) for a Cardholder and associate it with the Financial Account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\nFrom here, users can click **Create card** to begin creating a new Cardholder and Card. The user can also activate the card during creation, or do so afterwards.\n\nAt this point, there’s an active card attached to a cardholder and financial account. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) for the connected account to view the card and cardholder information.\n\nTo learn more, see:\n\n*   [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n*   [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nWhen a card is used to make a purchase, it generates an authorization request, which can be approved or declined in real-time.\n\nWith a configured fleet card program, you’ll access additional fleet-specific fields gathered at the pump or point of sale. This includes odometer reading, driver identification, fuel type, gallons pumped, and itemized non-fuel product details, enabled by a fleet-specific chip configuration on the card. This data becomes available at the point of purchase during authorization, and later when the transaction is processed. Some fuel dispensers allow [partial authorization](https://docs.stripe.com/issuing/purchases/authorizations#handling-other-authorizations).\n\nTo observe the impact of card activity on the associated balance, generate a test authorization.\n\nAs a user with a Commercial Fleet card program, you receive specific fleet-related data on the [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) object.\n\nYou can create a test mode authorization on the Issuing page of the Dashboard for the connected account, or with the following call to the [Authorizations API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=100 \\  -d authorization_method=chip \\  -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\  -d \"fleet[purchase_type]\"=fuel_purchase \\  -d \"fleet[service_type]\"=self_service \\  -d \"merchant_data[category]\"=automated_fuel_dispensers \\  -d is_amount_controllable=true`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions).\n\nThe authorized `amount` is the default amount held for a [fuel dispenser transaction](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions) unless you’ve provided a different partial authorization amount in your response to the `issuing_authorization.request` webhook.\n\nMake note of the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 10000,   ...   \"fleet\": {     \"cardholder_prompt_data\": {       \"odometer\": 42424,     },     \"purchase_type\": \"fuel_purchase\",     \"service_type\": \"self_service\",   },   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Simulate fuel dispenser completion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn test mode, you can simulate the completion of fuel being dispensed using the following code:\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/finalize_amount \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d final_amount=1000 \\  -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\  -d \"fleet[purchase_type]\"=fuel_purchase \\  -d \"fleet[reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\" \\  -d \"fleet[reported_breakdown][non_fuel][gross_amount_decimal]\"=0 \\  -d \"fleet[reported_breakdown][tax][local_amount_decimal]\"=\"0.03\" \\  -d \"fleet[service_type]\"=self_service \\  -d \"fuel[industry_product_code]\"=001 \\  -d \"fuel[quantity_decimal]\"=\"5.0\" \\  -d \"fuel[type]\"=unleaded_regular \\  -d \"fuel[unit]\"=us_gallon \\  -d \"fuel[unit_cost_decimal]\"=200`\n\nThe `Authorization` remains in a `pending` state until it’s [captured](https://docs.stripe.com/issuing/purchases/transactions). The amount is updated to reflect the total amount of fuel dispensed, and additional fleet-specific fields are now available:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"fleet\": {     \"cardholder_prompt_data\": {       \"odometer\": 42424,     },     \"purchase_type\": \"fuel_purchase\",     \"reported_breakdown\": {       \"fuel\": {         \"gross_amount_decimal\": \"10.0\",       },       \"non_fuel\": {         \"gross_amount_decimal\": \"0\"       },       \"tax\": {         \"local_amount_decimal\": \"0.03\",         \"national_amount_decimal\": null       }     },     \"service_type\": \"self_service\",   },   \"fuel\": {     \"industry_product_code\": \"001\",     \"quantity_decimal\": \"5.0\",     \"type\": \"unleaded_regular\",     \"unit\": \"us_gallon\",     \"unit_cost_decimal\": \"200\",   },   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn testmode, you can capture the funds using the following code:\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"purchase_details[fleet][cardholder_prompt_data][odometer]\"=42424 \\  -d \"purchase_details[fleet][purchase_type]\"=fuel_purchase \\  -d \"purchase_details[fleet][reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\" \\  -d \"purchase_details[fleet][reported_breakdown][non_fuel][gross_amount_decimal]\"=0 \\  -d \"purchase_details[fleet][reported_breakdown][tax][local_amount_decimal]\"=\"0.03\" \\  -d \"purchase_details[fleet][service_type]\"=self_service \\  -d \"purchase_details[fuel][industry_product_code]\"=001 \\  -d \"purchase_details[fuel][quantity_decimal]\"=\"5.0\" \\  -d \"purchase_details[fuel][type]\"=unleaded_regular \\  -d \"purchase_details[fuel][unit]\"=us_gallon \\  -d \"purchase_details[fuel][unit_cost_decimal]\"=200`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`.\n\nAs a user with a Commercial Fleet card program, you receive specific fleet-related data on the [Transaction](https://docs.stripe.com/api/issuing/transactions), (for example, to reconcile purchases).\n\n`{   \"id\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\",   \"object\": \"issuing.transaction\",   \"amount\": 1000,   ...   \"purchase_details\": {     \"fleet\": {       \"cardholder_prompt_data\": {         \"odometer\": 42424,       },       \"purchase_type\": \"fuel_purchase\",       \"reported_breakdown\": {         \"fuel\": {           \"gross_amount_decimal\": \"10.0\",         },         \"non_fuel\": {           \"gross_amount_decimal\": \"0\"         },         \"tax\": {           \"local_amount_decimal\": \"0.03\",           \"national_amount_decimal\": null         }       },       \"service_type\": \"self_service\",     },     \"fuel\": {       \"industry_product_code\": \"001\",       \"quantity_decimal\": \"5.0\",       \"type\": \"unleaded_regular\",       \"unit\": \"us_gallon\",       \"unit_cost_decimal\": \"200\",     },   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
    "title": "Fleet integration guide | Stripe Documentation",
    "description": "Build a Fleet financial services integration with Issuing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/account-management",
    "markdown": "# Account management | Stripe DocumentationThe Stripe Docs logo\n\n## Show account details and allow them to be edited.\n\nRenders a UI component for connected accounts to view and manage their account details. Connected accounts can view and edit account information like personal or business information, public information, and payout bank accounts.\n\n### Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a connected account has outstanding [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements), embedded account management prompts the connected account to update their information. You can control the collection of `currently_due` or `eventually_due` requirements, and whether to include [future requirements](https://docs.stripe.com/connect/handle-verification-updates), using the `collectionOptions` attribute.\n\n### External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-account_management-features-external_account_collection) feature to control whether the account management component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account management by specifying `account_management` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_management][enabled]\"=true \\  -d \"components[account_management][features][external_account_collection]\"=true`\n\n### Render the account management component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`// Include this element in your HTML const accountManagement = stripeConnectInstance.create('account-management'); container.appendChild(accountManagement);  // Optional: // accountManagement.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- | --- |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |     |",
    "title": "Account management | Stripe Documentation",
    "description": "Show account details and allow them to be edited.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations",
    "markdown": "# Authorizations | Stripe API Reference\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [The Authorization object](https://docs.stripe.com/api/issuing/authorizations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.\n    \n*   Whether the authorization has been approved.\n    \n*   Card associated with this authorization.\n    \n*   #### \n    \n    cardholdernullable stringExpandable\n    \n    The cardholder to whom this authorization belongs.\n    \n*   The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The current status of the authorization in its lifecycle.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `closed`<br><br>The authorization was declined or [captured](https://docs.stripe.com/issuing/purchases/transactions) through one or more [transactions](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-transactions). |\n    | `pending`<br><br>The authorization was created and is awaiting approval or was approved and is awaiting [capture](https://docs.stripe.com/issuing/purchases/transactions). |\n    | `reversed`<br><br>The authorization was reversed by the merchant or expired without capture. |\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    network\\_datanullable object\n    \n*   #### \n    \n    pending\\_requestnullable object\n    \n*   #### \n    \n    request\\_historyarray of objects\n    \n*   #### \n    \n    tokennullable stringPreview featureExpandable\n    \n*   #### \n    \n    transactionsarray of objects\n    \n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Update an authorization](https://docs.stripe.com/api/issuing/authorizations/update)\n\nUpdates the specified Issuing `Authorization` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Authorization` object if a valid identifier was provided.\n\nPOST /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Retrieve an authorization](https://docs.stripe.com/api/issuing/authorizations/retrieve)\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```",
    "title": "Authorizations | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/account-onboarding",
    "markdown": "# Account onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Show a localized onboarding form that validates data.\n\nThe Account onboarding component uses the [Accounts API](https://docs.stripe.com/api/accounts) to read requirements and generate an onboarding form that’s localized for all Stripe-supported countries and that validates data. In addition, Embedded onboarding handles all business types, various configurations of company representatives, document uploads, identity verification, and verification statuses. See [Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding) for more information.\n\n## Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith embedded onboarding, you can control the collection of `currently_due` or `eventually_due` requirements, along with the inclusion of [future requirements](https://docs.stripe.com/connect/handle-verification-updates). You can customize this behavior by using the `collectionOptions` attribute when integrating the account onboarding component.\n\n## External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-account_onboarding-features-external_account_collection) feature to control whether the account onboarding component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n## Customize policies shown to your users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts see Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy) during embedded onboarding. Connected account users who haven’t [accepted Stripe’s services agreement](https://docs.stripe.com/connect/service-agreement-types#accepting-the-correct-agreement) must accept it on the final onboarding screen. Embedded onboarding also has a footer with links to Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy).\n\nFor connected accounts where the platform is responsible for requirement collection, you have additional options to customize the onboarding flow, as outlined below.\n\n### Handle service agreement acceptance on your own![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re a platform onboarding connected accounts where you’re responsible for requirement collection, you can [collect Terms of Service acceptance](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance) using your own process instead of using the embedded account onboarding component. If using your own process, the final onboarding screen only asks your connected accounts to confirm the information they entered, and you must secure their acceptance of Stripe’s service agreement.\n\nEmbedded onboarding still has links to the terms of service (for example, in the footer) that you can replace by [linking to your own agreements and privacy policy](#link-to-your-own-agreements-and-privacy-policy).\n\n### Link to your agreements and privacy policy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnected accounts see the Stripe service agreement and [Privacy Policy](https://stripe.com/privacy) throughout embedded onboarding. For the connected accounts where you’re responsible for requirement collection, you can replace the links with your own agreements and policy. Follow the instructions to [incorporate the Stripe services agreement](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service) and [link to the Stripe Privacy Policy](https://docs.stripe.com/connect/updating-service-agreements#disclosing-how-stripe-processes-user-data).\n\n## Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account onboarding by specifying `account_onboarding` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[account_onboarding][features][external_account_collection]\"=true`\n\nAfter creating the Account Session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Account onboarding component in the front end:\n\n`// Include this element in your HTML const accountOnboarding = stripeConnectInstance.create('account-onboarding'); accountOnboarding.setOnExit(() => {   console.log('User exited the onboarding flow'); }); container.appendChild(accountOnboarding);  // Optional: make sure to follow our policy instructions above // accountOnboarding.setFullTermsOfServiceUrl('{{URL}}') // accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}') // accountOnboarding.setPrivacyPolicyUrl('{{URL}}') // accountOnboarding.setSkipTermsOfServiceCollection(false) // accountOnboarding.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- |\n| `setFullTermsOfServiceUrl` | `string` | Absolute URL to your [full terms of service](https://docs.stripe.com/connect/service-agreement-types#full) agreement. | [Stripe’s full service agreement](https://stripe.com/connect-account/legal/full) |\n| `setRecipientTermsOfServiceUrl` | `string` | Absolute URL to your [recipient terms of service](https://docs.stripe.com/connect/service-agreement-types#recipient) agreement. | [Stripe’s recipient service agreement](https://stripe.com/connect-account/legal/recipient) |\n| `setPrivacyPolicyUrl` | `string` | Absolute URL to your privacy policy. | [Stripe’s privacy policy](https://stripe.com/privacy) |\n| `setSkipTermsOfServiceCollection` | `string` | If true, embedded onboarding skips terms of service collection and you must [collect terms acceptance yourself](https://docs.stripe.com/connect/updating-service-agreements#indicating-acceptance). | false |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |\n| `setOnExit` | `() => void` | The connected account has exited the onboarding process |     |\n\nTo use this component to set up new accounts:\n\n1.  Create a [connected account](https://docs.stripe.com/api/accounts). You can prefill information on the account object in this API call.\n2.  [Initialize Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions) using the ID of the connected account.\n3.  Include the `account-onboarding` element to show the onboarding flow to the connected account.\n4.  Listen for the `exit` event emitted from this component. Stripe sends this event when the connected account exits the onboarding process.",
    "title": "Account onboarding | Stripe Documentation",
    "description": "Show a localized onboarding form that validates data.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/balances",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Balances\n\n## Show balance information and allow your connected accounts to perform payouts.\n\nRenders the balance summary and the payout schedule. It can also allow the connected account to perform instant or manual payouts.\n\n#### Note\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable balances by specifying `balances` in the `components` parameter. You can enable or disable individual features of the balances component by specifying the `features` parameter under `balances`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[balances][enabled]\"=true \\  -d \"components[balances][features][instant_payouts]\"=true \\  -d \"components[balances][features][standard_payouts]\"=true \\  -d \"components[balances][features][edit_payout_schedule]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the balances component in the front end:\n\n`// Include this element in your HTML const balances = stripeConnectInstance.create('balances'); container.appendChild(balances);`\n\nEnabling Instant Payouts might require additional steps:\n\n*   If your platform collects fees for a connected account, you must set up Instant Payout monetization in the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n*   If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the [same country as the platform](https://docs.stripe.com/connect/instant-payouts#eligible-connected-accounts).\n*   If Stripe is liable for a connected account’s negative balances, [Stripe controls eligibility](https://docs.stripe.com/payouts/instant-payouts#eligibility-and-daily-volume-limits) for the account.\n\n#### Note\n\nTo use standard manual payouts, the connected account needs to have their [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) set to `manual`. You can enable payout schedule editing in the payouts component by setting the `edit_payout_schedule` feature to `true`.",
    "title": "Balances | Stripe Documentation",
    "description": "Show balance information and allow your connected accounts to perform payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/documents",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Documents\n\n## Show a list of documents available for download.\n\nRenders a list of documents available for download for the connected account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable documents by specifying `documents` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[documents][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the documents component in the front end:\n\n`// Include this element in your HTML const documents = stripeConnectInstance.create('documents'); container.appendChild(documents);`",
    "title": "Documents | Stripe Documentation",
    "description": "Show a list of documents available for download.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/notification-banner",
    "markdown": "# Notification banner | Stripe DocumentationThe Stripe Docs logo\n\n## Show a banner that lists required actions for risk interventions and onboarding requirements.\n\nRenders a notification banner that lists open risk intervention tasks and onboarding requirements that can impact certain capabilities, such as accepting payments and payouts. This component helps to maintain your account’s active status after initial onboarding and allows you to resolve any outstanding requirements or risk intervention tasks. It only renders if your connected account has risk intervention tasks or current due requirements; if not, it doesn’t render any UI.\n\n### Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can control the collection of `currently_due` or `eventually_due` requirements and the inclusion of [future requirements](https://docs.stripe.com/connect/handle-verification-updates) by using the `collectionOptions` attribute when you integrate the notification banner component.\n\n### External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-notification_banner-features-external_account_collection) feature to control whether the notification banner component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n### Create an Account Session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable notification banner by specifying `notification_banner` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[notification_banner][enabled]\"=true \\  -d \"components[notification_banner][features][external_account_collection]\"=true`\n\n`// Include this element in your HTML const notificationBanner = stripeConnectInstance.create('notification-banner'); container.appendChild(notificationBanner);  // Optional: // notificationBanner.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- | --- |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |     |\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test this component in test mode, specify different [test inputs](https://docs.stripe.com/connect/testing) for fields that fail verifications or generate requirements on the account. For example, you can use the [account management component](https://docs.stripe.com/connect/supported-embedded-components/account-management) to enter `address_no_match` in `line1` of an individual’s address to trigger an address mismatch.",
    "title": "Notification banner | Stripe Documentation",
    "description": "Show a banner that lists required actions for risk interventions and onboarding requirements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/payments",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payments\n\n## Show a list of payments with export, refund, and dispute capabilities.\n\nRenders a transaction list for [direct charges](https://docs.stripe.com/connect/direct-charges), [destination charges](https://docs.stripe.com/connect/destination-charges), and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) on the connected account.\n\nBy default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The [destination\\_on\\_behalf\\_of\\_charge\\_management](https://docs.stripe.com/connect/supported-embedded-components/payments#allow-your-connected-accounts-to-manage-destination-charges) feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payments embedded component by specifying `payments` in the `components` parameter. You can turn on or off an individual feature of the payments component by specifying the `features` parameter under `payments`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payments][features][refund_management]\"=true \\  -d \"components[payments][features][dispute_management]\"=true \\  -d \"components[payments][features][capture_payments]\"=true \\  -d \"components[payments][features][destination_on_behalf_of_charge_management]\"=false`\n\nThe payments component shows different information and supports different features for different charge types:\n\n*   For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n*   For [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n*   For destination charges with the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute, your connected accounts can view the complete set of information when the `destination_on_behalf_of_charge_management` feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n\n### Allow your connected accounts to manage destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set the `destination_on_behalf_of_charge_management` feature to `true`, your connected accounts can use the payments component to view and manage [destination charges](https://docs.stripe.com/connect/destination-charges) that have the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute. If you also turn on the `dispute_management` feature, your connected accounts can [participate directly in handling their disputes](https://docs.stripe.com/connect/supported-embedded-components/payments#dispute-management-for-destination-charges).\n\nEnabling the `destination_on_behalf_of_charge_management` feature has the following limitations:\n\n1.  You can’t filter by charge status or payment methods.\n2.  You can’t export certain data columns.\n\n### Render the payments component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payments component in the front end:\n\n`// Include this element in your HTML const payments = stripeConnectInstance.create('payments'); container.appendChild(payments);`\n\n## Dispute management for destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a [dispute](https://docs.stripe.com/disputes/connect) occurs on [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the platform is debited the disputed amount and a dispute fee. Connect embedded components don’t reverse the transfer to the connected account regardless of the Account Session features. We recommend setting up [webhooks](https://docs.stripe.com/api/webhook_endpoints) to listen to [dispute events](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created). When a dispute is created, you can create an [account debit](https://docs.stripe.com/connect/account-debits#charging-a-connected-account) or a [transfer reversal](https://docs.stripe.com/api#create_transfer_reversal) on the transfer to your connected account. You can also reverse the transfer to your connected account through the [Dashboard](https://dashboard.stripe.com/test/transfers). When a dispute is closed, you can then update the balance on your connected account depending on the result of the dispute. If your connected account won the dispute, you can [create a transfer](https://docs.stripe.com/api#create_transfer) to reverse the effect of the account debit or transfer reversal.\n\nWhen both `dispute_management` and `destination_on_behalf_of_charge_management` are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the `on_behalf_of` attribute set to them.\n\n## Customizing description![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo display a custom description within the payment component for [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), follow these steps:\n\n### Destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use [destination charges](https://docs.stripe.com/connect/destination-charges).\n\n1.  Find the existing transfer object you created for an account by finding the latest [charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges) created on the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object).\n2.  Use the charge object to find the [transfer](https://docs.stripe.com/api/charges/object#charge_object-transfer) object associated with the charge.\n3.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n4.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating destination charges on your platform](https://docs.stripe.com/connect/destination-charges).\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n1.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n2.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID found in the previous step.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).",
    "title": "Payments | Stripe Documentation",
    "description": "Show a list of payments with export, refund, and dispute capabilities.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-details",
    "markdown": "# Payment details | Stripe DocumentationThe Stripe Docs logo\n\n## Show details of a given payment and allow users to manage disputes and perform refunds.\n\nThis component is a subset of `payments`, which provides the detail overlay of a given payment. The UI rendered by the payment details component is equivalent to the overlay that the `payments` component renders when the user clicks on a payment row.\n\nUse the `payment-details` component to invoke the payment details overlay without the need to inline the entirety of the `payments` list in your website. This allows you to invoke the payment detail overlay from your existing UI (for example, your payments list) and integrate with our detail view to enable your customers to view payment details, issue refunds, and manage disputed payments.\n\nBy default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The [destination\\_on\\_behalf\\_of\\_charge\\_management](https://docs.stripe.com/connect/supported-embedded-components/payment-details#allow-your-connected-accounts-to-manage-destination-charges) feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payment details by specifying `payment_details` in the `components` parameter. You can turn on or off an individual feature of the payment details component by specifying the `features` parameter under `payment_details`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payment_details][enabled]\"=true \\  -d \"components[payment_details][features][refund_management]\"=true \\  -d \"components[payment_details][features][dispute_management]\"=true \\  -d \"components[payment_details][features][capture_payments]\"=true \\  -d \"components[payment_details][features][destination_on_behalf_of_charge_management]\"=false`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payment details component in the frontend:\n\n`// Include this element in your HTML const paymentDetails = stripeConnectInstance.create('payment-details'); paymentDetails.setPayment('{{PAYMENT_OR_PAYMENT_INTENT_ID}}'); // use setOnClose to set a callback function to close payment-details paymentDetails.setOnClose(() => {   paymentDetails.remove(); }); container.appendChild(paymentDetails);`\n\n#### Note\n\nFor [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the connected accounts don’t own the payment intent objects associated with the charges. Pass in the ID of the payment object that belongs to the connected account for these charges.\n\nThe payment details component shows different information and supports different features for different charge types:\n\n*   For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n*   For [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n*   For destination charges with the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute, your connected accounts can view the complete set of information when the `destination_on_behalf_of_charge_management` feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n\n### Allow your connected accounts to manage destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set the `destination_on_behalf_of_charge_management` feature to `true`, your connected accounts can use the payments component to view and manage [destination charges](https://docs.stripe.com/connect/destination-charges) that have the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute. If you also turn on the `dispute_management` feature, your connected accounts can [participate directly in handling their disputes](https://docs.stripe.com/connect/supported-embedded-components/payments#dispute-management-for-destination-charges).\n\nEnabling the `destination_on_behalf_of_charge_management` feature has the following limitations:\n\n1.  You can’t filter by charge status or payment methods.\n2.  You can’t export certain data columns.\n\n### Dispute management for destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a [dispute](https://docs.stripe.com/disputes/connect) occurs on [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the platform is debited the disputed amount and a dispute fee. Connect embedded components don’t reverse the transfer to the connected account regardless of the Account Session features. We recommend setting up [webhooks](https://docs.stripe.com/api/webhook_endpoints) to listen to [dispute events](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created). When a dispute is created, you can create an [account debit](https://docs.stripe.com/connect/account-debits#charging-a-connected-account) or a [transfer reversal](https://docs.stripe.com/api#create_transfer_reversal) on the transfer to your connected account. You can also reverse the transfer to your connected account through the [Dashboard](https://dashboard.stripe.com/test/transfers). When a dispute is closed, you can then update the balance on your connected account depending on the result of the dispute. If your connected account won the dispute, you can [create a transfer](https://docs.stripe.com/api#create_transfer) to reverse the effect of the account debit or transfer reversal.\n\nWhen both `dispute_management` and `destination_on_behalf_of_charge_management` are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the `on_behalf_of` attribute set to them.\n\n### Supported parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description |     |\n| --- | --- | --- | --- |\n| `setPayment` | `string` | The ID of the payment, charge, or PaymentIntent that displays in the overlay. This should be an ID of the payment, charge, or PaymentIntent on the connected account. If this attribute isn’t defined, the embedded component renders nothing. To obtain this ID, query the [charges API](https://docs.stripe.com/api/charges) or use a payment ID that you’ve created or stored in your integration. | required |\n| `setOnClose` | `() => void` | We send this event when the user closes the overlay. |     |\n\nTo enable the dismiss behavior of this component, listen to the `close` event by calling `setOnClose`.",
    "title": "Payment details | Stripe Documentation",
    "description": "Show details of a given payment and allow users to manage disputes and perform refunds.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payouts\n\n## Show payout information and allow your users to perform payouts.\n\nRenders the balance summary, the payout schedule, and a list of payouts for the connected account. It can also allow the user to perform instant or manual payouts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payouts embedded component by specifying `payouts` in the `components` parameter. You can enable or disable individual features of the payouts component by specifying the `features` parameter under `payouts`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[payouts][features][instant_payouts]\"=true \\  -d \"components[payouts][features][standard_payouts]\"=true \\  -d \"components[payouts][features][edit_payout_schedule]\"=true \\  -d \"components[payouts][features][external_account_collection]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payouts component in the front end:\n\n`// Include this element in your HTML const payouts = stripeConnectInstance.create('payouts'); container.appendChild(payouts);`\n\nEnabling Instant Payouts might require additional steps:\n\n*   If your platform collects fees for a connected account, you must set up Instant Payout monetization in the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n*   If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the [same country as the platform](https://docs.stripe.com/connect/instant-payouts#eligible-connected-accounts).\n*   If Stripe is liable for a connected account’s negative balances, [Stripe controls eligibility](https://docs.stripe.com/payouts/instant-payouts#eligibility-and-daily-volume-limits) for the account.\n\n#### Note\n\nTo use standard manual payouts, the connected account needs to have their [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) set to `manual`. You can enable payout schedule editing in the payouts component by setting the `edit_payout_schedule` feature to `true`.",
    "title": "Payouts | Stripe Documentation",
    "description": "Show payout information and allow your users to perform payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts-list",
    "markdown": "# Payouts list | Stripe DocumentationThe Stripe Docs logo\n\n## Show a filterable list of payouts.\n\nRenders a list of payouts for the connected account.\n\n#### Note\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payouts list by specifying `payouts_list` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payouts_list][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payouts list component in the front end:\n\n`// Include this element in your HTML const payoutsList = stripeConnectInstance.create('payouts-list'); container.appendChild(payoutsList);`",
    "title": "Payouts list | Stripe Documentation",
    "description": "Show a filterable list of payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/app-install",
    "markdown": "# App install | Stripe DocumentationThe Stripe Docs logo\n\n## App installBeta\n\n## Show a button to install an App.\n\nRenders a component that enables your connected account to install an App.\n\nFor full integration details, see [Accounting software integrations](https://docs.stripe.com/stripe-apps/accounting-software-integrations).\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable app\\_install by specifying `app_install` in the `components` parameter.\n\n#### Note\n\nThe app\\_install component is in private beta, so the Stripe SDKs don’t include it yet. To enable it when creating an account session, use this code snippet with the Stripe beta SDK:\n\n`Stripe.api_key = '{{sk_INSERT_YOUR_SECRET_KEY}}' Stripe.api_version = '2023-10-16; embedded_connect_beta=v2;' account_session = Stripe::AccountSession.create({   account:` \n\n`'{{CONNECTED_ACCOUNT_ID}}'`\n\n`,   components: {     app_install: {enabled: true}   } })`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_install component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppInstallWithAttributes = ({   appId, }: {   appId: string; }): JSX.Element | null => { const {wrapper, component: appInstall} = useCreateComponent(   'stripe-connect-app-install' as any );  useAttachAttribute(appInstall, 'app' as any, appId); return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | `string` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). |\n| `setOnAppInstallStateFetched` | `() => void` | Stripe sends this event when the component renders. |\n| `setOnAppInstallStateChanged` | `() => void` | Stripe sends this event when an app finishes installing or uninstalling. |\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fapp-install) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "App install | Stripe Documentation",
    "description": "Show a button to install an App.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/app-viewport",
    "markdown": "# App viewport | Stripe DocumentationThe Stripe Docs logo\n\n## App viewportBeta\n\n## Show a view from an installed App.\n\nThe App viewport renders a view from an installed App.\n\nFor full integration details, see [Accounting software integrations](https://docs.stripe.com/stripe-apps/accounting-software-integrations).\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable app\\_viewport by specifying `app_viewport` in the `components` parameter.\n\n#### Note\n\nThe app\\_viewport component is in private beta, so the Stripe SDKs don’t include it yet. To enable it when creating an account session, use this code snippet with the Stripe beta SDK:\n\n`Stripe.api_key = '{{sk_INSERT_YOUR_SECRET_KEY}}' Stripe.api_version = '2023-10-16; embedded_connect_beta=v2;' account_session = Stripe::AccountSession.create({   account:` \n\n`'{{CONNECTED_ACCOUNT_ID}}'`\n\n`,   components: {     app_viewport: {enabled: true}   } })`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_viewport component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppViewportWithAttributes = ({   appId,   appData }: {   appId: string; }): JSX.Element | null => {   const {wrapper, component: appViewport} = useCreateComponent(     'stripe-connect-app-viewport' as any   );    useAttachAttribute(appViewport, 'app' as any, appId);   useAttachAttribute(appViewport, 'appData' as any, appData);    return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). | `string` |\n| `setAppData` | `Record<String, String>` | Sets data pertaining to your platform consumed by the App. |\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fapp-viewport) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "App viewport | Stripe Documentation",
    "description": "Show a view from an installed App.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/capital-overview",
    "markdown": "# Capital overview | Stripe DocumentationThe Stripe Docs logo\n\n## Capital overviewBeta\n\n## Renders a financing offer or in-progress financing report for a connected account.\n\nCreates a dedicated space on your website where connected accounts can check their eligibility for financing, get an overview of their in-progress financing, and access the reporting page to review paydown transactions.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the capital overview component by specifying `capital_overview` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[capital_overview][enabled]\"=true`\n\nAfter you create the account session and [initialize ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), render the capital overview component in the frontend:\n\n`// Include this element in your HTML const capitalOverview = stripeConnectInstance.create('capital-overview'); container.appendChild(capitalOverview);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fcapital-overview) to request access to this Connect embedded component in beta. If you don’t have a Stripe account, [register now](https://dashboard.stripe.com/register).",
    "title": "Capital overview | Stripe Documentation",
    "description": "Renders a financing offer or in-progress financing report for a connected account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account",
    "markdown": "# Financial Account | Stripe DocumentationThe Stripe Docs logo\n\n## Financial AccountBeta\n\n## Show details of a Financial Account.\n\nRenders the view of an individual [Financial Account](https://docs.stripe.com/api/treasury/financial_accounts) for your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account component by specifying `financial_account` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account][enabled]\"=true \\  -d \"components[financial_account][features][money_movement]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account component in the frontend:\n\n`// Include this element in your HTML const financialAccount = stripeConnectInstance.create('financial-account'); financialAccount.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccount);`\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- |\n| `setFinancialAccount` | `string` | The ID of the Financial Account to display. | required |\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ffinancial-account) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Financial Account | Stripe Documentation",
    "description": "Show details of a Financial Account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account-transactions",
    "markdown": "# Financial account transactions | Stripe DocumentationThe Stripe Docs logo\n\n## Financial account transactionsBeta\n\n## Show a table of all transactions for a financial account.\n\nRenders the view of a list of [transactions](https://docs.stripe.com/api/treasury/transactions) associated with a [financial account](https://docs.stripe.com/api/treasury/financial_accounts) for your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account transactions component by specifying `financial_account_transactions` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account_transactions`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account_transactions][enabled]\"=true \\  -d \"components[financial_account_transactions][features][card_spend_dispute_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account transactions component in the frontend:\n\nfinancial-account-transactions.js\n\n`// Include this element in your HTML const financialAccountTransactions = stripeConnectInstance.create('financial-account-transactions'); financialAccountTransactions.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccountTransactions);`\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description |     |\n| --- | --- | --- | --- |\n| `setFinancialAccount` | `string` | The ID of the financial account which you want to display a list of transactions for | required |\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ffinancial-account-transactions) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Financial account transactions | Stripe Documentation",
    "description": "Show a table of all transactions for a financial account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-card",
    "markdown": "# Issuing card | Stripe DocumentationThe Stripe Docs logo\n\n## Issuing cardBeta\n\n## Show an individual issued card.\n\nRenders the details of an individual [card](https://docs.stripe.com/api/issuing/cards) issued to your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing card component by specifying `issuing_card` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_card][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing card component in the front end:\n\n`// Include this element in your HTML const issuingCard = stripeConnectInstance.create('issuing-card'); issuingCard.setDefaultCard('{{ISSUING_CARD_ID_ID') container.appendChild(issuingCard);`\n\nThis embedded component supports the following attributes:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setDefaultCard` | `(string) => void` | Sets the Issuing [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID to display upon initial load. |\n| `setCardSwitching` | `(boolean) => void` | Sets whether to render the card dropdown selector. Defaults to true. |\n| `setFetchEphemeralKey` | `(function) => void` | Sets the callback that fetches the ephemeral key for the card. See [sensitive data display](#sensitive-data-display). |\n\n[](#sensitive-data-display)\n\nIssuing Connect embedded components integrate with [Issuing Elements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n1.  Set up an ephemeral key exchange on your server.\n2.  Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour server-side endpoint needs to accept a [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and a `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',     stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,     nonce: nonce,     issuingCard: card_id,   }); });`\n\n### Asynchronous callback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must define an asynchronous function that accepts a named argument with property `issuingCard` which is a [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID and additionally, a `nonce` property. This function must return an `Object` with properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are retrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n`const issuingCard = stripeConnectInstance.create('issuing-card'); const fetchEphemeralKey = async (fetchParams) =>  {   const { issuingCard, nonce } = fetchParams;    // This may vary greatly based on your implementation   const response = await myServer.getEphemeralKey({issuingCard, nonce})    return {     issuingCard: response.issuingCard,     nonce: response.nonce,     ephemeralKeySecret: response.ephemeralKeySecret   } }  issuingCard.setFetchEphemeralKey(fetchEphemeralKey); document.body.appendChild(issuingCard);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fissuing-card) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Issuing card | Stripe Documentation",
    "description": "Show an individual issued card.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list",
    "markdown": "# Issuing cards list | Stripe DocumentationThe Stripe Docs logo\n\n## Issuing cards listBeta\n\n## Show a table of all issued cards.\n\nRenders a table view of all the [cards](https://docs.stripe.com/api/issuing/cards) issued to your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\n[](#sensitive-data-display)\n\nIssuing Connect embedded components integrate with [Issuing Elements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n1.  Set up an ephemeral key exchange on your server.\n2.  Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour server-side endpoint needs to accept a [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and a `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',     stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,     nonce: nonce,     issuingCard: card_id,   }); });`\n\n### Asynchronous callback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must define an asynchronous function that accepts a named argument with property `issuingCard` which is a [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID and additionally, a `nonce` property. This function must return an `Object` with properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are retrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n`const issuingCard = stripeConnectInstance.create('issuing-card'); const fetchEphemeralKey = async (fetchParams) =>  {   const { issuingCard, nonce } = fetchParams;    // This may vary greatly based on your implementation   const response = await myServer.getEphemeralKey({issuingCard, nonce})    return {     issuingCard: response.issuingCard,     nonce: response.nonce,     ephemeralKeySecret: response.ephemeralKeySecret   } }  issuingCard.setFetchEphemeralKey(fetchEphemeralKey); document.body.appendChild(issuingCard);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fissuing-cards-list) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Issuing cards list | Stripe Documentation",
    "description": "Show a table of all issued cards.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-registrations",
    "markdown": "# Tax registrations | Stripe DocumentationThe Stripe Docs logo\n\n## Tax registrationsBeta\n\n## Learn how to allow connected accounts to manage their tax registrations for Stripe Tax.\n\n#### Beta\n\nThis Connect embedded component is in beta. [Request access](#request-access) below.\n\nThe Tax registrations component gives your connected accounts control over their tax compliance. Your connected accounts interact with this component by managing their tax registrations directly in your platform. This component is suitable for [software platforms](https://docs.stripe.com/tax/tax-for-platforms), which means that your connected accounts are liable to collect taxes.\n\nIf you’re a platform integrating Stripe Tax, you must collect information about the [registrations with tax authorities](https://docs.stripe.com/tax/registering) of your connected accounts in the applicable jurisdictions. Your connected accounts need to register with their tax authorities before they add their tax registrations in your platform. To correctly calculate and collect taxes for your platform, you must collect the tax registrations of your connected accounts.\n\nThe Tax registrations component uses the [Tax Registrations API](https://docs.stripe.com/tax/registrations-api) to display a list of tax registrations to your connected accounts. To calculate tax on their payments in a location, connected accounts need to add their tax registration with the Tax registrations component. If the connected account wish to stop calculating tax in a certain location, they can end the tax registration in the component.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Your integration must follow the [software platforms guide](https://docs.stripe.com/tax/tax-for-platforms) for [Tax on Connect](https://docs.stripe.com/tax/connect). This means that your connected accounts are liable to collect taxes.\n*   If you haven’t already, render the [Tax settings component](https://docs.stripe.com/connect/supported-embedded-components/tax-settings). You need both the Tax settings component and the Tax registrations component to provide tax compliance control to your connected accounts.\n\n## Integrate the tax registrations component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable tax registrations by specifying `tax_registrations` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[tax_registrations][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the tax registrations component in the frontend:\n\n`// Include this React component import {   ConnectTaxRegistrations,   ConnectComponentsProvider, } from \"@stripe/react-connect-js\";  return (   <ConnectComponentsProvider connectInstance={stripeConnectInstance}>     <div>       <h2>Tax Registrations</h2>       <ConnectTaxRegistrations />     </div>   </ConnectComponentsProvider> );`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ftax-registrations) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Tax registrations | Stripe Documentation",
    "description": "Learn how to allow connected accounts to manage their tax registrations for Stripe Tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings",
    "markdown": "# Payment method settings | Stripe DocumentationThe Stripe Docs logo\n\n## Payment method settingsBeta\n\n## Display a configurable list of payment methods that connected accounts can offer during checkout.\n\nRender a connected account’s [Payment Method Configuration](https://docs.stripe.com/api/payment_method_configurations) to enable customization of payment methods displayed at checkout. Connected accounts can customize their checkout payment methods and provide the necessary compliance details for their usage.\n\n#### Note\n\nWe support the following payment methods in the embedded component:\n\nAffirm, Afterpay Clearpay, Apple Pay, Bancontact, BLIK, Cards, EPS, giropay, Google Pay, iDEAL, Klarna, Link, P24, Sofort, and Zip.\n\nThe embedded payment method settings uses the [Payment Method Configurations](https://docs.stripe.com/connect/payment-method-configurations) and [Account Capabilities](https://docs.stripe.com/connect/account-capabilities) APIs to display a list of customizable payment methods to your connected accounts. If a connected account requires additional compliance data prior to requesting the payment method [capability](https://docs.stripe.com/api/capabilities/object), the component indicates this and collects the necessary information in advance.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour integration must use [dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods) to automatically apply the connected account’s preferences during checkout. In prebuilt payment UIs such as [Payment Element](https://stripe.com/payments/elements) and [Checkout](https://stripe.com/payments/checkout), Stripe handles the logic for displaying eligible payment methods for each transaction.\n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\n## Integrate the component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payment method settings by specifying `payment_method_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payment_method_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payment method settings component in the frontend:\n\npayment-method-settings.js\n\n`// Include this element in your HTML const paymentMethodSettings = stripeConnectInstance.create('payment-method-settings'); container.appendChild(paymentMethodSettings);`\n\n### Platform-level controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe embedded payment method settings component respects the platform-level defaults that you configure in the [Dashboard](https://docs.stripe.com/connect/payment-methods) or the [Payment Method Configurations API](https://docs.stripe.com/connect/payment-method-configurations).\n\nFor payment methods that you configure as **On by default** or **Off by default**, the connected account can override that preference in the component. If you have set a payment method to **Blocked**, it’s completely hidden in the component.\n\n### Multiple payment method configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe embedded payment method settings component currently shows the connected account’s **default** payment method configuration. During the beta, the component supports [multiple configurations](https://docs.stripe.com/connect/multiple-payment-method-configurations) with a component attribute that accepts a configuration ID.\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fpayment-method-settings) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register here](https://dashboard.stripe.com/register).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Connect integration guide](https://docs.stripe.com/connect/charges)\n*   [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods)\n*   [Payment Method Configurations API](https://docs.stripe.com/connect/payment-method-configurations)\n*   [Account Capabilities API](https://docs.stripe.com/connect/account-capabilities)",
    "title": "Payment method settings | Stripe Documentation",
    "description": "Display a configurable list of payment methods that connected accounts can offer during checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-settings",
    "markdown": "# Tax settings | Stripe DocumentationThe Stripe Docs logo\n\n## Tax settingsBeta\n\n## Learn how to allow connected accounts to set up Stripe Tax.\n\n#### Beta\n\nThis Connect embedded component is in beta. [Request access](#request-access) below.\n\nThe Tax settings component allows your connected accounts to [set up Stripe Tax](https://docs.stripe.com/tax/set-up) in your platform. Connected accounts can change their head office address and [preset tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#product-tax-code) with this component. This component is suitable for [software platforms](https://docs.stripe.com/tax/tax-for-platforms), which means that your connected accounts are liable to collect taxes.\n\nTo calculate taxes on payments of your connected accounts you have to collect four data points of information:\n\n*   The head office address\n*   The type of product the connected account sells\n*   The address of the customer\n*   The registrations of the connected account with the tax authorities\n\nThe tax settings component helps you to collect the first two pieces of information of your connected accounts with minimal integration effort.\n\nThe embedded tax settings component uses the [Tax Settings API](https://docs.stripe.com/tax/settings-api) to display the head office address and [preset tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#product-tax-code) to your connected accounts.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Your integration must follow the [software platforms guide](https://docs.stripe.com/tax/tax-for-platforms) for [Tax on Connect](https://docs.stripe.com/tax/connect). This means that your connected accounts are liable to collect taxes.\n*   After integrating the Tax settings component, render the [Tax registrations component](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations) to collect tax registration information of your connected accounts. This is a requirement for Tax to calculate tax in a specific location.\n\n## Integrate the tax settings component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable tax settings by specifying `tax_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[tax_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the tax settings component in the frontend:\n\n`// Include this React component import {   ConnectTaxSettings,   ConnectComponentsProvider, } from \"@stripe/react-connect-js\";  return (   <ConnectComponentsProvider connectInstance={stripeConnectInstance}>     <div>       <h2>Tax Settings</h2>       <ConnectTaxSettings />     </div>   </ConnectComponentsProvider> );`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ftax-settings) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
    "title": "Tax settings | Stripe Documentation",
    "description": "Learn how to allow connected accounts to set up Stripe Tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli/events/resend",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/accounting-software-integrations",
    "markdown": "# Accounting software integrations | Stripe DocumentationThe Stripe Docs logo\n\n## Accounting software integrationsBeta\n\n## Embed accounting software integrations on your platform.\n\nLet your users automatically synchronize their transactions, fees, refunds, payouts, customers, and products with their accounting software.\n\n[](#undefined)\n\n[Set up Connect.js](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions) to enable the ability to add connected account dashboard functionality to your website.\n\n[](#app-select)\n\nStripe supports the following accounting app integrations.\n\n| Accounting App integration | App ID |\n| --- | --- |\n| QuickBooks Sync by Acodei | com.example.acodeistripeapp |\n| Xero sync by Xero | com.xero.stripeapp |\n\n[](#app-install)\n\nRender the app install embedded component for your selected accounting app. App installation grants permission for the third party app to access your users’ Stripe data, creating a connection between your platform, Stripe, and the third party app. The component has two states: `uninstalled` and `installed`. Listen to install event triggers to build your custom UX flow or make updates in your own backend.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payments by specifying `app_onboarding`, `app_install`, and `app_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account={{CONNECTED_ACCOUNT_ID}} \\   -d \"components[app_onboarding][enabled]\"=true \\  -d \"components[app_install][enabled]\"=true \\  -d \"components[app_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_install component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppInstallWithAttributes = ({   appId, }: {   appId: string; }): JSX.Element | null => { const {wrapper, component: appInstall} = useCreateComponent(   'stripe-connect-app-install' as any );  useAttachAttribute(appInstall, 'app' as any, appId); return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | `string` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). |\n| `setOnAppInstallStateFetched` | `() => void` | Stripe sends this event when the component renders. |\n| `setOnAppInstallStateChanged` | `() => void` | Stripe sends this event when an app finishes installing or uninstalling. |\n\n[](#app-settings)\n\nRender the app settings embedded component for your selected accounting app to enable core app functionality including connection to the accounting software account with OAuth, onboarding, settings, and configuration of the service and synchronization states of transactions. Pass the `user_id` (business represented on your platform) as an optional HTML attribute that third party apps can use to build a dynamic URL that redirects back to your user dashboard after OAuth.\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppSettingsWithAttributes = ({   appId,   userId }: {   appId: string; }): JSX.Element | null => {   const {wrapper, component: appSettings} = useCreateComponent(     'stripe-connect-app-settings' as any   );    useAttachAttribute(appSettings, 'app' as any, appId);   useAttachAttribute(appSettings, 'user-id' as any, userId);    return wrapper; };`\n\nThis component supports the following optional attributes:\n\n| Attribute | Description |\n| --- | --- |\n| `app` | App ID of embedded app, provided by Stripe |\n| `user-id` | Unique identifier of the platform user |\n\n[](#destination-obo)\n\nPass required and optional transaction data to Xero or QuickBooks Sync by Acodei by updating the destination charge on the connected account using the data standardized data schema below. You must pass a [customer](https://docs.stripe.com/api/customers/object) object to the destination charge. QuickBooks Sync by Acodei also requires charge updates with refund amounts written to metadata. There are three instances that require you to update your destination charge:\n\n*   one-time payment complete\n*   recurring payment complete\n*   payment refunded\n\n| Field or key name | Format (standard CSV rules apply) | Description |\n| --- | --- | --- |\n| [charges.customer](https://docs.stripe.com/api/charges/object#charge_object-customer) | string (ID) | Stripe Customer ID (belonging to connected account) attached to a destination charge object. Transactions don’t sync to Apps (such as Xero and QBO) if this field isn’t present. |\n| [customer.name](https://docs.stripe.com/api/customers/object#customer_object-name) | string | Customer’s full name |\n| [customer.email](https://docs.stripe.com/api/customers/object#customer_object-email) | string | Customer’s email address |\n| [customer.address.<>](https://docs.stripe.com/api/customers/object#customer_object-address) | string (multi-field) | Customer’s physical address (can be used for both billing and shipping) |\n| `charges.metadata.[refund_amount]` | string (cents integer) | mirroring [charges.amount\\_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded) |\n| `charges.metadata.[refund_reason]` | string | reason for the refund |\n| `charges.metadata.[currency_converted]` | `true` \\| `false` \\| `null` | Set to `true` if currency has been converted, for example, if the presentment currency differs from the settlement currency. |\n| `customer.metadata.[platform_customer_ID]` | string | Customer ID as recorded in the platform’s system |\n| `charges.metadata.[platform_product_ID]` | string, CSV multiple products | Product IDs as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_product_name]` | string, CSV multiple products | Product name as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_product_value]` | string, CSV multiple products | The individual Product value (price/cost) corresponding to the Product ID and name |\n| `charges.metadata.[platform_order_ID]` | string | Order ID as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_charge_ID]` | string | Charge or transaction ID as recorded in the platform’s system and visible to the merchant |\n| `charges.metadata.[fees_names]` | string, CSV | Name of fees merchant is paying (expense) of any kind related to the transaction that aren’t captured in the Charge eg. credit processing fee, platform fee _Note: if this field is populated, charges.application\\_fee is ignored._ |\n| `charges.metadata.[fees_values]` | string, CSV | Values of fees merchant is paying (expense) of any kind related to the transaction that aren’t captured in the Charge eg. credit processing fee, platform fee |\n\nThe following code snippet example traverses to the target destination charge and shows how to update per schema.\n\n1.  Trace from the Transaction to the destination charge\n\n`const paymentOnPlatform = await StripeClient.paymentIntents.retrieve(   \"pi_3N6JL7LirQdaQn8E1Lpn7Dui\", );  const latestCharge = await StripeClient.charges.retrieve(   paymentOnPlatform.latest_charge as string, );  const transfer = await StripeClient.transfers.retrieve(   latestCharge.transfer as string, );  const payment = await StripeClient.charges.retrieve(   transfer.destination_payment as string,     undefined,     {         stripeAccount: transfer.destination as string,       },   );`\n\n1.  Create a customer and then update the charge with the relevant customer ID and metadata. The customer must belong to the connected account and not the platform for the data to pass and apps to synchronize.\n\n``const customer = await StripeClient.customers.create(       {         email: `jenny.rosen@example.com`,         name: \"Jenny Rosen\", \t address.city: \"Brothers\" \t Address.state: \"Oregon\" \t address.country: \"USA\" \t address.line1: \"27 Fredrick Ave\" \t address.postal_code: \"97712\"        \t metadata: {  \t   platform_customer_ID: \"K-123456\" \t },       },       {         stripeAccount: accountId,       },     );     const payment = await StripeClient.charges.update(       id,       {         customer: customer.id,         metadata: {           product_name: \"Creative writing course for PMs\",           platform_product_ID: \"P-123456\"           platform_order_ID: \"O-123456\"         },       },       {         stripeAccount: accountId,       },     );``\n\n[](#direct-charges)\n\nThe embedded accounting integrations accesses all payment, customer, and product data stored with Stripe. You can pass optional platform-specific data to the accounting software through the App using the below metadata schema.\n\n| Field or key name | Format (standard CSV rules apply) | Description |\n| --- | --- | --- |\n| `customer.metadata.[platform_customer_ID]` | string | Customer ID as recorded in the platform’s system |\n| `payment.metadata.[platform_product_ID]` | string, CSV multiple products | Product IDs as recorded in the platform’s system, related to this transaction, if different than the Stripe product ID |\n| `payment.metadata.[platform_product_name]` | string, CSV multiple products | Product or service names as recorded in the platforms’ system, related to this transaction, if different than the Stripe product name |\n| `payment.metadata.[platform_product_value]` | string, CSV multiple products | The individual product value (price or cost) corresponding to the ID and name array, if different than the Stripe product value |\n| `payment.metadata.[platform_order_ID]` | string | Order ID as recorded in the platform’s system, related to this transaction (charge) |\n| `payment.metadata.[platform_charge_ID]` | string | Charge or transaction ID as recorded on the platform and visible to the user, if different than the Stripe payment ID |\n\n## User billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Xero App is free for the platforms’ users. The QuickBooks Sync by Acodei includes free and paid tiers.\n\n## Other integrations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need an integration with other accounting software or any other integration types, reach out at stripe-apps@stripe.com.",
    "title": "Accounting software integrations | Stripe Documentation",
    "description": "Embed accounting software integrations on your platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli/login",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/revenue-recognition/performance-obligations-api",
    "markdown": "# Revenue Recognition Performance Obligations API\n\n## Learn how to model performance obligation fulfillment in Stripe Revenue Recognition.\n\n## Overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPerformance obligation fulfillment is an important part of revenue recognition in accounting and finance. It refers to the completion of a transaction in which the seller has delivered the goods or services promised to the customer, and can recognize revenue for the sale. There are several scenarios where fulfillment occurs and revenue can be recognized, including but not limited to:\n\n*   **Delivery of tangible goods**: Fulfillment occurs when the physical goods have been shipped to the customer and they’ve taken possession of the goods. The delivery of the goods confirms that the customer has received the promised benefit, and therefore you can recognize the revenue from the sale.\n*   **Performance of a service**: In the case of a service-based sale, fulfillment occurs when the service has been performed and the customer has accepted the service. After the customer has accepted the service, you can recognize the revenue.\n*   **Prepayment**: A customer pays for a service or goods in advance of receiving the actual service or goods. You can recognize the revenue from the pre-payment over time as the service is delivered or the goods are used.\n\nThis guide explains how to use the Stripe Revenue Recognition Performance Obligations API to achieve accurate revenue reporting.\n\n## Setup ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses a product named “Prepaid package.” Create the product as a [Stripe product](https://docs.stripe.com/invoicing/products-prices)—call it “Product Prepaid package.”\n\nUnder the Product Prepaid package, a create a [Price](https://docs.stripe.com/invoicing/products-prices) for one unit. The price is 1 USD per unit. Call the price “Prepaid package.”\n\nSay you bill a customer for a 100 USD Product Prepaid package, which includes a Price Prepaid package for 100 units. You want to defer the 100 USD upon invoicing and to recognize it based on the usage.\n\n### Create a subscription or an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow you can set up a subscription or a standalone invoice to bill the customer.\n\nFor a subscription, you’ll need to add a subscription item whose price is Price Prepaid package for 100 units.\n\nFor an invoice, you’ll need to add an invoice item whose price is Price Prepaid for 100 units.\n\n### Create a Revenue Recognition rule ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo defer the revenue upon invoicing, you’ll need to create a [Revenue Recognition rule](https://docs.stripe.com/revenue-recognition/rules). If no fulfillment events are ever sent, the revenue will be recognized completely in a year.\n\n![Performance Obligations API Revenue Recognition Rule Example](https://b.stripecdn.com/docs-statics-srv/assets/performance-obligations-api-rev-rec-rule.76697d5cc2900128ef8d473650ab56c0.png)\n\n## Record usages ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can record usages through the API.\n\nIf you were to create an invoice on June 1, 2022, and 10 units are used on July 29, 2022, you would send the below API request:\n\n`curl https://api.stripe.com/v1/revenue_recognition/performance_obligations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"target[type]\"=invoice_line_item \\  -d \"target[invoice_line_item]\"=il_AAA \\  -d \"period[start]\"=1659078000 \\  -d amount=1000 \\  -d currency=usd`\n\n## Reporting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Before fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you download the debits and credits reports in June 2022, the following is what you would see. Because no usage is recorded yet, the whole invoice line item will be deferred and recognized 12 months later.\n\n| Account | Jun 2022 | Jun 2023 |\n| --- | --- | --- |\n| AccountsReceivable | +100 |     |\n| DeferredRevenue | +100 | \\-100 |\n| Revenue |     | +100 |\n\n### Partial fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the usage recorded in the section above, the reports would look like the following in July 2022:\n\n| Account | Jun 2022 | Jul 2022 | Jun 2023 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +100 |     |     |\n| DeferredRevenue | +100 | \\-10 | \\-90 |\n| Revenue |     | +10 | +90 |\n\n### Full fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSuppose another usage is recorded on Aug 10, 2022 with the remaining amount (90 USD). The deferred revenue will be converted to revenue completely in Aug 2022:\n\n| Account | Jun 2022 | Jul 2022 | Aug 2022 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +100 |     |     |\n| DeferredRevenue | +100 | \\-10 | \\-90 |\n| Revenue |     | +10 | +90 |",
    "title": "Revenue Recognition Performance Obligations API | Stripe Documentation",
    "description": "Learn how to model performance obligation fulfillment in Stripe Revenue Recognition.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account_sessions/create",
    "markdown": "# Create an Account Session | Stripe API Reference\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create an Account Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/files/object",
    "markdown": "# The File object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `finance_report_run`<br><br>User-accessible copies of query results from the Reporting dataset. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `identity_document_downloadable`<br><br>Image of a document collected by Stripe Identity. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | Show 4 more |\n    \n*   The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).\n    \n\n### More attributes\n\n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Create a file](https://docs.stripe.com/api/files/create)\n\nTo upload a file to Stripe, you need to send a request of type `multipart/form-data`. Include the file you want to upload in the request, and the parameters for creating a file.\n\nAll of Stripe’s officially supported Client libraries support sending `multipart/form-data`.\n\n### Parameters\n\n*   A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | `tax_document_user_upload`<br><br>A user-uploaded tax document. |\n    | `terminal_reader_splashscreen`<br><br>Splashscreen to be displayed on Terminal readers. |\n    \n\n### More parameters\n\n### Returns\n\nReturns the file object.\n\n```\ncurl https://files.stripe.com/v1/files \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -F purpose=dispute_evidence \\  -F file=\"@/path/to/a/file.jpg\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Retrieve a file](https://docs.stripe.com/api/files/retrieve)\n\nRetrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to [access file contents](https://docs.stripe.com/file-upload#download-file-contents).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/files/@/path/to/a/file.png \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [List all files](https://docs.stripe.com/api/files/list)\n\nReturns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.\n\n### Parameters\n\n*   Filter queries by the file purpose. If you don’t provide a purpose, the queries return unfiltered files.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` files, starting after the `starting_after` file. Each entry in the array is a separate file object. If there aren’t additional available files, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/files \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/files\",  \"has_more\": false,  \"data\": [    {      \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",      \"object\": \"file\",      \"created\": 1680116847,      \"expires_at\": 1703444847,      \"filename\": \"file.png\",      \"links\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"      },      \"purpose\": \"dispute_evidence\",      \"size\": 8429,      \"title\": null,      \"type\": \"png\",      \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"    }    {...}    {...}  ],}\n```\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The File object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/review-requirements",
    "markdown": "# Stripe App Marketplace review requirements\n\n## Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.\n\nStripe reviews all apps and app updates submitted to the Stripe App Marketplace to make sure they provide the best user experience in areas such as design, reliability, security, and trust. Make sure your app fulfills these requirements before submitting it for app review.\n\n## App review principles ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThree main principles guide the app review process:\n\n*   **Quality**: Users require high-quality and useful apps. This encompasses elements of design, UX, performance, reliability, and so on.\n*   **Security**: All apps must meet Stripe’s standards for the security and privacy of user data and comply with all applicable laws.\n*   **Trust**: App developers must adhere to a standard of trust that maintains the integrity of our ecosystem. This extends to all communication, support, and community behavior.\n\n## The app review process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s what you can expect when submitting your app for review:\n\n1.  From the Stripe Dashboard, create or update your app listing. Then submit your app and app listing for review. If your app requires an account or additional data to function, you must submit a test plan and credentials that detail how to test your app as part of the review process. For more information, see [example test credentials](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials) or see [Submit app for review](https://docs.stripe.com/stripe-apps/publish-app#submit-app-for-review) for instructions on this step.\n2.  A Stripe reviewer evaluates the app and listing against all relevant criteria. This process might involve automated scans, live testing of the app, and human review of all the information you provide.\n3.  If the app and listing meet all app review requirements, we approve this version of your app and listing, and you can make the app visible on the marketplace at your convenience. You must explicitly publish your approved app for it to be available on the marketplace. See [Publish your app](https://docs.stripe.com/stripe-apps/publish-app#publish-app) for instructions. However, if the app doesn’t meet all app review criteria, Stripe will send you specific feedback on which criteria the app didn’t meet, and provide you with guidance on ways to meet them.\n\nUpdates to apps and app listings go through the same process.\n\n## App review requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo pass review, your app must pass the requirements in this section. Test it end-to-end for bugs and edge cases before submitting it for review.\n\n### Transparent and consistent pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must clearly state your app pricing up front, without hidden costs or fees. App pricing must also be consistent with off-marketplace prices.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Price your service transparently and consistently with off-marketplace prices.<br>*   Offer useful free functionality for your users, if you so choose. | *   Have pricing that is different from outside the Stripe App Marketplace.<br>*   Advertise your service as free and then require users to pay for functionality after they’ve installed the app. |\n\n### App developer standards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs an app developer, you must clearly represent yourself and your business purpose. You can’t engage in any illegal or harmful activities online or offline.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Make sure you have a website that provides accurate information about you, including contact information.<br>*   Check if your business purpose is listed in Stripe’s [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses).<br>*   Expect additional review if your business falls under the restricted business category. | *   Engage in any illegal or harmful behaviors.<br>*   Misrepresent yourself or your purpose. |\n\n### App listing page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app listing helps businesses find your app and understand how it can help them run their business. Make sure the content you add clearly describes your app features and addresses potential questions, allowing businesses to quickly evaluate if your app is right for them. See the [app listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines) for more details.\n\n**Spelling and grammar**\n\nYour listing must use proper spelling and grammar. This includes being easy to read and understand for your target audience.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Proof for proper spelling and grammar.<br>*   Proof that links point to appropriate URLs. | *   Don’t submit with typos or grammatical errors.<br>*   Don’t include links to expired or unrelated content. |\n\n**App name**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide the name only. _For example: HelpTable_<br>*   Use the same name in the app listing and in the app manifest. | *   Don’t use “Stripe”, “app”, “RAK”, “Generator”, “API Key”, “Authenticator”, “free” or “paid” in the app name. _For example: HelpTable app_<br>*   Don’t submit a listing with a different name from the app manifest. |\n\n**Logo**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Upload your own distinct logo. Make sure it’s high quality and square. | *   Don’t use Stripe’s logo or name.<br>*   Don’t use the logo or name of any other company without explicit permission or in any way that would imply their endorsement of your app without their consent.<br>*   Don’t provide images that are degraded in quality, stretched, or cropped in a way that cuts off elements. |\n\n**Subtitle**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Concisely summarize how your app works with Stripe. _For example: View and edit customer support history from your Stripe Dashboard_ | *   Don’t use hyperbole, marketing jargon, keyword stuffing, or unprovable claims. _For example: The world’s best support product._ |\n\n**Category**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Select the category that applies to the primary functionality of your app. | *   Don’t select categories that don’t apply to your app, or only apply tangentially. |\n\n**Description**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Briefly describe what your company does, who your app is for, and the value it delivers. An ideal description includes a quick intro to your service, followed by a brief description of your Stripe app specifically. _For example: \"HelpTable is a simple support management system designed for fast-moving startups. After installing the HelpTable app, you’ll get easy access to any customer’s support history within Stripe. This allows your agents to get a full picture of customer’s experience with your products and services. Agents can also view and manage support tickets, right within the Stripe Dashboard’_<br>*   Describe any limitations that your app might have. | *   Don’t only talk about your company and omit app related functionality. |\n\n**Feature highlight(s)**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Spotlight 1-3 key features to help users quickly understand what your app does.<br>*   State the feature’s value using simple language in the feature title. _For example: Resolve tickets from Stripe_<br>*   Describe how the feature works and benefits the user in the feature description.<br>*   Make sure your feature images are high quality. | *   Don’t highlight key features that aren’t available in your app.<br>*   Don’t use real customer data in screenshots and images.<br>*   Don’t provide images that are degraded in quality, stretched, skewed, or cropped in a way that cuts off elements. |\n\n**Non-duplicate**\n\nEach app can only appear in the Marketplace once (no duplicates, even under a different name). Submit new versions of an app from the same account as the previous version. Contact [Stripe Support](https://support.stripe.com/contact/login) if this isn’t possible and you need assistance.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Check to be sure that neither you nor someone else have already uploaded this application. | *   Don’t submit the same app multiple times. This includes uploading the same application under different names, in different categories, from different accounts, and so on. |\n\n### UI extension for apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your app includes a UI extension, the app drawer is the main place where your users see details about your app and take actions. Stripe users expect consistency across their Stripe Dashboard, which includes engaging with your app. Make sure that completing workflows through your app feels intuitive and natural. See the app design guidelines for examples of apps we think work well in the Stripe Dashboard.\n\n**App installation**\n\nIf your app requires authentication, clearly direct the appropriate users to authenticate after installation. Your app must also provide a clear way to unauthenticate from within the Stripe Dashboard UI.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear directions for user authentication. When a user installs the app, provide a clear prompt or trigger to complete authentication in the app drawer.<br>*   Provide a clear path to unlink the Stripe account from the app platform from either the settings page or the app drawer. | *   Don’t guide admins to configure account-wide authentication in your app’s settings.<br>*   Don’t provide a prompt for per-user authentication from the app drawer if your app authenticates users individually rather than account-wide. |\n\n**Information and actions**\n\nYour app provides contextual information and actions, adding value to the user’s workflow in Stripe.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide relevant information and actions pertaining to the user’s workflow within Stripe.<br>*   Only provide deep links out to third-party services when it’s helpful to reference a deeper workflow. | *   Don’t use your App as a jumping off point to a third-party website, without providing any tangible value to users within Stripe. |\n\n**Navigation**\n\nAt any point in the app drawer, the user should know where they are, where they can go, and how to go back or exit.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear navigation components so the user can easily move through your app.<br>*   Make sure you don’t have dead-ends or looping. _For example: don’t leave a user in the middle of a workflow without a **Cancel** or **Go back** button if they need to exit._ | *   Don’t exclude navigation, trap your user, or overload your navigation. _For example: If a user is in the middle of a workflow and needs to exit, but you don’t provide a **Cancel** or **Go back** button._ |\n\n**Buttons and links**\n\nMake sure the user can immediately understand what each button or link does without prior knowledge.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear labels for buttons and links.<br>*   Use the [external icon](https://docs.stripe.com/stripe-apps/components/icon#icon-reference) to indicate external links. | *   Don’t link the word “here”—make sure to disclose the location. |\n\n**Notices and dialogs**\n\nOnly use notices and dialogs for critical or contextual information in your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide notices when critical information requires a user’s attention.<br>*   Provide confirmation dialogs for any costly or destructive actions that aren’t easily reversible. | *   Don’t show notices that are irrelevant or aim to upsell. These types of messages might feel like spam and degrade the user’s preception of your app and Stripe.<br>*   Don’t allow the user to take any costly actions without clear confirmation. |\n\n**States**\n\nThe app needs to account for error states, loading states, and thoughtful solutions for edge cases.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide error states, loading states, and thoughtful solutions for edge cases. _For example: if a user is filling out a form in the app drawer, notify them of any errors when they select **Submit**._<br>*   Clearly highlight an error message and directly explain how to fix it, such as “Select a country.” | *   Don’t account for the happy path only.<br>*   Don’t leave the user stranded or present error states that aren’t clear. _For example: the user selects **Next** in a workflow, but nothing happens. The user has hit an error, but it’s not clear how to correct it because there’s no messaging._ |\n\n**UI error handling**\n\nThe app needs to gracefully handle errors and communicate clear and actionable error messages to users. Monitor your app for problems.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use the provided components and patterns to display error notifications to users.<br>*   Make sure error messages clearly explain the issue, and provide the user with an actionable next step.<br>*   Monitor your app for errors so you know when your users are having problems. | *   Display a vague “something went wrong” error message.<br>*   Swallow errors silently with no message to the user.<br>*   Catch an error and log it to the console without any indication to a non-technical user. |\n\n### App settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers can navigate to your app settings within the Stripe Dashboard.\n\n**Authentication Settings**\n\nIf your app requires authentication to a service other than Stripe, or stores credentials on behalf of the app user, your app must provide a way to reauthenticate or log out in your app’s settings.\n\n| Do  | Don’t |\n| --- | --- |\n| *   If your app requires authentication to your service or a third-party, make sure you provide a way to both reauthenticate and deauthenticate.<br>*   If your app authenticates with multiple services, make sure that each service can deauthenticate and reauthenticate individually.<br>*   Provide one clear way for users to save changes. | *   Don’t omit the authentication setting if your app requires it. |\n\n**Labels and descriptions**\n\nThe app settings must include labels and descriptions that make it easier for users to navigate and understand the app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear labels and descriptions for settings. | *   Don’t label settings in a manner that makes it difficult for users to understand.<br>*   Don’t exclude descriptions for settings. |\n\n**Required and optional settings**\n\nThe app must clearly indicate which settings are required and which settings are optional.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Indicate which setting fields are required. | *   Don’t leave required fields unmarked, causing users to not understand why the app isn’t functioning properly. |\n\n**Settings save**\n\nThe app settings must provide one clear way to save changes.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide one clear way for users to save changes. | *   Don’t omit the a way to save changes.<br>*   Don’t allow for multiple save patterns across the page. |\n\n**Change confirmations**\n\nFollow app settings changes with a confirmation message after they’re saved.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide a confirmation when settings changes are saved. | *   Don’t omit confirmation messages.<br>*   Don’t allow changes to happen without confirmation messages. |\n\n### Components ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Stripe’s UI components for your app, specifically across the expandable app drawer and your app settings page. This makes using your app feel like part of the Stripe Dashboard.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Build your app using the UI components.<br>*   Use only the provided fonts, icons, form fields, and color schemes to keep them consistent with the Dashboard. | *   Don’t use stylized components from other design systems.<br>*   Don’t customize or brand components. |\n\n**Visuals**\n\nUse icons, images and illustrations to make it simpler for users to understand the flows and features of your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use visuals (icons and illustrations) to support users in understanding how to use the app or a specific feature.<br>*   Use high quality visuals. | *   Don’t use visuals that are purely decorative.<br>*   Don’t use visuals that are degraded in quality. |\n\n**Drawer icon**\n\nIf your app has a UI component, it displays in the app drawer in the Stripe Dashboard after a user installs it. Make sure that the app icon correctly displays in that drawer by including a high quality app icon in your app manifest.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Include a high quality icon in your app manifest. | *   Don’t omit the icon from your app manifest.<br>*   Don’t add a low quality icon to your app manifest. |\n\n### App content ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nProvide clear and consistent content throughout the app. Clearly address users with voice, tone, and grammar that’s consistent with the rest of the dashboard.\n\n**Voice, tone, grammar, and style**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write simply. Lean into compact, specific language. _For example: “Try out the feature in your Dashboard.”_<br>*   Use active voice. _For example, “Order a card reader.”_<br>*   Use simple verbs for calls to action (CTAs). For common actions where the object is clear, you can include only the verb. _For example: “Create subscription”_<br>*   Use numerals for efficiency and space. _For example: “You have 3 tickets to review.”_ | *   Don’t use corporate voice and jargon. _For example: “Utilize this programmed software.”_<br>*   Don’t use passive voice. For example: “Card readers are available to order.”<br>*   Don’t include filler words like pronouns, adjectives, adverbs, or indefinite articles (like “a,” “an,” or “the”). _For example: don’t write “Create a subscription” or “Create your subscription” but rather “Create subscription.”_<br>*   Don’t spell out numbers unless required to add emphasis. _For example: “there are two ways to fix this problem.”_ |\n\n**Sentence case**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use sentence case for all content, including headings and buttons. _For example: “Add bank account”._ _For example: “Create subscription”_<br>*   Use numerals for efficiency and space. _For example: “You have 3 tickets to review.”_ | *   Don’t add capitalized words that aren’t proper nouns, acronyms or the first word in a sentence. _For example: “Add Bank Account”._ |\n\n**Punctuation**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use periods in body text. This includes subheadings, descriptions, legal text, and tooltips. The period goes inside quotation marks, not after them. | *   Use periods for titles or headings, or for clickable elements like menu labels and buttons. _For example: Add a period after a “Learn more” link._ |\n\n**Date format**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Format dates as follows: When abbreviating months, use the 3-letter abbreviation and no period. _For example, “Jan, Feb, Mar, Apr, May, Jun”._ When writing out the month name, day, and year, use a comma between the day and the year. _For example, “January 3, 2021” or “Jan 3, 2021”._ When only writing the month and year, don’t use a comma. _For example, “January 2021” or “Jan 2021”._ | *   Don’t include periods after abbreviating a month.<br>*   Don’t use ordinals (that is, 1st, 2nd, 3rd) for dates. |\n\n**Time format**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Format time as follows: Use the 12-hour clock. Indicate ante meridian (AM) and post meridian (PM) with all caps and a space after the last number. Use two digits for minutes. _For example,: “3:25 PM” or “10:00 AM”._ | *   Don’t use a 24-hour clock.<br>*   Don’t omit AM and PM on a 12-hour clock. |\n\n### App functionality ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app must be clear, useful, and reliable.\n\n**Usefulness**\n\nThe Stripe App Marketplace is a business-to-business (B2B) ecosystem. Apps in the marketplace must provide functionality that clearly enables or enhances a Stripe user’s business activities.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide an app that empowers users to conduct their business more efficiently and effectively.<br>*   Provide contextual information and actions. Make sure you’re adding value to the user’s workflow in Stripe. Only provide deep links out to your service when it might be helpful to reference a deeper workflow.<br>*   Provide complementary, non-duplicative functionality. Your app should add new and unique capabilities that are useful to users and augment their workflows on Stripe. | *   Don’t build consumer or social apps such as games, quizzes, and click bait.<br>*   Don’t merely use your app as a jumping off point to your own service, without providing any tangible value to your users within Stripe. Deep links should be secondary to contextual information or actions. |\n\n**Accuracy of calculations and data visualization**\n\nAll calculations performed by your application must be accurate and trustworthy. Any data or visualizations presented by your app should be accurate and complete.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Present users with valuable calculated data only where you have all relevant information and data necessary to give a financially accurate result. _For example: Accurate balance totals with all relevant information and data._ | *   Don’t present users with unreliable information where you don’t have enough information to correctly compute the result. _For example: Computing tax amounts without proper tax classifications._<br>*   Don’t present users with inaccurate information because you don’t have all of the data you need for an accurate calculation. |\n\n**Payment processing**\n\nUnless approved by Stripe in writing, you must process payments triggered by core functionalities of your app on Stripe.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use Stripe for any necessary payment processing in your app. | *   Don’t use external payment processors in your app to bypass Stripe |\n\n#### Testing guidance and credentials ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring app review, Stripe uses your test guidance and credentials to review your app’s stability, component usage, and user experience. You must provide the following:\n\n*   **Testing guidance**: Include several user scenarios or use cases that cover all the key features of your app, including the onboarding process.\n    \n*   **Testing credentials of test accounts**: Include one or more sets of testing credentials that Stripe can use to install and use your app. If your test accounts require specific data to use your app (such as a CSV file), you must include it with the account.\n    \n    #### Caution\n    \n    Stripe **does not** permit you to use real (non-test) accounts for the app review process. If you need other ways to provide us access to a specific account for testing purposes, contact [Stripe Support](https://support.stripe.com/contact/login) for assistance.\n    \n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide the detailed steps required to test your app.<br>*   Provide details about the expected behavior Stripe will see.<br>*   Provide sample data as needed per test account.<br>*   Provide test credentials of accounts that accurately represent your business.<br>*   Provide test credentials for a paid account if any portion of your app requires a paid account to test.<br>*   Provide test credentials for the highest role-based access within your app. _For example: “admin”._<br>*   Provide details about how different user roles in your system affect how different elements render within the Stripe Dashboard UI. _For example: “admin” or “view only”._<br>*   Provide detailed steps about how to connect your app with Stripe.<br>*   For apps that require data sync, provide detailed steps for how to both sync the necessary data and to confirm that the data is accurate.<br>*   For apps that require live data (for example, transactions), provide detailed steps for how to view this data.<br>*   For apps that are region specific or have geographical restrictions, provide details about which regions are supported, and test credentials for a Stripe account with the latest version of your app installed.<br>*   Disable multi-factor authentication or provide instructions for reviewers to pass it. | *   Don’t expect app reviewers to “figure it out.” |\n\nExample test credentials for an example app like Stripe with Google Sheets:\n\n| Test account name | Username | Password |\n| --- | --- | --- |\n| Google Sheets | `teststripeapps@stripe.com` | `teststripeapps` |\n| Stripe | `teststripeapps@stripe.com` | `teststripeapps` |\n\nExample user scenario for an example app like Stripe with Google Sheets:\n\n| User scenario | Step by step instructions |\n| --- | --- |\n| Sign in as a user | 1.  Install the app from the Stripe App Marketplace.<br>2.  Open the app.<br>3.  Click the **Sign in** button.<br>4.  Enter the Google test credentials (provided for you below).<br>5.  Give the app access to your Google account.<br>6.  Return to the Stripe dashboard signed in to the app. You should be able to use a service of Google Sheets in your app in the Dashboard. |\n| Export data from Stripe to Google Sheets | 1.  Navigate to either the Payments or Customers Dashboard page.<br>2.  Open the app in the Dashboard.<br>3.  Click the button in the app drawer to export data.<br>4.  Select a folder (optional).<br>5.  Save the data. The data should be available as a CSV in your Google Drive account. |\n\n**No advertising**\n\nYour app may not contain display or banner advertisements.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Keep your app focused on the key value you’re providing to merchants. | *   Include ads of any sort (your own or from a display advertising service).<br>*   Include promises of future releases. |\n\n**Fully-functional and bug-free**\n\nYour app must be complete, polished, and free from obvious bugs. This includes broken links.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Publish your app when it’s functionally complete.<br>*   Perform end-to-end testing on your app under multiple scenarios.<br>*   Fix any bugs you find before submitting your app for review.<br>*   Make sure any links in your app point to valid URLs. | *   Don’t leave in buttons that do nothing, half-finished views, and so on.<br>*   Don’t attempt to publish the app with known bugs, crashes, and so on.<br>*   Don’t include links to non-existent pages (404) or pages that produce error messages. |\n\n**Permissions**\n\nYour app manifest must include the minimum necessary set of permissions required for your app to operate. Your app won’t be permitted to attempt any API call that it hasn’t requested permissions for.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Declare all necessary permissions for your app in your app’s manifest file. | *   Don’t request permissions that your app doesn’t actively use.<br>*   Don’t attempt to make API calls that you haven’t requested permissions for. (Not only will the calls fail, it provides a bad user experience.) |\n\n**Breaking changes**\n\nMake sure that apps function seamlessly for users from version to version. Make sure your app doesn’t cause breaking changes that require user intervention when upgrading, because it can cause business disruptions. If any breaking changes occur, you must clearly message them to users through app release notes and other applicable channels.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Evolve your app in a way that version upgrades can be automatic, with no user intervention.<br>*   Make sure new functionality degrades gracefully if not configured.<br>*   Test your upgrade path from version-to-version so that you accurately reflect the upgrade process for your users. | *   Don’t add mandatory new settings that break your app until they’re configured. |\n\n### Privacy and security ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Data usage**\n\nYour app may only leverage user data and APIs that are required for existing app functionality that you clearly communicate to users. You may not resell or publish any data obtained from Stripe users through your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Request well-scoped permissions for the data your app needs to function.<br>*   Inform users about how you will use their data.<br>*   Make sure that you use data consistently with your privacy policy. | *   Don’t request permissions for data that you plan to use in the future.<br>*   Don’t have “hidden” features or request permission for data that powers a “hidden” feature in your app.<br>*   Don’t collect data from users for a specific app feature and then use that data for other purposes without disclosing that usage.<br>*   Don’t compile and sell data sets containing data obtained through your app. |\n\n**Code readability**\n\nDon’t submit UI extensions with obfuscated source code—this is a common way to attempt to disguise malicious code. Minification is acceptable and recommended.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write your code in a straightforward manner.<br>*   Minify your code during the build process. | *   Don’t run your code through obfuscation tools during the build process. |\n\n**External endpoints**\n\nIf your app has a UI Extension, you must declare all external endpoints that the UI Extension communicates with in your app manifest. Don’t allow your app to communicate with any external endpoints not declared in the manifest.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Declare all your external endpoints in the manifest file. | *   Don’t attempt to make API calls or load resources from endpoints you haven’t declared in the manifest file. (The request fails and we monitor apps for similar activity.) |\n\n**Secrets**\n\nYou must properly store secret materials required by UI extensions using the [Secret Store API](https://docs.stripe.com/api/secret_management). This includes OAuth tokens, other credentials, and any app secrets required for operation of your app’s UI Extension. Don’t use the Secret Store API for general data storage.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Store your users’ OAuth tokens in the Secret Store for secure cross-browser persistent authentication with your service. | *   Don’t use cookies, local storage, or Stripe metadata for storing sensitive data.<br>*   Don’t store non-secret data like user preferences using the Secret Store API. |\n\n### Performance and reliability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**API call success rates**\n\nYour app must make consistently reliable and successful API calls. Stripe monitors the API success rates for all installed apps.\n\n**API call latency**\n\nAPI calls made by your app need to have consistently low latency. Stripe monitors the API call latency for all installed apps.\n\n### Help and support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Documentation**\n\nYou must provide reasonably complete documentation for your app, accessible from the public internet.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write thorough documentation that helps users understand and be successful with your app.<br>*   Host your documentation on your website.<br>*   Direct users to your documentation for help and support. | *   Don’t link to a documentation page that says “coming soon.”<br>*   Don’t link to a documentation page that fails to describe major portions of the app’s functionality. |\n\n**Support**\n\nYou must provide clear and easily accessible support channels for users. At a minimum, you must provide an email address for support inquiries and an indication of the response time users should expect.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide a support email address with an explicit SLA.<br>*   Provide additional support channels such as chat, forums, and so on. | *   Don’t provide a “black hole” email address for support.<br>*   Don’t check support inquiries infrequently and take days or weeks to respond. |\n\n### Legal compliance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Intellectual property**\n\nOnly include assets and works that you have permission to use. Don’t infringe on the intellectual property rights of others.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use code, images, and other assets that you’ve created or have obtained commercial licenses for. | *   Don’t copy code from others without proper credit or permission.<br>*   Don’t use open source code in a manner inconsistent with its license.<br>*   Don’t use photos from the internet without permission. |\n\n**Data locality**\n\nYou’re responsible for complying with all data locality controls and any applicable jurisdictional laws. Refer to the [Stripe Developer Terms of Service](http://stripe.com/legal/app-developer-agreement) and [Stripe App Marketplace Terms of Service](http://stripe.com/legal/app-marketplace-agreement) for more information.\n\n**Anti-spam**\n\nDon’t send spam. Our anti-spam policy means you’re responsible for making sure all communications with users are opt-in, relevant, and compliant with all applicable email communications laws. You may not sell Stripe user contact information to any third parties.\n\n**Export controls and cryptographic functions**\n\nYour app code must abide by all relevant export control laws. In particular, your app must not contain any custom cryptographic functions. These are covered under the [International Traffic in Arms Regulations](https://www.ecfr.gov/cgi-bin/text-idx?SID=8870638858a2595a32dedceb661c482c&mc=true&tpl=/ecfrbrowse/Title22/22CIsubchapM.tpl) (ITAR), and export of these functions outside of the United States can incur serious penalties.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use built-in cryptographic functions from standard libraries.<br>*   Use properly-vetted cryptographic functions from well-known open source libraries. | *   Don’t write your own novel cryptographic function and include it in your UI Extension’s source code. |\n\n**Fraudulent activities**\n\nYour app must not engage in or promote any sort of fraudulent activities.\n\n**Restricted businesses and apps**\n\nApps that engage in activities that fall under Stripe’s [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses#restricted-businesses) and apps that offer services in licensed or regulated industries need to be reviewed to determine whether Stripe can support your use case. If we determine your app falls into one of these categories, we’ll notify you during app review and work with you to complete the review process.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Review [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses#restricted-businesses) to determine whether it applies to your business or app.<br>*   If Stripe considers your business or app a restricted business, or your app is associated with an industry where licensing is required or your business is regulated, contact [stripe-apps@stripe.com](mailto:stripe-apps@stripe.com) to begin the enhanced review process.<br>*   Ensure your business meets all regulatory requirements to operate in your jurisdiction.<br>*   Submit your app for review and work with Stripe to complete the review process. | *   Try to submit an app if your business operates in a regulated industry without the necessary licenses or approvals.<br>*   Submit an app with functionality related to a restricted business without having the necessary licenses or approvals.<br>*   Create a Stripe account to develop an app using information unrelated to your business. |\n\n**Prohibited businesses**\n\nYour company or you as a developer can’t engage in one or more types of business that are prohibited by our [Terms of Services](https://stripe.com/legal/restricted-businesses#restricted-businesses).\n\n**Sanctioned countries**\n\nYour company or you as a developer can’t be based in a country Stripe cannot engage with due to [embargo or other restrictions](https://support.stripe.com/questions/understanding-sanctions).",
    "title": "Stripe App Marketplace review requirements | Stripe Documentation",
    "description": "Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/how-stripe-apps-work",
    "markdown": "# How Stripe Apps work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what you need to know to build apps on Stripe.\n\nStripe Apps lets you embed custom user experiences directly in the Stripe Dashboard and orchestrate the Stripe API. You can build an app to:\n\n*   Create and modify Stripe data, such as customer information, orders, and invoices\n*   Sync Stripe data into other systems\n*   Add customizations to the Stripe user interface\n\nFor more examples of what you can build with Stripe Apps, see [Sample apps](https://docs.stripe.com/stripe-apps/sample-apps).\n\nThe basic components of Stripe Apps:\n\nUsing Stripe Apps, you can create custom apps for your own account, or you can make your apps available to other Stripe users through the [Stripe App Marketplace](https://docs.stripe.com/stripe-apps/distribution-options).\n\nUse this guide to learn about the three types of Stripe Apps you can build and how to use permissions to get access to the information your app needs.\n\n## Full-stack applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost Stripe Apps have two components:\n\n*   A frontend component in the Stripe Dashboard, using UI extensions\n*   A backend component that’s responsible for saving the state and performing background operations\n\n![The components of a full-stack application](https://b.stripecdn.com/docs-statics-srv/assets/stripe-apps-full-stack-app.2a8251568ced0f8fa10193d8150aad23.png)\n\nThe components of a full-stack application\n\nAuthentication between an app’s UI and its corresponding backend services works by using either [OAuth](https://docs.stripe.com/stripe-apps/pkce-oauth-flow) or a [shared secret](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend).\n\n#### Note\n\n## Backend-only applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can build a Stripe App without a UI. For example, an app might collect order data from Stripe and send that data to another service for fulfillment.\n\nThe components of a backend-only application:\n\nFor more information on what you can do with the backend of your app, see [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend).\n\n## Frontend-only applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can build an app that extends the Stripe Dashboard and doesn’t include any additional backend functionality. A Stripe app can consist solely of a UI. With UI extensions, you create a custom UI and control where and how it appears in the Stripe Dashboard.\n\n![The components of a frontend-only application](https://b.stripecdn.com/docs-statics-srv/assets/stripe-apps-frontend-only-app.f8a4611260e353f1d19028ad5efda70f.png)\n\nThe components of a frontend-only application\n\nFrontend-only applications using UI extensions are a good choice if:\n\n*   Your application doesn’t need to communicate with a backend service.\n*   Your application only needs to communicate with the Stripe API on behalf of a user signed in to the Stripe Dashboard.\n*   Your application uses an OAuth provider to authenticate users and interact with other services.\n\nFor more information, see [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work).\n\n## Application permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Stripe Apps, regardless of type, require explicit permission to access data. These permissions fall into two categories:\n\n*   Stripe permissions, which determine what Stripe objects the application can read and write\n*   Third-party permissions, which determine what other services have access to a user’s Stripe data\n\nThe [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") stores the Stripe and third-party permissions granted to an app.\n\n### Stripe permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore an app can access any Stripe data, you must grant permission for that data to the app. See a complete list of all [permissions](https://docs.stripe.com/security/permissions).\n\nPermissions apply in several ways:\n\n*   Apps can listen for [webhook events](https://docs.stripe.com/webhooks \"webhook\") on a Stripe object only if they have permission to read the object.\n*   Apps can make Stripe API calls only if that API grants permission to the application.\n*   When an app calls a Stripe API from a UI extension, both the app and the signed-in user must have permission to access the API.\n\nUI extensions call the Stripe API on behalf of the signed in user. The app can’t access data or perform actions that the signed in user can’t also do. If the signed in user has permissions that the app didn’t request, the app is still unable to read or write that data. However, if the app has permissions that the signed in user doesn’t have, the app can still perform the action, if the app has permission to do so. In this case, the backend service is responsible for checking the user’s permissions.\n\n### Third-party services![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Apps must also explicitly list the URLs for any non-Stripe services that could potentially receive Stripe data.\n\nIn UI extensions, accessible URLs are enforced by applying a Content Security Policy (CSP). This policy causes any `fetch` call to fail unless it’s explicitly listed in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\").\n\n### Granting permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") stores all permissions for an application. To grant permissions to a specific Stripe object or backend service, use the `stripe app grant` command when you upload the app. For more information, see a list of all [permissions](https://docs.stripe.com/stripe-apps/reference/permissions).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create an app](https://docs.stripe.com/stripe-apps/create-app)\n*   [Stripe App CLI reference](https://docs.stripe.com/stripe-apps/reference/cli)\n*   [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n*   [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n*   [Authentication flows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow)",
    "title": "How Stripe Apps work | Stripe Documentation",
    "description": "Learn what you need to know to build apps on Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/ios",
    "markdown": "# Stripe iOS SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build payments into your iOS mobile app.\n\nThe Stripe iOS SDK helps you build customizable payments into your iOS app. We provide powerful and customizable UI screens and elements that you can use out-of-the-box to collect your users’ payment details. We also expose the low-level APIs that enable those UIs so that you can build fully custom payments.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.35eb3fe43605b2b982353f4bdac95840.png)",
    "title": "Stripe iOS SDK | Stripe Documentation",
    "description": "Build payments into your iOS mobile app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/react-native",
    "markdown": "# Stripe React Native SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build payments into your React Native mobile app.\n\nThe Stripe React Native SDK allows you to build payments into your native Android and iOS apps using [React Native](https://reactnative.dev/). We provide powerful and customizable UI screens and elements that you can use out-of-the-box to collect your users’ payment details.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in a React Native app.](https://b.stripecdn.com/docs-statics-srv/assets/react-native-landing.ec78345ff29f805d6b789684e2f1a226.png)",
    "title": "Stripe React Native SDK | Stripe Documentation",
    "description": "Build payments into your React Native mobile app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/android",
    "markdown": "# Stripe Android SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build a payment experience in your Android mobile app.\n\nThe Stripe Android SDK allows you to quickly build a payment flow in your Android app. We provide powerful and customizable UI elements that you can use out-of-the-box to collect your users’ payment details. We also expose the low-level APIs that underpin those UIs so that you can build fully custom experiences.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in an Android app.](https://b.stripecdn.com/docs-statics-srv/assets/android-landing.0122e3791f7b50c9ce29b6b74576fd28.png)",
    "title": "Stripe Android SDK | Stripe Documentation",
    "description": "Build a payment experience in your Android mobile app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/stripejs-esmodule",
    "markdown": "# ES Module Stripe.js SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Set up the ES Module Stripe.js client-side SDK in your web application.\n\nThis introductory guide shows you how to install the [ES Module Stripe.js](https://github.com/stripe/stripe-js) client-side SDK with a script tag or package manager. The SDK wraps the global `Stripe` function provided by the Stripe.js script as an ES module. It allows you to use [Elements](https://docs.stripe.com/payments/elements), our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data.\n\n[](#web-stripejs-html)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install by script, add the [Stripe.js ES Module](https://github.com/stripe/stripe-js) as a script to the `<head>` element of your **HTML**. This allows any newly created [Stripe objects](https://docs.stripe.com/js#stripe-function) to be globally accessible in your code.\n\n### Stripe.js constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, set the [API publishable key](https://dashboard.stripe.com/test/apikeys) to allow Stripe to [tokenize](https://docs.stripe.com/api/tokens) customer information and collect sensitive payment details. For example:\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n[](#web-stripejs-esmodule)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install by package manager, install the [Stripe.js ES Module](https://github.com/stripe/stripe-js) from the [npm public registry](https://www.npmjs.com/).\n\n`npm install @stripe/stripe-js`\n\n### Stripe.js constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, import the module into a **JavaScript** file. The following function returns a `Promise` that resolves with a newly created [Stripe object](https://docs.stripe.com/js#stripe-function) after Stripe.js loads.\n\n`import {loadStripe} from '@stripe/stripe-js';  const stripe = await loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`",
    "title": "ES Module Stripe.js SDK | Stripe Documentation",
    "description": "Set up the ES Module Stripe.js client-side SDK in your web application.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/community",
    "markdown": "# Community libraries | Stripe DocumentationThe Stripe Docs logo\n\n## Browse the community libraries and available for a Stripe integration.\n\nFind some of the many community-supported UI and server-side SDKs available for Stripe listed below.",
    "title": "Community libraries | Stripe Documentation",
    "description": "Browse the community libraries and available for a Stripe integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/versioning",
    "markdown": "# Stripe versioning and support policy\n\n## Learn about Stripe's versioning and support policy.\n\n## Stripe API versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s API versioning policy is based on the release date. For example, 2023-01-15. We release a new API version together with a new version of the SDK. To understand what to expect from a new API version, see [API upgrades](https://docs.stripe.com/upgrades).\n\n## Stripe SDK versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s SDK versioning policy is based on the semantic versioning standard. For example, in version 4.3.2, 4 is the _major_, 3 is the _minor_, and 2 is the _patch_. When we release a new SDK version for new features or bug fixes, we increment one of these three version components depending on the type of change introduced.\n\n*   **Major**. We increment the _major_ version component when the version contains breaking changes that are backwards incompatible with the latest version: to add a required parameter, change a type, property, method, or parameter. For example, renaming the SDK’s exception classes.\n*   **Minor**. We increment the _minor_ version component when the version contains new features that are backwards compatible with the latest version: to add a new type, property, method, optional parameter, or supported parameter value. For example, clarifying the SDK’s metadata deletion message.\n*   **Patch**. We increment the _patch_ version component when the version contains backward-compatible bug fixes: to modify a behavior if correcting that behavior doesn’t change any documented types, properties, methods, or parameters. For example, fixing a bug where file uploads weren’t listed properly.\n\n### Stripe beta SDK versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can access certain Stripe products and features in the beta stage with beta SDKs. The versions of these beta SDKs have the `beta` or `b` suffix, for example, 5.1.0b3 in Python and 5.1.0-beta.3 in other language SDKs. Try these beta SDKs and share feedback with us before the features reach the stable phase. To learn more about how to use the beta SDKs, read the readme file in the GitHub repository of the individual language SDKs.\n\n## Stripe SDK support policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew features and bug fixes are released on the latest _major_ version of the SDK. If you’re on an older _major_ SDK version, we recommend upgrading to the latest major version to take advantage of these features and bug fixes. Older major versions of the package continue to be available for use, but won’t receive any additional updates.\n\n### Migration guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe provide migration guides to help you upgrade from older major SDK versions. You can find them in the wiki section of our SDK GitHub repositories.\n\n*   [Python SDK wiki](https://github.com/stripe/stripe-python/wiki)\n*   [.NET SDK wiki](https://github.com/stripe/stripe-dotnet/wiki)\n*   [Java SDK wiki](https://github.com/stripe/stripe-java/wiki)\n*   [Go SDK wiki](https://github.com/stripe/stripe-go/wiki)\n*   [PHP SDK wiki](https://github.com/stripe/stripe-php/wiki)\n*   [Ruby SDK wiki](https://github.com/stripe/stripe-ruby/wiki)\n*   [Node.js SDK wiki](https://github.com/stripe/stripe-node/wiki)",
    "title": "Stripe versioning and support policy | Stripe Documentation",
    "description": "Learn about Stripe's versioning and support policy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/libraries/set-version",
    "markdown": "# Set a Stripe API version\n\n## Follow these guidelines to make sure that API versions match throughout your Stripe integration.\n\nYour account has a **default API version**, which defines how you call the API, what functionality you have access to and what you’re guaranteed to get back as part of the response. Webhook event objects are based on your default API version, which might be different from the API version used by the SDK. To make sure these versions match, we recommend [registering a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) with the same [API version](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-api_version) used as the SDK. To find your version, see [View your default API version](https://docs.stripe.com/development/dashboard/request-logs#view-your-default-api-version).\n\n## Versioning basics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve covered a few fundamental concepts you need to know about API versions used in SDKs. Choose your SDK language to get started.\n\n### Setting the API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe stripe-ruby library allows you to set the API version globally or on a per-request basis. If you don’t set an API version, recent versions of stripe-ruby use the API version that was latest at the time your version of stripe-ruby was released. Versions of stripe-ruby before [v9](https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#900---2023-08-16) use your account’s default API version.\n\nTo set the API version **globally** with the SDK, assign the version to the `Stripe.api_version` property:\n\n`require 'stripe' Stripe.api_key =` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`Stripe.api_version = '2024-06-20'`\n\nOr set the version per-request:\n\n`require 'stripe' intent = Stripe::PaymentIntent.retrieve(   'pi_1DlIVK2eZvKYlo2CW4yj5l2C',   {     stripe_version: '2024-06-20',   } ) intent.capture`\n\n#### Note\n\nWhen you override the version globally or per-request, the API response objects are also returned in that version.\n\n### Updating your API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore updating [your API version](https://docs.stripe.com/development/dashboard/request-logs#view-your-default-api-version), carefully review the following resources:\n\n*   [Stripe API changelog](https://docs.stripe.com/upgrades#api-versions)\n*   [Upgrading your API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api)\n\nYou can upgrade your account’s default API version in the [Developers Dashboard](https://dashboard.stripe.com/developers). Update your code to use the latest version of the Ruby SDK and set the new API version when making your calls.",
    "title": "Set a Stripe API version | Stripe Documentation",
    "description": "Follow these guidelines to make sure that API versions match throughout your Stripe integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-js/react",
    "markdown": "# React Stripe.js reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about React components for Stripe.js and Stripe Elements.\n\nReact Stripe.js is a thin wrapper around [Stripe Elements](https://docs.stripe.com/payments/elements). It allows you to add Elements to any React app.\n\nThe [Stripe.js reference](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options) covers complete Elements customization details.\n\nYou can use Elements with any Stripe product to collect online payments. To find the right integration path for your business, [explore our docs](https://docs.stripe.com/).\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis doc assumes that you already have a basic working knowledge of [React](https://reactjs.org/) and that you have already set up a React project. If you’re new to React, we recommend that you take a look at the [Getting Started](https://react.dev/learn) guide before continuing.\n\n## Setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js).\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\n## Elements provider![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `Elements` provider allows you to use [Element components](#element-components) and access the [Stripe object](https://docs.stripe.com/js/initializing) in any nested component. Render an `Elements` provider at the root of your React app so that it is available everywhere you need it.\n\nTo use the `Elements` provider, call [loadStripe](https://github.com/stripe/stripe-js/blob/master/README.md#loadstripe) from `@stripe/stripe-js` with your publishable key. The `loadStripe` function asynchronously loads the Stripe.js script and initializes a Stripe object. Pass the returned `Promise` to `Elements`.\n\n``import {Elements} from '@stripe/react-stripe-js'; import {loadStripe} from '@stripe/stripe-js';  // Make sure to call `loadStripe` outside of a component’s render to avoid // recreating the `Stripe` object on every render. const stripePromise = loadStripe(``\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  export default function App() {   const options = {     // passing the client secret obtained from the server     clientSecret: '{{CLIENT_SECRET}}',   };    return (     <Elements stripe={stripePromise} options={options}>       <CheckoutForm />     </Elements>   ); };`\n\n| prop | description |\n| --- | --- |\n| `stripe` | required `Stripe \\| null \\| Promise<Stripe \\| null>`<br><br>A [Stripe object](https://docs.stripe.com/js/initializing) or a `Promise` resolving to a Stripe object. The easiest way to initialize a Stripe object is with the [Stripe.js wrapper module](https://github.com/stripe/stripe-js/blob/master/README.md#readme). After you set this prop, you can’t change it.<br><br>You can also pass in `null` or a `Promise` resolving to `null` if you’re performing an initial server-side render or when generating a static site. |\n| `options` | optional `Object`<br><br>Optional Elements configuration options. [See available options](https://docs.stripe.com/js/elements_object/create#stripe_elements-options). To create Payment Elements, you must include the Intent’s `clientSecret` unless [you render the element before creating the Intent](https://docs.stripe.com/payments/accept-a-payment-deferred?platform=web).<br><br>Because props are immutable, you can’t change `options` after setting it. However, you can change the appearance of an element by calling the [elements.update](https://docs.stripe.com/js/elements_object/update#elements_update-options-appearance) method. |\n\n## Element components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nElement components provide a flexible way to securely collect payment information in your React app.\n\nYou can mount individual Element components inside of your `Elements` tree. Note that you can only mount one of each type of Element in a single `<Elements>` group.\n\n`import {PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   return (     <form>       <PaymentElement />       <button>Submit</button>     </form>   ); };  export default CheckoutForm;`\n\n| prop | description |\n| --- | --- |\n| `id` | optional `string`<br><br>Passes through to the [Element’s container](https://docs.stripe.com/js/element/the_element_container). |\n| `className` | optional `string`<br><br>Passes through to the [Element’s container](https://docs.stripe.com/js/element/the_element_container). |\n| `options` | optional `Object`<br><br>An object containing Element configuration options. [See available options](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options) for the Payment Element or [available options](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options) for individual payment method Elements. |\n| `onBlur` | optional `() => void`<br><br>Triggered when the Element loses focus. |\n| `onChange` | optional `(event: Object) => void`<br><br>Triggered when data exposed by this Element is changed (for example, when there is an error).<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_change?type=paymentElement#element_on_change-handler). |\n| `onClick` | optional `(event: Object) => void`<br><br>Triggered by the `<PaymentRequestButtonElement>` when it is clicked.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_click#element_on_click-handler). |\n| `onEscape` | optional `(event: Object) => void`<br><br>Triggered when the escape key is pressed within an Element.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_escape). |\n| `onFocus` | optional `() => void`<br><br>Triggered when the Element receives focus. |\n| `onLoaderror` | optional `(event: Object) => void`<br><br>Triggered when the Element fails to load.<br><br>This event is only emitted from the `payment`, `linkAuthentication`, `address`, and `expressCheckout` Elements.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_loaderror). |\n| `onLoaderStart` | optional `(event: Object) => void`<br><br>Triggered when the [loader](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-loader) UI is mounted to the DOM and ready to be displayed.<br><br>This event is only emitted from the `payment`, `linkAuthentication`, and `address` Elements.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_loaderstart). |\n| `onReady` | optional `(element: Element) => void`<br><br>Triggered when the Element is fully rendered and can accept imperative `element.focus()` calls. Called with a reference to the underlying Element instance. |\n\n### Available Element components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many different kinds of Elements, useful for collecting different kinds of payment information. These are the available Elements today.\n\n| Component | Usage |\n| --- | --- |\n| `AddressElement` | Collects address details for 236+ regional formats. See the [Address Element](https://docs.stripe.com/elements/address-element/collect-addresses?platform=web&client=react) docs. |\n| `AfterpayClearpayMessageElement` | Displays installments messaging for Afterpay payments. |\n| `AuBankAccountElement` | Collects Australian bank account information (BSB and account number) for use with BECS Direct Debit payments. |\n| `CardCvcElement` | Collects the card‘s CVC number. |\n| `CardElement` | A flexible single-line input that collects all necessary card details. |\n| `CardExpiryElement` | Collects the card‘s expiration date. |\n| `CardNumberElement` | Collects the card number. |\n| `ExpressCheckoutElement` | Allows you to accept card or wallet payments through one or more payment buttons, including Apple Pay, Google Pay, Link, or PayPal. See the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) docs. |\n| `FpxBankElement` | The customer’s bank, for use with FPX payments. |\n| `IbanElement` | The International Bank Account Number (IBAN). Available for SEPA countries. |\n| `IdealBankElement` | The customer’s bank, for use with iDEAL payments. |\n| `LinkAuthenticationElement` | Collects email addresses and allows users to log in to Link. See the [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element) docs. |\n| `PaymentElement` | Collects payment details for [25+ payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) from around the globe. See the [Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements&client=react) docs. |\n| `PaymentRequestButtonElement` | An all-in-one checkout button backed by either Apple Pay or the Payment Request API. See the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button) docs. |\n\n## useElements hook![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### `useElements(): Elements | null`\n\nTo safely pass the payment information collected by the Payment Element to the Stripe API, access the `Elements` instance so that you can use it with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment). If you use the [React Hooks API](https://react.dev/reference/react), then `useElements` is the recommended way to access a mounted Element. If you need to access an Element from a class component, use [ElementsConsumer](#elements-consumer) instead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `useElements` will return `null`.\n\n``import {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    return (     <form onSubmit={handleSubmit}>       <PaymentElement />       <button disabled={!stripe}>Submit</button>     </form>   ) };  export default CheckoutForm;``\n\n## useStripe hook![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### `useStripe(): Stripe | null`\n\nThe `useStripe` [hook](https://react.dev/reference/react) returns a reference to the [Stripe](https://docs.stripe.com/js/initializing) instance passed to the [Elements](#elements-provider) provider. If you need to access the Stripe object from a class component, use [ElementsConsumer](#elements-consumer) instead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `useStripe` will return `null`.\n\n``import {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    return (     <form onSubmit={handleSubmit}>       <PaymentElement />       <button disabled={!stripe}>Submit</button>     </form>   ) };  export default CheckoutForm;``\n\n## ElementsConsumer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo safely pass the payment information collected by the Payment Element to the Stripe API, access the `Elements` instance so that you can use it with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment). If you need to access the Stripe object or an Element from a class component, then `ElementsConsumer` provides an alternative to the [useElements](#useElements-hook) and [useStripe](#useStripe-hook) hooks.\n\n``import {ElementsConsumer, PaymentElement} from '@stripe/react-stripe-js';  class CheckoutForm extends React.Component {   handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      const {stripe, elements} = this.props;      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    render() {     return (       <form onSubmit={this.handleSubmit}>         <PaymentElement />         <button disabled={!this.props.stripe}>Submit</button>       </form>     );   } }  export default function InjectedCheckoutForm() {   return (     <ElementsConsumer>       {({stripe, elements}) => (         <CheckoutForm stripe={stripe} elements={elements} />       )}     </ElementsConsumer>   ) }``\n\n| prop | description |\n| --- | --- |\n| `children` | required `({elements, stripe}) => ReactNode`<br><br>This component takes a [function as child](https://reactjs.org/docs/render-props.html#using-props-other-than-render). The function that you provide will be called with the [Elements object](https://docs.stripe.com/js/elements_object) that is managing your Element components and the [Stripe object](https://docs.stripe.com/js/initializing) that you passed to [<Elements>](#elements-provider).<br><br>Note that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `stripe` and `elements` will be `null`. |\n\n## Customization and styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach element is mounted in an `iframe`, which means that Elements probably won’t work with any existing styling and component frameworks that you have. Despite this, you can still configure Elements to match the design of your site. Customizing Elements consists of [responding to events](https://docs.stripe.com/js/element/events) and configuring Elements with the [appearance](https://docs.stripe.com/elements/appearance-api) option. The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet.",
    "title": "React Stripe.js reference | Stripe Documentation",
    "description": "Learn about React components for Stripe.js and Stripe Elements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/mobile/ios/sdk-23-migration",
    "markdown": "# Migrating to Stripe iOS SDK 23\n\n## Migrate your Swift and Objective-C apps to our modular Swift SDK.\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is now a set of Swift modules, enabling smaller app bundles and better support for Swift APIs.\n\nThis move required changes to our public interface. Xcode will offer suggestions to automatically update most of your code, but you’ll also need to make a few changes yourself.\n\n### Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SDK now requires Xcode 13.2.1 or later. The minimum deployment target is iOS 13.\n\n### PaymentSheet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use PaymentSheet, you must explicitly import the `StripePaymentSheet` module.\n\n`import StripePaymentSheet`\n\n### Modules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SDK is now split into separate modules. You can reduce your app’s bundle size by including only the modules you need.\n\n### Module installation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Card field![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSDK 23 replaces `STPPaymentCardTextField`’s `.cardParams` parameter with `.paymentMethodParams`, making it easier to collect the customer’s postal code.\n\nIn most situations, you can now pass the `cardTextField.paymentMethodParams` directly to the Stripe API.\n\n`var cardTextField: STPPaymentCardTextField // Collect card details let paymentIntentParams = STPPaymentIntentParams(clientSecret: paymentIntentClientSecret) let cardParams = cardTextField.cardParams let paymentMethodParams = STPPaymentMethodParams(card: cardParams, billingDetails: nil, metadata: nil) paymentIntentParams.paymentMethodParams = paymentMethodParams`\n\n`var cardTextField: STPPaymentCardTextField // Collect card details let paymentIntentParams = STPPaymentIntentParams(clientSecret: paymentIntentClientSecret) paymentIntentParams.paymentMethodParams = cardTextField.paymentMethodParams`\n\n#### Advanced card field usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo access the STPPaymentMethodCardParams directly, use `.paymentMethodParams.card`.\n\n`var cardTextField: STPPaymentCardTextField let cardParams = cardTextField.cardParams`\n\n`var cardTextField: STPPaymentCardTextField // STPPaymentCardTextField will never return a nil .card let cardParams = cardTextField.paymentMethodParams.card!`\n\n`cardTextField.paymentMethodParams` returns a copy. Never set `cardTextField.paymentMethodParams.card` directly. If you need to set the card information, set `cardTextField.paymentMethodParams` to a new instance of `STPPaymentMethodParams`.\n\n`var cardTextField: STPPaymentCardTextField cardTextField.cardParams = myCardParams`\n\n`var cardTextField: STPPaymentCardTextField let paymentMethodParams = STPPaymentMethodParams(card: myCardParams, billingDetails: nil, metadata: nil) cardTextField.paymentMethodParams = paymentMethodParams`",
    "title": "Migrating to Stripe iOS SDK 23 | Stripe Documentation",
    "description": "Migrate your Swift and Objective-C apps to our modular Swift SDK.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/keys-best-practices",
    "markdown": "# Best practices for managing secret API keys\n\n## Learn how to manage secret API keys and handle key leaks.\n\nSecret API keys are a form of account credentials, like a username and password. If bad actors obtain a secret key, they can use it to harm your business and other parties in the Stripe ecosystem.\n\nStripe users own the responsibility of keeping secret API keys safe. Here are some best practices for how to do that, including by using Stripe-offered security features.\n\n## Protecting against key leakage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Use secure key management systems (KMS) to store secret keys.** When you create a secret live mode key from the Stripe Dashboard, it is only revealed once. Immediately copy the key to a KMS, which is designed to handle sensitive information with encryption and access controls. Make sure you don’t leave a copy of the key in the local file.\n*   **Grant access only to those who need it.** Define a clear policy on which users have permission to create, update or read keys. Limit the access only to those who need it. Audit the access periodically to avoid excess privilege on keys.\n*   **Don’t share secret keys using insecure means.** Don’t share keys in emails, chat messages, or customer support messages. Stripe never asks you for your secret API key.\n*   **Don’t store keys in source code repositories (such as GitHub).** Bad actors might scan public source repositories for leaked keys. Even if the source repository is private, it could be shared with team members on their development environments.\n*   **Don’t embed secret keys in applications.** Bad actors can exploit secret keys by matching a certain string pattern in the application. Avoid embedding keys in applications such as client tools, SDKs, and mobile apps.\n*   **Exercise your ability to roll your API Keys.** Defining and exercising a process for rolling keys helps you understand where your keys are being used and prepares your organization in the event your API key is leaked. By having key rolling processes in place you’ll be prepared to respond to a key leak event with a minimum of impact on your business.\n*   **Audit API request logs to monitor suspicious activities.** We recommend that you regularly audit or monitor API [request logs](https://docs.stripe.com/development/dashboard/request-logs) to proactively identify misused API keys. Make sure your developers aren’t using live mode keys when a test mode key is appropriate. Learn more at [test mode versus live mode](https://docs.stripe.com/keys#test-live-modes).\n*   **Regular training and updating documentation.** Maintain up-to-date documentation about how to handle secret API keys within your organization and host regular training sessions to make sure best practices are followed.\n\n## Adopt security features to protect your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **[Use restricted API keys](https://docs.stripe.com/keys#limit-access).** Restricted API keys can customize read or write access to specific API resources. With restricted keys, especially when giving access to third parties, you can allow only the minimum access to resources required and limit the risk of keys.\n*   **[Limit the IP addresses that can send API requests](https://docs.stripe.com/keys#ip-allowlist).** You can configure your API key so that only requests from designated IP addresses are allowed. We recommended this if your service has stable egress IP ranges and a change management process for updating the allowlist when those egress ranges change.\n\n## Handle leaked secret API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you identified a secret key leak, such as if a key is accidentally published to GitHub， immediately roll the key from Stripe Dashboard and replace your integration with the new key. If you detected abnormal behaviors without confirming that the API key is leaked, we recommended that you roll the API keys proactively while investigating the root cause in parallel.\n\nIf Stripe detects that a live mode secret API key has been exposed, we will immediately notify you and request that you roll the key. It’s crucial for businesses to act promptly to reduce potential damages and financial losses caused by unauthorized use of the leaked key. Depending on the imposed risk and activity on the account, we might decide to roll the key on your behalf. In this case you will receive notifications about any action taken.\n\nStripe doesn’t guarantee that we will detect all leaked keys. You’re responsible for following the best practices to prevent potential key leaks and ensure your integration with Stripe is secure.",
    "title": "Best practices for managing secret API keys | Stripe Documentation",
    "description": "Learn how to manage secret API keys and handle key leaks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/metadata",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Metadata\n\n## Learn how to use metadata to save additional information.\n\n[Metadata](https://docs.stripe.com/api/metadata) is an attribute on certain Stripe objects that lets you store more information, structured as key-value pairs, to these objects for your own use and reference. For example, you can store your user’s unique identifier from your system on a [Stripe Customer](https://docs.stripe.com/api/customers) object.\n\n## Configuration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add 50 total key-value pairs within these data limits:\n\n*   **key**: 40 character limit. Square brackets (`[` `]`) can’t be included in keys.\n*   **value**: 500 character limit.\n\nIf your system requires more space than this, store your data in your external database and use a key-value pair to store the external object’s `ID` in `metadata`.\n\nUnless you use metadata with [Radar](https://docs.stripe.com/radar), Stripe doesn’t use metadata—for example, to authorize or decline a charge. Additionally, metadata isn’t visible to your customers unless you choose to show it.\n\n#### Security tip\n\nNever store sensitive information, such as bank account information or credit card details, to metadata.\n\n### Requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe only returns metadata when you use a [secret key](https://docs.stripe.com/keys#obtain-api-keys) in your requests. We redact metadata from objects in response to publishable key requests, such as Stripe.js or Mobile SDKs client-side requests.\n\nUse the `metadata` attribute in an API call to pass and store information in key-value pairs.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\  -d \"metadata[cms_id]\"=6573`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\"   }   ... }`\n\nReplace values for existing keys and add new key-value pairs in an API call. For example, you can update a [Customer](https://docs.stripe.com/api/customers) object with an existing key-value pair of `\"loyalty_program\": \"no\"` to`\"loyalty_program\": \"yes\"`. You can also add new metadata, such as the `\"loyalty_member_id\": \"12345678\"` key-value pair in the example below, to the existing metadata.\n\n#### Note\n\nThis parameter uses a merge mechanism, which allows you to add new key-value pairs to an object in an update call without affecting any existing metadata. For example, if a Customer object has `key1` and `key2`, and you update it to add `key3`, the updated object contains all three keys.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"metadata[loyalty_program]\"=yes \\  -d \"metadata[loyalty_member_id]\"=12345678`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\",     \"loyalty_program\": \"no\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\",     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\nDelete a single key or an entire set of keys using the API.\n\n### Delete a single key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPass in the key with an empty string as the value to remove the key from the metadata.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"metadata[loyalty_program]\"=yes \\  -d \"metadata[loyalty_member_id]\"=`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",   }   ... }`\n\n### Delete all keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPass an empty object as the value for the `metadata` attribute to delete all of the keys at once.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc -d \"metadata\"=\"\"`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {}   ... }`\n\nAn object’s metadata doesn’t automatically copy to related objects. To view an object’s metadata, you must inspect that object. To retrieve metadata from a related object, build custom logic to find and inspect the related object. To explicitly copy metadata from one object to another, you need to build your own flow.\n\n### Exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn certain cases, we copy metadata from one object to another for backwards compatibility and other unique scenarios.\n\n| Object mapping | Description |\n| --- | --- |\n| [Payment Intent](https://docs.stripe.com/api/payment_intents) to [Charge](https://docs.stripe.com/api/charges) | When a Payment Intent creates a Charge, the metadata copies to the Charge in a one-time snapshot. Updates to the Payment Intent’s metadata won’t apply to the Charge. |\n| [Payment Link](https://docs.stripe.com/api/payment_links/payment_links) to [Checkout Session](https://docs.stripe.com/api/checkout/sessions) | When a Payment Link creates a Checkout Session, the metadata copies to the Checkout Session in a one-time snapshot. Updates to the Payment Link’s metadata won’t apply to the Checkout Session. |\n| [Subscription](https://docs.stripe.com/api/subscriptions) to [Invoice](https://docs.stripe.com/api/invoices) | When a Subscription creates an Invoice, the metadata copies to the Invoice object’s [subscription\\_details.metadata](https://docs.stripe.com/api/invoices/object#invoice_object-subscription_details-metadata) attribute in a one-time snapshot. Updates to the subscription’s metadata won’t apply to the Invoice. |\n| [Subscription](https://docs.stripe.com/api/subscriptions) to [Invoice Line Item](https://docs.stripe.com/api/invoices/line_item) | When an Invoice Line Item’s [type](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) is set to `subscription`, it presents the subscription’s current metadata. |\n\n## Set metadata indirectly ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome endpoints accept a `metadata` parameter nested inside of another parameter. You can use these parameters when you create an object to set metadata on an underlying object. For example, you can use `payment_intent_data.metadata` when you create a Checkout Session to provide and set metadata on the underlying Payment Intent the session creates.\n\n## Events and webhook endpoints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe sends an [Event](https://docs.stripe.com/api/events) to your [webhook endpoint](https://docs.stripe.com/webhooks), it includes the corresponding object and any metadata the object contains. This allows your webhook handler to receive any metadata that you set on Stripe objects and pass it to downstream processes, such as order fulfillment.\n\nFor example, to include a cart ID when a customer makes a purchase using a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), provide it as metadata when you create the Checkout Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d mode=payment \\  -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\  -d \"line_items[0][quantity]\"=1 \\  -d \"metadata[cart_id]\"=6943`\n\nWhen the customer completes the checkout process, we send a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) Event containing the Checkout Session object’s metadata to your webhook endpoint. You must configure your webhook to listen for that Event so you can access the metadata and use it when processing data.\n\n`{   \"id\": \"evt_1P8pqUAgEBCHsfP6JfNctbLv\",   \"object\": \"event\",   \"api_version\": \"2022-11-15\",   \"created\": 1713903702,   \"data\": {     \"object\": {       \"id\": \"cs_test_a1aDQuoXLoddIOV9iOvZRgKAtPoRIfFkYHBWxF9AQAPlGG3STB1ndqqaUw\",       \"object\": \"checkout.session\",       ...       \"metadata\": {         \"cart_id\": \"6943\"       },`\n\nYou can search for existing metadata on supported objects by using specific formatting. This includes searching for records with a specific value for a metadata field or checking if a metadata key is present on an object. Learn more about [searching for metadata](https://docs.stripe.com/search#metadata).\n\n## Prevent fraud with metadata and Radar ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse metadata with Radar to create custom rules that help prevent fraud. Learn more about [Radar metadata attributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes).",
    "title": "Metadata | Stripe Documentation",
    "description": "Learn how to use metadata to save additional information.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/rate-limits",
    "markdown": "# Rate limits | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about API rate limits and how to work with them.\n\nThe Stripe API uses a number of safeguards against bursts of incoming traffic to help maximize its stability. If you send many requests in quick succession, you might see error responses with status code `429`.\n\n## API limiters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe have several limiters in the API, including a rate limiter and a concurrency limiter.\n\nTreat the limits as maximums, and don’t generate unnecessary load. To prevent abuse, we might reduce the limits.\n\nFor advice on handling 429 errors, see [Handling limiting gracefully](#handling-limiting-gracefully). If you suddenly see a rising number of rate-limited requests, [contact Stripe Support](https://support.stripe.com/).\n\nYou can request a limit increase to enable a high-traffic application by [contacting Stripe Support](https://support.stripe.com/). If you’re requesting a large increase, contact us at least 6 weeks in advance.\n\n### Rate limiter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe basic rate limiter restricts the number of API requests per second as follows:\n\n*   **Live mode**: 100 read operations and 100 write operations\n*   **Test mode**: 25 read operations and 25 write operations\n\nCalls to certain resources have stricter limits, and also count against the basic limits. These stricter limits apply separately to live mode and test mode.\n\n*   [Files API](https://docs.stripe.com/api/files): 20 read operations and 20 write operations per second\n*   [Search API](https://docs.stripe.com/search#rate-limits): 20 read operations per second\n\nCalls to the [Meter events endpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#rate-limits) in live mode are subject to a separate rate limit, and don’t count against the basic limits. The limit is 1000 calls per second per Stripe account. In test mode, calls to the Meter events endpoint count toward the basic limit. For Connect platforms, calls on a connected account to the Meter events endpoint also count toward the basic limit.\n\n### Concurrency limiter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe concurrency limiter restricts the number of concurrent active requests. Problems with this limiter are less common than with the rate limiter, but they likely indicate the existence of resource-intensive, long-lived requests.\n\nCalls to the [Meter events endpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#rate-limits) are limited to one concurrent call per customer per meter.\n\n## Common causes and mitigations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRate limiting can occur under a variety of conditions, but it’s most common in these scenarios:\n\n*   Running **a large volume of closely-spaced requests** can lead to rate limiting. Often this is part of an analytical or migration operation. When engaging in these activities, you should try to control the request rate on the client side (see [Handling limiting gracefully](#handling-limiting-gracefully)).\n*   Issuing **many long-lived requests** can trigger limiting. Requests vary in the amount of Stripe’s server resources they use, and more resource-intensive requests tend to take longer and run the risk of causing new requests to be shed by the concurrency limiter. Resource requirements vary widely, but list requests and requests that include expansions generally use more resources and take longer to run. We suggest profiling the duration of Stripe API requests and watching for timeouts to try and spot those that are unexpectedly slow.\n*   A sudden increase in charge volume like a **flash sale** might result in rate limiting. We try to set our rates high enough that legitimate payment traffic never exceeds the limits, but if you suspect that an upcoming event might push you over the limits listed above, [contact Stripe Support](https://support.stripe.com/).\n\n## Handling limiting gracefully![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA basic technique for integrations to gracefully handle limiting is to watch for `429` status codes and build in a retry mechanism. The retry mechanism should follow an exponential backoff schedule to reduce request volume when necessary. We’d also recommend building some randomness into the backoff schedule to avoid a [thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\nYou can only optimize individual requests to a limited degree, so an even more sophisticated approach would be to control traffic to Stripe at a global level, and throttle it back if you detect substantial rate limiting. A common technique for controlling rate is to implement something like a [token bucket rate limiting algorithm](https://en.wikipedia.org/wiki/Token_bucket) on the client-side. Ready-made and mature implementations for token bucket are available in almost any programming language.\n\n## Object lock timeouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntegrations may encounter errors with HTTP status `429`, code `lock_timeout`, and this message:\n\n> This object cannot be accessed right now because another API request or Stripe process currently accessing it. If you see this error intermittently, retry the request. If you see this error frequently and are making multiple concurrent requests to a single object, make your requests serially or at a lower rate.\n\nThe Stripe API locks objects on some operations so that concurrent workloads don’t interfere and produce an inconsistent result. The error above is caused by a request trying to acquire a lock that’s already held elsewhere, and timing out after it couldn’t be acquired in time.\n\nLock timeouts have a different cause than rate limiting, but their mitigations are similar. As with rate limiting errors, we recommend retrying on an exponential backoff schedule (see [Handling limiting gracefully](#handling-limiting-gracefully)). But unlike rate limiting errors, the automatic retry mechanisms built into Stripe’s [client libraries](https://docs.stripe.com/libraries) retry `429`s caused by lock timeouts:\n\n`Stripe.max_network_retries = 2`\n\nLock contention is caused by concurrent access on related objects. Integrations can vastly reduce this by making sure that mutations on the same object are queued up and run sequentially instead. Concurrent operations against the API are still okay, but try to make sure simultaneous operations operate only on unique objects. It’s also possible to see lock contention caused by a conflict with an internal Stripe background process—this should be rare, but because it’s beyond user control, we recommend that all integrations are able to retry requests.\n\n## Load testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt’s common for users to prepare for a major sales event by load testing their systems, with the Stripe API running in test mode as part of it. We generally discourage this practice because API limits are lower in test mode, so the load test is likely to hit limits that it wouldn’t hit in production. Test mode is also not a perfect stand-in for live API calls, and that can be somewhat misleading. For example, creating a charge in live mode sends a request to a payment gateway and that request is mocked in test mode, resulting in significantly different latency profiles.\n\nAs an alternative, we recommend building integrations so that they have a configurable system for mocking out requests to the Stripe API, which you can enable for load tests. For realistic results, they should simulate latency by sleeping for a time that you determine by sampling the durations of real live mode Stripe API calls, as seen from the perspective of the integration.\n\n## API read request allocations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides access to its read (GET) API requests to facilitate reasonable lookup activity related to payment integrations. To maximize quality of service for all users, Stripe provides the following allocations for read requests based on transaction count:\n\n*   Read API requests shouldn’t exceed an average ratio of **500 requests per transaction** for an account. For example, if an account processes 100 transactions in a 30-day period, they shouldn’t exceed 50,000 read API requests during that same period.\n*   When using Connect, a platform and its connected accounts have distinct read API allowances:\n    *   Each connected account has their own allocation for requests they initiate (500 requests per transaction).\n    *   Connect platforms use a separate allocation to make read requests on behalf of their connected accounts using either their secret API key or OAuth access tokens. This allocation is also 500 requests per transaction based on the aggregate transaction count across its connected accounts.\n*   Ratios are measured on a rolling 30-day basis.\n*   Every account, regardless of transaction count, has a minimum allocation of 10,000 read requests per month.\n*   Write API requests have no allocation limit.\n\nCalls to the following API endpoints are excluded from the above allocation limits:\n\n*   [Data products](https://docs.stripe.com/stripe-data)\n*   [Reporting products](https://docs.stripe.com/stripe-reports)\n*   [Tax products](https://docs.stripe.com/tax)\n\nTo reduce your API request volume, consider using [Stripe Data Pipeline](https://stripe.com/data-pipeline) for a complete export of API data to your local database or provider.\n\n#### Filter requests to limit paginated calls\n\nSome list endpoints return [multiple pages](https://docs.stripe.com/api/pagination) of results and might require multiple requests to return the full set of API objects for a list operation. Apply filters when possible to narrow your list results.",
    "title": "Rate limits | Stripe Documentation",
    "description": "Learn about API rate limits and how to work with them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/automated-testing",
    "markdown": "# Automated testing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use automated testing in your Stripe integration.\n\nAutomated testing is a common part of application development, both for server and client-side code. Frontend interfaces, like [Stripe Checkout](https://docs.stripe.com/payments/checkout) or the [Payment Element](https://docs.stripe.com/payments/payment-element), have security measures in place that prevent automated testing, and Stripe APIs are rate limited. However, you can simulate the output of our interfaces and API requests using mock data to test your application behavior and its ability to [handle errors](https://docs.stripe.com/error-handling).\n\n## Client side testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to test your application’s ability to recover from errors such as transaction declines when using the Payment Element, you can return a simulated [error object](https://docs.stripe.com/api/errors) by hard-coding error objects in your test code, or creating an API service that returns mock errors in an HTTP response. The error object represents what would be returned by the [confirmPayment function](https://docs.stripe.com/js/payment_intents/confirm_payment) when a card is declined. See the following section to learn how you can generate a simulated error object.\n\n### Generating an error object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, use a Stripe UI element such as the [Payment Element](https://docs.stripe.com/js/element/payment_element) manually to produce an error object by confirming a test mode Payment Intent using one of the [test card numbers](https://docs.stripe.com/testing#declined-payments) for declined payments. Log the error during the confirmation process as shown below.\n\n`const { error } = await stripe.confirmPayment({   elements,   confirmParams: {     return_url: '[https://example.com](https://example.com/)'   }, }) ; if (error) {   console.log(error) }`\n\nThis produces an error object logged to the browser console that resembles the one shown below. The specifics for properties such as `error_code` depend on the card used and the type of error it generates.\n\n`{   \"charge\": \"{{CHARGE_ID}}\",   \"code\": \"card_declined\",   \"decline_code\": \"generic_decline\",   \"doc_url\": \"https://docs.stripe.com/error-codes#card-declined\",   \"message\": \"Your card has been declined.\",   \"payment_intent\": {\"id\": \"{{PAYMENT_INTENT_ID}}\", …},   \"payment_method\": {\"id\": \"{{PAYMENT_METHOD_ID}}\", …},   \"request_log_url\": \"https://dashboard.stripe.com/test/logs/req_xxxxxxx\",   \"type\": \"card_error\" }`\n\nModify your tests to return this error object instead of calling Stripe.js functions and the Stripe APIs. You can use different [test cards](https://docs.stripe.com/testing#declined-payments) to generate errors with different error codes to make sure your application properly handles each type of error.\n\n## Server side testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the same approach when testing server-side API calls. You can generate Stripe API responses manually for various errors and mock the response returned in backend automated testing.\n\nFor example, to write a test to validate that your application can correctly handle an off-session payment requiring 3DS, you can generate the response by creating a Payment Intent with the Payment Method `pm_card_authenticationRequired` and confirm set to `true`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2099 \\  -d currency=usd \\  -d payment_method=pm_card_authenticationRequired \\  -d confirm=true \\  -d off_session=true`\n\nThis generates a Payment Intent with a status of `requires_confirmation`, and other properties associated with [3DS Authentication](https://docs.stripe.com/payments/3d-secure) like `next_action`.\n\n`{   \"id\": \"{{PAYMENT_INTENT_ID}}\",   \"object\": \"payment_intent\",   ... \t\"next_action\": {         \"type\": \"use_stripe_sdk\",     ...   },   ...   \"status\": \"requires_confirmation\",   ... }`\n\nGenerating PaymentIntent objects that reflect different stages of the [Payment lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle) allows you to test your application’s behavior as the PaymentIntent transitions through various states. Use this approach in your automated testing to make sure your integration can successfully respond to different outcomes, such as requesting that the customer comes back on-session to authenticate a payment that requires a next action.\n\n#### When to use this approach\n\nThe above examples all reference testing the behavior of your application and are suitable to use in a continuous integration test suite. When you need to perform tests to validate the response of the Stripe API, making requests to the API in test mode is an acceptable approach. You can also use Stripe API requests to periodically validate that Stripe API responses haven’t changed—but you should perform these tests infrequently to avoid [rate limits](https://docs.stripe.com/rate-limits).",
    "title": "Automated testing | Stripe Documentation",
    "description": "Learn how to use automated testing in your Stripe integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/ips",
    "markdown": "# Domains and IP addresses | Stripe DocumentationThe Stripe Docs logo\n\n## Ensure your integration is always communicating with Stripe.\n\nYour integration must be able to reach any of Stripe’s fully qualified [domain names](#stripe-domains) for it to function properly. Depending on how your integration operates, you may need add them to an allowlist.\n\nTo help your integration operate securely, it must also verify that it’s communicating with **api.stripe.com** through one of our listed [IP addresses](#ip-addresses).\n\nIf your integration also receives [webhooks](https://docs.stripe.com/webhooks) from us, make sure these events originate from a Stripe [webhook IP address](#webhook-notifications).\n\n## Stripe domains![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses the following fully qualified domain names to interact with your integration:\n\n`a.stripecdn.com api.stripe.com atlas.stripe.com auth.stripe.com b.stripecdn.com billing.stripe.com buy.stripe.com c.stripecdn.com checkout.stripe.com climate.stripe.com connect.stripe.com dashboard.stripe.com express.stripe.com files.stripe.com hooks.stripe.com invoice.stripe.com invoicedata.stripe.com js.stripe.com m.stripe.com m.stripe.network manage.stripe.com pay.stripe.com payments.stripe.com q.stripe.com qr.stripe.com r.stripe.com verify.stripe.com stripe.com terminal.stripe.com uploads.stripe.com`\n\n## Stripe Terminal domains![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Stripe Terminal](https://docs.stripe.com/terminal), Stripe uses the following fully qualified domain names to interact with your integration:\n\n`api.emms.bbpos.com armada.stripe.com gator.stripe.com *.terminal-events.stripe.com`\n\nStripe Terminal uses the following fully qualified domain names to sync the device date over NTP:\n\n`pool.ntp.org time.android.com`\n\nStripe Terminal uses the following partially qualified domain name to interact with your integration:\n\n`*.[random-string].device.stripe-terminal-local-reader.net`\n\n## IP addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe full list of IP addresses that **api.stripe.com** may resolve to is:\n\n`13.112.224.240 13.115.13.148 13.210.129.177 13.210.176.167 13.228.126.182 13.228.224.121 13.230.11.13 13.230.90.110 13.55.153.188 13.55.5.15 13.56.126.253 13.56.173.200 13.56.173.232 13.57.108.134 13.57.155.157 13.57.156.206 13.57.157.116 13.57.90.254 13.57.98.27 18.194.147.12 18.195.120.229 18.195.125.165 34.200.27.109 34.200.47.89 34.202.153.183 34.204.109.15 34.213.149.138 34.214.229.69 34.223.201.215 34.237.201.68 34.237.253.141 34.238.187.115 34.239.14.72 34.240.123.193 34.241.202.139 34.241.54.72 34.241.59.225 34.250.29.31 34.250.89.120 35.156.131.6 35.156.194.238 35.157.227.67 35.158.254.198 35.163.82.19 35.164.105.206 35.164.124.216 50.16.2.231 50.18.212.157 50.18.212.223 50.18.219.232 52.1.23.197 52.196.53.105 52.196.95.231 52.204.6.233 52.205.132.193 52.211.198.11 52.212.99.37 52.213.35.125 52.22.83.139 52.220.44.249 52.25.214.31 52.26.11.205 52.26.132.102 52.26.14.11 52.36.167.221 52.53.133.6 52.54.150.82 52.57.221.37 52.59.173.230 52.62.14.35 52.62.203.73 52.63.106.9 52.63.119.77 52.65.161.237 52.73.161.98 52.74.114.251 52.74.98.83 52.76.14.176 52.76.156.251 52.76.174.156 52.77.80.43 52.8.19.58 52.8.8.189 54.149.153.72 54.152.36.104 54.183.95.195 54.187.182.230 54.187.199.38 54.187.208.163 54.238.140.239 54.65.115.204 54.65.97.98 54.67.48.128 54.67.52.245 54.68.165.206 54.68.183.151 107.23.48.182 107.23.48.232 198.137.150.21 198.137.150.22 198.137.150.23 198.137.150.24 198.137.150.25 198.137.150.26 198.137.150.27 198.137.150.28 198.137.150.101 198.137.150.102 198.137.150.103 198.137.150.104 198.137.150.105 198.137.150.106 198.137.150.107 198.137.150.108 198.137.150.171 198.137.150.172 198.137.150.173 198.137.150.174 198.137.150.175 198.137.150.176 198.137.150.177 198.137.150.178 198.137.150.221 198.137.150.222 198.137.150.223 198.137.150.224 198.137.150.225 198.137.150.226 198.137.150.227 198.137.150.228 198.202.176.21 198.202.176.22 198.202.176.23 198.202.176.24 198.202.176.25 198.202.176.26 198.202.176.27 198.202.176.28 198.202.176.101 198.202.176.102 198.202.176.103 198.202.176.104 198.202.176.105 198.202.176.106 198.202.176.107 198.202.176.108 198.202.176.171 198.202.176.172 198.202.176.173 198.202.176.174 198.202.176.175 198.202.176.176 198.202.176.177 198.202.176.178 198.202.176.221 198.202.176.222 198.202.176.223 198.202.176.224 198.202.176.225 198.202.176.226 198.202.176.227 198.202.176.228`\n\nThe full list of IP addresses that **files.stripe.com**, **armada.stripe.com**, and **gator.stripe.com** may resolve to is:\n\n`3.94.14.82 3.104.99.60 3.114.81.222 3.114.158.108 3.224.33.77 13.113.237.213 13.115.27.220 13.228.40.76 13.236.164.101 18.136.179.41 18.138.166.37 18.141.119.41 18.180.10.245 23.22.133.111 34.233.255.214 34.247.101.32 35.72.84.177 44.235.152.108 44.236.89.158 44.240.26.72 50.19.26.15 52.64.98.19 52.64.208.186 52.210.46.219 54.66.89.9 54.151.226.211 54.163.195.10 54.169.250.228 54.170.183.1 54.187.175.68 54.191.201.88 54.194.97.239 54.203.175.79 54.206.239.65 54.228.85.11 176.34.78.115 198.137.150.0/24 198.202.176.0/24`\n\n#### Note\n\nAlways use the **api.stripe.com** DNS name to contact our API—never an IP address.\n\n## Webhook notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe full list of IP addresses that webhook notifications may come from is:\n\n`3.18.12.63 3.130.192.231 13.235.14.237 13.235.122.149 18.211.135.69 35.154.171.200 52.15.183.38 54.88.130.119 54.88.130.237 54.187.174.169 54.187.205.235 54.187.216.72`\n\n## Downloading IP address lists![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a convenience, these IP lists are available in other formats for import into `iptables` or similar tools:\n\n*   [https://stripe.com/files/ips/ips\\_api.txt](https://stripe.com/files/ips/ips_api.txt)\n*   [https://stripe.com/files/ips/ips\\_api.json](https://stripe.com/files/ips/ips_api.json)\n*   [https://stripe.com/files/ips/ips\\_armada\\_gator.txt](https://stripe.com/files/ips/ips_armada_gator.txt)\n*   [https://stripe.com/files/ips/ips\\_armada\\_gator.json](https://stripe.com/files/ips/ips_armada_gator.json)\n*   [https://stripe.com/files/ips/ips\\_webhooks.txt](https://stripe.com/files/ips/ips_webhooks.txt)\n*   [https://stripe.com/files/ips/ips\\_webhooks.json](https://stripe.com/files/ips/ips_webhooks.json)",
    "title": "Domains and IP addresses | Stripe Documentation",
    "description": "Ensure your integration is always communicating with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/search",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Search\n\n## Look up objects in your Stripe data.\n\nSome top level API resources support retrieval with search API methods. You can use the search APIs to retrieve your Stripe objects in a flexible manner. Using search is a faster alternative to [paginating](https://docs.stripe.com/api/pagination) through all resources. To create a search query, review the [Search query language](https://docs.stripe.com/search#search-query-language) and reference the query fields of the resource:\n\n*   [Query fields for charges](https://docs.stripe.com/search#query-fields-for-charges)\n*   [Query fields for customers](https://docs.stripe.com/search#query-fields-for-customers)\n*   [Query fields for invoices](https://docs.stripe.com/search#query-fields-for-invoices)\n*   [Query fields for PaymentIntents](https://docs.stripe.com/search#query-fields-for-payment-intents)\n*   [Query fields for prices](https://docs.stripe.com/search#query-fields-for-prices)\n*   [Query fields for products](https://docs.stripe.com/search#query-fields-for-products)\n*   [Query fields for subscriptions](https://docs.stripe.com/search#query-fields-for-subscriptions)\n\n## Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are some examples of what you can do with the [Search charges API](https://docs.stripe.com/api/charges/search) and [Search PaymentIntents API](https://docs.stripe.com/api/payment_intents/search):\n\n### Charges metadata search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching a custom metadata value.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"metadata['key']:'value'\"`\n\n### Charges last4 search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching the last 4 digits of the card used for the payment.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"payment_method_details.card.last4:4242\"`\n\n### Customers email search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up customers matching an email.\n\n`curl -G https://api.stripe.com/v1/customers/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"email:'sally@rocketrides.io'\"`\n\n### Negation filter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up PaymentIntents not in the USD currency.\n\n`curl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"-currency:'usd'\"`\n\n### Numeric filter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFilter invoice objects with a `total` greater than 1000.\n\n`curl -G https://api.stripe.com/v1/invoices/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d query=\"total>1000\"`\n\n### Combining multiple filters ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching a combination of metadata and currency.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"metadata['key']:'value' AND currency:'usd'\"`\n\n## Search query language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Query structure and terminology![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA query `clause` consists of a `field` followed by an `operator` followed by a `value`:\n\n|     |     |\n| --- | --- |\n| clause | `email:\"amy@rocketrides.io\"` |\n| field | `email` |\n| operator | `:` |\n| value | `amy@rocketrides.io` |\n\nYou can combine multiple query clauses in a search by either separating them with a space, or using the `AND` or `OR` keywords (case insensitive). You can’t combine `AND` and `OR` in the same query. Furthermore, there’s no option to use parentheses to give priority to certain logic operators. By default, the API combines clauses with `AND` logic.\n\nThe example query `email:\"amy@rocketrides.io\" metadata[\"key\"]:\"value\"` matches records where both the email address is amy@rocketrides.io, and the metadata in the record includes `key` with a value of `value`.\n\n### Creating a query which does not match a clause![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can negate query clauses using a `-` character. For example, the following search returns records that don’t match the email `amy@rocketrides.io`.\n\n`-email:\"amy@rocketrides.io\"`\n\n### Field types, substring matching, and numeric comparators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery search field supports exact matching with a `:`. Certain fields such as `email` and `name` support substring matching. Certain other fields such as `amount` support numeric comparators like `>` and `<`.\n\nEach field includes a type that defines the operations you can use in the field. For a full list of available fields, see [supported query fields for each resource](https://docs.stripe.com/search#supported-query-fields-for-each-resource).\n\nUsing an unsupported operator, such as specifying greater than (`>`) on a string, returns an error.\n\n| type | operators |\n| --- | --- |\n| token | exact match (case insensitive) |\n| string | exact match, substring (case insensitive)<br><br>An exact match on a string type returns any record where that record contains all of the words from the query in the same order. For example the query `name:\"one two three\"` would match both a result with the name “one two three” and a result with the name “one two three four”. |\n| numeric | exact match, greater than and less than |\n\n### Quotes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must use quotation marks around string values. Quotation marks are optional for numeric values. For example:\n\n*   `currency:\"usd\"` means quotes are required.\n*   `payment_method_details.card.last4:1234` means quotes are optional.\n\nYou can escape quotes inside of quotes with a backslash (`\\`).\n\n`description:\"the story called \\\"The Sky and the Sea.\\\"\"`\n\n### Metadata![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can perform searches on [metadata](https://docs.stripe.com/api/metadata) that you’ve added to objects that support it.\n\nUse the following format to construct a clause for a metadata search: `metadata[\"<field>\"]:\"<value>\"`.\n\nThe following clause demonstrates how to create a clause that queries for records with a donation ID of “asdf-jkl”: `metadata[\"donation-id\"]:\"asdf-jkl\"`.\n\nYou can query for the presence of a metadata key on an object. The following clause would match all records where `donation-id` is a metadata key. `-metadata[\"donation-id\"]:null`\n\n### Search Syntax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table lists the syntax that you can use to construct a query.\n\n| Syntax | Usage | Description | Examples |\n| --- | --- | --- | --- |\n| `:` | `field:value` | Exact match operator (case insensitive) | `currency:\"eur\"` returns records where the currency is exactly “EUR” in a case-insensitive comparison |\n| `AND`, `and` | `field:value1 AND field:value2` | The query returns only records that match both clauses (case insensitive) | `status:\"active\" AND amount:500` |\n| `OR`, `or` | `field:value1 OR field:value2` | The query returns records that match either of the clauses (case insensitive) | `currency:\"usd\" OR currency:\"eur\"` |\n| `-` | `-field:value` | Returns records that don’t match the clause | `-currency:\"jpy\"` returns records that aren’t in JPY |\n| `NULL`, `null` | `field:null` | A special token used for field presence (case insensitive) | `url:null` returns records where a URL field is empty |\n| `\\` | `\" \\\"\\\"\"` | Escape quotes within quotes | `description:\"the story called \\\"The Sky and the Sea.\\\"\"` |\n| `~` | `field~value` | Substring match operator (substrings must be a minimum of 3 characters) | `email~\"amy\"` returns matches for amy@rocketrides.io and xamy |\n| `>`, `<`, `=` | *   `field<value`<br>*   `field>value`<br>*   `field>=value`<br>*   `field<=value` | Greater than/less than operators | `amount>=\"10\"` brings up objects where the amount is 10 or greater |\n\n## Supported query fields for each resource![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Query fields for charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| amount | `amount>1000` | numeric |\n| billing\\_details.address.postal\\_code | `billing_details.address.postal_code:12345` | token |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| disputed | `disputed:\"true\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| payment\\_method\\_details.{{SOURCE}}.last4 | `payment_method_details.card.last4:1234` | token |\n| payment\\_method\\_details.{{SOURCE}}.exp\\_month | `payment_method_details.card_present.exp_month:12` | token |\n| payment\\_method\\_details.{{SOURCE}}.exp\\_year | `payment_method_details.interac_present.exp_year:2022` | token |\n| payment\\_method\\_details.{{SOURCE}}.brand | `payment_method_details.card.brand:\"visa\"` | token |\n| payment\\_method\\_details.{{SOURCE}}.fingerprint | `payment_method_details.card.fingerprint:\"fp\"` | token |\n| refunded | `refunded:\"true\"` | token |\n| status | `status:\"succeeded\"` | token |\n\nFor `SOURCE`, use `card`, `card_present`, or `interac_present`. Use `card` for online charges, `interac_present` for Terminal card present charges for the Interac network, and `card_present` for other Terminal card present charges.\n\nThe `disputed` field accepts only the tokens “true” and “false”, indicating the presence of disputes.\n\n`refunded:\"true\"` filters for fully-refunded charges, `refunded:\"false\"` filters for partially-refunded charges, and `refunded:null` filters for non-refunded charges.\n\n### Query fields for customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| email | `email~\"amyt\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| name | `name~\"amy\"` | string |\n| phone | `phone:\"+19999999999\"` | string |\n\n### Query fields for invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| number | `number:\"MYSHOP-123\"` | string |\n| receipt\\_number | `receipt_number:\"RECEIPT-123\"` | string |\n| status | `status:\"open\"` | string |\n| subscription | `subscription:\"SUBS-123\"` | string |\n| total | `total>1000` | numeric |\n\n### Query fields for payment intents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| amount | `amount>1000` | numeric |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| status | `status:\"succeeded\"` | token |\n\n### Query fields for prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| active | `active:\"true\"` | token |\n| currency | `currency:\"usd\"` | token |\n| lookup\\_key | `lookup_key:\"standard_monthly\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| product | `product:\"prod_123\"` | string |\n| type | `type:\"recurring\"` | token |\n\n### Query fields for products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| active | `active:\"true\"` | token |\n| description | `description~\"t-shirts\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| name | `name~\"amy\"` | string |\n| shippable | `shippable:\"true\"` | token |\n| url | `url~\"/dinosaur_swag\"` | string |\n\n### Query fields for subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| status | `status:\"active\"` | token |\n\n## Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Minimum API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe minimum supported API Version to use search is `2020-08-27`. Read our [API upgrades guide](https://docs.stripe.com/upgrades) to learn more about upgrades. To use search without upgrading your account API version, you can override the API version on a single request by setting the `Stripe-Version` request header:\n\n`-H \"Stripe-Version: 2024-06-20\"`\n\nRead our [server-side libraries](https://docs.stripe.com/libraries#versioning) guide on how to override an API version when using a library.\n\n### Data freshness![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDon’t use search for read-after-write flows (for example, searching immediately after a charge is made) because the data won’t be immediately available to search. Under normal operating conditions, data is searchable in under 1 minute. Propagation of new or updated data could be delayed during an outage.\n\n### Rate limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe apply a [rate limit](https://docs.stripe.com/rate-limits) of up to 20 read operations per second which applies for all search endpoints in both live mode and test mode. Live mode and test mode limits are separate. Keeping the rate limit in mind, for workloads where you need to run analytics on one or more API resource(s), [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard) is much more efficient. For workloads where you need to export a large portion of your API resource, our [Data Pipeline](https://docs.stripe.com/stripe-data/access-data-in-warehouse) product is more efficient.\n\n### Regional availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSearch isn’t available to merchants in India.",
    "title": "Search | Stripe Documentation",
    "description": "Look up objects in your Stripe data.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/object",
    "markdown": "# The Product object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the product is currently available for purchase.\n    \n*   #### \n    \n    default\\_pricenullable stringExpandable\n    \n    The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More attributes\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n*   #### \n    \n    package\\_dimensionsnullable object\n    \n*   #### \n    \n    shippablenullable boolean\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    tax\\_codenullable stringExpandable\n    \n*   #### \n    \n    unit\\_labelnullable string\n    \n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Create a product](https://docs.stripe.com/api/products/create)\n\nCreates a new product object.\n\n### Parameters\n\n*   The product’s name, meant to be displayable to the customer.\n    \n*   Whether the product is currently available for purchase. Defaults to `true`.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns a product object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Update a product](https://docs.stripe.com/api/products/update)\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```",
    "title": "The Product object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  }
]