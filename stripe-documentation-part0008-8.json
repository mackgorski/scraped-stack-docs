view the `requirements` on the Account object. Below is a list of errors related to statement descriptor verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_statement_descriptor_length` | A statement descriptor must be at least 5 characters. |\n| `invalid_statement_descriptor_business_mismatch` | A statement descriptor must be similar to the business name, legal entity name, or URL of the account. |\n| `invalid_statement_descriptor_denylisted`<br><br>`invalid_statement_descriptor_prefix_denylisted` | Generic or well-known statement descriptors aren’t supported. |\n| `invalid_statement_descriptor_prefix_mismatch` | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. |\n\n## Person information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring the verification process, information about the persons associated with an account needs to be collected. If you onboard:\n\n*   Only companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information.\n*   Only individuals, you can use the [Persons](https://docs.stripe.com/api/persons) API or the [individual](https://docs.stripe.com/api/accounts/object#account_object-individual) hash on the Account object.\n*   A combination of individuals and companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information. This way you collect information in the same manner regardless of business type.\n\nTo retrieve the status of verification information regarding a person, utilize the Person object’s [verification](https://docs.stripe.com/api/persons/object#person_object-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{PERSON_ID}}\"`\n\n`,   \"object\": \"person\",   ...   \"verification\": {     \"document\": null   }   ... }`\n\nYou can look up the definition for each verification attribute on the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object. The two attributes worth noting are `status` and `details`.\n\n`status` indicates the state of verification for the person:\n\n*   `pending`: Stripe is currently trying to verify this entity.\n*   `unverified`: Stripe isn’t able to verify this entity right now, either because verification has failed or because we don’t have enough information to attempt verification.\n*   `verified`: Stripe has successfully verified this entity.\n\nNote that an `unverified` status isn’t necessarily an urgent issue, but it does mean that Stripe might request more information soon.\n\nThe `details` attribute provides an explanation for the current `status`.\n\nBelow is a list of errors related to person verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_address_city_state_postal_code` | Stripe couldn’t validate the combination of the city, state, and postal code in the provided address. |\n| `invalid_address_highway_contract_box` | The address of the person must be a valid physical address from which the account conducts business and can’t be a Highway Contract Box. |\n| `invalid_address_private_mailbox` | The address of the person must be a valid physical address from which the account conducts business and can’t be a private mailbox. |\n| `invalid_dob_age_under_minimum` | The person must be at least 13 years old. |\n| `invalid_dob_age_over_maximum` | The person’s date of birth must be within the past 120 years. |\n| `invalid_phone_number` | Stripe couldn’t validate the phone number on the account. Make sure the formatting matches the country of the person. |\n| `invalid_street_address` | Stripe couldn’t validate the street name and/or number for the provided address. |\n| `invalid_tax_id`<br><br>`invalid_tax_id_format` | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. |\n\n## Acceptable verification documents by country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Acceptable identification documents vary by country. A passport scan for identity verification is always preferred and, in some cases, is required. When a Stripe account and an individual associated with that Stripe account (for example, Business Representative, Owner) are from different countries, Stripe only accepts a passport to verify identity.\n\nAcceptable forms of identification:\n\n*   Letërnjoftimi (National Identity Card)\n*   Passport\n*   Leje Drejtimi (Driving License)\n*   çertifikatë regjistrimi (Business registration certificate)\n\nRequired information:\n\n*   Full legal name that matches the name in your Stripe profile\n*   Date of birth (DOB) that matches what’s in your Stripe profile\n*   Photo of person (except where exclusions apply)\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Company information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the verification process, you might need to collect information about the company for an account.\n\nTo retrieve the status of verification information regarding an account’s company, use the Account’s [company.verification](https://docs.stripe.com/api/accounts/object#account_object-company-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   ...   \"company\": {     \"verification\": {       \"document\": null     },     ...   },   ... }`\n\nYou can look up the definition for each verification attribute on the [Account](https://docs.stripe.com/api/accounts/object#account_object-company-verification) object.\n\n## Handle document verification problems![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany complications with the verification process involve the uploaded document itself. To help you recognize and handle the most common problems, the table below lists possible values for the error `code` (in the `requirements.errors` array) and the likely resolutions for each error.\n\nBelow is a list of errors related to document upload:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_document_corrupt`<br><br>`verification_document_failed_copy`<br><br>`verification_document_failed_greyscale`<br><br>`verification_document_incomplete`<br><br>`verification_document_not_readable`<br><br>`verification_document_not_uploaded`<br><br>`verification_document_not_signed`<br><br>`verification_document_missing_back`<br><br>`verification_document_missing_front`<br><br>`verification_document_too_large` | The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:<br><br>*   Color image (8,000 pixels by 8,000 pixels or smaller)<br>*   10 MB or less<br>*   Identity documents are JPG or PNG format<br>*   Address or legal entity documents are JPG, PNG, or PDF format<br>*   Legal entity documents must include all pages<br>*   Must not be password protected |\n| `verification_document_country_not_supported`<br><br>`verification_document_invalid`<br><br>`verification_document_type_not_supported` | The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see [Acceptable ID types by country](#acceptable-verification-documents). |\n| `verification_failed_other`<br><br>`verification_document_failed_other` | Your team can contact Stripe to learn more about why identity verification failed. |\n| `verification_document_expired`<br><br>`verification_document_issue_or_expiry_date_missing` | The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months. |\n\nBelow is a list of errors related to identity verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_identity` | The name on the account couldn’t be verified. Ask your user to verify that they have provided their full legal name and to also provide a photo ID matching that name. |\n| `verification_document_name_mismatch`<br><br>`verification_document_dob_mismatch`<br><br>`verification_document_address_mismatch`<br><br>`verification_document_id_number_mismatch`<br><br>`verification_document_photo_mismatch` | The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account. |\n| `verification_document_fraudulent`<br><br>`verification_document_manipulated` | The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more. |\n\nBelow is a list of errors related to business verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_match`<br><br>`verification_failed_document_match` | The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account. |\n| `verification_failed_tax_id_not_issued`<br><br>`verification_failed_tax_id_match` | The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only) |\n| `verification_failed_id_number_match`<br><br>`verification_failed_name_match`<br><br>`verification_failed_address_match` | The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account. |\n| `verification_document_address_missing`<br><br>`verification_document_id_number_missing`<br><br>`verification_document_name_missing` | The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field. |\n\n#### Caution\n\nDon’t resubmit a file that previously failed. Duplicate uploads immediately trigger an error and aren’t rechecked.\n\n## Handle URL verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nURLs for e-commerce businesses need to conform to certain card network standards. See the [website checklist](https://docs.stripe.com/get-started/checklist/website) for best practices for URLs and common elements for e-commerce businesses. Stripe conducts a number of verifications for URL integrity. There are two methods to resolve URL integrity errors:\n\n*   **Using the API** - Use the error code to handle the URL issue. If you need to update the URL, use the [Update Account](https://docs.stripe.com/api/accounts/update) API, which also causes Stripe to verify the updated URL. If you don’t have to update the URL, Stripe still needs to clear the error by verifying the URL again. After you make any other required updates, trigger reverification by using the API to change the URL to any other value and then change it back.\n*   **Using the Dashboard** - Platforms can use the [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page in the Stripe Dashboard to understand the impact to their connected accounts and what actions to take.\n\nNot all URL-related issues can be resolved using the API. Certain types of URL integrity errors require additional information on how to access the connected account’s webpage or to attest that the account is exempt from URL requirements. These types of issues require that you or your connected account provide supplemental information. Visit your [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page to resolve the error, or direct your connected account to [contact Stripe Support](https://support.stripe.com/contact).\n\n#### Note\n\nStripe’s Terms of Service requires all e-commerce businesses to populate the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) property with a working URL of their business website when activating an account with the `card_payments` capability. An account is considered an e-commerce business if it promotes or sells any products or services through an online website, social media profile, or mobile application. If the account doesn’t operate a website to promote their business, sell products, or accept payments, they’re required to provide [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) instead. A product description needs to detail the type of products being sold as well as the manner in which the account’s customers are being charged (i.e. in person transactions).\n\nTo help you handle the most common errors associated with the `business_profile.url` field, the following table lists the related error codes (in the `requirements.errors` array) and possible resolutions.\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_url_denylisted` | The URL provided for the account matches a generic business website URL. A URL that is specific to the business of the account must be provided. |\n| `invalid_url_format` | The URL provided for the account is in the incorrect format. A URL in a correct format must be provided, such as `https://example.com`. |\n| `invalid_url_website_inaccessible` | We can’t reach the website at the URL provided for the account. To resolve this issue, update the account with a reachable URL. If the problem persists, go to your [Accounts to review Dashboard page](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) and respond to the intervention in the **Actions required** list or contact Stripe support. |\n| `invalid_url_website_business_information_mismatch` | Information on the account’s website does not match information on the account’s Stripe account. Please view your Accounts to review page in the Dashboard or the account must make sure that the information on the website matches the account’s business. |\n| `invalid_url_website_incomplete` | The account’s website seems to be missing some required information. Learn more about [the information a website must include](https://support.stripe.com/questions/information-required-on-your-business-website-to-use-stripe). |\n| `invalid_url_website_other` | We’re unable to verify the account’s business using the URL of the website, social media profile, or mobile application provided. A new URL must be provided. View your Accounts to review page or the account must contact Stripe support if no URL exists. |\n| `invalid_url_web_presence_detected` | We have detected that the account uses a website, social media profile, or mobile application to sell or promote products or services, but a URL hasn’t been provided for the account. The account should have a URL that isn’t a generic URL for the website or social media provider. |\n| `invalid_url_website_incomplete_customer_service_details` | The account’s website doesn’t contain customer service details, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add these details to its website. |\n| `invalid_url_website_incomplete_return_policy` | The account’s website doesn’t contain a return policy and process, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a return policy and process to its website. |\n| `invalid_url_website_incomplete_refund_policy` | The account’s website doesn’t contain a refund policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a refund policy to its website. |\n| `invalid_url_website_incomplete_cancellation_policy` | The account’s website doesn’t contain a cancellation policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a cancellation policy to its website. |\n| `invalid_url_website_incomplete_legal_restrictions` | The account’s website suggests that it’s selling goods that have either legal or export restrictions. View your Accounts to review page or the account must remove those goods from its website. |\n| `invalid_url_website_incomplete_terms_and_conditions` | The account’s website doesn’t contain terms and conditions, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add terms and conditions to its website. |\n| `invalid_url_website_incomplete_under_construction` | The account’s website is under construction. Please view your Accounts to review page in the Dashboard or the account must complete construction of its website. |\n| `invalid_url_website_inaccessible_password_protected` | The account’s website is password-protected. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_inaccessible_geoblocked` | Stripe couldn’t access the account’s website because it is geoblocked. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_empty` | The account’s website doesn’t have any content. Please view your Accounts to review page in the Dashboard or the account must add content that represents its products and services. |\n\n## Handle identity verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond in two ways to an identity verification change. The first is to perform an [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call, correcting or adding information.\n\nSecondarily, we might ask you to upload a document. Depending on how much of the user’s information Stripe has been able to verify, we might require three different types of document uploads. You can determine what documents to upload based on the fields listed in `requirements.currently_due`:\n\n*   `person.verification.document`: Requires a color scan or photo of an acceptable form of ID.\n*   `person.verification.additional_document`: Requires a color scan or photo of a document verifying the user’s address, such as a utility bill.\n*   `company.verification.document`: Requires a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation.\n\nUploading a document is a two-step process:\n\n1.  Upload the file to Stripe\n2.  Attach the file to the account\n\n#### Note\n\nFor security reasons, Stripe doesn’t accept copies of IDs sent by email.\n\n### Upload a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo upload a file, use the [Create File](https://docs.stripe.com/api/files/create) API by using a POST to send the file data as part of a multipart/form-data request.\n\nThe uploaded file must meet these requirements:\n\n*   Color image (8,000 pixels by 8,000 pixels or smaller)\n*   10 MB or less\n*   Identity documents are JPG or PNG format\n*   Address or legal entity documents are JPG, PNG, or PDF format\n\nPass the file data in the `file` parameter and set the `purpose` parameter to `identity_document`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_Hrs6SAopgFPF0bZXSN3f6ELN`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -F \"purpose\"=\"identity_document\" \\   -F \"file\"=\"@/path/to/a/file\"`\n\nThis request uploads the file and returns a token:\n\n`{   \"id\":` \n\n`\"{{FILE_ID}}\"`\n\n`,   \"created\": 1403047735,   \"size\": 4908 }`\n\nYou may then use the token’s `id` value to attach the file to a connected account for identity verification.\n\n### Attach the file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you upload the file and receive a representative token, provide the file ID using the appropriate field in your [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call.\n\nBelow is an example for an ID document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"verification[document][front]\"=  {{FILE_ID}}    `\n\nBelow is an example for a company document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"company[verification][document][front]\"=  {{FILE_ID}}`\n\nThis update changes `verification.status` to `pending`. If an additional person needs to be verified, use the [Persons](https://docs.stripe.com/api/persons) API to update them.\n\n### Confirm ID verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the color scan or photo of the ID passes Stripe’s checks, the document requirement is removed from `requirements.currently_due`. Satisfying all verification requirements for the person or company triggers an `account.updated` webhook notification signaling the verification process is complete.\n\nVerification can take Stripe from a few minutes, to a couple business days to complete, depending on how readable the provided image is.\n\nIf the verification attempt fails, the `requirements.errors` array contains an error stating the cause. The `error[reason]`, such as “The image supplied isn’t readable,” is safe to present to your user, but isn’t localized. The response also contains an `error[code]` value, such as `verification_document_not_readable`, which you can use to localize errors for your users. Upon failure, `requirements.currently_due` indicates that a new ID upload is required. If the deadline for verification is near, `requirements.current_deadline` might also be populated with a date. Verification failure also triggers an `account.updated` webhook notification.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Update service agreements](https://docs.stripe.com/connect/updating-service-agreements)\n*   [File upload guide](https://docs.stripe.com/file-upload)\n*   [Identity verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n*   [Account tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)",
  "title": "Handle verification with the API | Stripe Documentation",
  "description": "Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/customize-express-dashboard",
  "markdown": "# Customize the Express Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to customize the Express Dashboard for your users.\n\nThe Express Dashboard allows a platform’s users (connected accounts) to view their available balance, see upcoming [payouts](https://docs.stripe.com/payouts \"payout\"), and track their earnings in real time. It displays an **Activity** feed, an **Earnings** chart, and your platform’s brand name and icon. Learn how to customize the Express Dashboard for your users in this guide.\n\nTo learn more about each feature in the Express Dashboard, see [Express Dashboard](https://docs.stripe.com/connect/express-dashboard).\n\n[\n\n## Add your platform's brand name and icon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#add-platform-branding)\n\nYou can display your platform’s brand name and icon in the Express Dashboard.\n\nAccess your [Connect settings](https://dashboard.stripe.com/settings/connect), enter your platform’s `business_name`, upload your platform’s icon, and save your changes. If you already saved your brand information before reading this guide, you can skip this step.\n\n[](#set-custom-descriptions)\n\nBy default, the **Transactions** list on the Express Dashboard displays generic descriptions for charges and transfers (for example: `Payment on {YOUR_PLATFORM}`).\n\nFirst, determine which type of charge your platform uses. The two recommended charge types for Express connected accounts are [Destination Charges](https://docs.stripe.com/connect/charges#destination) and [Separate Charges and Transfers](https://docs.stripe.com/connect/charges#separate-charges-transfers).\n\nAfter you determine the charge type, use the following instructions to update your integration.\n\n### Destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use [destination charges](https://docs.stripe.com/connect/destination-charges).\n\n1.  Find the existing transfer object you created for an account by finding the latest [charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges) created on the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object).\n2.  Use the charge object to find the [transfer](https://docs.stripe.com/api/charges/object#charge_object-transfer) object associated with the charge.\n3.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n4.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating destination charges on your platform](https://docs.stripe.com/connect/destination-charges).\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n1.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n2.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID found in the previous step.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect payments and then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide) (if you process payments with Stripe)\n*   [Pay out money](https://docs.stripe.com/connect/add-and-pay-out-guide) (if you add money from a bank account to pay out)",
  "title": "Customize the Express Dashboard | Stripe Documentation",
  "description": "Learn how to customize the Express Dashboard for your users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/payout-statement-descriptors",
  "markdown": "# Payout statement descriptors | Stripe DocumentationThe Stripe Docs logo\n\n## Understand and manage how Stripe payouts look on a connected account's bank statements.\n\nThe statement descriptor used for Connect payouts varies according to the properties of the connected account and the conditions of the payout. There is a precedence order used for [manual](#manual-payouts) and [automatic](#automatic-payouts) payouts.\n\nConnected accounts can have a customized statement descriptor stored on the Account object at [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor).\n\n## Default statement descriptor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms can configure a platform-wide default statement descriptor in their [Connect settings](https://dashboard.stripe.com/settings/connect/payouts/statement-descriptor), which is also used under certain criteria. Even when the precedence order falls to it, the default statement descriptor configured in your platform’s [Connect settings](https://dashboard.stripe.com/settings/connect/payouts/statement-descriptor) only applies to a connected account’s payout under certain criteria.\n\n*   The connected account belongs to a platform that pays Stripe fees (including Custom and Express accounts), or you have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) for it.\n*   The connected account doesn’t have access to the Stripe API. Connected accounts only have access to the Stripe API if they can access the Stripe Dashboard.\n*   The connected account isn’t restricted from using the `read_write` OAuth scope. Connected accounts can use the `read_write` OAuth scope if they have access to the Stripe Dashboard and aren’t explicitly restricted from using it with platform controls.\n\nUnless all of these criteria apply, the statement descriptor defaults to STRIPE. However, this default might be subject to other external factors, such as which bank processed the payout.\n\n## Precedence order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe precedence order for the statement descriptor is different for manual and automatic payouts.\n\n### Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The [statement\\_descriptor](https://docs.stripe.com/api/payouts/object#payout_object-statement_descriptor) set on the Payout object.\n2.  The [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor) from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n3.  Your platform’s default statement descriptor, if it’s applicable to the connected account.\n4.  If no other conditions are met, the statement descriptor might default to STRIPE.\n\n### Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor) from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n2.  Your platform’s default statement descriptor, if it’s applicable to the connected account.\n3.  If no other conditions are met, the statement descriptor might default to STRIPE.",
  "title": "Payout statement descriptors | Stripe Documentation",
  "description": "Understand and manage how Stripe payouts look on a connected account's bank statements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/correct-tax-forms",
  "markdown": "# Correct tax forms | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to file corrections to tax forms.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nIn some cases, you need to correct the values in a 1099 tax form after you’ve filed it. If you try to update a tax form that you already filed, you see a **Correct** button instead of an Edit button in the form.\n\n## Correction Reasons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to issue a correction for several reasons:\n\n*   To change the identity data of your connected account. For example, users may request changes to their name, address, or tax identification information\n    \n*   To change form totals\n    \n*   To handle forms with `Rejected` state filing status. If you have forms with _federal_ filing status of `Rejected`, please reach out to [Stripe support](https://support.stripe.com/contact/login).\n    \n    Here are the most common rejection reasons:\n    \n    | Attribute | Example rejection reasons |\n    | --- | --- |\n    | TIN | Missing, invalid, mismatched with IRS records |\n    | Address | Non-English characters, malformed zip codes, missing fields (for example, city, empty Line 1 address) |\n    | Name | Missing, non-English or non-alphabetical characters |\n    \n    The `Rejected` status implies that the form was either rejected by the IRS or state after submission, or that the state refused to accept the information during submission.\n    \n    You can file a correction to update information on a form that has been rejected by a state (if federal filing status shows up as “rejected”, please contact [Stripe support](https://support.stripe.com/contact/login)). Stripe 1099 intelligently files Corrections if the form was initially accepted or Replacements if it was rejected.\n    \n*   To handle delivery failures\n    \n    If the delivery status is `Failed`, that means we couldn’t deliver the tax form to the mailing address on file. There could be two reasons for this:\n    \n    *   **Misconfigured address** - The address is missing or invalid. For example, it includes non-English characters, the zip code doesn’t have the correct number of digits, or the city is missing.\n    *   **Non-deliverable address** - The address doesn’t exist and our delivery partners can’t use it to deliver first-class mail.\n\n## Supported corrections![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can correct most boxes on a tax form. Depending on when you submit a correction and what you’re correcting, [penalties may apply](https://www.irs.gov/irm/part20/irm_20-001-007r#idm140612976878064).\n\nThe IRS generally allows you to correct totals or payee information.\n\n*   When you correct totals, a single form replaces the original and includes the original payee information, new totals, and a checked **Corrected** checkbox.\n    \n*   When you correct payee information, two forms replace the original:\n    \n    *   The first form includes the original payee information, zeros for all totals, and a checked **Corrected** checkbox.\n    *   The second form includes the new payee information, original totals, and an unchecked **Corrected** checkbox (because this is the first form received by the new payee).\n\nThe IRS imposes certain requirements on tax form corrections.\n\nYou can’t correct:\n\n*   The payee name and form totals in the same form\n*   The payee tax identification number and form totals in the same form\n*   Tax forms that the IRS hasn’t accepted\n*   The form type (for example, 1099-MISC to 1099-NEC)\n\n## Create a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only correct tax forms that the IRS has accepted. There are a few ways to start corrections, each of which results in a corrected form that shows up as a **Ready Correction**.\n\n#### Note\n\nIf you want to update information for the connected account permanently, make the changes programmatically using the Accounts API or the Connected Accounts details page and you can then use **Quick Correct** as shown below. Without doing this first, you’ll be updating the information only on the tax form. This doesn’t persist onto the connected account details and you’ll have to re-enter this information next tax season.\n\n*   **Use the [Tax form editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard)**\n    \n    1.  Select the form on the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page.\n    2.  Click **Correct** to create a correction.\n    3.  Make the necessary changes.\n    4.  Save the changes.\n*   **Use a CSV import**\n    \n    1.  Select the form and export it as a CSV.\n    2.  Open the CSV in a compatible tool to make and save the necessary changes.\n    3.  Import the updated CSV using the import mode **Correct**.\n    \n    Corrections use the same [CSV schema](https://docs.stripe.com/connect/modify-tax-forms?method=csv#1099-csv-schema) as updates and are filed regardless of filing threshold. This allows you to zero out a tax form that was accidentally filed or to correct a tax form to have a lower volume. The [Filing\\_requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) allows you to specify whether or not to file a correction.\n    \n*   **Use [Quick Correct](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#quick-correct:-payee-details)**\n    \n    If the identity (name, address, TIN) of the connected account has been updated in Stripe and now differs from what’s on the filed form, a pencil icon appears next to the “Payee details” for platform admin accounts. Hovering over the pencil and clicking **Correct** generates a corrected form to match the identity values of the connected account.\n    \n    When you click **Correct** to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. Verify all changes before filing the updated forms. For example, if a connected account user made a typo in their address, the incorrect address is updated in the corrected form.\n    \n    To list the forms with identity values that differ between the connected account and the tax form in order to find potential corrections, add a Payee details filter with a value of “Payee has updated identity info”.\n    \n\n## View or cancel a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax form corrections have a **Correction** badge in the tax forms list and on the detail pane in the Dashboard. You can download previous versions of a tax form from the detail pane. To cancel a correction before filing, click **Cancel correction** from the menu on the detail pane.\n\n![View or cancel tax form corrections](https://b.stripecdn.com/docs-statics-srv/assets/view-cancel-correction-new.2c0d2cdae64ec49be826b5e641ea5b89.png)\n\n## File a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce you have successfully created a correction via one of the methods above, the corrected form will move to “Ready” column of your Tax Forms page after a page refresh regardless of whether the form is above filing threshold.\n\nIf you want to file the correction, select the correction and click the file button. If you want to skip filing one of the corrections, set the filing requirement to `NOT_REQUIRED` in the Tax Form Editor or [import a CSV file](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status).\n\nIf you’ve selected to e-deliver your tax forms, your connected account will get an [email](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication) letting them know that the corrected form is available in Stripe Express.",
  "title": "Correct tax forms | Stripe Documentation",
  "description": "Learn how to file corrections to tax forms.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli/listen",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/connect/split-tax-forms",
  "markdown": "# Split tax forms | Stripe DocumentationThe Stripe Docs logo\n\n## Split your tax forms for your connected accounts after a change of ownership occurs during the tax year.\n\nSplitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. You can split a 1099 form after a change of ownership occurs during the tax year for the legal entity receiving the form. Splitting a 1099 form assigns a portion of the reported amount to the legal entity before the change and assigns the remaining amount to the legal entity after the change.\n\nChanges to the legal entity of your connected accounts may include these examples:\n\n*   Change of ownership—The owner of the connected account sells the business to a new entity.\n*   Change of legal entity type—The owner of the connected account changes the business type from individual to company, and wants to file for both entities.\n*   Change of Tax Identification Number (TIN)—A sole proprietorship that uses the individual’s social security number (SSN) as the business TIN changes it to an employer identification number (EIN), and wants to file for both entities.\n\n#### Note\n\nChanging the TIN doesn’t necessarily require a split (for example, if the change was due to an oversight). You’ll need to determine whether changing the TIN requires a split, an [update](https://docs.stripe.com/connect/modify-tax-forms), or a [correction](https://docs.stripe.com/connect/correct-tax-forms). Work with your tax advisor to ensure you understand the split requirements specific to your business.\n\n## Create a split![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can split a tax form beginning January 4th of the year following that form’s tax year. For example, you can split a 2023 tax form starting January 4th, 2024. To create a split, select the form in the [Dashboard](https://dashboard.stripe.com/connect/taxes/forms) and then click **Split** from the menu on the detail pane. You can filter by the account ID to identify the form of the connected account you want to create a split for.\n\n#### Note\n\nYou can’t split a form after you manually edit the numerical data. To split one of these forms, you must revert the numerical data on the form to the Stripe-supplied values by clicking **Undo edits** on the **Totals** section. If the split forms are drafts, you can then [update](https://docs.stripe.com/connect/modify-tax-forms) the draft form prior to filing. If you have already filed the original form, you can then update form totals on the split forms with a [correction](https://docs.stripe.com/connect/correct-tax-forms).\n\n![Click Split from the menu on the detail pane](https://b.stripecdn.com/docs-statics-srv/assets/split-menu.8cd4a2d5b6f4ca57d77c36b0f1617bdb.png)\n\nIn the **Split 1099 tax form**, provide the date of the legal entity change and then click **Split**.\n\n![Provide date of legal entity change on Split 1099 tax form](https://b.stripecdn.com/docs-statics-srv/assets/split-tax-form.46d061fd477e72d8b0dc0c672d2f624e.png)\n\nYou’ll see two forms for the connected account:\n\n*   Form one includes the amounts from January 1 to the day before the specified split date.\n*   Form two includes the amounts from the specified split date to December 31.\n\nIf the legal entity is the same on both forms, they’re marked `Needs Attention`. To correct this, you can [update the form](https://docs.stripe.com/connect/modify-tax-forms) to replace the values for relevant payees.\n\n#### Note\n\nYou have to update the identity information on the forms (name, address, TIN) correctly, so that it isn’t the same as what it was before the split. You are responsible for marking the right identity information on each of the split forms.\n\nAfter you update the form so that the payee information is different for each form, the form status changes to `Ready`. Click **File** to send both forms to the IRS.\n\n#### Note\n\nSplit forms can only be delivered using postal mail. Paperless deliveries using the Express app is not currently supported.",
  "title": "Split tax forms | Stripe Documentation",
  "description": "Split your tax forms for your connected accounts after a change of ownership occurs during the tax year.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/customize-connect-embedded-components",
  "markdown": "Customize Connect embedded components | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nCustomize Connect embedded components\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register/connect)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fcustomize-connect-embedded-components)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register/connect)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fcustomize-connect-embedded-components)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/payments)\n\nAccept a payment\n\nAbout Stripe payments\n\n[Upgrade your integration](/payments/upgrades \"Improve your existing integration\")\n\nStart an integration\n\nPayment Links\n\nCheckout\n\nWeb Elements\n\nMobile Elements\n\nPayment scenarios\n\nDuring the payment\n\nAfter the payment\n\nAdd payment methods\n\nMore payment scenarios\n\nFaster checkout with Link\n\nOther Stripe products\n\nConnect\n\n[Overview](/connect \"Connect overview\")\n\n[Build a multi-party integration](/connect/overview \"Learn about how Connect works\")\n\n[Design an integration](/connect/design-an-integration)\n\n[Migrate to account controller properties](/connect/migrate-to-controller-properties)\n\n[Upcoming requirements updates](/connect/upcoming-requirements-updates \"Changes to required verification information\")\n\n[Onboarding Quickstart](/connect/onboarding/quickstart)\n\nConnect integration fundamentals\n\n[Make API calls for connected accounts](/connect/authentication \"Authenticating and making API calls as a connected account\")\n\n[Listen for updates](/connect/webhooks \"Connect webhooks\")\n\n[Testing](/connect/testing \"Testing with Connect\")\n\nExample integrations\n\n[Collect payments then pay out](/connect/collect-then-transfer-guide)\n\n[Enable other businesses to accept payments directly](/connect/enable-payment-acceptance-guide)\n\n[Pay out money](/connect/add-and-pay-out-guide)\n\n[Build a fully embedded Connect integration](/connect/build-full-embedded-integration)\n\nOnboard accounts\n\n[Choose your onboarding configuration](/connect/onboarding)\n\n[Account capabilities](/connect/account-capabilities \"Capabilities on a connected account\")\n\n[Required verification information](/connect/required-verification-information \"Learn what information you need to collect for different countries and account configurations\")\n\n[Service agreement types](/connect/service-agreement-types \"Service agreement types on a connected account\")\n\n[Additional Verifications](/connect/additional-verifications \"Add identity verification checks to your platform's connected accounts\")\n\n[Migrate to Stripe](/connect/migrate-to-stripe \"Migrate connected accounts to Stripe from an existing processor\")\n\nSet up dashboards\n\n[Get started with Connect embedded components](/connect/get-started-connect-embedded-components \"Embed dashboard functionality to your website with just a few lines of code\")\n\n[Supported Connect embedded components](/connect/supported-embedded-components \"Learn how to use embedded components for Connect\")\n\nCustomize Connect embedded components\n\n[Appearance options](/connect/embedded-appearance-options \"Customization options for Connect embedded components\")\n\n[Stripe Dashboard customization](/connect/stripe-dashboard \"Learn about the features of the Stripe Dashboard for connected accounts.\")\n\n[Platform controls for Stripe Dashboard accounts](/connect/platform-controls-for-stripe-dashboard-accounts \"Manage features on behalf of your connected accounts\")\n\n[Express Dashboard](/connect/express-dashboard \"Learn about the features of the Express Dashboard\")\n\nAccept payments\n\n[Create a charge](/connect/charges \"Create a charge type\")\n\n[Set statement descriptors](/connect/statement-descriptors \"Set statement descriptors\")\n\n[Set MCCs](/connect/setting-mcc \"Set merchant category codes\")\n\n[Handle multiple currencies](/connect/currencies \"Multiple currencies\")\n\n[Create payment links with Connect](/connect/payment-links \"Create payment links for connected accounts\")\n\n[Use Radar with Connect](/connect/radar \"Identify fraud in connected account charges\")\n\n[Create subscriptions](/connect/subscriptions)\n\n[Create invoices](/connect/invoices)\n\n[Connect platforms using the Payment Methods API](/payments/payment-methods/connect \"Considerations for Stripe Connect platforms adding support for new payment methods using the Payment Methods API\")\n\n[Multiple payment method configurations](/connect/multiple-payment-method-configurations \"Learn how to allow your connected accounts to display different sets of payment methods to their buyers in different scenarios.\")\n\n[Embed the payment method settings component](/connect/embed-payment-method-settings \"Learn how to embed the payment method settings into your website\")\n\n[Account balance](/connect/account-balances \"Connected account balance\")\n\nPay out to accounts\n\n[Payouts to connected accounts](/connect/payouts-connected-accounts \"Manage payouts and external accounts for your platform's connected accounts.\")\n\n[Manage payout accounts for connected accounts](/connect/payouts-bank-accounts \"Learn how to manage external bank accounts and debit cards for your connected accounts.\")\n\n[Manage payout schedule](/connect/manage-payout-schedule \"Manage when users get paid with automatic payouts\")\n\n[Manual payouts](/connect/manual-payouts \"Manual payouts\")\n\n[Payout reversals](/connect/payout-reversals \"Payout reversals\")\n\n[Payout statement descriptors](/connect/payout-statement-descriptors \"Understand and manage how Stripe payouts look on connected account's bank statements\")\n\n[Alternative Currency Payouts](/connect/alternative-currency-payouts \"Alternative Currency Payouts\")\n\n[Instant Payouts](/connect/instant-payouts \"Instant Payouts\")\n\n[Cross-border payouts](/connect/cross-border-payouts \"Cross-border payouts\")\n\n[Crypto payouts](/connect/crypto-payouts \"Crypto payouts\")\n\nManage your Connect platform\n\n[Dashboard account management](/connect/dashboard \"Managing connected accounts with the Dashboard\")\n\n[Remediation links](/connect/dashboard/remediation-links \"Remediation link process walkthrough\")\n\n[Risk management with Connect](/connect/risk-management \"Learn how Connect can help you manage risk and losses\")\n\n[Platform pricing tools](/connect/platform-pricing-tools)\n\n[Connect margin reports](/connect/margin-reports \"Analyze your Connect volume, revenue and costs\")\n\nManage tax forms for your Connect platform\n\n[Overview](/connect/tax-reporting \"US tax reporting for Connect platforms\")\n\n[Get started with tax reporting](/connect/get-started-tax-reporting \"Get started with 1099 tax reporting\")\n\n[1099 Tax Support and Communication Guide](/connect/platform-express-dashboard-taxes \"1099 Tax Support and Communication Guide for 2021\")\n\n[Tax form settings](/connect/tax-form-settings \"Configure tax form settings\")\n\n[Calculation methods](/connect/calculation-methods \"Choose a calculation method\")\n\n[Identity information on tax forms](/connect/required-verification-information-taxes \"Identity information on tax forms\")\n\n[File tax forms](/connect/file-tax-forms \"File your 1099 tax forms\")\n\n[File tax forms with states](/connect/tax-forms-state-requirements \"File tax forms with states\")\n\n[Identify forms with missing information](/connect/identify-forms-missing-information \"Learn how to find and correct forms with missing information\")\n\n[Update and create tax forms](/connect/modify-tax-forms \"Update your 1099 tax forms using CSV\")\n\n[Deliver tax forms](/connect/deliver-tax-forms \"Deliver your 1099 tax forms\")\n\n[Deliver tax forms with the Express Dashboard](/connect/express-dashboard-taxes \"Learn how to e-deliver tax forms to connected accounts through the Express Dashboard\")\n\n[Correct tax forms](/connect/correct-tax-forms \"Correct your 1099 tax forms\")\n\n[Split tax forms](/connect/split-tax-forms \"Split your 1099 tax forms\")\n\n[Tax year changeover](/connect/tax-year-changeover \"Manage tax forms for a new year\")\n\n[What's new for tax year 2023](/connect/tax/whats-new-2023 \"Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe\")\n\nWork with connected account types\n\n[Connected account types](/connect/accounts)\n\n[Dynamic payment methods](/connect/dynamic-payment-methods \"Update your integration to use dynamic payment methods\")\n\nTerminal\n\nFinancial Connections\n\nCrypto\n\nClimate\n\nCustom Checkout\n\nUnited States\n\nEnglish (United States)",
  "title": "Customize Connect embedded components | Stripe Documentation",
  "description": "Change the appearance of Connect embedded components to match your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/tax-year-changeover",
  "markdown": "# Tax year changeover | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage tax forms for a new tax year.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\n## Preparing for tax year changeover![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a new tax year starts, you need to collect financial data for the new year in a new tax form for the new tax year. This is often before a user completes and submits tax forms from the previous year and before you provide them to users on your platform. To view the tax forms for the new year, you need to change the year selected either on the **Tax reporting** page or on the **Tax form settings** page.\n\n## About tax year settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a new tax year starts, we apply your settings from the previous year to the new one. If no settings are in place from the previous tax year, the **Tax year settings** dialog displays so you can configure settings for that tax year.\n\nTax forms are generated as soon as a new tax year starts and a payment is made. To see the tax forms that belong to the new tax year, users need to go through a changeover process. This means they need to enable the tax year picker either on the tax forms list or on the Tax Forms settings pages, and they need to create new settings.\n\n## Selecting a tax year![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Tax reporting** page displays tax forms and settings for the _current tax year_.\n\nYou can display a different tax year by doing one of the following:\n\n*   Selecting a new tax year from the drop-down on the **Tax reporting** page\n*   Selecting a new tax year from the drop-down on the **Tax form settings** page\n\nWhen you select a tax year from the drop-down for a year that has no activity, the **Tax form defaults** dialog opens. To activate the tax year, configure and save the Tax form default settings. If you don’t configure and save settings, you see the onboarding page when you open the **Tax reporting** page. Select a different tax year from the drop-down to change to that year.\n\nThe selection persists between sessions, so it displays the same tax year when you next use the Dashboard. This lets you start working with tax forms for the current year and then switch back to the previous year to file or correct existing forms.\n\n## Frequently asked questions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following section provides answers to common questions about tax year changeover.\n\n### How does the user change between tax years?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick the small downward arrow next to the current tax year. All available tax years appear in a dropdown menu. Click one of these years to change the user’s view to that tax year.\n\n### What is the default tax year?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the new year’s forms become available, your Dashboard automatically changes over to that year.\n\n### Does the default tax year reset when you log in? Will it remember what year I last looked at?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe year you select to view persists between logins. If you select to view your 2023 forms, the UI defaults to your 2023 forms when you log back in.\n\n### What determines how many tax years are available to me?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery time a tax year launches and those forms become available while you have a Stripe account with [Tax Form Defaults](https://docs.stripe.com/connect/get-started-tax-reporting) configured, that year becomes available to you in your drop-down. If you began processing transactions in 2022, you won’t see 2021 forms in your Dashboard because you didn’t have an account when those were launched.\n\n### Will I see tax years from before I used Stripe?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNo. You only see years that launched while you had a Stripe account.\n\n### Will I see tax years for which I filed no forms?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are able to see any year in which you previously generated 1099 forms in the Connect dashboard, regardless of whether or not they were filed.",
  "title": "Tax year changeover | Stripe Documentation",
  "description": "Learn how to manage tax forms for a new tax year.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/tax/whats-new-2023",
  "markdown": "# What's new for tax year 2023\n\n## Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe.\n\nFor tax year 2023, Stripe is introducing features that help Connect platforms efficiently and accurately meet their 1099 tax reporting obligations for [Custom](https://docs.stripe.com/connect/custom-accounts) and [Express](https://docs.stripe.com/connect/express-accounts) US-based accounts. The 2023 tax year features help platforms comply with their 1099 tax reporting obligations at scale.\n\n#### Note\n\nStripe delivers 1099 forms to Standard accounts through the Stripe Dashboard.\n\n## Early access to editable tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStarting in August, you can access preliminary 2023 tax forms and associated tax reporting features directly from your Stripe Connect Dashboard. Your team needs either Administrator or Tax analyst [user permissions](https://docs.stripe.com/get-started/account/teams) to get started.\n\nAlong with early access to tax forms, you can start editing tax forms right away, as opposed to waiting to make edits in January. You can do so for individual tax forms or in bulk by importing a CSV file.\n\n## Improved state ID collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn our platform onboarding flow for tax year 2023, we clarified the strict ID requirements for filing in two states: Delaware and Pennsylvania. If you intend to file in either of these states, include your state IDs during this step to prevent possible rejection of your filings.\n\n## Create and update tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several features to help you [create and update tax forms](https://docs.stripe.com/connect/modify-tax-forms).\n\n### Deltas![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms using **Delta** allows you to add to (or subtract from) the values on the initial tax form totals from Stripe. This lets you report just the totals of transactions that happened outside of Stripe. You don’t need to sum the values from Stripe with external values—instead, you only need to provide the delta amounts and Stripe does the rest. This is particularly useful if you have multiple payout mechanisms or reimbursements on Stripe connected accounts for activity that happened outside of Stripe.\n\n![Add deltas to a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/deltas-tax-form-2023.1955229634d237c2dded771a26dede66.png)\n\n### Zero dollar tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms can generate tax forms for a Stripe account ID, even when it hasn’t received any payouts in 2023. If your connected account doesn’t already have a tax form, performing **Update** imports (to override form values supplied by Stripe) or **Delta** imports (to make incremental changes to form values supplied by Stripe) automatically creates the form.\n\n![Update a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/update-tax-form-2023.3ee26a28748bfa00607ba5db863ec3dc.png)\n\n### Standalone tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create standalone tax forms for accounts that might not be a connected account (for example, accounts from a different provider). You can create them seamlessly by using a **Create** import with a CSV file containing the data of the form you want to generate. You must include all columns except for `form_id` and `stripe_account_id`. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery).\n\n![Create a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/create-tax-form-2023.57be1986e99960197e157a73bb2a89aa.png)\n\n### Increased CSV import and export speed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using CSV imports to create or modify tax forms, we’ve increased the speed of CSV imports and exports by up to _10 times_ the speed of previous years.\n\n## Improved splitting and grouping of forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use pre-filing splits and improved TIN aggregation to reduce the amount of overhead for filing taxes.\n\n### Pre-filing splits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now [split tax forms](https://docs.stripe.com/connect/split-tax-forms) to handle account ownership changes before filing the forms. Splitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. Previously, you could only split tax forms post-filing, meaning you might have needed to file the wrong tax forms and then correct them. Now, after January 1, you can do so before filing from the 1099 Dashboard.\n\n![Pre-filing splits](https://b.stripecdn.com/docs-statics-srv/assets/pre-file-spits-2023.c93202c5520f7be4de8a00cfff2cc264.png)\n\n### Improved TIN aggregation of tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nForms that share the same TIN get their totals aggregated to determine filing eligibility at all times, even when the platform updates the tax form totals or identity data. When there are multiple forms with the same TIN, we aggregate the totals from each form with a maximum of 100 other forms. However, if forms of different types share the same TIN, we might not aggregate them. In these cases, check your filing eligibility and apply an override if necessary. To simplify finding other forms grouped with a particular form, use the **Forms grouped with** filter.\n\n![Form aggregation filter](https://b.stripecdn.com/docs-statics-srv/assets/form-agg-filter-2023.a13264f451ac25e0b6ebee27a6915306.png)\n\n## Form Delivery Improvements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard to track delivery status and Stripe outreach emails, and to address missing emails.\n\n### Delivery status visibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now view both postal delivery and e-delivery statuses directly in the 1099 Dashboard. You can also [filter](https://docs.stripe.com/connect/get-started-tax-reporting#view-and-filter-tax-forms) for both statuses. Previously, we only showed a combined delivery status, which reported the best result between the e-delivery and postal delivery status. With the combined status, if one of the forms was successfully delivered (but not the other) it showed a status of `delivered`. In other words, if e-delivery was successful and postal delivery was unsuccessful, the combined status was `delivered`. Going forward, you can track the individual status for each of the forms you deliver.\n\n![New dashboard statuses and filters for delivery and outreach](https://b.stripecdn.com/docs-statics-srv/assets/new-statuses-2023.25eb0f5aecc794bef2ac9ada37c0b05d.png)\n\n### Tracking Stripe outreach![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform opts for e-delivery through Stripe Express and enables the collection of tax information in advance using 1099 tax form settings, Stripe sends emails to the connected accounts on behalf of platforms. We do this to confirm their tax information and provide e-delivery consent through Stripe Express. You can now track the status of that outreach directly in the 1099 Dashboard, and use the `Pre-filing confirmation status` filter. The status is either `ineligible`, `queued`, `sent`, or `not sent`.\n\n### Addressing missing emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[For e-delivery with Stripe Express](https://docs.stripe.com/connect/deliver-tax-forms#e-delivery-with-stripe-express), the connected account owner must be able to receive the email from Stripe inviting them to create their account. Stripe can’t electronically deliver the forms without the email address for the account. If you’ve opted in to paper delivery, we send paper forms (assuming we have a valid delivery address). You can now filter for any accounts with missing emails and add them to allow e-delivery. Any emails added by the following methods will result in updating the email on the connected account, which will carry over each year.\n\n*   Use the [Update](https://docs.stripe.com/api/accounts/update#update_account-email) API.\n*   Use the CSV import functionality on the [Emails page](https://dashboard.stripe.com/settings/connect/emails) in the Dashboard. New\n*   Edit the email addresses in the _Payee Details_ section in the 1099 dashboard. New\n\nYou can no longer update email addresses using the email\\_address field in a CSV import directly into the 1099 product. Changes made using this method don’t carry over each year.\n\n### Send Stripe pre-filing confirmation invites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms who enable e-delivery can choose to have Stripe collect identity information and paperless delivery consent directly from their connected accounts through pre-filing confirmation. This email invites your user to Stripe Express. If you need to send a one-off pre-filing confirmation email (for example, your user didn’t receive one since they had the wrong email on file), you can now do it from the 1099 dashboard. [Learn more](https://docs.stripe.com/connect/express-dashboard-taxes#my-connected-account-did-not-receive-a-pre-filing-confirmation-email) about how to resolve issues related to your user not receiving a pre-filing confirmation email.\n\n### Reset account claim attempts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts must claim their Stripe accounts to view the Tax Center in the Express dashboard. To authorize the claim, Stripe asks the user a series of questions to verify their identity. For security reasons, if the user fails to correctly answer the verification questions too many times, Stripe locks their account. You can now see the status in the 1099 dashboard, and you can reset your user’s claim attempts directly in the 1099 Dashboard. [Learn more](https://docs.stripe.com/connect/express-dashboard-taxes#my-connected-account-was-locked-out-of-their-stripe-express-account-for-failing-the-verification-process.-how-can-i-resolve-this-issue) about how you can use these new features to self-resolve account claim issues.",
  "title": "What's new for tax year 2023 | Stripe Documentation",
  "description": "Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts",
  "markdown": "# Platform controls in the Stripe Dashboard\n\n## Manage more features on behalf of your connected accounts that use the Stripe Dashboard with platform controls.\n\nThousands of platforms and marketplaces use [Stripe Connect](https://stripe.com/connect) to facilitate payments and pay out recipients. Connected accounts with Stripe Dashboard access is the fastest way to enable your customers to accept payments directly, while relying on Stripe to manage onboarding, reporting, and loss liability. With platform controls, you can manage more features on behalf of your connected accounts.\n\n#### Note\n\n## Configure platform controls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNavigate to the [third-party extensions](https://dashboard.stripe.com/settings/connect/stripe-dashboard/extensions) page to select the options for your connected accounts. These options apply to all of your new connected accounts moving forward. Visit the [connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page to change settings for individual connected accounts.\n\n## Control payout timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can now update your connected accounts’ [payouts](https://docs.stripe.com/payouts \"payout\") programmatically [using the Stripe API](https://docs.stripe.com/connect/manage-payout-schedule) or [in the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts). You can also initiate payouts on behalf of your connected accounts programmatically [using the Stripe API](https://docs.stripe.com/connect/manual-payouts) or [in the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds).\n\nNavigate to the [payout schedules](https://dashboard.stripe.com/settings/connect/payouts/schedules) page to determine whether connected accounts can manage their own payout schedules. Connected accounts can still make manual payouts after you, as the platform, choose to restrict connected accounts from updating their own payout schedule.\n\n#### Note\n\nIf you need full control over your connected accounts’ payouts and want to restrict your connected accounts from being able to make their own payouts, [contact us](https://support.stripe.com/contact) with a detailed description of your use case.\n\n## Access consolidated reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can access reporting across all connected accounts that you control using the built in-Dashboard reporting as well as within Stripe Sigma, a custom reporting solution that makes all of your data available as an interactive SQL environment in the Dashboard. To learn more, see [Financial reports](https://docs.stripe.com/reports) and [Sigma for Connect platforms](https://docs.stripe.com/stripe-data/query-connect-data).\n\n## Co-brand your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can manage your brand settings within the **Connect Settings** > **Stripe Dashboard** section. All new accounts onboarding to your platform will see your icon and branding color in their dashboard. To understand changes for connected accounts, see this [Support article](https://support.stripe.com/questions/platform-administered-stripe-accounts).\n\n#### Note\n\nThese features apply only to new accounts onboarding to your platform, denoted by `true` in the `is_controller` property for the [Account object](https://docs.stripe.com/api/accounts/object#account_object-controller-is_controller). Existing accounts aren’t eligible for these features.\n\n## Remove accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the connected account details page in your [Dashboard](https://dashboard.stripe.com/connect/accounts/overview), click the overflow menu () and choose **Remove account**. This action disconnects the account and revokes access in the same way as the OAuth de-authorize endpoint. Removing an account from your platform resets any platform controls (such as payout timing) you’ve configured for the connected account. If the account reconnects later, prior platform controls aren’t reinstated.",
  "title": "Platform controls in the Stripe Dashboard | Stripe Documentation",
  "description": "Manage more features on behalf of your connected accounts that use the Stripe Dashboard with platform controls.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/separate-charges-and-transfers",
  "markdown": "# Create separate charges and transfers\n\n## Create charges on your platform account and transfer funds to multiple connected accounts.\n\nCreate _separate charges and transfers_ to transfer funds from one payment to multiple connected accounts, or when a specific user isn’t known at the time of the payment. The charge on your platform account is decoupled from the transfer(s) to your connected accounts. With this charge type:\n\n*   You create a charge on your platform’s account and also transfer funds to your connected accounts. The payment appears as a charge on your account and there are also transfers to connected accounts (amount determined by you), which are withdrawn from your account balance.\n*   You can transfer funds to multiple connected accounts.\n*   Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\nThis charge type is most optimal for marketplaces that need to split payments between multiple parties, such as DoorDash, a restaurant delivery platform.\n\nStripe supports separate charges and transfers in the following regions:\n\nAustralia\n\nAustria\n\nBelgium\n\nBrazil\n\nBulgaria\n\nCanada\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nEstonia\n\nFinland\n\nFrance\n\nGermany\n\nGreece\n\nHungary\n\nIreland\n\nItaly\n\nJapan\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMalaysia\n\nMalta\n\nMexico\n\nNetherlands\n\nNew Zealand\n\nNorway\n\nPoland\n\nPortugal\n\nRomania\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSpain\n\nSweden\n\nSwitzerland\n\nUnited Kingdom\n\nUnited States\n\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see [cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border). You must only use transfers in combination with the permitted use cases for [charges](https://docs.stripe.com/connect/charges), [tops-ups](https://docs.stripe.com/connect/top-ups) and [fees](#collect-fees).\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls what your customer sees in the payment form such as line items, the order amount and currency, and acceptable payment methods. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn your server, create a Checkout Session and redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[transfer_group]\"=ORDER100 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\"`\n\n*   `line_items` - This attribute represents the items the customer is purchasing. The items are displayed in the Stripe-hosted checkout page.\n*   `payment_intent_data[transfer_group]` - Use a unique string as the `transfer_group` to identify objects that are associated with each other. When Stripe automatically creates a charge for a PaymentIntent with a `transfer_group` value, it assigns the same value to the charge’s `transfer_group`.\n*   `success_url` - Stripe redirects the customer to the success URL after they complete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See [customize redirect behavior with a Stripe-hosted page](https://docs.stripe.com/payments/checkout/custom-success-page) for more information.\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-payment-events)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nStripe recommends handling all of the following events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") [status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from `processing` to `succeeded` or a failure status.\n\n[](#create-transfer)\n\nOn your server, send funds from your account to a connected account by creating a [Transfer](https://docs.stripe.com/api/transfers/create) and specifying the `transfer_group` used.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=7000 \\  -d currency=usd \\  -d destination=  {{CONNECTED_ACCOUNT_ID}}   \\  -d transfer_group=ORDER100`\n\nTransfer and charge amounts don’t have to match. You can split a single charge between multiple transfers or include multiple charges in a single transfer. The following example creates an additional transfer associated with the same `transfer_group`.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d destination={{OTHER_CONNECTED_ACCOUNT_ID}} \\   -d transfer_group=ORDER100`\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## Specify the settlement merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe settlement merchant is dependent on the [capabilities](https://docs.stripe.com/connect/account-capabilities) set on an account and how a charge is created. The settlement merchant determines whose information is used to make the charge. This includes the statement descriptor (either the platform’s or the connected account’s) that’s displayed on the customer’s credit card or bank statement for that charge.\n\nSpecifying the settlement merchant allows you to be more explicit about who to create charges for. For example, some platforms prefer to be the settlement merchant because the end customer interacts directly with their platform (such as on-demand platforms). However, some platforms have connected accounts that interact directly with end customers instead (such as a storefront on an e-commerce platform). In these scenarios, it might make more sense for the connected account to be the settlement merchant.\n\nYou can set the `on_behalf_of` parameter to the ID of a connected account to make that account the settlement merchant for the payment. When using `on_behalf_of`:\n\n*   Charges settle in the connected account’s country and settlement currency.\n*   The fee structure for the connected account’s country is used.\n*   The connected account’s statement descriptor is displayed on the customer’s credit card statement.\n*   If the connected account is in a different country than the platform, the connected account’s address and phone number are displayed on the customer’s credit card statement.\n*   The number of days that a [pending balance](https://docs.stripe.com/connect/account-balances) is held before being paid out depends on the [delay\\_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days) setting on the connected account.\n\nIf `on_behalf_of` is omitted, the platform is the business of record for the payment.\n\n#### Caution\n\nThe `on_behalf_of` parameter is supported only for connected accounts with a payments capability such as [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments). Accounts under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient) can’t request `card_payments` or other payments capabilities.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[on_behalf_of]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"payment_intent_data[transfer_group]\"=ORDER100 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\"`\n\n## Collect fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using separate charges and transfers, the platform can collect fees on a charge by reducing the amount it transfers to the destination accounts. For example, consider a restaurant delivery service transaction that involves payments to the restaurant and to the driver:\n\n1.  The customer pays a 100 USD charge.\n2.  Stripe collects a 3.20 USD fee and adds the remaining 96.80 USD to the platform account’s pending balance.\n3.  The platform transfers 70 USD to the restaurant’s connected account and 20 USD to the driver’s connected account.\n4.  A platform fee of 6.80 USD remains in the platform account.\n\n![How a charge is divided into fees for the platform account and transfers for the connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/charges_transfers.c54b814c7e6f88993bf259c8a53f03e8.png)\n\nTo learn about processing payments in multiple currencies with Connect, see [working with multiple currencies](https://docs.stripe.com/connect/currencies).\n\n## Transfer availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe default behavior is to transfer funds from the platform account’s available balance. Attempting a transfer that exceeds the available balance fails with an error. To avoid this problem, when creating a transfer, tie it to an existing [charge](https://docs.stripe.com/api/charges) by specifying the charge ID as the `source_transaction` parameter. With a `source_transaction`, the transfer request returns success regardless of your available balance. However, the funds don’t become available in the destination account until the funds from the associated charge are available to transfer from the platform account.\n\nIf the source charge has a `transfer_group` value, Stripe assigns the same value to the transfer’s `transfer_group`. If it doesn’t, then Stripe generates a string in the format `group_` plus the associated PaymentIntent ID, for example: `group_pi_2NHDDD589O8KAxCG0179Du2s`. It assigns that string as the `transfer_group` for both the charge and the transfer.\n\n#### Note\n\nYou must specify the `source_transaction` when you create a transfer. You can’t update that attribute later.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=7000 \\  -d currency=usd \\  -d source_transaction=  {{CHARGE_ID}}   \\  -d destination=  {{CONNECTED_ACCOUNT_ID}}    `\n\nYou can get the charge ID from the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\"):\n\n*   Get the PaymentIntent’s [latest\\_charge attribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge). This attribute is the ID of the most recent charge associated with the PaymentIntent.\n*   [Request a list of charges](https://docs.stripe.com/api/charges/list), specifying the `payment_intent` in the request. This method returns full data for all charges associated with the PaymentIntent.\n\nWhen using this parameter:\n\n*   The amount of the transfer must not exceed the amount of the source charge\n*   You can create multiple transfers with the same `source_transaction`, as long as the sum of the transfers doesn’t exceed the source charge\n*   The transfer takes on the pending status of the associated charge: if the funds from the charge become available in N days, the payment that the destination Stripe account receives from the transfer also becomes available in N days\n*   Stripe automatically creates a `transfer_group` for you\n*   The currency of the balance transaction associated with the charge must match the currency of the transfer\n\nAsynchronous payment methods, like ACH, can fail after a subsequent transfer request is made. For these payments, avoid using `source_transaction`. Instead, wait until a [charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded) event is triggered before transferring the funds. If you have to use `source_transaction` with these payments, you must implement functionality to manage payment failures.\n\nWhen a payment used as a `source_transaction` fails, funds from your platform’s account balance are transferred to the connected account to cover the payment. To recover these funds, [reverse](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers) the transfer associated with the failed `source_transaction`.\n\n## Transfer options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can assign any value to the `transfer_group` string, but it must represent a single business action. You can also make a transfer with neither an associated charge nor a `transfer_group`—for example, when you must pay a provider but there’s no associated customer payment.\n\n#### Note\n\nThe `transfer_group` only identifies associated objects. It doesn’t affect any standard functionality. To prevent a transfer from executing before the funds from the associated charge are available, use the transfer’s `source_transaction` attribute.\n\nTransfer and charge amounts don’t have to match. You can split a single charge between multiple transfers or include multiple charges in a single transfer. You can perform transfers and charges in any order.\n\nBy default, a transfer request fails when the amount exceeds the platform’s [available account balance](https://docs.stripe.com/connect/account-balances). You can instead validate the transfer amount against its associated charge [by specifying that charge as the transfer’s source\\_transaction](#transfer-availability). In that case, the transfer request automatically succeeds but isn’t executed until the funds from that charge are available in the platform account.\n\n#### Note\n\nIf you use separate charges and transfers, take that into account when planning your [payout](https://docs.stripe.com/payouts \"payout\") schedule. Automatic payouts can interfere with transfers that don’t have a defined `source_transaction`.\n\n## Issue refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund charges created on your platform using its secret key. However, refunding a charge has no impact on any associated transfers. It’s up to your platform to reconcile any amount owed back to it by reducing subsequent transfer amounts or by [reversing transfers](#reversing-transfers).\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge=  {{CHARGE_ID}}    `\n\n## Reverse transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect supports the ability to [reverse transfers](https://docs.stripe.com/api#create_transfer_reversal) made to connected accounts, either entirely or partially (by setting an `amount` value). Use transfer reversals only for refunds or disputes related to the charge, or to correct errors in the transfer.\n\n`curl https://api.stripe.com/v1/transfers/`\n\n`{{TRANSFER_ID}}`\n\n`/reversals \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d amount=7000`\n\nTransfer reversals add the specified (or entire) amount back to the platform’s available balance, reducing the connected account’s available balance accordingly. It is only possible to reverse a transfer if the connected account’s available balance is greater than the reversal amount or has [connected reserves](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances) enabled.\n\nIf the transfer reversal requires a currency conversion, and the reversal amount would result in a zero balance after the conversion, it returns an error.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Working with multiple currencies](https://docs.stripe.com/connect/currencies)\n*   [Statement descriptors with Connect](https://docs.stripe.com/connect/statement-descriptors)\n*   [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances)",
  "title": "Create separate charges and transfers | Stripe Documentation",
  "description": "Create charges on your platform account and transfer funds to multiple connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/instant-payouts",
  "markdown": "# Instant Payouts for Connect marketplaces and platforms\n\n## Offer your users instant access to their funds.\n\nWith Instant Payouts, Connect platforms and marketplaces can allow their users to access their balances immediately following a successful charge. Instant Payouts are available at any day or time, including weekends and holidays, and funds typically settle in the associated bank account within 30 minutes.\n\nYou can use Instant Payouts to:\n\n*   Attract and retain new users\n*   Realize additional revenue by [assessing a fee](#monetization-and-fees)\n\nFunds acquired from card payments are available for Instant Payouts as soon as the charge is complete. ACH or bank debits are only available for Instant Payouts after the payment has settled.\n\n## Eligible connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstant Payouts are only available to connected accounts in the same country as the platform and must be in the local currency. For example, an Instant Payout to a Canadian business must be through a Canadian platform and must be in CAD.\n\n### External Account eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo receive Instant Payouts, a user must have an eligible External Account. Eligible accounts vary by country.\n\nIf you’re responsible for connected accounts that might not be able to refund negative balances, including Custom and Express accounts, you might need to enable Stripe-hosted onboarding and dashboard interfaces to collect debit card details. To enable this, navigate to your [External Account settings](https://dashboard.stripe.com/settings/connect/payouts/external_accounts) and select **Yes** under **Allow debit cards?**.\n\nYou can verify Instant Payout eligibility for your user by calling the [External Accounts API](https://docs.stripe.com/api/external_account_bank_accounts/list) with the Connected Account ID. The response returns the account’s 10 most recently active External Accounts, and those with `instant` in the `available_payout_methods` parameter are eligible for Instant Payouts. You can paginate through the results if you need to review more than the default display of 10.\n\nCheck eligibility response\n\n`{   \"object\": \"list\",   \"data\": [     {       \"object\": \"bank_account\",       \"available_payout_methods\": [         \"standard\",         \"instant\"       ],       ...     }   ], }`\n\n### Invite users to add eligible accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your user doesn’t have an External Account eligible for Instant Payouts, you can prompt them to add an eligible account through the [Account API](https://docs.stripe.com/api/accounts/update#update_account-external_account).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d external_account=  {{BANK_ACCOUNT_TOKEN_ID}}`\n\n## Monetization and fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome marketplaces and platforms choose to monetize Instant Payouts, offering the convenience for a fee. If you monetize Instant Payouts, Stripe supports two methods of fee collection: Application Fees and account debits\n\n### Application Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith [Application Fees](https://docs.stripe.com/api/application_fees), Stripe collects the fee you determine and initiates the Instant Payout synchronously. Stripe recommends applying an application fee because it’s a single, seamless transaction:\n\n*   Users can’t pay out more than their available balance\n*   Fees can be refunded through the API or the Dashboard\n*   Monetization options include fixed or variable fees with minimums and maximums\n*   Fees are paired to your Instant Payouts revenue with the [Payout Object](https://docs.stripe.com/api/payouts/object), helping with reporting and reconciliation. You can view your collected fees in the [Payments tab](https://dashboard.stripe.com/connect/application_fees) on the Dashboard\n\nTo use Application Fees, set your pricing structure using the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n\n#### Caution\n\nApplication Fees for Instant Payouts rely on the [Balance API net-of-fees](https://docs.stripe.com/api/balance/balance_object#balance_object-instant_available-net_available) field. Turning this on without using the new field could break your API integration.\n\n### Account Debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [directly debit](https://docs.stripe.com/connect/account-debits) your connected account’s Stripe balance and credit your platform account’s Stripe balance to collect fees. After the Instant Payout, call the [Charge API](https://docs.stripe.com/api#create_charge), specifying the connected account ID as the `source` parameter. Consider the following limitations when using account debits to collect Instant Payout fees:\n\n*   You must get legally binding consent from your connected accounts.\n*   Account debits carry an [additional cost](https://stripe.com/connect/pricing).\n*   Debiting an account can’t make the connected account balance become negative unless you have [reserves enabled](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances) (on by default for all new platforms created after January 31, 2017) and have a bank account in the same currency as the debit.\n*   If the connected account has already paid out their available balance in full, you might be delayed in collecting the fee.\n*   Reconciliation requires maintaining an internal database of debits and related payouts.\n\n## Initiate an Instant Payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can initiate Instant Payouts either manually on your users’ behalf or you can use the Stripe APIs to compose user interfaces to allow your users to initiate an Instant Payout. In circumstances where you initiate Instant Payouts on your users’ behalf, you may only do so in accordance with instructions and authorizations given by your users.\n\n1.  Call [retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve), expanding [instant\\_available-net\\_available](https://docs.stripe.com/api/balance/balance_object#balance_object-instant_available-net_available).\n\nThe property `instant_available.net_available` is the connected account’s instant balance net of platform fees for each instantly available destination. You must use this field if you’re monetizing with [Application Fees](#application-fees). This amount is calculated from the platform’s Application Fee pricing structure set in the Dashboard.\n\nThe property `instant_available.amount` is the connected account’s gross balance, not including any platform fees.\n\nThe following example shows a platform setting 2% pricing for any USD Instant Payout:\n\n`curl -G https://api.stripe.com/v1/balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"instant_available.net_available\"`\n\nRetrieve balance response\n\n`{   \"object\": \"balance\",   \"available\": [     {       \"amount\": 500,       \"currency\": \"usd\",       \"source_types\": {         \"card\": 500       }     }   ],   \"instant_available\": [     {       \"amount\": 500,       \"currency\": \"usd\",       \"net_available\": [         {           \"amount\": 490,           \"destination\": \"ba_abc123\",           \"source_types\": {             \"card\": 490           }         }       ],       \"source_types\": {         \"card\": 500       }     }   ],   ... }`\n\n#### Note\n\nFunds from card charges are available immediately, but funds from bank debits (such as ACH) aren’t available immediately.\n\nKey considerations:\n\n*   `net_available` only appears when included as an [expanded parameter](https://docs.stripe.com/expand).\n*   `net_available` only appears for connected accounts. You’ll receive an error expanding this for your platform.\n*   A hash in `net_available` only appears for instantly-available external accounts. External accounts that aren’t valid instant payouts destinations won’t appear.\n*   External accounts can have different `net_available` balances based on external account properties and platform-set pricing rules.\n\n1.  Call [create payout](https://docs.stripe.com/api/payouts/create) with `method=instant`. Use the amount field corresponding with your monetization strategy, either `instant_available.amount` or `instant_available.net_available[0].amount`. Use the `destination` from the balance endpoint to pay out to an intended external account.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=490 \\  -d currency=usd \\  -d method=instant \\  -d destination=  {{BANK_ACCOUNT_TOKEN_ID}}    `\n\n#### Caution\n\nInstant payouts to ineligible external accounts will fail, so [confirm eligibility](#external-account-eligibility) before surfacing the capability to your connected accounts.\n\n1.  View your [application fee](https://docs.stripe.com/api/application_fee/retrieve) that was created by the payout.\n\n`curl https://api.stripe.com/v1/application_fees/`\n\n`{{APPLICATION_FEE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Eligibility and daily volume limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account has a maximum amount it can pay out instantly per day across all connected accounts. Your users can’t initiate Instant Payouts after you reach your daily limit. Daily limits reset at midnight US Central Time (CT).\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIrrespective of your monetization decisions, Stripe charges marketplaces and platforms a 1% fee for all Instant Payouts. Each Instant Payout transaction has a minimum and maximum amount dependent on the currency. These fees are assessed as part of your overall Connect fees.\n\n| Country | Instant Payout Minimum | Instant Payout Maximum |\n| --- | --- | --- |\n| US  | 0.50 USD | 9,999 USD |\n| Canada | 0.60 CAD | 9,999 CAD |\n| Singapore | 0.50 SGD | 9,999 SGD |\n| United Kingdom | 0.40 GBP | 9,999 GBP |\n| Australia | 0.50 AUD | 9,999 AUD |\n\n## Manage risk and eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen platforms and marketplaces are liable for losses, you’re liable for uncovered negative balances due to refunds or disputes.\n\nStripe recommends setting risk parameters to protect your platform from unintended losses. We provide a number of [best practices for managing fraud and risk](https://docs.stripe.com/connect/risk-management/best-practices#fraud), such as setting trust thresholds like the following:\n\n*   Minimum processing volume\n*   Days active\n*   Chargeback rate\n\nStripe has tools to help manage eligibility– if you’re interested, [contact us](https://support.stripe.com/?contact=true).\n\n## Marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour marketing of Instant Payouts to Connected Accounts must clearly and conspicuously disclose any fees you intend to apply for Instant Payouts.\n\nMake sure your marketing is consistent with Stripe’s marketing of the product, which states that: “You can request Instant Payouts 24/7, including weekends and holidays, and funds typically appear in the associated bank account within 30 minutes”. Some Instant Payouts might not settle within 30 minutes, and instead might take longer to be credited to the relevant bank account.",
  "title": "Instant Payouts for Connect marketplaces and platforms | Stripe Documentation",
  "description": "Offer your users instant access to their funds.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/cross-border-payouts",
  "markdown": "# Cross-border payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Cross-border payoutsUS only\n\n## Transfer and pay out funds around the world.\n\nCross-border [payouts](https://docs.stripe.com/payouts \"payout\") enable you to pay sellers, freelancers, content creators, and service providers in their local currencies. You can transfer funds to connected accounts in other countries with your existing platform account and charge configuration.\n\n## Fund flow restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following fund flows are generally supported in countries for cross-border payouts:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   [Top-ups and transfers](https://docs.stripe.com/connect/top-ups)\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges)\n\nDirect charges and destination charges _with_ the `on_behalf_of` parameter aren’t supported. However, some countries have additional limitations.\n\nFor Brazil, [India](https://support.stripe.com/questions/stripe-india-support-for-marketplaces), and [Thailand](https://support.stripe.com/questions/stripe-thailand-support-for-marketplaces), only the following fund flows are supported:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   Top-up and transfers\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCross-border payouts enable US platforms using separate charges and transfers, destination charges, or top-ups to pay out to connected accounts in the following countries:\n\nAlbania\n\nAlgeriaPreview\n\nAngolaPreview\n\nAntigua & Barbuda\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nAzerbaijanPreview\n\nBahamas\n\nBahrain\n\nBangladeshPreview\n\nBelgium\n\nBenin\n\nBhutanPreview\n\nBolivia\n\nBosnia & Herzegovina\n\nBotswana\n\nBrunei\n\nBulgaria\n\nCambodia\n\nCanada\n\nChile\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\\*\n\nCyprus\n\nCzech Republic\\*\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nEthiopia\n\nFinland\n\nFrance\n\nGabonPreview\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nGuyana\n\nHong Kong\n\nHungary\n\nIceland\\*\n\nIndia\n\nIndonesia\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJordan\n\nKazakhstanPreview\n\nKenya\n\nKuwait\n\nLaosPreview\n\nLatvia\n\nLiechtenstein\\*\n\nLithuania\n\nLuxembourg\n\nMacao SAR China\n\nMadagascar\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMonaco\n\nMongolia\n\nMorocco\n\nMozambiquePreview\n\nNamibia\n\nNetherlands\n\nNew Zealand\n\nNigerPreview\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nOman\n\nPakistan\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nQatar\n\nRomania\n\nRwanda\n\nSan MarinoPreview\n\nSaudi Arabia\n\nSenegal\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSt. Lucia\n\nSweden\n\nSwitzerland\\*\n\nTaiwan\n\nTanzania\n\nThailand\n\nTrinidad & Tobago\n\nTunisia\n\nTurkey\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUruguay\n\nUzbekistan\n\nVietnam\n\n\\* Bank accounts in countries with an asterisk (\\*) can only receive Euro (EUR) payouts.\n\n#### Note\n\nStripe might pause payouts to countries in the preview program while any issues are resolved. We don’t provide advance notice to you as the owner of the platform or to the owners of your connected accounts.\n\nSome countries have [special requirements](https://docs.stripe.com/connect/cross-border-payouts/special-requirements) for payments received from outside their country’s borders, or limitations on the supported fund flows. Those countries might also have higher [minimum payout amounts](https://docs.stripe.com/payouts#cbp-minimum-payout-amounts).\n\nStripe isn’t responsible for providing direct support for accounts on the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient). However, the platform can reach out to Stripe for support for these accounts.\n\n## Restrictions and requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The platform must be in the US.\n*   Funds must come from separate charges and transfers, destination charges without `on_behalf_of` (OBO), or top-ups.\n*   The platform must be the business of record. Consequently, [destination charges with `on_behalf_of` (OBO)](https://docs.stripe.com/connect/destination-charges#settlement-merchant) aren’t supported.\n*   Connected accounts must onboard under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient). That means transfers to `recipient` accounts take an extra 24 hours to become available in the connected account’s balance.\n*   US connected accounts don’t support cross-border payouts; onboard US connected accounts using the full [terms of service](https://docs.stripe.com/connect/service-agreement-types).\n*   You can’t make cross-border [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\nIn addition to businesses [prohibited on Stripe](https://stripe.com/legal/restricted-businesses), you can’t use cross-border payouts for:\n\n*   Crowdfunding\n*   Donations or fund contributions\n*   Non-fungible tokens (NFTs) minting and sales\n\nThe onboarding specifications for cross-border payouts vary by destination country. To learn more, see:\n\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Supported settlement currencies](https://docs.stripe.com/connect/payouts-connected-accounts#supported-settlement)\n*   [Bank account formats](https://docs.stripe.com/connect/payouts-bank-accounts)",
  "title": "Cross-border payouts | Stripe Documentation",
  "description": "Transfer and pay out funds around the world.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/crypto-payouts",
  "markdown": "# Crypto payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Crypto payoutsBeta\n\n## Learn how to enable crypto payouts on your platform.\n\n#### Beta\n\nAccess to Crypto payouts is currently limited to beta users. If you’re interested in trying it out, fill out the [interest form](https://stripe.com/use-cases/crypto#request-invite) and select **Paying out third parties in crypto**.\n\nCrypto payouts enable your platform to pay out in crypto, starting with USDC. You can use crypto payouts with your existing integration to avoid managing crypto yourself—your platform’s funds can remain in fiat currency, and Stripe handles converting to crypto and then paying it out.\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCrypto payouts enable platforms in the US to pay out to connected accounts in the following countries:\n\nArmenia\n\nAustria\n\nAzerbaijan\n\nBahrain\n\nBenin\n\nBhutan\n\nBosnia & Herzegovina\n\nBrunei\n\nBulgaria\n\nCanada\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDjibouti\n\nDominica\n\nEcuador\n\nEl Salvador\n\nEstonia\n\nFinland\n\nFrance\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGrenada\n\nGuatemala\n\nHong Kong\n\nHungary\n\nIndia\n\nIreland\n\nJamaica\n\nJapan\n\nKuwait\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nMalta\n\nMauritius\n\nMoldova\n\nMontenegro\n\nNetherlands\n\nNew Zealand\n\nNiger\n\nNorway\n\nOman\n\nPanama\n\nPhilippines\n\nPoland\n\nPortugal\n\nRomania\n\nSamoa\n\nSan Marino\n\nSenegal\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Korea\n\nSpain\n\nSt. Lucia\n\nSt. Vincent & Grenadines\n\nSweden\n\nSwitzerland\n\nTunisia\n\nUnited Kingdom\n\nUnited States\n\nCrypto payouts aren’t currently available in New York or Hawaii.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  **Activated US Platform**: Your Platform must be in the US and activated. You can activate it by [registering your platform](https://dashboard.stripe.com/connect/tasklist), [activating your account](https://dashboard.stripe.com/account/onboarding), and [completing the platform profile](https://dashboard.stripe.com/connect/settings/profile).\n2.  **Individual recipients**: Recipients paid in crypto must be individuals or sole proprietors. Paying companies and non-profits in crypto isn’t currently supported.\n3.  **Express Dashboard access**: To pay an individual in crypto, create a connected account for them with access to the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard). They can link a crypto wallet and choose their preferred currency in this Dashboard.\n4.  **Pay with the Transfers API**: You must use the [Transfers API](https://docs.stripe.com/api/transfers) within your integration to pay in crypto. Transfers to connected accounts with linked crypto wallets are converted from fiat to USDC, enabling you to pay in USDC while your platform balance stays in fiat. If you haven’t built an integration yet, you can pay in crypto using a [no-code](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api?dashboard-or-api=dashboard) or [programmatic integration](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api?dashboard-or-api=api).\n\n## Paying out in crypto with Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers, freelancers, content creators, and service providers around the world are increasingly looking to be paid directly in crypto. Being paid in crypto helps them access international platforms that otherwise could not support them, or because they regularly use crypto and often convert funds from fiat. With crypto payouts, you can now support these users without writing a single line of code.\n\n### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you opt in to crypto payouts and provide your users access to the Express Dashboard, your users can link a crypto wallet with their account and set their default currency to USDC. Your users can link a crypto wallet using the Express Dashboard.\n\nWhen a user links a crypto wallet, they immediately see a new USDC balance on their connected account. The USDC balance works like any other local currency balance. You can Transfer funds into the balance and the funds are paid out to their linked crypto wallet instead of their bank account. When you create [Transfers](https://docs.stripe.com/api/transfers) in USD, they automatically convert to the preferred currency of your recipients. This simplifies your integration and enables you to have a unified integration across fiat and crypto payouts.\n\nConnected account users can view account information, such as their crypto account balance and upcoming payouts, using the Express Dashboard. Stripe handles all compliance requirements, and generates tax forms for recipients paid in crypto.\n\n### Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter Stripe approves your use case, your users can link a crypto wallet to their account and set USDC as their preferred currency. For any user with a default currency set to USDC, Stripe automatically converts Transfers to USDC.",
  "title": "Crypto payouts | Stripe Documentation",
  "description": "Learn how to enable crypto payouts on your platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/alternative-currency-payouts",
  "markdown": "# Alternative Currency Payouts for Connect marketplaces and platforms\n\n## Offer your connected accounts the ability to pay out in alternative currencies.\n\nAlternative Currency Payouts allow your connected accounts to maintain balances and make payouts domestically in currencies other than their primary currency, or make payouts non-domestically in the account’s local currency. Connected accounts can hold and payout funds in up to 18 supported currencies needed to pay suppliers, process refunds, and so on, without having to re-convert funds.\n\n## Enable Alternative Currency Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable Alternative Currency Payouts in the [Connect payouts settings](https://dashboard.stripe.com/settings/connect/payouts) of the Dashboard. Your account must be in a supported region to access these settings.\n\nAfter you enable Alternative Currency Payouts, your users can access all alternative currencies that are supported in their region. For a full list of supported currencies, see [supported alternative currencies](https://docs.stripe.com/payouts/alternative-currencies#alternative-currency-payouts-fees).\n\n#### Note\n\nConnected accounts must be in the same region as your platform to use Alternative Currency Payouts. For example, both you and your connected account could be in Australia, or if you’re in Europe, your connected account could be in any European country.\n\nYou can prevent new connected accounts from using Alternative Currency Payouts by disabling it with the same settings in the Dashboard. However, this doesn’t disable it for connected accounts that are already using it. To disable Alternative Currency Payouts for connected accounts that are already using it, use the [Delete external bank accounts API](https://docs.stripe.com/api/external_account_bank_accounts/delete) to remove the connected account’s external accounts that are in an alternative currency or offshore.\n\n## Add external accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you enable Alternative Currency Payouts, your connected accounts can start using it by adding an alternative currency external account.\n\nIf your connected account has access to the Express Dashboard, you can send them a [Login Link](https://docs.stripe.com/api/account/create_login_link) to update their payout methods to add an alternative currency external account.\n\nAfter your connected account has an external account in an alternative currency, charges presented in that currency accrue towards the alternative currency’s balance. Your connected accounts can pay out their alternative currency balances in the same way as a primary currency balance. However, each supported currency is subject to a payout minimum and fee, as described in the following section.\n\nTo learn more about processing charges in multiple currencies with Connect, see [Working with multiple currencies](https://docs.stripe.com/connect/currencies).\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe charges platforms a 1% fee for all Alternative Currency Payouts made by their users. Each currency has a minimum fee. For a full list of fees, see the [supported alternative currencies table](https://docs.stripe.com/payouts/alternative-currencies#alternative-currency-payouts-fees).\n\nStripe deducts your connected accounts’ Alternative Currency Payouts fees from your platform balance in the alternative currency. For example, if your connected account makes an alternative currency payout in USD, we charge the fee to your platform balance in USD when possible. If your platform account doesn’t support the payout currency, Stripe converts the fee to your default currency and deducts it from your primary balance. See [conversion on Stripe fees](https://docs.stripe.com/currencies/conversions#conversion-stripe-fees) for more details.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to request updates on beta features as we expand Alternative Currency Payouts features and regional support.",
  "title": "Alternative Currency Payouts for Connect marketplaces and platforms | Stripe Documentation",
  "description": "Offer your connected accounts the ability to pay out in alternative currencies.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/dynamic-payment-methods",
  "markdown": "# Upgrading to dynamic payment methods\n\n## Increase conversion with dynamic payment methods for existing platforms.\n\nThis guide provides instructions on how to integrate dynamic payment methods for existing platforms. If you need help setting up a new platform, refer to either the [Collect payments then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide) guide or the [Enable other businesses to accept payments directly](https://docs.stripe.com/connect/enable-payment-acceptance-guide) guide.\n\n## Integration instructions for dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to select your integration. If you need help determining your platform setup, including checkout solution, connected account types, and charge types, refer to [Create a charge](https://docs.stripe.com/connect/charges).\n\n[](#enable-payment-methods-connected-accounts)\n\nIf necessary, consult the following resources for payment method information:\n\n*   [A guide to payment methods](https://stripe.com/payments/payment-methods-guide#choosing-the-right-payment-methods-for-your-business) for help in choosing the right payment methods for your platform.\n*   [Country availability for payment methods](https://docs.stripe.com/connect/payment-method-available-countries) for a list of payment methods and the countries they’re available in.\n*   [Payment method and product support](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) table to make sure your chosen payment methods work for your Stripe products and payments flows.\n\nStripe enables certain payment methods for your connected accounts by default. Visit the [Manage payment methods for your connected accounts](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) page in your Dashboard to configure which payment methods your connected accounts accept. Changes to default settings apply to all new and existing connected accounts.\n\nFor each payment method, you can select one of the following dropdown options:\n\n|     |     |\n| --- | --- |\n| **On by default** | Your connected accounts accept this payment method during checkout. Some payment methods can only be off or blocked, this is because the owners of your platform’s connected accounts must activate them in their Dashboard settings page. |\n| **Off by default** | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, however, they have the ability to turn it on. |\n| **Blocked** | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, they don’t have the option to turn it on. |\n\n![Dropdown options for payment methods, each showing an available option (blocked, on by default, off by default)](https://b.stripecdn.com/docs-statics-srv/assets/dropdowns.ef651d721d5939d81521dd34dde4577f.png)\n\nPayment method options\n\nIf you make a change to a payment method, you must click **Review changes** in the bottom bar of your screen and **Save and apply** to update your connected accounts.\n\n![Dialog that shows after clicking Save button with a list of what the user changed](https://b.stripecdn.com/docs-statics-srv/assets/dialog.a56ea7716f60db9778706790320d13be.png)\n\nSave dialog\n\n[](#allow-connected-accounts-manage)\n\nStripe recommends that you allow the owners of your platform’s connected accounts to customize their own payment methods from the Dashboard. If you enable this option, then each connected account with Stripe Dashboard access can log in to their Dashboard and view their [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. The Dashboard displays the set of payment method defaults you applied to all new and existing connected accounts. The owners of your platform’s connected accounts can override these defaults, excluding payment methods you have blocked.\n\nCheck the **Account customization** checkbox to enable this option. You must click **Review changes** in the bottom bar of your screen and then select **Save and apply** to update this setting.\n\n![Screenshot of the checkbox to select when allowing connected owners to customize payment methods](https://b.stripecdn.com/docs-statics-srv/assets/checkbox.275bd35d2a025272f03af029a144e577.png)\n\nAccount customization checkbox\n\n[](#integrate)\n\nPreviously, you might have used the `payment_method_types` parameter when defining your Checkout session to accept different payment methods. To begin managing your payment methods in the Dashboard, remove this parameter from your integration.\n\nAfter you remove the `payment_method_types` parameter from your integration, some payment methods turn on automatically, including cards and wallets. The `currency` parameter restricts the payment methods that are shown to the customer during the checkout session.\n\n`Stripe::Checkout::Session.create({ mode: 'payment', # Remove the payment_method_types parameter # to manage payment methods in the Dashboard payment_method_types: ['card'], line_items: [{   price_data: {   # The currency parameter determines which   # payment methods are used in the Checkout Session.     currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n[](#collect-shipping-address)\n\nIf you collect [shipping addresses](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout), you need to define which countries you can ship to when you create the Checkout session. Specify the two-letter ISO country codes in the `shipping_address_collection.allowed_countries` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nYou can optionally add shipping rates with the `shipping_options` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_options).\n\nIf you use Afterpay or Clearpay, you must collect shipping addresses, but you don’t need to specify shipping rates for those payment methods.\n\n#### Note\n\nShipping address collection is required to use Afterpay or Clearpay as a payment method in Checkout, but shipping rates aren’t.\n\n[](#test)\n\n[Test your integration](https://docs.stripe.com/payments/dashboard-payment-methods#testing) to ensure it performs as you expect. Log in to one of your test accounts and navigate to **Payment methods** settings to view your settings for your connected accounts. Test your checkout flow with your test API key and a test account. If a payment method you expect to be available is not available, check the [payment method product support table](https://docs.stripe.com/connect/account-capabilities#payment-methods) to make sure your products and merchants are in a compatible currency and country.\n\n[](#auto-payment)\n\nYour connected accounts with Stripe Dashboard access are able to use most payment methods by default; however, some payment methods (such as Alipay and WeChat Pay) require your users to manually activate the payment method in their Dashboard. Confirm which payment methods require manual activation using the [payment method capabilities](https://docs.stripe.com/connect/account-capabilities#payment-methods) table. If the **Available by default** column reads **no**, the payment method requires manual activation.\n\nIf you allow the owners of your platform’s connected accounts to manage payment methods, then instruct them to enable these payment methods from their [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\n![Screenshot of connected account payment method customization through Dashboard showing available payment methods as on and available.](https://b.stripecdn.com/docs-statics-srv/assets/turn-on-payments.afef26196ebae8f5564d328d6ba73b92.png)\n\nPayment method customization\n\nIf you don’t allow the owners of your platform’s connected accounts to customize payment methods, then instruct them to visit their [manual settings page](https://dashboard.stripe.com/settings/payment_methods).\n\n![Screenshot of manual settings page with payment methods listed with the option to request access, request invite, or configure.](https://b.stripecdn.com/docs-statics-srv/assets/manual-settings.db0a0c2abebb94e197e1bef683ea7db9.png)\n\nManual settings for payment methods",
  "title": "Upgrading to dynamic payment methods | Stripe Documentation",
  "description": "Increase conversion with dynamic payment methods for existing platforms.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/building-extensions",
  "markdown": "# Legacy extensions | Stripe DocumentationThe Stripe Docs logo\n\n## Legacy extensionsDeprecated\n\n## Learn how to build Stripe extensions, and see our Partner Directory for extensions created by our verified partners.\n\n#### Stripe Apps replaces extensions\n\nYou can no longer build new Stripe extensions. Stripe Apps replaces extensions for developing on Stripe. However, existing extensions will continue to work until 2024. If you already have an extension, we recommend migrating it to Stripe Apps.\n\n[View the Stripe Apps migration docs](https://docs.stripe.com/stripe-apps/migrate-extension)\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or Amazon Redshift in a few clicks with Stripe Data Pipeline. [Learn more](https://stripe.com/data-pipeline).\n\nStripe’s products and features allow companies to accept online payments, but offer other reasons to integrate as well. Companies like [Baremetrics](https://stripe.com/partners/baremetrics) and [Segment](https://stripe.com/partners/segmentsources) build on top of Stripe to provide their services to Stripe accounts with a Standard dashboard.\n\nBuilding an extension on Stripe consists of four steps:\n\n1.  [Configure OAuth and specify a redirect URI](#configure-oauth-redirect).\n2.  [Configure branding settings](#configure-branding).\n3.  [Create an OAuth link for your users](#create-oauth-link).\n4.  [Use the API on behalf of connected accounts](#use-api).\n\nYou’re also required to add business details to activate your account, if you haven’t already.\n\nTo get started, visit the [Extensions page](https://dashboard.stripe.com/test/extensions) located in the Developers tab of the Stripe dashboard.\n\n[](#configure-oauth-redirect)\n\nYou can configure this setting in the **Integration** section of the [Extensions Settings](https://dashboard.stripe.com/test/settings/extensions) page.\n\nStart your integration by toggling the button to enable onboarding Standard accounts with OAuth. Extensions shouldn’t use OAuth with Express accounts.\n\nStripe provides a unique identifier for your extension called a `client_id`. You set the `redirect_uri` and users are directed to that page after they connect their accounts. You must specify all redirect URIs in your extension settings. The development and production versions of these two values make [testing](https://docs.stripe.com/connect/testing#using-oauth) easier. Take note of these values so you can create an OAuth link in the third step.\n\n[\n\n## Configure branding settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#configure-branding)\n\nYou can customize how your business appears to your users in the **Branding** section of the [Extensions Settings](https://dashboard.stripe.com/test/settings/extensions) page.\n\nUsers see your logo when they link their Stripe accounts to your application. After they link their accounts, your icon displays in their connected applications list.\n\n[](#create-oauth-link)\n\nStripe offers a standard OAuth 2.0 flow to connect to Stripe accounts. Using the `client_id` and `redirect_uri` values from step one, you can create an OAuth link for your users to onboard with. We recommend showing this link with a **Connect with Stripe** button that sends users to the `authorize_url` endpoint:\n\nHere’s an example of how you can display the above link to your user, along with the [Connect with Stripe button](https://d37ugbyn3rpeym.cloudfront.net/docs/connect/Connect-with-Stripe-button.zip):\n\n[Connect with](https://connect.stripe.com/oauth/authorize?response_type=code&client_id=ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&scope=read_write)\n\nAfter the user clicks the link on your site, we redirect them to a page to allow or deny the connection to your extension. Stripe’s authorization flow prompts them to either choose an existing account to connect with your extension, or create a new one.\n\nAfter the user connects their existing or newly created account to your extension, we redirect them back to the URL you set as your extension’s `redirect_uri` .\n\nAt the end of the OAuth workflow, you’re provided with authorization credentials for the user’s account:\n\n`{   ...   \"stripe_user_id\": \"acct_0123456789\",   ... }`\n\nYou need to store the `stripe_user_id` so you can identify user accounts.\n\n[](#use-api)\n\nAfter users link their Stripe accounts to your application, you can make [API requests](https://docs.stripe.com/api) on their behalf. To perform API requests, you need your extension account’s secret key, and a `Stripe-Account` header that identifies the account that you’re making the request for. All Stripe libraries support this style of authentication on a per-request basis.\n\n### Fetching stored data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStored data includes information like charges and customer details. With `read_only` access, you can make most `GET` requests in Stripe’s API. You can retrieve a single object (for example, [retrieve a Payment Intent](https://docs.stripe.com/api/payment_intents/retrieve)) or a list of objects (for example, [list all Payment Intents](https://docs.stripe.com/api/payment_intents/list)).\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"created[lte]\"=1612048287 \\   -d \"limit\"=50 \\   -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\"`\n\nWhile the API performs at a high level, repeatedly fetching large data sets slows your application’s responsiveness. We recommended storing fetched data on your side for analysis and reporting.\n\n### Listening for real-time data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to stored data, you can access real-time data via [webhooks](https://docs.stripe.com/connect/webhooks). After you define an [extension webhook endpoint in your account](https://dashboard.stripe.com/account/webhooks), Stripe sends [event notifications](https://docs.stripe.com/api#events) to your endpoint for every connected account. The event object’s `account` property identifies the account where the event occurred.\n\nFor example, the event below shows that a customer was created in the `acct_0123456789` account. Again, we recommend storing this data on your side for analysis and reporting. By watching events as they occur, your application can respond faster, and you won’t need to make as many API calls.\n\n`{   \"id\": \"evt_mfLuJDQFXBZNnQ\",   \"livemode\": true,   \"object\": \"event\",   \"type\": \"customer.created\",   \"account\": \"acct_0123456789\",   \"pending_webhooks\": 2,   \"created\": 1349654313,   \"data\": {...} }`\n\n## Charging for your application ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour extension’s Stripe account can process its own charges, so you can still charge for your application with `read_only` access. After customers connect their Stripe accounts, ask for their payment details and then [create a subscription](https://docs.stripe.com/api/subscriptions/create) for them in your Stripe account. Make sure to store the created customer ID with the associated Stripe account ID, so that you can track which users are paid and active, and which ones are not.\n\nIf you create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), you can also specify an `application_fee_percent` as a fee for your application. This is charged on top of any Stripe fees. Read the [Subscriptions](https://docs.stripe.com/connect/subscriptions) documentation to learn more.\n\n## Disconnected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers can disconnect their accounts from your integration at any time. When this happens, Stripe sends an `account.application.deauthorized` [webhook](https://docs.stripe.com/webhooks \"webhook\"). You can use this notification to trigger cleanup on your end, such as disabling the user’s account on your site or removing their data.\n\nYou can also disconnect accounts from your integration, by making a request to the [OAuth deauthorization](https://docs.stripe.com/connect/oauth-reference#post-deauthorize) endpoint.",
  "title": "Legacy extensions | Stripe Documentation",
  "description": "Learn how to build Stripe extensions, and see our Partner Directory for extensions created by our verified partners.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/dashboard/remediation-links",
  "markdown": "# Remediation link process walkthrough | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use remediation links to collect verification information from your connected accounts.\n\nRemediation links are a no-code solution for platforms to collect verification information from their connected accounts. Platforms generate account-specific remediation links in the Dashboard, then send them to connected accounts through any communication channels, such as email, chat, in-app notifications, or support interactions. When a connected account clicks a remediation link, it takes them to a Stripe-hosted page where they can provide updated information directly to Stripe.\n\nRemediation links are active for 90 days and an account can access them multiple times. If a link expires, you can generate a new one.\n\nOnly the following [user roles](https://docs.stripe.com/get-started/account/teams/roles) have permission to generate remediation links:\n\n*   Administrator\n*   Connect Onboarding Analyst\n*   Developer\n*   Data Migration Specialist\n*   Support Associate\n*   Support Specialist\n\n#### Note\n\nYou can only generate remediation links in the Dashboard, not using the API. To use the API to direct connected accounts to onboarding, create [Account links](https://docs.stripe.com/connect/custom/onboarding?verification=hosted#stripe-hosted-onboarding), which are temporary and can only be used once.\n\nThe page that a remediation link opens depends on the account’s configuration:\n\n| Connected account has access to: | Remediation link opens: |\n| --- | --- |\n| A Stripe embedded onboarding component and embedded notification banner | A platform website page that contains the notification banner; configured in the [platform Dashboard](https://dashboard.stripe.com/settings/connect/site-links) |\n| Stripe Dashboard and no embedded onboarding or notification banner (including Standard accounts) | Account Status page in the Stripe Dashboard |\n| Express Dashboard and no embedded onboarding or notification banner (including Express accounts) | Stripe Express onboarding flow |\n| No Stripe Dashboard and no embedded onboarding or notification banner (including Custom accounts) | Stripe-hosted onboarding; account holder must create a Stripe account |\n\nThis page walks through the process of generating and sending remediation links and describes the experience of a connected account when they use a link.\n\nYou can generate a remediation link for an individual account or export a list of remediation links for multiple accounts.\n\n### Generate a link for an individual account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can generate a link for an account from the **Accounts to review** tab of your [Connect Dashboard](https://dashboard.stripe.com/connect/accounts_to_review) or from that account’s details page.\n\nOn the **Accounts to review** tab, find the account in the **Action required** list or **In review** list. Hover over the account’s overflow menu , then click the link icon .\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/remediation-links-listview.086eeab10e2d47ec1286946ba3471942.png)\n\nGenerate a remediation link from Accounts to review list\n\nIn the **Activity** section of the connected account’s details page, select the **Actions required** tab and click an issue to open its possible remediation paths. Generate the link by clicking **Send a remediation link**. If the account can’t address the issue through a remediation link, then that path doesn’t appear.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/remediation-links-connected-account-detail.86a05ab693818dc38d2376ad33ebd98d.png)\n\nGenerate a remediation link from the connected account’s details page\n\n### Export links for multiple accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the **Accounts to review** tab of your Connect Dashboard, filter the view to include the accounts that you want to generate remediation links for, then click **Export**. In the export dialog, select **Remediation link** and any other desired fields, then export the list of accounts.\n\n![Export a list of accounts](https://b.stripecdn.com/docs-statics-srv/assets/bulk-export-A2R.56ffa4d9f3eb55c08a1eb71ed46f0904.png)\n\nExport a list of accounts\n\nYou can send remediation links by any communication channel. Because they direct accounts to a Stripe-hosted page, we recommend that when you send a link, you inform the account that you partner with Stripe for payments. That explains why your link takes them to a Stripe-hosted page.\n\nHere’s an example of an email that a platform might use to send a remediation link:\n\n![Example of a remediation link email](https://b.stripecdn.com/docs-statics-srv/assets/email-action-required.15e5878a481c6a8726e15965bdfaffe1.png)\n\nRemediation link email\n\nThe following example scenarios help you and your support team understand remediation links from the perspective of a connected account. Select the Dashboard that’s applicable to your connected accounts.\n\n#### Note\n\nThe screenshots are representative examples that might not match the actual screens presented to your connected accounts.\n\nFor connected accounts without access to a Stripe-hosted Dashboard or to the Notification banner embedded component, including Custom accounts, remediation links take them to Stripe-hosted onboarding. To securely update account information, the account owner must create a Stripe user account. If the account owner has already clicked the remediation link and verified their identity in the current browser session, the link opens the information collection onboarding step.\n\n1.  **The account owner enters their phone number and email address**\n\nThis information establishes the identity of the person updating verification information for the connected account. We use the phone number for SMS authentication with a one-time-password. The phone number doesn’t have to match any number already associated with the account. We only use the email address as a backup authentication method. We don’t send any other emails to that address.\n\nIf the email address is associated with an existing Stripe user account, we prompt them to log in to that account using its existing password.\n\n![Phone and email form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-phone.aba39ace900df058332908895a12e362.png)\n\nEnter phone number and email address\n\n1.  **The account owner verifies the phone number**\n\nWe send a code in an SMS message to the phone number and prompt the account owner to enter it. If they access the link again in another browser session, or access another remediation link, we send a new code for re-authentication.\n\n![Phone number verification form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-sms.8caf66b1b4b13bebf8a3ffe9dfbaefb0.png)\n\nVerify the phone number\n\n1.  **The account owner verifies their identity**\n\nTo make sure that only authorized people access account information, we prompt the account owner to verify their identity by requesting details associated with the account and its representative. If they fail to enter the requested details a few times, they see the following error message:\n\n`One of the fields didn't match the information we received from [platform_name]. You can try again, or check that your information with [platform_name] is up to date.`\n\nIf the account owner has already verified their identity, or has onboarded through Stripe Express (such as to access Stripe’s Tax Reporting Dashboard), we skip this step.\n\n![Identity verification form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-identity.bbe88e8a2278a893f3490b6229f11e03.png)\n\nVerify identity\n\n1.  **The account owner provides information**\n\nAfter verifying the account owner’s identity, we present forms for entering required information.\n\nIf the account has any outstanding risk reviews, we present them first. The following is an example of a risk review form:\n\n![Example of a risk review form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-risk.1f54e301a7ad0f5946bfb011dbb44e76.png)\n\nExample risk review form\n\nAfter the forms for any risk reviews, we prompt the account owner to provide any additional information that requires updating. For example, if the statement descriptor isn’t aligned to the business, we present the screen for collecting public details including the statement descriptor, highlighting any fields with errors.\n\nAfter collecting all the information, we display a summary screen, highlighting any fields that are still outstanding or pending verification from Stripe. To update a field, they can click **Edit** in the corresponding section.\n\nIf an account owner clicks a remediation link and has no outstanding risk reviews or outstanding information requirements, they see the summary page.\n\n![The summary page](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-summary.b6a700157643004b92918a31d3edf3d0.png)\n\nSummary page\n\n#### Note\n\nAn account owner can update information in these forms other than the required fields. If they do so, they can trigger additional reviews or verifications. For example, changing the SSN can require the account owner to re-accept the Stripe terms of service or to upload an identity document. The account owner can use the same remediation link to address any additional requirements.",
  "title": "Remediation link process walkthrough | Stripe Documentation",
  "description": "Learn how to use remediation links to collect verification information from your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/integrate-express-dashboard",
  "markdown": "# Integrate the Express Dashboard in your platform\n\nTypically, you generate a login link URL on demand when a connected account intends to visit the Express Dashboard. For example, you include an **Open Dashboard** button in your application. When a connected account user clicks it, your application calls the API to generate a login link and redirects them to that URL.\n\n#### Security tip\n\nDon’t email, text, or otherwise send login link URLs outside of your platform. Redirect authenticated users to it only from within your platform application.\n\nWhen you redirect a connected account user to a login link, Stripe sends an SMS authentication code to their phone number. They verify their identity on the Express Dashboard login page by entering the code.\n\nIf they don’t have access to their account phone number, they can change it by clicking **I no longer have access to this phone number**. This sends a verification code to their account email. They can change the account phone number by entering the code. If the user changes the number, Stripe redirects them to the Express Dashboard login page and sends an SMS authentication code to the new number.",
  "title": "Integrate the Express Dashboard in your platform | Stripe Documentation",
  "description": "Learn how to direct your connected accounts to their Express Dashboard using login links.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/dashboard",
  "markdown": "# Manage connected accounts with the Dashboard\n\n## Learn about using the Stripe Dashboard to find and manage connected accounts.\n\nYou can use the Dashboard to inspect, support, and better understand your platform’s connected accounts. Some common tasks supported by the Dashboard include:\n\n*   [Understand and manage your Connect payments business](https://docs.stripe.com/connect/dashboard/understand-your-connect-business)\n*   [View all accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts)\n*   [Review actionable accounts](https://docs.stripe.com/connect/dashboard/review-actionable-accounts)\n*   [Create accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#creating-accounts)\n*   [Find individual accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#finding-accounts)\n*   [Update account information](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts)\n*   [Send funds to accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds)\n\n[Viewing all accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) provides a high-level view of your connected accounts. By default, all accounts are displayed on the [accounts overview](https://dashboard.stripe.com/connect/accounts/overview) page, but you can filter by account status, balance, and other attributes. Filtering accounts is useful because it allows you to:\n\n*   View accounts that are restricted or have other issues that you can help resolve.\n*   View your largest accounts.\n*   View accounts based on their status.\n\nThe other workflows, like inspecting accounts and sending funds, are actions you can take on [individual accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts). These actions are generally made after you know which accounts need to be inspected or modified.\n\nBefore viewing and making changes to accounts, learn more about the [status badges](#status-badges) displayed in the Dashboard.\n\n## Status badges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStatus badges provide a quick way to understand the status of an account. You can hover over the badges to view contextual information, and you can click the [status tabs](https://docs.stripe.com/connect/dashboard/viewing-all-accounts#tabs-workflows) to view accounts grouped by that status. Status badges include:\n\n| Status | Badge |\n| --- | --- |\n| [Restricted](#restricted) | Restricted |\n| [Restricted soon](#restricted-soon) | Restricted soon |\n| [Pending](#pending) (enabled or disabled) | Pending or Pending |\n| [Enabled](#enabled) | Enabled |\n| [Complete](#complete) | Complete |\n| [Rejected](#rejected) | Rejected |\n\n### Restricted ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Restricted** means the account has [payouts](https://docs.stripe.com/payouts \"payout\") or payments disabled. Additional information usually needs to be collected to enable these accounts. Hovering over the status badge displays:\n\n*   Which capability is disabled (payouts or payments).\n\nTo find what information is required to enable the account, navigate to the **Actions required** tab on the connected account details page.\n\n### Restricted soon ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Restricted soon** means the account has a due date for providing additional information.\n\nTo find what information is required to enable the account, navigate to the **Actions required** tab on the connected account details page.\n\n### Pending ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Pending** means the account is being reviewed or verified by Stripe. This occurs when:\n\n*   Stripe is verifying the information that was provided, such as an ID document upload.\n*   Stripe is performing a watchlist check against a list of prohibited individuals and businesses.\n*   Stripe is reviewing the account for suspected fraudulent activity.\n\nPayouts can be enabled or disabled for accounts with a pending status and requires no action on your part. Stripe automatically updates the account’s status when the review finishes.\n\n### Enabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Enabled** means the account is in good standing, though additional information might be required if another payment volume [threshold](https://docs.stripe.com/connect/identity-verification#verification-requirements) is reached. Hovering over the status badge displays:\n\n*   What information Stripe might request in the future.\n\nIn the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash, the array `eventually_due` contains at least one requirement, but payments and payouts are enabled and `current_deadline` is empty.\n\n### Complete ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Complete** means the account provided all the required information and is in good standing.\n\nIn the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash, the array `eventually_due` is empty.\n\n### Rejected ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Rejected** means you (the platform) or Stripe rejected the connected account. Hovering over the status badge displays:\n\n*   Whether the account was rejected by you (the platform), or by Stripe.\n\nYou can navigate to the **Actions required** tab on the connected account details page to see the reason the account was rejected. In general, accounts are rejected by Stripe if they’re suspected of fraudulent activity.\n\n## Use Platform Branding for Connected Accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can initialize newly created connected accounts with your platform branding settings. To do so, navigate to **Connect Settings** > **Branding** and enable **Copy Platform Branding**. After you enable it, all new accounts onboarding to your platform receive the same branding settings as your platform.\n\nUse [Account Update](https://docs.stripe.com/api/accounts/update) to update the account’s branding after creation.",
  "title": "Manage connected accounts with the Dashboard | Stripe Documentation",
  "description": "Learn about using the Stripe Dashboard to find and manage connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/charges",
  "markdown": "# Create a charge | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create a charge and split payments between your platform and your sellers or service providers when you accept payments.\n\nTo accept a payment from a customer, you must first create a charge. The type of charge you create—[direct](#direct), [destination](#destination), or [separate charges and transfers](#separate-charges-transfers)—determines how these funds are split among all parties involved, impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s), and determines which account Stripe debits for refunds and chargebacks.\n\n## Charge types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are many factors to consider when choosing a charge type, as listed in the table below. Your platform’s business model is particularly important because it can affect how funds flow through Stripe. To review charge type recommendations for your business, refer to your [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n\n| Charge type | Use when | Examples |\n| --- | --- | --- |\n| [Direct charges](https://docs.stripe.com/connect/direct-charges) | *   Customers directly transact with your connected account, often unaware of your platform’s existence.<br>*   The transaction involves a single user.<br>*   You’d like to choose if Stripe fees are debited from your connected accounts or your platform | *   An e-commerce platform like Shopify or Squarespace<br>*   An accounting platform that enables invoice payments like Freshbooks |\n| [Destination charges](https://docs.stripe.com/connect/destination-charges) | *   Customers transact with your platform for products or services provided by your connected account.<br>*   The transaction involves a single user.<br>*   Stripe fees are debited from your platform account. | *   A ride-hailing service like Lyft<br>*   A services platform like Thumbtack |\n| [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) | Any one of these instances:<br><br>*   The transaction involves multiple users.<br>*   A specific user isn’t known at the time of charge.<br>*   Transfer can’t be made at the time of charge.<br>*   Stripe fees and processing fees are debited from your platform account. | *   An e-commerce marketplace that allows a single shopping cart for goods sold by multiple businesses |\n\nYou can use a single approach, more than one approach, or switch approaches as appropriate for your organization.\n\n### Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a charge directly on a connected account. Customers are often unaware of your platform’s existence. You can add an application fee to the charge which is transferred to your platform’s account balance.\n\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n\nWith this charge type:\n\n*   You create a charge on your user’s account so the payment appears as a charge on the connected account, not in your account balance.\n*   The connected account’s balance increases with every charge.\n*   Funds always settle in the country of the connected account.\n*   Your account balance increases with application fees from every charge.\n*   The connected account’s balance is debited for refunds and chargebacks.\n*   You can choose whether to have Stripe debit fees directly from connected accounts or from your platform account.\n\n![Direct charges funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges.a2a8b68037ac95fe22140d6dde9740d3.svg)\n\nHow are funds routed with direct charges?\n\n#### Caution\n\n### Destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a charge on the platform and immediately transfers funds to a specified connected account. You decide whether some or all of those funds are transferred, and whether to deduct an application fee.\n\nThis charge type is best suited for marketplaces such as Airbnb, a home rental marketplace or Lyft, a ridesharing app.\n\nWith this charge type:\n\n*   You create a charge on your platform’s account so the payment appears as a charge on your account. Then, you determine whether some or all of those funds are transferred to the connected account (see funds flow diagrams below).\n*   Your platform account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\n![Destination charges balance funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/platform_charges.6a14fd660d7433ba617e816ff09f10b5.svg)\n\nSend the balance after platform fee to your connected account.\n\n![Destination charges funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/application_fee_amount.837aa2339469b3c1a4319672971c1367.svg)\n\nSend the full payment amount to your connected account, then charge your platform fee.\n\n#### Caution\n\nIn most scenarios, destination charges are only supported if both your platform and the connected account are in the same region (for example, both in the US). For cross-region support, you can specify the [settlement merchant](https://docs.stripe.com/connect/destination-charges#settlement-merchant) to the connected account using the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute on the charge. For more information about cross-region support, see [Cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border).\n\n### Separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate charges on your platform and split funds between multiple connected accounts, or hold them when you don’t know the specific user at the time of the charge. The charge on your platform account is decoupled from the transfer(s) to your connected accounts.\n\nThis charge type is best suited for marketplaces that need to split payments between multiple parties, such as Doordash, a restaurant delivery platform.\n\nWith this charge type:\n\n*   You create a charge on your platform’s account first. Create a separate transfer to move funds to your connected account. The payment appears as a charge on your account and there’s also a transfer to a connected account (amount determined by you), which is withdrawn from your [account balance](https://docs.stripe.com/connect/account-balances).\n*   You can transfer funds to multiple connected accounts.\n*   Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\n![Transfer funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/charges_transfers.a95f5bf398651fba0fb303e32a742546.svg)\n\nTransfer funds to multiple connected accounts.\n\n#### Caution\n\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see [Cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border).\n\nUsing separate charges and transfers requires a more complex [Connect](https://docs.stripe.com/connect \"Connect\") integration.\n\nUse this charge type if your business has specific use cases:\n\n*   A one-to-many relationship. For example, a payment made to a delivery service needs to be split between the store (the source of the items being delivered) and the delivery person.\n*   A many-to-one relationship. For example, a carpool trip with a ride-hailing service.\n*   Charges created before the destination account is known. For example, a janitorial service could process a payment before deciding which janitor to assign to the job.\n*   Need to transfer funds before receiving a payment, or while the charge is pending. For example, an ad network needs to purchase ad space before they can sell ad time or before receiving any payment from customers.\n*   Transfer amounts greater than the associated payments. For example, a platform provides a discount to its customer but pays its user the full amount.\n\nIn some cases, the transfer amount can be greater than the charge amount, or the transfer is made before the payment is processed. You must monitor your account balance carefully to make sure it has enough available funds to cover the transfer amount. You can also associate a transfer with a charge so the transfer doesn’t occur until the funds from that charge are available.\n\n#### on\\_behalf\\_of parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo make the connected account the business of record for the payment use the `on_behalf_of` parameter. When `on_behalf_of` is set to the ID of the connected account, Stripe automatically:\n\n*   Settles charges in the country of the specified account, thereby minimizing declines and avoiding [currency conversions](https://docs.stripe.com/connect/currencies#currency-conversions).\n*   Uses the fee structure for the connected account’s country.\n*   Uses the [connected account’s statement descriptor](https://docs.stripe.com/connect/statement-descriptors).\n*   If the account is in a different country than the platform, the connected account’s address and phone number shows up on the customer’s credit card statement (as opposed to the platform’s).\n*   The number of days that a [pending balance](https://docs.stripe.com/connect/account-balances) is held before being paid out depends on the `delay_days` setting on the connected account.\n\n## Stripe fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two components to Stripe fees with Connect: which pricing plan applies to the payment and which account pays Stripe fees.\n\nWhen using Direct charges, you can choose how Stripe fees are billed to your connected accounts.\n\nRead more about fee billing behaviors with Direct charges.\n\nDestination charges and separate charges and transfers typically use the platform’s pricing plan and are assessed on the platform. When the `on_behalf_of` field is set, the country of the connected account is used to determine the country specific fees charged to your platform account.\n\nFor more information on Connect fees and how to request custom pricing, please see [Connect pricing](https://stripe.com/connect/pricing).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can issue a [refund](https://docs.stripe.com/api/refunds) to pay back the money spent on the returned good or to compensate for unsatisfactory service. Below describes how refunds are handled for each charge type:\n\n| Charge Types | Pending Refunds |\n| --- | --- |\n| **Direct charges** | If the connected account’s balance is sufficiently negative at [creation time](https://docs.stripe.com/connect/direct-charges#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds are available in the connected account’s balance, Stripe automatically processes any refunds with a `pending` status and updates the status to `successful`. |\n| **Separate charges and transfers** | If the connected account’s balance and your platform’s account balance are sufficiently negative at [creation time](https://docs.stripe.com/connect/separate-charges-and-transfers#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds become available in your connected account’s or platform’s balance, Stripe automatically processes the refunds with a `pending` status and updates their status to `successful`. |\n| **Destination charges** | If your platform’s account balance is sufficiently negative at [creation time](https://docs.stripe.com/connect/destination-charges#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds become available in your platform’s balance, Stripe automatically processes the refunds with a `pending` status and updates their status to `successful`.<br><br>If the connected account’s balance is sufficiently negative and a refund request also attempts a transfer reversal, the refund request returns an error, instead of creating a refund with `pending` status. |\n\n## Disputes and chargebacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor payments created using [direct charges](https://docs.stripe.com/connect/direct-charges), Stripe debits the balance of the connected account for disputes. Funds are withdrawn from the connected account’s balance, not your platform’s balance.\n\nFor disputes where payments were created on your platform using [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), with or without `on_behalf_of`, your platform balance is automatically debited for the disputed amount and fee. When this happens, your platform can attempt to recover funds from the connected account by reversing the transfer either through the [Dashboard](https://dashboard.stripe.com/test/transfers) or by [creating a transfer reversal](https://docs.stripe.com/api#create_transfer_reversal).\n\n#### Caution\n\nCreating payments using destination charges or separate charges or transfers, with or without `on_behalf_of`, always debits refund and disputed amounts from your platform balance, even when [Stripe is liable for negative balances](https://docs.stripe.com/connect/risk-management \"negative balance liability\") on your connected accounts.\n\nIf there’s a negative balance on the connected account, Stripe attempts to debit the external account on file for the connected account only if `debit_negative_balances` is set to `true`.\n\nFor more details, see [Disputes and fraud](https://docs.stripe.com/disputes) and [Dispute categories](https://docs.stripe.com/disputes/categories). You can also use [Fraud Stripe Apps](https://marketplace.stripe.com/categories/fraud) to automate dispute management and handle chargebacks.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create direct charges](https://docs.stripe.com/connect/direct-charges)\n*   [Create destination charges](https://docs.stripe.com/connect/destination-charges)\n*   [Create separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n*   [Set statement descriptors](https://docs.stripe.com/connect/statement-descriptors)\n*   [Supported payment methods](https://stripe.com/payments/features#local-payment-methods)\n*   [Integrate tax calculation and collection](https://docs.stripe.com/tax/connect)",
  "title": "Create a charge | Stripe Documentation",
  "description": "Learn how to create a charge and split payments between your platform and your sellers or service providers when you accept payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/appendix/css_font_source_object",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/appendix/custom_font_source_object",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/account_sessions/object",
  "markdown": "# The Account Session object | Stripe API Reference\n\n### Attributes\n\n*   The ID of the account the AccountSession was created for\n    \n*   The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.\n    \n    The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [setup Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n*   The timestamp at which this AccountSession will expire.\n    \n\n### More attributes\n\nThe Account Session object\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Create an Account Session](https://docs.stripe.com/api/account_sessions/create)\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Account Session object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/embedded-appearance-options",
  "markdown": "# Supported appearance options | Stripe DocumentationThe Stripe Docs logo\n\n`buttonPrimaryColorBackground`\n\nstring\n\n`#0074D4`\n\nThe color used as a background for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonPrimaryColorBorder`\n\nstring\n\n`#0074D4`\n\nThe border color used for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonPrimaryColorText`\n\nstring\n\n`#FFFFFF`\n\nThe text color used for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorBackground`\n\nstring\n\n`#EBEEF1`\n\nThe color used as a background for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorBorder`\n\nstring\n\n`#EBEEF1`\n\nThe color used as a border for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorText`\n\nstring\n\n`#393B3E`\n\nThe text color used for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`colorSecondaryText`\n\nstring\n\n`#717171`\n\nThe color used for secondary text. This accepts hex values or RGB/RGBA/HSL strings.\n\n`actionPrimaryColorText`\n\nstring\n\n`#0074D4`\n\nThe color used for primary actions and links. This accepts hex values or RGB/HSL strings.\n\n`actionSecondaryColorText`\n\nstring\n\n`#444444`\n\nThe color used for secondary actions and links. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorBackground`\n\nstring\n\n`#E4ECEC`\n\nThe background color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorText`\n\nstring\n\n`#545969`\n\nThe text color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorBorder`\n\nstring\n\n`#CBD5D6`\n\nThe border color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeSuccessColorBackground`\n\nstring\n\n`#CEF6BB`\n\nThe background color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeSuccessColorText`\n\nstring\n\n`#05690D`\n\nThe text color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeSuccessColorBorder`\n\nstring\n\n`#B4E1A2`\n\nThe border color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeWarningColorBackground`\n\nstring\n\n`#FCEEBA`\n\nThe background color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings.\n\n`badgeWarningColorText`\n\nstring\n\n`#A82C00`\n\nThe text color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings.\n\n`badgeWarningColorBorder`\n\nstring\n\n`#F5DA80`\n\nThe border color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeDangerColorBackground`\n\nstring\n\n`#F9E4F1`\n\nThe background color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings.\n\n`badgeDangerColorText`\n\nstring\n\n`#B3063D`\n\nThe text color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings.\n\n`badgeDangerColorBorder`\n\nstring\n\n`#F2C9E3`\n\nThe border color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/RGBA/HSL strings.\n\n`offsetBackgroundColor`\n\nstring\n\n`#FFFFFF`\n\nThe background color used when highlighting information, like the selected row on a table or particular piece of UI. This accepts hex values or RGB/HSL strings.\n\n`formBackgroundColor`\n\nstring\n\n`#FFFFFF`\n\nThe background color used for form items. This accepts hex values or RGB/HSL strings.\n\n`colorBorder`\n\nstring\n\n`#D7D7D7`\n\nThe color used for borders throughout the component. This accepts hex values or RGB/RGBA/HSL strings.\n\n`formHighlightColorBorder`\n\nstring\n\n`#D7D7D7`\n\nThe color used to highlight form items when focused. This accepts hex values or RGB/RGBA/HSL strings.\n\n`formAccentColor`\n\nstring\n\n`#0074D4`\n\nThe color used for to fill in form items like checkboxes, radio buttons and switches. This accepts hex values or RGB/HSL strings.\n\n`buttonBorderRadius`\n\nstring\n\n`4px`\n\nThe border radius used for buttons. This supports pixel values only.\n\n`formBorderRadius`\n\nstring\n\n`6px`\n\nThe border radius used for form elements. This supports pixel values only.\n\n`badgeBorderRadius`\n\nstring\n\n`4px`\n\nThe border radius used for badges. This supports pixel values only.\n\n`overlayBorderRadius`\n\nstring\n\n`8px`\n\nThe border radius used for overlays. This supports pixel values only.\n\n`overlayZIndex`\n\nnumber\n\n`1000`\n\nA [z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index) to use for the overlay throughout embedded components. Set this number to control the z-order of the overlay.\n\n`bodyMdFontSize`\n\nstring\n\n`16px`\n\nThe font size for the medium body typography. Body typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`bodyMdFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the medium body typography. Body typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`bodySmFontSize`\n\nstring\n\n`14px`\n\nThe font size for the small body typography. Body typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`bodySmFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the small body typography. Body typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXlFontSize`\n\nstring\n\n`28px`\n\nThe font size for the extra large heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingXlFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the extra large heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXlTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the extra large heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingLgFontSize`\n\nstring\n\n`24px`\n\nThe font size for the large heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingLgFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the large heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingLgTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the large heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingMdFontSize`\n\nstring\n\n`20px`\n\nThe font size for the medium heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingMdFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the medium heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingMdTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the medium heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingSmFontSize`\n\nstring\n\n`16px`\n\nThe font size for the small heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingSmFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the small heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingSmTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the small heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingXsFontSize`\n\nstring\n\n`12px`\n\nThe font size for the extra small heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingXsFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the extra small heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXsTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the extra small heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`labelMdFontSize`\n\nstring\n\n`14px`\n\nThe font size for the medium label typography. Label typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`labelMdFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the medium label typography. Label typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`labelMdTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the medium label typography. Label typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`labelSmFontSize`\n\nstring\n\n`12px`\n\nThe font size for the small label typography. Label typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`labelSmFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the small label typography. Label typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`labelSmTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the small label typography. Label typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.",
  "title": "Supported appearance options | Stripe Documentation",
  "description": "Review the appearance options available for Embedded Components.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_cards/object",
  "markdown": "# The External Account Card object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n    The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n    Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   #### \n    \n    default\\_for\\_currencynullable booleanAvailable conditionally\n    \n    Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n*   For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.\n    \n\n### More attributes\n\n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\nThe External Account Card object\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/external_account_cards/create)\n\nWhen you create a new debit card, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the account has no default destination card, then the new card will become the default. However, if the owner already has a default then it will not change. To change the default, you should set `default_for_currency` to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the card object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=tok_visa_debit\n```\n\n```\n{  \"id\": \"card_1NAiaG2eZvKYlo2CDXvcMb6m\",  \"object\": \"card\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/external_account_cards/update)\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```",
  "title": "The External Account Card object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/risk-management/managed-risk",
  "markdown": "# Stripe Managed Risk | Stripe DocumentationThe Stripe Docs logo\n\n## Let Stripe protect your platform from losses due to negative balances on your connected accounts.\n\nStripe Managed Risk is an end-to-end merchant risk management solution for platforms that includes ongoing monitoring and mitigation for credit and fraud risk. In addition, Stripe assumes risk of loss in the event of unrecoverable negative balances on connected accounts.\n\nWhen Stripe manages risk, we monitor risk signals on connected accounts, apply risk interventions on connected accounts in response to observed signals, and seek to recover negative balances from your connected accounts. You aren’t liable for unrecoverable negative balances on your connected accounts.\n\n## Components of Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are three core components of the Stripe Managed Risk offering:\n\n*   Screening & detection\n*   Monitoring & mitigation\n*   Stripe Negative Balance Liability\n\n### Screening & detection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you onboard new connected accounts to your platform, Stripe conducts a number of upfront risk-based onboarding checks. These checks are for adherence to our compliance and regulatory standards as well as for identifying fraud and credit risk signals.\n\nYou can implement additional onboarding verifications to meet relevant regulations for products or services offered by your platform or connected accounts.\n\n### Monitoring & mitigation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe performs ongoing monitoring of risk signals (KYC, transaction data, and so on) to identify connected accounts that might pose credit or fraud risks. We use automated processes, such as machine learning models, and Stripe risk team manual reviews. Stripe automates interventions against risky businesses to reduce fraud and risk of loss. For example, Stripe’s processes might flag a risky connected account in response to a number of signals such as elevated losses, spikes in chargeback rates, or refunds. In response, Stripe might take targeted action on that account using any of a large number of interventions to reduce risk exposure. Some of Stripe’s key risk interventions include:\n\n*   Changes to capabilities: In response to risk signals, Stripe might slow or pause payouts, or pause a connected account’s ability to process charges.\n*   Reserves: In response to risk signals, Stripe might hold a reserve on the connected account balance. It can be a fixed amount or a percentage of transaction amounts.\n*   Offboarding: In the extreme case that a business poses significant risk to Stripe or your platform (ToS violations, fraud, and so on), Stripe might deactivate the connected account.\n\n### Stripe negative balance liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you choose to use Stripe negative balance liability for connected accounts, Stripe assumes the risk of losses from unrecoverable negative balances on those connected accounts. In particular, Stripe doesn’t deduct unrecoverable negative connected account balances from your platform account.\n\n### Requirements to use Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Managed Risk has these requirements:\n\n*   **Radar**: You must use Radar on connected account transactions. (For users who pay Stripe’s listed prices for payments processing, Radar is included at no additional cost.)\n*   **Connected account onboarding**: When onboarding connected accounts, you must use either Stripe-hosted onboarding or the embedded onboarding component. Connected accounts where Stripe is liable for negative balances, including Standard accounts, can’t complete onboarding in any other way.\n*   **Connected account dashboard**: Connected accounts where Stripe is liable for negative balances must have access to a Stripe-hosted dashboard, or your platform’s interface must include both the Notifications Banner and Account Management embedded components. Some Stripe risk interventions require them to allow connected accounts to update their business information.\n\n## Stripe Managed Risk for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou define how your connected accounts interact with Stripe Managed Risk by configuring their onboarding flow and their dashboard or other platform interface.\n\n### Connected account onboarding flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe is liable for negative balances, you can onboard connected accounts using Stripe-hosted onboarding or the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). With either option, Stripe collects the required information for risk management and prompts the connected account to accept Stripe’s terms of service. You can pre-fill any information that you have previously collected in your onboarding flow via the Accounts API.\n\n### Connected account dashboard or platform interface![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost connected accounts are likely to have few, if any, interactions with Stripe’s risk management. However, in the event that Stripe requires additional risk-related information from one of your connected accounts, Stripe notifies your connected account and provides a pathway for them to respond to and resolve the intervention.\n\nTo resolve an intervention, a connected account owner might provide additional KYC information, complete a form, or provide other documentation. Stripe reviews their response to assess whether to lift, revise, or continue the intervention.\n\n### Connected accounts with access to a Stripe-hosted Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Connected accounts with access only to embedded components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Fees for Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe fees for Stripe Managed Risk depend on the economic model:\n\n*   **Revenue share**: For connected accounts where the platform uses a revenue share economic model for payments processing, including Standard accounts, Stripe Managed Risk is included at no additional cost.\n*   **Buy rate**: For connected accounts where the platform uses a buy-rate economic model, including Express and Custom accounts, Stripe Managed Risk fees depend on the pricing arrangements:\n    *   **Listed pricing**: For platforms that pay listed pricing for payments processing and Connect fees, Stripe Managed Risk is included at no additional cost.\n    *   **Negotiated pricing**: For platforms with negotiated pricing for either payments processing or Connect fees, Stripe Managed Risk involves additional fees. For more information, contact Stripe Sales.",
  "title": "Stripe Managed Risk | Stripe Documentation",
  "description": "Let Stripe protect your platform from losses due to negative balances on your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/risk-management/risk-tooling",
  "markdown": "# Merchant risk tooling | Stripe DocumentationThe Stripe Docs logo\n\n## Merchant risk toolingBeta\n\n## Use Stripe tools to prevent and manage merchant risk.\n\nIf you decide to manage merchant risk yourself, Stripe offers tools to help you:\n\n*   Identify a potentially fraudulent connected account using a fraud risk score.\n*   Investigate a connected account by reviewing risk metrics and fraud indicators.\n*   Gather additional information about a connected account through document verification and a selfie check.\n*   Take action against a connected account by pausing payouts, pausing payments, rejecting the account, or blocking its external payout account.\n\n## Identify potentially fraudulent connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a fraud risk score for each connected account based on the risk-related signals that we collect. In your Dashboard, you can filter the [accounts overview](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) based on the fraud risk score. The Home page also alerts you to potentially fraudulent connected accounts.\n\n## Investigate a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn your Dashboard, you can view the following information in the connected account details page:\n\n*   The fraud risk score of the connected account\n*   Potential fraud indicators, which provide you with suggestions for potential areas to investigate further\n*   Risk-related metrics, such as declines, disputes, and refunds, specific to that connected account\n\n## Gather additional information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo gather more information on the connected account, you can ask to verify a government-issued ID document and, optionally, a selfie. When you do so, you also set an enforcement that automatically occurs if the connected account doesn’t successfully complete the verification. This enforcement can either be to pause payouts only, or to pause both payouts and payments. This enforcement can occur either after a certain period of time or after a certain total lifetime volume.\n\n## Take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can pause payments, pause payouts, or reject a connected account using the API or the Dashboard.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Merchant risk tooling | Stripe Documentation",
  "description": "Use Stripe tools to prevent and manage merchant risk.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts",
  "markdown": "# Pause payments and payouts on connected accounts\n\n## Support risk management by controlling the flow of funds into and out of your connected accounts.\n\nPlatforms can pause payments or [payouts](https://docs.stripe.com/payouts \"payout\") on accounts where they’re liable for negative balances, including Express and Custom accounts, through the [Connected Account details](https://docs.stripe.com/connect/dashboard/managing-individual-accounts) Dashboard page. Unlike [rejecting an account](https://docs.stripe.com/api/account/reject), you can pause payments or payouts regardless of the connected account’s balance. You can unpause payments or payouts at any time through the same page.\n\n![Risk Action Dropdown](https://b.stripecdn.com/docs-statics-srv/assets/risk-action-dropdown.2ae7b4d238c08427d9a9f67fbbeda87f.png)\n\n## Effects of pausing payments or payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pausing payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPausing payments blocks creation of any charges. It also makes the [`transfer`](https://docs.stripe.com/connect/account-capabilities#transfers), [`card_payments`](https://docs.stripe.com/connect/account-capabilities#card-payments) and other [payment methods](https://docs.stripe.com/connect/account-capabilities#payment-methods) capabilities `inactive`.\n\n### Pausing payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPausing payouts blocks creation of both automatic and manual payouts. The pause also stops processing of any in-flight payouts, which remain in `pending` status for up to 10 days:\n\n*   If you unpause payouts within 10 days of a payout’s creation, the payout resumes.\n*   If you don’t unpause payouts within 10 days of a payout’s creation, the payout is canceled and the funds are returned to the connected account’s balance.\n\n#### Note\n\nYou can pause payments in both live mode and test mode. However, in test mode we don’t enforce it. Pausing payments in test mode deactivates the corresponding capabilities on the account, but that doesn’t block the creation of charges.\n\nAfter performing an action on a connected account, you can view the change in the account’s status, which is reflected in the Accounts API. In the API response for the connected account, the `charges_enabled` or `payouts_enabled` fields return `false` depending on the action taken, and the `requirements` hash has a `disabled_reason` of `platform_paused`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   ...   \"charges_enabled\": false,   \"payouts_enabled\": false,   \"requirements\": {     \"disabled_reason\": \"platform_paused\"   } }`\n\n### Filter connected accounts by risk action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy visiting the [Connected Account list](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) page, you can filter for the accounts that you have restricted either payments or payouts for.\n\n![Filter by risk action](https://b.stripecdn.com/docs-statics-srv/assets/risk-action-filter.e5de33081fc98d114e3082284a251f6f.png)\n\n### Connected account notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nActioned accounts with access to the Express Dashboard see a notice there, explaining that their platform paused payments or payouts on their account, and telling them to direct any questions to their platform.\n\nActioned accounts without access to a Stripe-hosted Dashboard, including Custom accounts, don’t see any communication from Stripe. You’re responsible for notifying them when you pause their payments or payouts.",
  "title": "Pause payments and payouts on connected accounts | Stripe Documentation",
  "description": "Support risk management by controlling the flow of funds into and out of your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview",
  "markdown": "# Platform Reporting for direct charge payment fees paid by connected accounts\n\nPlatforms that pay payments fees for direct charges they facilitate on their connected accounts can use the reports outlined here to understand those fees.\n\n## Financial reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Stripe’s financial reports](https://docs.stripe.com/reports) help you understand and reconcile the activity in your account, in particular the total costs and earnings of your platform. These reports are available for download in the Dashboard or through the API.\n\n## Connect margin reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Connect margin reports](https://docs.stripe.com/connect/margin-reports) show platforms their aggregated and transaction-level payment volumes, fees, and revenue associated with activity where the platform is responsible for pricing and fees. Use them to calculate your margins and set your fees appropriately given your underlying Stripe fees and network costs. These reports are available for download in the Dashboard.\n\nConnect margin reports are available to platforms that facilitate buy-rate direct charges. Platforms using destination charges can also request access to them.\n\n## Sigma and Data Pipeline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Sigma and Data Pipeline users have access to [the itemized\\_fees table](https://docs.stripe.com/stripe-data/access-data-in-dashboard). It offers a comprehensive, granular breakdown of every fee charged to or deducted from your Stripe balance. You can use it to review itemized details of card, LPM, and product fees that your platform has paid.",
  "title": "Platform Reporting for direct charge payment fees paid by connected accounts | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bacs-debit/accept-a-payment",
  "markdown": "# Bacs Direct Debit payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe users in the UK can use [Checkout](https://docs.stripe.com/payments/checkout) in payment mode to accept Bacs Direct Debit payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to pay for something. After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they are redirected back to your site.\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a T-shirt _product_ that has two _prices_ for different currencies, 20 GBP and 25 EUR. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or in the [Dashboard](https://dashboard.stripe.com/products).\n\nIf you determine your price at checkout (for example, the customer sets a donation amount) or you prefer not to create prices upfront, you can also create [ad-hoc prices](https://docs.stripe.com/payments/accept-a-payment?platform=web#redirect-customers) at Checkout Session creation using an existing product.\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** in the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\nMake sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the items you want to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/test/products) section in the Dashboard\n*   Click **Add product**\n*   Select **One time** when setting the price\n\nThe product name, description, and image that you supply are displayed to customers in Checkout.\n\n[](#create-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items). Line items represent a list of items the customer is purchasing.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment details have been successfully collected and their payment is being processed.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout can accept a payment and save the payment method for future use. Payment methods saved this way can be used for future payments using a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method). After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"bacs_debit\" \\   -d \"line_items[][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"payment\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_intent_data[setup_future_usage]\"=\"off_session\" \\   -d \"success_url\"=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe Bacs Direct Debit rules require that customers receive [debit notification emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) when payment details are initially collected and when their account is debitted. Stripe sends these emails for you by default.\n\nCreating a Checkout Session returns a [Session ID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-id). Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#async)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, Bacs Direct Debit is a delayed notification payment method, which means that funds are not immediately available. A Bacs Direct Debit payment typically takes 3 business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. Once the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nThe following Checkout events are sent when the payment status changes:\n\nYour [webhook](https://docs.stripe.com/webhooks \"webhook\") code will need to handle all 3 of these Checkout events.\n\nEach Checkout webhook payload includes the [Checkout Session object](https://docs.stripe.com/api/checkout/sessions), which contains information about the [Customer](https://docs.stripe.com/api/customers \"Customers\") and [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nThe `checkout.session.completed` webhook is sent to your server before your customer is redirected. Your webhook acknowledgement (any `2xx` status code) triggers the customer’s redirect to the `success_url`. If Stripe doesn’t receive successful acknowledgement within 10 seconds of a successful payment, your customer is automatically redirected to the `success_url` page.\n\nOn your `success_url` page, you’ll want to show a success message to your customer, and let them know that fulfillment of the order will take a few days as the Bacs Direct Debit payment method is not instant.\n\nWhen accepting instant payments (such as credit cards) in addition to delayed notification payments, you’ll need to update your webhook endpoint to handle both kinds of payments when receiving a `checkout.session.completed` event.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# You can find your endpoint's secret in your webhook settings endpoint_secret = 'whsec_...'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature     status 400     return   end    case event['type']   when 'checkout.session.completed'     session = event['data']['object']      # Check if the order is paid (for example, from a card payment)     payment_intent = Stripe::PaymentIntent.retrieve(session.payment_intent)     # A delayed notification payment will have the status 'processing'     order_paid = payment_intent.status == \"succeeded\"      # Save an order in your database, marked as 'awaiting payment'     create_order(session)      if order_paid       fulfill_order(session)     end   when 'checkout.session.async_payment_succeeded'     session = event['data']['object']      # Fulfill the purchase...     fulfill_order(session)   when 'checkout.session.async_payment_failed'     session = event['data']['object']      # Send an email to the customer asking them to retry their order     email_customer_about_failed_payment(session)   end    status 200 end`\n\nYou can get information about the customer and payment by retrieving the Customer or PaymentIntent objects referenced by the `customer`, `payment_intent` properties in the webhook payload.\n\n### Testing webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test webhooks locally, you can use [Stripe CLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can forward events to your server:\n\n`stripe listen --forward-to localhost:4242/webhook Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n[](#testing)\n\nBy this point you should have a basic Bacs Direct Debit integration that collects bank account details and accepts a payment.\n\nThere are several test bank account numbers you can use in [test mode](https://docs.stripe.com/keys#test-live-modes) to make sure this integration is ready.\n\n| Sort code | Account number | Description |\n| --- | --- | --- |\n| 108800 | 00012345 | The payment succeeds and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 90012345 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 33333335 | The payment is accepted but then immediately fails with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 93333335 | The payment fails after three minutes with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 22222227 | The payment fails with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 92222227 | The payment fails after three minutes with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 55555559 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n| 108800 | 00033333 | Payment Method creation succeeds, but the Mandate is refused by the customer’s bank and immediately transitions to inactive. |\n| 108800 | 00044444 | The request to set up Bacs Direct Debit fails immediately due to an invalid account number and the customer is prompted to update their information before submitting. Payment details are not collected. |\n\nYou can test using any of the account numbers provided above. However, because Bacs Direct Debit payments take several days to process, use the test account numbers that operate on a three-minute delay to better simulate the behavior of live payments.\n\n#### Note\n\nBy default, Stripe automatically sends [emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) to the customer when payment details are initially collected and each time a debit will be made on their account. These notifications aren’t sent in testmode.\n\n## Payment failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments can fail for a variety of reasons. The reason for a failure is available through [charge.failure\\_code](https://docs.stripe.com/api/charges/object#charge_object-failure_code). You can only retry payments with certain failure codes. If you can’t retry a payment, we recommend reaching out to the customer and asking them to pay again using a different bank account or a different payment method.\n\nBelow is a list of failure codes we currently send for Bacs Direct Debit. We might add more at any time, so in developing and maintaining your code, don’t assume that only these types exist.\n\n| Failure code | Description | Retryable |\n| --- | --- | --- |\n| `account_closed` | The bank account has been closed. | No  |\n| `bank_ownership_changed` | The account has been transferred to a new Payment Service Provider (PSP). Check if you have been notified of the new PSP’s details. If not, you must collect a new mandate from the customer. | No  |\n| `debit_not_authorized` | The customer has notified their bank that this payment was unauthorized or there is no mandate held by the paying bank. | No  |\n| `generic_could_not_process` | This payment could not be processed. | Yes |\n| `insufficient_funds` | The customer’s account has insufficient funds to cover this payment. | Yes |\n| `invalid_account_number` | The account number is not valid. This could mean it is not for a GBP account or that the account cannot process Direct Debit payments. | No  |\n\nTo retry a payment, [confirm the PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) again using the same [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\").\n\nTo ensure success, we recommend reaching out to the payer before retrying a payment.",
  "title": "Bacs Direct Debit payments | Stripe Documentation",
  "description": "Learn to accept Bacs Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/object",
  "markdown": "# The Account object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder that this account belongs to.\n    \n*   The most recent information about the account’s balance.\n    \n*   #### \n    \n    balance\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account balance.\n    \n*   The type of the account. Account category is further divided in `subcategory`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `cash`<br><br>The account represents real funds held by the institution (e.g. a checking or savings account). |\n    | `credit`<br><br>The account represents credit extended by the institution (e.g. a credit card or mortgage). |\n    | `investment`<br><br>The account represents investments, or any account where there are funds of unknown liquidity. |\n    | `other`<br><br>The account does not fall under the other categories. |\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    display\\_namenullable string\n    \n    A human-readable name that has been assigned to this account, either by the account holder or by the institution.\n    \n*   The name of the institution that holds this account.\n    \n*   The last 4 digits of the account number. If present, this will be 4 numeric characters.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    ownershipnullable stringExpandable\n    \n    The most recent information about the account’s owners.\n    \n*   #### \n    \n    ownership\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account owners.\n    \n*   #### \n    \n    permissionsnullable array of enums\n    \n    The list of permissions granted by this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Allows accessing balance data from the account. |\n    | `ownership`<br><br>Allows accessing ownership data from the account. |\n    | `payment_method`<br><br>Allows the creation of a payment method from the account. |\n    | `transactions`<br><br>Allows accessing transactions data from the account. |\n    \n*   The status of the link to the account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Stripe is able to retrieve data from the Account without issues. |\n    | `disconnected`<br><br>Account connection has been terminated. |\n    | `inactive`<br><br>Stripe cannot retrieve data from the Account. |\n    \n*   If `category` is `cash`, one of:\n    \n    *   `checking`\n    *   `savings`\n    *   `other`\n    \n    If `category` is `credit`, one of:\n    \n    *   `mortgage`\n    *   `line_of_credit`\n    *   `credit_card`\n    *   `other`\n    \n    If `category` is `investment` or `other`, this will be `other`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `checking`<br><br>The account is a checking account. |\n    | `credit_card`<br><br>The account represents a credit card. |\n    | `line_of_credit`<br><br>The account represents a line of credit. |\n    | `mortgage`<br><br>The account represents a mortgage. |\n    | `other`<br><br>The account does not fall under any of the other subcategories. |\n    | `savings`<br><br>The account is a savings account. |\n    \n*   #### \n    \n    subscriptionsnullable array of enums\n    \n    The list of data refresh subscriptions requested on this account.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Subscribes to periodic transactions data refreshes from the account.\n    \n*   #### \n    \n    supported\\_payment\\_method\\_typesarray of enums\n    \n    The [PaymentMethod type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `link`<br><br>A `link` PaymentMethod can be created. |\n    | `us_bank_account`<br><br>A `us_bank_account` PaymentMethod can be created. |\n    \n*   #### \n    \n    transaction\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account transactions.\n    \n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Retrieve an Account](https://docs.stripe.com/api/financial_connections/accounts/retrieve)\n\nRetrieves the details of an Financial Connections `Account`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/accounts/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [List Accounts](https://docs.stripe.com/api/financial_connections/accounts/list)\n\nReturns a list of Financial Connections `Account` objects.\n\n### Parameters\n\n*   If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.\n    \n*   If present, only return accounts that were collected as part of the given session.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Account` objects, starting after account `starting_after`. Each entry in the array is a separate `Account` object. If no more accounts are available, the resulting array will be empty. This request will raise an error if more than one of `account_holder[account]`, `account_holder[customer]`, or `session` is specified.\n\nGET /v1/financial\\_connections/accounts\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",      \"object\": \"linked_account\",      \"account_holder\": {        \"customer\": \"cus_9s6XI9OFIdpjIg\",        \"type\": \"customer\"      },      \"balance\": null,      \"balance_refresh\": null,      \"category\": \"cash\",      \"created\": 1681412208,      \"display_name\": \"Sample Checking Account\",      \"institution_name\": \"StripeBank\",      \"last4\": \"6789\",      \"livemode\": false,      \"ownership\": null,      \"ownership_refresh\": null,      \"permissions\": [],      \"status\": \"active\",      \"subcategory\": \"checking\",      \"subscriptions\": [],      \"supported_payment_method_types\": [        \"us_bank_account\"      ],      \"transaction_refresh\": null    }    {...}    {...}  ],}\n```\n\n## [Disconnect an Account](https://docs.stripe.com/api/financial_connections/accounts/disconnect)\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Refresh Account data](https://docs.stripe.com/api/financial_connections/accounts/refresh)\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```",
  "title": "The Account object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/acss-debit/accept-a-payment",
  "markdown": "# Accept a Canadian pre-authorized debit payment\n\n## Build a custom payment form or use Stripe Checkout to accept payments with pre-authorized debit in Canada.\n\nAccepting Canadian pre-authorized debit (PAD) payments on your website consists of creating an object to track a payment, collecting payment method information and mandate acknowledgement, submitting the payment to Stripe for processing and verifying your customer’s bank account.\n\nStripe uses this payment object, the [Payment Intent](https://docs.stripe.com/payments/payment-intents), to track and handle all the states of the payment until the payment completes.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a bank account for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents) is an object that represents your intent to collect a payment from a customer and tracks the lifecycle of the payment process through [each stage](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\nIn order to use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nFirst, create a PaymentIntent on your server and specify the amount to collect and currency ([usually `cad`](https://docs.stripe.com/payments/acss-debit#presentment-currency)). If you already have another integration using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), add `acss_debit` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) for your PaymentIntent. Specify the [id](https://docs.stripe.com/api/customers/object#customer_object-id) of the Customer.\n\nIf you want to reuse the payment method in the future, provide the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter with a value of `off_session`.\n\nIn order to define a payment schedule and verification method on the [Mandate](https://docs.stripe.com/api/mandates) for this PaymentIntent, also include the following parameters:\n\n| Parameter | Value | Required? |\n| --- | --- | --- |\n| `payment_method_options[acss_debit][mandate_options][payment_schedule]` | The mandate payment schedule. Accepted values are `interval`, `sporadic`, or `combined`. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you select the right schedule for your business. | Yes |\n| `payment_method_options[acss_debit][mandate_options][interval_description]` | Text description of the interval of payment schedule. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you construct the right interval description for your business. | If `payment_schedule` is specified as `interval` or `combined` |\n| `payment_method_options[acss_debit][mandate_options][transaction_type]` | The type of the mandate you are creating, either `personal` (if your customer is an individual) or `business` (if your customer is a business). | Yes |\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=cad \\  -d setup_future_usage=off_session \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=acss_debit \\  -d \"payment_method_options[acss_debit][mandate_options][payment_schedule]\"=interval \\  -d \"payment_method_options[acss_debit][mandate_options][interval_description]\"=\"First day of every month\" \\  -d \"payment_method_options[acss_debit][mandate_options][transaction_type]\"=personal`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[\n\n## Collect payment method details and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment) to collect bank account details and verification, confirm the mandate, and complete the payment when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on PaymentIntent's status.       console.log(\"PaymentIntent ID: \" + paymentIntent.id);       console.log(\"PaymentIntent status: \" + paymentIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitPayment` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object, with one of the following possible statuses:\n\n| Status | Description | Next step |\n| --- | --- | --- |\n| `processing` | The bank account has been instantly verified or verification was not necessary. | ​​​​​​Step 6: [Confirm the PaymentIntent succeeded](#web-confirm-paymentintent-succeeded) |\n| `requires_action` | Further action needed to complete bank account verification. | Step 5: [Verifying bank accounts with micro-deposits](#web-verify-with-microdeposits) |\n\nAfter successfully confirming the PaymentIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) if you prefer.\n\n#### Note\n\nMandate confirmation emails will not be sent to the customer’s email address when testing the integration.\n\nIf the customer chooses to close the modal without completing the verification flow, Stripe.js returns the following error:\n\n`{   \"error\": {     \"type\": \"validation_error\",     \"code\": \"incomplete_payment_details\",     \"message\": \"Please provide complete payment details.\"   } }`\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitPayment` method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   amounts: [32, 45], });`\n\nWhen the bank account is successfully verified, Stripe returns the [PaymentIntent object](https://docs.stripe.com/api/payment_intents/object) with a `status` of `processing`, and sends a `payment_intent.processing` [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `payment_intent.payment_failed` webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or asynchronous | Message | Status Change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, and asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n\n[](#web-confirm-paymentintent-succeeded)\n\nCanadian pre-authorized debits are a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to five business days to receive notification of the success or failure of a payment after you initiate a debit from your customer’s account.\n\nThe PaymentIntent you create initially has a status of `processing`. Successful completion of the payment updates the PaymentIntent status from `processing` to `succeeded`.\n\nThe following events are sent when the PaymentIntent status is updated:\n\n| Event | Description | Next step |\n| --- | --- | --- |\n| `payment_intent.processing` | The customer’s payment was submitted to Stripe successfully. | Wait for the initiated payment to succeed or fail. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n| `payment_intent.payment_failed` | The customer’s payment was declined. This can also apply to a failed microdeposit verification. | Contact the customer via email or push notification and request another payment method. If the webhook was sent due to a failed microdeposit verification, the user needs to enter in their bank account details again and a new set of microdeposits will be deposited in their account. |\n\nWe recommend using [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete. You can also view events on the [Stripe Dashboard](https://dashboard.stripe.com/test/events).\n\n[](#web-test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
  "title": "Accept a Canadian pre-authorized debit payment | Stripe Documentation",
  "description": "Build a custom payment form or use Stripe Checkout to accept payments with pre-authorized debit in Canada.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/konbini/accept-a-payment",
  "markdown": "# Konbini payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nKonbini is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment. Customers pay by providing a payment code, confirmation number, and cash payment at Japanese convenience stores. Stripe notifies you when the payment is completed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Konbini payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency (JPY).\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Konbini—it shows the differences between accepting a card payment and using Konbini.\n\n### Enable Konbini as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `konbini` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `jpy` currency.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"mode\"=\"payment\" \\   -d \"payment_method_types[]\"=\"card\" \\   -d \"payment_method_types[]\"=\"konbini\" \\   -d \"payment_method_options[konbini][expires_after_days]\"=3 \\   -d \"line_items[0][price_data][currency]\"=\"jpy\" \\   -d \"line_items[0][price_data][unit_amount]\"=2000 \\   -d \"line_items[0][price_data][product_data][name]\"=\"Tシャツ\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Additional payment method options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment method options can be specified in the [payment method options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-konbini) under the `konbini` key.\n\n| Field | Value | Required | Default Value |\n| --- | --- | --- | --- |\n| `expires_after_days` | The number of calendar days before a pending Konbini payment expires. Valid values are from 1 to 60 days. See [Expiration](#checkout-additional-options-expiration). | No  | 3   |\n\n#### Expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPending Konbini payments expire right before midnight (23:59:59 JST) on the specified date. For example if `expires_after_days` is set to 2 and the PaymentIntent is confirmed on Monday, the pending Konbini payment will expire on Wednesday at 23:59:59 Japan (UTC+9) time.\n\n#### Phone number ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the Konbini checkout form, your customers can optionally supply a phone number to use as their confirmation number. This simplifies their payment process at a convenience store where the in-store UI asks for the customer to provide a payment code and their confirmation number. Both are reflected in the payment instructions that Stripe displays after the customer submits their checkout form. If your customer doesn’t provide a phone number, Stripe generates a random confirmation number.\n\nStripe proactively blocks phone numbers consisting of only zeros.\n\n### Redirect to Stripe hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the [success\\_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url) with Konbini payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can reference the hosted page’s payment instructions for details on how to complete their payment. The page is viewable on desktop and mobile, as well as being printable.\n\nStripe sends a [payment\\_intent.requires\\_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action) event when a Konbini voucher is created successfully. If you need to email your customers the voucher’s payment instructions link, you can locate the `hosted_voucher_url` in [payment\\_intent.next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-hosted_voucher_url). Learn more about how to [monitor a PaymentIntent with webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks).\n\nStripe allows customization of customer-facing UIs on the [Branding Settings](https://dashboard.stripe.com/account/branding) page. The following brand settings can be applied to the voucher:\n\n*   **Icon**—your brand image and public business name\n*   **Accent color**—used as the color of the Copy Number button\n*   **Brand color**—used as the background color\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause Konbini is a delayed notification payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated the Konbini voucher.<br><br>You can choose to email the `hosted_voucher_url` to your customer in case they lose the Konbini voucher. | Wait for the customer to pay at a Konbini. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the Konbini voucher. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The Konbini voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer via email and request that they place a new order. |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Konbini as the payment method and click the **Pay** button.\n\nProvide the following values in the Checkout form to test different scenarios. You can either test with a special confirmation number or an email pattern. If both are provided the behavior of the special confirmation number applies.\n\n| Email | Confirmation number | Description |\n| --- | --- | --- |\n| `{any_prefix}@{any_domain}` | `11111111110` | Simulates a Konbini payment which succeeds after 3 minutes and the `payment_intent.succeeded` webhook arrives after that.<br><br>Example: hanako@test.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | `22222222220` | Simulates a Konbini payment which succeeds immediately and the `payment_intent.succeeded` webhook arrives after that.<br><br>Example: succeed\\_immediately@test.com |\n| `{any_prefix}expire_immediately@{any_domain}` | `33333333330` | Simulates a Konbini payment which expires immediately and the `payment_intent.payment_failed` webhook arrives after that.<br><br>The `expires_at` field in [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at) is set to the current time regardless of what the `expires_after_days` or `expires_at` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) is set to.<br><br>Example: expire\\_immediately@test.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | `44444444440` | Simulates a Konbini payment which never succeeds; it expires in 3 minutes and the `payment_intent.payment_failed` webhook arrives after that.<br><br>The `expires_at` field in [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at) is set to 3 minutes in the future regardless of what the `expires_after_days` or `expires_at` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) is set to.<br><br>Example: expire\\_with\\_delay@test.com |\n| `{any_prefix}fill_never@{any_domain}` | `55555555550` | Simulates a Konbini payment which never succeeds; it expires according to the `expires_at` field in `next_action.konbini_display_details` per the provided parameters in the [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) and the `payment_intent.payment_failed` webhook arrives after that.<br><br>Example: fill\\_never@test.com |\n\nIn order to test [confirmation number](#web-confirm-payment-intent-additional-options-confirmation-number) errors you may use the following values:\n\n*   `01234567890` simulates a confirmation number rejection.\n*   `00000000000` results in a validation error.\n\n[\n\n## Expiration and cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-expiration-and-cancellation)\n\nAfter the time specified by the `expires_at` value in the [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at), the customer can no longer _initiate_ the payment process for a pending Konbini payment at a convenience store kiosk. However, if they issued a valid payment slip before the deadline they may be able to _complete_ the payment at the cash register after the `expires_at` time.\n\nThere is a buffer period to avoid premature payment failures in such an event. The PaymentIntent’s status changes to `requires_payment_method`. At this point, you can cancel or confirm the PaymentIntent with another payment method.\n\nYou can also cancel a pending Konbini payment after confirmation and before the time specified by `next_action.konbini_display_details.expires_at`. Updating the PaymentIntent or confirming it with another payment method will also implicitly cancel the existing Konbini payment.\n\nIf the customer is currently paying for the Konbini payment at the convenience store, the cancellation request will fail. Cancellation may be re-attempted if the customer abandons the payment attempt and after the payment slip expires.\n\nNote that [temporary payment method availability issues](#web-handling-temporary-availability-issues) also affect (both explicit as well as implicit) cancellation requests.\n\n#### Caution\n\nWhen you cancel a pending payment the original payment instructions become invalid. For most use cases we suggest you reach out to your customer to inform them of the cancellation.\n\nWhen you successfully reconfirm a PaymentIntent in status `requires_action` we create new instructions and a new `hosted_voucher_url`. You need to ensure that your customer is made aware of these.\n\n[](#refunds)\n\nIt is possible to refund Konbini payments through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund).\n\nTo complete a refund sent to the customer’s bank account directly, your customer must provide the bank account details where they would like to receive the funds. Stripe contacts the customer at the email address from the billing details on the payment method and requests these details from them. After we receive the bank details, we process the refund automatically.\n\nThe refund’s status transitions as follows:\n\n| Event | Refund status |\n| --- | --- |\n| Refund is created | `requires_action` |\n| Customer submits bank account details, and Stripe begins processing the refund | `pending` |\n| Refund is expected to arrive in customer’s bank | `succeeded` |\n| Customer’s bank returns the funds back to Stripe | `requires_action` |\n| Refund is in `requires_action` 45 days after creation | `failed` |\n| Refund is canceled from a `requires_action` state | `canceled` |\n\nIf the customer’s bank can’t successfully complete the transfer, the funds are returned to Stripe and the refund transitions to `requires_action`. This can happen if the account holder’s name doesn’t match what the recipient bank has on file or if the provided bank account number has a typo. In these cases, Stripe emails the customer to inform them of the failure and to request that they resubmit their bank account details.\n\nIf your customer does not provide their bank account details within 45 days, the refund’s status transitions to `failed` and the [charge.refund.updated](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) event is sent. This means that Stripe is unable to process the refund, and you must [return the funds to your customer outside of Stripe](https://docs.stripe.com/refunds#failed-refunds).\n\nThe [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund is the email that the refund was sent to. While a refund is waiting for a response from the customer, details of the email sent to the customer can also be found under the [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field on the refund.\n\nEach individual refund (including each partial refund) may incur a fee. Please reach out to your point of contact at Stripe to learn more about this.\n\n### Testing Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can test refund behavior in testmode using the following test bank accounts on the bank account details collection page linked in the email sent to the customer. Bank account details outside of these test bank accounts will not be accepted.\n\n| Routing | Account | Type |\n| --- | --- | --- |\n| `1100000` | `0001234` | Refund succeeds. |\n| `1100000` | `1111113`<br><br>`1111116`<br><br>`1111113`<br><br>`3333335`<br><br>`4444440` | Refund fails. |\n\n#### Testing Refunds Expiry ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make an API call to simulate the expiry of a testmode refund.\n\n`curl https://api.stripe.com/v1/test_helpers/refunds/{{REFUND_ID}}/expire \\   -X POST \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`",
  "title": "Konbini payments | Stripe Documentation",
  "description": "Use the Payment Intents and Payment Methods APIs to accept payments through Konbini, a common way to make payments through convenience stores in Japan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/oxxo/accept-a-payment",
  "markdown": "# Accept an OXXO payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nOXXO is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay by providing an OXXO voucher with a generated number and cash payment at an OXXO convenience store.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support OXXO payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable OXXO—it shows the differences between accepting a card payment and using OXXO.\n\n### Enable OXXO as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `oxxo` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `mxn` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'oxxo'],   # The parameter is optional. The default value of expires_after_days is 3.   payment_method_options: {     oxxo: {       expires_after_days: 2     }   },   line_items: [{     price_data: {       # To accept `oxxo`, all line items must have currency: mxn       currency: 'mxn',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Additional payment method options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify an optional `expires_after_days` parameter in the [payment method options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-oxxo-expires_after_days) for your `Session` that sets the number of calendar days before an OXXO voucher expires. For example, if you create an OXXO voucher on Monday and you set `expires_after_days` to 2, the OXXO voucher will expire on Wednesday at 23:59 America/Mexico\\_City (UTC-6) time. The `expires_after_days` parameter can be set from 1 to 7 days. The default is 3 days.\n\n### Redirect to Stripe hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can find the barcode or print the OXXO voucher from the hosted voucher page. You can locate the `hosted_voucher_url` in [payment\\_intent.next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-hosted_voucher_url).\n\nStripe allows customization of customer-facing UIs on the [Branding Settings](https://dashboard.stripe.com/account/branding) page. The following brand settings can be applied to the voucher:\n\n*   **Icon**—your brand image and public business name\n*   **Accent color**—used as the color of Print button\n*   **Brand color**—used as the background color\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause OXXO is a delayed notification payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated the OXXO voucher.<br><br>You can choose to email the `hosted_voucher_url` to your customer in case they lose the OXXO voucher. | Wait for the customer to pay the OXXO voucher. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the OXXO. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The OXXO voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer via email and request that they place a new order. |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select OXXO as the payment method and click the **Pay** button.\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}@{any_domain}` | Simulates an OXXO voucher which a customer pays after 3 minutes and the `payment_intent.succeeded` webhook arrives after about 3 minutes. In production, this webhook arrives after 1 business day.<br><br>Example: fulano@test.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | Simulates an OXXO voucher which a customer pays immediately and the `payment_intent.succeeded` webhook arrives within several seconds. In production, this webhook arrives after 1 business day.<br><br>Example: succeed\\_immediately@test.com |\n| `{any_prefix}expire_immediately@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives within several seconds.<br><br>The `expires_after` field in [next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-expires_after) is set to the current time regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-oxxo-expires_after_days) is set to.<br><br>Example: expire\\_immediately@test.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives after about 3 minutes.<br><br>The `expires_after` field in [next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-expires_after) is set to 3 minutes in the future regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-oxxo-expires_after_days) is set to.<br><br>Example: expire\\_with\\_delay@test.com |\n| `{any_prefix}fill_never@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives after 1 business day and 2 calendar days. In production, this webhook arrives at the same time as in testmode.<br><br>Example: fill\\_never@test.com |",
  "title": "Accept an OXXO payment | Stripe Documentation",
  "description": "Learn how to accept OXXO, a common payment method in Mexico.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/pay-by-bank/accept-a-payment",
  "markdown": "# Pay by Bank payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nWe recommend that you follow the [Accept a payment](https://docs.stripe.com/payments/accept-a-payment) guide unless you need to use manual server-side confirmation, or your integration requires presenting payment methods separately. If you’ve already integrated with Elements, see the [Payment Element migration guide](https://docs.stripe.com/payments/payment-element/migration).\n\nPay by Bank is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers must [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Pay by Bank redirects customers from your website, authorizes the payment, and returns them to your website. You receive [notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether a payment succeeded or failed within a few seconds.\n\n#### Note\n\nPay by Bank is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **5 seconds** to arrive in your account.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage.\n\nFirst, create a `PaymentIntent` on your server and specify the amount to collect and the `gbp` currency (Pay by Bank doesn’t support other currencies). If you already have an integration using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), add `pay_by_bank` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) for your `PaymentIntent`. Stripe enables the functionality that `automatic_payment_methods` provides by default in the latest version of the API.\n\n*   You can either use the [automatic\\_payment\\_methods](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-automatic_payment_methods-enabled) attribute or add `pay_by_bank` to [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n*   Regardless of which option you choose, make sure to enable Pay by Bank on the\n*   [payment methods settings page](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. Make sure to enable Pay by Bank on the [payment methods settings page](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To manually specify payment method types, add `pay_by_bank` to [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"automatic_payment_methods[enabled]\"=true`\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"payment_method_types[]\"=pay_by_bank`\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The minimum amount is 0.50 GBP and the maximum amount is 10,000 GBP. (Reach out to us if you want to increase the maximum limit.)\n*   Enter a `statement_descriptor` (optional). This is the merchant name shown on the customer’s bank statement. It has a limit of 18 characters and consists only of alphanumeric values and spaces. If this field is left blank, a shortened version of the [Stripe statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors) appears on the bank statement.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"payment_method_options[pay_by_bank][statement_descriptor]\"=\"merchant name\" \\  -d \"payment_method_types[]\"=pay_by_bank`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#submit-payment)\n\nWhen a customer clicks to pay with Pay by Bank, use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is the foundational JavaScript library for building payment flows. It automatically handles complexities like the redirect described below, and enables you to extend your integration to other payment methods. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\nYou also need to specify the beta flag, `pay_by_bank_beta_1`, to use Pay by Bank with Stripe.js.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {betas: ['pay_by_bank_beta_1']} );`\n\n### Confirm with Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [step 2](#web-create-payment-intent). This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can confirm the payment. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmPayByBankPayment](https://docs.stripe.com/js/payment_intents/confirm_pay_by_bank_payment) to handle the redirect away from your page and to complete the payment. Add a `return_url` to this function to instruct Stripe where to redirect the user after they complete the payment.\n\n`const {error} = await stripe.confirmPayByBankPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     return_url: 'https://example.com/checkout/complete',   } );`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#test-your-integration)\n\nWhen using your [test API keys](https://docs.stripe.com/keys#test-live-modes), you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the payment is successful. The PaymentIntent transitions from `requires_action` to `succeeded`.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate. The PaymentIntent transitions from `requires_action` to `requires_payment_method`.\n\n[](#web-fulfillment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a partner solution to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events also makes it easier to accept more payment methods in the future. Check out our [guide to payment methods](https://stripe.com/payments/payment-methods-guide) to see the differences between all supported payment methods.\n\n### Manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Stripe Dashboard to view all your Stripe payments, send email receipts, handle payouts, or retry failed payments.\n\n*   [View your test payments in the Dashboard](https://dashboard.stripe.com/test/payments)\n\n### Custom code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous payment flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n*   [Build a custom webhook](https://docs.stripe.com/payments/handling-payment-events#build-your-own-webhook)\n\n### Prebuilt apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n[](#order-fulfillment)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment. When a customer completes payment, the `PaymentIntent` transitions to `succeeded` and emits the [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nYou can find details about the bank account the customer used to complete the payment on the resulting Charge under the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-pay_by_bank) property.\n\n`{   \"charges\": {     \"data\": [       {         \"payment_method_details\": {           \"pay_by_bank\": {             \"bank_account_details_type\": \"sort_code\",             \"sort_code\": {               \"account_holder_name\": \"John Doe\",               \"account_number_last4\": \"1820\",               \"sort_code\": \"040004\"             }           },           \"type\": \"pay_by_bank\"         },`\n\nIf a customer cancels the payment flow, the `PaymentIntent` emits the [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) webhook event and returns to a status of `requires_payment_method`.",
  "title": "Pay by Bank payments | Stripe Documentation",
  "description": "Learn how to accept Pay by Bank payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sofort/accept-a-payment",
  "markdown": "# Accept a Sofort payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\n#### Note\n\nSOFORT is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **2 to 14 business days** to arrive in your account.\n\nCustomers pay with SOFORT by redirecting away from the Checkout Session to their bank, sending you payment, and then returning to Checkout. They are then redirected back to your site.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support SOFORT payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable SOFORT—it shows the differences between accepting a card payment and using SOFORT.\n\n### Enable SOFORT as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `sofort` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'sofort'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `sofort`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select SOFORT as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for SOFORT is up to 180 days after the original payment.\n\nThere is no dispute process–customers authenticate with their bank.",
  "title": "Accept a Sofort payment | Stripe Documentation",
  "description": "Learn how to accept Sofort, a common payment method in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sepa-debit/accept-a-payment",
  "markdown": "# Accept a SEPA Direct Debit payment\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAccepting SEPA Direct Debit payments on your website consists of creating an object to track a payment, collecting payment method information and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses this payment object, the PaymentIntent, to track and handle all the states of the payment until the payment completes.\n\n#### Note\n\nSEPA Direct Debit is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **5 business days** to arrive in your account.\n\n[](#compatibility)\n\nTo support SEPA Direct Debit payments in Checkout, [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable SEPA Direct Debit—it shows the differences between accepting a card payment and using SEPA Direct Debit.\n\n### Enable SEPA Direct Debit as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `sepa_debit` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'sepa_debit'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `sepa_debit`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nStripe provides several test numbers you can use to make sure your integration is ready for production.\n\nUse the [SEPA Direct Debit test numbers](#test-integration) when testing your Checkout integration with SEPA Direct Debit.\n\n##### Test IBANs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Account Number | Description |\n| --- | --- |\n| `AT611904300234573201` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `AT321904300235473204` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `AT861904300235473202` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `AT051904300235473205` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `AT591904300235473203` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for SEPA Direct Debit is up to 180 days after the original payment.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank up to 13 months after the original payment and there’s no appeal process.\n\nLearn more about [SEPA Direct Debit disputes](https://docs.stripe.com/payments/sepa-debit#disputed-payments).",
  "title": "Accept a SEPA Direct Debit payment | Stripe Documentation",
  "description": "Learn to accept SEPA Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/financial_connections/collect_financial_connections_accounts",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/accept-a-payment",
  "markdown": "# Accept an ACH Direct Debit payment\n\n## Build a custom payment form or use Stripe Checkout to accept payments with ACH Direct Debit.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe users in the US can use Checkout in payment mode to accept ACH Direct Debit payments.\n\nA Checkout Session represents the details of your customer’s intent to purchase. You create a Session when your customer wants to pay for something. After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer has completed a purchase, they are redirected back to your site.\n\nWith Checkout, you can create a Checkout Session with `us_bank_account` as a payment method type to track and handle the states of the payment until the payment completes.\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support ACH Direct Debit payments:\n\n*   Express all [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items in US dollars (currency code `usd`).\n\n[](#create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guides you through enabling ACH Direct Debit and shows the differences between accepting a card payment and using this payment method.\n\n### Enable ACH Direct Debit as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `us_bank_account` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `usd` currency.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[0]\"=card \\  -d \"payment_method_types[1]\"=us_bank_account \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\nIf the customer opts for microdeposit verification instead of Financial Connections, Stripe automatically sends two small deposits to the provided bank account. These deposits can take 1-2 business days to appear on the customer’s online bank statement. When the deposits are expected to arrive, the customer receives an email with a link to confirm these amounts and verify the bank account with Stripe. After verification is complete, the payment begins processing.\n\nWe recommend including the [payment\\_intent\\_data.setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) parameter with a value of `off_session` when creating a payment mode Session for ACH Direct Debit so you can [save payment method details](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#save-payment-method-details).\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#additional-considerations)\n\n### Microdeposit verification failure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a bank account is pending verification with microdeposits, the customer can fail to verify for three reasons:\n\n*   The microdeposits failed to send to the customer’s bank account (this usually indicates a closed or unavailable bank account or incorrect bank account number).\n*   The customer made 10 failed verification attempts for the account. Exceeding this limit means the bank account can no longer be verified or reused.\n*   The customer failed to verify the bank account within 10 days.\n\nIf the bank account fails verification for one of these reasons, you can [handle the `checkout.session.async_payment_failed` event](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded=#event_types-checkout.session.async_payment_failed) to contact the customer about placing a new order.",
  "title": "Accept an ACH Direct Debit payment | Stripe Documentation",
  "description": "Build a custom payment form or use Stripe Checkout to accept payments with ACH Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_sessions/object",
  "markdown": "# The VerificationSession object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   #### \n    \n    client\\_secretnullable string\n    \n    The short-lived client secret used by Stripe.js to [show a verification modal](https://docs.stripe.com/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://docs.stripe.com/identity/verification-sessions#client-secret) to learn more.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    last\\_errornullable object\n    \n    If present, this property tells you the last error encountered when processing the verification.\n    \n*   #### \n    \n    last\\_verification\\_reportnullable stringExpandable\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A set of options for the session’s verification checks.\n    \n*   #### \n    \n    provided\\_detailsnullable objectExpandable\n    \n    Details provided about the user being verified. These details may be shown to the user.\n    \n*   Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.\n    \n*   Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n*   The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://docs.stripe.com/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verified\\_outputsnullable objectExpandable\n    \n    The user’s verified data.\n    \n\nThe VerificationSession object\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Create a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create)\n\nCreates a VerificationSession object.\n\nAfter the VerificationSession is created, display a verification modal using the session `client_secret` or send your users to the session’s `url`.\n\nIf your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.\n\nRelated guide: [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n*   The URL that the user will be redirected to upon completing the verification flow.\n    \n*   The type of [verification check](https://docs.stripe.com/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.\n    \n*   The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.\n    \n\n### Returns\n\nReturns the created VerificationSession object\n\nPOST /v1/identity/verification\\_sessions\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=document\n```\n\n```\n{  \"id\": \"vs_1NuN4zLkdIwHu7ixleE6HvkI\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680197,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Update a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/update)\n\nUpdates a VerificationSession object.\n\nWhen the session status is `requires_input`, you can use this method to update the verification check and options.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n\n### Returns\n\nReturns the updated VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN9WLkdIwHu7ix597AR9uz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=id_number\n```\n\n```\n{  \"id\": \"vs_1NuN9WLkdIwHu7ix597AR9uz\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680478,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"id_number\",  \"url\": \"...\"}\n```\n\n## [Retrieve a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve)\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [List VerificationSessions](https://docs.stripe.com/api/identity/verification_sessions/list)\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```",
  "title": "The VerificationSession object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create_without_intent",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/identity/modal",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/identity/insights",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Insights\n\n## Learn how to identify risks and understand signals from verification checks.\n\nStripe Identity’s machine learning system considers a variety of signals when verifying a user’s identity. It examines a number of factors to produce insights that can give further clarity into Stripe’s decision.\n\nThese insights are more nuanced than the top-level verification decisions, and you can use them to assist with manual reviews or customer support processes.\n\n### Definitions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Insights**: The name Stripe uses to refer to the collection of all insights.\n*   **Insight**: The specific attribute scored (for example, blur, authenticity). It’s of either type `Level` or `Label`.\n    *   **Level**: These insights provide a computed level, which is a score that translates to low, elevated, or high. Insights of this type evaluate the potential risk to verification.\n    *   **Label**: These insights provide a binary value of being either present or absent. Some of these insights evaluate a potential risk to verification, but others might be neutral, with no inherent risk associated with them.\n\n## Document insights![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese are the insights produced on [document checks](https://docs.stripe.com/identity/verification-checks?type=document):\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Activity on Stripe network | `Label` | Indicates whether the identity presented fails to match a Stripe-known identity. It’s not uncommon for an identity to be unknown, though it does represent higher risk than a known user. |\n| Barcode or machine-readable zone | `Level` | Indicates if the machine-readable zone or barcode is present and decoded, but was manipulated. |\n| Document authenticity | `Level` | Indicates whether the document presented might have been digitally manipulated or is otherwise inauthentic. |\n| Fraud | `Level` | This comprehensive score evaluates various signals related to document verification, including signals from Stripe Network data. |\n| Image blurriness | `Level` | Indicates the severity of the blurriness of the document image presented during the verification process. |\n| Physical document detection | `Level` | Indicates whether the document presented is a screenshot of a document. |\n| Risky behavior on the Stripe network | `Label` | Indicates whether the identity presented matches a Stripe-known identity with a history of high risk activity. |\n\n## Selfie insights![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese are the insights produced on [selfie checks](https://docs.stripe.com/identity/verification-checks?type=selfie):\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Duplicate selfie | `Label` | Indicates whether the selfie presented matches a selfie from a previous identity verification. |\n| Duplicate selfie with a data mismatch | `Label` | Indicates that the selfie presented matches a selfie from a previous identity verification, but the extracted document data from each doesn’t match. |\n| Selfie and document match | `Level` | Indicates whether the selfie isn’t a high confidence match with the face on the document. |\n| Selfie liveness | `Level` | Indicates that the selfie presented might not have been a live person in front of the camera, such as a photograph or screen presentation attack. |\n\n## Dashboard usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Dashboard page for a submitted VerificationSession contains a panel showing the insights generated for this session.",
  "title": "Insights | Stripe Documentation",
  "description": "Learn how to identify risks and understand signals from verification checks.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/transactions/object",
  "markdown": "# The Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The ID of the Financial Connections Account this transaction belongs to.\n    \n*   The amount of this transaction, in cents.\n    \n\n*   The description of this transaction.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The status of the transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `pending`<br><br>This transaction is processing and does not yet affect the account’s balance. |\n    | `posted`<br><br>This transaction has processed and affects the account’s balance. |\n    | `void`<br><br>This transaction has disappeared and no longer affects the account’s balance. |\n    \n*   The timestamps at which the transaction status was updated.\n    \n*   Time at which the transaction was transacted. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    transaction\\_refreshstring\n    \n    The token of the transaction refresh that last updated or created this transaction.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/financial-connections/transaction/retrieve)\n\nRetrieves the details of a Financial Connections `Transaction`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Transaction` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/transactions/fctxn_1MwVKd2eZvKYlo2ChNw2UxSa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [List Transactions](https://docs.stripe.com/api/financial_connections/transactions/list)\n\nReturns a list of Financial Connections `Transaction` objects.\n\n### Parameters\n\n*   The ID of the Stripe account whose transactions will be retrieved.\n    \n*   A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\n    \n*   #### \n    \n    transaction\\_refreshobject\n    \n    A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Transaction` objects, starting after transaction `starting_after`. Each entry in the array is a separate `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/transactions\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=fca_1NpHiT2eZvKYlo2C6pRwOFjr \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fctxn_1NpHiT2eZvKYlo2CZFvnM3HJ\",      \"object\": \"financial_connections.transaction\",      \"account\": \"fca_1NpHiT2eZvKYlo2C6pRwOFjr\",      \"amount\": 300,      \"currency\": \"usd\",      \"description\": \"Rocket Rides\",      \"livemode\": false,      \"status\": \"posted\",      \"status_transitions\": {        \"posted_at\": 1694467941,        \"void_at\": null      },      \"transacted_at\": 1694467941,      \"transaction_refresh\": \"fctxnref_OcWmGrWptAdJ2bmpYE2P0Hws\",      \"updated\": 1694467941    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Transaction object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/identity/verification-checks?type=id-number",
  "markdown": "# Verification checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different verification checks supported by Stripe Identity.\n\nStripe Identity currently supports five types of verification checks: document, selfie, ID number, address, and phone.\n\nEach verification check requires different information from your user, has different coverage, and has a different verification flow. After you’ve integrated one check, you can add another with minimal changes to your integration.\n\nID Number checks provide a way to verify a user’s name, date of birth, and national ID number. Stripe uses a combination of third-party data sources such as credit agencies or bureaus, utility or government-issued databases, and others to verify the provided ID number.\n\nTo add ID number checks to your app, see [Creating a VerificationSession](https://docs.stripe.com/identity/verification-sessions#create).\n\n### Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nID Number checks are available in the following countries:\n\n### Additional Availability Invite only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Reach out to support](https://support.stripe.com/contact) to request access to ID Number countries in the following countries:\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n*   [Adding selfie checks](https://docs.stripe.com/identity/selfie)\n*   [The Verification Sessions API](https://docs.stripe.com/identity/verification-sessions#create)",
  "title": "Verification checks | Stripe Documentation",
  "description": "Learn about the different verification checks supported by Stripe Identity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli/fixtures",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/pending-updates-reference",
  "markdown": "# Pending updates reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the pending updates feature.\n\n## Supported attributes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnly certain attributes can be used to create a pending update. These attributes either control proration behavior or generate new [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\nThe supported attributes for the [update subscription](https://docs.stripe.com/api/subscriptions/update) endpoint are:\n\n*   `expand`\n*   `payment_behavior`\n*   `proration_behavior`\n*   `proration_date`\n*   `billing_cycle_anchor`\n*   `items`\n    *   `price`\n    *   `quantity`\n*   `trial_end`\n*   `trial_from_plan`\n*   `add_invoice_items`\n\nThe supported attributes for the [create subscription item](https://docs.stripe.com/api/subscription_items/create) and [update subscription item](https://docs.stripe.com/api/subscription_items/update) endpoints are:\n\n*   `expand`\n*   `payment_behavior`\n*   `proration_behavior`\n*   `proration_date`\n*   `price`\n*   `quantity`\n\n## Pending updates lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf payment succeeds, the invoice is updated to `paid` and the changes are applied to the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") immediately. If payment fails, the updated values are added to the `pending_update` hash on the `Subscription` object. The `latest_invoice` for the subscription refers to an unpaid invoice in an `open` status. The subscription will continue to cycle as if no update request was made.\n\nThere are two ways to [handle payment failures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments). These are related to declines and customer authentication. After resolving these issues, payment is attempted again. If the payment succeeds, the changes are applied and the `pending_update` hash is cleared. If payment fails again, the `pending_update` hash remains on the subscription with the original expiry date and no changes are applied.\n\nIf you [cancel a pending update](https://docs.stripe.com/billing/subscriptions/pending-updates#canceling-changing), the `pending_update` hash is cleared and the associated changes are discarded.\n\n### Expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t take any action after an update fails, the invoice is voided and the pending update is discarded after the `expired_at` time on the `pending_update` has passed. This time is set to either the [trial end](https://docs.stripe.com/api/subscriptions/object#subscription_object-trial_end) time or the [current period end](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end), whichever comes first. If these times are greater than 23 hours from the time the update is made, the `expired_at` time is calculated to 23 hours after the update call was made.\n\nStripe also automatically voids the invoice and removes the pending update if any of the following occurs:\n\n*   The subscription reaches a billing threshold.\n*   A subscription schedule linked to the subscription transitions to a new phase.\n\n## Pending updates events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to listen for the following events related to pending updates:\n\n| Event | Purpose |\n| --- | --- |\n| `customer.subscription.updated` | Receive notifications for subscriptions, checking for the `pending_updates` hash and [resolving payment failures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments) if needed. |\n| `customer.subscription.pending_update_applied` | Receive notifications when pending updates are applied so that you can take further actions like upgrading, downgrading, provisioning or deprovisioning services, and so on. |\n| `customer.subscription.pending_update_expired` | Receive notifications when pending updates expire or are automatically voided, and if needed, try the update request again. |\n\n## Pending updates and subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPending updates and [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) can both be used to manage subscriptions. If a pending update exists when a schedule changes phases, the pending update is discarded and the associated invoice is voided before the phase transition occurs. You can retry the update request after the phase transition if needed.\n\n## Usage records![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a subscription includes metered items, Stripe bills any outstanding usage records on the pending update invoice. However, if payment for the pending update doesn’t occur before the expiration date, Stripe discards these usage records, which prevents billing on the subsequent invoice. Additionally, if the pending update removes a metered price, Stripe disregards any usage reported between the pending update’s creation and the resulting invoice’s payment, excluding it from all invoices.",
  "title": "Pending updates reference | Stripe Documentation",
  "description": "Learn more about the pending updates feature.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/saas",
  "markdown": "# Integrate a SaaS business on Stripe\n\n## Learn how to build a Software as a Service (SaaS) business with Billing and other Stripe products.\n\nMany Stripe users have a SaaS business model that involves subscriptions or recurring payments. This guide describes the unique actions you need to take in your Stripe integration to support typical SaaS business models. To help get you started more quickly, this guide presents no-code options where available.\n\n[](#modeling)\n\nSet up pricing structures for different products. Stripe Billing supports many types of pricing models, including:\n\n*   Flat rate-Good-better-best\n*   Per-seat\n*   Usage-based pricing\n*   Tiered pricing\n*   Multiple prices\n*   Multiple products in a subscription\n\nLearn more about [product modeling](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#pricing)\n\nThe pricing table is an embeddable UI component that displays pricing models for different subscription options. With pricing tables, customers can view pricing information and select a subscription. After selecting a subscription, they can complete the purchase with Stripe Checkout. Learn more about [pricing tables for SaaS businesses](https://docs.stripe.com/payments/checkout/pricing-table).\n\n![Pricing table is an embedded UI that displays pricing information and takes customers to Checkout.](https://b.stripecdn.com/docs-statics-srv/assets/pricing-table-embed.b27a06fcd84b57a8866a8b4b62323fdc.png)\n\nEmbed a pricing table on your website to display pricing details and convert customers to checkout.\n\n[](#discounts)\n\nUse discounts to acquire new subscribers. You can create coupons and apply them to a subscription or create a customer-facing promotion code that customers can apply at checkout. Learn more about [discounts for subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n[](#trials)\n\nLet customers try your product before subscribing. With Stripe Checkout, they can sign up for a trial without submitting payment information. You can configure a subscription to automatically send a reminder email when the trial is about to expire. Learn more about [trials](https://docs.stripe.com/payments/checkout/free-trials).\n\n[](#subscriptions)\n\nThe customer portal lets customers manage their subscriptions in a self-serve environment where they can:\n\n*   Update their subscription plan\n*   Cancel their subscription plan\n*   Add or update a payment method\n*   Update billing and shipping information\n*   Review their invoice history\n\nLearn more about [integrating the customer portal](https://docs.stripe.com/customer-management).\n\n![Customer portal](https://b.stripecdn.com/docs-statics-srv/assets/customer-portal.c7a8337f3b8ef35b9c55595187508996.png)\n\nCustomer portal\n\n[](#invoices)\n\nInvoices represent how much money a customer owes, and Stripe automatically generates one for every period in a subscription billing cycle. You can also create an invoice manually for custom deals or one-time payments. When an invoice is due, Stripe tries to collect payment by either automatically charging the payment method on file, or emailing the invoice. Learn more about [invoices](https://docs.stripe.com/invoicing).\n\n![Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-guide.df3cc5a1e4180c338269aacdfa792180.png)\n\nHosted Invoice Page\n\n[](#monitor)\n\nMonitor subscriptions in the Dashboard or set up webhook endpoints and listen for events. Learn more about [subscriptions and webhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\nYou can also use [Affiliate and referral Stripe Apps](https://marketplace.stripe.com/categories/affiliate_and_referrals) to set up and manage referral and affiliate programs with Stripe, get customer information, and automate commission adjustments from the Stripe Dashboard.\n\n[](#retries)\n\nUse recovery tools like Smart Retries and reminder emails to recover revenue that would be lost to involuntary churn. Learn more about [revenue recovery tools](https://docs.stripe.com/billing/revenue-recovery).\n\n[](#tax)\n\nAfter you register to collect taxes, Stripe Tax determines your customer’s location, and automatically calculates and collects the correct amount of tax at checkout. Stripe Tax supports sales tax, VAT, and GST. Learn more about [Stripe Tax](https://docs.stripe.com/tax).\n\n[](#recurring-revenue)\n\nUse Stripe Revenue Recognition to automate revenue reporting and stay compliant with rules for accrual accounting. Stripe Revenue Recognition automates revenue accounting based on your payments and billing transactions.\n\nLearn more about [Revenue Recognition](https://docs.stripe.com/revenue-recognition).\n\n[](#test)\n\nTest your integration to make sure it behaves as you expect. With test clocks, you can simulate how a subscription integration would handle events such as trials and payment failures over a billing cycle. Learn more about [testing subscriptions integrations](https://docs.stripe.com/billing/testing).",
  "title": "Integrate a SaaS business on Stripe | Stripe Documentation",
  "description": "Learn how to build a Software as a Service (SaaS) business with Billing and other Stripe products.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/sales-led-billing",
  "markdown": "# Sales-led B2B billing | Stripe DocumentationThe Stripe Docs logo\n\n## Quote and bill complex sales contracts automatically on Stripe Billing.\n\nStripe Billing enables you to set up and automate workflows for your sales team. This guide explains how to model complex sales contracts, use Quotes to negotiate them with your customers, create sales-negotiated deals in the Stripe Dashboard, and update or renew such contracts. If a feature in this guide doesn’t have a Beta label, then it’s publicly available.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to request early access to the beta features mentioned in this guide.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales-led B2B billing features allow sales-focused businesses to track and manage sales and fulfillment processes end-to-end. A typical sales deal flow is an iterative process that lasts as long as the lifecycle of your customer. It starts with a quote that the sales team creates and finalizes with the customer. After finalizing the quote, your team shapes the deal in Stripe Billing. Throughout the lifecycle of the deal, events like end of term renewals, upselling new products, and amending mid-cycle changes require you to make changes to the existing deal or create a new one. Using the Stripe sales-led B2B billing features, you can automate and manage the end-to-end deal flow within Stripe.\n\nSee the following diagram for a visual representation of a common deal lifecycle.\n\n![Deal flow](https://b.stripecdn.com/docs-statics-srv/assets/deal-flow.5b5d78bfd1e971b5143da8f450c506bf.png)\n\n## Model your contract![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nQuotes allow you to deliver estimated pricing for requested sales deals and can help facilitate negotiation before beginning a subscription or invoice. You can offer pre-sales deal pricing by creating a quote for the customer. Whether your sold deal requires a single invoice, a subscription, or a multiphase ramp up deal, use quotes to provide your customers with a price estimate, including any discounts or taxes.\n\nYour sales team can start drafting a quote in the Stripe dashboard or automate the creation of one using the Stripe API. The quote remains in draft mode during the initial negotiation. After you finalize the quote you can send it to the customer for approval. Upon approving the quote, your sales team can convert the approved quote to a deployed deal containing a subscription, invoice, or multiphase installment plan.\n\nYou don’t use quotes exclusively during the initial deal creation process—you also use them when customers renew, buy additional products mid-cycle (upsell), or request changes to their existing deals. In all of these scenarios, the sales team typically goes through a new quote negotiation process and uses the approved quote to apply an amendment to the existing deal or create a new deal. Stripe’s advanced multiphase quote functionality (beta) enables your team to apply amendments to the existing deal. These functionalities work directly with Stripe subscriptions, subscription schedules, and invoices to give full flexibility of building a complex deal process.\n\nLearn more about some of the existing Stripe [quote functionalities](https://docs.stripe.com/quotes) and sign up in the [form above](#request-early-access) to get access to some of the more advanced deal flow quoting capabilities.\n\nIf you’re using a third-party quoting tool to create and finalize your quotes, you can use one of our [connectors](https://docs.stripe.com/connectors) to create your sold deals within Stripe. For example, the [Stripe Billing connector for Salesforce (beta)](https://docs.stripe.com/billing/integrations/salesforce) enables your sales team to manage subscriptions on Stripe directly on Salesforce.\n\n### Model your pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing Stripe Products and Prices, you can model your subscription pricing model and one-off charges. Both subscriptions and invoices work with Products and Prices. In many sales deal scenarios, the sales team overrides the original price based on the negotiated deal. Ad-hoc prices allow your team to override predefined prices. Read the [getting started guide](https://docs.stripe.com/products-prices/getting-started) to learn how to create products and prices. If you already have a product catalog in another system, you can also [import that product catalog](https://docs.stripe.com/products-prices/getting-started#import-products-prices) into Stripe using the API. If you have any questions, contact Stripe Support at [support-migrations@stripe.com](mailto:support-migrations@stripe.com).\n\n## Create a contract![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales deals can become very complex. You might have billing cycle durations with different pricing models, discounts, and advanced fee structures. A simple scenario is when you ramp up your pricing over a period of three years. Stripe Billing’s [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) enable your sales team to create these deals. Your subscriptions can be basic flat rate monthly deals or complex multi-year ramp ups.\n\nThe following sections describe some of the sales-led B2B billing capabilities for creating a sales deal.\n\n### Create contract subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s sales-led B2B billing features work on top of Stripe Billing, our subscriptions platform. Stripe Billing allows you to create subscriptions and update different aspects of subscriptions, such as the billing cycle and the subscription price. You can use subscription schedules to automate these updates over time. Subscription schedules are made up of phases that define how and when changes to a subscription occur. For example, you can set a subscription schedule to begin a subscription on a future date. Here is a quick video of how to create complex multi-phase subscription schedules using the Stripe Billing dashboard:\n\nSubscription schedules in the Dashboard\n\n### Create contract invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s sales-led B2B billing features also work on top of Stripe Invoicing, allowing you to [create invoices](https://docs.stripe.com/invoicing) with complex fee structures, automated sales taxes, and due date modifications. Converting a quote automatically creates an invoice. You can also create them manually from the Stripe Dashboard. After you create the invoice, you can also send the invoice link to your users to pay it through a hosted invoice page. Stripe Invoicing automates the email reminders for any past due and failed payments.\n\n### Prebill customers in advance Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome customers pay for a certain number of billing cycles when they sign the deal. Sales prebills the customer when the deal is created. Using the Stripe prebilling feature you can charge customers for more than the next service period. This enables use cases like charging customers up front for their first 3 months when they sign up for your service, or charging early for an upcoming renewal.\n\nA prebilled subscription continues to cycle naturally, but no invoices are generated based on the recurring price until the prebilled period has ended. Prebilling creates an invoice immediately with the current period plus the number of additional cycles to collect up front. Afterward, a prebilled subscription continues to cycle naturally. One-off subscription invoices are generated at the time of renewal if pending invoice items are created during the prebilled period.\n\n### Offer trials and discounts Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales teams often offer trials and discounts during deal negotiations to incentivize customers. You can offer free time-based trials such as a 14-day free trial before sending the invoices, or paid trials that have a promotional price for the first 2 months of the deal.\n\n### Additional discount features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can apply multiple discounts to each phase of a given subscription. You can also apply discounts at a line-item level for each price-point you sell.\n\n## Update a contract Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDeals get updated often. For example, the customer might be approaching the end of the deal and need a renewal plan, they might be buying a new product soon after the closing, or requesting a change to the originally agreed upon contract. All of these reasons cause sales teams to create an amendment. Amendments allow your sales team to apply updates to deals without managing the complex changes that need to happen to every phase of the subscription. You can apply amendments directly to an existing deal or apply them through a new quote agreement.\n\nChanges to a deal such as upgrading or downgrading can result in prorated charges. You can configure your deal to enable proration charges when you apply amendments. You can also decide to handle prorations differently for different phases of the deal using Stripe’s advanced proration features.\n\nYou can prebill customers, offer different trials, and apply additional discounts during the deal update process. Your sales team can apply these changes from the Stripe Dashboard or automate it through our [third-party connectors](https://docs.stripe.com/connectors).\n\n## Let customers manage invoices and subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Stripe customer portal as a no-code way to manage subscriptions and invoices. You can configure the customer portal to allow certain subscription management features for your customers. After you create and amend deals, customers can go to the customer portal to manage their payment method, download invoices, and pay invoices. Your sales team can share a direct link to the customer portal with your customers or your product team to integrate it inside your SaaS application.\n\nYou can also use the Stripe API and webhooks to automatically apply the deal updates inside your SaaS app or sync with third-party tools.\n\n## Migrate old deals to new pricing Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have deals that you need to update to a new pricing model, it might be time consuming to update those deals manually. With the price migration toolkit, you can migrate all or a portion of your existing deals to new pricing models.\n\nIf you have subscriptions from other sources, like an internal homegrown billing system or a third-party billing solution, you can [import them into Stripe Billing](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions). If you’re also moving payment processors from a third-party to Stripe Payments, you can use our data migration process to request a migration on your behalf. To request support on data migration, contact [billing-migrations@stripe.com](mailto:billing-migrations@stripe.com).\n\n## Billing features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere’s a list of Stripe’s sales-led B2B billing capabilities. If you’re interested in getting early access to some of these beta features, you can sign up in the [form above](#request-early-access).\n\n| Component | Description |\n| --- | --- |\n| **Quotes** | Use [quotes](https://docs.stripe.com/quotes) to combine recurring and one-off line items so you can provide your customers with a price estimate, including any discounts or taxes. |\n| **Advanced multi-phase quotes**<br><br>Beta | Create quotes with multiple phases that correspond to your sales process phases. |\n| **Invoices** | Use [Stripe Invoicing](https://docs.stripe.com/invoicing) to create, customize, and send invoices to customers. Automatically charge your customer’s payment method on file, or email them the invoice with or without a link to a payment page. |\n| **Hosted invoice page** | Use the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page#set-payment-methods) to securely collect payment from your customers. From the Hosted Invoice Page, you can configure invoices to allow payment with one or more of the [supported payment methods](https://docs.stripe.com/invoicing/payment-methods). |\n| **Subscriptions** | Create subscriptions and multi-phase subscription schedules to model your complex deal flow. |\n| **Prebilling**<br><br>Beta | Prebill customers ahead of schedule. Prebilling lets you charge customers in advance for upcoming billing cycles. |\n| **Advanced discounts**<br><br>Beta | Apply multiple discounts to subscriptions or individual line items. |\n| **Prorate scheduled changes upfront**<br><br>Beta | By default, prorations might occur when the subscription is updated. When updates are scheduled for the same billing cycle, simplify prorations by prorating for all the scheduled changes up front rather than every time the updates happen. |\n| **Price migrations**<br><br>Beta | Use price migration to move customers from an old pricing model to a new pricing model. |\n| **Amendments**<br><br>Beta | Use amendments to update an existing multi-phase contract. |\n| **Paid trials**<br><br>Beta | Charge a fee for trial days. |\n| **Customer portal** | Let your customers manage their subscriptions through a Stripe-hosted [customer portal](https://docs.stripe.com/customer-management) without writing any code. |",
  "title": "Sales-led B2B billing | Stripe Documentation",
  "description": "Quote and bill complex sales contracts automatically on Stripe Billing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/testing",
  "markdown": "# Testing Stripe Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Before going live, test your Connect integration for account creation, identity verification, and payouts.\n\nUse testing to make sure your [Connect](https://docs.stripe.com/connect \"Connect\") integration handles different flows correctly. Use [test mode](https://docs.stripe.com/test-mode) to simulate live mode while taking advantage of Stripe-provided special tokens to use in your tests. Take a look at our [payments testing guide](https://docs.stripe.com/testing) for more information on testing charges, disputes, and so on.\n\n## Create test accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create multiple test accounts and use any [account type](https://docs.stripe.com/connect/accounts) or [controller properties](https://docs.stripe.com/connect/migrate-to-controller-properties) you might need (for example, representing multiple countries).\n\nYou can create test accounts using the [Accounts API](https://docs.stripe.com/api/accounts/create) or in the [Stripe Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#creating-accounts).\n\nUse `000-000` as the SMS code when prompted for test accounts.\n\n## Test the OAuth flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can test your OAuth integration with connected accounts that use a Stripe-hosted dashboard using your test mode `client_id`.\n\nYour test mode `client_id` is `ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb`. You can find this in your [Connect OAuth settings](https://dashboard.stripe.com/settings/connect/onboarding-options/oauth).\n\nYour test mode `client_id` allows you to:\n\n*   Set your `redirect_uri` to a non-HTTPS URL\n*   Set your `redirect_uri` to **localhost**\n*   Force-skip the account form instead of having to fill out an entire account application (Stripe Dashboard accounts only)\n*   Get test access tokens for connected accounts\n\nTo test the [OAuth](https://docs.stripe.com/connect/oauth-standard-accounts) flow, create a new account after clicking the OAuth link. You can also test connecting an existing Stripe account only if the email is different from your platform account.\n\n## Identity verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter creating a test connected account, you can use tokens to test different verification statuses to make sure you’re handling different requirements and account states. You can use the following tokens to test verification with test accounts.\n\n### Test dates of birth ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these dates of birth (DOB) to trigger certain verification conditions.\n\n| DOB | Type |\n| --- | --- |\n| `1901-01-01` | Successful verification. Any other DOB results in unsuccessful verification. |\n| `1902-01-01` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n| `1900-01-01` | This DOB triggers an Office of Foreign Assets Control (OFAC) alert. |\n\n### Test addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these addresses for `line1` to trigger certain verification conditions. You must pass in legitimate values for the `city`, `state`, and `postal_code` arguments.\n\n| Token | Type |\n| --- | --- |\n| `address_full_match`​ | Successful verification. |\n| `address_no_match` | Unsuccessful verification. |\n| `address_line1_no_match` | Unsuccessful verification from partial address match. |\n\n### Test personal ID numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these personal ID numbers for [individual.id\\_number](https://docs.stripe.com/api/accounts/create#create_account-individual-id_number) or the [id\\_number](https://docs.stripe.com/api/persons/create#create_person-id_number) attribute on the `Person` object to trigger certain verification conditions.\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification. **0000** also works for SSN last 4 verification. |\n| `111111111` | Unsuccessful verification (identity mismatch). |\n| `222222222` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n\n### Test identity documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor testing, use file tokens instead of uploading your own test IDs. For details, refer to [Uploading a file](https://docs.stripe.com/connect/handling-api-verification#upload-a-file).\n\n### Test file tokens ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these file tokens to trigger certain identity verification conditions.\n\n| Token | Type |\n| --- | --- |\n| `file_identity_document_success` | Uses the verified image and marks that document requirement as satisfied. |\n| `file_identity_document_failure` | Uses the unverified image and marks that document requirement as not satisfied. |\n\n## Business information verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Business address validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some countries, the business address associated with your connected account must be validated before charges, [payouts](https://docs.stripe.com/payouts \"payout\"), or both can be enabled on the connected account.\n\n### Test business addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these addresses for `line1` to trigger certain validation conditions. You must pass in legitimate values for the `city`, `state`, and `postal_code` arguments.\n\nMake sure you start with an address token that has the least permissive validation condition you want to test for. This is because you can’t use an address token that has a more restrictive validation condition than the previous token used. For example, if you provided `address_full_match` to have both charges and payouts enabled, you can’t disable payouts or charges afterward by changing the token to an invalid one. You can work around this by creating a new account with the relevant token.\n\n| Token | Type |\n| --- | --- |\n| `address_full_match`​ | Both charges and payouts are enabled on the account. |\n| `address_no_match`​ | Only charges are enabled on the account. Since validation failed on the `line1` attribute, it becomes listed again in the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. |\n| `address_line1_no_match` | Neither charges nor payouts are enabled on the account. Since validation failed, the address attributes become listed again in the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. |\n\n### Test business tax IDs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these business tax ID numbers for [company.tax\\_id](https://docs.stripe.com/api/accounts/create#create_account-company-tax_id) to trigger certain verification conditions.\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification. |\n| `000000001` | Successful verification as a non-profit. |\n| `111111111` | Unsuccessful verification (identity mismatch). |\n| `111111112` | Unsuccessful verification (tax ID not issued). |\n| `222222222` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n\n### Test directorship verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe performs directorship verification by comparing the list of directors on the `Account` object against a list retrieved from local registries. If the country requires it, you can trigger verification for an `Account` object by using these tokens for the [person.first\\_name](https://docs.stripe.com/api/persons/object#person_object-first_name) attribute and setting the [person.relationship.director](https://docs.stripe.com/api/persons/object#person_object-relationship-director) attribute to true.\n\n| Token | Type |\n| --- | --- |\n| `mismatch_director` | Unsuccessful verification of director due to a mismatched name. This can trigger a `verification_directors_mismatch` verification error. |\n| `missing_director` | Unsuccessful verification due to directors missing on the account. This can trigger a `verification_missing_directors` verification error. |\n| `extraneous_director` | Unsuccessful verification due to too many directors on the account. This can trigger a `verification_extraneous_directors` verification error. |\n\nThe verification errors can trigger if multiple directors on the `Account` object use these magic tokens.\n\n### Test company name verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger company name verification for an `Account` object by using this token for the [company.name](https://docs.stripe.com/api/accounts/object#account_object-company-name) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch_business_name` | Unsuccessful verification due to a mismatched business name. |\n| `disallowed_name` | Unsuccessful verification due to a generic or well-known business name. |\n| `match_name_relationships` | Successful verification of the business name. |\n| `match_name_only` | Unsuccessful verification due to a business name discrepancy. |\n\n### Test statement descriptor verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger statement descriptor verification for an `Account` object by using this token for the [settings.payments.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payments-statement_descriptor) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch` | Trigger an `invalid_statement_descriptor_business_mismatch` verification error. |\n| `disallowed` | Trigger an `invalid_statement_descriptor_denylisted` verification error. |\n\nTrigger statement descriptor prefix verification for an `Account` object by using this token for the [settings.payments.statement\\_descriptor\\_prefix](https://docs.stripe.com/api/accounts/object#account_object-settings-payments-statement_descriptor_prefix) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch` | Trigger an `invalid_statement_descriptor_prefix_mismatch` verification error. |\n| `disallowed` | Trigger an `invalid_statement_descriptor_prefix_denylisted` verification error. |\n\n### Test business URL verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger URL verification for an `Account` object by using this token for the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) attribute.\n\n| Token | Type |\n| --- | --- |\n| `https://disallowed.stripe.com` | Trigger an `invalid_url_denylisted` verification error. |\n| `https://geoblocked.stripe.com` | Trigger an `invalid_url_website_inaccessible_geoblocked` verification error. |\n| `https://problem.stripe.com` | Trigger an `invalid_url_website_other` verification error. |\n| `https://missing.stripe.com` | Trigger an `invalid_url_website_incomplete` verification error. |\n| `https://mismatch.stripe.com` | Trigger an `invalid_url_website_business_information_mismatch` verification error. |\n| `https://passwordprotected.stripe.com` | Trigger an `invalid_url_website_inaccessible_password_protected` verification error. |\n| `https://accessible.stripe.com` | Trigger a successful validation of the URL. |\n| `https://underconstruction.stripe.com` | Trigger an `invalid_url_website_incomplete_under_construction` verification error. |\n| `https://inaccessible.stripe.com` | Trigger an `invalid_url_website_inaccessible` verification error. |\n\n### Test Doing Business As (DBA) verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger DBA verification for an `Account` object by using this token for the [business\\_profile.name](https://docs.stripe.com/api/accounts/object#account_object-business_profile-name) attribute.\n\n| Token | Type |\n| --- | --- |\n| `disallowed_dba` | Trigger an `invalid_business_profile_name_denylisted` verification error. |\n| `invalid_dba` | Trigger an `invalid_business_profile_name` verification error. |\n\n### Test product description verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger product description verification for an `Account` object by using this token for the [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) attribute.\n\n| Token | Type |\n| --- | --- |\n| `require_url` | Trigger an `invalid_url_web_presence_detected` verification error. |\n\n### Test capability disabled reasons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger assignment of a specific [requirements.disabled\\_reason](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-disabled_reason) to all of an `Account` object’s inactive `Capability` objects by using this token for the account’s [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) attribute.\n\n| Token | Type |\n| --- | --- |\n| `https://inactivity.stripe.com` | Set an account with no recent activity as inactive and pause all verifications for it. Set the disabled reason for any inactive capabilities to `paused.inactivity` (`rejected.other` for API versions prior to `2024-06-20`). |\n\n## Trigger or advance verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Trigger cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these card numbers to trigger various conditions when you’re testing both requirements and tiered verification. For the trigger actions to work, you must use these cards with a Connect charge by setting [`on_behalf_of`](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant), or creating the charge [directly on the connected account](https://docs.stripe.com/connect/direct-charges).\n\n| Number | Token | Type |\n| --- | --- | --- |\n| 4000000000004202 | `tok_visa_triggerNextRequirements` | Changes the next set of eventually due requirements to currently due. |\n| 4000000000004210 | `tok_visa_triggerChargeBlock` | Triggers a charge block. |\n| 4000000000004236 | `tok_visa_triggerPayoutBlock` | Triggers a payout block. |\n\n#### Trigger next requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLive mode can require additional verification information when a connected account processes a certain amount of volume. This card sets any additional verification information to be required immediately. If no additional information is required, nothing appears.\n\n#### Trigger a charge or payout block![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf required information isn’t provided by the deadline, Stripe disables the connected account’s charges or payouts. These cards disable the connected account and move any currently due requirements to overdue. These cards have no effect until an account provides the initial information that’s required to enable charges and payouts.\n\n### Trigger bank account ownership verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts in the United States and India are subject to [Bank account ownership verification](https://support.stripe.com/questions/bank-account-ownership-verification). You can complete this verification by uploading supporting documents with the Connect Dashboard or with the API through the [documents\\[bank\\_account\\_ownership\\_verification\\]](https://docs.stripe.com/api/accounts/update#update_account-documents-bank_account_ownership_verification-files) hash.\n\nIn test mode, you can simulate the US bank account ownership verification process. Use the following test bank account numbers to trigger the verification process. One number presumes successful verification and the other prompts you to upload test images or file tokens to complete the verification process. These test accounts are only available for US accounts.\n\n| Routing | Account | Type |\n| --- | --- | --- |\n| `110000000` | `000999999991` | Triggers and completes the bank account ownership verification process after a short delay |\n| `110000000` | `000999999992` | Beta Triggers the bank account ownership verification process after a short delay and requests for document upload |\n\n### Simulate requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform has connected accounts in different countries or plans to, you might need to verify a person’s address as well as their identity (depending on the country). Stripe provides a sample [date of birth](#test-dobs) (DOB) and sample [addresses](#test-verification-addresses) to test for this requirement.\n\n| Information provided | Person verification status | `requirements.currently_due` |\n| --- | --- | --- |\n| Verified date of birth and verified address | Verified | None |\n| Verified date of birth and unverified address | Unverified | `verification.additional_document` |\n| Unverified date of birth and verified address | Unverified | `verification.document` |\n| Unverified date of birth and unverified address | Unverified | `verification.additional_document`, `verification.document` |\n\n## Add funds to Stripe balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test [adding funds](https://docs.stripe.com/connect/top-ups) to your Stripe balance from a bank account in the Dashboard, enable test mode and select the desired test bank account in the drop-down menu within the **Add to balance** dialog. You can simulate success or failure due to insufficient funds.\n\nTo test adding funds in the API, use the following test bank tokens as the source while in test mode. Each token simulates a specific kind of event.\n\n| Token | Type |\n| --- | --- |\n| `btok_us_verified` | Successful |\n| `btok_us_verified_noAccount` | Unsuccessful with a `no_account` code |\n| `btok_us_verified_accountClosed` | Unsuccessful with an `account_closed` code |\n| `btok_us_verified_insufficientFunds` | Unsuccessful with an `insufficient_funds` code |\n| `btok_us_verified_debitNotAuthorized` | Unsuccessful with a `debit_not_authorized` code |\n| `btok_us_verified_invalidCurrency` | Unsuccessful with an `invalid_currency` code |\n\n## Payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following test bank and debit card numbers to trigger certain events during [payout](https://docs.stripe.com/connect/payouts-connected-accounts) testing. You can only use these values in test mode with test secret keys.\n\nTest mode payouts simulate a live payout but aren’t processed with the bank. Test mode accounts with Stripe Dashboard access always have payouts enabled, as long as valid external bank information and other relevant conditions are met, and never requires real identity verification.\n\n#### Note\n\nYou can’t use test bank and debit card numbers in the Stripe Dashboard on a live mode connected account. If you’ve entered your bank account information on a live mode account, you can still use test mode, and test mode payouts will simulate a live payout without processing actual money.\n\n### Bank numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these test bank account numbers to test payouts. You can only use them with test secret keys.\n\n| SWIFT / BIC Code | IBAN | Type |\n| --- | --- | --- |\n| `AAAAALTXXXX` | `AL35202111090000000001234567` | Payout succeeds. |\n| `AAAAALTXXXX` | `AL00000062370400440532013001` | Payout fails with a `no_account` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013002` | Payout fails with a `account_closed` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013003` | Payout fails with a `insufficient_funds` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013004` | Payout fails with a `debit_not_authorized` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013005` | Payout fails with a `invalid_currency` code. |\n\n### Debit card numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these test debit card numbers to test payouts to a debit card. These can only be used with test secret keys.\n\n| Number | Token | Type |\n| --- | --- | --- |\n| 4000056655665556 | `tok_visa_debit_us_transferSuccess` | Visa debit. Payout succeeds. |\n| 4000056655665572 | `tok_visa_debit_us_transferFail` | Visa debit. Payout fails with a `could_not_process` code. |\n| 4000056755665555 | `tok_visa_debit_us_instantPayoutUnsupported` | Visa debit. Card is not eligible for Instant Payouts. |\n| 5200828282828210 | `tok_mastercard_debit_us_transferSuccess` | Mastercard debit. Payout succeeds. |\n| 6011981111111113 | `tok_discover_debit_us_transferSuccess` | Discover debit. Payout succeeds. |",
  "title": "Testing Stripe Connect | Stripe Documentation",
  "description": "Before going live, test your Connect integration for account creation, identity verification, and payouts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoice/line_item",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/pause-payment",
  "markdown": "# Pause payment collection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to pause payment collection on subscriptions.\n\n#### Caution\n\nPausing payment collection is often used to temporarily offer your services for free. This is sometimes referred to as a “grace period” if a customer needs additional time to pay or can’t pay for one or more billing cycles.\n\nYou can pause or resume collection in the [Stripe Dashboard](https://support.stripe.com/questions/how-to-pause-or-cancel-subscriptions) or the API. While collection is paused, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") still generate [invoices](https://docs.stripe.com/api/invoices \"invoices\"), but you have a few options for handling these invoices. Review the following use cases to determine the best approach for you:\n\n| Use case | API configuration |\n| --- | --- |\n| [Temporarily offer services for free and collect payment later](#collect-payment-later) | Use `behavior=keep_as_draft` |\n| [Temporarily offer services for free and never collect payment](#collect-payment-never) | Use `behavior=void` |\n| [Temporarily offer services for free and mark invoice as uncollectible](#mark-as-uncollectible) | Use `behavior=mark_uncollectible` |\n\nIf these options don’t fit your use case, you might want to consider [canceling subscriptions](https://docs.stripe.com/billing/subscriptions/cancel) instead.\n\nInvoices created before subscriptions are paused continue to be [retried](https://docs.stripe.com/invoicing/automatic-collection) unless you [void](https://docs.stripe.com/api/invoices/void) them.\n\n## Temporarily offer services for free and never collect payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you temporarily want to offer your services for free and you don’t want to collect payment on the invoice (for example, a “grace period”), you can void invoices that your subscription creates to make sure that your customers aren’t charged and the subscription remains `status=active`. Use the Subscription ID to update `pause_collection[behavior]` to `void` and `pause_collection[resumes_at]` to the date you want to start collecting payments again.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=void`\n\nAll invoices created before the `resumes_at` date are immediately marked as void. Stripe won’t send any upcoming invoice emails or webhooks and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n## Temporarily offer services for free and collect payment later ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to temporarily offer your services for free and collect payments later, set `pause_collection[behavior]=keep_as_draft`. If you know when you want to resume collection, pass a timestamp for `resumes_at`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=keep_as_draft`\n\nAll invoices created before the `resumes_at` date remain in `draft` state and `auto_advance` is set to `false`. During this time, Stripe won’t send any upcoming invoice emails or webhooks for these invoices and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n#### Caution\n\nIf you have custom logic that finalizes invoices you might need to disable or modify it so that it doesn’t conflict with these settings.\n\nWhen you’re ready to collect payment for these invoices, set `auto_advance` back to `true`. If you don’t have the invoice IDs, you can use Subscription IDs to check for invoices with `status=draft`. Using the invoice ID, you can then update `auto_advance=true`:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d auto_advance=true`\n\n## Temporarily offer services for free and mark invoices as uncollectible ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you temporarily want to offer your services for free and mark any invoices generated by the subscription as uncollectible, use the Subscription ID to update `pause_collection[behavior]` to `mark_uncollectible` and optionally `pause_collection[resumes_at]` to the date you want to start collecting payments again. This makes sure that any downstream reporting is accurate, your customer isn’t charged, and the subscription remains `status=active`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=mark_uncollectible`\n\nAll invoices for the subscription created before the `resumes_at` date are immediately marked as uncollectible. Stripe won’t send any upcoming invoice emails or webhooks and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n## Manually unpausing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo resume collecting payments at any time, you can update the subscription and unset `pause_collection`:\n\n`curl https://api.stripe.com/v1/subscriptions/sub_GTbTiykEwMRog0 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"pause_collection\"=`\n\nResuming collection this way only affects future invoices.\n\n## Pausing and subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you pause a subscription on a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules), the scheduled updates still take effect. However, payment is not collected while the subscription is paused. When you want to collect payment again, you need to [manually unpause](#unpausing) the subscription. You also need to update `auto_advance` to `true` on any invoices with `status=draft` that you want to collect payment on.",
  "title": "Pause payment collection | Stripe Documentation",
  "description": "Learn how to pause payment collection on subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/api/invoices/line_item",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/cancel",
  "markdown": "# Cancel subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to cancel existing subscriptions.\n\nThis guide describes how to use the [Subscription API](https://docs.stripe.com/api#cancel_subscription) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions) to manage customer subscriptions.\n\nIf you want to keep a subscription active but temporarily stop collecting payment, you can [pause payment collection](https://docs.stripe.com/billing/subscriptions/pause-payment). Pausing payment collection doesn’t affect the [subscription status](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses), which we recommend using as the trigger for starting or stopping service to your customer.\n\n[Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") cancel automatically after up to four unsuccessful attempts to bill the customer. You can configure the number of attempts in your [subscription lifecycle settings](https://docs.stripe.com/billing/subscriptions/overview#settings). Learn more about revenue recovery settings, such as [Smart Retries](https://docs.stripe.com/billing/revenue-recovery/smart-retries#smart-retries) and configurable [customer emails](https://docs.stripe.com/billing/revenue-recovery/customer-emails#configure-emails).\n\n## Cancel subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel customer subscriptions manually through the [Subscription](https://docs.stripe.com/api#cancel_subscription) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions). By default, cancellation takes effect immediately and [invoices](https://docs.stripe.com/api/invoices \"invoices\") are no longer generated for canceled subscriptions.\n\n#### Common mistake\n\nIf you set a custom cancellation date, you can’t provide a refund. A credit proration is always generated. To prevent a credit proration from generating, make sure the custom cancellation date is within the current billing period and `proration_behavior` is set to `none`.\n\nTo cancel a subscription in the Dashboard:\n\n1.  From the customer account page or the subscription details page, click the overflow menu (), then select **Cancel subscription**.\n2.  Choose when to end the subscription: immediately, at the end of the period, or on a custom day.\n3.  Choose to provide a refund for a [prorated](https://docs.stripe.com/billing/subscriptions/prorations) amount, refund the last payment in full, or provide no [refund](https://docs.stripe.com/refunds).\n4.  After finalizing all settings, click **Cancel subscription**.\n\n### Prorate for usage-based billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a subscription is part of the way through a paid billing period, you can prorate the cancellation by passing the [prorate](https://docs.stripe.com/api/subscriptions/cancel#cancel_subscription-prorate) parameter.\n\nWhen you prorate a cancellation, you can optionally invoice for:\n\n*   Outstanding prorations\n*   [Metered usage](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n\nIf you don’t prorate the subscription, all metered usage gets discarded and the customer won’t receive credit for any potential prorations.\n\nCreate a final invoice immediately using the [invoice\\_now](https://docs.stripe.com/api/subscriptions/cancel#cancel_subscription-invoice_now) parameter. If you owe the customer a credit after cancellation, you can add the credit to their credit balance to apply to future invoices. To [refund your customer](https://support.stripe.com/questions/refunding-credit-balance-to-customer-after-subscription-downgrade-or-cancellation), issue [refunds](https://docs.stripe.com/refunds#issuing) and then [adjust their account balance](https://docs.stripe.com/billing/customer/balance#modifying) back to zero.\n\n### Cancel at the end of the current billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo cancel a subscription at the end of the current billing period, set `cancel_at_period_end` to `true`:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d cancel_at_period_end=true`\n\nThis allows the subscription to complete the duration of time the customer has already paid for. You can reactivate subscriptions scheduled for cancellation by updating `cancel_at_period_end` to `false`. You can reactivate the subscription at any time up to the end of the period.\n\n### Cancel at the end of a future billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo configure a subscription to end after a specified number of billing cycles, [define a schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules) for the subscription. Set the schedule length by specifying one or more phases and intervals, and set its `end_behavior` attribute to `cancel`.\n\n### Configure automatic cancellation after a dispute ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Limited support\n\nThis feature is only supported for disputed credit and debit card payments opened in the _full amount_.\n\nWhen a customer [disputes](https://docs.stripe.com/disputes) a charge for a subscription, the subscription continues to cycle, which can create more disputed charges. You can change this behavior in the [Dashboard](https://dashboard.stripe.com/settings/billing/automatic) to cancel subscriptions instead. Changes to the subscription take effect after approximately one hour.\n\nUnder [Manage disputed payments](https://dashboard.stripe.com/settings/billing/automatic), select one of the following:\n\n*   **cancel the subscription immediately without prorating** – The subscription cancels immediately without any prorating. You can’t restart a canceled subscription. You must create a new subscription for the customer if you want to continue billing them.\n    \n*   **cancel the subscription at the end of the period** – The subscription cancels at the end of the current billing period and [cancel\\_at\\_period\\_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-cancel_at_period_end) is set to `true`. This allows you time to work through the dispute process before the cancellation occurs.\n    \n\nFor subscriptions managed with [schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules), the subscription is first released from the schedule and then canceled. This means the rest of the scheduled changes won’t take effect.\n\n## Handle invoice items when canceling subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour customer might still be billed for pending [invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items) on a subscription in the following cases:\n\n*   The subscription cancellation includes a final invoice\n*   Your customer has another active subscription\n\nTo prevent billing your customer for pending invoice items, you must [manually delete](https://docs.stripe.com/api#delete_invoiceitem) the invoice items.\n\nSimilarly, any [usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage) reported during the billing period bills at the end of the period. To avoid a final usage charge, use the [clear\\_usage](https://docs.stripe.com/api#update_subscription-items-clear_usage) parameter to [update the subscription](https://docs.stripe.com/api#update_subscription) and remove the metered price.\n\nIf you set the subscription to cancel at period end, any pending prorations are left in place and still collected at the end of the period. If you cancel the subscription before the end of the period, invoice items remain and won’t be processed unless you specifically generate an invoice that includes them.\n\nWhen you cancel a subscription, all `open` and `draft` invoices for that subscription have their `auto_advance` property set to `false`. This [pauses automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) for these invoices and prevents automatic reminder emails from sending. You can still manually attempt to collect payment and send emails.\n\n## Identify cancellation events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends the following events for canceled subscriptions.\n\n| Event | Description |\n| --- | --- |\n| `customer.subscription.deleted` | Sent when you cancel a customer’s subscription immediately. If the event’s `request` property isn’t `null`, that indicates the cancellation is a result of your request rather than based on your subscription settings. |\n| `customer.subscription.updated` | Sent when you cancel a customer’s subscription at the end of the billing period. This triggers when you set `cancel_at_period_end` to `true` and the event reflects a change in the `cancel_at_period_end` value for the subscription. |\n\n## Stop a pending cancellation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can stop a scheduled cancellation through the [Update Subscription API](https://docs.stripe.com/api/subscriptions/update) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions). You can’t reactivate a canceled subscription.\n\nTo stop a scheduled cancellation in the Dashboard:\n\n1.  On the [Subscriptions page](https://dashboard.stripe.com/test/subscriptions), select the subscription you want to update.\n2.  From the Subscription details page, click **Actions**, then select **Don’t cancel**.\n\n## Set a custom cancel date ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [cancel\\_at](https://docs.stripe.com/api/subscriptions/update#update_subscription-cancel_at) parameter to cancel a subscription at a future timestamp.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d cancel_at=1723766400`\n\nWhen you schedule a cancel date that occurs before the billing period ends, the subscription’s [current\\_period\\_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end) updates to match the `cancel_at` date. This creates prorations for the change in the current period, unless your update [disables](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations) prorations.\n\nIf you schedule a cancel date that occurs more than one period away, the subscription’s cycle remains unaffected until the subscription renews into the period that contains the `cancel_at` date. Then, the `current_period_end` for the renewal shortens to match the `cancel_at` date.\n\nFor example, your customer subscribes to a 120 USD per year licensed subscription that renews on January 1, 2024. They cancel the subscription on July 1, 2024. The final invoice subtotal on January 1 calculates as 60 USD.\n\nChanging or removing a scheduled cancel date updates the `current_period_end` and creates prorations. In the above example, on February 15 you update the cancel date to October 1. The current period end becomes October 1, and Stripe creates prorations for 30 USD for the additional quarter. To invoice the prorated items immediately instead of in a final invoice on October 1, you can pass a [proration\\_behavior](https://docs.stripe.com/api/subscriptions/update#update_subscription-proration_behavior) of `always_invoice` in the update.",
  "title": "Cancel subscriptions | Stripe Documentation",
  "description": "Learn how to cancel existing subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/change",
  "markdown": "# Modify subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Change existing subscriptions to cancel, pause, apply prorated charges and credits, and more.\n\nYou can change existing subscriptions without having to cancel and recreate them. Set up the [customer portal](https://docs.stripe.com/customer-management) to let your customers manage their own subscriptions and billing details through a Stripe-hosted page.\n\nFor changes that automatically create a new [subscription invoice](https://docs.stripe.com/billing/invoices/subscription), use [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) so that the updates are only applied if the new invoice is successfully paid.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Modify subscriptions | Stripe Documentation",
  "description": "Use Stripe Billing to modify existing subscriptions. You can change the billing cycle, upgrate or downgrade the price, cancel, or pause a subscription. You can also apply discounts, use trial periods, set quantities, add taxes, or or set payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/third-party-payment-processing",
  "markdown": "# Third-party payment processing | Stripe DocumentationThe Stripe Docs logo\n\n## Integrate Stripe Billing subscriptions with third-party payment providers.\n\nWhen you use Stripe Billing with third-party payment processors, Stripe consolidates all of your key billing data, such as [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), payment amounts, and payment frequencies.\n\n## Out-of-band invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you submit payments to a third-party processor based on Stripe invoices, your system records the invoices as `paid_out_of_band`. The rest of Billing’s subscription cycle continues normally. You’ll customize two key Stripe Billing workflows:\n\n*   Collecting customers’ payment method details\n*   Paying invoices\n\nThe following diagrams illustrate the high-level request flows of a multiprocessor integration.\n\n### Collecting and storing customers’ payment method details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Paying invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#configure-stripe)\n\nTo set up a multiprocessor integration, you have to make some configuration changes to Stripe.\n\n### Disable invoice emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo prevent customers from paying directly on Stripe, disable automatic emails for any customer who processes payments on a third-party provider. To disable automatic emails:\n\n*   Disable **Send finalized invoices and credit notes to customers** in Stripe’s [automatic billing settings](https://dashboard.stripe.com/settings/billing/automatic). After you change this setting, changes to any subscription with [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) set to `send_invoice` won’t trigger customer emails. Only use this if all of your emailed subscription invoices are paid with a third-party payment provider.\n\n### Configure the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use the [customer portal](https://docs.stripe.com/customer-management#customer-portal-features), disable **Allow customers to view and update payment methods** in the [customer portal settings](https://dashboard.stripe.com/settings/billing/portal). (You also need to disable the **Customers can switch plans** setting.) You need to build custom flows to allow users to self-serve updates to their payment method on a third-party processor.\n\n[](#sign-up-new-customers)\n\n### Create a Stripe customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst create a blank [Customer](https://docs.stripe.com/api/customers) record on Stripe.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Create a subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, create a [Subscription](https://docs.stripe.com/api/subscription) and set the `collection_method` to `send_invoice`. This setting doesn’t require a Stripe payment method and generates [Invoices](https://docs.stripe.com/api/invoice) that must be paid directly instead. Set the `days_until_due` parameter to the number of days an unpaid invoice remains open before your [configured failed payment logic](https://docs.stripe.com/billing/subscriptions/overview#failed-payments) activates. You’re responsible for retrying failed payments on the third-party provider, and you need to set this long enough so that any recovery workflows you implement have time to complete.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d customer=  {{CUSTOMER_ID}}   \\  -d collection_method=send_invoice \\  -d days_until_due=30`\n\n### Present the amount to the user for payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThird-party payments don’t work with [Stripe Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") or [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\"). You have to build a checkout flow that uses the third party to create a valid payment method but with Stripe as the source of truth for billable amounts. To determine the amount to charge in the checkout flow, [retrieve the initial invoice](https://docs.stripe.com/api/invoices/retrieve) generated by the subscription.\n\n### Collect payment method details Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions from the third-party payment provider to collect payment method details from customers. Make sure to set up payment methods for use in future or off-session transactions.\n\nThe output of this step varies by processor. Some third-party processors provide a payment method token that you use to generate payments on that processor.\n\n### Update the Customer object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpdate the Customer record created in the [first step](#create-customer) of the subscription creation flow. For convenience, store non-sensitive third-party tokens as [metadata](https://docs.stripe.com/api/customers/object#customer_object-metadata) on the Customer record.\n\nRemember to turn off the **Send finalized invoices and credit notes to customers** option before setting the `email` property on the Customer.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d description=\"Third-party payment customer\" \\  -d \"metadata[third_party_customer_id]\"={{THIRD_PARTY_CUSTOMER_ID}} \\   -d \"metadata[third_party_payment_method_id]\"={{THIRD_PARTY_PAYMENT_METHOD_ID}}`\n\n[](#collect-payment)\n\n### Listen for `invoice.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll invoices (including the first invoice created from a subscription) start in a draft state and trigger [invoice.created](https://docs.stripe.com/api/events/types#event_types-invoice.created) webhooks. Invoices created by a subscription are automatically finalized after 1 hour to give time for integrations to modify the draft invoice. [Finalize the invoice manually](https://docs.stripe.com/api/invoices/finalize) to skip this delay.\n\nInvoice finalization triggers an [invoice.finalized](https://docs.stripe.com/api/events/types#event_types-invoice.finalized) event. [Listen to this event](https://docs.stripe.com/billing/subscriptions/webhooks) to trigger payments on the third-party processor.\n\n### Process payments Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions from the third-party payment provider to collect payments for the amounts represented on each invoice using the tokens stored on the associated Customer record. This might include listening to webhooks from the third party for notifications of successful payments.\n\n### Mark the Stripe Invoice as paid out-of-band![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen payment on the third party is successful, mark the corresponding invoice as `paid_out_of_band`.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/pay \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d paid_out_of_band=true`\n\nMark the invoice as paid before the subscription’s payment due date to keep the subscription operating normally. The Subscription object’s [days\\_until\\_due](https://docs.stripe.com/api/subscriptions/object#subscription_object-days_until_due) attribute defines the payment due date.\n\n[\n\n## Handle state changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-state-changes)\n\n### Stripe Subscription cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo cancel Subscriptions, remove third-party payment method details from Stripe’s Customer records and your database. Listen for the [customer.subscription.deleted](https://docs.stripe.com/api/events/types#event_types-customer.subscription.deleted) event and delete any tokens related to the canceled subscription.\n\n### Third-party payment cancellation Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome third-party payment processors allow end customers to cancel billing agreements directly. If the processor allows this, listen for any associated events and then [cancel the subscription](https://docs.stripe.com/api/subscriptions/cancel) on Stripe.\n\n### Refunds and disputes Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for processing refunds and disputes originating from the third-party processor. To maintain accurate accounting data, use [Credit Notes](https://docs.stripe.com/api/credit_notes/object) to adjust the amounts on issued invoices to log refunds. Create a Credit Note, and set the [out\\_of\\_band\\_amount](https://docs.stripe.com/api/credit_notes/create#create_credit_note-out_of_band_amount) to the refunded amount.\n\n[](#other-considerations)\n\n### Switching between third-party payments and Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo switch a customer from a third-party processor to Stripe:\n\n1.  Collect a new payment method for the customer by [setting up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) or using the [Customer Portal](https://docs.stripe.com/no-code/customer-portal).\n2.  Update the subscription [collection\\_method](https://docs.stripe.com/api/subscriptions/update#update_subscription-collection_method) from `send_invoice` to `charge_automatically` and set the new payment method as the `default_payment_method`.\n3.  Delete any existing third-party payment method tokens.\n\n### Retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must handle any recovery of failed third-party payments yourself. Stripe doesn’t have any visibility into the state of third-party payments until you mark an invoice as paid.\n\n### Taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax automatically adds the correct tax amounts to invoices as long as you set a billing postal code or IP address when [updating the Customer record after checkout](#update-customer).\n\n### Partial Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe don’t support partial payments on `out_of_band` invoices. In the event of a partial payment, use a Credit Note to adjust the original invoice then manually generate a new invoice for any remaining balance.",
  "title": "Third-party payment processing | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/amazon-pay",
  "markdown": "# Set up a subscription with Amazon Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/amazon-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Amazon Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/amazon-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#web-create-customer)\n\nTo save an Amazon Pay payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object after your customer creates an account on your business. Associating the ID of the `Customer` object with your own internal representation of a customer enables you to retrieve and use the payment method details that you store later. If your customer hasn’t created an account, you can still create a `Customer` object and associate it with your internal representation of their account at a later point.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. A [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The SetupIntent tracks the steps of this set up process. Create a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `amazon_pay` and specify the Customer’s ID and [usage=off\\_session](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-usage) or `usage=on_session`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d customer=cus_ODQluYFNl44ODI \\  -d \"payment_method_data[type]\"=amazon_pay \\  -d \"payment_method_types[]\"=amazon_pay \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe SetupIntent object contains a `client_secret`, which is a unique key that you must pass to Stripe.js on the client side to redirect your buyer to Amazon Pay and authorize the mandate.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\nNext, you save Amazon Pay on the client with [Stripe.js](https://docs.stripe.com/payments/elements).\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nWhen a customer clicks to pay with Amazon Pay, use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is the foundational JavaScript library for building payment flows. It automatically handles complexities like the redirect described below, and enables you to extend your integration to other payment methods. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nUse `stripe.confirmAmazonPaySetup` to confirm the setupIntent on the client side, with a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) and [mandate\\_data](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-mandate_data). Use the [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to redirect customers to a specific page after the SetupIntent succeeds.\n\n`// Redirects away from the client  const {error} = await stripe.confirmAmazonPaySetup(    '{{SETUP_INTENT_CLIENT_SECRET}}',    {      return_url: 'https://example.com/setup/complete',      mandate_data: {        customer_acceptance: {          type: 'online',          online: {              infer_from_client: true          }        }      },    }  );   if (error) {    // Inform the customer that there was an error.  }`\n\n[](#create-subscription)\n\nCreate a subscription that has a price and a customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true`\n\nCreating subscriptions automatically charges customers due to the pre-set default payment method. After a successful payment, the status in the Stripe Dashboard changes to **Active**. The price that you previously set up determines the amount for future billings. Learn how to [create a subscription with a free trial period](#trial-periods).",
  "title": "Set up a subscription with Amazon Pay | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with Amazon Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscription_items/object",
  "markdown": "# The Subscription Item object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The price the customer is subscribed to.\n    \n*   The [quantity](https://docs.stripe.com/subscriptions/quantities) of the plan to which the customer should be subscribed.\n    \n*   The `subscription` this `subscription_item` belongs to.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n\nThe Subscription Item object\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Create a subscription item](https://docs.stripe.com/api/subscription_items/create)\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```",
  "title": "The Subscription Item object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/bacs-debit",
  "markdown": "# Set up a subscription with Bacs Direct Debit\n\n## Use Stripe Checkout with Stripe Billing to set up recurring payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they will be redirected back to your site.\n\n[](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create recurring products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\n#### Caution\n\nThe Prices API unifies how one-time purchases and subscriptions are modeled on Stripe. Existing integrations that don’t use the Prices API are still [supported](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations). However, some Checkout features only support Prices. See the [migration guide](https://docs.stripe.com/payments/checkout/migrating-prices) to upgrade to the Prices API.\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a software _product_ that has four _prices_: 10 USD/month, 100 USD/year, 9 GBP/month, and 90 GBP/year. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through [the Stripe Dashboard](https://dashboard.stripe.com/products).\n\nIf your price is determined at checkout (for example, the customer sets a donation amount) or you prefer not to create prices upfront, you can create [prices inline](#creating-prices-inline) at Checkout Session creation.\n\nBefore you start configuring products, make sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the goods and services you plan to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/products) section in the Dashboard\n*   Click **Add product**\n*   Select “Recurring” when setting the price\n*   Configure the pricing plan\n\nYou can define multiple pricing plans with different parameters for each recurring product. Each price has a generated ID that you can use as a reference during the checkout process.\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** on the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods), enable the payment methods you want to accept from your customers. Checkout supports [several payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support).\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, Bacs Direct Debit is a delayed notification payment method, which means that funds aren’t immediately available. A Bacs Direct Debit payment typically takes three business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou can confirm the payment is successful in several ways:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nThere are several test bank account numbers you can use in [test mode](https://docs.stripe.com/keys#test-live-modes) to make sure this integration is ready.\n\n| Sort code | Account number | Description |\n| --- | --- | --- |\n| 10-88-00 | 00012345 | The payment succeeds and the Invoice transitions to `paid`. |\n| 10-88-00 | 90012345 | The payment succeeds after three minutes and the Invoice transitions to `paid`. |\n| 10-88-00 | 33333335 | The payment fails with a `debit_not_authorized` failure code and the Invoice transitions to `open`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 10-88-00 | 93333335 | The payment fails after three minutes with a `debit_not_authorized` failure code and the Invoice transitions to `open`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 10-88-00 | 22222227 | The payment fails with an `insufficient_funds` failure code and the Invoice transitions to `open`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 10-88-00 | 92222227 | The payment fails after three minutes with an `insufficient_funds` failure code and the Invoice transitions to `open`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 10-88-00 | 55555559 | The payment succeeds after three minutes and the Invoice transitions to `paid`, but a dispute is immediately created. |\n| 10-88-00 | 00033333 | Payment Method creation succeeds, but the Mandate is refused by the customer’s bank and immediately transitions to inactive. |\n| 10-88-00 | 00044444 | The request to set up Bacs Direct Debit fails immediately due to an invalid account number and the customer is prompted to update their information before submitting. Payment details are not collected. |\n\nYou can test using any of the account numbers provided above. However, because Bacs Direct Debit payments take several days to process, use the test account numbers that operate on a three-minute delay to better simulate the behavior of live payments.\n\n#### Note\n\nBy default, Stripe automatically sends [emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) to the customer when payment details are initially collected and each time a debit will be made on their account. These notifications aren’t sent in testmode.",
  "title": "Set up a subscription with Bacs Direct Debit | Stripe Documentation",
  "description": "Use Stripe Checkout with Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/ach-debit",
  "markdown": "# Set up a subscription with ACH Direct Debit\n\n## Learn how to create and charge for a subscription with US bank account.\n\n#### Note\n\nIf you’re a new user, use the [Payment Element](https://docs.stripe.com/payments/payment-element) instead of using Stripe Elements as described in this guide. The Payment Element provides a low-code integration path with built-in conversion optimizations. For instructions, see [Build a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-subscription)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer with status `incomplete` by providing the [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) parameter with the value of `default_incomplete`.\n\n`curl https://api.stripe.com/v1/subscriptions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"price_F52b2UdntfQsfR\" \\   -d \"payment_behavior\"=\"default_incomplete\" \\   -d \"payment_settings[payment_method_types][]\"=\"us_bank_account\" \\   -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nIncluded in the response is the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.\n\n[](#collect-payment-details)\n\nWhen a customer clicks to pay with ACH Direct Debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can complete the charge. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.collectBankAccountForPayment](https://docs.stripe.com/js/payment_intents/collect_bank_account_for_payment) to collect bank account details with [Financial Connections](https://docs.stripe.com/financial-connections), create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), and attach that PaymentMethod to the PaymentIntent. Including the account holder’s name in the `billing_details` parameter is required to create an ACH Direct Debit PaymentMethod.\n\n`// Use the form that already exists on the web page. const paymentMethodForm = document.getElementById('payment-method-form'); const confirmationForm = document.getElementById('confirmation-form');  paymentMethodForm.addEventListener('submit', (ev) => {   ev.preventDefault();   const accountHolderNameField = document.getElementById('account-holder-name-field');   const emailField = document.getElementById('email-field');    // Calling this method will open the instant verification dialog.   stripe.collectBankAccountForPayment({     clientSecret: clientSecret,     params: {       payment_method_type: 'us_bank_account',       payment_method_data: {         billing_details: {           name: accountHolderNameField.value,           email: emailField.value,         },       },     },     expand: ['payment_method'],   })   .then(({paymentIntent, error}) => {     if (error) {       console.error(error.message);       // PaymentMethod collection failed for some reason.     } else if (paymentIntent.status === 'requires_payment_method') {       // Customer canceled the hosted verification modal. Present them with other       // payment method type options.     } else if (paymentIntent.status === 'requires_confirmation') {       // We collected an account - possibly instantly verified, but possibly       // manually-entered. Display payment method details and mandate text       // to the customer and confirm the intent once they accept       // the mandate.       confirmationForm.show();     }   }); });`\n\nThe [Financial Connections authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) automatically handles bank account details collection and verification. When your customer completes the authentication flow, the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") automatically attaches to the PaymentIntent, and creates a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts).\n\n#### Common mistake\n\nBank accounts that your customers link through manual entry and microdeposits won’t have access to additional bank account data like balances, ownership, and transactions.\n\nTo provide the best user experience on all devices, set the viewport `minimum-scale` for your page to 1 using the viewport `meta` tag.\n\n`<meta name=\"viewport\" content=\"width=device-width, minimum-scale=1\" />`\n\n[\n\n## Collect mandate acknowledgement and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-mandate-and-submit)\n\nBefore you can initiate the payment, you must obtain authorization from your customer by displaying mandate terms for them to accept.\n\nTo be compliant with Nacha rules, you must obtain authorization from your customer before you can initiate payment by displaying mandate terms for them to accept. For more information on mandates, see [Mandates](https://docs.stripe.com/payments/ach-debit#mandates).\n\nWhen the customer accepts the mandate terms, you must confirm the PaymentIntent. Use [stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) to complete the payment when the customer submits the form.\n\n`confirmationForm.addEventListener('submit', (ev) => {   ev.preventDefault();   stripe.confirmUsBankAccountPayment(clientSecret)   .then(({paymentIntent, error}) => {     if (error) {       console.error(error.message);       // The payment failed for some reason.     } else if (paymentIntent.status === \"requires_payment_method\") {       // Confirmation failed. Attempt again with a different payment method.     } else if (paymentIntent.status === \"processing\") {       // Confirmation succeeded! The account will be debited.       // Display a message to customer.     } else if (paymentIntent.next_action?.type === \"verify_with_microdeposits\") {       // The account needs to be verified via microdeposits.       // Display a message to consumer with next steps (consumer waits for       // microdeposits, then enters a statement descriptor code on a page sent to them via email).     }   }); });`\n\n#### Note\n\n[stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) may take several seconds to complete. During that time, disable resubmittals of your form and show a waiting indicator (for example, a spinner). If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf the customer completes instant verification, the subscription automatically becomes `active`. Otherwise, see [Verify bank account with microdeposits](#verify-with-microdeposits) to learn how to handle microdeposit verification while the subscription remains `incomplete`.\n\n[](#verify-with-microdeposits)\n\n#### Note\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") have 10 days to successfully verify microdeposits for a subscription, instead of the 23 hours normally given in the [subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle). However, this expiration can’t be later than the [billing cycle date](#billing-cycle).\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn these cases, Stripe sends a `descriptor_code` microdeposit and might fall back to an `amount` microdeposit if any further issues arise with verifying the bank account. These deposits take 1-2 business days to appear on the customer’s online statement.\n\n*   **Descriptor code**. Stripe sends a single, 0.01 USD microdeposit to the customer’s bank account with a unique, 6-digit `descriptor_code` that starts with SM. Your customer uses this string to verify their bank account.\n*   **Amount**. Stripe sends two, non-unique microdeposits to the customer’s bank account, with a statement descriptor that reads `ACCTVERIFY`. Your customer uses the deposit amounts to verify their bank account.\n\nThe result of the [stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\n`next_action: {   type: \"verify_with_microdeposits\",   verify_with_microdeposits: {     arrival_date: 1647586800,     hosted_verification_url: \"[https://payments.stripe.com/…](https://payments.stripe.com/%E2%80%A6)\",     microdeposit_type: \"descriptor_code\"   } }`\n\nIf you supplied a [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe notifies your customer via this email when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\n#### Warning\n\nVerification attempts have a limit of ten failures for descriptor-based microdeposits and three for amount-based ones. If you exceed this limit, we can no longer verify the bank account. In addition, microdeposit verifications have a timeout of 10 days. If you can’t verify microdeposits in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Send custom email notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOptionally, you can send [custom email notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) to your customer. After you set up custom emails, you need to specify how the customer responds to the verification email. To do so, choose _one_ of the following:\n\n*   Use the Stripe-hosted verification page. To do this, use the `verify_with_microdeposits[hosted_verification_url]` URL in the [`next_action`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-verify_with_microdeposits-hosted_verification_url) object to direct your customer to complete the verification process.\n    \n*   If you prefer not to use the Stripe-hosted verification page, create a form on your site. Your customers then use this form to relay microdeposit amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n    \n    *   At minimum, set up the form to handle the `descriptor code` parameter, which is a 6-digit string for verification purposes.\n    *   Stripe also recommends that you set your form to handle the `amounts` parameter, as some banks your customers use may require it.\n    \n    Integrations only pass in the `descriptor_code` _or_ `amounts`. To determine which one your integration uses, check the value for `verify_with_microdeposits[microdeposit_type]` in the `next_action` object.\n    \n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   // Provide either a descriptor_code OR amounts, not both   descriptor_code: 'SMT86W',   amounts: [32, 45], });`\n\n[](#default-payment-method)\n\nYou now have an active [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") belonging to a customer with a payment method, but this payment method isn’t automatically used for future payments. To automatically bill this payment method in the future, use a [webhook](https://docs.stripe.com/webhooks \"webhook\") consumer to listen to the `invoice.payment_succeeded` event for new subscriptions and set the default payment method.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`if event.type == 'invoice.payment_succeeded'   invoice = event.data.object   if invoice['billing_reason'] == 'subscription_create'     subscription_id = invoice['subscription']     payment_intent_id = invoice['payment_intent']      # Retrieve the payment intent used to pay the subscription     payment_intent = Stripe::PaymentIntent.retrieve(payment_intent_id)      # Set the default payment method     Stripe::Subscription.update(       subscription_id,       default_payment_method: payment_intent.payment_method     )   end end`\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |",
  "title": "Set up a subscription with ACH Direct Debit | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with US bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/au-becs-debit",
  "markdown": "# Set up a subscription with BECS Direct Debit in Australia\n\n## Learn how to create and charge for a subscription with BECS Direct Debit.\n\n#### Note\n\nIf you’re a new user, use the [Payment Element](https://docs.stripe.com/payments/payment-element) instead of using Stripe Elements as described in this guide. The Payment Element provides a low-code integration path with built-in conversion optimizations. For instructions, see [Build a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 AUD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **AUD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` will track the steps of this set-up process. For BECS Direct Debit, this includes collecting a mandate from the customer and tracking its validity throughout its lifecycle.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `au_becs_debit`:\n\n`curl https://api.stripe.com/v1/setup_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"au_becs_debit\"`\n\nThe returned `SetupIntent` object contains a `client_secret` property. Pass the client secret to the client-side application to continue with the setup process.\n\n[](#collect-payment-method-details)\n\nYou’re ready to collect payment information on the client with [Stripe Elements](https://docs.stripe.com/payments/elements). Elements is a set of prebuilt UI components for collecting payment details.\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Elements is automatically available as a feature of Stripe.js. Include the Stripe.js script on your payment page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of [Elements](https://docs.stripe.com/js#stripe-elements) with the following JavaScript on your payment page:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n### Direct Debit Requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you can create a BECS Direct Debit payment, your customer must agree with the Direct Debit Request Service Agreement. They do so by submitting a completed Direct Debit Request (DDR). The approval gives you a mandate to debit their account. The `Mandate` is a record of the permission to debit a payment method.\n\nFor online mandate acceptance, you can create a form to collect the necessary information. Serve the form over [HTTPS](https://docs.stripe.com/security/guide#tls) and capture the following information:\n\n| Information | Description |\n| --- | --- |\n| **Account name** | The full name of the account holder |\n| **BSB number** | The Bank-State-Branch number of the bank account (for example, `123-456`) |\n| **Account number** | The bank account number (for example, `87654321`) |\n\nWhen collecting a Direct Debit Request, follow our [BECS Direct Debit Terms](https://stripe.com/au-becs/legal) and as part of your checkout form:\n\n*   Display the exact terms of [Stripe’s DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) either inline on the form, or on a page linked from the form, and identifying it as the “DDR service agreement.”\n*   Make sure the accepted DDR and its accompanying [DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) can be shared with your customer at all times, either as a printed or non-changeable electronic copy (such as email). Stripe hosts this for you.\n*   Display the following standard authorization text for your customer to accept the BECS DDR, where you replace _Rocketship Inc_ with your company name. Their acceptance authorizes you to initiate BECS Direct Debit payments from their bank account.\n\n#### Note\n\nBy providing your bank account details, you agree to this Direct Debit Request and the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal), and authorize Stripe Payments Australia Pty Ltd ACN 160 180 343 Direct Debit User ID number 507156 (“Stripe”) to debit your account through the Bulk Electronic Clearing System (BECS) on behalf of _Rocketship Inc_ (the “Merchant”) for any amounts separately communicated to you by the Merchant. You certify that you’re either an account holder or an authorized signatory on the account listed above.\n\nThe details of the accepted mandate are generated when setting up a [PaymentMethod](https://docs.stripe.com/payments/payment-methods) or confirming a `PaymentIntent`. At all times, you should be able to share this mandate—the accepted DDR and its accompanying DDR service agreement—with your customer, either in print or as a non-changeable electronic copy (such as email). Stripe hosts this for you under the `url` property of the `Mandate` object linked to the `PaymentMethod`.\n\n### Add and configure an Australia Bank Account Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Australia Bank Account Element will help you collect and validate both the BSB number and the account number. It needs a place to live in your payment form. Create empty DOM nodes (containers) with unique IDs in your payment form. Additionally, your customer must read and accept the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal).\n\n`<form action=\"/setup\" method=\"post\" id=\"setup-form\">   <div class=\"form-row inline\">     <div class=\"col\">       <label for=\"accountholder-name\">         Name       </label>       <input         id=\"accountholder-name\"         name=\"accountholder-name\"         placeholder=\"John Smith\"         required       />     </div>     <div class=\"col\">       <label for=\"email\">         Email Address       </label>       <input         id=\"email\"         name=\"email\"         type=\"email\"         placeholder=\"john.smith@example.com\"         required       />     </div>   </div>    <div class=\"form-row\">     <!--     Using a label with a for attribute that matches the ID of the     Element container enables the Element to automatically gain focus     when the customer clicks on the label.     -->     <label for=\"au-bank-account-element\">       Bank Account     </label>     <div id=\"au-bank-account-element\">       <!-- A Stripe Element will be inserted here. -->     </div>   </div>    <!-- Used to display bank (branch) name associated with the entered BSB -->   <div id=\"bank-name\"></div>    <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div>    <!-- Display mandate acceptance text. -->   <div class=\"col\" id=\"mandate-acceptance\">     By providing your bank account details, you agree to this Direct Debit Request     and the <a href=\"stripe.com/au-becs-dd-service-agreement/legal\">Direct Debit Request service agreement</a>,     and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343     Direct Debit User ID number 507156 (“Stripe”) to debit your account     through the Bulk Electronic Clearing System (BECS) on behalf of     Rocket Rides (the \"Merchant\") for any amounts separately     communicated to you by the Merchant. You certify that you are either     an account holder or an authorised signatory on the account listed above.   </div>      <!-- Add the client_secret from the SetupIntent as a data attribute -->   <button id=\"submit-button\" data-secret=\"{{CLIENT_SECRET}}\">Set up BECS Direct Debit</button>  </form>`\n\nWhen the form loads, you can [create an instance](https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account) of the Australia Bank Account Element and mount it to the Element container:\n\n``// Custom styling can be passed to options when creating an Element const style = {   base: {     color: '#32325d',     fontSize: '16px',     '::placeholder': {       color: '#aab7c4'     },     ':-webkit-autofill': {       color: '#32325d',     },   },   invalid: {     color: '#fa755a',     iconColor: '#fa755a',     ':-webkit-autofill': {       color: '#fa755a',     },   } };  const options = {     style: style,     disabled: false,     hideIcon: false,     iconStyle: \"default\", // or \"solid\" }  // Create an instance of the auBankAccount Element. const auBankAccount = elements.create('auBankAccount', options);  // Add an instance of the auBankAccount Element into // the `au-bank-account-element` <div>. auBankAccount.mount('#au-bank-account-element');``\n\n[](#submit-payment-method)\n\nRather than sending the entire `SetupIntent` object to the client, use its [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) from [step 2](#web-create-setup-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should be handled carefully because it can complete the setup. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) to complete the setup when the user submits the form. A successful setup returns a `succeeded` value for the SetupIntent’s `status` property. If the setup isn’t successful, inspect the returned `error` to determine the cause.\n\n`const form = document.getElementById('setup-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();   stripe.confirmAuBecsDebitSetup(     clientSecret,     {       payment_method: {         au_becs_debit: auBankAccount,         billing_details: {           name: accountholderName.value,           email: email.value         }       }     }   ); });`\n\nAfter successfully confirming the `SetupIntent`, you should share the [mandate URL](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-au_becs_debit-url) from the [Mandate object](https://docs.stripe.com/api/mandates) with your customer. We also recommend including the following details to your customer when you confirm their mandate has been established:\n\n*   an explicit confirmation message that indicates a Direct Debit arrangement has been set up\n*   the [business name](#statement-descriptors) that will appear on the customer’s bank statement whenever their account gets debited\n*   the payment amount and schedule (if applicable)\n*   a link to the generated DDR mandate URL\n\nThe `Mandate` object’s ID is accessible from the `mandate` on the SetupIntent object, which is sent as part of the `setup_intent.succeeded` event sent after confirmation, but can also be [retrieved through the API](https://docs.stripe.com/api/setup_intents/retrieve).\n\n`curl https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=mandate`\n\n[](#create-customer)\n\nCreating [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") requires a [customer](https://docs.stripe.com/api#customer_object), which represents the customer purchasing your product. Because the price you created charges on a monthly basis, you need to add a stored payment method to the customer so future payments are successful. You do this by setting the payment method you just collected at the top level of the [Customer](https://docs.stripe.com/api/customers \"Customers\") object and as the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) for [invoices](https://docs.stripe.com/api/invoices \"invoices\"):\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"invoice_settings[default_payment_method]\"=pm_1FU2bgBF6ERF9jhEQvwnA7sX`\n\nThis returns a `Customer` object. You can see the default payment method in the `invoice_settings` object:\n\n`{   \"id\": \"cus_Gk0uVzT2M4xOKD\",   \"object\": \"customer\",   \"address\": null,   \"balance\": 0,   \"created\": 1581797088,   \"currency\": null,   \"default_source\": null,   \"delinquent\": false,   \"description\": null,   \"discount\": null,   \"email\": \"jenny.rosen@example.com\",   \"invoice_prefix\": \"11D0B3D7\",   \"invoice_settings\": {     \"custom_fields\": null,     \"default_payment_method\": \"pm_1FU2bgBF6ERF9jhEQvwnA7sX\",     \"footer\": null   },`\n\nAfter creating the customer, store the `id` value in your own database so you can use it later. The next step also requires this ID.\n\n[](#create-subscription-code)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nCreating subscriptions automatically charges customers because the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) is set. After a successful payment, the status in the [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions) changes to **Active**. The price you created earlier determines subsequent billings.\n\n[](#test-integration)\n\nYou can test your form using the test BSB number `000-000` and one of the test account numbers below with your [confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) request.\n\n| BSB Number | Account Number | Description |\n| --- | --- | --- |\n| `000-000` | `000123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`. The mandate status remains `active`. |\n| `000-000` | `900123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded` (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `111111113` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with an `account_closed` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `111111116` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `no_account` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `222222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code. The mandate status remains `active`. |\n| `000-000` | `922222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `333333335` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `debit_not_authorized` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `666666660` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`, but a dispute is immediately created. |",
  "title": "Set up a subscription with BECS Direct Debit in Australia | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with BECS Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/cash-app-pay",
  "markdown": "# Set up a subscription with Cash App Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/cash-app-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Cash App Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/cash-app-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this setup process.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d \"payment_method_data[type]\"=cashapp \\  -d \"payment_method_types[]\"=cashapp \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe returned SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which the client side uses to securely complete the setup instead of passing the entire SetupIntent object. You can use different approaches to [pass the client secret to the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client). The SetupIntent response also includes a payment method ID that you need to use in the next step to confirm a PaymentIntent.\n\nThe SetupIntent response includes the status `requires_action`, which means your users must perform another action to complete the SetupIntent. Use the `next_action.cashapp_handle_redirect_or_display_qr_code` object from the SetupIntent response to redirect your users to a Stripe hosted page that displays the QR code, or render the QR code directly. To authenticate users, follow the instructions to [confirm SetupIntent and save a payment method](https://docs.stripe.com/payments/cash-app-pay/set-up-payment?platform=web&ui=direct-api#web-create-setup-intent). After they authenticate, the Cash App mobile application redirects users to the `return_url` on their mobile device, and the SetupIntent moves to a `succeeded` state.\n\n[](#create-subscription)\n\nCreate a subscription that has a price and customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}}`\n\nIncluded in the response is the subscription’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which you use on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.",
  "title": "Set up a subscription with Cash App Pay | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with Cash App Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/revolut-pay",
  "markdown": "# Set up a subscription with Revolut Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/revolut-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Revolut Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/revolut-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 GBP monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **GBP** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this setup process.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d customer=cus_ODQluYFNl44ODI \\  -d \"payment_method_data[type]\"=revolut_pay \\  -d \"payment_method_types[]\"=revolut_pay \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe SetupIntent object contains a `client_secret`, which is a unique key that you must pass to Stripe.js on the client side to redirect your buyer to Revolut Pay and authorize the mandate.\n\n[](#create-subscription)\n\nCreate a subscription that has a price and a customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true`\n\nCreating subscriptions automatically charges customers due to the pre-set default payment method. After a successful payment, the status in the Stripe Dashboard changes to **Active**. The price that you previously set up determines the amount for future billings. Learn how to [create a subscription with a free trial period](#trial-periods).",
  "title": "Set up a subscription with Revolut Pay | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with Revolut Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/paypal",
  "markdown": "# Set up a subscription with PayPal\n\n## Learn how to create and charge for a subscription with PayPal.\n\n#### Caution\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 EUR monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **EUR** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#web-create-a-customer)\n\nTo reuse a PayPal payment method for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account on your business. Associating the ID of the Customer object with your own internal representation of a customer will enable you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent and tracks the steps to set up your customer’s payment method for future payments.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `paypal` and specify the [Customer](https://docs.stripe.com/api/customers \"Customers\")’s [id](https://docs.stripe.com/api/customers/object#customer_object-id).\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_data[type]\"=paypal`\n\nThe SetupIntent object contains a [client\\_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret), a unique key that you need to pass to Stripe on the client side to redirect your buyer to PayPal and authorize the mandate.\n\n[](#web-confirm-setup-intent)\n\nWhen a customer attempts to set up their PayPal account for future payments, we recommend you use [Stripe.js](https://docs.stripe.com/js) to confirm the SetupIntent. Stripe.js is our foundational JavaScript library for building payment flows. It will automatically handle complexities like the redirect described below, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the head of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {} );`\n\nTo confirm the setup on the client side, pass the client secret of the SetupIntent object that you created in Step 3.\n\nThe client secret is different from your API keys that authenticate Stripe API requests. It should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\n### Confirm PayPal Setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo authorize you to use their PayPal account for future payments, your customer will be redirected to a PayPal billing agreement page, which they will need to approve before being redirected back to your website. Use [stripe.confirmPayPalSetup](https://docs.stripe.com/js/setup_intents/confirm_paypal_setup) to handle the redirect away from your page and to complete the setup. Add a `return_url` to this function to indicate where Stripe should redirect the user to after they approve the billing agreement on PayPal’s website.\n\n`// Redirects away from the client const {error} = await stripe.confirmPayPalSetup(   '{{SETUP_INTENT_CLIENT_SECRET}}',   {     return_url: 'https://example.com/setup/complete',     mandate_data: {       customer_acceptance: {         type: 'online',         online: {             infer_from_client: true         }       }     },   } );  if (error) {   // Inform the customer that there was an error. }`\n\nYou can find the Payment Method owner’s email, payer ID, and Billing Agreement ID on the resulting [Mandate](https://docs.stripe.com/api/mandates/) under the [payment\\_method\\_details](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-paypal) property. You can also find the buyer’s email and payer ID in the [paypal](https://docs.stripe.com/api/payment_methods/object#payment_method_object-paypal) property on the [PaymentMethod](https://docs.stripe.com/api/payment_methods).\n\n| Field | Value |\n| --- | --- |\n| `verified_email` | The email address of the payer on their PayPal account. |\n| `payer_id` | A unique ID of the payer’s PayPal account. |\n| `billing_agreement_id` | The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the business and the customer. |\n\n[](#web-monitor-webhooks)\n\nUse a method such as [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the billing agreement was authorized successfully by your customer, instead of relying on your customer to return to the payment status page. When a customer successfully authorizes the billing agreement, the SetupIntent emits the [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event. If a customer doesn’t successfully authorize the billing agreement, the SetupIntent will emit the [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event and returns to a status of `requires_payment_method`. When a customer revokes the billing agreement from their PayPal account, the [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) is emitted.\n\n[](#create-subscription-code)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"expand[0]\"=\"latest_invoice.payment_intent\" \\  -d off_session=true`\n\nCreating [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") automatically charges customers because the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) is set. After a successful payment, the status in the [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions) changes to **Active**. The price you created earlier determines subsequent billings.\n\n[](#update-subscription)\n\nWhen you update a subscription, you need to specify `off_session=true`. Otherwise, any new payment will require a user redirection to PayPal for confirmation. For example, if you want to change the quantity of an item included in the subscription you can use:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"items[0][quantity]\"=2 \\  -d off_session=true`\n\n[](#test-integration)\n\nTest your PayPal integration with your [test API keys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.",
  "title": "Set up a subscription with PayPal | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with PayPal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode",
  "markdown": "# Set up a subscription with PayPal\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.",
  "title": "Set up a subscription with PayPal | Stripe Documentation",
  "description": "Use Stripe Checkout with Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/acss-debit",
  "markdown": "# Set up a subscription with pre-authorized debit in Canada\n\n## Learn how to create and charge for a subscription with Canadian pre-authorized debits.\n\n#### Note\n\nSubscription mode in [Checkout](https://docs.stripe.com/payments/checkout) isn’t yet supported. To learn about early access when this feature is available, [contact us](mailto:payment-methods-feedback@stripe.com?subject=PADs%20Subscription%20Mode%20User%20Interest) to join the waitlist.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 CAD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **CAD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-subscription)\n\n#### Note\n\nTo create a subscription with a free trial period, see [Subscription trials](#trial-periods).\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer with status `incomplete` by providing the [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) parameter with the value of `default_incomplete`.\n\n`curl https://api.stripe.com/v1/subscriptions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"price_F52b2UdntfQsfR\" \\   -d \"payment_behavior\"=\"default_incomplete\" \\   -d \"payment_settings[payment_method_types][]\"=\"acss_debit\" \\   -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nIncluded in the response is the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.\n\n[\n\n## Collect payment method details and mandate acknowledgment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-payment-and-mandate)\n\nTo use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nStripe automatically configures subscription and [invoice](https://docs.stripe.com/api/invoices \"invoices\") mandates for you. The customer only needs to acknowledge the mandate terms once, subsequent subscription charges will succeed without further intervention.\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment) to collect bank account details and verification, confirm the mandate, and complete the payment when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on PaymentIntent's status.       console.log(\"PaymentIntent ID: \" + paymentIntent.id);       console.log(\"PaymentIntent status: \" + paymentIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitPayment` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf the customer completes instant verification, the subscription automatically becomes `active`. Otherwise, consult the following section to handle micro-deposit verification while the subscription remains `incomplete`.\n\n[](#verify-with-microdeposits)\n\n#### Note\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") have 10 days to successfully verify micro-deposits for a subscription, instead of 23 hours normally given in the [subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle). However, this expiration can’t be later than the [billing cycle date](#billing-cycle).\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitPayment` method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   amounts: [32, 45], });`\n\n[](#default-payment-method)\n\nYou now have an active [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") belonging to a customer with a payment method, but this payment method isn’t automatically used for future payments. To automatically bill this payment method in the future, use a [webhook](https://docs.stripe.com/webhooks \"webhook\") consumer to listen to the `invoice.payment_succeeded` event for new subscriptions and set the default payment method.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`if event.type == 'invoice.payment_succeeded'   invoice = event.data.object   if invoice['billing_reason'] == 'subscription_create'     subscription_id = invoice['subscription']     payment_intent_id = invoice['payment_intent']      # Retrieve the payment intent used to pay the subscription     payment_intent = Stripe::PaymentIntent.retrieve(payment_intent_id)      # Set the default payment method     Stripe::Subscription.update(       subscription_id,       default_payment_method: payment_intent.payment_method     )   end end`\n\n[](#manage-sub-status)\n\nAssuming the initial payment succeeds, the state of the subscription is `active` and requires no further action. When payments fail, the status changes to the **Subscription status** configured in your [automatic collection settings](https://docs.stripe.com/invoicing/automatic-collection). Notify the customer upon failure and [charge them with a different payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n#### Note\n\nCanadian pre-authorized debit payments are never automatically retried, even if you have a [retry schedule](https://docs.stripe.com/invoicing/automatic-collection) configured for other payment methods.\n\n[](#test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
  "title": "Set up a subscription with pre-authorized debit in Canada | Stripe Documentation",
  "description": "Learn how to create and charge for a subscription with Canadian pre-authorized debits.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/sepa-debit",
  "markdown": "# Set up a subscription with SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they will be redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods), enable the payment methods you want to accept from your customers. Checkout supports [several payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support).\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, SEPA Direct Debit is a delayed notification payment method, which means that funds aren’t immediately available. A SEPA Direct Debit payment typically takes three business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou can confirm the payment is successful in several ways:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nYou can test your integration using the IBANs below. The payment method details are successfully collected for each IBAN but exhibit different behavior when charged.\n\n##### Test IBANs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Account Number | Description |\n| --- | --- |\n| `AT611904300234573201` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `AT321904300235473204` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `AT861904300235473202` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `AT051904300235473205` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `AT591904300235473203` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is immediately created. |",
  "title": "Set up a subscription with SEPA Direct Debit | Stripe Documentation",
  "description": "Use Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/ideal",
  "markdown": "# Set up a subscription with iDEAL and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\niDEAL is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through iDEAL to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 0.01 EUR through iDEAL to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\nFrom the command-line, use an install script or download and extract a versioned archive file for your operating system to install the CLI.\n\nTo install the Stripe CLI with [homebrew](https://brew.sh/), run:\n\n`brew install stripe/stripe-cli/stripe`\n\nTo run the Stripe CLI, you must also pair it with your Stripe account. Run `stripe login` and follow the prompts. For more information, see the [Stripe CLI documentation page](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on iDEAL recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring iDEAL payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\nWhen a customer successfully pays for a recurring service, they’re automatically subscribed. Their subscription is recorded as a new entry in the Dashboard’s [list of subscriptions](https://dashboard.stripe.com/subscriptions).\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select any bank from the list. After confirming, you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
  "title": "Set up a subscription with iDEAL and SEPA Direct Debit | Stripe Documentation",
  "description": "Use Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/bancontact",
  "markdown": "# Set up a subscription with Bancontact and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through Bancontact to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 0.02 EUR through Bancontact to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on Bancontact recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring Bancontact payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\nWhen a customer successfully pays for a recurring service, they’re automatically subscribed. Their subscription is recorded as a new entry in the Dashboard’s [list of subscriptions](https://dashboard.stripe.com/subscriptions).\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select Bancontact as the payment method and click the **Subscribe** button. After confirming, you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
  "title": "Set up a subscription with Bancontact and SEPA Direct Debit | Stripe Documentation",
  "description": "Use Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/sofort",
  "markdown": "# Set up a subscription with Sofort and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through Sofort to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 1 EUR through Sofort to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on Sofort recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring Sofort payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment is successful.\n\nSofort is a delayed notification payment method, which means that funds aren’t immediately available. A Sofort payment takes up to 14 business days to make the funds available. Because of this possibility, you might want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nStripe recommends fulfilling orders during the `processing` state. On average, approximately 0.2% of Sofort payments fail after entering the `processing` state.\n\nThere are several ways you can confirm the payment is successful:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). Click a payment to open the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select Sofort as the payment method and click the **Subscribe** button. After confirming, you’re redirected to a test page with options to authorize or fail the payment. Sofort payments remain pending for 3 minutes in test mode.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
  "title": "Set up a subscription with Sofort and SEPA Direct Debit | Stripe Documentation",
  "description": "Use Stripe Billing to set up recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/checkout/embedded/quickstart",
  "markdown": "Embedded form | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nQuickstart (Embedded form)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fembedded%2Fquickstart)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fembedded%2Fquickstart)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/payments)\n\nAccept a payment\n\nAbout Stripe payments\n\n[Upgrade your integration](/payments/upgrades \"Improve your existing integration\")\n\nStart an integration\n\nPayment Links\n\nCheckout\n\n[Overview](/payments/checkout)\n\n[How Checkout works](/payments/checkout/how-checkout-works)\n\n[Quickstart (Stripe-hosted page)](/checkout/quickstart \"Quickstart\")\n\nQuickstart (Embedded form)\n\n[Fulfillment](/checkout/fulfillment)\n\n[Migrate payment methods to the Dashboard](/payments/dashboard-payment-methods)\n\n[Migrate from legacy Checkout](/payments/checkout/migration)\n\n[Migrate Checkout to use Prices](/payments/checkout/migrating-prices)\n\nCustomize your integration\n\n[Customize Checkout](/payments/checkout/customization)\n\n[Font compatibility](/payments/checkout/customization/font-compatibility)\n\n[Use your custom domain](/payments/checkout/custom-domains)\n\n[Customize redirect behavior (Embedded form)](/payments/checkout/custom-redirect-behavior)\n\n[Customize redirect behavior (Stripe-hosted page)](/payments/checkout/custom-success-page)\n\n[Collect taxes](/payments/checkout/taxes)\n\n[Collect tax IDs](/tax/checkout/tax-ids)\n\n[Collect phone numbers](/payments/checkout/phone-numbers)\n\n[Make line item quantities adjustable](/payments/checkout/adjustable-quantity)\n\n[Add custom fields](/payments/checkout/custom-fields)\n\n[Let customers decide what to pay](/payments/checkout/pay-what-you-want)\n\n[Limit customers to one subscription](/payments/checkout/limit-subscriptions)\n\n[Let customers complete orders for free](/payments/checkout/no-cost-orders)\n\nBoost revenue\n\n[Let customers pay in their local currency](/payments/checkout/adaptive-pricing)\n\n[Configure subscription upsells](/payments/checkout/upsells)\n\n[Configure cross-sells](/payments/checkout/cross-sells)\n\n[Recover abandoned carts](/payments/checkout/abandoned-carts)\n\n[Collect consent for promotional emails](/payments/checkout/promotional-emails-consent)\n\n[Analyze conversion funnel](/payments/checkout/analyze-conversion-funnel)\n\nAdditional features\n\n[Add discounts](/payments/checkout/discounts)\n\n[Start a free trial without collecting payment details](/payments/checkout/free-trials)\n\n[Set billing cycle date](/payments/checkout/billing-cycle)\n\n[Manage limited inventory](/payments/checkout/managing-limited-inventory)\n\n[Guest customers](/payments/checkout/guest-customers)\n\n[Customize payment method reuse agreement](/payments/checkout/customize-payment-method-reuse-agreement)\n\nWeb Elements\n\nMobile Elements\n\nPayment scenarios\n\nDuring the payment\n\nAfter the payment\n\nAdd payment methods\n\nMore payment scenarios\n\nFaster checkout with Link\n\nOther Stripe products\n\nConnect\n\nTerminal\n\nFinancial Connections\n\nCrypto\n\nClimate\n\nCustom Checkout\n\nUnited States\n\nEnglish (United States)",
  "title": "Embedded form | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/dashboard-payment-methods",
  "markdown": "# Migrate payment methods to the Dashboard\n\n## Turn on different Checkout payment methods through the Dashboard.\n\nMigrate your Checkout payment methods to Dashboard settings by following this guide. By changing your integration to pull your payment method preferences from the Dashboard, Stripe displays all compatible payment methods to your customers when checking out depending on the chosen currency or any payment method restrictions like maximum transaction amounts. Stripe also presents the most relevant payment methods for each customer based on their location and currency used. The checkout page prioritizes showing payment methods known to increase conversion for your customer’s location while lower priority payment methods are hidden beneath an overflow menu.\n\nYour customers see multiple payment methods at check out that are popular for their location and currency. But, they still have the option to choose a different payment method from the overflow menu.\n\n[](#update)\n\n#### Note\n\nIf you have an existing integration with Stripe Checkout, you must change one line of code in your integration to begin migrating payment methods to the Dashboard.\n\n#### Warning\n\nUpgrading your integration initially turns off any non-default payment methods for your integration, like bank redirects. If you added payment methods to your Checkout integration, you must go to the payment methods settings page in the Dashboard to turn them back on.\n\nPreviously, you used the `payment_method_types` parameter when defining your Checkout session to accept different payment methods. To begin managing your payment methods in the Dashboard, remove this parameter from your integration.\n\nAfter you remove the `payment_method_types` parameter from your integration, some payment methods turn on automatically including cards and wallets. The `currency` parameter restricts the payment methods that are shown to the customer during the checkout session.\n\n`Stripe::Checkout::Session.create({ mode: 'payment', # Remove the payment_method_types parameter # to manage payment methods in the Dashboard payment_method_types: ['card'], line_items: [{   price_data: {   # The currency parameter determines which   # payment methods are used in the Checkout Session.     currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n[](#view-dash)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) to see the payment methods that you currently accept. This list includes the payment methods turned on by default, like cards. These payment methods cost the same or less than cards and settle immediately.\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#add-remove)\n\nOn the payment methods settings Dashboard page, you can view the available payment methods and turn on new payment methods for your integration.\n\nYou can enable some payment methods just by selecting **Turn on**. However, some payment methods require additional steps to turn them on. For those cases, you’ll see a button that says **Set up** or **Review terms**.\n\nTo learn more about which payment methods are right for your business, see our [payment methods guide](https://stripe.com/payments/payment-methods-guide).\n\n[](#delayed-notifications)\n\nDepending on the type of payment method you integrate, there can be a 2-14 day delay in payment confirmation. If you set up [webhooks](https://docs.stripe.com/webhooks \"webhook\") to [automatically fulfill](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler) orders with your Checkout integration, when you add your first delayed notification payment methods, you might need to update your code.\n\n#### Caution\n\nWhen receiving payments with a delayed notification payment method, funds aren’t immediately available. It can take multiple days for funds to process so you should delay order fulfillment until the funds are available in your account. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou’ll need to handle the following Checkout events:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object.\n\nUpdate your event handler to fulfill the order:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``# You can find your endpoint's secret in the output of the `stripe listen` # command you ran earlier endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    case event['type']   if event['type'] == 'checkout.session.completed'     checkout_session = event['data']['object']      fulfill_order(checkout_session)   end   when 'checkout.session.completed'     checkout_session = event['data']['object']      # Save an order in your database, marked as 'awaiting payment'     create_order(checkout_session)      # Check if the order is already paid (for example, from a card payment)     #     # A delayed notification payment will have an `unpaid` status, as     # you're still waiting for funds to be transferred from the customer's     # account.     if checkout_session.payment_status == 'paid'       fulfill_order(checkout_session)     end   when 'checkout.session.async_payment_succeeded'     checkout_session = event['data']['object']      # Fulfill the purchase...     fulfill_order(checkout_session)   when 'checkout.session.async_payment_failed'     session = event['data']['object']      # Send an email to the customer asking them to retry their order     email_customer_about_failed_payment(checkout_session)   end    status 200 end  def fulfill_order(checkout_session)   # TODO: fill in with your own logic   puts \"Fulfilling order for #{checkout_session.inspect}\" end  def create_order(checkout_session)   # TODO: fill in with your own logic   puts \"Creating order for #{checkout_session.inspect}\" end  def email_customer_about_failed_payment(checkout_session)   # TODO: fill in with your own logic   puts \"Emailing customer about payment failure for: #{checkout_session.inspect}\" end``\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnsure that `stripe listen` is still running. Go through Checkout as a test user, like you did in the prior steps. Your event handler should receive a `checkout.session.completed` event, and you should have successfully handled it.\n\nNow that you’ve completed these steps, you’re ready to go live in production whenever you decide to do so.\n\n[](#testing)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
  "title": "Migrate payment methods to the Dashboard | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/migrating-prices",
  "markdown": "# Checkout prices migration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update your integration to use prices with Stripe Checkout.\n\nThe [Prices API](https://docs.stripe.com/api/prices) adds new features and flexibility to how you charge customers. This new integration offers:\n\n*   More unified modeling for Checkout items—instead of plans, [SKUs](https://docs.stripe.com/api/skus \"SKU\"), and inline line items, every item is now a _price_.\n*   The ability to render product images for recurring items.\n\nFor the client and server integration, the Prices API unlocks the ability to:\n\n*   Create a reusable product and price catalog instead of one-time line items\n*   Create inline pricing for [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n*   Apply dynamic tax rates to [subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#adding-tax-rates-to-checkout) and [one-time payments](https://docs.stripe.com/payments/checkout/taxes)\n\nDon’t want to migrate? You can continue to [use your current integration](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations), but new features are not supported. Any new plans or recurring prices you create can be used in the `plan` parameter of your existing API calls.\n\n## Products and prices overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Prices](https://docs.stripe.com/api/prices \"Prices\") are a new, core entity within Stripe that works with subscriptions, [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and Checkout. Each price is tied to a single [Product](https://docs.stripe.com/api/products \"Products\"), and each product can have multiple prices. Different physical goods or levels of service should be represented by products. Pricing of that product should be represented by prices.\n\nPrices define the base price, currency, and—for recurring products—the billing cycle. This allows you to change and add prices without needing to change the details of what you offer. For example, you might have a single “gold” product that has prices for 10 USD/month, 100 USD/year, 9 EUR/month, and 90 EUR/year. Or you might have a blue t-shirt with 20 USD and 15 EUR prices.\n\nPlans and SKUs (client-only) may be used with the new integration wherever Prices are accepted. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through the [Dashboard](https://dashboard.stripe.com/products).\n\n## One-time payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe client and server integration has the following changes for one-time payments:\n\n*   Instead of ad-hoc line items (that is, setting the name, amount, and currency), creating a Checkout Session requires creating a [product](https://docs.stripe.com/api/products \"Products\") and, usually, a [price](https://docs.stripe.com/api/prices \"Prices\").\n*   [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) is now required.\n\nThe client-side code remains the same.\n\n### Mapping table ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstead of defining each field on `line_items`, Checkout uses the underlying product and price objects to determine name, description, amount, currency, and images. You can [create products and prices](https://docs.stripe.com/payments/accept-a-payment) with the API or Dashboard.\n\n| Without prices | With prices |\n| --- | --- |\n| `line_items.name` | `product.name` |\n| `line_items.description` | `product.description` |\n| `line_items.amount` | *   `price.unit_amount`<br>*   `price_data.unit_amount` (if defined when the Checkout Session is created) |\n| `line_items.currency` | *   `price.currency`<br>*   `price_data.currency` (if defined when the Checkout Session is created) |\n| `line_items.images` | `product.images` (displays the first image supplied) |\n\n### Server-side code for inline items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, you could only create one-time items inline. With prices, you can continue to configure your items inline, but you can also define your prices dynamically with [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) when you create the Checkout Session.\n\nWhen you create the Checkout Session with `price_data`, reference an existing product ID with [price\\_data.product](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-product), or define your product details dynamically using [price\\_data.product\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-product_data). The following example demonstrates the flow for creating a one-time item.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"line_items[0][price_data][unit_amount]\"=2000 \\   -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\   -d \"line_items[0][price_data][product_data][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][price_data][product_data][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][price_data][currency]\"=usd \\   -d mode=payment \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Server-side code for one-time prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith this new integration, you can [create a product and price catalog](https://docs.stripe.com/payments/accept-a-payment) upfront instead of needing to define the amount, currency, and name each time you create a Checkout Session.\n\nYou can either create a product and price with the [Prices API](https://docs.stripe.com/api/prices) or through the [Dashboard](https://dashboard.stripe.com/products). You will need the price ID to create the Checkout Session. The following example demonstrates how to create a product and price through API:\n\n`curl https://api.stripe.com/v1/products \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d name=T-shirt \\   -d description=\"Comfortable cotton t-shirt\" \\   -d \"images[]\"=\"https://example.com/t-shirt.png\" curl https://api.stripe.com/v1/prices \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d product=\"{{PRODUCT_ID}}\" \\   -d unit_amount=2000 \\   -d currency=usd curl https://api.stripe.com/v1/checkout/sessions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\   -d mode=payment \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe client and server integration has the following changes for recurring payments:\n\n*   All items are passed into a single [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) field, instead of `subscription_data.items`.\n*   [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) is now required. Set `mode=subscription` if the session includes any recurring items.\n\nThe client-side code remains the same. Existing plans can be used wherever recurring prices are accepted.\n\n### Server-side code with plans ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere is a before and after example of creating a Checkout Session with a trial and using an existing plan, which can be used interchangeably with a price. The plan is now passed into `line_items` instead of `subscription_data.items`.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"subscription_data[items][][plan]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][price]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d mode=subscription \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Server-side code for recurring price with setup fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have recurring plans with a one-time setup fee, create the product and price representing the one-time fee before creating the Checkout Session. See the [mapping table](#mapping-table-server-one-time) for how the old `line_items` fields map to the new integration. You can either create a product and price through the [Prices API](https://docs.stripe.com/api/prices) or through the [Stripe Dashboard](https://dashboard.stripe.com/products). You can also [create the one-time item inline](https://docs.stripe.com/payments/checkout/migrating-prices#server-side-code-for-inline-items). The following example uses an existing price ID:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"https://example.com/t-shirt.png\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"subscription_data[items][][plan]\"=\"{{PLAN_ID}}\" \\   -d \"line_items[0][price]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[1][price]\"=\"{{ONE_TIME_PRICE_ID}}\" \\   -d \"line_items[1][quantity]\"=1 \\   -d mode=subscription \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Response object changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstead of listing items with `display_items`, the Checkout Session object uses `line_items`. The `line_items` field does not render by default as `display_items` did, but you can include it using [expand](https://docs.stripe.com/api/expanding_objects) when creating a Checkout Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"card\" \\   -d \"mode\"=\"payment\" \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -d \"expand[]\"=\"line_items\"`\n\n## Webhook changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSince `line_items` is includable, the `checkout.session.completed` [webhook](https://docs.stripe.com/webhooks \"webhook\") response no longer list items by default. The smaller response object enables you to receive your Checkout webhooks faster. You can retrieve items with the new `line_items` endpoint:\n\n`curl https://api.stripe.com/v1/checkout/sessions/{{CHECKOUT_SESSION_ID}}/line_items \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nFor more details, see [fulfilling orders with Checkout](https://docs.stripe.com/checkout/fulfillment).",
  "title": "Checkout prices migration guide | Stripe Documentation",
  "description": "Learn how to update your integration to use prices with Stripe Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/custom-redirect-behavior",
  "markdown": "# Customize redirect behavior with an embedded form\n\n## For embedded forms, redirect your customers to a return page or prompt them to retry.\n\nIf you have a Checkout integration that uses an embedded form, you can customize how and whether Stripe redirects your customers after they complete payment. You can have Stripe always redirect customers, only redirect for some payment methods, or completely disable redirects.\n\n#### Common mistake\n\nIf you’ve integrated with a Stripe-hosted payment page, you can’t use the `return_url` parameter. You must use `success_url`. Learn more about [customizing a success page](https://docs.stripe.com/payments/checkout/custom-success-page) for integrations with a Stripe-hosted page.\n\nTo set up redirects, specify the return page in the `return_url` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url).\n\nYou can also optionally:\n\n*   [Only redirect customers if the payment method requires it](#redirect-if-required) (for example, a bank authorization page for a debit-based method).\n*   Not use a return page and [disable redirect-based payment methods](#disable-redirects).\n\n## Redirect customers to a return page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create the [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you specify the URL of the return page in the `return_url` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url). Include the `{CHECKOUT_SESSION_ID}` template variable in the URL. When Checkout redirects a customer, it replaces the variable with the actual Checkout Session ID.\n\nWhen rendering your return page, retrieve the Checkout Session status using the Checkout Session ID in the URL. Handle the result according to the session status as follows:\n\n*   `complete`: The payment succeeded. Use the information from the Checkout Session to render a success page.\n*   `open`: The payment failed or was canceled. Remount Checkout so that your customer can try again.\n\n`app.get('/session_status', async (req, res) => {   const session = await stripe.checkout.sessions.retrieve(req.query.session_id);   const customer = await stripe.customers.retrieve(session.customer);    res.send({     status: session.status,     payment_status: session.payment_status,     customer_email: customer.email   }); });`\n\n``const session = await fetch(`/session_status?session_id=${session_id}`) if (session.status == 'open') {   // Remount embedded Checkout else if (session.status == 'complete') {   // Show success page   // Optionally use session.payment_status or session.customer_email   // to customize the success page }``\n\n## Redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring payment, some payment methods redirect the customer to an intermediate page, such as a bank authorization page. When they complete that page, Stripe redirects them to your return page.\n\n### Only redirect for redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t want to redirect customers after payments that don’t require a redirect, set [redirect\\_on\\_completion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-redirect_on_completion) to `if_required`. That redirects only customers who check out with redirect-based payment methods.\n\nFor card payments, Checkout renders a default success state instead of redirecting. To use your own success state, pass an [onComplete](https://docs.stripe.com/js/embedded_checkout/init#embedded_checkout_init-options-onComplete) callback that destroys the Checkout instance and renders your custom success state.\n\n`onComplete` is called when the Checkout Session completes successfully, or when the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event is sent.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  initialize();  async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Example `onComplete` callback   const handleComplete = async function() {     // Destroy Checkout instance     checkout.destroy()      // Retrieve details from server (which loads Checkout Session)     const details = await retrievePurchaseDetails();      // Show custom purchase summary     showPurchaseSummary(details);   }    const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,     onComplete: handleComplete   });    checkout.mount('#checkout'); }``\n\n### Disable redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t want to create a return page, create your Checkout Session with [redirect\\_on\\_completion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-redirect_on_completion) set to `never`.\n\nThis disables redirect-based payment methods:\n\n*   If you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), you can still manage payment methods from the Dashboard, but payment methods that require redirects aren’t eligible.\n*   If you manually specify payment methods with [payment\\_method\\_types](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_method_types), you can’t include any redirect-based payment methods.\n\nSetting `redirect_on_completion: never` removes the `return_url` requirement. For these sessions, Checkout renders a default success state instead of redirecting. You can use your own success state by passing an [onComplete](https://docs.stripe.com/js/embedded_checkout/init#embedded_checkout_init-options-onComplete) callback which destroys the Checkout instance and renders your custom success state.\n\n`onComplete` is called when the Checkout Session completes successfully, or when the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event is sent.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  initialize();  async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Example `onComplete` callback   const handleComplete = async function() {     // Destroy Checkout instance     checkout.destroy()      // Retrieve details from server (which loads Checkout Session)     const details = await retrievePurchaseDetails();      // Show custom purchase summary     showPurchaseSummary(details);   }    const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,     onComplete: handleComplete   });    checkout.mount('#checkout'); }``",
  "title": "Customize redirect behavior with an embedded form | Stripe Documentation",
  "description": "For embedded forms, redirect your customers to a return page or prompt them to retry.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/custom-fields",
  "markdown": "# Add custom fields | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to add additional fields to a prebuilt payment page with Checkout.\n\n#### Caution\n\nDon’t use custom fields to collect personal, protected, or sensitive data, or information restricted by law.\n\nYou can add custom fields on the payment form to collect additional information from your customers. The information is available after the payment is complete and is useful for fulfilling the purchase.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Up to three fields allowed.\n*   Not available in `setup` mode.\n*   Support for up to 255 characters on text fields.\n*   Support for up to 255 digits on numeric fields.\n*   Support for up to 200 options on dropdown fields.\n\n[](#create-session)\n\nCreate a Checkout Session while specifying an array of [custom fields](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-custom_fields). Each field must have a unique `key` that your integration uses to reconcile the field. Also provide a label for the field that you display to your customer. Labels for custom fields aren’t translated, but you can use the [locale](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-locale) parameter to set the language of your Checkout Session to match the same language as your labels.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"custom_fields[0][key]\"=engraving \\  -d \"custom_fields[0][label][type]\"=custom \\  -d \"custom_fields[0][label][custom]\"=\"Personalized engraving\" \\  -d \"custom_fields[0][type]\"=text`\n\n![A checkout page with custom fields](https://b.stripecdn.com/docs-statics-srv/assets/required.b8a7aedd127b6e37c710488ad4478ddc.png)\n\n[](#retrieve-fields)\n\nWhen your customer completes the Checkout Session, we send a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") with the completed fields.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2022-11-15\",   \"created\": 1664928000,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"custom_fields\": [{         \"key\": \"engraving\",         \"label\": {           \"type\": \"custom\",           \"custom\": \"Personalized engraving\"         },         \"optional\": false,         \"type\": \"text\",         \"text\": {           \"value\": \"Jane\",         }       }],       \"mode\": \"payment\",     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`",
  "title": "Add custom fields | Stripe Documentation",
  "description": "Learn how to add additional fields to a prebuilt payment page with Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/phone-numbers",
  "markdown": "# Collect customer phone numbers with Checkout\n\nTo enable phone number collection, set [`phone_number_collection[enabled]`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-phone_number_collection-enabled) to `true` when creating a Checkout session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"phone_number_collection[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe above code example creates a Session in `payment` mode with phone number collection enabled. To enable phone number collection in `subscription` mode, make the same changes highlighted in green to your `subscription` mode Session creation request.\n\nWith phone number collection enabled, Checkout adds a _required_ phone number field to the payment form. If you’re collecting a shipping address, the phone number field displays under the address fields. Otherwise, Checkout displays the phone number field below the email input. Customers can only enter one phone number per session.",
  "title": "Collect customer phone numbers with Checkout | Stripe Documentation",
  "description": "Learn how to collect phone numbers with Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/adjustable-quantity",
  "markdown": "# Make line item quantities adjustable\n\n## Configure the Checkout Session so customers can adjust line item quantity during checkout.\n\n## Create a Checkout Session with `adjustable_quantity` enabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet `adjustable_quantity` on your `line_items` when creating a Checkout Session to enable your customers to update the quantity of an item during checkout.\n\nYou can customize the default settings for the minimum and maximum quantities allowed by setting `adjustable_quantity.minimum` and `adjustable_quantity.maximum`. By default, an item’s minimum adjustable quantity is `0` and the maximum adjustable quantity is `99`. You can specify a value of up to `999999` for `adjustable_quantity.maximum`.\n\nWhen using adjustable quantities with a `line_items[].quantity` value greater than `99` (the default adjustable maximum), set `adjustable_quantity.maximum` to be greater than or equal to that item’s quantity.\n\nIf you use adjustable quantities, change your configuration so that it uses `adjustable_quantity.maximum` when creating the Checkout Session to reserve inventory quantity instead of the `line_items` quantity.\n\nCheckout prevents the customer from removing an item if it is the only item remaining.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][tax_behavior]\"=exclusive \\  -d \"line_items[0][adjustable_quantity][enabled]\"=true \\  -d \"line_items[0][adjustable_quantity][minimum]\"=1 \\  -d \"line_items[0][adjustable_quantity][maximum]\"=10 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Handling completed transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the payment completes, you can make a request for the finalized [line items](https://docs.stripe.com/api/checkout/sessions/line_items) and their quantities. If your customer removes a line item, it is also removed from the line items response. See the [Fulfillment guide](https://docs.stripe.com/checkout/fulfillment) to learn how to create an event handler to handle completed Checkout Sessions.\n\n#### Note\n\n`# Set your secret key. Remember to switch to your live secret key in production! # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``require 'sinatra'  # You can find your endpoint's secret in your webhook settings endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    if event['type'] == 'checkout.session.completed'     checkout_session = event['data']['object']      line_items = Stripe::Checkout::Session.list_line_items(checkout_session['id'], {limit: 100})      # Fulfill the purchase...     begin       fulfill_order(checkout_session, line_items)     rescue NotImplementedError => e       return status 400     end   end    status 200 end  def fulfill_order(checkout_session, line_items)   # TODO: Remove error and implement...   raise NotImplementedError.new(<<~MSG)     Given the Checkout Session \"#{checkout_session.id}\" load your internal order from the database here.     Then you can reconcile your order's quantities with the final line item quantity purchased. You can use `checkout_session.metadata` and `price.metadata` to store and later reference your internal order and item ids.   MSG end``",
  "title": "Make line item quantities adjustable | Stripe Documentation",
  "description": "Configure the Checkout Session so customers can adjust line item quantity during checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/analyze-conversion-funnel",
  "markdown": "# Analyze your conversion funnel | Stripe DocumentationThe Stripe Docs logo\n\n`// This example sets up endpoints using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc.](https://youtu.be/rPR2aJ6XnAc)  const express = require(\"express\"); require(\"dotenv\").config();  const app = express();  // Set your secret key. Remember to switch to your live key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  const request = require(\"request\");  app.post(   \"/create-checkout-session\",   express.urlencoded({ extended: false }),   async (req, res) => {     const session = await stripe.checkout.sessions.create({       payment_method_types: [\"card\"],       line_items: [         {           price_data: {             currency: \"usd\",             product_data: {               name: \"T-shirt\",             },             unit_amount: 2000,           },           quantity: 1,         },       ],       mode: \"payment\",       success_url: req.get(\"origin\") + \"/success\",       cancel_url: req.get(\"origin\") + \"/cancel\",     });      res.json({ url: session.url });   } );  app.get(\"/product\", function (req, res) {   res.sendFile(__dirname + \"/product.html\"); });  app.get(\"/success\", function (req, res) {   res.sendFile(__dirname + \"/success.html\"); });  app.get(\"/cancel\", function (req, res) {   res.sendFile(__dirname + \"/cancel.html\"); });  app.listen(4242, () => console.log(`Listening on port ${4242}!`));``",
  "title": "Analyze your conversion funnel | Stripe Documentation",
  "description": "Analyze your Stripe Checkout conversion funnel with Google Analytics 4.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/no-cost-orders",
  "markdown": "# No-cost orders | Stripe DocumentationThe Stripe Docs logo\n\n## Accept orders for no-cost line items, and apply 100% off discounts in payment mode.\n\nWith Checkout, you can process no-cost orders for one-time payments. Use free line items or discounts for 100% off. If the total amount is 0, Checkout doesn’t collect a payment method from the customer.\n\n#### Note\n\nTo process no-cost orders using the Checkout API, make sure you’re on API version [2023-08-16](https://docs.stripe.com/upgrades#2023-08-16) or later.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the `customer` property isn’t set, the Checkout Session automatically creates a new Customer object. This means [guest customers](https://docs.stripe.com/payments/checkout/guest-customers) aren’t supported.\n\n## Create a Checkout Session with no-cost line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a [Price](https://docs.stripe.com/api/prices) with a [unit\\_amount](https://docs.stripe.com/api/prices/object#price_object-unit_amount) of 0, and pass it into the [line items](https://docs.stripe.com/api/checkout/sessions/line_items) array of the Checkout Session. See [Products and prices](https://docs.stripe.com/invoicing/products-prices) for more information on creating prices.\n\nYou can also use the [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) parameter of the `line_items` array to pass in a free price.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=0 \\  -d \"line_items[0][price_data][product_data][name]\"=\"Free t-shirt\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Create a discount to allow customers to complete orders for free ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Coupons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a [Coupon](https://docs.stripe.com/api/coupons) that makes your Checkout Session free. For example, you can create a 100% off coupon.\n\n`curl https://api.stripe.com/v1/coupons \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d percent_off=100 \\  -d duration=once`\n\nTo create a session with an applied discount, pass the [coupon ID](https://docs.stripe.com/api/coupons/object#coupon_object-id) in the `coupon` parameter of the [discounts](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts) array.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d \"discounts[0][coupon]\"={{COUPON_ID}} \\   -d mode=payment \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nYou can also create a free Checkout Session by applying a coupon for an amount equal to or exceeding the Checkout Session total.\n\n### Promotion codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPromotion codes are customer-facing codes created on top of coupons. You can share these codes with customers who can enter them into Checkout to apply a discount. Create a promotion code from a 100% off coupon to allow customers to create orders for free.\n\n`curl https://api.stripe.com/v1/promotion_codes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d coupon={{COUPON_ID}} \\   -d code=FREECODE`\n\nEnable user-redeemable promotion codes using the [allow\\_promotion\\_codes](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-allow_promotion_codes) parameter in a Checkout Session. This enables a field in Checkout to allow users to enter promotion codes.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d allow_promotion_codes=true \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nCustomers can also check out for free if they apply a promotion code for an amount equal to or exceeding the Checkout Session total.\n\nFor more ways to apply discounts, see [Add discounts](https://docs.stripe.com/payments/checkout/discounts).\n\n## Payment links and pricing tables Optional![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment links and pricing tables support no-cost orders by default when your account is created after August 17, 2023. For accounts created before August 17, 2023, you can enable no-cost orders for your Payment links and pricing tables by visiting your [Checkout settings](https://dashboard.stripe.com/settings/checkout) in the Dashboard.\n\n#### Caution\n\nWhen you enable this feature, it has a 3-day grace period in which you can turn it off. After 3 days, you can’t disable it. Before you enable it for your live payment links and pricing tables, test it with your fulfillment flow in test mode.\n\nTo use no-cost orders with a payment link in test mode, specify a `prefilled_email` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) with an email whose local part includes the suffix `+no_cost_orders`. For example, \\`j.appleseed+no\\_cost\\_orders@example.com’. The resulting checkout session lets you apply a discount that reduces the order total to zero.\n\nTo use no-cost orders with a pricing table in test mode, set the pricing table’s `customer-email` [property](https://docs.stripe.com/payments/checkout/pricing-table#customer-email) to an email whose local part includes the suffix `+no_cost_orders`. For example, \\`j.appleseed+no\\_cost\\_orders@example.com’. The resulting checkout session lets you apply a discount that reduces the order total to zero.\n\n## Handling completed orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the Checkout Session completes, you can make a request for the finalized [line items](https://docs.stripe.com/api/checkout/sessions/line_items) and their quantities. If your customer removes a line item, it also removes it from the line items response. See the [Fulfillment guide](https://docs.stripe.com/checkout/fulfillment) to learn how to create an event handler to handle completed Checkout Sessions.\n\n#### Common mistake\n\nTo fulfill no-cost orders, make sure to handle the `checkout.session.completed` event rather than [PaymentIntent](https://docs.stripe.com/payments/payment-intents) events. Completed Checkout Sessions that are free won’t have an associated [PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nYou can see your completed no-cost orders in the [Dashboard](https://dashboard.stripe.com/no-cost-orders). The no-cost orders tab only appears if you have at least one completed no-cost order.",
  "title": "No-cost orders | Stripe Documentation",
  "description": "Accept orders for no-cost line items, and apply 100% off discounts in payment mode.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/billing-cycle",
  "markdown": "# Set the billing cycle date in Checkout\n\n## Use Stripe Checkout to set a billing cycle date for subscriptions.\n\nYou can explicitly set a subscription’s [billing cycle anchor](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-subscription_data-billing_cycle_anchor) to a fixed date (for example, the 1st of the next month) in Checkout.\n\nThe billing cycle anchor determines the first full invoice date, when customers are billed the full subscription amount. The billing cycle anchor and the recurring interval of its [price](https://docs.stripe.com/products-prices/overview) also determine a subscription’s future billing dates. For example, a monthly subscription created in Checkout on May 15 with an anchor at June 1 is billed on May 15, then always on the 1st of the month.\n\nFor the initial billing period up until the first full invoice date, you can customize how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) with the [proration\\_behavior](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-subscription_data-proration_behavior) parameter. By default, `proration_behavior` is set to **create\\_prorations**, and customers receive a prorated [invoice](https://docs.stripe.com/api/invoices \"invoices\"). If `proration_behavior` is **none**, customers receive the initial period up to the first full invoice date for free.\n\n## Create a Checkout Session with a billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo configure a billing cycle anchor, set the `subscription_data.billing_cycle_anchor` parameter when you create a Checkout Session in `subscription` mode.\n\nThe anchor must be a future UNIX timestamp before the next natural subscription billing date.\n\nIf the billing cycle anchor is during a session’s active period and a customer attempts payment after it has passed, Checkout displays and charges for the full period starting with the billing cycle anchor instead of the prorated period before the billing cycle anchor.\n\n## Disable prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo disable prorations, set the `subscription_data.proration_behavior` parameter to **none** when creating a Checkout Session.\n\nSimilar to a free trial, the initial period up to the billing cycle anchor is free. Unlike a trial, no 0 USD invoice is generated. Customers receive an invoice with the full subscription amount on the billing cycle anchor date.\n\nIn the Checkout Session response object, amounts attached to the [line items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) and [total details](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-total_details) are always 0 when prorations are disabled. Additionally, the [payment status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status) of the Session is set to `no_payment_required` to reflect that payment is delayed to a future date.\n\n## Current limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   You can’t use trials in Checkout with a billing cycle anchor.\n*   One-time prices can’t be used in Checkout Sessions when `proration_behavior` is **none**.\n*   You can’t apply [`amount_off` coupons](https://docs.stripe.com/api/coupons/create#create_coupon-amount_off) to Checkout Sessions with a default `proration_behavior` of **create\\_prorations**.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Setting the subscription billing cycle date](https://docs.stripe.com/billing/subscriptions/billing-cycle)\n*   [Prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n*   [Create Checkout Session](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session)",
  "title": "Set the billing cycle date in Checkout | Stripe Documentation",
  "description": "Use Stripe Checkout to set a billing cycle date for subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/managing-limited-inventory",
  "markdown": "# Manage limited inventory with Checkout\n\n## Prevent customers from holding inventory in carts by expiring Checkout sessions.\n\nFor some types of limited-inventory businesses, it’s necessary to prevent customers from reserving items for a long time without completing the purchase. For example, an event ticket seller wants to allow customers only a few minutes to buy their selected tickets before cancelling the sale and making those tickets available again. You can cancel a pending sale by expiring the [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\").\n\nWhen a Checkout Session expires, its [status property](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-status) changes to `expired`.\n\nCheckout supports both manual and timed session expiration.\n\n## Manual expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo immediately expire an open Checkout Session and cancel any pending purchase, use the [expire](https://docs.stripe.com/api/checkout/sessions/expire) endpoint.\n\n`curl -X POST https://api.stripe.com/v1/checkout/sessions/{{CHECKOUT_SESSION_ID}}/expire \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n## Set an expiration time ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a Checkout Session, specify an expiration timestamp by setting the [`expires_at`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at) parameter. The value must be between 30 minutes and 24 hours after the current time. If you don’t specify `expires_at`, the default value is 24 hours after the current time.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\   -d \"line_items[0][quantity]\"=2 \\   -d customer=  {{CUSTOMER_ID}}   \\   -d mode=payment \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -d \"expires_at\"=\"{{NOW_PLUS_TWO_HOURS}}\"`\n\n## Return items to your inventory ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a [Checkout Session](https://docs.stripe.com/api/checkout/sessions) expires, it triggers the `checkout.session.expired` event. Configure your webhook endpoint to listen for this event so your webhook handler can return to inventory any items reserved in the expired session. For more information, see [Expire a Session](https://docs.stripe.com/api/checkout/sessions/expire).",
  "title": "Manage limited inventory with Checkout | Stripe Documentation",
  "description": "Prevent customers from holding inventory in carts by expiring Checkout sessions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/taxes/account-tax-ids",
  "markdown": "# Account tax IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Store and render your tax IDs with Stripe Invoicing.\n\nDisplaying your tax IDs on [invoice](https://docs.stripe.com/api/invoices \"invoices\") documents is a common regulatory requirement. With Stripe, you can add up to 25 tax IDs to your account. Both the account and [customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids) display in the header of invoice and credit note PDFs.\n\nIn the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice), you can:\n\n*   Select default tax IDs to appear on every invoice and credit note PDF.\n*   Define a list of tax IDs to appear on a specific invoice.\n\n#### Warning\n\nYou can’t add, change, or remove account tax IDs after an invoice is finalized.\n\n## Managing account tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add and delete tax IDs using the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page in the Dashboard. After you add a tax ID in the Dashboard, you can set it as the default tax ID for every invoice and credit note PDF. Tax IDs are immutable—you can’t change the country and ID after you save the tax ID to your account.\n\nAdditionally, you can add and delete tax IDs with the [create](https://docs.stripe.com/api/tax_ids/create) and [delete](https://docs.stripe.com/api/tax_ids/delete) endpoints.\n\n### Adding and removing IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVisit the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page. Click the **Tax** tab and add a new tax ID or remove an existing tax ID:\n\n![Manage tax IDs in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-add.f10a7efcaf2ce75e42bc986ff3954c0b.png)\n\nManage account tax IDs in the Dashboard\n\n### Setting default tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page, click the **Tax** tab and locate the tax ID you want to set as the default. Click the overflow menu (), select **Set as default**, and click **Save**.\n\n![Set default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default.c36bf6e90db0825b107b5b6d375396cf.png)\n\nSet default account tax ID in the Dashboard\n\n​​After you set a tax ID as the default, you can see a label in the tax information box:\n\n![A default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default-set.a1c4d9a7605eabbe0491fb64cf031397.png)\n\nA default account tax ID in the Dashboard\n\n## Displaying tax IDs on invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically pulls your [default tax IDs](#default-tax-ids) during invoice finalization.\n\nTo override the default and display multiple tax IDs on invoices, you can set tax IDs in the Dashboard or by using the API. To learn more about taxes and invoices, see [Taxes](https://docs.stripe.com/invoicing/taxes).\n\nYou can set a list of tax IDs in the Dashboard using the Invoice Editor. ​​You can’t modify account tax IDs after an Invoice has been finalized.\n\nIn the Invoice Editor, scroll down to the **Advanced Options** section. Click the checkboxes to toggle which tax IDs ​​to display on that invoice. To remove tax IDs from the invoice, uncheck the boxes.\n\n![Tax ID invoice settings in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/invoice-editor.1e64187379099e87ac0eb00a4a1c0e15.png)\n\nAdvanced Options section in the Invoice Editor\n\n## Supported tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe Invoicing supports the following tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |",
  "title": "Account tax IDs | Stripe Documentation",
  "description": "Store and render your tax IDs with Stripe Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/customize-payment-method-reuse-agreement",
  "markdown": "# Customize payment method reuse agreement\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=subscription \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[payment_method_reuse_agreement][position]\"=hidden \\   --data-urlencode \"custom_text[after_submit][message]\"=\"You can cancel your subscription at any time by [logging into your account]([https://www.example.com/)](https://www.example.com/))\"`\n\nTo hide the payment method reuse agreement text, set `consent_collections.payment_method_reuse_agreement.position='hidden'`. Checkout won’t display its default language governing the reuse of the payment method. To set your own text in place of Stripe’s default language, set `custom_text.after_submit.message`. You can also use `custom_text.submit` or `custom_text.terms_of_service_acceptance` to display your own version of this language.\n\n#### Warning\n\nBy customizing this text, you’re responsible for maintaining compliance, which includes updating this text as card network rules and local regulations change. Don’t use this feature without consulting with your legal team or setting custom text that includes information regarding the reuse of the payment method. Make sure that your customized text covers all modes you plan to support.",
  "title": "Customize payment method reuse agreement | Stripe Documentation",
  "description": "Learn how to customize the appearance of payment method reuse agreement.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_reports/object",
  "markdown": "# The VerificationReport object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Result of the document check for this report.\n    \n*   Result of the email check for this report.\n    \n*   Result of the id number check for this report.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Configuration options for this report.\n    \n*   Result of the phone check for this report.\n    \n*   Result of the selfie check for this report.\n    \n*   Type of report.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    | `verification_flow`<br><br>Configuration provided by Verification Flow |\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verification\\_sessionnullable string\n    \n    ID of the VerificationSession that created this report.\n    \n\nThe VerificationReport object\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [Retrieve a VerificationReport](https://docs.stripe.com/api/identity/verification_reports/retrieve)\n\nRetrieves an existing VerificationReport\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationReport object\n\nGET /v1/identity/verification\\_reports/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_reports/vr_1MwBlH2eZvKYlo2C91hOpFMf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [List VerificationReports](https://docs.stripe.com/api/identity/verification_reports/list)\n\nList all verification reports.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationReports that were created during the given date interval.\n    \n*   Only return VerificationReports of this type\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    \n*   #### \n    \n    verification\\_sessionstring\n    \n    Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationInent objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_reports\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_reports \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_reports\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",      \"object\": \"identity.verification_report\",      \"created\": 1681337011,      \"livemode\": false,      \"options\": {        \"document\": {}      },      \"type\": \"document\",      \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",      \"document\": {        \"status\": \"verified\",        \"error\": null,        \"first_name\": \"Jenny\",        \"last_name\": \"Rosen\",        \"address\": {          \"line1\": \"1234 Main St.\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"zip\": \"94111\",          \"country\": \"US\"        },        \"type\": \"driving_license\",        \"files\": [          \"file_NhaxRCXT8Iuu8apSuci00UC4\",          \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"        ],        \"expiration_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2025        },        \"issued_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2020        },        \"issuing_country\": \"US\"      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The VerificationReport object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/configuration",
  "markdown": "# The Customer portal configuration object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n    ID of the Connect Application that created the configuration.\n    \n*   The business information shown to customers in the portal.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    default\\_return\\_urlnullable string\n    \n    The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\nThe Customer portal configuration object\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Create a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/create)\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```",
  "title": "The Customer portal configuration object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/session?lang=curl",
  "markdown": "# The Customer Portal Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Customer Portal Session object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/scheduled-reports",
  "markdown": "# Scheduled reports | Stripe DocumentationThe Stripe Docs logo\n\n## Set up report subscriptions to get notified when new data is ready.\n\nIf you frequently download the same report, you can schedule report downloads to occur on a daily, weekly, or monthly basis. To manage the schedules of reports on a financial reports page, click **Schedule…** and select the schedule (frequency), columns, and currency for each report. When a scheduled report is ready to be downloaded, you receive an email notification.\n\nTo stop running a scheduled report, set its schedule to `None`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scheduled_reports.9f06b8883e7b500b0210d9065de87264.png)",
  "title": "Scheduled reports | Stripe Documentation",
  "description": "Set up report subscriptions to get notified when new data is ready.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/payment_intents/confirm_card_payment",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/invoicing/taxes/manual-tax-amounts",
  "markdown": "# Use tax amounts calculated outside of Stripe with Stripe Billing\n\n## Use taxes calculated from an external system with Stripe Invoices.\n\nTo accommodate a wide range of billing scenarios, Stripe allows tax amounts to be set directly on invoices, which helps you to integrate with other tax calculation systems (such as a third-party tax tool such as Avalara or your own tax engine). This guide goes through various billing scenarios to show how to use the [`tax_amounts`](https://docs.stripe.com/api/invoices/update_line#update_lines-tax_amounts) field.\n\n## Create an invoice with manual tax amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis section describes adding manual tax amounts to invoice line items.\n\n### Create an invoice with an invoice item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe first step is to create an invoice. We assume you already have a customer created, but if you don’t, please reference the [customers](https://docs.stripe.com/invoicing/customer) guide.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nManual tax amounts can only be added to invoice line items, so add an invoice item to the invoice.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d invoice=  {{INVOICE_ID}}   \\  -d amount=100 \\  -d currency=usd`\n\n### Update the invoice line item with `tax_amounts` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [update invoice line item endpoint](https://docs.stripe.com/api/invoices/update_line) accepts the [`tax_amounts`](https://docs.stripe.com/api/invoices/update_line#update_lines-tax_amounts) parameter. This field gives merchants the ability to directly set the tax amounts on invoice line items. The field also requires tax rate data to make sure relevant information is displayed to the customer. The example below updates an invoice line item with the `tax_amounts` field.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/lines/il_0O4tNe589O8KAxCGYD7OyXPP \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tax_amounts[0][amount]\"=10 \\  -d \"tax_amounts[0][taxable_amount]\"=100 \\  -d \"tax_amounts[0][tax_rate_data][percentage]\"=10 \\  -d \"tax_amounts[0][tax_rate_data][inclusive]\"=false \\  -d \"tax_amounts[0][tax_rate_data][tax_type]\"=sales_tax \\  -d \"tax_amounts[0][tax_rate_data][display_name]\"=\"Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][description]\"=\"Texas Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][jurisdiction]\"=Texas \\  -d \"tax_amounts[0][tax_rate_data][country]\"=US \\  -d \"tax_amounts[0][tax_rate_data][state]\"=TX`\n\nAll of the fields under `tax_amounts` are required except for `description`, `jurisdiction`, `country`, `state`, and `tax_type`. The [invoice line item object](https://docs.stripe.com/api/invoices/line_item) returns a `tax_amounts` field.\n\n`{   id: \"il_0O4tNe589O8KAxCGYD7OyXPP\",   object: \"line_item\",   amount: 100,   amount_excluding_tax: 100,   currency: \"usd\",   ...   tax_amounts: [     {       amount: 10,       inclusive: false,       tax_rate: \"txr_0Ns7kW589O8KAxCGXoi7EAuS\",       taxability_reason: null,       taxable_amount: 100     }   ],   tax_rates: [],   ... }`\n\n#### Note\n\nStripe automatically creates or reuses an existing tax rate based on `tax_rate_data`. However, Stripe calculates tax amounts on the invoice based only on the amount parameter. Other values, such as tax rate, are only used for rendering purposes to be shown on the invoice. No validations are run on these fields to make sure they’re consistent with the tax amounts specified.\n\n### Finalize the invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter all of the invoice line items are updated with tax amounts, you need to finalize the invoice. Tax amounts can’t change after the invoice is finalized. Refer to the [edit invoice](https://docs.stripe.com/invoicing/invoice-edits) guide if you need to modify the invoice after finalization.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Stripe automatically creates tax-rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor manual tax amounts, Stripe requires information about the corresponding tax rate. The tax rate is only used to display information to customers. It isn’t used in any calculations.\n\nStripe automatically creates tax rate objects in the background based on `tax_rate_data`. If the same tax rate data is passed in multiple times, Stripe references the existing tax rate object instead of creating another one. The following fields are used to deduplicate the tax rate: `percentage`, `inclusive`, `display_name`, `jurisdiction`, `country`, `state`, and `tax_type`. In this example, assume a second invoice line item was updated on the invoice from the previous section with the same `tax_rate_data`.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/lines/il_0P6nbg589O8KAxCGRWBJAdNV \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tax_amounts[0][amount]\"=50 \\  -d \"tax_amounts[0][taxable_amount]\"=500 \\  -d \"tax_amounts[0][tax_rate_data][percentage]\"=10 \\  -d \"tax_amounts[0][tax_rate_data][inclusive]\"=false \\  -d \"tax_amounts[0][tax_rate_data][tax_type]\"=sales_tax \\  -d \"tax_amounts[0][tax_rate_data][display_name]\"=\"Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][description]\"=\"Texas Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][jurisdiction]\"=Texas \\  -d \"tax_amounts[0][tax_rate_data][country]\"=US \\  -d \"tax_amounts[0][tax_rate_data][state]\"=TX`\n\n`{   id: \"il_0P6nbg589O8KAxCGRWBJAdNV\",   object: \"line_item\",   amount: 100,   amount_excluding_tax: 100,   currency: \"usd\",   ...   tax_amounts: [     {       amount: 10,       inclusive: false,       tax_rate: \"txr_0Ny6QR589O8KAxCGo6MKGPxM\",       taxability_reason: null,       taxable_amount: 100     }   ],   tax_rates: [],   ... }`\n\nBoth invoice line items have the same `tax_rate` ID under the `tax_amount`. Stripe handles the tax rate creation and deduplication to minimize the burden on merchants. While the `tax_rate` ID maps to a valid tax rate object, the IDs mapped to automatically created tax rates can’t be passed into the `tax_rates` field on the API. The only exception to that rule is the create credit notes endpoint.\n\n## Issue a credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCredit notes allow for adjustments on invoices without needing to void an invoice. When issuing a credit note for an invoice line item with manual tax amounts, the API requires additional information to accurately create it.\n\n### Create credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe create credit note endpoint also accepts the `tax_amounts` parameter. The field is required when the corresponding invoice line item has manual tax amounts. This ensures accurate accounting of the credit note and maintains consistency with your invoices.\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice=  {{INVOICE_ID}}   \\  -d reason=duplicate \\  -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"=il_0O4tNe589O8KAxCGYD7OyXPP \\  -d \"lines[0][tax_amounts][0][amount]\"=10 \\  -d \"lines[0][tax_amounts][0][taxable_amount]\"=100 \\  -d \"lines[0][tax_amounts][0][tax_rate]\"=txr_0Ns7kW589O8KAxCGXoi7EAuS`\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep in mind the following constraints when working with manual tax amounts.\n\n### Invoice items don’t have tax amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManual tax amounts can only be added to invoice line items.\n\n### `taxable_amount` and `tax_rates` are not validated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe taxable amount and tax rate data passed in the request are only used for rendering purposes. They’re not validated against the tax amount in the request.\n\n### Can’t mix `tax_amounts` and `tax_rates`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice line item can’t have manual tax amounts if it also has a tax rate, and vice versa. Invoice line items also can’t have manual tax amounts if the invoice has a default tax rate or if any of the other invoice line items on the invoice has a tax rate.\n\n### `tax_amounts` can grow stale when updating other fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExisting manual tax amounts persist on the invoice line item unless directly edited. This can lead to stale tax amounts when [updating the invoice item](https://docs.stripe.com/api/invoiceitems/update) with fields relating to its amount, such as `amount`, `discounts`, or `price`.\n\n### Automatically created tax rates can’t be directly used![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically creates tax rate objects for manual tax amounts. These tax rates can’t be directly referenced on invoice or payment-related endpoints, except the credit note endpoint. They also can’t be directly updated and won’t be included on the all tax rates endpoint. However, the tax rate’s data is accessible by calling the retrieve tax rate endpoint with its token.",
  "title": "Use tax amounts calculated outside of Stripe with Stripe Billing | Stripe Documentation",
  "description": "Use taxes calculated from an external system with Stripe Invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/invoices/upcoming",
  "markdown": "# Retrieve an upcoming invoice | Stripe API Reference\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an invoice's line items](https://docs.stripe.com/api/invoices/invoice_lines)\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```\n\n## [Retrieve an upcoming invoice's line items](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [List all invoices](https://docs.stripe.com/api/invoices/list)\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Delete a draft invoice](https://docs.stripe.com/api/invoices/delete)\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```",
  "title": "Retrieve an upcoming invoice | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/report-types/balance",
  "markdown": "# Balance report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Balance report schema and parameters.\n\nThe Balance report returns your complete transaction history to help with reconciliation. Run this report to use the returned data in your API calls. You can also download the CSV from the [Balance report](https://dashboard.stripe.com/reports/balance) in the Dashboard.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\n| Report type | Required run parameters | Optional run parameters |\n| --- | --- | --- |\n| `balance_change_from_activity.itemized.1`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.2`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-2) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.3`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-3) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.4`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-4) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.5`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-5) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.summary.1`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `timezone`<br>*   `columns` |\n| `payouts.itemized.1`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.itemized.2`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-2) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.itemized.3`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-3) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.summary.1`[<br><br>Columns<br><br><br><br>](#schema-payouts-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `timezone`<br>*   `columns` |\n| `balance.summary.1`[<br><br>Columns<br><br><br><br>](#schema-balance-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `columns` |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.2`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Unique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.3`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| created |     | Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| available\\_on |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at\\_utc |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| charge\\_created |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.4`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| created |     | Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| available\\_on |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee\\_tax |     | Tax on Stripe fees. Expressed in major units of the currency (e.g dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at\\_utc |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| charge\\_created |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.5`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee\\_tax |     | Tax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Unique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Balance change from activity summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| count |     | The number of transactions associated with the `reporting_category`. |\n| gross |     | Sum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Sum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Sum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.2`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.3`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| effective\\_at |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at\\_utc |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in UTC. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in the requested timezone, or UTC if not provided. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n\n### Payouts summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| count |     | The number of transactions associated with the `reporting_category`. |\n| gross |     | Sum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Sum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Sum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n\n### Balance summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| category |     | One of `starting_balance`, `ending_balance`, `activity` or `payouts`. |\n| description |     | One of `Starting balance (YYYY-MM-DD)` - the balance at the start of the period, `Activity` - the net amount of all transactions that affected your balance except for payouts, `Total payouts` - the amount of payouts to your bank account, or `Ending balance (YYYY-MM-DD)` - the balance left over at the end of the period after subtracting payouts from the `Starting balance` and `Activity`. |\n| net\\_amount |     | Net amount for the transactions associated with `category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `net_amount` is defined. |",
  "title": "Balance report type | Stripe Documentation",
  "description": "Review the Balance report schema and parameters.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/report-types/tax",
  "markdown": "# Tax report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Tax report schema and parameters.\n\nCurrently, this report type is available for our private beta users. To participate in this private beta, submit your information below.\n\nFirst, you need a Stripe account. [Register or Login now](https://dashboard.stripe.com/register?redirect=https%3A%2F%2Fstripe.com%2Fdocs%2Ftax%2Fconnect).",
  "title": "Tax report type | Stripe Documentation",
  "description": "Review the Tax report schema and parameters.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/onboarding",
  "markdown": "# Prepare for onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to prepare your Stripe and NetSuite accounts for onboarding.\n\nIf you want to use the Stripe Connector for NetSuite, you must work with an official implementation partner to set up the connector.\n\nBefore you begin, make sure to prepare your Stripe and NetSuite accounts for onboarding using the guidance below.\n\n### Prepare for onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Activate your Stripe account](https://docs.stripe.com/connectors/netsuite/onboarding#stripe-account)\n2.  [Set up a NetSuite test account](https://docs.stripe.com/connectors/netsuite/onboarding#netsuite-sandbox)\n3.  [Create a dedicated NetSuite user to operate the connector](https://docs.stripe.com/connectors/netsuite/onboarding#netsuite-user)\n4.  [Provide temporary admin access for the implementation partner](https://docs.stripe.com/connectors/netsuite/onboarding#admin-access)\n5.  (Optional) [Set up Stripe Billing](https://docs.stripe.com/connectors/netsuite/onboarding#stripe-billing)\n\n## Activate your Stripe account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you haven’t already, [activate your Stripe account](https://docs.stripe.com/get-started/account/activate).\n\n## Set up a NetSuite sandbox ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe recommend setting up a NetSuite sandbox environment to test the connector. You can set up the connector to sync Stripe test data to your NetSuite production account, but you must remember to manually delete the test data from the production instance.\n\n## Create a dedicated NetSuite user ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo prevent any settings changes from inadvertently affecting the connector’s ability to operate, we recommend creating a dedicated NetSuite user to operate the connector. With a dedicated user, you can also identify actions taken or changes made by that user in the NetSuite system log.\n\nIf you can’t provide a dedicated user, you can provide a shared user that isn’t used for other integrations. Any changes to that user can negatively impact the connector. For example, if you use an existing user login and that employee leaves the company, deleting their NetSuite user can break the connector and stop record syncing.\n\n## Prepare to grant admin access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe implementation partner requires temporary admin access during onboarding for the following:\n\n*   Testing in the sandbox environment\n*   Implementing the connector live in production\n*   Troubleshooting issues specific to your NetSuite account\n\nIf you must restrict access, we recommend providing admin and GUI access in the sandbox environment, and then removing permissions before you move to production.\n\nYour implementation partner can provide further instructions for granting access.\n\n## (Optional) Set up Stripe Billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use Stripe Billing and have existing Stripe prices and NetSuite items, you need to do the following to prepare for onboarding:\n\n*   Prepare a data sheet to map IDs for existing Stripe and NetSuite customers.\n*   Prepare a data sheet to map IDs for existing Stripe prices and NetSuite items.\n*   Determine the rule for the connector to use for NetSuite revenue recognition.\n*   Determine the start date to sync records.",
  "title": "Prepare for onboarding | Stripe Documentation",
  "description": "Learn how to prepare your Stripe and NetSuite accounts for onboarding.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/treasury-fees-reporting",
  "markdown": "# Treasury fees report | Stripe DocumentationThe Stripe Docs logo\n\n## Treasury fees reportBeta\n\n## Analyze Treasury fees at an itemized level.\n\nUse Treasury fee reports to understand Stripe’s approach to the calculation, application, and reporting of fees. You can create and download detailed reports in the Dashboard.\n\n## How Stripe assesses Treasury fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Administrative Facilitation Fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe pays Treasury users the Administrative Facilitation Fee (“AFF”) on a monthly basis. We compound the fee on a daily basis and use the minimum available balance across all your Treasury financial accounts for that particular day. Financial Accounts with a negative balance don’t accrue any fees. The balance is multiplied by: the 50th percentile Effective Federal Funds Rate (EFFR) published for that day by the [Federal Bank of New York](https://www.newyorkfed.org/markets/reference-rates/effr) and your negotiated Administrative Facilitation Fee Rate Multiplier. For non-business days, we use the previous business day’s EFFR value.\n\nThis methodology is as described in the latest Stripe Treasury standardized fee schedule. Your actual methodology might differ based on your negotiated terms with Stripe.\n\nView an example calculation below.\n\n| Day | EOD Available Balance | EFFR | Rate Multiplier | Calculation | Daily Yield for one FA |\n| --- | --- | --- | --- | --- | --- |\n| 1   | $20,000 | 4.33 | 92% | 20000 \\* (0.0433 \\* .92)/360 \\* .5 | $1.11 |\n| 2   | $22,000 | 3.8 | 92% | 22000 \\* (0.038 \\* .92)/360 \\* .5 | $1.07 |\n| 3   | $15,000 | 3.8 | 92% | 22000 \\* (0.038 \\* .92)/360 \\* .5 | $0.73 |\n\nThe total yield for the 3 days is 1.11 + 1.07 + 0.73 = $2.91.\n\n## Available columns ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can customize the columns that appear in the reports when you download them in the Dashboard. The available columns in each type of report are described below.\n\n*   [Treasury Administrative Facilitation Fee](#schema-treasury-fees-administrative-facilitation-fee)\n\n### Treasury Administrative Facilitation Fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `treasury_fees.administrative_facilitation_fee`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| merchant |     | Unique identifier of financial account associated with. |\n| financial\\_account |     | Unique identifier of financial account for which Administrative Facilitation Fee was incurred. |\n| date |     | Date associated with Administrative Facilitation Fee earned… |\n| balance\\_amount |     | The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. |\n| balance\\_currency |     | Designated currency of financial accounts balance. Currently, FinancialAccounts can only carry balances in USD. |\n| effr\\_value |     | Effective federal funds rate value (50th percentile) used to calculate fee. Gathered from the [NY FED](https://www.newyorkfed.org/markets/reference-rates/effr). |\n| fee |     | Amount of Administrative Facilitation fee paid out in user’s currency. |",
  "title": "Treasury fees report | Stripe Documentation",
  "description": "Analyze Treasury fees at an itemized level.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/report-types/payout-reconciliation",
  "markdown": "# Payout reconciliation report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Payout reconciliation report schema and parameters.\n\nThe Payout reconciliation report returns data related to the payouts your receive in your bank account to help you match them to the transactions they relate to. Run this report to use the returned data in your API calls. You can also download the CSV from the [Payment fees report](https://dashboard.stripe.com/reports/reconciliation) in the Dashboard.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\nReport type\n\nRequired run parameters\n\nOptional run parameters\n\n`ending_balance_reconciliation.itemized.1`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-1)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.2`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-2)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.3`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-3)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `timezone`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.4`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-4)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `timezone`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.5`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-5)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `timezone`\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-1)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.2`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-2)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.3`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-3)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.4`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-4)\n\n*   `payout`\n\n*   `reporting_category`\n*   `timezone`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.summary.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-summary-1)\n\n*   `payout`\n\n*   `columns`\n\n`ending_balance_reconciliation.summary.1`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-summary-1)\n\n*   `interval_end`\n\n*   `currency`\n*   `timezone`\n*   `columns`\n\n`payout_reconciliation.itemized.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-1)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.2`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-2)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.3`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-3)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.4`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-4)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `timezone`\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.summary.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-summary-1)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `timezone`\n*   `columns`\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested time zone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested time zone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested time zone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested time zone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Payouts reconciliation summary for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Ending balance reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Payouts reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).",
  "title": "Payout reconciliation report type | Stripe Documentation",
  "description": "Review the Payout reconciliation report schema and parameters.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/report-types/connect",
  "markdown": "# Connect report type | Stripe DocumentationThe Stripe Docs logo\n\n## Retrieve financial reports for your connected accounts using the API.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms can use most financial reports to view the activity in their platform account, or in one or more of their connected accounts. In the Dashboard, the [report setting](https://docs.stripe.com/reports/options) controls which account’s data the report displays. By default, the API returns report data for your platform account activity. To view data for your connected accounts, use the Connect-specific report types listed below.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\\_tax\n\nTax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\\_tax\n\nTax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account balance change from activity summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\neffective\\_at\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\\_utc\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in UTC.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in the requested timezone, or UTC if not provided.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account payouts summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account balance summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\ncategory\n\nOne of `starting_balance`, `ending_balance`, `activity` or `payouts`.\n\ndescription\n\nOne of `Starting balance (YYYY-MM-DD)` - the balance at the start of the period, `Activity` - the net amount of all transactions that affected your balance except for payouts, `Total payouts` - the amount of payouts to your bank account, or `Ending balance (YYYY-MM-DD)` - the balance left over at the end of the period after subtracting payouts from the `Starting balance` and `Activity`.\n\nnet\\_amount\n\nNet amount for the transactions associated with `category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `net_amount` is defined.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account ending balance reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account single payout reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account date-ranged payouts reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected accounts with negative balances disputes and refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connect.negative_balance_refunds_disputes_overview.1`\n\nColumn name\n\nDefault\n\nDescription\n\naccount\\_id\n\nThe ID of the connected account.\n\nbusiness\\_name\n\nThe business name of the connected account.\n\ncountry\n\nTwo-letter ISO code representing the account’s country.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which the balance, refunded amount, and disputed amount are defined.\n\nbalance\n\nThe balance of the connected account, including both available and pending funds.\n\npending\\_debits\n\nThe sum of [debits](https://stripe.com/docs/connect/account-balances#accounting-for-negative-balances) that are currently pending or in transit on the connected account.\n\nbalance\\_excluding\\_pending\\_debits\n\nThe balance, excluding [pending debits](https://stripe.com/docs/connect/account-balances#accounting-for-negative-balances).\n\nbalance\\_24hr\\_net\\_change\n\nThe 24 hour net change in balance for the connected account.\n\nrefunded\\_amount\\_7d\n\nThe total amount refunded in the past 7 days related to the connected account.\n\nrefunded\\_amount\\_7d\\_prev\n\nThe total amount refunded in the past 7 days prior to the most recent 7 days related to the connected account.\n\nrefund\\_pct\\_change\n\nThe percent change in refunds in the past 7 days compared to the preceding period.\n\ndisputed\\_amount\\_7d\n\nThe total amount disputed in the past 7 days related to the connected account.\n\ndisputed\\_amount\\_7d\\_prev\n\nThe total amount disputed in the past 7 days prior to the most recent 7 days related to the connected account.\n\ndispute\\_pct\\_change\n\nThe percent change in disputes in the past 7 days compared to the preceding period.\n\nhas\\_24hr\\_negative\\_balance\\_change\n\nWhether the account has had their balance go negative in the past 24 hours.\n\nhas\\_high\\_disputes\n\nWhether the account has been tagged as having high disputes.\n\nhas\\_high\\_refunds\n\nWhether the account has been tagged as having high refunds.",
  "title": "Connect report type | Stripe Documentation",
  "description": "Retrieve financial reports for your connected accounts using the API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/deposit-automation",
  "markdown": "# Deposit automation | Stripe DocumentationThe Stripe Docs logo\n\n## Use the connector to automate the bank reconciliation process.\n\nThe Stripe Connector for NetSuite automates the bank reconciliation process by creating bank deposits in NetSuite for all of your [Stripe payouts](https://support.stripe.com/topics/payouts). The connector also automates fee calculation, the refund life cycle, the dispute life cycle, and handling of multiple currencies and subsidiaries. This means you only need to match the bank deposit record to the Stripe deposits on your bank statement, reducing the amount of manual work required each month. Every automated payment workflow that the connector supports includes deposit automation.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you use the connector, the automated bank reconciliation process occurs daily as follows:\n\n1.  The connector creates payments and refunds for each Stripe transaction, and posts these transactions in the Undeposited Funds account in NetSuite.\n2.  Stripe notifies the connector that a bank transfer (Stripe payout) has successfully arrived at your bank.\n3.  The connector creates a bank deposit record in NetSuite that contains all of the payments, refunds, and disputes from that day’s bank deposit.\n4.  The connector calculates any fees for processing, currency conversion, disputes, and refunds, and includes these as separate line items that post to your specified expense accounts.\n5.  The connector ensures that the deposit total and deposit date match your bank statement.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Billing and Invoicing automation](https://docs.stripe.com/connectors/netsuite/invoice-automation)\n*   [Invoice payment page](https://docs.stripe.com/connectors/netsuite/invoice-payment-page)\n*   [Customer payment page](https://docs.stripe.com/connectors/netsuite/customer-payment-page)",
  "title": "Deposit automation | Stripe Documentation",
  "description": "Use the connector to automate the bank reconciliation process.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/invoice-payment-page",
  "markdown": "# NetSuite invoice payment page | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to use a Stripe payment flow to pay NetSuite invoices.\n\nThe Stripe Connector for NetSuite creates a payment page for each of your NetSuite invoices. Customers can pay invoices using a Stripe payment flow, and pay with any of the [payment methods](https://dashboard.stripe.com/test/settings/payment_methods) that you enable. Every accepted payment includes automated payment processing, cash application, deposit automation, and fee calculation.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Save payment methods for future use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the payment page to save payment methods for future use. For example, a connector add-on (such as Auto-Pay) might use the saved payment method to charge a customer for future invoices. Stripe saves the payment method to a new or existing [Customer](https://docs.stripe.com/api/customers) object.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, if you want to save a customer’s payment method for future use, you need their agreement to be billed outside of the connector’s payment flow. Getting that agreement up front allows you to save the payment details, and to charge the customer for future invoices if needed.\n\nIf you plan to charge the customer while they’re offline, make sure that your terms also cover the following, at minimum:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n## Customize the payment page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the look and feel of the payment page to match the design of your site. Modify the payment page color and design on the [Branding settings](https://dashboard.stripe.com/settings/branding) page in the Stripe Dashboard. Modify your name and statement descriptor on the [Public details](https://dashboard.stripe.com/settings/public) page.\n\n## Add the payment page to your communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can integrate the payment page into your customer communications in NetSuite. For example, you might choose to map the payment page’s unique link to a **Pay Now** button in your NetSuite email templates, invoice PDF templates, or manual outreach.\n\n## Send email receipts for payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have two options for sending email receipts to your customers:\n\n*   Use Stripe to automatically send email receipts. The connector provides the invoice ID and NetSuite customer email. To use this option, enable **Successful payments** on the [Customer emails settings](https://dashboard.stripe.com/settings/emails) page in the Stripe Dashboard. You can also [customize your receipts](https://docs.stripe.com/receipts?payment-ui=payment-links#customizing-receipts).\n    \n*   Use NetSuite to send email receipts for payments. You must disable email receipts in the Stripe Dashboard and then set up a workflow to send customized email receipts from NetSuite.\n    \n\n## Support multiple currencies and payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept payments in the [supported presentment currencies](https://docs.stripe.com/currencies#presentment-currencies) in your region. The payment page displays the currency that’s specified on the NetSuite invoice. Stripe then creates a payment based on that currency.\n\nYou can enable the payment methods you want to accept on the [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. Stripe supports many categories of [payment methods](https://docs.stripe.com/payments/payment-methods/overview) based on your region and business needs.\n\n## Automate bank reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment page includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), which automates the bank reconciliation process for all payments, refunds, and disputes from a Stripe payout to a NetSuite bank deposit.",
  "title": "NetSuite invoice payment page | Stripe Documentation",
  "description": "Allow customers to use a Stripe payment flow to pay NetSuite invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/customer-payment-page",
  "markdown": "# NetSuite customer payment page | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to make payments toward their NetSuite balance using Stripe.\n\nUse the customer payment page to collect payments that you can then apply to multiple invoices as partial payments, or to support other payment applications beyond single invoices. The Stripe Connector for NetSuite automatically sets the amount due on your NetSuite customer payment page to the NetSuite customer balance total. But the connector allows customers to modify the amount they pay to any amount, up to the outstanding balance amount. Every accepted payment includes automated payment processing, deposit automation, and fee calculation.\n\nYou can enable the [payment methods](https://dashboard.stripe.com/test/settings/payment_methods) available to your customers in your Stripe account.\n\nA customer payment gets created and associated with the NetSuite customer. You can also designate how you want to apply payments, based on your business needs. For example, you can automate the payment application to specific invoices using native NetSuite settings, a custom workflow, or a custom SuiteScript.\n\n## Save payment methods for future use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the payment page to save a payment method for future use if needed. For example, a connector add-on (such as Auto-Pay) might use the saved payment method to charge a customer for future invoices. Stripe saves the payment method to a new or existing [Customer](https://docs.stripe.com/api/customers) object.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, if you want to save a payment method for future use, you need their agreement to be billed outside of the connector’s payment flow. Getting that agreement up front allows you to save their payment details, and potentially charge them for future invoices if needed.\n\nIf you plan to charge the customer while they’re offline, make sure that your terms also cover the following, at minimum:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n## Customize the payment page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the look and feel of the payment page to match the design of your site. Modify the payment page color and design on the [Branding settings](https://dashboard.stripe.com/settings/branding) page in the Stripe Dashboard. Modify your name and statement descriptor on the [Public details](https://dashboard.stripe.com/settings/public) page.\n\n## Add the payment page to your communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can integrate the payment page into your customer communications in NetSuite. For example, you might want to map the payment page’s unique link to a **Pay Now** button in your NetSuite email templates, invoice PDF templates, or manual outreach.\n\n## Send email receipts for payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have two options for sending email receipts to your customers:\n\n*   Use Stripe to automatically send email receipts. The connector provides the invoice ID and NetSuite customer email. To use this option, enable **Successful payments** on the [Customer emails settings](https://dashboard.stripe.com/settings/emails) page in the Stripe Dashboard. You can also [customize your receipts](https://docs.stripe.com/receipts?payment-ui=payment-links#customizing-receipts).\n    \n*   Use NetSuite to send email receipts for payments. You must disable email receipts in the Stripe Dashboard and then set up a workflow to send customized email receipts from NetSuite.\n    \n\n## Support multiple currencies and payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept payments in the [supported presentment currencies](https://docs.stripe.com/currencies#presentment-currencies) in your region. The payment page displays the currency that’s specified on the NetSuite invoice. Stripe then creates a payment based on that currency.\n\nYou can enable the payment methods you want to accept on the [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. Stripe supports many categories of [payment methods](https://docs.stripe.com/payments/payment-methods/overview) based on your region and business needs.\n\n## Automate bank reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment page includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), which automates the bank reconciliation process for all payments, refunds, and disputes from a Stripe payout to a NetSuite bank deposit.",
  "title": "NetSuite customer payment page | Stripe Documentation",
  "description": "Allow customers to make payments toward their NetSuite balance using Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/error-resolution",
  "markdown": "# Error resolution | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to handle errors with the Stripe Connector for NetSuite.\n\nIf you encounter any issues when syncing records from Stripe to NetSuite, you can use the list below to identify and resolve the errors. You might need to modify NetSuite, Stripe, or the connector and then manually sync the record.\n\nYou can view all errors in the connector app’s sync records window.\n\n## Data errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below contains errors you might encounter when syncing records to NetSuite.\n\n| Error | Source | Description | Resolution |\n| --- | --- | --- | --- |\n| _NetSuite System Error: Unable to find a matching line for sub-list apply with key: \\[doc,line\\] and value: \\[12345,null\\]._ | NetSuite | The connector can’t create a record as a payment (sub-list) entry on an existing NetSuite record. For example, the connector can’t create and apply a payment to an existing invoice that’s already paid in full. This error can also occur if the credit memo amount is less than the refund amount, which might happen if tax or another amount modifies the automation setup in NetSuite. | Inspect the NetSuite record in the error to see why the payment entry wasn’t successful. If the reason is still unclear, you can manually create the payment entry to help identify the root cause. |\n| _Please enter value(s) for: \\[Field Name\\]._ | NetSuite | The connector can’t create or update a NetSuite record due to a missing required field on that record. For example, if the connector tries to create an invoice where the `Department` field is required, NetSuite won’t allow the connector to complete the action until there’s a value for `Department` in the create invoice request. | Add a default value for the field. To do so, navigate to the **App settings** > **Field mapping** > **Field defaults** page in the connector. The connector uses the default value when creating records of that type. Field defaults use the JSON format.<br><br>For example, to add a default value of 2 for `Department` on your invoices, you add the following:<br><br>`invoice: {    \"department_id\": 2 }` |\n| _You have entered an Invalid Field Value \\[value\\] for the following field: \\[field\\]._ | NetSuite | The connector can’t create or update a NetSuite record due to one or more invalid field values. This might happen if a field default uses a value that was deleted or made unavailable for any reason.<br><br>For example, you might have `Class` as a required field for deposits. During onboarding, you add a field default of Corporate with an internal ID of 5 to satisfy the requirement. After some time, the value for Corporate (ID: 5) is deleted. When the connector attempts to create another bank deposit, it fails with the following error message: `You have entered an Invalid Field Value 'Corporate' for the following field: Class` | Modify the default value to use a valid field ID. To do so, navigate to the **App settings** > **Field mappings** > **Field defaults** page in the connector. |\n| _Invalid record referenced in metadata key `netsuite_metadata_id` (012345)._ | Connector | The connector can’t sync the record because of a deleted NetSuite record that you previously synced or linked. For example, if you link a Stripe refund to a credit memo and then delete the credit memo, you must update the Stripe refund’s metadata key (`netsuite_credit_memo_id`) to point to the correct NetSuite credit memo internal ID. | Update the refund metadata key `netsuite_credit_memo_id` to point to the new credit memo internal ID. |\n| _Charge amount 100.0 is different than the amount due on the corresponding invoice. Transaction ID:INV12345 (ID 1234567) amount due: 99.0._ | Connector | The invoice payment exceeds the amount due on the NetSuite invoice. This might happen if the connector incorrectly syncs the Stripe invoice to NetSuite and you haven’t yet set up tax handling. This can also occur if you modify the total on the NetSuite invoice during the period of time between when you sent the invoice and when the customer submitted payment. | If your connector account isn’t set up to handle taxes, contact your implementation partner for setup. If you manually modified a NetSuite invoice created by the connector, you must update the invoice to use the original amount. |\n\n## Duplicate payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and NetSuite handle duplicate payments differently. While Stripe allows overpayment of an invoice, NetSuite returns an error if a customer attempts to make a payment on a fully paid invoice. By default, if a duplicate payment occurs in Stripe, the connector won’t sync the payment because NetSuite doesn’t allow a second payment.\n\nIf a duplicate payment causes an error when the connector attempts to reconcile the payout during [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), you can fix the issue by manually removing the first payment from the invoice to allow the second payment.\n\nYou can also allow the connector to handle duplicate payments for you. If you have a NetSuite invoice that’s fully paid, the connector brings over duplicate payments as unapplied payments in NetSuite. The unapplied payment includes the following memo: `Stripe Payment Error: could not apply to invoice XYZ.` You can then use these unapplied payments on another invoice, or refund the payments manually in Stripe. To search for duplicate payments in NetSuite, create a saved search using the memo as your criteria.\n\nYou can enable the connector to handle duplicate payments in the following ways:\n\n*   Allow all duplicate payments in the connector by default. To do so, go to your connector settings and enable **Allow duplicate invoice payments** in your Stripe app settings. Contact your implementation partner to understand all accounting and technical implementations before they enable this feature for you.\n    \n*   Using the Stripe API, add the `netsuite_allow_duplicate: true` field in the metadata of a duplicate Stripe charge.",
  "title": "Error resolution | Stripe Documentation",
  "description": "Learn how to handle errors with the Stripe Connector for NetSuite.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment-charges",
  "markdown": "# Accept a payment using Stripe Elements and the Charges API\n\nUse Stripe Elements, our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data. The card details are then converted to a representative [Token](https://docs.stripe.com/api#tokens) that you can safely send to your servers. Your server can use that token to create a charge.\n\n[](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-form)\n\nTo securely collect card details from your customers, Stripe Elements creates UI components for you that are hosted by Stripe. They are then placed into your payment form, rather than you creating them directly.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo have Elements available in your webpage, add this script tag in the `head` of your HTML page:\n\nThat script should always be loaded directly from **https://js.stripe.com**.\n\nCreate an instance of Elements with the following JavaScript on your payment page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\nOnce Elements is loaded, you can create an empty DOM container with a unique ID within your payment form wherever you want Elements to add its input field. We recommend placing that container within a `<label>` or next to a `<label>` with a `for` attribute that matches the unique `id` of the Element container. By doing so, the Element automatically gains focus when the customer clicks on the corresponding label.\n\nFor example:\n\n`<form action=\"/charge\" method=\"post\" id=\"payment-form\">   <div class=\"form-row\">     <label for=\"card-element\">       Credit or debit card     </label>     <div id=\"card-element\">       <!-- A Stripe Element will be inserted here. -->     </div>      <!-- Used to display Element errors. -->     <div id=\"card-errors\" role=\"alert\"></div>   </div>    <button>Submit Payment</button> </form>`\n\nWhen the form above has loaded, [create an instance](https://docs.stripe.com/js#elements-create) of a `card` Element and mount it to the Element container created above:\n\n``// Custom styling can be passed to options when creating an Element. const style = {   base: {     // Add your base input styles here. For example:     fontSize: '16px',     color: '#32325d',   }, };  // Create an instance of the card Element. const card = elements.create('card', {style});  // Add an instance of the card Element into the `card-element` <div>. card.mount('#card-element');``\n\nThe `card` Element simplifies the form and minimizes the number of required fields by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\nRefer to our [Stripe.js reference](https://docs.stripe.com/js#elements_create) documentation for a full list of supported Element types.\n\n[](#web-create-token)\n\nAdd an event listener for when your customer submits their card information and use `stripe.createToken(card)` to tokenize that information:\n\n`// Create a token or display an error when the form is submitted. const form = document.getElementById('payment-form'); form.addEventListener('submit', async (event) => {   event.preventDefault();    const {token, error} = await stripe.createToken(card);    if (error) {     // Inform the customer that there was an error.     const errorElement = document.getElementById('card-errors');     errorElement.textContent = error.message;   } else {     // Send the token to your server.     stripeTokenHandler(token);   } });`\n\n[createToken](https://docs.stripe.com/js/tokens/create_token?type=cardElement) also accepts an optional second parameter containing additional card information collected from the customer, which is not used in this example. The function returns a `Promise` which resolves with a `result` object. This object has either:\n\n*   `result.token`: a [Token](https://docs.stripe.com/api#tokens) was created successfully.\n*   `result.error`: there was an error. This includes client-side validation errors. Refer to the [API reference](https://docs.stripe.com/api#errors) for all possible errors.\n\nIf the object contains a `result.token`, send it to your server. Otherwise, show the customer an error.\n\n[](#web-submit-payment)\n\nSend the token to your server along with any additional information that has been collected:\n\n`const stripeTokenHandler = (token) => {   // Insert the token ID into the form so it gets submitted to the server   const form = document.getElementById('payment-form');   const hiddenInput = document.createElement('input');   hiddenInput.setAttribute('type', 'hidden');   hiddenInput.setAttribute('name', 'stripeToken');   hiddenInput.setAttribute('value', token.id);   form.appendChild(hiddenInput);    // Submit the form   form.submit(); }`\n\n[](#web-create-charge)\n\nAfter the client posts the token to your server, you can use it to create a charge. On your server, grab the Stripe token in the POST parameters submitted by your form. From there, it’s one API call to charge the card:\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\"`\n\nThe response from creating a charge will either be a [charge](https://docs.stripe.com/api/charges/object) or an [error](https://docs.stripe.com/api/errors) with an [error code](https://docs.stripe.com/error-codes). If the response succeeds, fulfill the customer’s order and show them a success page. Otherwise, show them an error page.\n\n* * *\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you can reliably enter a test card in your HTML form, submit it to the server, and see that your server created the charge, then your integration is finished.\n\nCongratulations! You completed a basic payments integration with the Charges API. This API doesn’t support scaling businesses or customers outside of the US and Canada. For more robust and global payments, learn to accept a payment with the [Payment Intents API](https://docs.stripe.com/payments/accept-a-payment).",
  "title": "Accept a payment using Stripe Elements and the Charges API | Stripe Documentation",
  "description": "Accept online payments from US and Canadian customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/charges-api/connect",
  "markdown": "# Stripe Connect and the Charges API\n\n#### Legacy API\n\nLearn how [Connect](https://docs.stripe.com/connect \"Connect\") lets you make charges and issue transfers for [connected accounts](https://docs.stripe.com/connect/accounts). How you configure these options determines your Stripe fees.\n\nConnect supports [three approaches to creating payments for a connected account](https://docs.stripe.com/connect/charges). For more information about the different types of Connect charges, see [the documentation on choosing an approach](https://docs.stripe.com/connect/charges#types). Stripe fees are determined by how you configure these options.\n\nThis page explains only how to make calls to the Charges API for connected accounts. Check the linked pages for more information about calls to other APIs for related operations.\n\n## Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a direct charge on the connected account, create a Charge object and add the `Stripe-Account` header with a value of the connected account ID:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa`\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more details.\n\n### Collect application fees on direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Connect, your platform can take an application fee on direct charges. To assess an application fee on a charge, pass an optional `application_fee_amount` value as a positive integer:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d application_fee_amount=123`\n\nSee [Direct charges](https://docs.stripe.com/connect/direct-charges) for information on transfer availability, refunds, and so on.\n\n## Destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a destination charge, pass the connected account’s ID in the `transfer_data[destination]` attribute:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more details.\n\n### Collect fees on destination charges with `application_fee_amount` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating destination charges with an `application_fee_amount`, the full charge amount is immediately transferred from the platform to the `transfer_data[destination]` account after the charge is captured. The `application_fee_amount` (capped at the full amount of the charge) is then transferred back to the platform.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d application_fee_amount=123 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nTo provide a better reporting experience, an application fee object is created after the application fee is collected. Use the `amount` property on the application fee object for reporting. You can then access these objects with the [Application Fees](https://docs.stripe.com/api/application_fees/list) endpoint.\n\n### Collect fees on destination charges with `transfer_data[amount]` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also take a fee by using [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/charges/object#charge_object-transfer_data-amount).\n\nThe `transfer_data[amount]` is a positive integer reflecting the amount of the charge that’s transferred to the `transfer_data[destination]`. You subtract your platform’s fees from the charge amount, then pass the result of this calculation as the `transfer_data[amount]`:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d \"transfer_data[amount]\"=877 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nSee [Destination charges](https://docs.stripe.com/connect/destination-charges) for information on transfer availability, refunds, and so on.\n\n## Separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nYou can only use separate charges and transfers if both your platform and the connected account are in the same region. For example, if your platform account is in Europe, the connected needs to be in Europe too.\n\nTo create a charge and set up the associated transfer, create a `transfer_group` and assign the charge to the `transfer_group`.\n\n`# Create a Charge: curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=10000 \\   -d \"currency\"=\"usd\" \\   -d \"source\"=\"tok_visa\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\n`# Create a Transfer to a connected account (later): curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=7000 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"{{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\n`# Create a second Transfer to another connected account (later): curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=2000 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"{{OTHER_CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more information.\n\n### Using on\\_behalf\\_of with separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith separate charges and transfers, by default:\n\n*   Charges are settled in the platform’s country\n*   The fee structure for the platform’s country is used\n*   The platform’s information is displayed on the customer’s credit card statement\n\nTo use the connected account’s country and to display their information instead, use the `on_behalf_of` argument.\n\n#### Caution\n\nYou can only use `on_behalf_of` with separate charges and transfers for connected accounts with the [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments) capability.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}    `\n\nSee [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) for information on transfer availability, refunds, and so on.",
  "title": "Stripe Connect and the Charges API | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment-deferred?type=subscription",
  "markdown": "# Collect payment details before creating an Intent\n\n[Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") is a pricing model where users make recurring payments to access a product. In this integration guide, learn how to build a custom payment flow that enables you to render the Payment Element, create a Subscription, and confirm the payment from the customer’s browser.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\nFor Subscriptions, configure your [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) and supported payment methods. To prevent mismatches and errors, your invoice settings must match your Payment Element settings.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n#### Note\n\nThe `amount` passed to the Payment Element should reflect what a customer will be charged immediately. This could either be the first installment of the subscription or `0` if the subscription has a [trial period](https://docs.stripe.com/billing/subscriptions/trials).\n\n`const options = {   mode: 'subscription',   amount: 1099,   currency: 'usd',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 USD. The price for the Premium product is 15 USD.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 USD\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\n[](#create-customer)\n\nStripe needs a [customer](https://docs.stripe.com/api/customers \"Customers\") for each subscription. In your application frontend, collect any necessary customer information and pass it to the backend.\n\nIf you need to collect address details, the Address Element enables you to collect a shipping or billing address for your customers. To learn more, see [Address Element](https://docs.stripe.com/elements/address-element).\n\n`<form id=\"signup-form\">   <label>     Email     <input id=\"email\" type=\"text\" placeholder=\"Email address\" value=\"test@example.com\" required />   </label>    <button type=\"submit\">     Register   </button> </form>`\n\n`const emailInput = document.querySelector('#email');  fetch('/create-customer', {   method: 'post',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     email: emailInput.value,   }), }).then(r => r.json());`\n\nOn the server, create the Stripe customer object.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}} \\   -d name={{CUSTOMER_NAME}} \\   -d \"shipping[address][city]\"=Brothers \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][line1]\"=\"27 Fredrick Ave\" \\  -d \"shipping[address][postal_code]\"=97712 \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[name]\"={{CUSTOMER_NAME}} \\   -d \"address[city]\"=Brothers \\  -d \"address[country]\"=US \\  -d \"address[line1]\"=\"27 Fredrick Ave\" \\  -d \"address[postal_code]\"=97712 \\  -d \"address[state]\"=CA`\n\n[](#create-intent)\n\nWhen the customer submits your payment form, use a [Subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") to facilitate the confirmation and payment process. To create a subscription, you need a [Customer](https://docs.stripe.com/api/customers \"Customers\") and a [Price](https://docs.stripe.com/api/prices \"Prices\").\n\n#### Note\n\nIf you’re using a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency](https://docs.stripe.com/api/subscriptions/create#create_subscription-currency) parameter to tell the Subscription which of the Price’s currencies to use. (If you omit the `currency` parameter, then the Subscription uses the Price’s default currency.)\n\nIncluded on a Subscription is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"). Return this value to your client for Stripe.js to use to securely complete the payment process. For subscriptions that don’t collect a payment up front (for example, subscriptions with a free trial period), use the client secret from the `pending_setup_intent`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-subscription' do   content_type 'application/json'   data = JSON.parse(request.body.read)   customer_id = cookies[:customer]   price_id = data['priceId']    subscription = Stripe::Subscription.create(     customer: customer_id,     items: [{       price: price_id,     }],     payment_behavior: 'default_incomplete',     payment_settings: {save_default_payment_method: 'on_subscription'},     expand: ['latest_invoice.payment_intent', 'pending_setup_intent']   )    if subscription.pending_setup_intent != null     { type: 'setup', clientSecret: subscription.pending_setup_intent.client_secret }.to_json   else     { type: 'payment', clientSecret: subscription.latest_invoice.payment_intent.client_secret }.to_json   end end`\n\n[](#confirm-the-subscription)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) or [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to confirm the subscription using details from the Payment Element. Indicate where Stripe should redirect the customer after confirmation by providing a `return_url` to the confirm function. With some payment methods, the customer is redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. You can also set `redirect` to `if_required` to only redirect customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the subscription   const res = await fetch('/create-subscription', {     method: \"POST\",   });   const {type, clientSecret} = await res.json();   const confirmIntent = type === \"setup\" ? stripe.confirmSetup : stripe.confirmPayment;    // Confirm the Intent using the details collected by the Payment Element   const {error} = await confirmIntent({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point is only reached if there's an immediate error when confirming the Intent.     // Show the error to your customer (for example, \"payment details incomplete\").     handleError(error);   } else {     // Your customer is redirected to your `return_url`. For some payment     // methods like iDEAL, your customer is redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n[](#manage-the-subscription)\n\nTo complete the integration, you may want to:\n\n*   listen for webhooks\n*   provision access to your service\n*   allow customers to cancel their subscriptions\n\nTo learn more, see [Build a subscription integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).",
  "title": "Collect payment details before creating an Intent | Stripe Documentation",
  "description": "Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/alabama",
  "markdown": "# Collect tax in Alabama | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Alabama.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Alabama. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 250,000 USD sales threshold must register for an Alabama sales tax permit, collect sales tax on sales that ship to Alabama, and remit that sales tax to the state.\n\n**Threshold**: 250,000 USD\n\n**Period**: Previous year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2016\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Alabama at the [tax authority](https://www.revenue.alabama.gov/sales-use/sales-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRemote sellers with no physical presence in Alabama can register for the [Simplified Sellers Use Tax](https://www.revenue.alabama.gov/sales-use/simplified-sellers-use-tax-ssut/). The program allows you to collect a single tax rate on all sales into the state, instead of collecting local taxes. You can collect this tax after enrolling on the [My Alabama Taxes website](https://myalabamataxes.alabama.gov/_/).\n\nAfter you’ve registered to collect tax in Alabama, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-al) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions there. You’ll be able to indicate which tax program you’re registered for in Alabama as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\nIf you selected the Simplified Sellers Use Tax program in Stripe then we will calculate and collect the simplified rate. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Alabama filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Alabama. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Alabama | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Alabama.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/invoice-automation",
  "markdown": "# Stripe Billing and Invoicing automation\n\n## Use the connector to sync your Stripe invoices into NetSuite.\n\nThe Stripe Connector for NetSuite automatically syncs the invoices that you create from Stripe Billing [subscriptions](https://docs.stripe.com/billing/subscriptions/overview) or [Stripe Invoicing](https://docs.stripe.com/invoicing/overview) into NetSuite. The sync includes details such as [credit notes](https://docs.stripe.com/invoicing/dashboard/credit-notes), [discounts](https://docs.stripe.com/billing/subscriptions/coupons), [uncollectible invoices](https://docs.stripe.com/revenue-recognition/examples#uncollectible), [taxes](https://docs.stripe.com/billing/taxes/collect-taxes), and [prorations](https://docs.stripe.com/billing/subscriptions/prorations).\n\nYou can complete your accounting workflows entirely in Stripe using the automated process, which means you don’t need to manually reconcile activity. Stripe transaction data syncs at the transaction level in NetSuite, allowing you to use advanced reporting on Stripe data in NetSuite.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you use the connector with [Stripe Billing](https://docs.stripe.com/billing) or [Stripe Invoicing](https://docs.stripe.com/invoicing/overview), the invoice automation process is as follows:\n\n1.  A customer provides their payment information through a Stripe payment flow on your website. This action creates a Stripe `Customer` object.\n2.  Stripe creates an invoice at the beginning of each billing period, which prompts the connector to create an invoice in NetSuite. The connector also creates a new customer or links to an existing NetSuite customer.\n3.  If you enabled NetSuite revenue recognition, the connector splits revenue over the correct period on the line item level.\n4.  When a customer successfully pays the Stripe invoice, the connector creates a NetSuite `Customer Payment` and applies it to the corresponding invoice in NetSuite. If payment fails, resulting in a canceled subscription, the connector can automatically close the NetSuite invoice with a credit memo, or whatever action you configure for failed payments.\n5.  The connector automatically syncs refunds and disputes from Stripe to NetSuite, and creates credit memos and customer refunds.\n6.  The connector [automatically reconciles](https://docs.stripe.com/connectors/netsuite/deposit-automation) Stripe payments against a bank deposit in NetSuite. This includes calculating and recording any processing fees or currency conversion fees.\n\n## Customer flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Invoice flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Payment flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Refund or chargeback flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Stripe Billing and Invoicing automation | Stripe Documentation",
  "description": "Use the connector to sync your Stripe invoices into NetSuite.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/arkansas",
  "markdown": "# Collect tax in Arkansas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Arkansas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Arkansas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales or transaction number must register for an Arkansas sales tax permit, collect sales tax on sales that ship to Arkansas, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Arkansas at the [tax authority](https://www.dfa.arkansas.gov/excise-tax/sales-and-use-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Arkansas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ar) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Arkansas.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Arkansas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Arkansas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Arkansas | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Arkansas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/california",
  "markdown": "# Collect tax in California | Stripe DocumentationThe Stripe Docs logo\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in California. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers in California who exceed the 500,000 USD gross sales must register for a California sales tax permit with the CDTFA, collect sales tax on sales that ship to California, and remit the sales tax to the state.\n\n**Threshold**: 500,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales of tangible personal property\n\n**Effective date**: April 26, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in California at the tax authority:\n\n*   [General information about Sales and Use tax in California](https://www.cdtfa.ca.gov/taxes-and-fees/sutprograms.htm)\n*   [How to register](https://www.cdtfa.ca.gov/services/#Register-Renewals)\n\nAfter you’ve registered to collect tax in California, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ca) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in California.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in California and your origin address is also in California, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with California filing requirements. You have the option to report on an annual, fiscal year, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to California. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in California | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in California.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/connecticut",
  "markdown": "# Collect tax in Connecticut | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Connecticut.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Connecticut. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales and transaction number must register for a Connecticut sales tax permit, collect sales tax on sales that ship to Connecticut, and remit the sales tax to the state.\n\nStripe considers that you crossed the threshold if both of the specified conditions are met (total revenue or and number of transactions).\n\n**Threshold**: 100,000 USD and 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: December 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Connecticut at the [tax authority](https://portal.ct.gov/DRS/Sales-Tax/Tax-Information). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Connecticut, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ct) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Connecticut.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Connecticut filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Connecticut. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Connecticut | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Connecticut.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/colorado",
  "markdown": "# Collect tax in Colorado | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Colorado.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Colorado. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales must register for a Colorado sales tax permit, collect sales tax on sales that ship to Colorado, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: December 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Colorado at the tax authority:\n\n*   [General information about Sales and Use tax in Colorado](https://tax.colorado.gov/sales-use-tax)\n*   [How to register](https://tax.colorado.gov/how-to-apply-for-a-colorado-sales-tax-license)\n\nAfter you’ve registered to collect tax in Colorado, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-co) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Colorado.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Colorado filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Colorado. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Colorado | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Colorado.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/custom-payment-application",
  "markdown": "# Custom payment application | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to customize the way payments are recorded and applied using the Stripe Connector for NetSuite.\n\nThe Stripe Connector for NetSuite provides a way for you to reconcile Stripe payment activity from your custom or prebuilt, third-party integration to NetSuite. Using the following tools, you can customize how the connector records and reconciles payments in NetSuite:\n\n*   [Stripe metadata](https://docs.stripe.com/connectors/netsuite/custom-payment-application#stripe-metadata)\n*   [Invoices for payments](https://docs.stripe.com/connectors/netsuite/custom-payment-application#invoices-payments)\n*   [Connector add-ons](https://docs.stripe.com/connectors/netsuite/custom-payment-application#connector-addons)\n\nYou can use Stripe metadata to make sure your Stripe activity is properly represented in NetSuite.\n\n### Relate a Stripe object to a NetSuite record![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdd metadata to Stripe objects to relate them to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing.\n\nYou can relate records in the following ways:\n\n*   Add `netsuite_invoice_id: 12345` to a Stripe charge so that the connector applies the customer payment to NetSuite invoice with internal ID `12345`.\n*   Add `netsuite_credit_memo_id: 67890` to a Stripe refund so that the connector applies the customer refund to NetSuite credit memo with internal ID `67890`.\n*   Add `netsuite_customer_id: 101010` to a Stripe charge so that the connector creates the customer payment under NetSuite customer with internal ID `101010`.\n\n### Override sync timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can choose to override the default sync timing by programmatically controlling when a record syncs to NetSuite. There are two ways to override record sync timing: add records to a denylist or add records to an allowlist.\n\n#### Add records to a denylist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add metadata to temporarily stop the connector from syncing a record to NetSuite. This is helpful if your backend integration with Stripe requires adding data to a record before syncing to NetSuite.\n\nUse a denylist to control the timing of a customer sync to NetSuite:\n\n1.  Ask your implementation partner to enable the **Denylist payments and refunds** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add `netsuite_block_integration: true` to the metadata of any Stripe object.\n3.  To allow record syncing again, replace `true` with `nil`.\n\nYou can’t permanently add a payment or payment-related record to the denylist. After two days, the connector automatically attempts to create a bank deposit for the Stripe payout. Until you remove the payment or record from the denylist, the deposit automation fails and the payment or record can’t sync to NetSuite.\n\n#### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are examples of when you might want to use a denylist:\n\n**Example 1**: You might have a customer record that your system created when a Stripe customer started the signup process and made a prepayment. Later you collect address data for that customer. The connector typically syncs the customer and payment data to NetSuite right away; however, you can delay syncing to NetSuite until you finish collecting all data for a customer.\n\n**Example 2**: Your Stripe account includes Stripe Billing and an e-commerce app. You want to associate the payments from the e-commerce app with your NetSuite orders, and to automatically sync the subscription invoices and payments. To do so, add metadata to the payments from the e-commerce system. The connector syncs the Stripe Billing invoices and payments to NetSuite. The e-commerce payments without a Netsuite order or invoice ID won’t sync until the associated order or invoice is imported into your NetSuite account. After the order detail is added, you can remove the denylist metadata and add the NetSuite invoice ID to associate the records.\n\n#### Add records to an allowlist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add metadata to stop the connector from syncing a record to NetSuite until it is granted permission. This is helpful if you have an e-commerce system that uses Stripe to process payments before the invoice is created in NetSuite.\n\nUse an allowlist to control the syncing of a record to NetSuite:\n\n1.  Ask your implementation partner to enable the **Allowlist payments** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add `netsuite_allow_integration: true` to the metadata of a record.\n\nDon’t use an allowlist if either of the following applies:\n\n*   You use Stripe Billing. In most cases, Stripe automatically generates invoices, which can create challenges with making sure invoices are added to the allowlist. Instead, you can use a denylist for payments that aren’t related to Stripe Billing.\n*   You don’t have a fully comprehensive custom system that accounts for every payment in your Stripe account. If a payment in your Stripe account isn’t synced to NetSuite, the deposit automation fails until the payment is synced.\n\n#### Override NetSuite record creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOverride any part of the connector’s record syncing process by adding metadata to Stripe objects to relate them to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing. This prevents the connector from creating that record in NetSuite.\n\nFor example, you have an existing system that creates customers that you want to use alongside the connector. You can pass the NetSuite customer’s internal ID to the Stripe customer to allow the connector to create a link between the two, rather than creating a new customer. You can also use the same process to link Stripe prices to existing NetSuite items.\n\nSee below for the list of [metadata keys](https://docs.stripe.com/connectors/netsuite/custom-payment-application#metadata-keys) to link records and override record creation.\n\n#### Warning\n\nOverriding any part of the connector’s record syncing process that affects accounts receivable might introduce accounting inaccuracies. Our system guarantees that the created records are accurate, but can’t guarantee the accuracy of records created by another system.\n\n### Connector metadata keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector uses metadata keys to link Stripe objects to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing.\n\n| Stripe record | Stripe metadata key | NetSuite record |\n| --- | --- | --- |\n| Customer | `netsuite_customer_id` | Customer |\n| Invoice | `netsuite_invoice_id` | Invoice |\n| Price | `netsuite_service_sale_item_id` | Service Sale Item<br><br>If unspecified, this is the default item type that the connector uses to create new items. |\n| Price | `netsuite_service_resale_item_id` | Service Resale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_non_inventory_sale_item_id` | Non Inventory Sale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_non_inventory_resale_item_id` | Non Inventory Resale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_discount_item_id` | Discount Item<br><br>Only applicable if the line item amount is negative. |\n| Invoice Line Item | `netsuite_discount_item_id` | Discount Item<br><br>Only applicable if the line item amount is negative. |\n| Coupon | `netsuite_discount_item_id` | Discount Item |\n| Charge | `netsuite_customer_payment_id` | Customer Payment |\n| Refund | `netsuite_customer_refund_id` | Customer Refund |\n| Refund | `netsuite_credit_memo_id` | Credit Memo<br><br>Only applicable if the refund’s charge is linked to a Stripe-created invoice. |\n| Dispute (chargeback) | `netsuite_customer_refund_id` | Customer Refund |\n| Payout | `netsuite_deposit_id` | Deposit |\n\n## Invoices for payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your system uses Stripe to process payments and it creates a payment in Stripe that isn’t associated with an invoice, you can choose to allow the connector to create an invoice using information from the charge. You must enable this feature to use it. The connector then applies a customer payment to represent revenue and cash for that transaction.\n\nThis workflow doesn’t support discounts, multiple line items, and other complex integrations.\n\n### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The connector creates a NetSuite invoice for each charge in Stripe and includes the charge description in a memo on the invoice. You can choose to add data from the Stripe metadata fields to the invoice by using field mappings.\n2.  The invoice uses a single line item to represent the revenue earned by the entire Stripe charge. By default, all payments on the Stripe account use the same NetSuite item. You can customize this.\n3.  The connector creates a payment and applies it to the invoice. The payment is automatically reconciled to a bank deposit and fees are recorded.\n4.  Refunds and disputes automatically represent as a credit memo and refund.\n\n### Customize the NetSuite line item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll invoices generated from charges use the same NetSuite item (Stripe Generic Line Item), by default. If charges are used to purchase multiple types of products in your app, you need to record the revenue for the different products against unique NetSuite items. This allows you to have detailed reports in NetSuite based on revenue by item, quantity of items sold, and more.\n\nYou can’t have multiple line items on an invoice from charges. The connector can’t distribute the revenue across separate items from the metadata information on the Stripe charge. If you need to use multiple line items on your NetSuite invoice, you can use a Stripe invoice to sync line-item details.\n\nYou can use metadata or a standard field on the Stripe charge to select a NetSuite item. The connector uses the Stripe metadata or field to search for a field on the NetSuite item. If the connector doesn’t find a match, it uses the Stripe Generic Line Item. Matches aren’t case sensitive.\n\nFor example, you create a Stripe charge and add the `product_name` metadata that includes the name of a NetSuite item. The connector searches for an item in NetSuite that matches the `product_name` in Stripe. If the connector finds a match, it uses that item on the invoice created for that charge.\n\nUse invoices for payments flow:\n\n1.  Ask your implementation partner to enable the **Create invoices for payments** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add the following for the connector to use for matching:\n    *   Add a NetSuite field on the item record\n    *   Add the corresponding Stripe field on the `Charge` object\n\nFor example, you can add a metadata key on a Stripe charge and `itemid` or `displayName` on the NetSuite item.\n\n## Connector add-ons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector provides NetSuite add-ons (bundles) to support common use cases and allow seamless operation with core workflows. You can work with an official implementation partner to customize your integration with these add-ons, which live exclusively in NetSuite.\n\nYou can customize the add-ons by developing new workflows on top of them, or modifying existing workflows to support your business needs. For example, you might want to align the payment and reconciliation processes with your unique NetSuite setup, while still using core connector automations.\n\n### Autopay add-on![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Autopay add-on to automatically bill your customer’s saved payment method and pay open invoices in NetSuite. You can modify the billing details, such as cadence and parameters, to make sure the correct invoices are billed.",
  "title": "Custom payment application | Stripe Documentation",
  "description": "Learn how to customize the way payments are recorded and applied using the Stripe Connector for NetSuite.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/delaware",
  "markdown": "# Collect tax from Delaware | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Delaware.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDelaware doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for Delaware to Stripe and collect taxes from your customers based in Delaware.\n\nHowever Delaware does impose other taxes on businesses, including a gross reciepts tax. Learn more about the taxes that apply in Delaware at the [tax authority](https://revenue.delaware.gov/services-for-the-business-taxpayer/).\n\nIf you’re a business based in Delaware you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-de) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your origin address is in the US and in the same state as your customer’s state, Stripe generally calculates sales tax based on your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax from Delaware | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Delaware.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/district-of-columbia",
  "markdown": "# Collect tax in the District of Columbia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the District of Columbia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in the District of Columbia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers in the District of Columbia who exceed the 100,000 USD gross sales or the 200 transactions number must register for a DC sales tax permit, collect sales tax on orders that ship to DC, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in the District of Columbia at the [tax authority](https://otr.cfo.dc.gov/page/new-business-registration). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in the District of Columbia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-dc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in the District of Columbia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with District of Columbia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to the District of Columbia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in the District of Columbia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the District of Columbia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/idaho",
  "markdown": "# Collect tax in Idaho | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Idaho.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Idaho. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for an Idaho sales tax permit, collect sales tax on sales that ship into Idaho, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: June 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Idaho at the [tax authority](https://tax.idaho.gov/taxes/sales-use/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Idaho, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-id) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Idaho.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Idaho filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Idaho. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Idaho | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Idaho.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/georgia",
  "markdown": "# Collect tax in Georgia (US)\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia (US).\n\nStripe support calculation and collection of sales tax in the US state of Georgia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Georgia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Georgia sales tax permit, collect sales tax on sales that ship into Georgia, and remit that sales tax to the state.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales of tangible personal property delivered electronically or physically (taxable or not)\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Georgia at the [tax authority](https://dor.georgia.gov/taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Georgia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ga) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Georgia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Georgia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Georgia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Georgia (US) | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia (US).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/kansas",
  "markdown": "# Collect tax in Kansas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kansas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kansas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nE-commerce sellers, or marketplaces, who meet their new criteria register for a Kansas sales tax permit and begin collecting sales tax when making sales to buyers in the state of Kansas.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2021\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Kansas at the [tax authority](https://www.ksrevenue.gov/bustaxtypessales.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Kansas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ks) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kansas.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Kansas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Kansas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Kansas | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kansas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/indiana",
  "markdown": "# Collect tax in Indiana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Indiana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Indiana. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed either the gross sales or transaction number threshold must register for an Indiana sales tax permit, collect sales tax on sales that ship to Indiana, and remit that sales tax to the state.\n\nBefore January 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in Indiana. That requirement was removed on March 13, 2024, retroactively.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Indiana at the tax authority:\n\n*   [General information about Sales tax in Indiana](https://www.in.gov/dor/business-tax/sales-tax/)\n*   [How to register](https://www.in.gov/dor/business-tax/)\n\nAfter you’ve registered to collect tax in Indiana, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-in) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Indiana.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Indiana filing requirements. You have the option to report on an annual, fiscal year, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Indiana. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Indiana | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Indiana.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/iowa",
  "markdown": "# Collect tax in Iowa | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Iowa.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Iowa. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales thresholds must register for an Iowa sales tax permit, collect sales tax on sales that ship into Iowa, and remit that sales tax to the state. For those under the threshold, it’s voluntary, but you can register for an Iowa Retailer’s Use Tax (RUT) permit (also voluntary). If you’ve already registered for the RUT and go over the economic threshold, you’ll need to cancel your RUT and register for an Iowa sales tax permit.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Iowa at the [tax authority](https://tax.iowa.gov/iowa-sales-and-use-tax-guide). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Iowa, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ia) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Iowa.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Iowa filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Iowa. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Iowa | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Iowa.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/louisiana",
  "markdown": "# Collect tax in Louisiana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Louisiana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Louisiana. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales threshold must register for a Louisiana sales tax permit, collect sales tax on sales that ship to Louisiana addresses, and remit that sales tax to the state.\n\nPrior to August 1, 2023, remote sellers also had economic nexus if they had 200 or more transactions in Louisiana. That requirement has been removed.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2020\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Louisiana at the tax authority:\n\n*   [General information about Sales and Use tax in Louisiana](https://revenue.louisiana.gov/SalesTax/GeneralSalesAndUseTax)\n*   [How to register](https://revenue.louisiana.gov/EServices/LouisianaFileOnlineLinks)\n\nAfter you’ve registered to collect tax in Louisiana, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-la) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Louisiana.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Louisiana filing requirements. You have the option to report on a quarterly or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Louisiana. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Louisiana | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Louisiana.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/maine",
  "markdown": "# Collect tax in Maine | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Maine.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Maine. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales threshold must register for a Maine sales tax permit, collect sales tax on sales shipped to Maine, and remit that sales tax to the state.\n\nMaine dropped its transaction threshold, effective January 1, 2022.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Maine at the [tax authority](https://www.maine.gov/revenue/taxes/sales-use-service-provider-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Maine, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-me) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Maine.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Maine filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Maine. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Maine | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Maine.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/west-virginia",
  "markdown": "# Collect tax in West Virginia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in West Virginia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in West Virginia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a West Virginia sales tax permit, collect sales tax on sales that ship into West Virginia, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in West Virginia at the [tax authority](https://tax.wv.gov/Business/SalesAndUseTax/Pages/SalesAndUseTax.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in West Virginia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in West Virginia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with West Virginia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to West Virginia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in West Virginia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in West Virginia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/virginia",
  "markdown": "# Collect tax in Virginia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Virginia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Virginia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Virginia sales tax permit, collect sales tax on sales that ship into Virginia, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Virginia at the [tax authority](https://www.tax.virginia.gov/retail-sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Virginia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-va) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Virginia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Virginia and your origin address is also in Virginia, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Virginia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Virginia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Virginia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Virginia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/wyoming",
  "markdown": "# Collect tax in Wyoming | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Wyoming.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Wyoming. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Wyoming sales tax permit, collect sales tax on sales that ship into Wyoming, and remit that sales tax to the state.\n\nBefore July 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in Wyoming.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: February 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Wyoming at the [tax authority](https://revenue.wyo.gov/divisions/excise-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Wyoming, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wy) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Wyoming.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Wyoming filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Wyoming. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Wyoming | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Wyoming.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/wisconsin",
  "markdown": "# Collect tax in Wisconsin | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Wisconsin.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Wisconsin. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Wisconsin sales tax permit, collect sales tax on sales that ship into Wisconsin, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Wisconsin at the [tax authority](https://www.revenue.wi.gov/Pages/SalesAndUse/Home.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Wisconsin, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Wisconsin.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Wisconsin filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Wisconsin. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Wisconsin | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Wisconsin.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/maryland",
  "markdown": "# Collect tax in Maryland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Maryland.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Maryland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Maryland sales tax permit, collect sales tax on sales that ship into Maryland, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Maryland at the [tax authority](https://www.marylandtaxes.gov/business/sales-use/index.php). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Maryland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-md) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Maryland.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Maryland filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Maryland. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Maryland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Maryland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/massachusetts",
  "markdown": "# Collect tax in Massachusetts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Massachusetts.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Massachusetts. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales threshold must register for a Massachusetts sales tax permit, collect sales tax on sales that ship to Massachusetts, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Massachusetts at the [tax authority](https://www.mass.gov/guides/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Massachusetts, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ma) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Massachusetts.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Massachusetts filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Massachusetts. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Massachusetts | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Massachusetts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/michigan",
  "markdown": "# Collect tax in Michigan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Michigan.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Michigan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 100,000 USD threshold and the transaction number threshold must register for a Michigan sales tax permit, collect sales tax on sales that ship to Michigan, and remit that sales tax to the state.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Michigan at the [tax authority](https://www.michigan.gov/taxes/business-taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Michigan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Michigan.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Michigan filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Michigan. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Michigan | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Michigan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/minnesota",
  "markdown": "# Collect tax in Minnesota | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Minnesota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Minnesota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed either the 100,000 USD threshold or the transaction number threshold must register for a Minnesota sales tax permit, collect sales tax on sales that ship to Minnesota, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Minnesota at the [tax authority](https://www.revenue.state.mn.us/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Minnesota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Minnesota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Minnesota filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Minnesota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Minnesota | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Minnesota.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/mississippi",
  "markdown": "# Collect tax in Mississippi | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Mississippi.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Mississippi. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 250,000 USD threshold must register for a Mississippi sales tax permit, collect sales tax on sales that ship to Mississippi, and remit that sales tax to the state.\n\n**Threshold**: 250,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: December 1, 2017\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Mississippi at the [tax authority](https://www.dor.ms.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Mississippi, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ms) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Mississippi.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Mississippi and your origin address is also in Mississippi, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Mississippi filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Mississippi. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Mississippi | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Mississippi.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/missouri",
  "markdown": "# Collect tax in Missouri | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Missouri.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Missouri. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with at least 100,000 USD sales must register for a Missouri sales tax permit, collect sales tax on sales that ship to Missouri, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous 12 month period\n\n**Included transactions**: Gross receipts of tangible personal property\n\n**Effective date**: January 1, 2023\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Missouri at the [tax authority](https://dor.mo.gov/taxation/business/tax-types/sales-use/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Missouri, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mo) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Missouri.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Missouri and your origin address is also in Missouri, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Missouri filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Missouri. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Missouri | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Missouri.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/montana",
  "markdown": "# Collect tax from Montana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Montana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMontana doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for Montana to Stripe and collect taxes from your customers based in Montana.\n\nHowever Montana does impose other taxes on businesses, including corporate income tax and a local resort tax. Learn more about the taxes that apply in Montana at the [tax authority](https://mtrevenue.gov/taxes/).\n\nIf you’re a business based in Montana you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax from Montana | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Montana.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/nevada",
  "markdown": "# Collect tax in Nevada | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nevada.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nevada. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Nevada sales tax permit, collect sales tax on sales that ship into Nevada, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Nevada at the [tax authority](https://www.nvsilverflume.gov/home). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Nevada, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nevada.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Nevada filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Nevada. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Nevada | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nevada.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-hampshire",
  "markdown": "# Collect tax from New Hampshire\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from New Hampshire.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew Hampshire doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for New Hampshire to Stripe and collect taxes from your customers based in New Hampshire.\n\nHowever New Hampshire does impose other taxes on businesses, including a business profits tax. Learn more about the taxes that apply in New Hampshire at the [tax authority](https://www.revenue.nh.gov/assistance/tax-overview.htm).\n\nIf you’re a business based in New Hampshire you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax from New Hampshire | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from New Hampshire.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/nebraska",
  "markdown": "# Collect tax in Nebraska | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nebraska.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nebraska. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the sales threshold or transaction number must register for a Nebraska sales tax permit, collect sales tax on sales that ship into Nebraska, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Nebraska at the [tax authority](https://revenue.nebraska.gov/businesses/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Nebraska, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ne) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nebraska.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Nebraska filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Nebraska. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Nebraska | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nebraska.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-mexico",
  "markdown": "# Collect tax in New Mexico\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New Mexico.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Mexico. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers and marketplace facilitators must register for a New Mexico gross receipts tax permit, collect, and remit gross receipts tax to the state if they meet the sales thresholds.\n\n**Threshold**: 100,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Taxable sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New Mexico at the [tax authority](https://www.tax.newmexico.gov/businesses/gross-receipts-overview/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New Mexico, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nm) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Mexico.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New Mexico filing requirements. You have the option to report on a semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New Mexico. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in New Mexico | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Mexico.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-jersey",
  "markdown": "# Collect tax in New Jersey\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Jersey. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a New Jersey sales tax permit, collect sales tax on sales that ship into New Jersey, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New Jersey at the [tax authority](https://business.nj.gov/pages/register-for-taxes). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New Jersey, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nj) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Jersey.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New Jersey filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New Jersey. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in New Jersey | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Jersey.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/ohio",
  "markdown": "# Collect tax in Ohio | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Ohio.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Ohio. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for an Ohio sales tax permit, collect sales tax on sales that ship into Ohio, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: August 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Ohio at the [tax authority](https://tax.ohio.gov/sales_and_use.aspx) (this link is accessible with the US or with a VPN). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Ohio, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-oh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Ohio.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Ohio and your origin address is also in Ohio, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Ohio filing requirements. You have the option to report on an annual, semiannual, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Ohio. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Ohio | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Ohio.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-york",
  "markdown": "# Collect tax in New York\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New York.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New York. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet both the sales and transaction number thresholds must register for a New York sales tax permit, collect sales tax on sales that ship into New York, and remit that sales tax to the state. The increase from the prior threshold of 300,000 USD for businesses that have no physical presence in New York is effective retroactively to June 21, 2018. The increase for marketplace providers is effective retroactively to June 1, 2019.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 500,000 USD and more than 100 transactions\n\n**Period**: Last four quarters\n\n**Included transactions**: Gross receipts from sales of tangible personal property\n\n**Effective date**: July 21, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New York at the [tax authority](https://www.tax.ny.gov/bus/st/stidx.htm). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New York, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ny) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New York.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New York filing requirements. You have the option to report on an annual, quarterly, or monthly basis with each new year starting in March.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New York. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in New York | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New York.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/north-dakota",
  "markdown": "# Collect tax in North Dakota\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in North Dakota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in North Dakota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the sales threshold must register for a North Dakota sales tax permit, collect sales tax on sales that ship into North Dakota, and remit that sales tax to the state.\n\nNorth Dakota law includes an exception for small sellers which requires sales tax collection by remote sellers only if their taxable sales into the state exceed 100,000 USD in the current or previous calendar year.\n\nPrior to July 1, 2019, North Dakota’s small seller exception also included a sales threshold of 200 or more separate transactions in the prior or current year. The transactions threshold was repealed, effective July 1, 2019. Remote sellers who only met the transactions threshold in 2018 or 2019 must continue to collect North Dakota sales tax through June 30, 2019. After June 30, 2019, those remote sellers can cancel their North Dakota sales and use tax permit and discontinue collecting North Dakota sales tax.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in North Dakota at the [tax authority](https://www.tax.nd.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in North Dakota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nd) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in North Dakota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with North Dakota filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to North Dakota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in North Dakota | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in North Dakota.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/north-carolina",
  "markdown": "# Collect tax in North Carolina\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in North Carolina.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in North Carolina. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a North Carolina sales tax permit, collect sales tax on sales that ship into North Carolina, and remit that sales tax to the state.\n\nBefore July 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in North Carolina.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in North Carolina at the [tax authority](https://www.ncdor.gov/taxes-forms/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in North Carolina, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in North Carolina.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with North Carolina filing requirements. You have the option to report on an quarterly or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to North Carolina. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in North Carolina | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in North Carolina.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/oklahoma",
  "markdown": "# Collect tax in Oklahoma | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Oklahoma.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Oklahoma. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who meet the threshold must do one of the following on or before June 1 of each calendar year:\n\n1.  Register for an Oklahoma sales tax permit and collect sales tax on Oklahoma sales\n2.  Comply with Oklahoma’s notice and reporting requirements\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: November 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Oklahoma at the [tax authority](https://oklahoma.gov/tax/businesses/sales-use-tax.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Oklahoma, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ok) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Oklahoma.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Oklahoma filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Oklahoma. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Oklahoma | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Oklahoma.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/oregon",
  "markdown": "# Collect tax from Oregon | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Oregon.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOregon doesn’t have a general state or sales tax. This means you won’t see an option to add your registration for Oregon to Stripe and collect taxes from your customers based in Oregon.\n\nHowever Oregon does impose other taxes on businesses, including corporate income tax. Learn more about the taxes that apply in Oregon at the [tax authority](https://www.oregon.gov/dor/programs/businesses/Pages/default.aspx).\n\nIf you’re a business based in Oregon you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-or) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax from Oregon | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Oregon.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/pennsylvania",
  "markdown": "# Collect tax in Pennsylvania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Pennsylvania.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Pennsylvania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who meet the nexus threshold must register for a Pennsylvania sales tax permit, collect sales tax on sales that ship into Pennsylvania, and remit that sales tax to the state.\n\nThose who don’t meet the economic threshold must make an election by March 1 of every year and do one of two things:\n\n*   Register for a Pennsylvania sales tax permit, collect sales tax on sales that ship into Pennsylvania, and remit that sales tax to the state.\n*   Comply with the state’s notice and reporting requirements.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Pennsylvania at the [tax authority](https://www.revenue.pa.gov/TaxTypes/SUT/Pages/default.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Pennsylvania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-pa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Pennsylvania.\n\nCustomers in the city of Philadelphia or Allegheny county owe use tax on purchases from remote sellers outside those locations. If you are a remote seller you can voluntarily collect and remit these local taxes on their behalf. You’ll be able to indicate whether you want to collect these local taxes as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Pennsylvania and your origin address is also in Pennsylvania, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\nSellers based in Philadelphia city or Allengheny county will have the local tax calculated automatically. If you are a remote seller and selected the local taxes for Philadelphia city and Allengheny county in Stripe then we will calculate and collect that additional tax. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Pennsylvania filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   You’ll only see amounts under Allegheny county and Philadelphia city sections if you chose to voluntarily collect local taxes or have an origin address in these jurisdictions.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Pennsylvania. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Pennsylvania | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Pennsylvania.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/south-dakota",
  "markdown": "# Collect tax in South Dakota\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Dakota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Dakota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales threshold must register for a South Dakota sales tax permit, collect sales tax on sales that ship into South Dakota, and remit that sales tax to the state.\n\nPrior to July 1, 2023, remote sellers could also have economic nexus if they had 200 or more transactions in the state. South Dakota dropped its transaction threshold, effective July 1, 2023.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in South Dakota at the [tax authority](https://dor.sd.gov/businesses/taxes/sales-use-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in South Dakota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-sd) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Dakota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with South Dakota filing requirements. You have the option to report on an annual, semiannual, quarterly, bimonthly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to South Dakota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in South Dakota | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Dakota.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/rhode-island",
  "markdown": "# Collect tax in Rhode Island\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Rhode Island.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Rhode Island. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Rhode Island sales tax permit, collect sales tax on sales that ship into Rhode Island, and remit that sales tax to the state.\n\nIt’s worth noting that Rhode Island isn’t repealing, nor eliminating the use tax notice and reporting requirements for non-collecting sellers. Remote sellers who meet the thresholds no longer have the option to comply with the existing use tax notice and report; however, remote sellers who don’t satisfy the economic nexus threshold have the choice to register to collect sales tax in Rhode Island or comply with the notice and report for non-collecting sellers.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Rhode Island at the [tax authority](https://tax.ri.gov/tax-sections/sales-excise-taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Rhode Island, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ri) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Rhode Island.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Rhode Island filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Rhode Island. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Rhode Island | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Rhode Island.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/south-carolina",
  "markdown": "# Collect tax in South Carolina\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Carolina.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Carolina. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a South Carolina sales tax permit, collect sales tax on sales that ship into South Carolina, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in South Carolina at the [tax authority](https://dor.sc.gov/tax/sales). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in South Carolina, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-sc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Carolina.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with South Carolina filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to South Carolina. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in South Carolina | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Carolina.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/texas",
  "markdown": "# Collect tax in Texas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Texas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Texas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers with Texas revenues above 500,000 USD must register for a Texas sales tax permit, collect sales tax on sales that ship to Texas, and remit the sales tax to the state.\n\n**Threshold**: 500,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Texas at the [tax authority](https://comptroller.texas.gov/taxes/sales/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRemote sellers with no physical presence in Texas can register for the [Single Local Use Tax rate](https://comptroller.texas.gov/taxes/sales/remote-sellers.php). This election (the process of making your choice known to the state) allows you to collect a single local use tax rate in the state. You can collect this tax rate after notifying the [Texas Comptroller](https://comptroller.texas.gov/taxes/sales/forms/index.php).\n\nAfter you’ve registered to collect tax in Texas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-tx) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Texas. You’ll be able to indicate which tax election you made in Texas as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Texas and your origin address is also in Texas, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\nStripe calculates the appropriate tax rate for your registration. If you selected the Single Local Use Tax rate in Stripe then we will calculate and collect the simplified rate. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Texas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   If you chose to collect the Single Local Use Tax, you’ll see ‘Single Local Tax’ on your report instead of any local jurisdictions.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Texas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Texas | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Texas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/utah",
  "markdown": "# Collect tax in Utah | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Utah.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Utah. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAccording to the state, sellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Utah sales tax permit, collect sales tax on sales that ship into Utah, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Utah at the [tax authority](https://tax.utah.gov/sales). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Utah, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ut) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Utah.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Utah and your origin address is also in Utah, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Utah filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Utah. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Utah | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Utah.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/capture-later",
  "markdown": "# Place a hold on a payment method\n\n## Separate payment authorization and capture to create a charge now, but capture funds later.\n\nWhen you create a payment, you can place a hold on an eligible payment method to reserve funds that you can capture later. For example, hotels often authorize a payment in full before a guest arrives, then capture the money when the guest checks out.\n\nAuthorizing a payment guarantees the amount by holding it on the customer’s payment method. If you’re using the API, the [payment\\_method\\_details.card.capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) attribute on the charge indicates when the authorization expires.\n\nYou need to capture the funds before the authorization expires. If the authorization expires before you capture the funds, the funds are released and the payment status changes to `canceled`. [Learn more about statuses for asynchronous payments](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\n#### Note\n\nAs of April 14, 2024, Visa has shortened the authorization window for online [Merchant-Initiated Transactions](https://docs.stripe.com/payments/cits-and-mits) from 7 days to 5 days, and they have lengthened the authorization window for in-person (Terminal) transactions from 2 days to 5 days.\n\n\\* The exact authorization window is 4 days and 18 hours, to allow time for clearing processes.\n\n#### Authorization validity windows for card-present transactions (Terminal)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Card brand | Authorization validity window |\n| --- | --- |\n| **Visa** | 5 days\\* |\n| **Mastercard** | 2 days |\n| **American Express** | 2 days |\n| **Discover** | 2 days |\n\n\\* The exact authorization window is 4 days and 18 hours, to allow time for clearing processes.\n\nBefore implementing, understand the following limitations for authorizing and capturing separately.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#use-dashboard)\n\nYou can authorize a payment and capture funds separately without writing code.\n\n1.  In the Dashboard, [create a new payment](https://dashboard.stripe.com/test/payments/new). Select **One-time**.\n2.  When you enter or select the payment method, select **More options** then **Capture funds later**.\n\nThe payment appears in your [payments page](https://dashboard.stripe.com/test/payments) as **Uncaptured**.\n\nTo capture the funds, go to the payment details page and click **Capture**.\n\n[](#authorize-only)\n\nTo indicate that you want separate authorization and capture, specify [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. This parameter instructs Stripe to authorize the amount but not capture it on the customer’s payment method.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d capture_method=manual`\n\nWith the above approach, you tell Stripe that you can only use “capture after” for a PaymentIntent with eligible payment methods. For example, you can’t accept card payments and Giropay (which doesn’t support capture after) for a single PaymentIntent. To accept payment methods that might not all support capture after, you can configure capture-after-per-payment-method by configuring `capture_method=manual` on the `payment_method_options[<payment_method_type>]` object. For example, by configuring `payment_method_options[card][capture_method]=manual`, you’re placing only card payments on hold. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d \"payment_method_options[card][capture_method]\"=manual`\n\nAlternatively, you can list `card` and `giropay` using [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) like in the example below.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=giropay \\  -d \"payment_method_options[card][capture_method]\"=manual`\n\nBefore continuing to capture, attach a payment method with card details to the PaymentIntent, and authorize the card by confirming the PaymentIntent. You can do this by setting the `payment_method` and `confirm` fields on the PaymentIntent.\n\n#### Extended Authorizations\n\n[](#capture-funds)\n\nAfter the payment method is authorized, the PaymentIntent [status](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) transitions to `requires_capture`. To capture the authorized funds, make a PaymentIntent [capture](https://docs.stripe.com/api/payment_intents/capture) request. This captures the total authorized amount by default. To capture less or (for certain online card payments) more than the initial amount, pass the [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) option. A partial capture automatically releases the remaining amount. If attempting to capture more than the initial amount for an online card payment, refer to the [overcapture documentation](https://docs.stripe.com/payments/overcapture).\n\nThe following example demonstrates how to capture 7.50 USD of the authorized 10.99 USD payment:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_ANipwO3zNfjeWODtRPIg/capture \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount_to_capture=750`\n\nWhile some card payments are eligible for [multicapture](https://docs.stripe.com/payments/multicapture), you can only perform one capture on an authorized payment for most payments. If you partially capture a payment, you can’t perform another capture for the difference. (Instead, consider [saving the customer’s payment method details for later](https://docs.stripe.com/payments/save-during-payment#save-payment-details-for-future-use) and creating future payments as needed.)\n\nCard statements from some issuers and interfaces from payment methods don’t always distinguish between authorizations and captured (settled) payments, which can sometimes confuse customers.\n\nAdditionally, when a customer completes the payment process on a PaymentIntent with manual capture, it triggers the `payment_intent.amount_capturable_updated` event. You can inspect the PaymentIntent’s [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) property to see the total amount that you can capture from the PaymentIntent.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Separate authorization and capture with Checkout](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#auth-and-capture)\n*   [Place an extended hold on an online card payment](https://docs.stripe.com/payments/extended-authorization)",
  "title": "Place a hold on a payment method | Stripe Documentation",
  "description": "Separate payment authorization and capture to create a charge now, but capture funds later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customers/update",
  "markdown": "# Update a customer | Stripe API Reference\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [List all customers](https://docs.stripe.com/api/customers/list)\n\nReturns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\n\n### Parameters\n\n*   A case-sensitive filter on the list based on the customer’s `email` field. The value must be a string.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers, starting after customer `starting_after`. Passing an optional `email` will result in filtering to customers with only that exact email address. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NffrFeUfNV2Hib\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680893993,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": \"jennyrosen@example.com\",      \"invoice_prefix\": \"0759376C\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": null,        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a customer](https://docs.stripe.com/api/customers/delete)\n\nPermanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the customer ID does not exist, this call raises [an error](#errors).\n\nUnlike other objects, deleted customers can still be retrieved through the API in order to be able to track their history. Deleting customers removes all credit card details and prevents any further operations to be performed (such as adding a new subscription).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"deleted\": true}\n```\n\n## [Search customers](https://docs.stripe.com/api/customers/search)\n\nSearch for customers you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/customers/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"name:'Jane Doe' AND metadata['foo']:'bar'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/customers/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NeGfPRiPKxeBi1\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680569616,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": null,      \"invoice_prefix\": \"47D37F8F\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": \"pm_1Msy7wLkdIwHu7ixsxmFvcz7\",        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {        \"foo\": \"bar\"      },      \"name\": \"Jane Doe\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```",
  "title": "Update a customer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_ids/object",
  "markdown": "# The Tax ID object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Two-letter ISO code representing the country of the tax ID.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer.\n    \n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ad_nrt` |\n    | `ae_trn` |\n    | `ar_cuit` |\n    | `au_abn` |\n    | `au_arn` |\n    | `bg_uic` |\n    | `bh_vat` |\n    | `bo_tin` |\n    | `br_cnpj` |\n    | `br_cpf` |\n    | Show 64 more |\n    \n*   Value of the tax ID.\n    \n\n### More attributes\n\n*   #### \n    \n    verificationnullable object\n    \n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Create a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_create)\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```",
  "title": "The Tax ID object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/create",
  "markdown": "# Create an invoice | Stripe API Reference\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Retrieve an invoice](https://docs.stripe.com/api/invoices/retrieve)\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
  "title": "Create an invoice | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/vermont",
  "markdown": "# Collect tax in Vermont | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Vermont.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Vermont. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Vermont sales tax permit, collect sales tax on sales that ship into Vermont, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Vermont at the [tax authority](https://tax.vermont.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Vermont, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-vt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Vermont.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Vermont filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Vermont. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Vermont | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Vermont.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/object",
  "markdown": "# The Invoice object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.\n    \n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the latest charge generated for this invoice, if any.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    Attempt payment using the default source attached to the customer.\n    \n    `send_invoice`\n    \n    Email payment instructions to the customer.\n    \n\n*   The ID of the customer who will be billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   #### \n    \n    hosted\\_invoice\\_urlnullable string\n    \n    The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.\n    \n*   The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.\n    \n*   End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    The subscription that this invoice was prepared for, if any.\n    \n*   Total after discounts and taxes.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_countrynullable string\n    \n*   #### \n    \n    account\\_namenullable string\n    \n*   #### \n    \n    account\\_tax\\_idsnullable array of stringsExpandable\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    billing\\_reasonnullable enum\n    \n\n*   #### \n    \n    custom\\_fieldsnullable array of objects\n    \n*   #### \n    \n    customer\\_addressnullable object\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n*   #### \n    \n    customer\\_namenullable string\n    \n*   #### \n    \n    customer\\_phonenullable string\n    \n*   #### \n    \n    customer\\_shippingnullable object\n    \n*   #### \n    \n    customer\\_tax\\_exemptnullable enum\n    \n*   #### \n    \n    customer\\_tax\\_idsnullable array of objects\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    due\\_datenullable timestamp\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n*   #### \n    \n    ending\\_balancenullable integer\n    \n\n*   #### \n    \n    from\\_invoicenullable object\n    \n*   #### \n    \n    invoice\\_pdfnullable string\n    \n\n*   #### \n    \n    last\\_finalization\\_errornullable object\n    \n*   #### \n    \n    latest\\_revisionnullable stringExpandable\n    \n\n*   #### \n    \n    next\\_payment\\_attemptnullable timestamp\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    post\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    pre\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    quotenullable stringExpandable\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n\n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n\n*   #### \n    \n    statement\\_descriptornullable string\n    \n\n*   #### \n    \n    subscription\\_detailsnullable object\n    \n*   #### \n    \n    subscription\\_proration\\_datenullable integer\n    \n\n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    threshold\\_reasonnullable object\n    \n*   #### \n    \n    total\\_discount\\_amountsnullable array of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    webhooks\\_delivered\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    `send_invoice`\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    `send_invoice`\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
  "title": "The Invoice object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea",
  "markdown": "# Collect tax in South Korea\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Korea.\n\nIn South Korea, Stripe only supports collecting [VAT](https://www.nts.go.kr/english/na/ntt/selectNttList.do?mi=11210&bbsId=30699) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Korea. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in South Korea must register for VAT purposes as from the first sale. There are no registration thresholds for non-resident service providers. Sales to business customers in South Korea do not trigger any tax registration obligations as remote sellers are not required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in South Korea to collect this tax on Stripe.\n\nFind more information on how to register for VAT in South Korea on the [government website](https://www.nts.go.kr/english/main.do).\n\nAfter you’ve registered to collect tax in South Korea, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=kr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Korea.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in South Korea. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in South Korea, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to South Korea. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in South Korea | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Korea.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states",
  "markdown": "# Collect tax in the United States\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the US.\n\nBusinesses selling goods and services to customers in the United States (US) might need to collect sales tax. That’s the case even if your business isn’t established (based) in the US. Tax rates and rules vary by state.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the state. States can choose which level and type of activity in the state means a business needs to collect tax there. This is called _nexus_. A business can have nexus in a state if they have:\n\n*   Physical activity, such as having remote employees based there or storing inventory in a warehouse.\n*   Economic activity, such as an amount or total value of transactions within a time period.\n\nIf you have nexus in a state, you need to register for a license to collect tax on sales to customers in that state.\n\nTo understand the economic nexus thresholds in each state use the [links above](https://docs.stripe.com/tax/supported-countries/united-states#us-states). Stripe only monitors if you have reached an economic nexus tax threshold for sales outside of the state your business is based in. Learn more about [economic nexus](https://stripe.com/guides/introduction-to-us-sales-tax-and-economic-nexus).\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach state has its own sales tax authority. You need to individually register to collect sales tax in each state where you have met the registration requirements. Start by going to the state tax authority website. If you need help finding the right links to register for tax, select a state from the [list above](https://docs.stripe.com/tax/supported-countries/united-states#us-states).\n\nLearn more about [the sales tax registration process in the United States](https://stripe.com/guides/sales-tax-registration-process-us).\n\n### Streamlined Sales and Use Tax Agreement (SSUTA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Streamlined Sales and Use Tax Agreement (SSUTA) was created by a coalition of states to help businesses manage their sales and use tax obligations across the United States. Twenty-four US states are members of the SSUTA agreement. However, individual states can still decide which products and services are taxable in their state. You can learn more and register for sales and use tax permits in all SSUTA member states on the [streamlined sales tax registration website](https://www.streamlinedsalestax.org/).\n\nAfter you’ve registered with a state, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhat you sell and where you sell impacts how tax is calculated on your sales. Different rules apply when your customer is located in the same state as your business or located somewhere else.\n\nStripe calculates tax on a transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\nAs part of the tax calculation process, Stripe collects addresses for both your business and customers. We verify these addresses, convert them into geographical coordinates, and match them to the relevant tax jurisdiction boundaries. We then use these jurisdictions as input for the tax calculation process.\n\n### Sales to a customer located outside the state your business is based in![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and is different from the state your customer is located in, Stripe always calculates tax based on your customer’s location.\n\n### Sales to a customer located within the same state as your business![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and in the same state as your customer’s state, Stripe generally calculates sales tax based on your customer’s location.\n\nHowever some states use your origin address instead of the customers location depending on the type of product or service you sell:\n\n*   In Arizona, Illinois, Missouri,Pennsylvania, Tennessee, and Virginia, Stripe applies tax based on your business location.\n*   In California, state, county, and city taxes are based on the origin address, while district taxes are based on the customer’s location.\n*   In Mississippi, Ohio, Texas, and Utah, Stripe applies tax based on the origin address for physical and digital goods. Sales of services are taxed at the destination address.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes in the US. Stripe doesn’t file taxes on your behalf. You can find where to file your return for each state in [our tax returns guide](https://stripe.com/guides/how-to-file-sales-tax-us).\n\nFor automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA marketplace facilitator is an entity that contracts with third parties to promote their sales of property, digital goods and services by performing various functions to initiate and complete transactions. In the US, marketplace facilitator laws now exist in every state with a sales tax. These laws generally require the marketplace facilitator to collect and remit sales tax on behalf of the third-party sellers conducting business on the marketplace. As a marketplace facilitator, your compliance obligations, from registration requirements to reporting and filing, are determined by the specific laws of each state.",
  "title": "Collect tax in the United States | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the US.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/canada",
  "markdown": "# Collect tax in Canada | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Canada.\n\nThe Canadian tax system consists of a combination of federal and provincial taxes. The goods and services tax (GST) applies nationally. The different provinces handle taxes in a variety of ways. Learn more in our [guide to tax in Canada](https://stripe.com/guides/tax-registration-process-canada).\n\nProvincial sales taxes in New Brunswick, Newfoundland and Labrador, Nova Scotia, Ontario, and Prince Edward Island are combined with the GST to implement the harmonized sales tax (HST), which operates in the same way as the GST.\n\nSeparate taxes are collected in:\n\n*   British Columbia—provincial sales tax (PST)\n*   Manitoba—retail sales tax (RST)\n*   Quebec—Quebec sales tax (QST)\n*   Saskatchewan—provincial sales tax (PST)\n\nAlberta, Northwest Territories, Nunavut, and Yukon don’t apply any provincial sales tax.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Canadian federal government and the four provinces that levy a separate provincial sales tax define their own tax registration thresholds and procedures.\n\n*   If you’re a non-Canadian business, Stripe monitors your tax registration thresholds separately for the federal level and every province with separate provincial taxes.\n*   If your business is based in Canada, Stripe monitors your tax registration thresholds for provinces with separate provincial taxes where your business isn’t established.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Canada. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAfter you’ve registered to collect tax in a province or with the government, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations=location=ca) in the Dashboard to start collecting tax on your transactions in that location.\n\n### Federal tax threshold![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanada applies different regulations to remote businesses selling to Canadian consumers, depending on the product type and origin.\n\n*   Digital products or services qualify for simplified GST/HST registration when sales exceed 30,000 CAD over any 12-month period.\n*   Goods shipped from a warehouse in Canada to Canadian consumers require normal GST/HST registration when sales exceed 30,000 CAD over any 12-month period.\n\n**Threshold**: 30,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital products and services to Canadian individuals, and sales of goods shipped from a warehouse in Canada to Canadian individuals.\n\nFind more information on how to register for GST/HST on the [federal government website](https://www.canada.ca/en/revenue-agency/services/tax/businesses/topics/gst-hst-businesses.html).\n\nIf a remote business sells digital services or goods into Canada exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for GST/HST. These sales don’t count toward the seller’s registration threshold.\n\n### British Columbia![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses based outside British Columbia (BC) must register to collect PST if their taxable sales in BC exceed 10,000 CAD in the past 12 months or are expected to exceed that amount in the next 12 months.\n\n**Threshold**: 10,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for PST on the [British Columbia government website](https://www2.gov.bc.ca/gov/content/taxes/sales-taxes/pst).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for PST. These sales don’t count toward the seller’s registration threshold.\n\n### Manitoba![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses located outside Manitoba that perform taxable sales of goods and services in Manitoba must register to collect RST. Manitoba doesn’t apply any monetary registration thresholds to remote sellers.\n\n**Threshold**: 1 transaction\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for RST on the [Manitoba government website](https://www.gov.mb.ca/finance/taxation/forms.html#retail).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for RST. These sales don’t count towards the seller’s registration threshold.\n\n### Quebec![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRemote businesses selling digital products or services to individuals in Quebec must register under the specified QST regime if their sales exceed 30,000 CAD in any 12-month period. Remote businesses selling goods to individuals in Quebec must register under the general QST regime if their sales exceed 30,000 CAD in any 12-month period—this applies to goods shipped from a warehouse in Quebec or from outside Quebec by means other than mail or courier. The specified QST regime doesn’t apply in this situation.\n\n**Threshold**: 30,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital products and services and certain sales of goods to individuals in Quebec.\n\nFind more information on how to register for QST on the [Quebec government website](https://www.revenuquebec.ca/en/businesses/consumption-taxes/gsthst-and-qst/).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for QST. These sales don’t count toward the seller’s registration threshold.\n\n### Saskatchewan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses located outside Saskatchewan that sell taxable goods and services in Saskatchewan must register to collect PST. Saskatchewan doesn’t apply any monetary registration thresholds to remote sellers.\n\n**Threshold**: 1 transaction\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for PST on the [Saskatchewan government website](https://www.saskatchewan.ca/business/taxes-licensing-and-reporting/provincial-taxes-policies-and-bulletins/provincial-sales-tax).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for PST. These sales don’t count toward the seller’s registration threshold.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe determines whether federal tax (GST or HST), provincial tax (PST, QST, or RST) or a combination of both types of taxes apply to the specific transaction.\n\nSales of goods and services within Canada are generally taxed based on the customer’s location. Goods shipped from Canada to customers abroad are zero-rated exports for Canadian tax purposes. While these transactions might incur taxes and customs duties in the destination country, Stripe doesn’t calculate them. Remote sellers don’t need to collect GST or HST on goods sold into Canada from abroad, but they must collect tax if the goods are shipped from a warehouse in Canada.\n\nSales of services provided from Canada to customers in other countries are generally not taxable in Canada but the tax of the customer country might apply. Sales of services provided to Canadian customers by sellers established in other countries are generally taxable in Canada:\n\n*   Remote sellers must collect GST/HST for sales to individuals, but not for sales to business customers who provide their GST/HST registration number.\n*   Remote sellers must collect QST on sales to individuals in Quebec, but not on sales to business customers who provide their QST registration number.\n*   Remote sellers must collect provincial sales taxes for sales in Manitoba, Saskatchewan, and British Columbia regardless of individual or business customers. To treat sales to customers in these provinces as exempt from provincial sales taxes, set the [customer tax status](https://docs.stripe.com/tax/zero-tax) to `exempt`.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about the different types of reports.\n\nYou’re responsible for filing and remitting your taxes in Canada. Stripe doesn’t file taxes on your behalf.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanada defines “digital platform operators” as marketplace operators that might have tax collection obligations because they control a transaction between a seller and a buyer (for example, by handling payments and passing them to the seller). This definition excludes businesses solely listing goods or processing payments. Digital platform operators must collect GST/HST on:\n\n*   Sales of digital products and services to Canadian individuals by remote sellers not registered under the normal GST/HST regime.\n*   Sales of goods by non-registered sellers to Canadian customers if the goods are in Canada at the time of sale.\n*   Provision of short-term accommodation if the property owner isn’t GST/HST registered. This typically includes renting residential units for less than one month. Stripe Tax doesn’t support accommodation services.\n\nCanadian provinces with separate provincial taxes have similar rules on platform tax collection obligations.",
  "title": "Collect tax in Canada | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Canada.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/slovakia",
  "markdown": "# Collect tax in Slovakia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Slovakia.\n\nSlovakia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Slovakia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Slovakia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Slovakia.\n\n*   [Domestic VAT registration](https://www.financnasprava.sk/en/businesses/taxes-businesses#ZahranicnaOsobaDPH)\n*   [One-Stop Shop registration schemes](https://www.financnasprava.sk/en/businesses/taxes-businesses/value-added-tax/registration-oss)\n\nAfter you’ve registered to collect tax in Slovakia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Slovakia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSlovakia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Slovakia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Slovakia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Slovakia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/india-emandate-guide",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/customer_balance_transactions/object",
  "markdown": "# The Customer Balance Transaction object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount of the transaction. A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s `balance`.\n    \n\n*   The ID of the customer the transaction belongs to.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s `balance` after the transaction was applied. A negative value decreases the amount due on the customer’s next invoice. A positive value increases the amount due on the customer’s next invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://docs.stripe.com/billing/customer/balance#types) to learn more about transaction types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment`<br><br>An explicitly created adjustment transaction to debit or credit the credit balance. |\n    | `applied_to_invoice`<br><br>Traces the application of credit against a linked Invoice. |\n    | `credit_note`<br><br>Traces the creation of credit to a Credit Note and its associated Invoice. |\n    | `initial`<br><br>The starting value of the customer’s credit balance. |\n    | `invoice_overpaid`<br><br>Credits to the credit balance when an invoice receives payments exceeding the amount due. |\n    | `invoice_too_large`<br><br>Debits to the credit balance when the amount due on an invoice is greater than Stripe’s maximum chargeable amount and the customer does not have a cash balance. |\n    | `invoice_too_small`<br><br>Debits to the credit balance when the amount due on an invoice is less than Stripe’s minimum chargeable amount and the customer does not have a cash balance. |\n    | `migration`<br><br>Funds migrated from the legacy customer credit balance. |\n    | `unapplied_from_invoice`<br><br>Traces the reversal of an applied credit balance from a linked Invoice. Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n    | `unspent_receiver_credit`<br><br>Unspent funds in receiver Sources that got automatically charged and credited to the balance. |\n    | Show 1 more |\n    \n\n### More attributes\n\n*   #### \n    \n    credit\\_notenullable stringExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\nThe Customer Balance Transaction object\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Create a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/create)\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```",
  "title": "The Customer Balance Transaction object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/object",
  "markdown": "# The Quote object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    A list of items the customer is being quoted for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of stringsExpandable\n    \n*   #### \n    \n    descriptionnullable string\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n\n*   #### \n    \n    from\\_quotenullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n\n*   #### \n    \n    subscription\\_schedulenullable stringExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Create a quote](https://docs.stripe.com/api/quotes/create)\n\nA quote models prices and services for a customer. Default options for `header`, `description`, `footer`, and `expires_at` can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcMfB0SSFHINCV \\  -d \"line_items[0][price]\"=price_1Mr7wULkdIwHu7ixhPkIEN2w \\  -d \"line_items[0][quantity]\"=2\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Update a quote](https://docs.stripe.com/api/quotes/update)\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```\n\n## [Retrieve a quote's upfront line items](https://docs.stripe.com/api/quotes/line_items/upfront/list)\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```",
  "title": "The Quote object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/upgrades/manage-payment-methods",
  "markdown": "# Manage payment methods in the Dashboard by default\n\nIf your integration uses Card Element or individual payment method Elements, we recommend migrating to the [Payment Element](https://docs.stripe.com/payments/payment-element/migration). This single, unified integration allows you to accept over 25 different payment methods.\n\n### Create the PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this version of the API, specifying the [automatic\\_payment\\_methods.enabled](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods-enabled) parameter is optional. If you don’t specify it, Stripe assumes a value of `true`, which enables its functionality by default.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd`\n\n### Client-side confirmations with Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your integration uses Stripe.js to confirm payments with [confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) or by [payment method](https://docs.stripe.com/js/payment_intents/payment_method), your existing processes remains the same and requires no further changes.\n\nWhen you confirm payments, we recommend that you provide the [return\\_url](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-return_url) parameter. This allows you to accept payment methods that [require redirect](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability).\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: '[https://example.com/return_url](https://example.com/return_url)',     },   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n### Server-side confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use server-side confirmation, you must use the [return\\_url](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-return_url) parameter in your integration.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\"`\n\nAlternatively, you can create the PaymentIntent or SetupIntent with the [automatic\\_payment\\_methods.allow\\_redirects](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods-allow_redirects) parameter set to `never`. This disables the `return_url` requirement on confirmation. You can still manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods), but the payment methods that require redirects won’t be eligible.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d \"automatic_payment_methods[allow_redirects]\"=never`\n\nLastly, you can create the PaymentIntent or SetupIntent with the [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) parameter. This also disables the `return_url` requirement on confirmation. With this option, you can’t manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_types[]\"=card`",
  "title": "Manage payment methods in the Dashboard by default | Stripe Documentation",
  "description": "Upgrade your API to manage payment methods in the Dashboard by default.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/updated-requirements/accounts-arguments",
  "markdown": "# Accounts API Argument Changes | Stripe DocumentationThe Stripe Docs logo\n\n## This page maps old Accounts API arguments to the new argument names.\n\nIndividuals and companies used to share many of the same arguments. With the new [Persons API](https://docs.stripe.com/api/persons) and other changes, many of these arguments now have new names specific to individuals and companies. Existing [Account](https://docs.stripe.com/api/accounts) arguments that have not changed are not listed on this page.\n\n## Individuals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | `business_type` |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `individual.address`<br><br>`individual.address_kana` (Japan) `individual.address_kanji` (Japan) |\n| `legal_entity.dob` | `individual.dob` |\n| `legal_entity.first_name` | `individual.first_name` |\n| `legal_entity.last_name` | `individual.last_name` |\n| `legal_entity.personal_address` | `individual.address` |\n| `legal_entity.personal_phone_number` | `individual.phone` |\n| `legal_entity.personal_id_number` | `individual.id_number` |\n| `legal_entity.personal_id_number_provided` | `individual.id_number_provided` |\n| `legal_entity.ssn_last_4` | `individual.ssn_last_4` |\n| `legal_entity.ssn_last_4_provided` | `individual.ssn_last_4_provided` |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | `individual.verification` |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |\n\n## Companies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | Argument removed and replaced with `company`. |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `company.address`<br><br>`company.address_kana` (Japan) `company.address_kanji` (Japan) |\n| `legal_entity.business_name` | `company.name`<br><br>`company.name_kana` (Japan)<br><br>`company.name_kanji` (Japan) |\n| `legal_entity.business_tax_id` | `company.tax_id` |\n| `legal_entity.business_tax_id_provided` | `company.tax_id_provided` |\n| `legal_entity.dob` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-dob) object. |\n| `legal_entity.first_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-first_name) object. |\n| `legal_entity.last_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-last_name) object. |\n| `legal_entity.personal_address` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-address) object. |\n| `legal_entity.phone_number` | `company.phone` |\n| `legal_entity.personal_id_number` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-personal_id_number) object. |\n| `legal_entity.personal_id_number_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-personal_id_number_provided) object. |\n| `legal_entity.ssn_last_4` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-ssn_last_4) object. |\n| `legal_entity.ssn_last_4_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-ssn_last_4_provided) object. |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-requirements) object. |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |",
  "title": "Accounts API Argument Changes | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoiceitems/object",
  "markdown": "# The Invoice Item object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.\n    \n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n*   The price of the invoice item.\n    \n*   Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.\n    \n\n### More attributes\n\n*   #### \n    \n    discountsnullable array of stringsExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable string\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Create an invoice item](https://docs.stripe.com/api/invoiceitems/create)\n\nCreates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.\n\n### Parameters\n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.\n    \n\n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe created invoice item object is returned if successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZei8imSbMVvi \\  -d price=price_1MtGUsLkdIwHu7ix1be5Ljaj\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Update an invoice item](https://docs.stripe.com/api/invoiceitems/update)\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```",
  "title": "The Invoice Item object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event/object",
  "markdown": "# The Meter Event object | Stripe API Reference\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   A unique identifier for the event.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The payload of the event. This contains the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Create a billing meter event](https://docs.stripe.com/api/billing/meter-event/create)\n\nCreates a billing meter event\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   The payload of the event. This must contain the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We’ll enforce uniqueness within a rolling 24 hour period.\n    \n*   The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.\n    \n\n### Returns\n\nReturns a billing meter event\n\nPOST /v1/billing/meter\\_events\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d event_name=ai_search_api \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"=cus_NciAYcXfLnqBoz \\  -d identifier=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Meter Event object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/currencies",
  "markdown": "# Supported currencies | Stripe DocumentationThe Stripe Docs logo\n\n## See what currencies you can use for making charges and for paying out to your bank account.\n\nYou can charge customers in one of more than [135 native currencies](#presentment-currencies) and [receive funds in your currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies). Businesses that have a global presence find this helpful because charging in a customer’s native currency can increase sales.\n\n## Currency presentment and settlement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrency comes into play in three places:\n\n*   The customer’s credit card currency\n*   The currency of the charge, called the _presentment_ currency\n*   The currency accepted by your destination bank account or debit card, called the _settlement_ currency\n\nIf the charge currency differs from the customer’s credit card currency, the _customer_ may be charged a foreign exchange fee by their credit card company. The customer may also be charged a fee by their credit card company if the credit card and your business are in different countries, regardless of the currency used.\n\nIf the charge currency differs from your settlement currency, Stripe [converts the charge](https://docs.stripe.com/currencies/conversions) to your settlement currency. Refer to our [payouts](https://docs.stripe.com/payouts#multiple-bank-accounts) documentation to learn about the different bank account currencies that we support. For information on pricing, see the [pricing guide](https://www.stripe.com/pricing).\n\n## Supported presentment currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Zero-decimal currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll API requests expect amounts to be provided in a currency’s smallest unit. For example, to charge 10 USD, provide an `amount` value of **1000** (that is, 1000 cents).\n\nFor zero-decimal currencies, still provide amounts as an integer but without multiplying by 100. For example, to charge ¥500, provide an `amount` value of **500**.\n\nZero-decimal currencies:\n\n*   BIF\n*   CLP\n*   DJF\n*   GNF\n*   JPY\n*   KMF\n*   KRW\n*   MGA\n*   PYG\n*   RWF\n*   UGX\n*   VND\n*   VUV\n*   XAF\n*   XOF\n*   XPF\n\n## Three-decimal currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe API supports three-decimal currencies for the standard payment flows, including Payment Intents, Refunds, and Disputes. However, to ensure compatibility with Stripe’s payments partners, these API calls require the least-significant (last) digit to be 0. Your integration must round amounts to the nearest ten. For example, 5.124 KWD must be rounded to **5120** or **5130**.\n\nThree-decimal currencies:\n\n*   BHD\n*   JOD\n*   KWD\n*   OMR\n*   TND\n\n## Special cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following currencies have special conditions that you need to consider when creating payouts or charges.\n\n| Currency | Description |\n| --- | --- |\n| Icelandic Króna (ISK) | Effective 0:00 UTC on 2023-04-14, ISK becomes a zero-decimal currency. To maintain backwards compatibility, you must pass in amounts with two decimals. For example, to charge 5 ISK, provide an `amount` value of `500`. The `amount` value must be evenly divisible by 100: `100`, `200`, `300`, and so on. You can’t charge fractions of ISK. |\n| Hungarian Forint (HUF) | Stripe treats HUF as a zero-decimal currency for payouts, even though you can charge two-decimal amounts. When you create a manual payout in HUF, only integer amounts that are evenly divisible by 100 are allowed. For example, if you have an available balance of HUF 10.45, you can pay out HUF 10 by submitting `1000` for the `amount` value. You can’t submit a payout for the full balance, HUF 10.45, because the `amount` value of `1045` is not evenly divisible by 100. |\n| New Taiwan Dollar (TWD) | Stripe treats TWD as a zero-decimal currency for payouts, even though you can charge two-decimal amounts. When you create a manual payout in TWD, only integer amounts that are evenly divisible by 100 are allowed. For example, if you have an available balance of TWD 800.45, you can pay out TWD 800 by submitting `80000` for the `amount` value. You can’t submit a payout for the full balance, TWD 800.45, because the `amount` value of `80045` is not evenly divisible by 100. |\n| Ugandan Shilling (UGX) | UGX was a decimal-based currency, but is now effectively a zero-decimal currency. To maintain backwards compatibility, you must pass in amounts with two decimals. For example, to charge 5 UGX, provide an `amount` value of `500`. The `amount` value must be evenly divisible by 100: `100`, `200`, `300`, and so on. In other words, you can’t charge fractions of UGX. For invoices where the `amount` is fractional after prorations, coupons, or taxes, Stripe automatically rounds that amount to the nearest number evenly divisible by 100. Any difference from rounding is credited or debited to the customer balance. |\n\n## Minimum and maximum charge amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe’s processing fee combines a small fixed amount and a percentage, we enforce a minimum amount when creating a charge. This ensures you don’t lose money on a charge. The minimum amount you can charge depends on which [bank account settlement currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies) the payment would be paid out to.\n\n| Settlement Currency | Minimum Charge Amount |\n| --- | --- |\n| USD | $0.50 |\n| AED | 2.00 د.إ |\n| AUD | $0.50 |\n| BGN | лв1.00 |\n| BRL | R$0.50 |\n| CAD | $0.50 |\n| CHF | 0.50 Fr |\n| CZK | 15.00Kč |\n| DKK | 2.50-kr. |\n| EUR | €0.50 |\n| GBP | £0.30 |\n| HKD | $4.00 |\n| HUF | 175.00 Ft |\n| INR | ₹0.50 |\n| JPY | ¥50 |\n| MXN | $10 |\n| MYR | RM 2 |\n| NOK | 3.00-kr. |\n| NZD | $0.50 |\n| PLN | 2.00 zł |\n| RON | lei2.00 |\n| SEK | 3.00-kr. |\n| SGD | $0.50 |\n| THB | ฿10 |\n\nIf you only have one bank account in use and you create charges in the same currency as it, the minimum amount is simply what is listed for your currency. Charges that must be [converted](https://docs.stripe.com/currencies/conversions) into your account’s [default settlement currency](https://docs.stripe.com/payouts#multiple-bank-accounts) must meet the equivalent minimum of the settlement currency. For example, if you have GBP and USD bank accounts, with GBP set as your default currency, any non-USD charges you create are converted to GBP. These charges must meet the minimum amount required for GBP (£0.30) after conversion.\n\nThere are some exceptions to the minimum charge amount limit (`amount` values as low as 1 is allowed) when you are creating payments with certain payment methods, such as [iDEAL](https://docs.stripe.com/payments/ideal).\n\nThe only limit to the maximum amount you can charge a customer is a technical one. The `amount` value supports up to twelve digits for IDR (for example, a value of **999999999999** for a charge of 9,999,999,999.99 IDR), up to nine digits for INR (for example, a value of **999999999** for a charge of 9,999,999.99 INR) and up to eight digits for all other currencies (for example, a value of **99999999** for a charge of 999,999.99 USD).\n\nCard networks can impose charge amount limits that are more restrictive than twelve digits.\n\n## European credit cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are some factors, like pricing, in which credit cards from Europe are treated distinctly from credit cards from other regions. Stripe defines European cards as cards issued in the following countries:\n\n| Country Code | Country |\n| --- | --- |\n| AD  | Andorra |\n| AT  | Austria |\n| BE  | Belgium |\n| BG  | Bulgaria |\n| HR  | Croatia |\n| CY  | Cyprus |\n| CZ  | Czech Republic |\n| DK  | Denmark |\n| EE  | Estonia |\n| FO  | Faroe Islands |\n| FI  | Finland |\n| FR  | France |\n| DE  | Germany |\n| GI  | Gibraltar |\n| GR  | Greece |\n| GL  | Greenland |\n| GG  | Guernsey |\n| VA  | Holy See (Vatican City State) |\n| HU  | Hungary |\n| IS  | Iceland |\n| IE  | Ireland |\n| IM  | Isle of Man |\n| IL  | Israel |\n| IT  | Italy |\n| JE  | Jersey |\n| LV  | Latvia |\n| LI  | Liechtenstein |\n| LT  | Lithuania |\n| LU  | Luxembourg |\n| MT  | Malta |\n| MC  | Monaco |\n| NL  | Netherlands |\n| NO  | Norway |\n| PL  | Poland |\n| PT  | Portugal |\n| RO  | Romania |\n| PM  | Saint Pierre and Miquelon |\n| SM  | San Marino |\n| SK  | Slovakia |\n| SI  | Slovenia |\n| ES  | Spain |\n| SE  | Sweden |\n| TR  | Türkiye |\n| GB  | United Kingdom |",
  "title": "Supported currencies | Stripe Documentation",
  "description": "See what currencies you can use for making charges and for paying out to your bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/refunds/object",
  "markdown": "# The Refund object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the charge that’s refunded.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s refunded.\n    \n*   Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).\n    \n*   Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://docs.stripe.com/refunds#failed-refunds).\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_detailsnullable object\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_reasonnullable string\n    \n*   #### \n    \n    instructions\\_emailnullable string\n    \n*   #### \n    \n    next\\_actionnullable object\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n*   #### \n    \n    source\\_transfer\\_reversalnullable stringExpandableConnect only\n    \n*   #### \n    \n    transfer\\_reversalnullable stringExpandableConnect only\n    \n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Create a refund](https://docs.stripe.com/api/refunds/create)\n\nWhen you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.\n\nYou can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.\n\nOnce entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.\n\n### Parameters\n\n*   A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.\n    \n*   The identifier of the charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The identifier of the PaymentIntent to refund.\n    \n*   String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://docs.stripe.com/radar/lists), and will also help us improve our fraud detection algorithms.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n\n### Returns\n\nReturns the `Refund` object if the refund succeeded. Raises [an error](#errors) if the Charge/PaymentIntent has already been refunded, or if an invalid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d charge=ch_1NirD82eZvKYlo2CIvbtLWuY\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Update a refund](https://docs.stripe.com/api/refunds/update)\n\nUpdates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.\n\nThis request only accepts `metadata` as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the refund object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Retrieve a refund](https://docs.stripe.com/api/refunds/retrieve)\n\nRetrieves the details of an existing refund.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a refund if you provide a valid ID. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [List all refunds](https://docs.stripe.com/api/refunds/list)\n\nReturns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.\n\n### Parameters\n\n*   Only return refunds for the charge specified by this charge ID.\n    \n*   Only return refunds for the PaymentIntent specified by this ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after the `starting_after` refund. Each entry in the array is a separate Refund object. If no other refunds are available, the resulting array is empty. If you provide a non-existent charge ID, this call raises [an error](#errors).\n\n```\ncurl -G https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",      \"object\": \"refund\",      \"amount\": 1000,      \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",      \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",      \"created\": 1692942318,      \"currency\": \"usd\",      \"destination_details\": {        \"card\": {          \"reference\": \"123456789012\",          \"reference_status\": \"available\",          \"reference_type\": \"acquirer_reference_number\",          \"type\": \"refund\"        },        \"type\": \"card\"      },      \"metadata\": {},      \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",      \"reason\": null,      \"receipt_number\": null,      \"source_transfer_reversal\": null,      \"status\": \"succeeded\",      \"transfer_reversal\": null    }    {...}    {...}  ],}\n```",
  "title": "The Refund object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product-feature/object",
  "markdown": "# The ProductFeature object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    entitlement\\_featureobject\n    \n    The [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### More attributes\n\nThe ProductFeature object\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [List all features attached to a product](https://docs.stripe.com/api/product-feature/list)\n\nRetrieve a list of features for a product\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of features for a product\n\nGET /v1/products/:id/features\n\n```\ncurl -G https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products/prod_NWjs8kKbJWmuuc/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prodft_BcMBZUWCIOEgEc\",      \"object\": \"product_feature\",      \"livemode\": false,      \"entitlement_feature\": {        \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",        \"object\": \"entitlements.feature\",        \"livemode\": false,        \"name\": \"My super awesome feature\",        \"lookup_key\": \"my-super-awesome-feature\",        \"metadata\": {}      }    }    {...}    {...}  ],}\n```\n\n## [Attach a feature to a product](https://docs.stripe.com/api/product-feature/attach)\n\nCreates a product\\_feature, which represents a feature attachment to a product\n\n### Parameters\n\n*   #### \n    \n    entitlement\\_featurestringRequired\n    \n    The ID of the [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### Returns\n\nReturns a product\\_feature\n\nPOST /v1/products/:id/features\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d entitlement_feature=feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [Remove a feature from a product](https://docs.stripe.com/api/product-feature/remove)\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The ProductFeature object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_codes",
  "markdown": "# Tax Code | Stripe API Reference\n\n[Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.\n\n## [The Tax Code object](https://docs.stripe.com/api/tax_codes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   A detailed description of which types of products the tax code represents.\n    \n*   A short name for the tax code.\n    \n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [Retrieve a tax code](https://docs.stripe.com/api/tax_codes/retrieve)\n\nRetrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a tax code object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_codes/txcd_99999999 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [List all tax codes](https://docs.stripe.com/api/tax_codes/list)\n\nA list of [all tax codes available](https://stripe.com/docs/tax/tax-categories) to add to Products in order to allow specific tax calculations.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a data property that contains an array of up to limit tax codes, starting after tax code starting\\_after. Each entry in the array is a separate tax code object. If no more tax codes are available, the resulting array will be empty. This request should never return an error.\n\n```\ncurl -G https://api.stripe.com/v1/tax_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txcd_99999999\",      \"object\": \"tax_code\",      \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",      \"name\": \"General - Tangible Goods\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Tax Code | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/active-entitlement/object",
  "markdown": "# The Active Entitlement object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [Feature](https://docs.stripe.com/api/entitlements/feature) that the customer is entitled to.\n    \n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n\n### More attributes\n\nThe Active Entitlement object\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [Retrieve an active entitlement](https://docs.stripe.com/api/entitlements/active-entitlement/retrieve)\n\nRetrieve an active entitlement\n\n### Parameters\n\n*   The ID of the entitlement.\n    \n\n### Returns\n\nReturns an active entitlement\n\nGET /v1/entitlements/active\\_entitlements/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/active_entitlements/ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [List all active entitlements](https://docs.stripe.com/api/entitlements/active-entitlement/list)\n\nRetrieve a list of active entitlements for a customer\n\n### Parameters\n\n*   The ID of the customer.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of active entitlements for a customer\n\nGET /v1/entitlements/active\\_entitlements\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_9s6XKzkNRiz8i3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/active_entitlements\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",      \"object\": \"entitlements.active_entitlement\",      \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"lookup_key\": \"seats-feature\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Active Entitlement object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customers/object",
  "markdown": "# The Customer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   Mailing and shipping address for the customer. Appears on invoices emailed to this customer.\n    \n\n### More attributes\n\n*   #### \n    \n    cash\\_balancenullable objectExpandable\n    \n\n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    delinquentnullable boolean\n    \n\n*   #### \n    \n    invoice\\_credit\\_balanceobjectExpandable\n    \n*   #### \n    \n    invoice\\_prefixnullable string\n    \n\n*   #### \n    \n    next\\_invoice\\_sequencenullable integer\n    \n*   #### \n    \n    preferred\\_localesnullable array of strings\n    \n*   #### \n    \n    sourcesnullable objectExpandable\n    \n*   #### \n    \n    subscriptionsnullable objectExpandable\n    \n\n*   #### \n    \n    tax\\_idsnullable objectExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Create a customer](https://docs.stripe.com/api/customers/create)\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The ID of the PaymentMethod to attach to the customer.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n*   #### \n    \n    tax\\_id\\_dataarray of objects\n    \n\n### Returns\n\nReturns the Customer object after successful customer creation. Raises [an error](#errors) if create parameters are invalid (for example, specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jennyrosen@example.com\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Update a customer](https://docs.stripe.com/api/customers/update)\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [List all customers](https://docs.stripe.com/api/customers/list)\n\nReturns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\n\n### Parameters\n\n*   A case-sensitive filter on the list based on the customer’s `email` field. The value must be a string.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers, starting after customer `starting_after`. Passing an optional `email` will result in filtering to customers with only that exact email address. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NffrFeUfNV2Hib\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680893993,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": \"jennyrosen@example.com\",      \"invoice_prefix\": \"0759376C\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": null,        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```",
  "title": "The Customer object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/migration-guide",
  "markdown": "# Migrate to billing meters | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate from usage records to billing meters.\n\nStripe is deprecating usage-records billing. Moving forward, you can migrate to billing meters, our only solution for usage-based billing. Billing meters provide the following advantages:\n\n*   High-throughput usage reporting\n*   One-hour reporting [grace period](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#grace-periods) for generating invoices\n*   [Collect usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#recording-usage) before creating a subscription\n\nHowever, we don’t support the following features:\n\n*   `max`, `last_ever`, and `last_during_period` [aggregation](https://docs.stripe.com/api/prices/object#price_object-recurring)\n*   Reporting usage in the Dashboard\n\nYou can continue to use usage records as you adopt billing meters.\n\n## Billing meter overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBilling meters allow you to track usage of a particular event. It supports high-throughput event ingestion and aggregation.\n\nUnlike usage records, billing meters don’t require customers to have subscriptions before reporting usage and a single meter can track usage across multiple customers.\n\nLearn more about billing meters in our [implementation guide](https://docs.stripe.com/billing/subscriptions/usage-based/implementation-guide).\n\n[\n\n## Create a meter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-meter)\n\nCreate a [billing meter](https://docs.stripe.com/api/billing/meter). Learn more about [configuring meters](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#configuring-meter).\n\n`curl https://api.stripe.com/v1/billing/meters \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=\"Alpaca AI\" \\  -d event_name=api_request \\  -d \"default_aggregation[formula]\"=sum`\n\n[\n\n## Create a new price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-price)\n\nCreate a new price associated with the billing meter. Make sure that the new price is on the same product as your old price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product={{PRODUCT_ID}} \\   -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d \"recurring[meter]\"={{METER_ID}} \\   -d currency=usd \\  -d unit_amount=100`\n\n[\n\n## Start recording usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#start-recording-usage)\n\n#### Note\n\nYou must continue to send [usage records](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage) to Stripe until the migration is completed.\n\nStart reporting usage to the Billing Meter API. Stripe doesn’t reflect this usage on customer invoices until they’re subscribed to the new price.\n\n`curl https://api.stripe.com/v1/billing/meter_events \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d event_name=api_request \\  -d timestamp=1712096183 \\  -d identifier={{IDEMPOTENCY_KEY}} \\   -d \"payload[stripe_customer_id]\"={{CUSTOMER_ID}} \\   -d \"payload[value]\"=1`\n\nLearn more about [recording usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#recording-usage).\n\n[\n\n## Plan subscription schedules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#plan-subscription-schedules)\n\nUse subscription schedules to automatically migrate to the new price at the end of the billing cycle. Learn more about [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n\nList the subscriptions associated with the old price.\n\n`curl -G https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d price={{OLD_PRICE_ID}} \\   -d \"expand[]\"=\"data.schedule\"`\n\nStripe returns a list of subscriptions associated with the old price. For example:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\":` \n\n`\"sub_1P1Y6gDxxK6kAaV0rS7ojBjh\"`\n\n`,       \"object\": \"subscription\",       ...       \"items\": {         \"object\": \"list\",         \"data\": [           {             \"id\":   \"si_PrGdqMmuM1DGbQ\"  ,             \"object\": \"subscription_item\",             ...             \"price\": {               \"id\": \"{{OLD_PRICE_ID}}\",               \"object\": \"price\",               ...               \"recurring\": {                 \"aggregate_usage\": \"sum\",                 \"interval\": \"month\",                 \"interval_count\": 1,                 \"trial_period_days\": null,                 \"usage_type\": \"metered\"               },               ...             },             ...           }         ],         ...       },       ...       \"schedule\": {         \"id\":   \"sub_sched_1P1XxjDxxK6kAaV0YygN4tf7\"  ,         \"object\": \"subscription_schedule\",         ...         \"current_phase\": {           \"end_date\": 1714759200,           \"start_date\": 1712167200         },         ...         \"phases\": [           {             ...             \"end_date\": 1714759200,             ...             \"items\": [               {                 ...                 \"price\": \"{{OLD_PRICE_ID}}\",                 ...               }             ],             ...             \"start_date\": 1712167200,             ...             \"trial_end\": 1712772000           }         ],         ...       },       ...     },     ...   ],   \"has_more\": false,   \"url\": \"/v1/subscriptions\" }`\n\nIf a subscription has a [schedule](https://docs.stripe.com/api/subscriptions/object#subscription_object-schedule), you must update the existing [subscription schedule](https://docs.stripe.com/api/subscription_schedules) to migrate to the new price at the end of a billing cycle. If no schedule exists for a subscription, create a new one.\n\nCreate a subscription schedule for each subscription associated with the old price.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=  {{SUBSCRIPTION_ID}}    `\n\nStripe returns a new subscription schedule object:\n\n`{   \"id\":` \n\n`\"sub_sched_1P1H37DxxK6kAaV0Iggc537m\"`\n\n`,   \"object\": \"subscription_schedule\",   ...   \"current_phase\": {     \"end_date\": 1714693634,     \"start_date\": 1712101634   },   ...   \"phases\": [     {       ...       \"end_date\": 1714693634,       ...       \"items\": [         {           ...           \"price\": \"{{OLD_PRICE_ID}}\",           ...         }       ],       ...       \"start_date\": 1712101634,       ...     }   ],   ...   \"status\": \"active\",   ... }`\n\nUpdate the subscription schedule to add a `phase` with the new price.\n\n`curl https://api.stripe.com/v1/subscription_schedules/sub_sched_1P1H37DxxK6kAaV0Iggc537m \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"phases[0][start_date]\"=1712101634 \\  -d \"phases[0][end_date]\"=1714693634 \\  -d \"phases[0][items][0][price]\"={{OLD_PRICE_ID}} \\   -d \"phases[1][items][0][price]\"={{NEW_PRICE_ID}}`\n\n## Test the migration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a test customer with a subscription associated with the old price.\n\n1.  Navigate to the [Customers tab](https://dashboard.stripe.com/test/customers).\n2.  Click **\\+ Add customer**.\n3.  Enter the name of the customer.\n4.  Navigate to the new customer.\n5.  Next to the Subscriptions header, click **+** to open the subscription drawer.\n6.  Select the old price.\n7.  Click **Create test subscription**.\n\nCreate a subscription schedule from the subscription.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=  {{SUBSCRIPTION_ID}}    `\n\nAdd a `phase` to the subscription schedule to migrate to the new price.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][start_date]\"=1710952582 \\  -d \"phases[0][end_date]\"=1713630982 \\  -d \"phases[0][items][0][price]\"={{OLD_PRICE_ID}} \\   -d \"phases[1][items][0][price]\"={{NEW_PRICE_ID}}`\n\n[Simulate the subscription change](https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions) with a test clock.\n\nLearn more about [testing subscriptions integrations](https://docs.stripe.com/billing/testing). You can use test clocks to test different scenarios, including mock usage reporting. Learn more about [test clocks](https://docs.stripe.com/billing/testing/test-clocks).",
  "title": "Migrate to billing meters | Stripe Documentation",
  "description": "Learn how to migrate from usage records to billing meters.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/pricing-models",
  "markdown": "# Model usage-based pricing | Stripe DocumentationThe Stripe Docs logo\n\n## Model usage-based pricingLegacy\n\n## Learn about different pricing models for usage-based billing on Stripe.\n\n#### Note\n\nWith usage-based pricing models, you charge your customers based on how much of your service they use during the billing cycle, instead of explicitly setting quantities, as in the [per-seat](https://docs.stripe.com/products-prices/pricing-models#per-seat) and [flat rate](https://docs.stripe.com/products-prices/pricing-models#flat-rate) pricing models. (Another difference is that in the per-seat and flat-rate models, you could optionally collect payment for the billing cycle up front. With metered billing, you have to collect payment in arrears.) You must also [record and report usage](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage).\n\nTogethere wants to charge on a per-minute basis for usage of their new conferencing service, where more usage drives the per-minute price lower for the customer.\n\nHere’s what that model looks like on Stripe:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pricing_model-metered-usage.43b16d41d299829bc3fd34ddc2d14b15.png)\n\nUsage-based pricing model\n\n### Usage types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor recurring purchases, you define how much to charge customers through `usage_types`\\-either licensed or metered.\n\n### Licensed usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Metered usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Package and standard pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Dashboard, you can select **Standard pricing** or **Package pricing** as pricing models. Both of these models map to the [licensed](https://docs.stripe.com/api/prices/create#create_price-recurring-usage_type) (`recurring[usage_type]='licensed'`) usage type. With both models, you specify the number of units when you create or update a subscription. Here’s how they differ:\n\n*   With **Standard pricing**, the quantity defaults to 1.\n*   With **Package pricing**, you set the unit amount to values of 2 or more.\n\n### Model usage-based pricing on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example shows how to create a metered usage pricing model. In this case, Togethere charges .07 USD per minute.\n\nTo create a metered usage pricing model on Stripe through the Dashboard:\n\nFirst, create the `Per-minute pricing` product. To learn about all the options for creating a product, see the [prices guide](https://docs.stripe.com/products-prices/manage-prices#create-product).\n\n1.  Go to the [Product catalog](https://dashboard.stripe.com/products).\n2.  Click **\\+ Add product**.\n3.  Enter the **Name** of the product: `Per-minute pricing`, in this case.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n\nNext, create the monthly price for the `Per-minute pricing` product.\n\nClick **Advanced pricing options**. Select **Usage-based**, **Per tier**, and **Graduated** for the **Pricing model**.\n\nCreate three graduated pricing tiers:\n\n|     | First unit | Last unit | Per unit | Flat fee |\n| --- | --- | --- | --- | --- |\n| For the first | 0   | 60  | 0.25 USD | 0.00 USD |\n| For the next | 61  | 120 | 0.20 USD | 0.00 USD |\n| For the next | 121 | ∞   | 0.15 USD | 0.00 USD |\n\nTo create a subscription using that price:\n\n1.  Go to the **Payments** > **Subscriptions** [page](https://dashboard.stripe.com/subscriptions).\n2.  Click **\\+ Create subscription**.\n3.  Find or add a customer.\n4.  Search for the `Per-minute pricing` product you created and select the price you want to use.\n5.  _(Optional)_ Select **Collect tax automatically** to use Stripe Tax.\n6.  Click **Start subscription** to start it immmediately or **Schedule subscription** to choose when to start it.\n\nThe subscription integration guide explains how to fit pricing models into a full integration.\n\n*   If you’re using Stripe Checkout, the next step is to [create a Checkout session](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted#create-session) for your site. Make sure you set up Stripe.\n*   If you’re using Stripe Elements, the next step is to [create a Customer](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#create-customer). Make sure you set up Stripe and the sample application.\n\nFor other versions of usage-based pricing, see the [advanced](#advanced) models section. Also learn how to set up [free trials](https://docs.stripe.com/billing/subscriptions/usage-based-legacy#trials) and other optional features for a usage-based billing integration.\n\n[\n\n## Advanced pricing models![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#advanced)\n\n### Flat rate and per-seat ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can subscribe the customer to two separate products to model a pricing structure that includes both a base fee and additional per-seat pricing. One product serves as the flat base price and the other product represents the variable per-seat pricing.\n\nTogethere charges a flat monthly rate for their service plus a tiered price for more than 50 users.\n\n#### Model flat rate and per-seat on Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo model this structure on Stripe, Togethere creates a **Product** and **Price** for the base fee:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Monthly Base Fee\" \\  -d product={{BASE_FEE_PRODUCT_ID}} \\   -d unit_amount=500 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=licensed`\n\nThen they create a monthly price that charges 15 USD per user:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Per-seat price\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=1500 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=licensed`\n\nHere’s how they subscribe a customer with three users to the base fee price and the per-user price:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"={{BASE_FEE_PRICE_ID}} \\   -d \"items[0][quantity]\"=1 \\  -d \"items[1][price]\"={{PER_SEAT_PRICE_ID}} \\   -d \"items[1][quantity]\"=3`\n\nThis results in a 50 USD charge every month: the 5 USD base monthly rate, plus 15 USD each for 3 users.\n\n### Flat rate with metered usage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also combine flat fees with usage-based pricing to charge a flat monthly rate in addition to charging for usage over the billing cycle.\n\nTo create a flat rate with a metered usage pricing model on Stripe through the [Products](https://docs.stripe.com/api/products) and [Prices](https://docs.stripe.com/api/prices) APIs:\n\n1.  Create the `Flat monthly fee` product.\n    \n    `curl https://api.stripe.com/v1/products \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d name=Per-seat`\n    \n2.  Create a price for the `Flat monthly fee` product.\n    \n    `curl https://api.stripe.com/v1/prices \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month`\n    \n3.  Create the `Meeting per minute usage` price.\n    \n    `curl https://api.stripe.com/v1/prices \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d nickname=\"Metered Monthly Plan\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=700 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered`\n    \n\nWhen you create subscriptions, specify both price IDs:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"={{FLAT_MONTHLY_FEE_PRICE_ID}} \\   -d \"items[0][quantity]\"=1 \\  -d \"items[1][price]\"={{METERED_USAGE_PRICE_ID}} \\   -d \"items[1][quantity]\"=1`\n\n### Decimal amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDecimal pricing is useful if you need to create pricing amounts that aren’t whole numbers. For example, if you’re running a cloud storage SaaS business, you can create a price that charges 0.05 cents for each MB used per month. Based on usage, the quantity of MB is then multiplied by 0.05 cents and rounded to the nearest whole cent.\n\n#### Creating objects with decimal amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [create prices](https://docs.stripe.com/api#create_price) with decimal amounts, specify `unit_amount_decimal` instead of `unit_amount`. `unit_amount_decimal` allows you to set the amount in the minor unit of the currency that you charge in. For example, you can set `unit_amount_decimal = 105.5` in USD to represent 105.5 cents, or 1.055 USD. `unit_amount_decimal` accepts decimals up to 12 decimal places.\n\nIf you plan to use [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing), you can specify `unit_amount_decimal` instead of `unit_amount`. You can also [create invoice items](https://docs.stripe.com/api/invoiceitems/create) with `unit_amount_decimal` instead of `unit_amount`.\n\nIn API responses, the integer `unit_amount` field isn’t populated if the object is created with a decimal value. For example, if you create a price with `unit_amount_decimal = 0.05`, the response contains `unit_amount = null` and `unit_amount_decimal = 0.05`. You can still pass integer values into `unit_amount_decimal`, in which case `unit_amount` is populated in the response. For instance, if you create a price with `unit_amount_decimal = 5`, the response contains `unit_amount = 5` and `unit_amount_decimal = 5.0`.\n\n#### Note\n\nIf your integration has event handling that uses `unit_amount` values and you begin using decimal amounts, you need to use `unit_amount_decimal` instead. This is important because `unit_amount` will be returned as `null` if the decimal amounts can’t be converted into integers, which could cause errors in your integration.",
  "title": "Model usage-based pricing | Stripe Documentation",
  "description": "Create your usage-based pricing model with Stripe Billing",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage",
  "markdown": "# Record usage for billing | Stripe DocumentationThe Stripe Docs logo\n\n## Record usage for billingLegacy\n\n## Learn how to record and report usage for your customers.\n\n#### Note\n\nThroughout each billing period, you need to report usage to Stripe so that customers are billed the correct amounts. You can maintain your own system for recording customer usage and provide usage information for subscriptions to Stripe.\n\nYou can share usage information with Stripe by creating [usage records](https://docs.stripe.com/api#usage_record_create) with a subscription item, quantity used, and a timestamp. How often you report usage is up to you. For example, you can run the code on an interval (for example, every 24 hours) for each active metered subscription. At the end of the billing period, Stripe automatically calculates the total price and [invoices](https://docs.stripe.com/billing/invoices/subscription) for all usage during the billing period.\n\n`curl https://api.stripe.com/v1/subscription_items/{{SUBSCRIPTION_ITEM_ID}}/usage_records \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X POST \\   -d quantity=100 \\   -d timestamp=1720792530 \\   -d action=increment`\n\n## Best practices for recording usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You need to write some of your own business logic before creating the usage record. Pull a record of a customer from your database and extract the customer’s Stripe subscription item ID and usage for the day. If you aren’t storing subscription item IDs, retrieve the subscription and check for [subscription items](https://docs.stripe.com/api/subscriptions/object#subscription_object-items).\n*   Use [idempotency keys](https://docs.stripe.com/api/idempotent_requests) to ensure usage isn’t reported more than once in case of latency or other issues.\n*   The `timestamp` has to be within the current billing period, otherwise the call fails.\n*   The default value for the `action` parameter is `increment`. This value assumes that the price is configured with `aggregate_usage=sum` and that you write usage as it occurs, passing it to Stripe with the current `timestamp`.\n*   A `set` value for the `action` parameter supports the case where you aggregate usage yourself, and configure the price with `aggregate_usage=last_during_period` or `aggregate_usage=last_ever`.\n*   The usage reporting endpoint is rate-limited, so you might need to exercise caution and avoid making too many separate usage records. It’s important to note that Stripe’s API rate limit is 100 calls per second per account. We can increase this to 200 calls per second per account on request. If you have a service that you expect to burst above this limit, consider “bundling” your product into amounts. For example, if you charge per 1000 requests, consider basing your product on “per 1k transactions” and send 1 usage record per 1000.\n\n### Clock drift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReporting usage outside of the current billing period results in an error. To account for clock drift between your server and Stripe’s systems, we provide a short grace period in the default aggregation mode (`aggregate_usage` = `sum`). For all other aggregation modes, the `timestamp` must be within the current period.\n\nDuring the first few minutes of each billing period, you can report usage that occurred within the last few minutes of the previous period. If the invoice for the previous period isn’t finalized, we add that usage to it. Otherwise, we bill that usage in the current period. After the grace period, you can’t report usage from the previous billing period.\n\nDon’t rely on the grace period for reporting usage outside of a billing period. It’s intended only to account for possible clock drift, and we don’t guarantee it.\n\n## Retrieve current usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve total usage for the current period, you can [retrieve the upcoming invoice](https://docs.stripe.com/api#upcoming_invoice) for the subscription. The usage is reflected as the `quantity` of the [invoice item](https://docs.stripe.com/api#invoiceitems) for a `subscription_item`. The total usage value may not be the most up-to-date quantity because slight processing delays can occur.\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d subscription={{SUBSCRIPTION_ID}}`",
  "title": "Record usage for billing | Stripe Documentation",
  "description": "Learn how to record and report usage for your customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/disputed-payments",
  "markdown": "# Disputed PayPal payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how dispute management works for PayPal, a digital wallet popular with businesses in Europe.\n\nThe risk of fraud or unrecognized PayPal payments is low because the customer must authenticate the payment with their PayPal account.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate any payment with their PayPal account to decrease the risk of fraud. However, customers can dispute PayPal payments if for example:\n\n*   They don’t receive the goods they paid for\n*   The received goods don’t match their description\n\nNote that your settlement choice when activating PayPal affects the funds flow for PayPal disputes. See [Choose settlement preference](https://docs.stripe.com/payments/paypal/choose-settlement-preference#refunds-and-disputes) for more context.\n\n## Dispute process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers can file a dispute on PayPal up to 180 calendar days from the date of purchase. They can also file a dispute through the payment instrument they used to complete the PayPal purchase (such as their bank).\n\nAfter the customer initiates a dispute, Stripe notifies you through:\n\n*   Email\n*   The [Stripe Dashboard](https://dashboard.stripe.com/disputes)\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n*   Push notification (if you’ve subscribed)\n\nDepending on the type of dispute and where it was filed, PayPal might offer the ability for you to communicate directly with the customer in an attempt to resolve the dispute before countering it. Currently, Stripe doesn’t offer this functionality and requests that you turn to PayPal to contact the customer.\n\nIf no agreement is reached, you can either accept or counter the dispute. If you choose to counter, Stripe requests that you [submit evidence](https://docs.stripe.com/disputes/responding#respond) that you fulfilled the purchase order in the [Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence helps PayPal determine if a dispute is valid or if they should reject it. The evidence you provide must contain as much detail as possible from what the customer provided at checkout. You must submit the requested information within 19 calendar days. PayPal aims to make a decision within 30 calendar days of evidence submission.\n\nIf you prefer to handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\n## Dispute resolution![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf PayPal resolves the dispute with you winning, the disputed amount will be returned to your balance.\n\nIf PayPal rules in favor of the customer, the dispute is lost and the balance charge becomes permanent.\n\nIn some cases, PayPal will allow a lost dispute to be appealed. Currently, Stripe does not support appeals and requests that you turn to PayPal to file an appeal. In these cases, the dispute will remain open on Stripe until a final resolution has been reached by PayPal. Please refer to PayPal to be notified on when a dispute becomes appealable.\n\nRead more about disputes on [how disputes work](https://docs.stripe.com/disputes/how-disputes-work) and [best practices for responding to disputes](https://docs.stripe.com/disputes/best-practices).\n\n## Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal might charge fees for disputes. The terms and amount of PayPal dispute fees are set by PayPal. Stripe does not charge any additional fees for PayPal disputes.\n\n## Testing your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe allows you to simulate a [disputed transaction](https://docs.stripe.com/disputes) by specifying `email` values that match the patterns described in [test scenarios](#scenarios) when you create a PaymentIntent (as part of the [billing details](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_data-billing_details)). You can choose from the different test scenarios to simulate disputes of all relevant categories.\n\nFor example, creating the PaymentIntent server-side and simulating a disputed transaction where the buyer claims they didn’t receive the product looks like:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_data[type]\"=paypal \\   --data-urlencode \"payment_method_data[billing_details][email]\"=\"dispute_not_received@example.com\"`\n\nIf using [Checkout](https://docs.stripe.com/payments/checkout) or [Payment Links](https://docs.stripe.com/no-code/payment-links), you can enter the email in the checkout form. Shortly after the payment has been completed, it will be disputed as `product_not_received`.\n\n### Test scenarios ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below displays the scenarios available to test. Each scenario produces a dispute shortly after a payment has been completed.\n\n`.*` represents any valid character in an email. For example, the pattern `.*dispute_duplicate@.*` is matched by an email such as `my_dispute_duplicate@mycompany.com`.\n\n| Email pattern | Scenario |\n| --- | --- |\n| `.*dispute_credit_not_processed@.*` | Tests a dispute for a payment where the customer claims they’re entitled to a full or partial refund because they returned the purchased product or didn’t fully use it, or the transaction was otherwise canceled or not fully fulfilled, but you haven’t yet provided a refund or credit. |\n| `.*dispute_duplicate@.*` | The customer claims they were charged multiple times for the same product or service. |\n| `.*dispute_fraudulent@.*` | The customer claims that the transaction is fraudulent and they did not authorize the transaction. |\n| `.*dispute_general@.*` | Tests a dispute for a payment where an uncategorized dispute has been opened. |\n| `.*dispute_not_received@.*` | The customer claims that they have not received the product or service they purchased. |\n| `.*dispute_product_unacceptable@.*` | The customer claims that the product or service they purchased was unacceptable or otherwise not as described. |\n| `.*dispute_subscription_cancelled@.*` | The customer claims that they were charged for a subscription after it was canceled. |\n\n### Evidence ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\n*   If you [respond using the API](https://docs.stripe.com/disputes/api), pass the value from the table as [uncategorized\\_text](https://docs.stripe.com/api/disputes/update#update_dispute-evidence-uncategorized_text).\n*   If you [respond in the Dashboard](https://docs.stripe.com/disputes/responding), enter the value from the table in the **Additional information** field. Then, click **Submit evidence**.\n\n| Evidence | Description |\n| --- | --- |\n| `winning_evidence` | The dispute is closed and marked as won. Your account is credited the amount of the charge. |\n| `losing_evidence` | The dispute is closed and marked as lost. Your account isn’t credited. |",
  "title": "Disputed PayPal payments | Stripe Documentation",
  "description": "Learn how dispute management works for PayPal, a digital wallet popular with businesses in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/s3",
  "markdown": "# Stripe connector for Amazon S3\n\n## Automate recurring file imports from your Amazon S3 bucket to Stripe.\n\nThis guide explains how to import files from Amazon S3 into the Stripe Data Management Platform. By following these steps, you set up an automated job for importing data to keep your Stripe products up-to-date.\n\n[\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#prerequisites)\n\nBefore starting the integration, make sure you have the following:\n\n1.  An active AWS account and S3 bucket with access to the relevant files.\n2.  Admin account access to the Stripe Dashboard.\n\n[\n\n## Prepare your Files in Amazon S3![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-2)\n\nTo validate your connection configuration, use well-formatted data in your S3 bucket. The configuration process shows you available files, and runs an initial sync when the connection is configured.\n\n1.  Visit your [Amazon S3 console](https://s3.console.aws.amazon.com/)\n2.  Make sure that your files are stored in a designated S3 bucket and organized according to your import preferences.\n    *   If you don’t currently have an S3 bucket, you can follow the [AWS guidelines for creating your first bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html).\n    *   Stripe has the following file requirements for successful retrieval:\n        *   File names must adhere to [S3 Object naming conventions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html).\n        *   The maximum file size is 1 GB.\n3.  Remember the bucket name and region because you need them for future steps.\n4.  Keep your AWS Console open to configure an IAM role in future steps.\n\n### Supported file formats![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   CSV\n*   TSV\n*   JSON\n*   JSONLINE\n*   For more formats, please [contact support](https://support.stripe.com/)\n\n[\n\n## Configure the Stripe Amazon S3 Connector to import files from your S3 Bucket![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-3)\n\n1.  Sign in to the [Stripe Data Management Connector Dashboard](https://dashboard.stripe.com/data-management/connectors)\n2.  Click **\\+ Set up connector** > **Amazon S3**.\n3.  Provide a unique connector name for this Connection. Consider using details about the data source, objects in the file, and product destination to create a strong unique name.\n4.  In your Amazon console, navigate to the [IAM console](https://console.aws.amazon.com/iam/).\n5.  The next step of the Stripe Amazon S3 Connector setup provides details to Create an IAM Role using a Custom trust policy.\n    *   In the navigation pane of the console, click **Policies** > **Create policy**.\n    *   To create your permission policy, select **JSON** and replace the existing policy text by copying and pasting the provided code block. In the Resource section of the **Policy editor** code block, replace `USER_TARGET_BUCKET` with your intended bucket name. Click **Next**. Under **Policy details**, add a policy name, along with any tags (optional), then click **Create policy**.\n    *   Return to the navigation pane of the console, then click **Roles** > **Create role**.\n    *   Choose the **Custom trust policy** role type, copy and paste the provided code block, then click **Next**.\n    *   To select your permission policy, locate the newly created permission policy in the list. Enable the checkbox to select the policy, scroll down, then click **Next**.\n    *   To create a role name, copy and paste the provided role name, then click **Create role**.\n6.  The following step of the Stripe Amazon S3 Connector setup establishes the connection between your Amazon S3 bucket and Stripe.\n    *   From the AWS Console, [find and provide your AWS Account ID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html#FindAccountId).\n    *   Provide the Bucket Name and Region saved from your AWS Console during Step 2.3.\n    *   If you use folders to organize your files in your Amazon S3 bucket, specify a folder within the above bucket.\n        *   If you specify a folder within the above bucket, we only fetch data from this folder, not the entire bucket.\n7.  After successfully setting up a new connector, Stripe fetches all data from the Amazon S3 bucket that was modified in the last 90 days.\n    *   We fetch data after every five minutes.\n    *   Only objects with a LastModified date later than the last sync are imported for recurring imports.\n8.  Step 4 previews the files available in the connected Amazon S3 bucket and allows you to associate them with a data template.\n    *   The file preview validates that your credentials connect Stripe with the expected Amazon S3 bucket and folder.\n    *   The data template associates this connection with an expected file format for initial and recurring imports.\n9.  Click **Done** to create an Active Data Connection and initiate the initial Data Import.\n    *   Stripe fetches all data from the Amazon S3 bucket that was modified in the last 90 days.\n    *   We fetch data once per day.\n\n[\n\n## Maintaining your Amazon S3 connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-4)\n\nAfter your connection is established, we fetch your data every 5 minutes. To monitor the health of your connection, you can perform the following actions:\n\n1.  Visit the [Stripe Data Management Connector dashboard](https://dashboard.stripe.com/data-management/connectors) for the status and last sync details of your established connections.\n2.  Manage a single Connection by clicking on a connector.\n    *   You can edit the connector name or data template, re-authenticate a broken connection, and delete a connection.\n3.  We recommend setting up an automated job to regularly deliver new files to your S3 bucket.\n4.  The Amazon List Object API doesn’t allow for filtering objects by LastModified. As a result, you must list all the contents of your bucket for each import. Make sure that you only allow the associated IAM role access to data that you intend to import to Stripe. We recommend limiting the number of files in your bucket below 50000. To achieve this, make sure that you set the expiry time for your objects accordingly.\n\n#### Interested in the Stripe Connector for S3?\n\nPlease provide your email address below and our team will be in touch.",
  "title": "Stripe connector for Amazon S3 | Stripe Documentation",
  "description": "Automate recurring file imports from your Amazon S3 bucket to Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/payout-reconciliation",
  "markdown": "# PayPal payout reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reconcile payments made through PayPal, a common payment method in Europe.\n\nReconciliation is the process of matching and verifying payments that have been received and processed with the corresponding PayPal orders. It only applies to customers receiving their funds on PayPal, and not on Stripe. Stripe automatically [reconciles](https://docs.stripe.com/reports/payout-reconciliation) PayPal transactions before the payout, whereas this can’t be done if transactions settle outside of Stripe’s platform. When transactions settle outside of Stripe’s platform, you’ll use PayPal reporting available on your PayPal account or with sFTP for reconciliation.\n\nStripe provides two ways of supporting PayPal transaction reconciliation:\n\n*   (Recommended) Using the [reference](#use-reference) field. This is the preferred option if you have a businesses-generated order or invoice ID, which you can put in the reference field. After the payment is made and processed, `my_order_id` appears as `Invoice ID` in the PayPal settlement report.\n*   Using the [transaction\\_id](#use-transaction-id) from the [Charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal-transaction_id) object. When the payment is processed, `paypal_capture_id` appears as `Transaction ID` in the PayPal settlement report. This is recommended only if you don’t have a business-generated order ID.\n\n## Use Reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [reference](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_options-paypal-reference) field to populate your own reference for an order on a PayPal payment. One example of this is an Order ID from PayPal. This reference is visible to the buyer and also in the [settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/) on your PayPal account. To reconcile funds using a `reference`, you can include it as part of the [payment\\_method\\_options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-paypal) parameter when creating a PaymentIntent. You can use this `reference` to match payments made through Stripe with corresponding transactions in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/). Any subsequent transactions derived from the original Payment transaction, such as refunds and disputes, are associated with the given `reference`.\n\nThe following code sample shows the creation of a PaymentIntent with the `reference` set in `payment_method_options`:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_options[paypal][reference]\"=my_order_id`\n\nAfter the payment is made and processed, `my_order_id` is reflected as Invoice ID in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\n## Use the Charge object’s transaction ID ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [transaction\\_id](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal-transaction_id) field contains the ID used by PayPal to identify a transaction. To reconcile funds using a `transaction_id`, retrieve the `transaction_id` from the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal) field in the Charge object. The `transaction_id` is present only if the payment has been captured. It’s used to match payments made through Stripe with corresponding transactions in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\nFor example, here’s how you can retrieve the `transaction_id` from the Charge object:\n\n`{   \"amount\": 1099,   \"amount_captured\": 1099,   \"payment_method_details\": {     \"paypal\": {       \"transaction_id\": \"paypal_capture_id\",       \"payer_id\": \"ZA889USQQDD37\",       \"payer_email\": \"jenny@example.com\",       \"payer_name\": \"Jenny Rosen\"     },     \"type\": \"paypal\"   },   \"balance_transaction\": \"txn_3MrOPxGsnWT9WMaQ19vg30v3\",   \"billing_details\": {     \"address\": {       \"city\": \"Co. Kerry\",       \"country\": \"IE\",       \"line1\": \"Skellig Michael\",       \"line2\": \"Great Skellig\",       \"postal_code\": \"12345\",`\n\nWhen the payment is processed, `paypal_capture_id` is appears as `Transaction ID` in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\n## Access your PayPal reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can download your PayPal Settlement Report and other reports from paypal.com, or you can enable sFTP reporting by contacting PayPal.\n\nThe Settlement Report provides an end-to-end view of all balance-impacting transactions within a 24-hour period. This report is used to reconcile money moving events in a PayPal account with monies that are moved to a linked bank account.\n\nTo access the Settlement report:\n\n1.  [Log in](https://www.paypal.com/signin) to your PayPal business account.\n2.  Under **Activity**, select **All Reports**.\n3.  Select **Transactions > Settlement**.\n\nRead more about [PayPal reports and how to download them](https://www.paypal.com/us/cshelp/article/how-do-i-view-and-download-statements-and-reports-help145).",
  "title": "PayPal payout reconciliation | Stripe Documentation",
  "description": "Learn how to reconcile payments made through PayPal, a common payment method in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/supported-locales",
  "markdown": "# Supported locales | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the locale of the PayPal authorization page for your customer.\n\n### Supported locales![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the PayPal authorization page to your customer’s preferred locale via the [preferred\\_locale](https://docs.stripe.com/payments/paypal/accept-a-payment#customize-the-preferred-locale) property. See the table below for supported locales.\n\n| Value | Locale |\n| --- | --- |\n| cs-CZ | Czech - The Czech Republic |\n| da-DK | Danish - Denmark |\n| de-AT | German - Austria |\n| de-DE | German - Germany |\n| de-LU | German - Luxembourg |\n| el-GR | Greek - Greece |\n| en-GB | English - United Kingdom |\n| en-US | English - United States of America |\n| es-ES | Spanish - Spain |\n| fr-BE | French - Belgium |\n| fi-FI | Finnish - Finland |\n| fr-FR | French - France |\n| fr-LU | French - Luxembourg |\n| hu-HU | Hungarian - Hungary |\n| it-IT | Italian - Italy |\n| nl-BE | Dutch - Belgium |\n| nl-NL | Dutch - Netherlands |\n| pl-PL | Polish - Poland |\n| pt-PT | Portuguese - Portugal |\n| sk-SK | Slovak - Slovakia |\n| sv-SE | Swedish - Sweden |",
  "title": "Supported locales | Stripe Documentation",
  "description": "Customize the locale of the PayPal authorization page for your customer.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_portal/session",
  "markdown": "# The Customer Portal Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Customer Portal Session object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/connect-your-paypal-account",
  "markdown": "# Connect Your PayPal Account | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to activate PayPal payments when you're ready to go live.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nIf you use [Connect](https://docs.stripe.com/connect), first check whether your setup is supported under [Connect support](https://docs.stripe.com/payments/paypal#connect). If you think your use case is supported, submit an onboarding request from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to get access to PayPal. Stripe sends email updates about the progress of all requests, and the current status is also reflected in your [Payment Methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nIf you’re not using [Connect](https://docs.stripe.com/connect), you can activate the PayPal payment method directly from the Stripe Dashboard.\n\n1.  Go to the [Payment Methods settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  Locate PayPal in the **Wallets** section.\n3.  Click **Turn on**.\n4.  Select your **settlement preference**. If you select **Add PayPal funds to your Stripe balance**, PayPal money flow is similar to other payment methods at Stripe. If you select **Keep PayPal funds in PayPal balance**, you’ll need to manage payouts on PayPal with the option to automate the frequency of payouts. Find more information about [settlement modes](https://docs.stripe.com/payments/paypal/choose-settlement-preference).\n5.  Click **Continue to PayPal** to complete the integration and connect your Stripe and PayPal accounts. You can connect an existing PayPal account or create a new one as part of the process.\n6.  After clicking **Continue to PayPal**, PayPal redirects you back to Stripe where you can check the status of your integration on the **Payment Methods settings** page.\n\n#### Note\n\nIn some cases, you might see your integration appear in a **pending** state after connecting your Stripe and PayPal accounts, which can happen for the following reasons:\n\n*   You haven’t confirmed the email address to activate your PayPal account.\n*   PayPal needs to perform additional verifications on your account. If you’ve verified all of these possibilities and think they don’t apply to your PayPal account, please [contact Stripe Support](https://support.stripe.com/) and we’ll help you resolve the issue.\n\n\\* Currently, only PayPal business accounts in the European Economic Area (excluding Hungary), the UK, and Switzerland are supported.\n\n## Switch to a different PayPal account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can switch to a different PayPal account in your Dashboard. It can be an existing account, or you can create a new one.\n\n#### Caution\n\nIf you have recurring payments enabled, switching PayPal accounts disables them. After switching accounts, you must re-enable recurring payments and collect mandates from buyers again.\n\n1.  Go to the [Payment Methods settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  In the **Wallets** section, find **Paypal**.\n3.  Expand the **PayPal** section.\n4.  Click **Switch account**.\n5.  Read the information dialog.\n6.  Click **Switch PayPal account**.\n\nSwitching accounts doesn’t take effect immediately. Payments continue to flow through your previous account until the new account is successfully connected.\n\nAfter switching PayPal accounts, payments processed with your previous account are still eligible for refunds and disputes.\n\nIn some cases, you might see your new PayPal account appear in a pending state on the Stripe dashboard. That can happen for the following reasons:\n\n*   You haven’t confirmed the email address to activate the new PayPal account.\n*   PayPal needs to perform additional verifications on the new account. If you believe that you’ve fulfilled all of the PayPal requirements, contact Stripe Support.\n\n## Start accepting PayPal payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee how to [accept PayPal payments](https://docs.stripe.com/payments/paypal/accept-a-payment) at Stripe.",
  "title": "Connect Your PayPal Account | Stripe Documentation",
  "description": "Learn how to activate PayPal payments when you're ready to go live.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/choose-settlement-preference",
  "markdown": "# Choose settlement preference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about settlement modes for PayPal payments.\n\nSettlement choice determines how you access and manage funds, use the Dashboard, perform reconciliation, and so on.\n\n## Getting started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a Connect user, your funds always settle on Stripe, similar to other payment methods. If you operate as a direct business, when you [connect your PayPal and Stripe accounts](https://docs.stripe.com/payments/paypal/connect-your-paypal-account) you can set the funds settlement preference for your PayPal payments. Read this guide to learn more about differences between PayPal and Stripe settlement options.\n\nIf you already use PayPal through Stripe, you can check your current settlement preference on the [Payment Methods Settings](https://dashboard.stripe.com/settings/payment_methods) page in the Stripe Dashboard.\n\n## Money flow and payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you settle funds from the PayPal payments on Stripe, you can access the money from your Stripe balance according to your [payouts](https://docs.stripe.com/payouts) schedule, similar to other payment methods at Stripe. The funds from the payments you receive are immediately transferred from PayPal to your Stripe balance, without the need for you to take any action.\n\nIf you settle PayPal payments to PayPal, you’ll need to manage payouts on PayPal.\n\n## Refunds and disputes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSettlement on Stripe uses the funds available in your Stripe account if you want to refund a payment or need to cover the funds from a dispute, similarly to other payment methods on Stripe. If PayPal charges a fee when a dispute closes, it’s withdrawn from your Stripe balance through a [Balance Transaction](https://docs.stripe.com/reports/balance-transaction-types) of type `adjustment`.\n\nFor settlement on PayPal, you can still manage refunds and disputes from your Stripe Dashboard, but the relevant funds are the funds on your PayPal account. If settle on PayPal, Stripe doesn’t transfer any funds from your PayPal account to your Stripe account or vice-versa. For that reason, make sure that you always have a positive balance in both accounts to cover expected refund amounts or disputes, and fees that PayPal might charge when the dispute closes.\n\n## Dashboard experience ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you settle your funds from PayPal payments on Stripe, the Stripe Dashboard is the same as with other payment methods on Stripe.\n\nIf you settle your PayPal funds on a PayPal account, the [balance transaction](https://docs.stripe.com/api#balance_transaction_object) linked to the corresponding payment has a zero amount regardless of the payment, because funds settle in your PayPal balance, and no money goes to your Stripe balance.\n\nAdditionally, the Gross and Net volume charts won’t reflect your sales volume from PayPal if you settle your funds on a PayPal account. In this case, we recommend using the Payment methods report to track the volume from PayPal sales.\n\nThe payment details view is also different if you settle your PayPal funds to your PayPal account. The **Net** value reflects the change on the net volume of your Stripe balance. This is a negative value of the fee amount that Stripe takes for the payment.\n\n## Reconciliation impact ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReconciliation is the process of matching and verifying payments that have been received and processed with the corresponding PayPal orders.\n\nWhen settling your funds on Stripe, you get automatic transactions reconciliation.\n\nIf you settle on PayPal, you need to manually reconcile the transactions. Learn about how Stripe provides support for PayPal [transaction reconciliation](https://docs.stripe.com/payments/paypal/payout-reconciliation).\n\n## Changing your settlement preference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf for any reason you need to change your current settlement mode, you can initiate the process from the Stripe Dashboard.\n\n1.  Go to the [Payment Methods Settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  Find PayPal settings.\n3.  Click **Contact Support to change**. You’ll be redirected to the FAQ page where you can file a support ticket.\n4.  File a support ticket to request a change.\n\nThe change shows up in the PayPal settings accordingly.\n\n## Currency conversions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA currency conversion occurs when the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\") differs from the settlement currency. See [currency conversions](https://docs.stripe.com/connect/currencies#currency-conversions) for additional detail. Prevent currency conversions by adding a [settlement currency](https://docs.stripe.com/payouts/alternative-currencies#setting-up-your-bank-account-for-alternative-currency-payouts) for every currency you present to your customers.",
  "title": "Choose settlement preference | Stripe Documentation",
  "description": "Learn about settlement modes for PayPal payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/orgs/setup",
  "markdown": "# Supported Organization setups | Stripe DocumentationThe Stripe Docs logo\n\n## Supported Organization setupsInvite only\n\n## Learn about different account setups that you can add to an organization.\n\nOrganizations support the following account setups: multiple standalone accounts, platforms, and connected accounts.\n\n## Multiple standalone accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s common to manage multiple Stripe accounts that represent different business lines, countries of operation, legal entities, and acquisitions.\n\n![Multiple standalone accounts](https://b.stripecdn.com/docs-statics-srv/assets/structure_1_before.c8b529f41e4ff0dbe8beea36e1dca3b6.png)\n\nMultiple standalone accounts representing different business lines.\n\nAfter you [add these accounts to an organization](https://docs.stripe.com/get-started/account/orgs/build), you can search and download consolidated reports across your accounts without any changes to your Stripe integration. After you create an organization, you can add new business lines or add existing accounts.\n\n![Organization with multiple standalone accounts](https://b.stripecdn.com/docs-statics-srv/assets/structure_1.fccd75f80ce664be76a7f5dc6f51008b.png)\n\nOrganization with multiple accounts representing different business lines.\n\n## Multiple platform accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have several platform accounts that correspond to different countries of operation or business lines, you can add them to an organization.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_2_before.fba9132b399f3a6155b36fdb092493b2.png)\n\nMultiple standalone platform accounts representing different business lines, each with connected accounts.\n\nAfter you add your platforms to an organization, you can search for connected accounts under all your platforms, as well as data within each platform account.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_2.7a6b0bd2eb1da064944eb16f21e047d0.png)\n\nOrganization with multiple platform accounts representing different business lines, each with connected accounts.\n\n## Multiple connected accounts under a Connect platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn certain cases, you might own multiple connected accounts under a platform. This commonly occurs in franchise groups where several franchises are under common ownership.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_3_before.702c4fa894523d6e1a66e1111b9d3bac.png)\n\nMultiple connected accounts (Acme Dealer of Seattle and Acme Dealer of Tacoma) that belong to the same owner and under a platform.\n\nEven though your connected accounts are under a platform, you can still add them to an organization. This allows you to use the unified search and reporting across your accounts.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_3.e8675ca3654841a4397bc2e2eacc4771.png)\n\nOrganization (Acme Dealer Group) with multiple connected accounts (Acme Dealer of Seattle and Acme Dealer of Tacoma) under common ownership.\n\n## Multiple business lines represented as connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you might have represented different business lines as connected accounts under one platform account, even though your business isn’t a traditional platform or marketplace. This is common if you want to consolidate payment integrations or clone payment methods stored in the platform to connected accounts.\n\n![Organization with multiple accounts setup using Connect](https://b.stripecdn.com/docs-statics-srv/assets/structure_4_before.e35e09f6d8127fb01f240a30834b99b7.png)\n\nA platform account and multiple connected accounts, each representing different business lines.\n\nYou can create an organization that encompasses the platform account and connected accounts so that your team can benefit from unified search and reporting across all the accounts, without impacting your payment integrations.\n\n![Organization with multiple accounts setup using Connect](https://b.stripecdn.com/docs-statics-srv/assets/structure_4.29084c115c8f08dc82468dfc03005096.png)\n\nOrganization with a platform account and multiple connected accounts, representing different business lines.",
  "title": "Supported Organization setups | Stripe Documentation",
  "description": "Learn about different account setups that you can add to an organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/orgs/build",
  "markdown": "# Build an Organization | Stripe DocumentationThe Stripe Docs logo\n\n## Build an OrganizationInvite only\n\n## Select accounts to combine into an organization.\n\nCreate an organization and manage your accounts and your teams from a single location in the Stripe Dashboard.\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must complete the following prerequisites before you can create an organization:\n\n1.  The individual responsible for creating the organization must be assigned to the [Super Administrator role](https://docs.stripe.com/get-started/account/teams/roles) in each account that’s added to the organization. Stripe automatically assigns the Super Administrator role to the owner of the account.\n2.  If you configure single sign-on (SSO) for your accounts, make sure that all your accounts share the same SSO integration. If two accounts have different SSO configurations, you must update one of the their SSO configurations to match, or leave one of the accounts out of the organization.\n\n## Create an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an organization from one of your Stripe accounts:\n\n1.  Open the account picker dropdown from anywhere in the Dashboard, then select **Create new organization**.\n2.  Enter your **Organization name**.\n3.  Select the accounts you want to add to the organization.\n4.  Agree to the [Terms of Service](https://stripe.com/legal/organizations).\n5.  Click **Create**.\n\nAfter you choose the account from which to create the organization, the organization and its data is colocated in the data region associated with the account used to establish the organization.\n\n## Add an existing account to an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you create an organization, you can add an existing account. To do this, you must possess the Super Administrator role in both the account and the organization.\n\n1.  Click **Add account** above the list of accounts in the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Select **Choose from existing accounts**.\n3.  Select the accounts you want to add to the organization. If you don’t have a Super Administrator role assigned in an account, the Super Administrator of the account receives an invitation to join the organization.\n4.  Click **Add**.\n\n## Add a new account to an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Click **Add account** above the list of accounts in the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Select **Create a new account in your organization**.\n3.  Enter your **Account name**, then select the country of operation and type of business.\n4.  _(Optional)_ Select any legal entity, public details, or payout bank account information you want to copy from existing accounts within your organization.\n5.  Click **Create account**.\n\n## Add a new account outside of an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Open the account picker dropdown from anywhere in the Dashboard, then select **Create new account**.\n2.  Select **Create an account outside of your organization**.\n3.  Enter your **Account name**, then select the country of operation.\n4.  Click **Create**.\n\n## Remove an account from an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf an account no longer belongs to your business, you can remove it from your organization.\n\n1.  Click the name of your organization in the account picker to open the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Next to the name of the account you want to remove, click the overflow menu ().\n3.  Click **Remove from org**.\n4.  After you remove every account from the organization, we permanently close the organization.\n\n## Centralize your team management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you create an organization, you can invite additional users to access your organization. To access your [organization team management settings](https://docs.stripe.com/get-started/account/orgs/team):\n\n1.  Open the [Organization Dashboard](https://dashboard.stripe.com/org/overview) by clicking your organization’s name in the account picker.\n2.  Click **Settings**.\n3.  Click **Team management**.",
  "title": "Build an Organization | Stripe Documentation",
  "description": "Select accounts to combine into an organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/orgs/sso",
  "markdown": "# Organization-level SSO | Stripe DocumentationThe Stripe Docs logo\n\n## Organization-level SSOInvite only\n\n## Manage single sign-on (SSO) for all accounts within your organization.\n\nIf your business operates across multiple Stripe accounts and uses single sign-on (SSO) to authenticate users, you can centrally configure SSO with Stripe Organizations. You can add accounts that already have SSO configured to an organization, or configure SSO for all your accounts after you create an organization.\n\n## Add accounts that you configured with SSO to an organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have already configured SSO across multiple accounts, your accounts must share the same SSO settings before you can add them to an organization. To do this, you must consolidate separate identity provider (IdP) apps and SSO integrations for each Stripe account into a single integration per IdP. Learn how to [consolidate SSO integrations for your existing Stripe accounts](https://docs.stripe.com/get-started/account/orgs/sso-consolidation).\n\nWhen you create your organization, Stripe consolidates the SSO settings of your accounts under your organization’s [user authentication](https://dashboard.stripe.com/org/settings/security/authentication) settings. This action changes the SSO settings in each individual account read-only. Users of the account can still sign into their accounts without using SSO. However, you can only edit specific settings, such as settings related to verified domains and enforcement, at the organization level.\n\n## Configure SSO throughout an organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstead of setting up SSO separately in each account, you can centrally configure SSO throughout all accounts in your organization. Any organization-level verified domains or SSO configurations apply to all accounts within the organization.\n\n### SSO settings for each domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can configure separate SSO settings for each verified domain or reuse the same SSO settings for multiple domains. For example, within the same organization, you can require SSO for one domain, set SSO to **Optional** for another, or disable it entirely to enable email and password logins.\n\n### Multiple Identity Providers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe allows you to have multiple IdPs when each verified domain has only one IdP. For example, you can configure users with a `rocketrides.com` email address to authenticate with Okta and configure users with a `rocketdelivery.com` email address to authenticate with AzureAD.\n\n## Assign account-level and organization-level roles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOrganization-level SSO operates similarly to SSO in a single account. When Stripe receives a SAML assertion from an IdP, we examine the accounts and roles specified within that SAML assertion. Based on this information, Stripe assigns roles to the user. You can assign a single account-level role, a single organization-level role, or a combination of both account-level and organization-level roles.\n\nWhen you assign these roles, use the `Stripe-Role-{accountID}` or `Stripe-Role-{org-id}` prefixes for the account and organization IDs respectively. We assign claims that include an account ID at the account-level, and claims that include organization IDs at the organization-level. Learn more about [account-level and organization-level roles](https://docs.stripe.com/get-started/account/orgs/team).\n\nThe snippet of the SAML assertion below has three claims being made for the user:\n\n1.  In `acct_ONE` the user is being assigned the `developer` role\n2.  In `acct_TWO` the user is being assigned the `developer` role\n3.  In `org_ALPHA` the user is being assigned the `view-only` role\n\nAs a result of these assertions, Stripe grants this user a session with the `developer` role in the `acct_ONE` and `acct_TWO` accounts. Additionally, we assign the `view-only` role in the `org-ALPHA` Organization and all accounts within that Organization:\n\n      `<saml2:Attribute Name=\"Stripe-Role-acct_ONE\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">developer</saml2:AttributeValue>       </saml2:Attribute>       <saml2:Attribute Name=\"Stripe-Role-acct_TWO\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">developer</saml2:AttributeValue>       <saml2:Attribute Name=\"Stripe-Role-org_ALPHA\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">view_only</saml2:AttributeValue>`",
  "title": "Organization-level SSO | Stripe Documentation",
  "description": "Manage single sign-on (SSO) for all accounts within your organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/orgs/team",
  "markdown": "# Manage your team | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your teamInvite only\n\n## Learn how to invite and interact with team members in your organization.\n\nYou can manage your team from the [Team](https://dashboard.stripe.com/settings/team) page. Administrators can update the team by adding or removing members, and changing the roles assigned to members. You can view all team members, and filter their activity in the security history. You can also manage two-factor authentication settings for an individual or the whole team.\n\n## Two-factor authentication controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports two-factor authentication (2FA) through TouchID, security key, SMS, and authenticator apps, such as Google Authenticator. As an additional security measure, we recommend that all users register for 2FA.\n\n### Require 2FA for all users in an Organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo require 2FA for Organization users, you must be assigned to the Administrator or Super Administrator roles:\n\n1.  Navigate to the [User Authentication](https://dashboard.stripe.com/org/settings/security/authentication) page.\n2.  Enable **Require two-step authentication for all team members**.\n\nAfter you enable this option, all users must register a 2FA device during their next login, which requires them to complete a 2FA challenge during all subsequent login attempts.\n\n### Reset 2FA for a single user![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a single user loses access to their 2FA devices, an Administrator or Super Administrator must reset the compromised user’s 2FA settings:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the compromised user’s name.\n3.  Click **Reset two-factor authentication**.\n\nStripe sends an email to the compromised user’s registered email address with instructions on how they can reset their 2FA devices.\n\n## View and filter your security history![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view your security-related events, navigate to the [Security history](https://dashboard.stripe.com/settings/security_history) page. You can filter your security filter by date, user, action type, and so on. Your user-based security history filters include:\n\n*   IP Address\n*   User\n*   API Key\n*   Device\n\n**Action filters** categorize hundreds of different actions based on product areas (for example, Billing, Radar, or Checkout). You can export your security history as a **CSV** file.\n\n## Team management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Organization-level and account-level roles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor every account you have access to, you must assign users either an organization-level or account-level role. Organization-level roles grant users access to all accounts within the Organization, including the Organization itself. Account-level roles allow users to access a specific assigned account with the assigned role.\n\nLet’s say that your organization contains three accounts: Banking, Finance, and Consulting. In this scenario, you can assign the following roles:\n\n*   **Organization-level role**: If you assign a user the ‘IAM Administrator’ role, they possess that role in all three accounts, as well as within the Organization itself. This grants them access to team management for all three accounts, in addition to Organization-level team management.\n*   **Account-level role**: If you assign a user the ‘IAM Administrator’ role in the Banking account, their access is limited solely to the IAM role within the Banking account. They can manage account-level teams exclusively within that account. However, this role doesn’t grant access to other accounts or Organization-level team management.\n\n## Differences in team management with Organizations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Organizations to manage your team either at the organization-level _or_ at the account-level.\n\n*   **Manage your team for an account**: Add, remove, and edit team members of an account, as well as update the roles of users associated with that account, in the [Team and security](https://dashboard.stripe.com/settings/team) page.\n    \n*   **Manage your team for an organization**: Manage user access and roles for specific accounts in the [Team](https://dashboard.stripe.com/org/settings/team) page. From here, you can also manage team members by granting access to multiple accounts simultaneously or providing access to the entire organization. You can only access this page if you have an Organization-level role.\n    \n\nYou can view all of the team members within your organization in the [Team](https://dashboard.stripe.com/org/settings/team) page. Additionally, you can:\n\n*   Invite new members directly.\n*   Edit members.\n*   Grant members access to additional accounts.\n*   Select the specific accounts that you want to grant access to.\n*   Remove members from your organization.\n\n### Add a team member![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a new team member:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/org/settings/team) page.\n2.  Click **Add Member**.\n3.  Add the email address of the user you want to invite. To invite multiple team members with the same role and access, enter the first email address, follow it with a space or a comma, then enter the next email, and continue this pattern for all required email addresses.\n4.  Select the [User Roles](https://docs.stripe.com/get-started/account/teams/roles) that you want to give to this team member. You can give multiple roles to a single user within the same account.\n5.  Select the account(s) that you want to give this user access to. You can select individual accounts, or grant access to the entire organization. Org-level access will give users access to all accounts within the organization, as well as access to the organization itself.\n6.  Click **Send Invites** to send the email with the steps for creating their Stripe Account.\n\n### Remove a team member![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remove an existing team member:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the user’s profile from the list of team members.\n3.  Click the overflow menu ().\n4.  Click **Remove member** to cancel this users’ access to this Stripe account immediately. This won’t cancel this user’s access to other accounts they have access to.\n\n### Edit a team member’s access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo edit an existing team member’s access:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the user’s profile from the list of team members.\n3.  Click **Manage roles**.\n4.  Choose at least one role that you want to assign to this user.\n5.  _(Optional)_ To remove the user, click **Remove member**.\n6.  Choose the accounts you want to assign roles in. You can add new accounts, remove accounts, or grant organization-level access.\n\n### View all users in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view all team members within an organization, navigate to the [Team](https://dashboard.stripe.com/org/settings/team) page. You can filter by:\n\n*   Role\n*   Name\n*   Email\n*   Status\n\nYou can export this information as a **CSV** file.",
  "title": "Manage your team | Stripe Documentation",
  "description": "Learn how to invite and interact with team members in your organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded",
  "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
  "title": "Types of events | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/events/types?event_types-invoice.paid",
  "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
  "title": "Types of events | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources/connect",
  "markdown": "# Connect platforms using the Sources API\n\n## Connect platforms using the Sources APIDeprecated\n\n## Considerations for Stripe Connect platforms adding support for new payment methods using the Sources API.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platform owners can make use of additional payment methods supported with Sources. To learn more about creating payments for connected users, and which approach is best for you, refer to our Connect [payments and fees documentation](https://docs.stripe.com/connect/charges).\n\n## Creating destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you opt for [destination charges](https://docs.stripe.com/connect/destination-charges), you should create Sources on your platform directly and create Charges using the appropriate destination parameter. [Customers](https://docs.stripe.com/api/customers \"Customers\") are charged by your platform, which then transfers the necessary amount to the destination account.\n\nWith destination charges that use cards, your platform name appears on statement descriptors and the charge is attributed to the connected account. With destination charges that use alternative payment methods (APMs), your platform name appears on statement descriptors but the charge is attributed to your platform.\n\n## Creating direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you opt for direct charges, you will need to make sure that the connected account is onboarded on the payment method you intend to use (see below). Direct charges require creating sources on connected accounts. You can do so by passing `source.stripeAccount` with a value of a connected account’s ID when using Stripe.js.\n\n`// Set the connected Stripe Account on which the source should be created var stripe = Stripe(`\n  \n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {stripeAccount: \"{{CONNECTED_STRIPE_ACCOUNT_ID}}\"}, );  stripe.createSource({   type: 'ideal',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: 'https://shop.example.com/crtA6B28E1',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nIf you’re creating sources server-side, you can make use of [authentication using the Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) with any of our supported libraries.\n\n### Cloning card Sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCard Sources (because they are not intrinsically tied to your platform as they do not require any authentication [flow](https://docs.stripe.com/sources#flow-for-customer-action)) can be created on your platform and then cloned to a connected account to create direct charges there.\n\nOnce you created a card Source and attached it to a Customer (see [Sources and Customers](https://docs.stripe.com/sources/customers) for more details on how these two objects interact), you can clone that card Source on a connected account using the connected account’s ID as the `Stripe-Account` header:\n\n`curl https://api.stripe.com/v1/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"cus_AFGbOSiITuJVDs\" \\   -d \"original_source\"=\"src_19YP2AAHEMiOZZp1Di4rt1K6\" \\   -d \"usage\"=\"reusable\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nCard Sources are generally `reusable`. However, when cloning them, you can override the usage to constrain how the connected account uses them. You do so by specifying the `usage` as `single_use` when cloning the Source.\n\nIf you are creating reusable card Sources on your connected account, you should make sure to attach them to Customers before charging them. Please refer to [Sources and Customers](https://docs.stripe.com/sources/customers) for more details on how to attach and manage Sources on Customers.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Supported Payment Methods](https://docs.stripe.com/sources)\n*   [Sources API reference](https://docs.stripe.com/api#sources)\n*   [Best Practices Using Sources](https://docs.stripe.com/sources/best-practices)",
  "title": "Connect platforms using the Sources API | Stripe Documentation",
  "description": "Considerations for Stripe Connect platforms adding support for new payment methods using the Sources API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/mobile/ios/sources",
  "markdown": "# Getting started with Sources in the iOS SDK\n\n## Learn how to use Sources in your iOS application.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nCreating a payment using [Sources](https://docs.stripe.com/sources) with the iOS SDK is a multi-step process:\n\n1.  [Create an STPSource object](#create-an-stpsource-object) that represents your customer’s payment method.\n2.  [Check if further action is required](#check-if-further-action-is-required) from your customer.\n\nIf no further action is required:\n\n*   Confirm the source is ready to use.\n*   Create a charge request on your backend using the source.\n\nIf further action is required:\n\n*   Present the user with any information they may need to authorize the charge.\n*   On your backend, listen to Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to create a charge with the source.\n*   In your app, display the appropriate confirmation to your customer based on the source’s status.\n\n[](#create-an-stpsource-object)\n\nOnce you’ve collected your customer’s payment details, you can use the `STPAPIClient` class to create a source. First, assemble an `STPSourceParams` object with the payment information you’ve collected. Then, pass this object to `STPAPIClient`’s `createSourceWithParams:` method.\n\nTo create an `STPSourceParams` object, use one of the helper constructors we provide, which specify the information needed for each [payment method](https://docs.stripe.com/sources).\n\n[](#check-if-further-action-is-required)\n\nTo determine whether further action is required from your customer, check the `flow` property on the newly created `STPSource` object. If `flow` is `STPSourceFlowNone`, no further action is required. For example, if you create a source for a card payment, its status is immediately set to `STPSourceStatusChargeable`. No additional customer action is needed, so you can tell your backend to create a charge with the source right away.\n\n`let cardParams = STPCardParams() cardParams.name = \"Jenny Rosen\" cardParams.number = \"4242424242424242\" cardParams.expMonth = 12 cardParams.expYear = 18 cardParams.cvc = \"424\"  let sourceParams = STPSourceParams.cardParams(withCard: cardParams) STPAPIClient.shared.createSource(with: sourceParams) { (source, error) in     if let s = source, s.flow == .none && s.status == .chargeable {         self.createBackendChargeWithSourceID(s.stripeID)     } }`\n\nIf the source’s flow is not `STPSourceFlowNone`, then your customer needs to complete an action before the source can be used in a charge request.\n\n| Flow | Description |\n| --- | --- |\n| `STPSourceFlowRedirect` | Your customer must be redirected to the [payment method](https://docs.stripe.com/sources)’s website or app to confirm the charge. See the section below for more information. |\n| `STPSourceFlowReceiver` | Your customer must push funds to the account information provided in the Source object. See the documentation for the specific [payment method](https://docs.stripe.com/sources) you are using for more information. |\n| `STPSourceFlowVerification` | Your customer must verify ownership of their account by providing a code that you post to the Stripe API for authentication. See the documentation for the specific [payment method](https://docs.stripe.com/sources) you are using for more information. |\n\nIf the source requires further action from your customer, your iOS app should _not_ tell your backend to create a charge request. Instead, your backend should listen for the `source.chargeable` webhook event to charge the source. This ensures that the source is charged even if the user never returns to your app after taking the required action. See [best practices](https://docs.stripe.com/sources/best-practices) for more information on supporting different payment methods using webhooks.\n\n## Redirect your customer to authorize a source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor sources that require redirecting your customer to authorize the payment, you need to specify a return URL when you create the source. This allows your customer to be redirected back to your app after they authorize the payment. For this return URL, you can either use a custom URL scheme or a universal link supported by your app. For more information on registering and handling URLs in your app, refer to the Apple documentation:\n\n*   [Implementing custom URL schemes](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW10)\n*   [Supporting universal links](https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html)\n\nTo handle redirecting your customer to the URL in the source object’s `redirect.url` parameter, we recommend using `STPRedirectContext`, which you can use to open the URL in `SFSafariViewController`, if available, or mobile Safari otherwise. To use `STPRedirectContext`, you’ll need to first set up your app delegate to forward URLs to the Stripe SDK.\n\n`// This method handles opening native URLs (for example, \"your-app://stripe-redirect\") func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {     let stripeHandled = StripeAPI.handleURLCallback(with: url)     if (stripeHandled) {         return true     } else {         // This was not a stripe url – do whatever url handling your app         // normally does, if any.     }     return false }  // This method handles opening universal link URLs (for example, \"[https://example.com/stripe_ios_callback](https://example.com/stripe_ios_callback)\") func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {     if userActivity.activityType == NSUserActivityTypeBrowsingWeb {         if let url = userActivity.webpageURL {             let stripeHandled = StripeAPI.handleURLCallback(with: url)             if (stripeHandled) {                 return true             } else {                 // This was not a stripe url – do whatever url handling your app                 // normally does, if any.             }         }     }     return false }`\n\n`STPRedirectContext`’s completion block is called after your customer returns to your app. At this point, the user may or may not have completed the authorization process. You can use webhooks on your own server to receive notification of a change in status of the source’s chargeable state. See [best practices](https://docs.stripe.com/sources/best-practices) for more information on how to build a confirmation screen when using sources.\n\nIf you’d like more help, check out the [example app](https://github.com/stripe/stripe-ios/tree/master/Example/Non-Card%20Payment%20Examples) that demonstrates creating a payment using several different payment methods.",
  "title": "Getting started with Sources in the iOS SDK | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/mobile/android/sources",
  "markdown": "# Getting started with Sources in the Android SDK\n\n## Learn how to use Sources in your Android application.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nCreating a payment using [Sources](https://docs.stripe.com/sources) with the Android SDK is a multi-step process:\n\n1.  [Create a Source object](#create-source-object) that represents your customer’s payment method.\n2.  [Check if further action is required](#check-if-further-action-is-required) from your customer.\n\nIf no further action is required:\n\n1.  Confirm the source is ready to use.\n2.  Create a charge request on your backend using the source.\n\nIf further action is required:\n\n1.  Present the user with any information they may need to authorize the charge.\n2.  On your backend, listen to Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to create a charge with the source.\n3.  In your app, display the appropriate confirmation to your customer based on the source’s status.\n\n[](#check-if-further-action-is-required)\n\nSome payment methods require your customer to complete a certain action before the source can be used in a charge request. For instance, customers using [giropay](https://docs.stripe.com/sources/giropay) must be [redirected](#redirecting-your-customer) to their online banking service to authorize the payment.\n\n`SourceParams giropayParams = SourceParams.createGiropayParams(         100,         \"Customer Name\",         \"yourapp://post-authentication-return-url\",         \"a purchase description\"); // Note: this is a synchronous method -- you should not run it on the UI thread Source giropaySource = stripe.createSourceSynchronous(giropayParams); if (Source.REDIRECT.equals(giropaySource.getFlow())) {     String redirectUrl = giropaySource.getRedirect().getUrl();     // then go to this URL, as shown below. }`\n\nFor sources that require redirecting your customer, you must specify a return URL when creating the source. This redirect URL should be unique and used consistently for your application. Do not use the same redirect URL in other applications, as it can result in a payment attempt that opens the wrong application after the redirect.\n\n## Redirect your customer to authorize a source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor sources that require your customer to complete an action (for example, verify using 3D Secure), redirect the customer out of your application to complete this step.\n\n`String externalUrl = mThreeDSource.getRedirect().getUrl(); // We suggest popping up a dialog asking the user // to tap to go to their browser so they are not // surprised when they leave your application. Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(externalUrl)); startActivity(browserIntent);`\n\nOnce the customer has completed the required action, they are redirected to the URL that was provided when creating the source.\n\nWhen declaring your activity that creates redirect-based sources, list an `intent-filter` item in your `AndroidManifest.xml` file. This allows you to accept links into your application. Your activity must include `android:launchMode=\"singleTask\"` or else a new copy of it is opened when your customer comes back from the browser.\n\n`<activity     android:name=\".activity.PollingActivity\"     android:launchMode=\"singleTask\"     android:theme=\"@style/SampleTheme\">     <intent-filter>         <action android:name=\"android.intent.action.VIEW\"/>         <category android:name=\"android.intent.category.DEFAULT\"/>         <category android:name=\"android.intent.category.BROWSABLE\"/>         <data             android:scheme=\"yourapp\"             android:host=\"post-authentication-return-url\"/>     </intent-filter> </activity>`\n\nTo receive information from this event, listen for your activity getting started back up with a new Intent using the `onNewIntent` lifecycle method.\n\n`@Override protected void onNewIntent(Intent intent) {     super.onNewIntent(intent);     if (intent.getData() != null && intent.getData().getQuery() != null) {         // The client secret and source ID found here is identical to         // that of the source used to get the redirect URL.          String host = intent.getData().getHost();         // Note: you don't have to get the client secret         // and source ID here. They are the same as the         // values already in your source.         String clientSecret = intent.getData().getQueryParameter(QUERY_CLIENT_SECRET);         String sourceId = intent.getData().getQueryParameter(QUERY_SOURCE_ID);         if (clientSecret != null                 && sourceId != null                 && clientSecret.equals(redirectSource.getClientSecret())                 && sourceId.equals(redirectSource.getId())) {             // Then this is a redirect back for the original source.             // You should poll your own backend to update based on             // source status change webhook events it may receive, and display the results             // of that here.         }         // If you had a dialog open when your user went elsewhere, remember to close it here.         mRedirectDialogController.dismissDialog();     } }`\n\nIf you’d like more help, check out the [example app](https://github.com/stripe/stripe-android/tree/master/example) on Github that demonstrates creating a payment using several different payment methods.",
  "title": "Getting started with Sources in the Android SDK | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bank-transfers/accept-a-payment?payment-ui=direct-api",
  "markdown": "# Accept a bank transfer | Stripe DocumentationThe Stripe Docs logo\n\nThe first time you accept a bank transfer payment from a customer, Stripe generates a virtual bank account for them, which you can then share with them directly. All future bank transfer payments from this customer get sent to this bank account. In some countries, Stripe also provides you with a unique transfer reference number that your customer should include with each transfer to make it easier to match the transfer against outstanding payments. Some countries have limits on the number of virtual bank account numbers that you can create for free.\n\nYou can find an overview of the common steps when accepting a bank transfer payment in the following sequence diagram:\n\nWith bank transfer payments, it’s possible that the customer sends you more or less than the expected payment amount. If the customer sends too little, Stripe partially funds an open payment intent. Invoices won’t be partially funded and remain open until incoming funds cover the full invoice amount.\n\nIf the customer sends more than the expected amount, Stripe attempts to reconcile the incoming funds against an open payment and keep the remaining excess amount in the customer cash balance. You can find more details on how Stripe handles reconciliation in the [reconciliation section](https://docs.stripe.com/payments/customer-balance/reconciliation) of our documentation.\n\nYou might have multiple open payments or invoices which can be paid with a bank transfer. In the default setup, Stripe attempts to [automatically reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation) the bank transfer by using information like the transfer’s reference code or the amount transferred.\n\nYou can disable automatic reconciliation and [manually reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation) payments and invoices yourself. You can override the automatic reconciliation behavior on a per-customer basis by setting [reconciliation mode](https://docs.stripe.com/api/customers/create#create_customer-cash_balance-settings-reconciliation_mode) to manual.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-a-customer)\n\nYou must associate a [Customer](https://docs.stripe.com/api/customers) object to reconcile each bank transfer payment. If you have an existing Customer object, you can skip this step. Otherwise, create a new Customer object.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Create and confirm a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-create-and-confirm-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage. Create and confirm a PaymentIntent on the server, specifying the amount and currency you want to collect. You must also populate the [customer parameter](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer) of the PaymentIntent creation request. Bank transfers aren’t available on PaymentIntents without a customer.\n\nBefore creating a Payment Intent, make sure to turn **Bank transfer** on in the [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) page of your Dashboard.\n\n#### Note\n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\" \\  -d \"payment_method_data[type]\"=customer_balance \\  -d confirm=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nIf the customer already has a balance high enough to cover the payment amount, the PaymentIntent immediately succeeds with a `succeeded` status. Customers can accrue a balance when they accidentally overpay for a transaction—a common occurrence with bank transfers. You must [reconcile customer balances within a certain period based on your location](https://docs.stripe.com/payments/customer-balance/reconciliation).\n\n[](#web-complete-bank-transfer)\n\nIf the customer balance isn’t high enough to cover the request amount, the PaymentIntent shows a `requires_action` status. The response has a `next_action` field containing a `type` value of `display_bank_transfer_instructions`. The `next_action[display_bank_transfer_instructions]` hash contains information to display to your customer so that they can complete the bank transfer.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n| Field | Description |\n| --- | --- |\n| [`type`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-type) | The type of bank transfer to use. Type must be `us_bank_transfer` in the US. |\n| [`reference`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) | A unique reference code to identify the bank transfer. Instruct your customer to include this code in the reference field of their bank transfer. |\n| [`amount_remaining`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-amount_remaining) | The remaining amount that needs to be transferred to complete the payment. Instruct your customer to transfer this amount. This might be different from the PaymentIntent amount if pre-existing funds in the customer balance were applied to the PaymentIntent or if your customer underpaid. |\n| [`currency`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-currency) | The currency for the remaining amount. |\n| [`financial_addresses`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions) | List of financial addresses for US bank accounts. Types include `aba` and `swift`. See below for details. |\n| [`hosted_instructions_url`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-hosted_instructions_url) | A link to a hosted page that guides your customer through completing the transfer. |\n\n#### `aba` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of an `aba` hash:\n\n`{   \"aba\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"routing_number\": \"444555666\"   },   \"supported_networks\": [     \"ach\",     \"domestic_wire_us\"   ],   \"type\": \"aba\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `aba` | The type of financial address. |\n| `supported_networks` | *   `ach`<br>*   `domestic_wire_us` | The list of networks supported by this address. |\n| `aba.account_number` | 111222333444 | The ABA account number. |\n| `aba.routing_number` | 444555666 | The ABA routing number. |\n| `aba.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### `swift` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of a `swift` hash:\n\n`{   \"swift\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"swift_code\": \"AAAA-BB-CC-123\"   },   \"supported_networks\": [     \"swift\"   ],   \"type\": \"swift\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `swift` | The type of financial address. |\n| `supported_networks` | *   `swift` | The list of networks supported by this address. |\n| `swift.account_number` | 111222333444 | The SWIFT account number. |\n| `swift.swift_code` | AAAA-BB-CC-123 | The SWIFT code. |\n| `swift.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter instructing your customer to initiate a transfer with their bank using the information you provide, it can take up to 5 days for the transfer to complete. The settlement timing depends on the banking rails that the transfer arrived through to Stripe:\n\n*   ACH transfers arrive within 1-3 business days.\n*   Domestic wire transfers (Fedwire) arrive on the same day (depending on whether the transfer is sent before the bank’s cut-off time).\n*   International wire transfers (SWIFT) arrive within 1-5 business days.\n\n[](#web-confirm-success)\n\nThe PaymentIntent stays in a `requires_action` status until funds arrive in the bank account. When funds are ready, the PaymentIntent status updates from `requires_action` to `succeeded`.\n\nYou need to set up your [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint to start receiving the `payment_intent.partially_funded` event.\n\nYou can [add a webhook from the Dashboard](https://dashboard.stripe.com/webhooks/create).\n\nAlternatively, you can use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints) to start receiving the [`payment_intent.partially_funded`](https://docs.stripe.com/api/events/types#event_types-payment_intent.partially_funded) event.\n\nStripe sends the following events during the payment funding flow when we update the PaymentIntent.\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.requires_action` | Sent during confirmation when the customer balance doesn’t have sufficient funds to reconcile the PaymentIntent, the PaymentIntent transitions to `requires_action`. | Instruct your customer to send a bank transfer with the `amount_remaining`. |\n| `payment_intent.partially_funded` | The customer sent a bank transfer that was applied to the PaymentIntent, but wasn’t enough to complete the payment. This might happen because the customer transferred an insufficient amount (because of a mistaken underpayment or fees charged by their bank) or because a remaining customer balance was applied to this PaymentIntent. PaymentIntents that are partially funded aren’t reflected in your account balance until the payment is complete. | Instruct your customer to send another bank transfer with the new `amount_remaining` to complete the payment. If you want to complete the payment with the partially applied funds, you can update the `amount` and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the PaymentIntent again. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n\n#### Caution\n\nWhen you change the amount of a partially funded PaymentIntent, the funds are returned to the customer balance. If other PaymentIntents are open, Stripe funds those automatically. If the customer is configured for manual reconciliation, you need to [apply the funds](https://docs.stripe.com/api/payment_intents/apply_customer_balance) again.\n\nWe recommend [using webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete.\n\n### Sample code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)`\n\n### View pending payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all pending bank transfer PaymentIntents in the [Dashboard](https://dashboard.stripe.com/payments) by applying the **Waiting on funding** filter to **Status** .\n\n[](#test-your-integration)\n\nYou can test your integration by simulating an incoming bank transfer using either the Dashboard or an HTTP request.\n\n### With the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate a bank transfer using the Dashboard, navigate to the customer’s page in the Dashboard. Under **Payment methods**, click **Add** and select **Fund cash balance (testmode only)**.\n\n### With the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make an API call to simulate a bank transfer.\n\n`curl https://api.stripe.com/v1/test_helpers/customers/ic_xxxxxxxxx/fund_cash_balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d reference=REF-4242`\n\n[\n\n## Handling temporary availability issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-temporary-availability-issues)\n\nThe following error codes indicate temporary issues with the availability of the payment method:\n\n| Code | Description | Handling |\n| --- | --- | --- |\n| `payment_method_rate_limit_exceeded` | Too many requests were made in quick succession for this payment method, which has stricter limits than the [API-wide rate limits](https://docs.stripe.com/rate-limits). | These errors can persist for several API requests when many of your customers try to use the same payment method, such as during an ongoing sale on your website. In this case, ask your customers to choose a different payment method. |\n\n#### Caution\n\nIf you anticipate heavy usage in general or because of an upcoming event, contact us as soon as you know about it.",
  "title": "Accept a bank transfer | Stripe Documentation",
  "description": "Use the Payment Intents API to accept bank transfer payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/setup",
  "markdown": "# Set up the Stripe Billing Connector for Salesforce CPQ\n\n## Configure and use the connector.\n\nThe Stripe Billing Connector for Salesforce CPQ syncs your products, prices, accounts, and orders from Salesforce to Stripe Billing. After you set up the connector and create data mappings, the service syncs this information from Salesforce and completes the collection and provisioning workflows in Stripe Billing.\n\n[](#install-connector)\n\nThe connector is a managed package that you install from the [Salesforce AppExchange](https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000FOm4xUAD) onto your Salesforce account.\n\nDuring the installation process, choose **Install for Admins Only**. Follow the on-screen prompts and approve third-party access. In Salesforce, search for “Stripe Billing Connector” to continue the setup process.\n\nIn the Stripe Billing Connector, follow the on-screen steps to:\n\n1.  Authorize access between your Salesforce environment and your Stripe account.\n2.  Define how data maps between Salesforce and Stripe.\n3.  Configure synchronization preferences.\n\n[](#data-map)\n\nUse the **Define Data Mapping** step to map the fields from the Salesforce objects to corresponding fields on the Stripe objects. For example, for a custom field that stores whether a price book entry is metered or licensed, specify that field to map to [recurring.usage\\_type](https://docs.stripe.com/api/prices/object#price_object-recurring-usage_type) on the Stripe `Price` object.\n\nThe connector automatically maps the following Salesforce objects to the corresponding Stripe objects:\n\nYou can also map information within Salesforce objects or to metadata fields within corresponding Stripe objects by [defining field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings).\n\n[](#preferences)\n\nUse the **Configure Sync Preferences** step to specify:\n\n*   **Sync record retention**: The number of sync records retained in Salesforce.\n*   **Start date**: After you [enable live syncing](#activate-syncing), the connector begins to sync data for activated orders to Stripe on or after this date. You can specify a date in the past.\n*   **Sync filters**: Adds filters to determine when to sync Salesforce orders, accounts, products, and pricebook entries. By default, the connector syncs orders when `Status = Activated`, but you can customize this behavior for your workflows.\n\nAfter setup completes and you [activate live syncing](#activate-syncing) for your integration, newly activated orders automatically:\n\n*   Create or update a `Customer` object in Stripe for the account that corresponds to the order. The `id` on the Stripe customer is available as a custom field called `Stripe ID` on the Salesforce account.\n*   Create or update products and prices in Stripe for each product in the order.\n*   Create a subscription schedule in Stripe for the activated order.\n*   Create a `Sync Record` custom object in Salesforce to indicate the sync status and any errors that arise.\n\n### Sync limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Refunds**: Use the Stripe Dashboard link on the Salesforce object to issue refunds through Stripe.\n*   **Payment and subscription status**: Use the Stripe Dashboard link to see an order’s subscription status, payment information, and related invoices.\n*   **Taxes**: Tax information isn’t synced between Salesforce and Stripe. To collect taxes on an invoice, use [Stripe Tax](https://docs.stripe.com/tax) to automatically calculate and apply taxes to the subscription or Stripe invoice for an order.\n\n[](#activate-syncing)\n\nIn the final step of the post-installation flow, you can enable live syncing now, or enable it later. Live syncing allows your integration to pull activated Salesforce orders into Stripe in real time. You can enable or disable live syncing of orders any time on the **Sync Preferences** tab of the application.\n\nYou can manually sync individual orders to test your integration, even when live syncing is disabled.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings)\n*   [Accounts and contacts](https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)",
  "title": "Set up the Stripe Billing Connector for Salesforce CPQ | Stripe Documentation",
  "description": "Configure and use the connector.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts",
  "markdown": "# Accounts and contacts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing the Stripe customer objects for your corresponding Salesforce accounts.\n\nAfter you set up the Stripe Billing Connector for Salesforce CPQ and [map your data](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings), Stripe creates a `Customer` object when an order finalizes. This happens when you associate an account and a primary contact with a quote from an activated order.\n\nIf you use a parent-child hierarchy for your Salesforce accounts, make sure that only the account that represents the billing entity (customer) correlates to an activated order. Stripe Billing doesn’t currently support separate billing and provisioning entities for subscriptions.\n\n## Field mappings for Stripe customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you configure the connector to create a Stripe `Customer` object for each Salesforce account, there isn’t a default mapping to a primary contact or order on the account. All customer fields are also optional.\n\nThe connector syncs a Salesforce account’s `Name` and `Description` fields to Stripe. To sync additional fields, you can [add field mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings) to customize the data that’s synced from Salesforce to Stripe.\n\n| Salesforce field (Account object) | Stripe customer | Notes |\n| --- | --- | --- |\n| Name | [Name](https://docs.stripe.com/api/customers/object#customer_object-name) |     |\n| Phone | [Phone](https://docs.stripe.com/api/customers/object#customer_object-phone) |     |\n| Description | [Description](https://docs.stripe.com/api/customers/object#customer_object-description) |     |\n|     | [Email](https://docs.stripe.com/api/customers/object#customer_object-email) | By default, the `Account` object in Salesforce doesn’t have an email field. You can create a subscription without a payment; however, you must supply an email address for collections. |\n| Billing street | [Address, line 1](https://docs.stripe.com/api/customers/object#customer_object-address-line1) | This address might affect the customer’s tax calculation, depending on your tax configuration. If the address is incomplete or differs from the billing address on the quote or order, you must provide a custom mapping for this data. |\n| Billing city | [Address, city](https://docs.stripe.com/api/customers/object#customer_object-address-city) |     |\n| Billing state | [Address, state](https://docs.stripe.com/api/customers/object#customer_object-address-state) |     |\n| Billing postal code | [Address, postal code](https://docs.stripe.com/api/customers/object#customer_object-address-postal_code) |     |\n| Billing country | [Address, country](https://docs.stripe.com/api/customers/object#customer_object-address-country) |     |\n| Phone | [Shipping, address, phone](https://docs.stripe.com/api/customers/object#customer_object-phone) |     |\n| Shipping street | [Shipping, address, line 1](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-line1) |     |\n| Shipping city | [Shipping, address, city](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-city) |     |\n| Shipping state | [Shipping, address, state](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-state) |     |\n| Shipping postal code | [Shipping, address, postal code](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-postal_code) |     |\n| Shipping country | [Shipping, address, country](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-country) |     |\n\n## Update account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccount and contact information sync in real time. When you create or update accounts in Salesforce, the connector creates and updates the Stripe `Customer` objects with the latest information from Salesforce when an order syncs. Because Salesforce is the primary source for account and contact information, any updates you make to a `Customer` object in Stripe aren’t synced to the corresponding account in Salesforce.\n\nStripe doesn’t allow merging of accounts. If you want to merge any customers in Salesforce, you must do so before you sync the account to Stripe. `Customer` objects synced to Stripe must have a valid ID in the Stripe ID field on the account.\n\n## Delete accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDeleting accounts or account information in Salesforce won’t affect the data in Stripe. Any subscriptions in Stripe continue to bill and operate as normal. You can’t delete Salesforce accounts with active subscriptions.\n\nDeleting a customer in Stripe is irreversible, cancels all subscriptions, and deletes any saved payment methods. The best practice is to retain the customer unless you created it accidentally.\n\n## Merge accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSalesforce allows you to merge up to three Salesforce accounts. Merging deletes the dependent Salesforce accounts, and their dependent Salesforce records become the primary Salesforce account’s records.\n\nThe connector doesn’t sync these changes into Stripe. Any Stripe subscriptions that belong to the deleted Salesforce account still belong to the original Stripe customer that corresponds to the deleted Salesforce account.\n\n#### Note\n\nThe child account is the account that’s merged into the primary account.",
  "title": "Accounts and contacts | Stripe Documentation",
  "description": "Learn about syncing the Stripe customer objects for your corresponding Salesforce accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/products-prices",
  "markdown": "# Products and prices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing your products and prices between Salesforce and Stripe.\n\nWhen you create products and prices in Salesforce, they don’t sync to Stripe immediately. Instead, the products and prices sync to Stripe when they’re used in an activated order. You don’t need to manually create this information in Stripe.\n\nSalesforce is the primary source for product and pricing information. This means all pricing, product descriptions, SKUs, and so on sync from Salesforce to Stripe. Any updates you make to this information in Stripe won’t update the related products and prices in Salesforce. Additionally, if you activate a new order in Salesforce using updated product or pricing information, this action updates corresponding changes you’ve made in Stripe.\n\n## Create prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPricing data can come from either the Salesforce `OrderItem` or the linked `PricebookEntry`. When creating the Stripe price, the connector checks for differences between these Salesforce objects and decides which one to use. If the `PricebookEntry` data differs from the `OrderItem` data, the connector uses the `OrderItem` to create the Stripe price. Otherwise, the connector uses the `PricebookEntry`.\n\n### Reuse Stripe prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Billing Connector for Salesforce CPQ reuses the prices created from a `PricebookEntry` that the connector previously synced. The connector creates a new price for prices generated using the `OrderItem`. You can’t reuse order items because they’re unique, but you can reuse pricebook entries across multiple order items. In both cases, the corresponding Stripe price ID is written back to the Salesforce object.\n\n## Field mappings for products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Billing Connector for Salesforce CPQ creates a product in Stripe even if there isn’t relevant data in Salesforce. All product fields are optional.\n\n| Salesforce field (Product2 object) | Stripe product |\n| --- | --- |\n| Name | [Name](https://docs.stripe.com/api/products/object#product_object-name) |\n| Description | [Description](https://docs.stripe.com/api/products/object#product_object-description) |\n\n## Field mappings for prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector supports the following price types in Stripe:\n\n*   Licensed prices – If the Billing Type (`SBQQ_BillingType_c`) field in Salesforce is either None or Advanced, the connector creates a licensed price in Stripe.\n*   Metered or usage prices – If the Billing Type (`SBQQ_BillingType_c`) field in Salesforce is Arrears, the connector creates a metered or usage price.\n*   Decimal prices – If the decimal value of your price has more precision than 12 decimal places, the connector rounds your price to 12 decimals.\n*   One-time and recurring prices – The connector treats any product with populated subscription fields as a recurring price. Metered prices must be recurring, but you can have tiered one-time prices. If you want to create a one-time price, don’t set the following fields on the Salesforce product:\n    *   Subscription Pricing (`SBQQ__SubscriptionPricing__c`)\n    *   Subscription Type (`SBQQ__SubscriptionType__c`)\n    *   Subscription Term (`SBQQ__SubscriptionTerm__c`)\n    *   Billing Frequency (`SBQQ__BillingFrequency__c`)\n\n| Salesforce field (PricebookEntry object) | Stripe price | Notes | Required |\n| --- | --- | --- | --- |\n| Product | [Product](https://docs.stripe.com/api/products/object) | Maps the Stripe `Product` object that’s linked to the Salesforce `Product` and `Pricebook` objects with the corresponding `Price` object in Stripe. |     |\n| Description | [Description](https://docs.stripe.com/api/products/object#product_object-description) |     |     |\n| Unit price | [Unit amount decimal](https://docs.stripe.com/api/prices/object#price_object-unit_amount_decimal) | Represents the amount billed to the customer at the frequency specified in the `Billing Frequency` field. |     |\n| Billing frequency | [Recurring, interval count](https://docs.stripe.com/api/prices/create#create_price-recurring-interval_count) | Required for recurring prices only. Supported values include monthly, quarterly, semi annual, and annual. These values map to the integer-equivalent. |     |\n| Billing type | [Recurring, usage type](https://docs.stripe.com/api/prices/create#create_price-recurring-usage_type) | Required for recurring prices only. An Arrears value maps to metered. An Advanced value maps to licensed. |     |\n| CPQ global term unit setting | [Recurring, interval](https://docs.stripe.com/api/prices/create#create_price-recurring-interval) | Required for recurring prices only. This is chosen during setup and isn’t a field-level mapping. |     |\n| Currency | [Currency](https://docs.stripe.com/api/prices/create#create_price-currency) | If your Salesforce organization has multi-currency enabled, we map the `CurrencyIsoCode` on the `PricebookEntry` to a Stripe currency. Otherwise, we use the default currency from setup. |     |\n\n### Tiered pricing using consumption schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure tiered pricing in Stripe by setting up a Salesforce Consumption Schedule–and associated rates–for products in Salesforce. Stripe uses the consumption schedule to associate tiered pricing with the line items billed using metered or licensed billing. You can use only one consumption schedule per order line.\n\nStripe Billing requires an unbounded tier to exist, which means a consumption rate with no value for the upper bound. The connector doesn’t use the processing order on a consumption rate, or the billing term and billing term unit on the consumption schedule associated with the order product. The connector uses the billing frequency and subscription term on the order line instead.\n\nFor tiered pricing, the connector maps data from the following Salesforce objects:\n\n*   `OrderLine` – If the `OrderLine` data differs from the corresponding `PricebookEntry`, the connector uses the `OrderLine` data and creates a new `Price` object in Stripe.\n*   `PricebookEntry` – The connector uses this value if the pricing data matches the `OrderLine` and the consumption schedule and rate data aren’t customized on a per-customer basis.\n*   `Consumption Schedule` – Although Salesforce allows you to associate multiple consumption schedules with a product, the connector supports only one consumption schedule per order line.\n*   `Consumption Rate` – The connector uses the rate associated with a consumption schedule to define each tier entry in the Stripe price. You can have multiple rates for a consumption schedule.\n\n#### Note\n\nYou can’t customize the field mapping to generate the tiered pricing configuration in Stripe, or use custom fields for price or tier boundaries.\n\nIf you customize the consumption schedule and consumption rate data on a per-customer basis, Stripe creates a new `Price` object to represent the customized pricing. The new price appears in the Stripe ID field on the `Order Line` object in Salesforce.\n\nTo define a mapping for tiered pricing, add the following `PricebookEntry` to your prices field mapping. These fields are required.\n\n| Salesforce field (PricebookEntry object) | Stripe price | Notes |\n| --- | --- | --- |\n|     | [Billing scheme](https://docs.stripe.com/api/prices/create#create_price-billing_scheme) | Set to tiered when an order line in Salesforce has a consumption schedule associated with it. |\n\n| Salesforce consumption schedule | Stripe price | Notes |\n| --- | --- | --- |\n| Type | [Tiers mode](https://docs.stripe.com/api/prices/object#price_object-tiers_mode) | A slab type uses graduated. A range type uses volume. |\n\nEach consumption rate that’s associated with a consumption schedule results in an additional tiers entry on the Stripe `Price` object. These fields are required.\n\n| Salesforce consumption rate | Stripe price | Notes |\n| --- | --- | --- |\n| Upper bound | [Tiers, Up to](https://docs.stripe.com/api/prices/object#price_object-tiers-up_to) | Stripe doesn’t have a lower bound and assumes the lower bound value of the first tier is zero. If this value is empty in Salesforce, Stripe uses the inf value to indicate there isn’t a limit for the upper bound. |\n| Pricing method |     | A per unit value instructs the connector to use the `unit_amount_decimal` field when mapping the price. If the value is flat fee, the connector uses the `flat_amount_decimal` field for the price. |\n| Price | Tiers, [Flat amount decimal](https://docs.stripe.com/api/prices/object#price_object-tiers-flat_amount_decimal) or [Unit amount decimal](https://docs.stripe.com/api/prices/object#price_object-tiers-unit_amount_decimal) | The pricing type used depends on the `Pricing Method` field. |\n\n## Manually sync products and prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen testing in a Salesforce sandbox environment, you can manually sync your entire product catalog for inspection in your Stripe test account. The manual sync respects any product and price filters you set.\n\nUse the following buttons in the **Settings** section of the connector:\n\n*   **Sync all products** – Syncs all products (but not prices) to your Stripe test account, regardless of when they were last updated. This operation occurs in the background and can take a couple minutes to complete. If you delete any products in Salesforce, they aren’t deleted or archived in Stripe.\n    \n*   **Sync all pricebooks** – Syncs all products and prices to your Stripe test account, regardless of when they were last updated. This operation occurs in the background. If you delete any products or prices in Salesforce, they aren’t deleted or archived in Stripe. After you create a price and set a recurring billing schedule in Stripe, you can’t update these parameters and sync them from Salesforce. Attempting to do so results in sync errors.\n    \n\nIf you already synced a product or price to your Stripe account and want a new sync, you can delete the contents of the Stripe ID field on the Salesforce object in your Salesforce account. Then sync again to create a new resource in Stripe.\n\n## Customize product pricing on orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Salesforce CPQ, you can optionally customize the unit price of a product on a quote. If you customize the price, this causes the information to differ from the price that’s linked to the product on the activated order. In this case, the connector creates a unique price in Stripe to represent the customized price. The Stripe price ID appears on the Stripe ID field for the order.\n\nWhen you create a data mapping with a customized price for an order, the price appears on the order line level and not the Salesforce price book entry level. Pricing is considered customized if any of the related fields (for example, recurring fields, amount, or currency) differ between the price book entry price and the order line price.\n\n## Multi-currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your Salesforce organization has [multi-currency enabled](https://help.salesforce.com/s/articleView?id=sf.admin_enable_multicurrency.htm&type=5), the connector maps the `CurrencyIsoCode` on the `PricebookEntry` to the equivalent [Stripe currency](https://docs.stripe.com/currencies) during Stripe price creation. This makes sure subsequent [invoices](https://docs.stripe.com/api/invoices) are billed in the proper currency.\n\nWhen billing in multiple currencies, consider the following:\n\n##### Multiple currencies per Stripe customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports one active currency per customer. This means each Stripe customer can’t have multiple active [subscriptions](https://docs.stripe.com/api/subscription) that use different currencies. For example, if a customer has an active [subscription](https://docs.stripe.com/api/subscription) that’s billed in USD, you must wait until that subscription ends before creating a new subscription in a different currency, such as GBP.\n\n##### Order amendments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Salesforce order amendments must use the same currency as the original order. Orders and order amendments can’t have a mix of currencies among the order items.\n\n##### Exchange rates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector doesn’t handle currency conversion. It simply passes through the price and currency pair found on the `PricebookEntry`.",
  "title": "Products and prices | Stripe Documentation",
  "description": "Learn about syncing your products and prices between Salesforce and Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/subscriptions",
  "markdown": "# Subscription orders | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing your subscription orders between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ creates a subscription schedule in Stripe for every activated order in Salesforce that has a subscription type. In a Salesforce order, each order line creates a subscription item (for a recurring product) or an invoice item in Stripe. Order lines can’t be split into multiple line items in Stripe.\n\nBy default, each subscription schedule in Stripe doesn’t automatically renew. To renew a subscription, do either of the following:\n\n*   Create an order amendment with a new subscription start date and term.\n*   Configure your integration to auto-renew all subscriptions.\n\n#### Note\n\nThe “native” quote object–distinct from the `CPQ Quote` object–in Salesforce isn’t used. The connector uses orders generated from the `CPQ Quote` object.\n\n## Determine which orders to sync ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector checks Salesforce every 90 seconds for updated orders since the last successful order sync.\n\nThe connector attempts to sync all orders that meet the following conditions:\n\n*   The order status is activated. You can remove or customize this default condition.\n*   The order type is new.\n*   At least one of the order lines is a subscription product. This means it’s set to `SBQQ_SubscriptionType_c`.\n\nIf all order lines are one-time purchase items, the connector creates a one-time invoice instead of a subscription.\n\n### Order dates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set up the connector, you can choose a backfill date for orders. Only orders created after this date sync to Stripe.\n\nYou can backdate subscription start dates, which is the order start date used in Stripe. To prevent errors when activating the order, you must provide a start date on the quote and related order.\n\nYou can optionally provide a trial end date. If you don’t set a trial date, the customer won’t receive a trial period.\n\n### Order sync conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add custom conditions to the default sync conditions. These conditions are described using standard SOQL syntax.\n\nTo add custom conditions or remove default conditions, navigate to **Stripe Billing Setup** > **Sync Preferences** > **Custom Order Sync Conditions**.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector can’t sync orders with more than 100 recurring line items. An error appears in Salesforce if an order has more than 100 recurring lines.\n\nYou must specify quantities as an integer in Salesforce. Stripe doesn’t allow decimal quantities. An error appears in Salesforce if an order has a decimal quantity.\n\nAll line items in an order must have the same interval count and interval type. The interval count maps from `Billing Frequency`, by default. The interval type is daily or monthly. Stripe doesn’t allow different billing frequencies in the same order, which means you can’t have one line item billed every other month and another line item billed every month.\n\n### Exclude line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, all line items (including zeroed line items) sync from Salesforce to Stripe. You can exclude certain line items from the subscription schedule that’s created in Stripe. For example, you can exclude line items that are for informational purposes only that you don’t want to display on the recurring invoice in Stripe.\n\nTo exclude line items, set `Skip Line Item in Stripe` on the order item to `true`.\n\nWhen this field is set to `true`, the connector skips the order item and excludes it from the line items of the subscription schedule phase in Stripe. The internal field name is `Skip_Line_Item__c` (not excluding the package prefix).\n\n## Subscription schedule mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn activated order in Salesforce creates a subscription schedule in Stripe. The fields map as follows.\n\n| Salesforce order field | Stripe subscription schedule field | Notes | Required |\n| --- | --- | --- | --- |\n| Quote, Start date (`SBQQ_StartDate_c`) | [Start date](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-start_date) |     |     |\n| Quote, Subscription term | [Phases, Iterations](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases-iterations) |     |     |\n|     | [End behavior](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-end_behavior) | The default value is `cancel`. If you want the subscription to auto-renew, you can configure this mapping in the data mapper. |     |\n| Payment term (`SBQQ_PaymentTerm_c`) | Default settings, Invoice\\_settings, [Days until due](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-default_settings-invoice_settings-days_until_due) |     |     |\n\n## Line item mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach line item of an activated order in Salesforce maps as follows. These fields are required.\n\nIf the unit price for an order item is different from the pricebook unit price, the connector uses the order item price and creates a new Stripe price.\n\n| Salesforce field (OrderItem object) | Stripe line item field | Notes |\n| --- | --- | --- |\n| Pricebook Entry, UnitPrice | [Price](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-price) | The Stripe price contains the exact unit amount specified on the pricebook item. If you use a custom field to represent the recurring price billed to the customer, you can configure this mapping. |\n| OrderItem, UnitPrice | [Price](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-price) | The Stripe price contains the exact unit amount specified on the order line item. If you use a custom field to represent the recurring price billed to the customer, you can configure this mapping. |\n| Quantity (`OrderItem.SBQQ_OrderedQuantity_c`) | [Quantity](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-quantity) | You must specify the quantity as an integer; otherwise, the quantity is forced to `1` and the price adjusts to represent the net amount of the line item cost. If the billing type is `arrears` (metered billing), the quantity isn’t set on the line item. Instead, you must report the quantity to Stripe before the end of the customer’s billing period. |\n\n## Subscription changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t update an activated order in Salesforce, and any changes you make to an order in Salesforce won’t sync to Stripe. To adjust or partially cancel a subscription mid-cycle, you can use an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments).\n\nBy default, subscription schedules won’t automatically renew. To update the renewal information, create an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments) that’s associated with the original contract.\n\nYou can also customize this functionality to auto-renew by default, or manage the renew logic directly in Stripe.",
  "title": "Subscription orders | Stripe Documentation",
  "description": "Learn about syncing your subscription orders between Salesforce and Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources/best-practices",
  "markdown": "# Best practices for using Sources\n\n## Best practices for using SourcesDeprecated\n\n## Best practices to accept a variety of payment methods through a single integration.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nThe flexibility of the Sources API helps you minimize the changes required to support additional payment methods as you add them.\n\n## Typical flow for card payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn a typical checkout flow for [card payments](https://docs.stripe.com/sources/cards) (excluding 3D Secure), your integration collects the card information and creates a source, and uses it to make a charge request. Because it requires no additional action from the customer and card payments provide synchronous confirmation, we can immediately confirm if the payment is successful and that the funds are guaranteed—using [webhooks](https://docs.stripe.com/webhooks \"webhook\") isn’t necessary.\n\n## The required use of webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOther payment methods may require your customer to take [additional action](https://docs.stripe.com/sources#flow-for-customer-action) (for example, a redirect) before a source becomes `chargeable` and can be used to make a charge request (for example, [iDEAL](https://docs.stripe.com/sources/ideal)). This transition generally happens asynchronously and may even occur after the customer leaves your website. For these reasons your integration must rely on webhooks to determine when a source becomes chargeable before creating a charge.\n\nStripe sends the following webhook events to notify you about changes to the status of the source:\n\n| Event | Description | Suggested action |\n| --- | --- | --- |\n| `source.chargeable` | A Source object becomes `chargeable` after a customer has authenticated and verified a payment. | Create a Charge. |\n| `source.failed` | A Source object failed to become chargeable because your customer declined to authenticate the payment. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n| `source.canceled` | A Source object expired and you can’t use it to create a charge. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n\nSimilarly, when creating a charge, certain [asynchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment methods might require days for the funds to be confirmed and the charge to succeed, requiring webhooks to know when to confirm and eventually fulfill your orders.\n\nStripe sends the following webhook events to notify you about changes to the status of a charge:\n\n| Event | Description | Suggested action |\n| --- | --- | --- |\n| `charge.pending` | The Charge is pending (asynchronous payments only). | No action required. |\n| `charge.succeeded` | The Charge succeeded and the payment is complete. | Finalize the order and send a confirmation to the customer over email. |\n| `charge.failed` | The Charge has failed and the payment couldn’t be completed. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n\n## Building a flexible integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo ensure that your checkout process is flexible and ready to support multiple payment methods, we recommend the following approach:\n\n### Source creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating [Sources](https://docs.stripe.com/api#sources), record the source ID on your internal order representation so that you can retrieve the order when you receive and process `source.chargeable` webhooks. Make sure to index your order objects based on this `source` attribute for efficient lookup.\n\n### Charge creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDelivery of the `source.chargeable` webhook charges the Source. When receiving the webhook, retrieve your internal order representation by a look-up based on the received source ID and verify that the order is awaiting a payment.\n\nWhen making a charge request, use your internal order ID as an [idempotency key](https://docs.stripe.com/api#idempotent_requests) to avoid any possible race condition. Additionally, if the source is reusable and you want to reuse it, make sure to attach it to a [Customer](https://docs.stripe.com/api#customers) before charging it. Refer to the [Single-use or reusable](https://docs.stripe.com/sources#single-use-or-reusable) and [Sources & Customers](https://docs.stripe.com/sources/customers) guides to learn more about how to handle single-use and reusable Sources and how they interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\nSimilarly to source creation, record the charge ID on your internal order representation so that you can retrieve the order when you receive and process `charge.succeeded` webhooks.\n\n### Confirmation page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your customer takes the required actions to authorize a payment (for example, they’ve followed a redirect) you should present a confirmation page that shows the state of the order. You can do this by polling the order internally.\n\nBecause webhook delivery latency isn’t guaranteed, if want to further streamline your confirmation page, you can poll for the status of the associated Source in your client-side code. When you detect that your Source has become `chargeable`, you can initiate a Charge creation using that Source without waiting for the `source.chargeable` webhook to arrive.\n\nBe aware that some types of Sources take minutes (or even days) to become `chargeable`. If you decide to poll the Source, we recommend that you time out at some point and tell the customer that their order is awaiting payment confirmation, then send them a payment confirmation email asynchronously. You can see our recommended customer-facing messaging for each Source status in the table below.\n\nClient-side polling stops if the customer leaves your page. This means that you **must also** integrate against the `source.chargeable` [webhook](#the-required-use-of-webhooks) to make sure you don’t lose track of your customer’s order.\n\nIf you’re using Stripe.js, you can use [stripe.retrieveSource()](https://docs.stripe.com/js#stripe-retrieve-source) to implement your own polling:\n\n`// In order-confirmation-page.js  const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  // After some amount of time, we should stop trying to resolve the order synchronously: const MAX_POLL_COUNT = 10; let pollCount = 0;  const pollForSourceStatus = async () => {   const {source} = await stripe.retrieveSource({id: SOURCE_ID, client_secret: CLIENT_SECRET})   if (source.status === 'chargeable') {     // Make a request to your server to charge the Source.     // Depending on the Charge status, show your customer the relevant message.   } else if (source.status === 'pending' && pollCount < MAX_POLL_COUNT) {     // Try again in a second, if the Source is still `pending`:     pollCount += 1;     setTimeout(pollForSourceStatus, 1000);   } else {     // Depending on the Source status, show your customer the relevant message.   } };  pollForSourceStatus();``\n\nThe table below contains recommendations for potential customer-facing messages you can show based on the Source’s status.\n\n| Status | Customer-facing messaging |\n| --- | --- |\n| Source is `chargeable` | Your order was received and is awaiting payment confirmation. |\n| Source is `canceled` | Your payment failed and your order couldn’t be processed. |\n| Source is `failed` | Your payment failed and your order couldn’t be processed. |\n| Source is still `pending` after polling for a while | Your order was received and is awaiting payment confirmation. |\n\nAfter you create a Charge (and if the user is still on your confirmation page), you can show the following messages based on the status of the Charge:\n\n| Status | Customer-facing messaging |\n| --- | --- |\n| Charge is `pending` | Your order was received and is awaiting payment confirmation. |\n| Charge is `failed` | Your payment failed and your order couldn’t be processed. |\n| Charge is `succeeded` | Your payment is confirmed and your order is complete. |\n\n### Order confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly confirm your order after you receive the `charge.succeeded` webhook (this may happen instantly, but it may not). Send an email to the customer at this stage because the payment confirmation can take days for asynchronous payments.\n\n### Cancellations and failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nListen for the `source.canceled` and `source.failed` webhooks and make sure to cancel the order associated with the source concerned. If you follow the best practices above, you should never receive a `source.canceled` webhook for sources that were previously `chargeable` (as your `source.chargeable` handler should have created a charge immediately, preventing the source from getting canceled). You’ll still receive `source.canceled` webhooks for sources that were never `chargeable` and remained `pending`, generally an indication that your customer left your checkout flow early. You can also receive a `source.failed` webhook whenever the Customer refused the payment or a technical failure happened at the payment scheme level.\n\nYou should also listen for the `charge.failed` webhooks to make sure to cancel the order associated with the received charge.\n\nFor each of these events, we recommend that you notify your customer that their order failed and to invite them to re-engage in your payment flow, if desired.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Supported payment methods](https://docs.stripe.com/sources)\n*   [Sources API reference](https://docs.stripe.com/api#sources)\n*   [Considerations for Stripe Connect platforms](https://docs.stripe.com/sources/connect)",
  "title": "Best practices for using Sources | Stripe Documentation",
  "description": "Best practices to accept a variety of payment methods through a single integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments",
  "markdown": "# Subscription order amendments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about creating order amendments for your subscription orders.\n\nThe Stripe Billing Connector for Salesforce CPQ creates a subscription schedule in Stripe for every Salesforce order that’s synced with a subscription type. To modify an existing order, you create an order amendment. An order amendment in Salesforce results in a new subscription schedule phase on an existing subscription schedule in Stripe.\n\nDepending on your use case, you might need to create one of the following amendment types:\n\n*   [Insertion order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#insertion-order)\n*   [Termination order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#termination-order)\n*   [Prorated order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#prorated-order)\n\n[](#insertion-order)\n\nTo adjust or partially cancel an activated order mid-cycle, you use an insertion order amendment. The connector updates the subscription schedule in Stripe with the new products and quantity of the order amendment in Salesforce. The connector uses the same mapping as the initial order integration.\n\n### Start and end dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOrder amendments can’t have gaps between the start and end dates. To prevent any errors, the start date of the order amendment must be:\n\n*   On or before the end date of the previous order or order amendment, or\n*   The same start date as the previous initial order or order amendment\n\nAll order amendments must co-terminate with the initial order. The Salesforce CPQ uses the start date of a contract combined with the subscription term to calculate the end date. This means that all order amendments must have the same end date (start date and subscription term).\n\n### Order deltas ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn order amendment includes only the delta from the previous order. The connector pulls all previous orders and aggregates all previous line items to determine what subscription items to include in the new subscription schedule phase. Stripe doesn’t reuse or connect the items from one phase of a subscription to items from a previous phase.\n\n### Order contracts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo modify a subscription in Stripe, you must connect an order and order amendment to the same contract. The Salesforce CPQ does this automatically for each order and order amendment that’s contracted.\n\nWe recommend contracting from the order in the Salesforce CPQ. Stripe doesn’t have a direct representation of the Salesforce `Contract` object.\n\n### Item prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUnless the order item price changes, Stripe uses the same `Price` object across subscription schedule phases.\n\n## Revise and terminate order lines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you partially or fully terminate a previous order line, this action creates a negative-quantity order line in Salesforce. Stripe doesn’t allow negative line items. If an order amendment removes a product or some quantity of a product from a subscription, the negative-quantity order lines aggregate with the previous order lines that they revise.\n\nFor example, an initial order has a line item with a quantity of 2. The order amendment decreases the quantity by 1. As a result, the new subscription schedule phase in Stripe has a single subscription item with a quantity of 1.\n\nFor positive-quantity order lines, the connector creates a unique subscription schedule phase item in Stripe.\n\nAll order items that modify an order line in a previous order amendment must exist on the previous subscription phase. In other words, if you skip a line item on an order, you must skip that line item on the order amendment if you revise the line item.\n\n## Multiple order lines with the same product and price ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t allow multiple subscription schedule phase items with the same price ID. Salesforce doesn’t have this limitation.\n\nIf you use the same price on multiple order lines, the connector does the following:\n\n*   Duplicates the price in Stripe\n*   Adds the price to the subscription schedule phase\n*   Archives the price after it’s used (`active = false`)\n\nThe duplicated prices in Stripe contain the following metadata:\n\n*   `salesforce_duplicate = true`—Indicates that the price is a duplicate of another price\n*   `salesforce_auto_archive = true`—Auto-archives the price after use\n*   `salesforce_original_stripe_price_id = price_xyz`—Includes the ID of the price used for the duplicated price\n\n## Mid-month amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector requires that all order amendments co-terminate with the initial order. If the amendment order starts on a different day of the month than the initial order, you must:\n\n*   Set the end date on the amendment order.\n*   Set the subscription term to the number of whole months in the amendment order.\n\nExample of a mid-month order amendment:\n\n|     | Initial order | Order amendment |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 15, 2022 |\n| **End date** | December 31, 2022 | December 31, 2022 |\n| **Subscription term** | 12  | 10  |\n\n## Backdated amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector processes backdated amendments in current time. A backdated order amendment starts in the past, which means the latest phase on the subscription schedule won’t align with the start date on the order amendment.\n\nFor example, a customer wants to amend an existing subscription, and pushes the amendment order through the connector at a later date than its effective date.\n\n## Same-day amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector can process same-day amendments, such as the following scenarios:\n\n*   A subscription starts today, and the customer wants to amend their contract on the same day that it started.\n*   A subscription starts on a future date, and the customer wants to amend the order with a start and end date that’s the same as the original order.\n\n### Same-day amendments with an existing subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this case, the connector treats the amendment as a prorated order amendment, with some differences:\n\n*   The end date of the previous phase uses a special `now` value, instead of midnight on the current day (which, in this example, already passed).\n*   The start date of the next phase (for example, the order amendment) uses a `now` value as well.\n*   The amounts of the prorated line items are equal to the full billing amount for the duration of the contract.\n\n### Same-day future amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a subscription hasn’t started, you can’t use the special `now` value in the same-day amendment when the subscription starts. In this case, the connector does the following:\n\n*   Collects any one-time line items from the order (initial or amendment) that shares the same order period (for example, the start and end dates)\n*   Adds these items to the new phase\n*   Removes the phase that represents the previous order\n\nStripe completely removes the subscription schedule phase metadata that’s associated with the previous order.\n\n## Insertion order amendment example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s an example order amendment and how it maps to Stripe Billing.\n\n**Initial order**—The initial order combines the customer and subscription schedule into a single subscription phase in Stripe.\n\n**Order amendment**—On January 15, 2022, you create an order amendment in Salesforce for the initial order.\n\nThe initial order and order amendment have the following values:\n\n|     | Initial order | Order amendment |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 1, 2022 |\n| **Subscription term** | 12  | 11  |\n| **Line items** | One<br><br>Product A<br><br>*   Quantity: 10<br>*   Unit price: 10 USD<br>*   Billing term: Monthly | Two<br><br>Product A<br><br>*   Quantity: 6<br>*   Unit price: 10 USD<br><br>Product B<br><br>*   Quantity: 5<br>*   Unit price: 20 USD |\n\nIn the Salesforce CPQ, the order amendment represents Product A as an order line with quantity -4 (decrease of quantity 4). Because the unit price is the same, Stripe uses the same `Price` object on the subscription schedule phase item.\n\nAfter the order amendment activates, the subscription schedule updates to contain the following phases:\n\n|     | Phase 1 | Phase 2 |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 1, 2022 |\n| **End date** | February 1, 2022 | February 1, 2023 |\n| **Items** | Product A, Quantity: 10 | *   Product A, Quantity: 6, Same price<br>*   Product B, Quantity: 5 |\n\n[](#termination-order)\n\nTo fully cancel a contract, you use a termination order amendment. The order amendment sets the quantity of all line items on the order to 0.\n\nWhen this happens, the connector updates the end date of the last subscription schedule phase to the start date of the termination order amendment.\n\nTo fully terminate an order on the same day it starts, you [cancel](https://docs.stripe.com/api/subscription_schedules/cancel) the subscription schedule instead of modifying the previous phase.\n\n[](#prorated-order)\n\nA prorated order amendment has a start date that falls outside a billing cycle boundary, and an end date that isn’t equal to the billing frequency.\n\nFor example, an order lasts 1.5 years starting on month 6 that amends a 2-year contract, billed yearly. That order is a prorated order amendment. You bill the customer a prorated amount on the start date of the amendment for the portion of the order that doesn’t fall within the standard billing cycle.\n\nWhen you create a prorated order amendment in Salesforce, the connector does the following in Stripe for each order line to prorate:\n\n*   Creates a new price object to represent the prorated amount\n*   Adds an invoice item with the newly created price to the newly created phase to represent the prorated amount\n*   Updates the subscription item’s quantity to incorporate the amendment at the time it goes into effect, without billing for anything more than the prorated amount\n\nStripe Billing sends an invoice for the full product amount and quantity at the end of the billing cycle. In the example above, the billing cycle ends on month 12 and the invoice is for 120 USD x 2 = 240 USD.\n\nYou can’t prorate the following prices:\n\n*   Prices configured for metered billing—The amount due calculates after the end of the billing cycle.\n*   One-time, non-recurring prices—These bill immediately and don’t have a billing cycle associated with them.\n*   Tiered prices created from consumption schedules.\n\n## Prorated order amendment example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s an example order amendment and how it’s represented in Stripe.\n\n| Phase 0 | Phase 1 at 6 months | Phase 1 at 12 months |\n| --- | --- | --- |\n| *   Duration: 0 to 6 months<br>*   Subscription items: Quantity: 1<br>*   Quantity: 1 | *   Duration: 6 to 24 months<br>*   Subscription items: Product A, Quantity: 2<br>*   Phase `proration_behavior` is set to none<br>*   Invoice items: Single item to represent that the 6-month prorated cost of the product is added to the phase | A third phase isn’t created. At month 12 of phase 1, a new invoice is created for the subscription item added in phase 1 at 6 months. |\n\nA single proration item in Stripe represents the prorated amount of the order item. This means a debit for the prorated time through the remainder of the billing cycle.\n\nThe Stripe Billing proration calculation creates two proration items:\n\n*   A credit for unused time on the old plan\n*   A debit for the prorated used time through the rest of the billing period\n\nYou won’t see the credit line item in Stripe when using the proration data that the Salesforce CPQ calculates.\n\n## Use CPQ-calculated prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen billing information exists in CPQ, the connector treats it as the source of truth. This allows other financial systems (such as Stripe) and financial reporting tools (such as NetSuite or QuickBooks) to reconcile proration and other financial data. By default, the connector uses `CPQ Subscription Prorate Precision` equal to `Month` to calculate proration. The connector also supports `CPQ Subscription Prorate Precision` equal to `Monthly and Daily`.\n\nIn some cases, amounts won’t match between Stripe and Salesforce because only Stripe does some calculations, and they don’t exist in CPQ. For example, data for taxes and metered billing only exist in Stripe.\n\n## Calculate prorated prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn Salesforce, a prorated line item contains the following information:\n\n*   Subscription term\n*   Unit amount (mapped to `unit_decimal_amount` in Stripe)\n*   Quantity\n*   Billing frequency (mapped to `recurring.interval` and `recurring.interval_count` in Stripe)\n*   Start date\n\n### Salesforce CPQ Month prorate precision ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo determine what portion of the order item to prorate when `CPQ Subscription Prorate Precision` is set to `Month`:\n\n1.  Calculate the months (terms) of the subscription that aren’t included in the billing cycle. Use the start date, subscription term, and billing frequency of the line item to determine this value.\n2.  Calculate the per-month cost of the line item. Divide the value that’s mapped to `unit_amount_decimal` by the subscription term.\n3.  Multiply the per-month cost (value from step 2) by the number of months that aren’t included in the billing cycle (value from step 1).\n\nFor example, a subscription has six months that aren’t included in the billing cycle. The per-month cost of the line item is 10 USD, which is calculated by dividing a 180 USD unit amount by an 18-month subscription term. Multiplying the per-month cost of 10 USD by six months results in 60 USD.\n\n### Salesforce CPQ Monthly and Daily prorate precision ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo determine what portion of the order item to prorate when `CPQ Subscription Prorate Precision` is set to `Monthly and Daily`:\n\n1.  Calculate the partial month (at the end of the term) of the subscription that isn’t included in the billing cycle. The partial month equals the number of days not included in the billing cycle.\n2.  Calculate the per-day cost of the line item. Divide the value that’s mapped to `unit_amount_decimal` by the number of days in a month. CPQ calculates the number of days in a month by dividing the number of days in a year by the number of months in a year (365 divided by 12).\n3.  Multiply the per-day cost (value from step 2) by the number of days that aren’t included in the billing cycle (value from step 1).\n\nThe connector calculates prorations based on the setting for `CPQ Subscription Prorate Precision`.\n\n## Calculate prorated prices with customized price fields ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTypically, `UnitPrice` maps to `unit_price_decimal` in Stripe. You can also use a custom field for the price. The connector assumes the custom field you specify is the price of the product for the entire billing cycle.\n\nFor example, you specify a custom price field of 120 USD, rather than using the 180 USD value for the `UnitPrice`. For a quarterly billing cycle, the cost per quarter is 30 USD, which is 120 USD divided by four quarters.\n\nFor a prorated order line, the connector expects the full amount of the billing cycle for the custom price field. The connector calculates the prorated amount from this value.\n\n## Represent prorations with unique prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA unique aspect of this approach is generating a Stripe `Price` object to represent the prorated amount. Each prorated amount creates a `Price` object in Stripe tied to the same product as the original fully billed price. In other words, two distinct `Price` objects are created to represent the proration line item and the non-prorated subscription line item.\n\nThe metadata of the `Price` object indicates they were created for this purpose: `salesforce_proration => true`\n\nThese prices are automatically archived (`active=false`) after use in a subscription.\n\n## How prorated invoice items are billed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the phase representing the prorated order amendment starts, a pending invoice item is added to the customer’s subscription.\n\nThe connector listens for newly created invoice items to determine if they represent prorated amounts. If they do, the connector creates and finalizes an invoice for the subscription. The invoice bills the customer for the prorated amount of their subscription.\n\nYou can’t specify which items in a subscription to bill—the subscription bills any pending invoice items attached to it.",
  "title": "Subscription order amendments | Stripe Documentation",
  "description": "Learn about creating order amendments for your subscription orders.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/coupons",
  "markdown": "# Sync Stripe coupons | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to sync Stripe coupons between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ enables you to add configurable, stackable coupons to your Stripe subscriptions and subscription items synced from Salesforce. For example, you can offer your customers a one-time discount of 10% off or 50 USD off for the first 3 months of their subscription.\n\n## Assign permission sets ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor coupons to work properly, you must assign the Salesforce user who adds and syncs orders to the Stripe Connector Coupon User permission set. To add a user to the permission set, they must have a Salesforce CPQ license.\n\n## Add a coupon to a Salesforce order or order item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector exposes the following custom Salesforce objects that you can use together to add discounts to your Stripe subscriptions:\n\n| Salesforce object | Description |\n| --- | --- |\n| Quote Stripe Coupon | A Salesforce object representing a Stripe coupon. The `Quote Stripe Coupon` has a one-to-one field mapping with the [Stripe Coupon](https://docs.stripe.com/billing/subscriptions/coupons#coupons). |\n| Quote Stripe Coupon Association | A Salesforce junction object used to correlate a `Quote Stripe Coupon` to a `Quote`. |\n| Quote Line Stripe Coupon Association | A Salesforce junction object used to correlate a `Quote Stripe Coupon` to a `Quote Line`. |\n\nWhen a Salesforce order activates, the connector:\n\n1.  Identifies any `Quote Stripe Coupon` objects corresponding to the Salesforce order or order line\n2.  Serializes the `Quote Stripe Coupon` onto the corresponding Salesforce order or order line\n3.  Creates (or re-uses where possible) a Stripe coupon for each Salesforce coupon\n4.  Applies the coupons to the corresponding subscription or subscription item created in Stripe\n\n## Reuse Stripe coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector reuses existing Stripe coupons if multiple orders or order items reuse the corresponding Salesforce coupon. Modifying the original Salesforce coupon creates a new Stripe coupon.\n\n## Custom mappings for coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSimilar to other native Salesforce objects, you can use the data mapper to map the `Quote Stripe Coupon`. By default, the `Quote Stripe Coupon` is a one-to-one field mapping to the `Stripe Coupon`. You can also add custom metadata to the `Quote Stripe Coupon`.\n\n## Custom Apex triggers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector uses custom Apex triggers to serialize the `Quote_Stripe_Coupon__c` on the Salesforce order `after update`. If you have custom workflows that modify the `Quote_Stripe_Coupon__c`, make sure the trigger occurs `before update` to avoid race conditions between the workflows.\n\n## Multi-currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you enabled [multi-currency](https://help.salesforce.com/s/articleView?id=sf.admin_enable_multicurrency.htm&type=5) and you specify an amount off for the coupon, the connector maps the `CurrencyIsoCode` on the `Quote Stripe Coupon` to the equivalent [Stripe currency](https://docs.stripe.com/currencies) during Stripe coupon creation.",
  "title": "Sync Stripe coupons | Stripe Documentation",
  "description": "Learn how to sync Stripe coupons between Salesforce and Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/evergreen-orders",
  "markdown": "# Evergreen subscription orders | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to sync your evergreen subscription orders between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ supports syncing your evergreen orders to Stripe subscriptions. Evergreen orders are subscriptions in Salesforce that have no end date, as opposed to renewable orders, which are recurring subscriptions that have a set end date.\n\nThe connector examines `SBQQ_SubscriptionType__c` to determine if an order is Renewable or Evergreen. A Salesforce order with an `Evergreen` subscription type syncs into a Stripe subscription, regardless of the value for `SBQQ_ProductSubscriptionType__c`, which could be Renewable, or Renewable and Evergreen.\n\n## Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet the `collection_method` field to `send_invoice` and specify a value for `days_until_due` on the Stripe subscription. You can map to these fields in the data mapper.\n\nSet `SBQQ_DefaultSubscriptionTerm__c` on the Salesforce evergreen order to `1`. To prevent unexpected behavior on the invoices, make sure the evergreen order has a default subscription term equal to 1.\n\n## Cancel evergreen orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel evergreen orders in Salesforce by making an order amendment with quantity zero and setting the cancellation date as the start date.\n\nTo cancel a Stripe subscription immediately, set the amendment start date to the current date. To cancel a Stripe subscription on a specific date, set the amendment start date to a date in the future.\n\nIf you cancel a subscription during a billing period, the subscription cancels immediately and the customer won’t receive a credit or refund for the remainder of the billing period.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector doesn’t sync Salesforce orders that contain both evergreen and non-evergreen products.\n\nThe connector only supports canceling Salesforce evergreen orders with one product. Attempting to cancel a subset of the products in an evergreen order cancels the entire Stripe subscription. We recommend creating separate Salesforce evergreen orders for each product, if you want the ability to cancel orders in Stripe.\n\nYou must set the `collection_method` on a Stripe subscription to `send_invoice`. The default value is `charge_automatically`, but the connector doesn’t support collecting customer payment methods, which is necessary to charge automatically.",
  "title": "Evergreen subscription orders | Stripe Documentation",
  "description": "Learn how to sync your evergreen subscription orders between Salesforce and Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/error-handling",
  "markdown": "# Error handling | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to handle errors when syncing Salesforce records using the connector.\n\nIf you encounter errors when using the Stripe Billing Connector for Salesforce CPQ to sync records from Salesforce to Stripe, use the following list to identify and resolve the errors. In most cases, you must modify the Salesforce record data, then manually sync the record to recover from the error.\n\n## Data errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors you might encounter when syncing Salesforce orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Unsupported field value for `days_until_due`. | The mapped field value for `days_until_due` must be an integer or supported `CPQ Payment Term` value. | Update the mapped field value for `days_until_due` with an integer or a supported `CPQ Payment Term` value (for example, Net-15, Net-30, Net-45, Net-60, or Net-90). |\n| Required mappings were empty for the Stripe object. | The connector requires specific fields on the order and order items. | Navigate to the Stripe Billing app in Salesforce and open the data mapper. Make sure that you set all required fields under `Subscription Schedule`, `Subscription Item`, and `Price Order Item`. |\n| The order line was deleted or not activated. | The order item’s fields indicate that it was deleted or not activated. | Verify that all order items are activated and not deleted. |\n| The connector attempted to sync the amendment order when the initial order was skipped, because it didn’t match custom sync filters. | You can specify custom order filters in the Stripe Billing app in Salesforce. These filters determine whether or not to sync the Salesforce order. | You can’t sync amendment Salesforce orders before syncing the corresponding initial Salesforce order. This error indicates that the initial Salesforce order failed to sync because it didn’t pass the order filter criteria, even though the amendment Salesforce order passed. |\n\n## Amendment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to amendment orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Order amendments must co-terminate with the initial order. | The Salesforce amendment order must end on the same date as the initial Salesforce order. | Update the Salesforce order amendment so that the end date co-terminates with the initial order. This likely occurs when you update the subscription term. |\n| The Stripe subscription for the evergreen order has already been canceled and can’t be modified. | The connector synced an evergreen Salesforce amendment order that’s attempting to amend a canceled Stripe subscription. | The Salesforce amendment order can’t be synced. |\n| The Stripe subscription schedule has already been canceled and can’t be modified. | The connector synced a Salesforce amendment order that’s attempting to amend a canceled Stripe subscription schedule. | The Salesforce amendment order can’t be synced. |\n| Amendment orders must start on the same day of the month as the initial order. Enable the feature for non-anniversary amendments to sync amendments on any day of the month. | The Salesforce amendment order starts on a different day of the month than the initial order. | Update the Salesforce amendment order to start on the same day of the month as the initial Salesforce order, or contact support to enable non-anniversary amendments in your account. |\n| The amendment order subscription term doesn’t equal a number of whole months between the start and end date. | This occurs when a non-anniversary amendment is synced and the subscription term for the quote is unexpected. | Update the subscription term for the Salesforce amendment order to be a number of whole months between the start and end date of the Salesforce order. |\n| Unable to find the corresponding Stripe subscription schedule for the amendment order. | An amendment Salesforce order modifies an initial Salesforce order that previously synced. This error indicates that the corresponding Stripe subscription schedule created during the initial Salesforce order sync can’t be found because it was deleted. | The Salesforce amendment order can’t be synced. |\n| The backend prorated order amendment case isn’t supported. | A Salesforce amendment order modifies an initial order that was backend prorated, but the start dates don’t align. | The connector doesn’t support this use case. Contact [support](https://support.stripe.com/) for next steps. |\n\n## Quote errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to CPQ quotes and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| There’s no CPQ quote associated with the Salesforce order. Orders pushed to Stripe must have a related CPQ quote. | All Salesforce orders need a corresponding CPQ quote. This error indicates that the connector couldn’t find a corresponding quote. | Regenerate the Salesforce order from a Salesforce CPQ quote. |\n| Unable to find the initial Salesforce CPQ quote associated with the order amendment. | All Salesforce orders that the connector syncs need an associated Salesforce CPQ quote. | Regenerate the Salesforce order from a Salesforce CPQ quote. |\n| You can’t specify the subscription term as a decimal value. | The subscription term represents the contract duration in number of months. This value can’t be a decimal. | Update the mapped subscription term with a whole number. |\n| Billing frequency isn’t a supported `CPQ Billing Frequency` option. | CPQ supports Monthly, Quarterly, Semiannual, and Annual as values for the `SBQQ__BillingFrequency__c` field. | Update the `CPQ Billing Frequency` field value to `Monthly`, `Quarterly`, `Semiannual`, or `Annual`. |\n\n## Price errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to prices and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Found a corresponding Stripe price for the Salesforce price, but the price data has changed. | The Salesforce pricebook entry that’s linked to the order item previously synced, and the corresponding Stripe price data has changed. | Clear the Stripe ID from the Salesforce pricebook entry and sync the Salesforce order again. This results in a newly created Stripe price for the pricebook entry. |\n| More than one consumption schedule is linked to a pricebook, but there can only be one. | The connector found more than one consumption schedule linked to a pricebook, when there can only be one. | Delete one of the consumption schedules attached to the pricebook entry. |\n| The subscription term can’t be a decimal value. | The subscription term represents the contract duration in number of months. This value can’t be a decimal. | Update the mapped subscription term to a whole number. |\n| A decimal value was provided for the upper tier bound, but consumption rate tier bounds must be integers. | The connector found a decimal value for the upper tier bound of the Salesforce consumption rate. | Update the tier bound for the Salesforce consumption rate to an integer. |\n| The pricing method on the consumption rate isn’t supported. | The `SBQQ__PricingMethod__c` field accepts a value of `PerUnit` or `FlatFee`. | Update the `SBQQ__PricingMethod__c` field value to either `PerUnit` or `FlatFee`. |\n| The consumption schedule type isn’t supported. | The `Consumption Schedule Type` field accepts a value of `Range` or `Slab`. | Update the `Consumption Schedule Type` to either `Range` or `Slab`. |\n| The `unit_amount_decimal` field can’t be empty for Stripe price objects. | The connector found an empty value for the mapped Salesforce value, and prices can’t be empty. | Update the mapped Salesforce value to a positive integer. |\n| Unexpected `billing_scheme` value on Stripe price. | The billing scheme isn’t set to a valid value. | Update the billing scheme to either `per_unit` or `tiered`. |\n| The pricing interval isn’t supported. | The pricing interval isn’t set to a valid value. | Update the pricing interval to either `Month` or `Year`. |\n\n## Product errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to Salesforce products and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Product billing type isn’t a supported `CPQ Product Billing Type` option. | The product billing type (`SBQQ__BillingType__c`) accepts a value of `Advance` or `Arrears`. | Update the product’s `SBQQ__BillingType__c` field to either `Advance` or `Arrears`. |\n| Adding Salesforce products with a renewable type to evergreen orders isn’t supported. | Salesforce CPQ products accept a value of Renewable or Evergreen. | The connector doesn’t support both product types in a single Salesforce order. To sync the Salesforce order, you must remove one of the order items. |\n\n## Termination errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to termination orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| A termination order is processing, but more amendments are queued. | The connector is processing a termination order that cancels the subscription schedule, but there are more amendment orders to process. | To terminate a Salesforce order, you must delete or deactivate any amendment orders that are activated after the termination order. To amend a Salesforce order before terminating it, you must delete or deactivate the termination Salesforce order so the amendment order is processed, then sync the termination Salesforce order. |\n| Termination quantity is greater than the aggregate quantity for the order item. | You’re attempting to reduce an order item’s quantity by more than the existing quantity, resulting in a negative quantity. | Update the order item quantity to 0 or more. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)\n*   [Order amendments](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments)\n*   [Subscription orders](https://docs.stripe.com/connectors/salesforce-cpq/subscriptions)",
  "title": "Error handling | Stripe Documentation",
  "description": "Learn how to handle and recover from any errors you receive when syncing Salesforce records using the Stripe Billing Connector for Salesforce CPQ.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal/accept-a-payment",
  "markdown": "# Accept a PayPal payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe Checkout shows PayPal either as a standard payment method or as a standalone button, depending on which option is more likely to increase the conversion rate.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PayPal payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable PayPal—it shows the differences between accepting a card payment and using PayPal.\n\n### Enable PayPal as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), do the following:\n\n1.  Add `paypal` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the same currency.\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'paypal'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nYou don’t need to connect your PayPal business account to test the integration. However, make sure to connect your PayPal and Stripe accounts when you’re ready to [activate live mode payments](https://docs.stripe.com/payments/paypal/connect-your-paypal-account).\n\nWhen testing your Checkout integration, select **PayPal** as the payment method and click **Pay**.\n\nTo simulate the most common integration and failure scenarios for PayPal payments, pass `email` values that match the patterns described in these [test scenarios](https://docs.stripe.com/payments/paypal/accept-a-payment?platform=web&ui=stripe-hosted#test-scenarios).\n\n### Test scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Email pattern | Scenario | Explanation |\n| --- | --- | --- |\n| `.*payee_account_restricted@.*` | Merchant account restricted | Capturing or authorizing a payment fails with a `payment_method_unexpected_state` error if your merchant account is restricted by PayPal. Provide an email matching this pattern at time of authorization to fail the authorization. |\n| `.*transaction_refused@.*` | Transaction refused | Capturing a payment fails with a `payment_method_provider_decline` error if the transaction is refused by PayPal. |\n| `.*instrument_declined@.*` | Payment instrument declined | Capturing a payment fails with a `payment_method_provider_decline` error if the instrument presented was either declined by the processor or bank, or it can’t be used for this payment. |\n| `.*lost_dispute@.*` | Lost dispute | On capture, the payment intent first succeeds only to be disputed. The dispute created is already lost and the merchant can’t submit evidence on the Stripe Dashboard. |\n| `.*authorization_expired@.*` | Manually capturing an authorized payment | Capturing an authorized payment fails with a `capture_charge_authorization_expired` error if the authorization has already expired. |",
  "title": "Accept a PayPal payment | Stripe Documentation",
  "description": "Learn how to accept PayPal payment, a digital wallet popular with businesses in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/mdq-products",
  "markdown": "# Multi-dimensional quoting (MDQ) products | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing MDQ products between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ enables you to create, manage, and bill for deals with annual price or quantity adjustments. Ramp deals can span a single year or multiple years, and are single subscriptions segmented into blocks of time. This provides sales representatives with detailed control over pricing specific units of time within a subscription.\n\n## Create MDQ products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a multi-dimensional quoting (MDQ) product in Salesforce by adding a price dimension to the Price Dimensions related list for your product. The type determines how your segments appear: by year, quarter, or month. You can also allow users to edit a segment’s cost, quantity, or discounts. The connector doesn’t support MDQ products with custom segments.\n\nUsing the connector to sync a Salesforce order with an MDQ product results in a Stripe subscription schedule with a subscription schedule phase for each ramp. For example, a 3-year contract segmented by year results in a Stripe subscription schedule with three phases, one for each ramp year. Each phase has the `salesforce_segment_index` and `salesforce_segment_label` metadata so that you know which ramp the phase corresponds to.\n\n## Amend MDQ products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMDQ ramps or segments produce multiple quote lines, one for each segment. When amending an original Salesforce order with MDQ products, the connector supports the following:\n\n*   Terminating the entire Salesforce order\n*   Adjusting the quantity of a Salesforce product in one or all of the ramps on the Salesforce order\n*   Adding a standard product to the Salesforce order\n*   Removing a standard product from the Salesforce order\n\nWhen amending an original Salesforce order with an MDQ product, you must set the `SBQQ__AmendmentStartDate__c` field on the contract equal to the `SBQQ__StartDate__c` field on the amendment quote. Otherwise, you can create and sync an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments) as usual.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConsider the following MDQ limitations:\n\n*   You can have one ramp schedule per Salesforce order.\n*   You can sync products with the same billing frequencies across each ramp.\n*   Ramps must be consecutive time periods.\n*   You can only amend current and future segments of an MDQ subscription. Past segments aren’t available.\n*   Don’t amend the ramp period. For example, you can’t change the ramp deal from yearly to monthly.\n*   Don’t shorten a ramp deal. To terminate an order, you must cancel the line items across all segments.",
  "title": "Multi-dimensional quoting (MDQ) products | Stripe Documentation",
  "description": "Learn about syncing MDQ products between Salesforce and Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/balance/balanace_object",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/no-code/customer-portal",
  "markdown": "# Set up the customer portal\n\n## Let your customers manage their own billing accounts with a portal that Stripe hosts.\n\nWhen you’re ready to offer your customers a way to self-serve their billing accounts, you can set up the customer portal. Use it to let your customers manage their billing information, subscriptions, and invoices as your business scales.\n\nStripe hosts the customer portal, which means you can use it even if you don’t have a website. You can also link users to it from an existing site or Stripe integration.\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register/).\n\n[](#create-product)\n\nTo create a product in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Click **+Add product**.\n3.  Enter the **Name** of your product.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n5.  _(Optional)_ Add an **Image** of your product. Use a JPEG, PNG, or WEBP file that’s smaller than 2MB. The image appears at checkout.\n6.  _(Optional)_ If you’re using [Stripe Tax](https://docs.stripe.com/tax), select a **Tax code** for your product. See [tax codes](https://docs.stripe.com/tax/tax-codes) for more information about the appropriate category for your product.\n7.  _(Optional)_ Enter a **Statement descriptor**. This descriptor overrides any account descriptors for recurring payments. Choose something that your customers would recognize on a bank statement.\n8.  _(Optional)_ Enter a **Unit label**. This describes how you sell your product. For example, if you charge by the seat, enter “seat” so the line item includes “per seat” for the price. Unit labels appear at checkout, and in invoices, receipts, and the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\nFor more details about [get started with products and prices](https://docs.stripe.com/products-prices/getting-started).\n\n[](#set-up-customer-portal)\n\n1.  **Activate a customer portal link** On the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page, click **Activate link** in the **Ways to get started** section.\n    \n2.  **Configure the portal** Go to the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page and select your configuration options. Learn more about [configuration options](https://docs.stripe.com/customer-management/configure-portal).\n    \n3.  Make sure your customers have an [`email`](https://docs.stripe.com/api/customers/object#customer_object-email) set. If multiple customers have the same email address, Stripe selects the most recently created customer that has both that email and an active subscription.\n    \n    For security purposes:\n    \n    *   Customers can’t update their email address through this link.\n    *   If a customer doesn’t receive a one-time passcode after clicking the login link, make sure their email address matches the email address of an existing customer. To check, enter the email address in the search bar of your [Stripe dashboard](https://dashboard.stripe.com/).",
  "title": "Set up the customer portal | Stripe Documentation",
  "description": "Let your customers manage their own billing accounts with a portal that Stripe hosts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/field-mappings",
  "markdown": "# Field defaults and custom mappings\n\n## Map corresponding fields from Salesforce objects to Stripe objects.\n\nWhen setting up the Stripe Billing Connector for Salesforce CPQ, you use the data mapper to map the fields from the Salesforce objects to corresponding fields on the Stripe objects.\n\nNot all objects have a Stripe ID field in the data mapper. For example, the subscription schedule phase item doesn’t have a Stripe ID, so you can’t add a Stripe ID custom field to the Salesforce order line. However, you can still configure the object in the data mapper.\n\nThe connector automatically maps the following objects:\n\n## Custom mappings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a custom mapping based on the standard and custom fields you use in Salesforce.\n\n#### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You use a custom field to identify if a pricebook entry is metered or licensed. You can map that custom field to [recurring.usage\\_type](https://docs.stripe.com/api/prices/object#price_object-recurring-usage_type) on the Stripe `Price` object.\n    \n*   You use a custom field for the tax ID number on a Salesforce account. You can map that custom field to the corresponding field in Stripe.\n    \n*   You want to identify all customers in your Stripe account that the connector created. You can add a custom metadata field called `Source` with a default value of `Salesforce` for the Stripe `Customer` object.\n    \n\nIf there’s a one-to-one relationship to map between the object and object type, you can use the path to a Salesforce field as the mapping source. For example, you can map a custom field from the account of a Salesforce order to a custom metadata field on a Stripe subscription schedule. However, if an account has multiple orders, you can’t create a mapping between the Salesforce account and an order field.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accounts and contacts](https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)\n*   [Subscription orders](https://docs.stripe.com/connectors/salesforce-cpq/subscriptions)\n*   [Error handling](https://docs.stripe.com/connectors/salesforce-cpq/error-handling)",
  "title": "Field defaults and custom mappings | Stripe Documentation",
  "description": "Map corresponding fields from Salesforce objects to Stripe objects.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout",
  "markdown": "# Stripe Checkout | Stripe DocumentationThe Stripe Docs logo\n\n## Build a low-code payment form and embed it on your site or host it on Stripe.\n\n[Checkout](https://stripe.com/payments/checkout) is a low-code payment integration that creates a customizable form for collecting payments. You can embed Checkout directly in your website or redirect customers to a Stripe-hosted payment page. It supports one-time payments and subscriptions and accepts over 40 local payment methods. For a full list of Checkout features, see [Built-in features and customizable features](https://docs.stripe.com/payments/checkout#features).\n\n[Explore Stripe Checkout](https://checkout.stripe.dev/)\n\nDon’t see your use case? [Let us know](mailto:checkout-feedback@stripe.com) how you’d like to use Checkout.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[How Checkout works](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[\n\nLearn how to add a checkout page to your website and collect payments.\n\n](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[Watch a video tutorial](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[\n\nLearn how to implement Stripe Checkout for both e-commerce and subscription businesses.\n\n](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[Quickstart](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[\n\nExplore a code sample of an integration with Stripe Checkout.\n\n](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[Enable global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[\n\nTurn on different Checkout payment methods through the Dashboard.\n\n](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n[Fulfill your orders](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n[\n\nLearn how to fulfill orders after a customer completes their purchase.\n\n](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n## Customize Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[Customize your integration](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[\n\nCustomize branding, language support, fonts, store policies, and so on.\n\n](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[Use custom domains](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[\n\nLearn how to bring your own custom domain to Stripe Checkout.\n\n](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[\n\nDisplay a custom confirmation page with your customer’s order information.\n\n](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[Collect taxes](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[\n\nCollect taxes for one-time payments and Subscriptions.\n\n](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[\n\nCollect VAT and other customer tax IDs in Checkout.\n\n](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[\n\nCollect phone numbers in Checkout.\n\n](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[Post-payment invoices](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[\n\nSend invoices to customers with Stripe Checkout.\n\n](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[Set up future payments](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[\n\nSave payment details and charge your customers later.\n\n](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n## Boost revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[Subscription upsells](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[\n\nEnable customers to upgrade their subscription plan at checkout by using upsells.\n\n](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[\n\nEnable customers to purchase complementary products at checkout by using cross-sells.\n\n](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[\n\nRecover abandoned Checkout pages and boost revenue.\n\n](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[Automatically convert currencies with Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[\n\nAutomatically convert prices for selected international shoppers to increase conversion.\n\n](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[Define manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[\n\nPresent prices in your customers’ local currencies during checkout.\n\n](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n[Analyzing your conversion funnel](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n[\n\nLearn how to analyze the conversion funnel of your Stripe Checkout page.\n\n](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n## No-code options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[Pricing table](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[\n\nDisplay a pricing table on your website and take customers directly to Stripe Checkout.\n\n](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[](https://docs.stripe.com/payment-links \"Payment links\")\n\n[Payment links](https://docs.stripe.com/payment-links \"Payment links\")\n\n[\n\nEmbed or share a link to a Stripe payment page to accept payments without a website.\n\n](https://docs.stripe.com/payment-links \"Payment links\")\n\n## Additional features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[Add discounts](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[\n\nReduce the amount charged to a customer by discounting their subtotal with coupons and promotion codes.\n\n](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[Charge shipping](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[\n\nUse shipping rates and collect shipping addresses from your customers.\n\n](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n[Manage limited inventory with Checkout](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n[\n\nLearn how to manage inventory with time-limited purchase windows.\n\n](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n## Try a sample project![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[One-time payments](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[Web · Mobile web](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[Subscriptions](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[Web · Mobile web · Stripe Billing](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[](https://docs.stripe.com/samples)\n\n[Browse our samples](https://docs.stripe.com/samples)\n\n## Built-in and customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout has the following built-in and customizable features:\n\n### Built-in features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   PayPal, Google Pay, Apple Pay, and Link\n*   Responsive mobile design\n*   SCA-ready\n*   CAPTCHAs\n*   PCI compliance\n*   Card validation\n*   Error messaging\n*   [Adjustable quantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)\n*   [Automatic tax collection](https://docs.stripe.com/tax/checkout)\n*   International language support\n*   [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)\n\n### Customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Custom branding with colors, buttons, and font](https://docs.stripe.com/payments/checkout/customization)\n*   [Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells)\n*   [Global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods)\n*   [Subscription upsells](https://docs.stripe.com/payments/checkout/upsells)\n*   [Custom domains](https://docs.stripe.com/payments/checkout/custom-domains) (Stripe-hosted page only)\n*   [Email receipts](https://docs.stripe.com/receipts)\n*   [Apply discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Custom success page](https://docs.stripe.com/payments/checkout/custom-success-page)\n*   [Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts)\n*   [Autofill payment details with Link](https://docs.stripe.com/payments/checkout/customization#link)\n*   [Collect Tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Collect shipping information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers)\n*   [Set the subscription billing cycle date](https://docs.stripe.com/payments/checkout/billing-cycle)\n\n#### Sign up to be notified of new features and updates.\n\nProvide your email to receive updates on new features and support for more use cases.\n\nRead our [privacy policy](https://stripe.com/privacy).",
  "title": "Stripe Checkout | Stripe Documentation",
  "description": "Build a low-code payment form and embed it on your site or host it on Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment-synchronously",
  "markdown": "# Accept card payments without webhooks\n\n## Learn how to confirm a card payment on your server and handle card authentication requests.\n\n#### Caution\n\nFor a wider range of support and future proofing, use the [standard integration](https://docs.stripe.com/payments/accept-a-payment) for asynchronous payments.\n\nThis integration waits for the returned response from the client and finalizes a payment on the server, without using [webhooks](https://docs.stripe.com/webhooks \"webhook\") or processing offline events. While it may seem simpler, this integration is difficult to scale as your business grows and has several limitations:\n\n*   **Only supports cards**—You’ll have to write more code to support ACH and popular regional payment methods separately.\n*   **Double-charge risk**—By synchronously creating a new PaymentIntent each time your customer attempts to pay, you risk accidentally double-charging your customer. Be sure to follow [best practices](https://docs.stripe.com/error-low-level#idempotency).\n*   **Extra trip to client**—​​Cards with 3D Secure or those that are subject to regulations such as [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") require extra steps on the client. ​\n\nKeep these limitations in mind if you decide to use this integration. Otherwise, use the [standard integration](https://docs.stripe.com/payments/accept-a-payment).\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Collect card details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-card-details)\n\nCollect card information on the client with Stripe.js and Stripe Elements. Elements is a set of prebuilt UI components for collecting and validating card number, postal code, and expiration date.\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nInclude the [Stripe.js](https://docs.stripe.com/js) script in the head of every page on your site. Elements is automatically available as a feature of Stripe.js.\n\nIncluding the script on every page of your site lets you take advantage of Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar) and ability to detect anomalous browsing behavior.\n\n### Build the payment form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo securely collect card details from your customers, Elements creates UI components for you that are hosted by Stripe. They’re then placed into your payment form as an iframe. To determine where to insert these components, create empty DOM elements (containers) with unique IDs within your payment form.\n\n`<form id='payment-form'>   <label>     Card details     <!-- placeholder for Elements -->     <div id=\"card-element\"></div>   </label>   <button type=\"submit\">Submit Payment</button> </form>`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. Afterwards, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to [mount](https://docs.stripe.com/js#element-mount) a Card element in the relevant placeholder in the page.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements(); // Set up Stripe.js and Elements to use in checkout form const style = {   base: {     color: \"#32325d\",     fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',     fontSmoothing: \"antialiased\",     fontSize: \"16px\",     \"::placeholder\": {       color: \"#aab7c4\"     }   },   invalid: {     color: \"#fa755a\",     iconColor: \"#fa755a\"   }, }; const cardElement = elements.create('card', {style}); cardElement.mount('#card-element');`\n\nThe `card` Element simplifies the form and minimizes the number of fields required by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\n### Create a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinally, use [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) on your client to collect the card details and create a [PaymentMethod](https://docs.stripe.com/api/payment_methods) when the user clicks the submit button.\n\n`const form = document.getElementById('payment-form'); form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();   const result = await stripe.createPaymentMethod({     type: 'card',     card: cardElement,     billing_details: {       // Include any additional collected billing details.       name: 'Jenny Rosen',     },   })   stripePaymentMethodHandler(result); });`\n\n[\n\n## Submit the PaymentMethod to your server![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-send-to-server)\n\nIf the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") was created successfully, send its ID to your server.\n\n`const stripePaymentMethodHandler = async (result) => {   if (result.error) {     // Show error in payment form   } else {     // Otherwise send paymentMethod.id to your server (see Step 4)     const res = await fetch('/pay', {       method: 'POST',       headers: { 'Content-Type': 'application/json' },       body: JSON.stringify({         payment_method_id: result.paymentMethod.id,       }),     })     const paymentResponse = await res.json();     // Handle server response (see Step 4)     handleServerResponse(paymentResponse);   } }`\n\n[\n\n## Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-intent)\n\nSet up an endpoint on your server to receive the request. This endpoint will also be used [later](#confirm-payment) to handle cards that require an extra step of authentication.\n\n[Create a new PaymentIntent](https://docs.stripe.com/payments/payment-intents#creating-a-paymentintent) with the ID of the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) created on your client. You can [confirm](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") the PaymentIntent by setting the [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to true when the PaymentIntent is created or by calling [confirm](https://docs.stripe.com/api/payment_intents/confirm) after creation. [Separate authorization and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) is also supported for card payments.\n\nIf the payment requires additional actions such as 3D Secure authentication, the PaymentIntent’s status will be set to `requires_action`. If the payment failed, the status is set back to `requires_payment_method` and you should show an error to your user. If the payment doesn’t require any additional authentication then a charge is created and the PaymentIntent status is set to `succeeded`.\n\n#### Note\n\nOn versions of the API before [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), `requires_payment_method` appears as `requires_source` and `requires_action` appears as `requires_source_action`.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method\"=\"{{PAYMENT_METHOD_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"confirmation_method\"=\"manual\" \\   -d \"confirm\"=\"true\"`\n\nIf you want to save the card to reuse later, create a [Customer](https://docs.stripe.com/api/customers/create) to store the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") and pass the following additional parameters when creating the PaymentIntent:\n\n*   [customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer). Set to the ID of the [Customer](https://docs.stripe.com/api/customers \"Customers\").\n*   [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). Set to `off_session` to tell Stripe that you plan to reuse this PaymentMethod for off-session payments when your customer is not present. Setting this property saves the PaymentMethod to the Customer after the PaymentIntent is confirmed and any required actions from the user are complete. See the code sample on [saving cards after a payment](https://github.com/stripe-samples/saving-card-after-payment/tree/master/without-webhooks) for more details.\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-handle-next-actions)\n\nWrite code to handle situations that require your customer to intervene. A payment normally succeeds after you confirm it on the server in [step 4](#create-payment-intent). However, when the PaymentIntent requires additional action from the customer, such as authenticating with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), this code comes into play.\n\nUse [stripe.handleCardAction](https://docs.stripe.com/js/payment_intents/handle_card_action) to trigger the UI for handling customer action. If authentication succeeds, the PaymentIntent has a status of `requires_confirmation`. Confirm the PaymentIntent again on your server to finish the payment.\n\nWhile testing, use a [test card number](https://docs.stripe.com/testing#regulatory-cards) that requires authentication (for example, ) to force this flow. Using a card that doesn’t require authentication (for example, ) skips this part of the flow and completes at step 4.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.requires_action) {     // Use Stripe.js to handle the required card action     const { error: errorAction, paymentIntent } =       await stripe.handleCardAction(response.payment_intent_client_secret);     if (errorAction) {       // Show error from Stripe.js in payment form     } else {       // The card action has been handled       // The PaymentIntent can be confirmed again on the server       const serverResponse = await fetch('/pay', {         method: 'POST',         headers: { 'Content-Type': 'application/json' },         body: JSON.stringify({ payment_intent_id: paymentIntent.id })       });       handleServerResponse(await serverResponse.json());     }   } else {     // Show success message   } }`\n\n#### Note\n\n`stripe.handleCardAction` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator. If the customer must perform additional steps to complete the payment, such as authentication, Stripe.js walks them through that process.\n\n[\n\n## Confirm the PaymentIntent again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#confirm-payment)\n\nThis code is only executed when a payment requires additional authentication—just like the handling in the previous step. The code itself isn’t optional because any payment could require this extra step.\n\nUsing the same endpoint you set up [above](#create-payment-intent), confirm the PaymentIntent again to finalize the payment and fulfill the order. Make sure this confirmation happens within one hour of the payment attempt. Otherwise, the payment fails and transitions back to `requires_payment_method`.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-test-integration)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
  "title": "Accept card payments without webhooks | Stripe Documentation",
  "description": "Learn how to confirm a card payment on your server and handle card authentication requests.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/object",
  "markdown": "# The External Bank Account object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandable\n    \n    The ID of the account that the bank account is associated with.\n    \n*   Name of the bank associated with the routing number (e.g., `WELLS FARGO`).\n    \n*   Two-letter ISO code representing the country the bank account is located in.\n    \n\n*   #### \n    \n    default\\_for\\_currencynullable boolean\n    \n    Whether this bank account is the default external account for its currency.\n    \n*   The last four digits of the bank account number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    routing\\_numbernullable string\n    \n    The routing transit number for the bank account.\n    \n*   For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn’t had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we’ll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.\n    \n    For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can’t [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we’ll set the status to `verification_failed`. Other validations aren’t run against external accounts because they’re only used for payouts. This means the other statuses don’t apply.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_holder\\_namenullable string\n    \n*   #### \n    \n    account\\_holder\\_typenullable string\n    \n*   #### \n    \n    account\\_typenullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    fingerprintnullable string\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n*   #### \n    \n    requirementsnullable object\n    \n\nThe External Bank Account object\n\n```\n{  \"id\": \"ba_1N9DrD2eZvKYlo2C58f4DaIa\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"individual\",  \"account_type\": null,  \"available_payout_methods\": [    \"standard\"  ],  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtz\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Create a bank account](https://docs.stripe.com/api/external_account_bank_accounts/create)\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=btok_1NAiJy2eZvKYlo2Cnh6bIs9c\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```",
  "title": "The External Bank Account object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/tokens/create_token?type=cvc_update",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_account_features/object",
  "markdown": "# The FinancialAccount Feature object | Stripe API Reference\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    card\\_issuingnullable object\n    \n    Contains a Feature encoding the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from.\n    \n*   #### \n    \n    deposit\\_insurancenullable object\n    \n    Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesnullable object\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   #### \n    \n    inbound\\_transfersnullable object\n    \n    Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   #### \n    \n    intra\\_stripe\\_flowsnullable object\n    \n    Represents the ability for this FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   #### \n    \n    outbound\\_paymentsnullable object\n    \n    Contains Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   #### \n    \n    outbound\\_transfersnullable object\n    \n    Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\nThe FinancialAccount Feature object\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Update FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/update)\n\nUpdates the Features associated with a FinancialAccount.\n\n### Parameters\n\n*   Encodes the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.\n    \n*   Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesobject\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   Includes Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which may contain child Features.\n\nPOST /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card_issuing[requested]\"=false\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Retrieve FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/retrieve)\n\nRetrieves Features information associated with the FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which might contain child Features.\n\nGET /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The FinancialAccount Feature object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/debit_reversals/object",
  "markdown": "# The DebitReversal object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    linked\\_flowsnullable object\n    \n    Other flows linked to a DebitReversal.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedDebit being reversed.\n    \n*   Status of the DebitReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The network has resolved the DebitReversal against the user. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    | `succeeded`<br><br>The network has resolved the DebitReversal in the users favour. A crediting Transaction is created. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Create a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/create)\n\nReverses a ReceivedDebit and creates a DebitReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_debitstringRequired\n    \n    The ReceivedDebit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a DebitReversal object.\n\nPOST /v1/treasury/debit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_debit=rd_1MtkMLLkdIwHu7ixoiUFN4qd\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Retrieve a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/retrieve)\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The DebitReversal object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transactions/object",
  "markdown": "# The Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   The change made to each of the FinancialAccount’s sub-balances by the Transaction.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    entriesnullable objectExpandable\n    \n    A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.\n    \n*   The FinancialAccount associated with this object.\n    \n*   ID of the flow that created the Transaction.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow that created the Transaction.\n    \n*   Type of the flow that created the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Status of the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/treasury/transactions/retrieve)\n\nRetrieves the details of an existing Transaction.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Transaction object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transactions/trxn_1MtkYw2eZvKYlo2ClMGIO54z \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [List all Transactions](https://docs.stripe.com/api/treasury/transactions/list)\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Transaction object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/fraud_classification/create",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/disputes/prevention/fraud-types",
  "markdown": "# Common types of online fraud\n\n## Learn about the different kinds of fraud and what your liability is.\n\nA payment is considered fraudulent when the cardholder didn’t authorize it. Most fraudulent payments are made using stolen cards or card numbers. When a cardholder is notified that the payment has been made or they review their card statement, they contact their card issuer to dispute it.\n\nOnline fraud is fundamentally different to fraud that occurs at brick-and-mortar businesses as it’s harder to be certain that the person you’re selling to is who they say they’re. Some fraudsters adopt more sophisticated methods than just trying to make purchases on a stolen card. When accepting payments online, it’s important to be aware of the different kinds of fraud and what your liability is.\n\n## Suspected fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s machine learning system continuously monitors all payments processed by our users. In rare cases, you might receive a notification from Stripe that we suspect a payment is fraudulent after the card issuer authorizes it. This can occur if we detect subsequent activity on the card that now suggests it’s being used fraudulently.\n\nAlthough we notify you as soon as we become aware of any suspicious activity, it might be several days after a payment is made. Keep in mind that this prediction isn’t a guarantee that a payment is fraudulent—only that we have reason to believe it is.\n\nWe provide this information to you to make sure that you can make an informed decision and take action where necessary (for example, contact the customer or place their order on hold). If you have any concerns about the payment after reviewing it, consider [refunding it immediately](https://docs.stripe.com/disputes/prevention/best-practices#consider-proactively-refunding-suspicious-payments) to proactively prevent a dispute and avoid a dispute fee.\n\n#### Caution\n\nWhile a customer can’t dispute fully refunded payments, they can dispute partially refunded payments. Card network rules even allow for a payment that was partially refunded to be disputed for the full payment amount.\n\n## Stolen cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis type of fraud makes use of stolen credit or card details to make a purchase online. The fraudster may be in possession of a physical card, but it’s more likely that the cardholder’s details were stolen electronically. A business ships goods or provides service to the fraudster, with the assumption that the payment is legitimate.\n\nIf a cardholder hasn’t realized yet that their card is lost or stolen (and so hasn’t notified the card issuer), you can still process payments successfully. Even if a payment isn’t declined, this doesn’t mean that it was authorized.\n\nAfter the cardholder discovers the fraudulent use of their card, they dispute the payment with the card issuer. If the dispute is resolved in favor of the cardholder, the business suffers a loss equal to the amount of the payment, and the cost of any goods or services already provided. The business is also subject to a dispute fee.\n\n### Overpayment fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOverpayment fraud (also known as a [payout](https://docs.stripe.com/payouts \"payout\") scam) is a variant of stolen card fraud. The fraudster presents themselves as requiring the services of a third-party service in connection with the purchase. The fraudster then offers to pay the seller the cost of the goods, an extra sum for the fraudulent third-party, and often an additional convenience (tip) for accommodating the request. The fraud being committed here is that the third-party service doesn’t exist—the fraudster has taken the additional funds while the seller is left with a dispute.\n\nFor example, an online antique business may be approached by a fraudster claiming to live overseas. They request that the business use their preferred freight company, who they ask the business to make payment to. Using stolen card information, the fraudster pays the business for the goods and fake freight fee, and includes a gratuity for the seller as an incentive.\n\nThe business complies and pays the fee to this fake freight company but no shipment ever occurs because there is no legitimate shipper. The actual cardholder discovers the unauthorized payment and disputes it with their card issuer. The payment is automatically refunded and a dispute fee deducted, even though they’ve already paid out funds separately to a fraudulent third-party.\n\n## Card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis is the practice of testing a card (or multiple cards) on one site to see if it’s still valid before using it on another site to make a fraudulent payment. Sites with free text fields, such as donation sites and “pay what you like” e-commerce businesses, are predominately the targets of card testing. Implementing [CAPTCHA](http://captcha.net/) or rate-limiting charges can help combat this type of fraud. To learn more see, [Protect yourself from card testing](https://docs.stripe.com/disputes/prevention/card-testing).\n\n## Alternative refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this form of fraud, the fraudster deliberately pays more than was required, then contacts the business, and claims they accidentally entered the wrong amount. The fraudster requests a partial refund to rectify this, but claims they have closed the card that was used and would like a refund sent using an alternative method that is outside of the card network (for example, check or wire transfer).\n\nFor example, a fraudster donates 500 USD to a charity and contacts them shortly after to say that it should have been a 50 USD donation. The fraudster asks for the return of 450 USD using a different method, so no refund is made back to the original card. When the legitimate cardholder disputes the fraudulent payment, the charity isn’t only responsible for the disputed amount, they have also lost the amount sent using the alternative method.\n\nNever refund payments using a different method than the one originally used. If a card has legitimately been closed, you can still perform a refund. The customer should then contact that card issuer to arrange the funds to be retrieved.\n\n## Marketplace fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you run a marketplace business (such as a [Connect](https://docs.stripe.com/connect \"Connect\") platform) where your users are responsible for providing service to your customers, this type of fraud occurs when a fraudulent business takes payments without providing the services or goods to customers.\n\nFor example, a marketplace that connects buyers and sellers can run the risk of a seller taking payment from the buyer and not sending the goods. In such cases, if the funds can’t be recovered from the seller, [responsibility](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances) for the disputed amount and fee is ultimately on the platform.\n\n## Friendly fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFriendly fraud—also known as “first-party misuse” or “first-party fraud”—occurs when a legitimate cardholder makes a purchase, but then disputes it at a later date. This can either be accidental, because they didn’t recognize the transaction on their statement, or deliberate (for example, due to buyer’s remorse or as an attempt to fraudulently obtain merchandise without paying).\n\nIt can be difficult to know whether friendly fraud has occurred, especially in digital sales. For those selling physical goods, shipping to a verified billing address and requiring signature on delivery can help combat this. In addition, having clear return policies prominently displayed at checkout to which the customer must agree prior to making a purchase can also help.\n\n[Visa Compelling Evidence 3.0](https://docs.stripe.com/disputes/categories#visa-ce-30) established new rules to challenge friendly fraud by showing previous non-fraud transactions with the same cardholder within a specified period. Stripe supports Visa CE 3.0 by identifying qualifying transactions in your history on our platform to determine eligibility for evidence submission under the Visa CE 3.0 rules. We then pre-populate the dispute response with most of the required evidence you need to significantly increase your likelihood of overturning the dispute in your favor.",
  "title": "Common types of online fraud | Stripe Documentation",
  "description": "Learn about the different kinds of fraud and what your liability is.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/object",
  "markdown": "# The InboundTransfer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the InboundTransfer is able to be canceled.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_detailsnullable object\n    \n    Details about this InboundTransfer’s failure. Only set when status is `failed`.\n    \n*   The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Other flows linked to a InboundTransfer.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    origin\\_payment\\_methodstring\n    \n    The origin payment method to be debited for an InboundTransfer.\n    \n*   #### \n    \n    origin\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an InboundTransfer.\n    \n*   Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.\n    \n*   Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been “confirmed” and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n## [Create an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/create)\n\nCreates an InboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   #### \n    \n    origin\\_payment\\_methodstringRequired\n    \n    The origin payment method to be debited for the InboundTransfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The complete description that appears on your customers’ statements. Maximum 10 characters.\n    \n\n### Returns\n\nReturns an InboundTransfer object if there were no issues with InboundTransfer creation. The status of the created InboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/inbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d origin_payment_method=pm_1KMDdkGPnV27VyGeAgGz8bsi \\  -d description=\"InboundTransfer from my bank account\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Retrieve an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/retrieve)\n\nRetrieves the details of an existing InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an InboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/inbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [List all InboundTransfers](https://docs.stripe.com/api/treasury/inbound_transfers/list)\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/cancel)\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```",
  "title": "The InboundTransfer object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_debits/object",
  "markdown": "# The ReceivedDebit object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn’t have sufficient funds, is closed, or is frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be pulled from a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be pulled from a frozen FinancialAccount. |\n    | `insufficient_funds`<br><br>The FinancialAccount doesn’t have a sufficient balance. |\n    | `other`<br><br>Funds can’t be pulled from the FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about how a ReceivedDebit was created.\n    \n*   Other flows linked to a ReceivedDebit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The network used for the ReceivedDebit.\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedDebit might be reversed.\n    \n*   Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Retrieve a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/retrieve)\n\nRetrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedDebit object.\n\nGET /v1/treasury/received\\_debits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_debits/rd_1MtkUY2eZvKYlo2CT9SYD1AF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [List all ReceivedDebits](https://docs.stripe.com/api/treasury/received_debits/list)\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The ReceivedDebit object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_credits/object",
  "markdown": "# The ReceivedCredit object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be sent to a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be sent to a frozen FinancialAccount. |\n    | `other`<br><br>Funds can’t be sent to FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod used to send a ReceivedCredit.\n    \n*   Other flows linked to a ReceivedCredit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The rails used to send the funds.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ach` |\n    | `card` |\n    | `stripe` |\n    | `us_domestic_wire` |\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedCredit may be reversed.\n    \n*   Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe ReceivedCredit object\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Retrieve a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/retrieve)\n\nRetrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedCredit object.\n\nGET /v1/treasury/received\\_credits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_credits/rc_1MtkSr2eZvKYlo2CcysvUbEw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [List all ReceivedCredits](https://docs.stripe.com/api/treasury/received_credits/list)\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The ReceivedCredit object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import/apple-app-store",
  "markdown": "# Stripe Connector for the Apple App Store\n\n## Manage your revenue recognition in Stripe by importing data from the Apple App Store.\n\nThe [Stripe Connector for the Apple App Store](https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store) lets you automatically import subscription purchases from the Apple App Store into [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition).\n\nThe benefits of using Revenue Recognition for the Apple App Store are:\n\n*   **Near real-time availability**: Set up daily, automated imports from the Apple App Store. This minimizes manual work and reduces corrections at month-end.\n*   **Increased accuracy**: Improve recognition accuracy by considering time zone differences.\n*   **Improved refund treatment**: Associate refunds with original purchases, and generate more accurate refund journal entries that adjust deferred revenue instead of treating refunds as negative line items.\n*   **Audit by subscribers**: Break down numbers on a per subscriber basis for easier audits.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo import data from the Apple App Store, [set up](https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store) the Stripe Connector for the Apple App Store. Stripe populates the data in your Revenue Recognition reports within 72 hours.\n\n### Backfill historical data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you onboard, the connector backfills up to 1 year of historical data.\n\n### Handle Apple transactions previously imported through manual data import ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you previously imported data from the Apple App Store using the Revenue Recognition [data import](https://docs.stripe.com/revenue-recognition/data-import#general-import) feature, you want to avoid double-counting Apple revenue upon switching to the automated connector.\n\nTo migrate from manual data imports to the connector, [delete](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion) all Apple transactions from the past year that you manually uploaded using data import CSVs. The connector replaces these transactions with the entries it generates during import.\n\n#### Note\n\nBecause the connector only backfills up to 1 year of historical data, we recommend keeping your data import CSV uploads for Apple transactions that occurred more than 1 year ago.\n\n## Examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Subscription purchase ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA subscriber purchases 1 unit of a News Plan Monthly subscription on December 3. The subscription is valid for 1 month, which means the service period is December 3 to January 3. The customer pays 32 USD, but the developer receives 31 USD.\n\nThe developer proceeds count toward revenue rather than customer price, because the customer price also includes taxes and Apple commissions. Revenue is billed and paid in full on December 3. Stripe recognizes most of the revenue in December, and a smaller portion in January.\n\nAt the end of January, the summary might look like this:\n\n| Account | December | January |\n| --- | --- | --- |\n| External Asset | +31 |     |\n| Revenue | +28 | +3  |\n| Deferred Revenue | +3  | \\-3 |\n\n### Subscription refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA subscriber purchases a 3-month subscription on January 2. The service period is January 2 to April 2. The customer pays 91 USD, but the developer receives 90 USD. On February 1, the customer receives a full refund.\n\nDuring a full refund:\n\n*   The customer receives their money back.\n*   Recognized revenue is offset by the refunds in a contra revenue account.\n*   The unused portion of the subscription revenue is cleared from the deferred revenue.\n\nThe refund reduces the external assets balance by 90 USD. The customer received 30 days of service, so you add 30 USD to the external refunds balance. The remainder of the deferred revenue–60 USD in this example–is also cleared.\n\nAt the end of April, the summary might look like this:\n\n| Account | December | January |\n| --- | --- | --- |\n| Revenue | +30 |     |\n| Deferred Revenue | +60 | \\-60 |\n| External Asset | +90 | \\-90 |\n| External Refunds |     | +30 |\n\n### Free trial ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t generate journal entries for free trials.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe most detailed level of reporting that Stripe can provide is audit by subscriber. We can’t provide an audit by invoice view because the financial reports from the Apple App Store don’t include invoice IDs.\n\nStripe also can’t book tax liability and Apple commissions because Apple doesn’t provide this data.",
  "title": "Stripe Connector for the Apple App Store | Stripe Documentation",
  "description": "Manage your revenue recognition in Stripe by importing data from the Apple App Store.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/mobile/ios/basic",
  "markdown": "# iOS basic integration | Stripe DocumentationThe Stripe Docs logo\n\n## iOS basic integrationDeprecated\n\n## Accept cards and Apple Pay with the iOS SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments UI](https://docs.stripe.com/payments/accept-a-payment?platform=ios) for mobile apps with features such as additional payment methods and SwiftUI support. We recommend using it for your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us know](https://github.com/stripe/stripe-ios/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n*   Accepts credit cards and Apple Pay\n*   Saves and displays cards for reuse\n*   Supports [limited customization](#theming) of fonts and colors\n*   Displays full-screen view controllers to collect payment details, shipping address, and shipping method:\n\nThese view controllers are also available to use individually—see the steps below for more details. This integration requires both server and client-side steps to implement.\n\n#### Note\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#setup-ios)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **Stripe** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import Stripe  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[\n\n## Set up an ephemeral key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#ephemeral-key)\n\nIn order for the SDK to save and retrieve credit cards for later use, create a single Stripe [Customer](https://docs.stripe.com/api/customers \"Customers\") object for each of your users. When you create a new user or account on your server, create a corresponding Customer object at the same time, even if you don’t collect payment information from your users when they sign up. This ensures that your application has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the Customer API. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object for the duration of the session.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide an ephemeral key to the SDK, you’ll need to expose a new API endpoint on your backend. This endpoint should create an ephemeral key for the current Stripe customer, and return the key’s unmodified response as JSON. When the SDK requests an ephemeral key, it will specify the version of the Stripe API that it expects the response to come from. Your endpoint must accept an `api_version` parameter, and use the specified API version when creating the ephemeral key. This ensures that the SDK always receives the correct ephemeral key response from your backend. Consult our [Example Backend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40) to see this in practice.\n\n`curl https://api.stripe.com/v1/ephemeral_keys \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -H \"Stripe-Version: {{API_VERSION}}\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your app, conform to the [STPCustomerEphemeralKeyProvider](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html) protocol by implementing its [createCustomerKeyWithAPIVersion](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html#/c:objc(pl)STPCustomerEphemeralKeyProvider(im)createCustomerKeyWithAPIVersion:completion:) method. This method requests an ephemeral key from the endpoint you created on the backend.\n\nWhen implementing this method, be sure to pass the `apiVersion` parameter along to your ephemeral keys endpoint. Consult the [API client](https://github.com/stripe/stripe-ios/tree/master/Example/Basic%20Integration/Basic%20Integration/MyAPIClient.swift) in our example app to see this in practice.\n\n`import Stripe  class MyAPIClient: NSObject, STPCustomerEphemeralKeyProvider {      func createCustomerKey(withAPIVersion apiVersion: String, completion: @escaping STPJSONResponseCompletionBlock) {         let url = self.baseURL.appendingPathComponent(\"ephemeral_keys\")         var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)!         urlComponents.queryItems = [URLQueryItem(name: \"api_version\", value: apiVersion)]         var request = URLRequest(url: urlComponents.url!)         request.httpMethod = \"POST\"         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in             guard let response = response as? HTTPURLResponse,                 response.statusCode == 200,                 let data = data,                 let json = ((try? JSONSerialization.jsonObject(with: data, options: []) as? [String : Any]) as [String : Any]??) else {                 completion(nil, error)                 return             }             completion(json, nil)         })         task.resume()     } }`\n\n[\n\n## Set up an STPCustomerContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-customer-context)\n\nNext, initialize an [STPCustomerContext](http://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html) with the `STPCustomerEphemeralKeyProvider` you created in the previous step.\n\nA `CustomerSession` talks to your backend to retrieve an ephemeral key for your Customer with its `STPCustomerEphemeralKeyProvider`, and uses that key to manage retrieving and updating the Customer’s payment methods on your behalf.\n\n`// MyAPIClient implements STPCustomerEphemeralKeyProvider (see above) let customerContext = STPCustomerContext(keyProvider: MyAPIClient())`\n\nTo reduce load times, preload your customer’s information by initializing `STPCustomerContext` before they enter your payment flow.\n\nIf your current user logs out of the app and a new user logs in, create a new instance of `STPCustomerContext` or clear the cached customer using the provided [clearCachedCustomer](https://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html#/c:objc(cs)STPCustomerContext(im)clearCache) method. On your backend, create and return a new ephemeral key for the Customer object associated with the new user.\n\n[\n\n## Set up an STPPaymentContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#initialize-payment-context)\n\nOnce you’ve set up your customer context, you can use it to initialize [STPPaymentContext](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentContext.html), the core class of the integration. Conform a class to [STPPaymentContextDelegate](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html) and assign it to the payment context’s `delegate` and `hostViewController` properties. We recommend using your app’s checkout screen `UIViewController`. In the next steps, you will implement the `STPPaymentContext` delegate methods.\n\nYou should also set the payment context’s `paymentAmount` property, which will be displayed to your user in the Apple Pay dialog (you can change this later, if the amount of the user’s purchase changes).\n\n`init() {     self.paymentContext = STPPaymentContext(customerContext: customerContext)     super.init(nibName: nil, bundle: nil)     self.paymentContext.delegate = self     self.paymentContext.hostViewController = self     self.paymentContext.paymentAmount = 5000 // This is in cents, that is, 50 USD }`\n\n[\n\n## Handle the user's payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment-method)\n\nIn your checkout screen, add a button to let the customer enter or change their payment method. When tapped, use `STPPaymentContext` to push or present an [STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html) on the payment context’s `hostViewController`.\n\n`// If you prefer a modal presentation func choosePaymentButtonTapped() {     self.paymentContext.presentPaymentOptionsViewController() }  // If you prefer a navigation transition func choosePaymentButtonTapped() {     self.paymentContext.pushPaymentOptionsViewController() }`\n\n`STPPaymentOptionsViewController` uses `STPCustomerContext` to display a Customer’s payment methods. If there are no stored payment methods or the **Add New Card** button is tapped, `STPAddCardViewController` is displayed. You can also initialize and display these view controllers without using `STPPaymentContext`.\n\n### `- paymentContextDidChange:`\n\nThis [STPPaymentContext delegate method](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html#/c:objc(pl)STPPaymentContextDelegate(im)paymentContextDidChange:) triggers when the content of the payment context changes, like when the user selects a new payment method or enters shipping information. This is a good place to update your UI:\n\n`func paymentContextDidChange(_ paymentContext: STPPaymentContext) {     self.activityIndicator.animating = paymentContext.loading     self.paymentButton.enabled = paymentContext.selectedPaymentOption != nil     self.paymentLabel.text = paymentContext.selectedPaymentOption?.label     self.paymentIcon.image = paymentContext.selectedPaymentOption?.image }`\n\n[\n\n## Handle the user's shipping info![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-shipping-info)\n\nIf your user needs to enter or change their shipping address and shipping method, `STPPaymentContext` can do this for you automatically. `STPPaymentContext` will save shipping info to the Stripe customer when your user updates their information, and automatically prefill the shipping view controller for future purchases. Note that you should not rely on the shipping information stored on the Stripe customer for order fulfillment, as your user may change this information if they make multiple purchases. We recommend adding shipping information when you create a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping) object (which can also help prevent fraud), or when saving it to your own database. When presenting the shipping view controller, you can specify whether you’d like it presented modally, or pushed onto a `UINavigationController` stack:\n\n`// If you prefer a modal presentation func shippingButtonTapped() {     self.paymentContext.presentShippingViewController() }  // If you prefer a navigation transition func shippingButtonTapped() {     self.paymentContext.pushShippingViewController() }`\n\nThis sets up and presents an [STPShippingAddressViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html) on the payment context’s `hostViewController`. Once the user enters a valid shipping address, they’re taken to an [STPShippingMethodsViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html). After they select a shipping method, both view controllers are dismissed or popped off the `hostViewController`’s stack.\n\n### `- paymentContext:didUpdateShippingAddress:completion:`\n\nThis method is called after your user enters a shipping address. Validate the returned `address` and determine the shipping methods available for that address.\n\nIf the address is valid, call the provided `completion` block with a status of `STPShippingStatusValid`, `nil` for the error argument, an array of shipping methods, and a selected shipping method. If you don’t need to collect a shipping method, pass `nil` for the shipping methods and selected shipping method. If the address is invalid, call the `completion` block with a status of `STPShippingStatusInvalid`, an error object describing the issue with the address, and `nil` for the shipping methods and selected shipping method. Note that providing an error object is optional—if you omit it, the user sees an alert with the message “Invalid Shipping Address.”\n\n`func paymentContext(_ paymentContext: STPPaymentContext, didUpdateShippingAddress address: STPAddress, completion: @escaping STPShippingMethodsCompletionBlock) {     let upsGround = PKShippingMethod()     upsGround.amount = 0     upsGround.label = \"UPS Ground\"     upsGround.detail = \"Arrives in 3-5 days\"     upsGround.identifier = \"ups_ground\"     let fedEx = PKShippingMethod()     fedEx.amount = 5.99     fedEx.label = \"FedEx\"     fedEx.detail = \"Arrives tomorrow\"     fedEx.identifier = \"fedex\"      if address.country == \"US\" {         completion(.valid, nil, [upsGround, fedEx], upsGround)     }     else {         completion(.invalid, nil, nil, nil)     } }`\n\n[\n\n## Submit the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen your user is ready to pay (for example, they tap the **Buy** button) call `requestPayment` on your payment context. It displays any required UI (such as the Apple Pay dialog) and calls the appropriate methods on its delegate as your user finishes their payment.\n\n`func payButtonTapped() {     self.paymentContext.requestPayment() }`\n\n### `- paymentContext:didCreatePaymentResult:completion:`\n\nThis method is called when the customer has successfully selected a payment method. Submit the payment to Stripe using a [Payment Intent](https://docs.stripe.com/payments/payment-intents). Stripe uses this payment object to track and handle all the states of the payment until the payment completes.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount and currency and returns its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") to your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the client, implement this delegate method to:\n\n1.  Request a `PaymentIntent` from your server.\n2.  Assemble a [STPPaymentIntentParams](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentIntentParams.html) object with the `PaymentIntent` client secret from your server and the [paymentMethod](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentResult.html#/c:objc(cs)STPPaymentResult(py)paymentMethod) provided by the delegate method.\n3.  Call the [STPPaymentHandler confirmPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentHandler.html#/c:@M@StripePayments@objc(cs)STPPaymentHandler(im)confirmPayment:withAuthenticationContext:completion:) method to [confirm](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") the payment, passing the `STPPaymentContext` as the [authenticationContext](https://stripe.dev/stripe-ios/stripe-payments/Protocols/STPAuthenticationContext.html).\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didCreatePaymentResult paymentResult: STPPaymentResult,   completion: @escaping STPErrorBlock) {     // Request a PaymentIntent from your backend     MyAPIClient.sharedClient.createPaymentIntent(products: self.products, shippingMethod: paymentContext.selectedShippingMethod) { result in         switch result {         case .success(let clientSecret):             // Assemble the PaymentIntent parameters             let paymentIntentParams = STPPaymentIntentParams(clientSecret: clientSecret)             paymentIntentParams.paymentMethodId = paymentResult.paymentMethod.stripeId              // Confirm the PaymentIntent             STPPaymentHandler.shared().confirmPayment(paymentIntentParams, with: paymentContext) { status, paymentIntent, error in                 switch status {                 case .succeeded:                     // Your backend asynchronously fulfills the customer's order, for example, via webhook                     completion(.success, nil)                 case .failed:                     completion(.error, error) // Report error                 case .canceled:                     completion(.userCancellation, nil) // Customer canceled                 @unknown default:                     completion(.error, nil)                 }             }         case .failure(let error):             completion(.error, error) // Report error from your API             break         }     } }`\n\nYou must call the provided `completion` block with the appropriate `STPPaymentStatus` (`.success`, `.error`, or .`userCancellation`) when the customer’s payment is finished.\n\n### `- paymentContext:didFinishWithStatus:error:`\n\nThis method is called after the previous method, when any auxiliary UI that has been displayed (such as the Apple Pay dialog) has been dismissed. You should inspect the returned `status` and show an appropriate message to your user. For example:\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didFinishWithStatus status: STPPaymentStatus,   error: Error?) {      switch status {     case .error:         self.showError(error)     case .success:         self.showReceipt()     case .userCancellation:         return // Do nothing     } }`\n\n### `- paymentContext:didFailToLoadWithError:`\n\nThis method is called in the rare case that the payment context’s initial loading call fails, usually due to lack of internet connectivity. You should dismiss your checkout page when this occurs and invite the user to try again. You can also optionally attempt to try again by calling `retryLoading` on the payment context.\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didFailToLoadWithError error: Error) {     self.navigationController?.popViewController(animated: true)     // Show the error to your user, and so on }`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
  "title": "iOS basic integration | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/mobile/android/basic",
  "markdown": "# Android basic integration | Stripe DocumentationThe Stripe Docs logo\n\n## Android basic integrationDeprecated\n\n## Accept cards with the Android SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments UI](https://docs.stripe.com/payments/accept-a-payment?platform=android) for mobile apps with support for additional payment methods. We recommend using it for your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us know](https://github.com/stripe/stripe-android/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n*   Accepts credit cards and other payment methods\n*   Saves and displays cards for reuse\n*   Can be [customized to fit your app’s look and feel](#customize-ui) using an Android theme\n*   Launches full-screen activities to collect payment details, shipping address, and shipping method\n*   Allows your customer to choose Google Pay as a payment method\n\nThese activities [can also be used individually](#use-individual-activities). This integration requires both server and client-side steps to implement.\n\n#### Note\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe Android SDK](https://github.com/stripe/stripe-android) is open source and [fully documented](https://stripe.dev/stripe-android/).\n\nTo install the SDK, add `stripe-android` to the `dependencies` block of your [`app/build.gradle`](https://developer.android.com/studio/build/dependencies) file:\n\n`apply plugin: 'com.android.application'  android { ... }  dependencies {   // ...    // Stripe Android SDK   implementation 'com.stripe:stripe-android:20.48.0' }`\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/apikeys) so that it can make requests to the Stripe API, such as in your `Application` subclass:\n\n`import com.stripe.android.PaymentConfiguration  class MyApp : Application() {     override fun onCreate() {         super.onCreate()         PaymentConfiguration.init(             applicationContext,`\n            \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `)     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[\n\n## Set up an ephemeral key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-ephemeral-key)\n\nIn order for the SDK to save and retrieve credit cards for later use, create a single Stripe [Customer](https://docs.stripe.com/api/customers \"Customers\") object for each of your users. When you create a new user or account on your server, create a corresponding Customer object at the same time, even if you don’t collect payment information from your users when they sign up. This ensures that your application has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the Customer API. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object s for the duration of the session.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide an ephemeral key to the SDK, expose a new API endpoint on your backend. This endpoint should create an ephemeral key for the current Stripe customer, and return the key’s unmodified response as JSON. When the SDK requests an ephemeral key, it will specify the version of the Stripe API that it expects the response to come from. Your endpoint must accept an `api_version` parameter, and use the specified API version when creating the ephemeral key. This ensures that the SDK always receives the correct ephemeral key response from your backend. Consult our [Example Backend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40) to see this in practice.\n\n`curl https://api.stripe.com/v1/ephemeral_keys \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -H \"Stripe-Version: {{API_VERSION}}\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you’ve added an ephemeral key endpoint to your backend, you’ll need a way for your Android app to communicate with this endpoint. In your app, make your API client class implement the [`EphemeralKeyProvider`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/index.html) interface, which defines a single method, [createEphemeralKey()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/create-ephemeral-key.html). When implementing this method, pass the `apiVersion` parameter along to your ephemeral keys endpoint. Consult our [Example App](https://github.com/stripe/stripe-android/blob/master/example/src/main/java/com/stripe/example/service/ExampleEphemeralKeyProvider.kt) to see this in practice.\n\nExampleEphemeralKeyProvider.java\n\n`public class ExampleEphemeralKeyProvider implements EphemeralKeyProvider {     private final BackendApi backendApi =         RetrofitFactory.instance.create(BackendApi.class);     private final CompositeDisposable compositeDisposable =         new CompositeDisposable();      @Override     public void createEphemeralKey(             @NonNull @Size(min = 4) String apiVersion,             @NonNull final EphemeralKeyUpdateListener keyUpdateListener) {         final Map<String, String> apiParamMap = new HashMap<>();         apiParamMap.put(\"api_version\", apiVersion);          // Using RxJava2 for handling asynchronous responses         compositeDisposable.add(backendApi.createEphemeralKey(apiParamMap)                 .subscribeOn(Schedulers.io())                 .observeOn(AndroidSchedulers.mainThread())                 .subscribe(                         response -> {                             try {                                 final String rawKey = response.string();                                 keyUpdateListener.onKeyUpdate(rawKey);                             } catch (IOException ignored) {                             }                         }));     } }`\n\n[\n\n## Set up a CustomerSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-customer-session)\n\nAfter creating an `EphemeralKeyProvider`, initialize a [`CustomerSession`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/index.html). A `CustomerSession` talks to your backend to retrieve an ephemeral key for your Customer with its `EphemeralKeyProvider`, and uses that key to manage retrieving and updating the Customer’s payment methods on your behalf.\n\nYou can also use `CustomerSession` with your own custom UI to [retrieve](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/retrieve-current-customer.html) or [refresh](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/update-current-customer.html) the Customer, and [list](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/get-payment-methods.html) their payment methods, [attach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/attach-payment-method.html) a payment method, or [detach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/detach-payment-method.html) a payment method.\n\n`public class StoreActivity extends Activity {     @Override     protected void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         CustomerSession.initCustomerSession(             this,             new ExampleEphemeralKeyProvider()         );     } }`\n\nTo reduce load times, preload your customer’s information by initializing `CustomerSession` before they enter your payment flow.\n\nIf your current user logs out of the app, clear the current `CustomerSession` singleton by calling `CustomerSession.endCustomerSession()`. When a new user logs in, re-initialize the instance. On your backend, create and return a new ephemeral key for the Customer object associated with the new user.\n\n[\n\n## Set up a PaymentSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-payment-session)\n\nThe core of this integration is the [`PaymentSession`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/index.html) class. It uses `CustomerSession` to launch full-screen activities to collect and store payment information, and can also be used to collect shipping info. Think of it as the data source for your checkout activity—it handles asynchronously retrieving the data you need, and notifies its `PaymentSessionListener` when your UI should change.\n\nTo work with `PaymentSession`, you’ll need to:\n\n1.  Create a `PaymentSessionConfig` object\n2.  Implement a `PaymentSessionListener`\n\n### PaymentSessionConfig![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `PaymentSessionConfig` object is created using a [Builder](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html). All of the `Builder`’s fields are optional. See the [API reference](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html) for details on each method.\n\n``public StoreActivity extends AppCompatActivity {      @NonNull     private PaymentSessionConfig createPaymentSessionConfig() {         return PaymentSessionConfig.Builder()              // hide the phone field on the shipping information form             .setHiddenShippingInfoFields(                 ShippingInfoWidget.CustomizableShippingField.PHONE_FIELD             )              // make the address line 2 field optional             .setOptionalShippingInfoFields(                 ShippingInfoWidget.CustomizableShippingField.ADDRESS_LINE_TWO_FIELD             )              // specify an address to pre-populate the shipping information form             .setPrepopulatedShippingInfo(ShippingInformation(                 new Address.Builder()                     .setLine1(\"123 Market St\")                     .setCity(\"San Francisco\")                     .setState(\"CA\")                     .setPostalCode(\"94107\")                     .setCountry(\"US\")                     .build(),                 \"Jenny Rosen\",                 \"4158675309\"             ))              // collect shipping information             .setShippingInfoRequired(true)              // collect shipping method             .setShippingMethodsRequired(true)              // specify the payment method types that the customer can use;             // defaults to PaymentMethod.Type.Card             .setPaymentMethodTypes(                 Arrays.asList(PaymentMethod.Type.Card)             )              // only allow US and Canada shipping addresses             .setAllowedShippingCountryCodes(new HashSet<>(                 Arrays.asList(\"US\", \"CA\")             ))              // specify a layout to display under the payment collection form             .setAddPaymentMethodFooter(R.layout.add_payment_method_footer)              // specify the shipping information validation delegate             .setShippingInformationValidator(new AppShippingInformationValidator())              // specify the shipping methods factory delegate             .setShippingMethodsFactory(new AppShippingMethodsFactory())              // if `true`, will show \"Google Pay\" as an option on the             // Payment Methods selection screen             .setShouldShowGooglePay(true)              .build();     }      private static class AppShippingInformationValidator         extends PaymentSessionConfig.ShippingInformationValidator {          @Override         public boolean isValid(             @NonNull ShippingInformation shippingInformation         ) {             final Address address = shippingInformation.getAddress();             return address != null && Locale.US.country == address.getCountry();         }          @NonNull         public String getErrorMessage(             @NonNull ShippingInformation shippingInformation         ) {             return \"A US address is required\";         }     }      private static class AppShippingMethodsFactory         extends PaymentSessionConfig.ShippingMethodsFactory {          @Override         public List<ShippingMethod> create(             @NonNull ShippingInformation shippingInformation         ) {             returns Arrays.asList(                 new ShippingMethod(                     \"UPS Ground\",                     \"ups-ground\",                     0,                     \"USD\",                     \"Arrives in 3-5 days\"                 ),                 new ShippingMethod(                     \"FedEx\",                     \"fedex\",                     599,                     \"USD\",                     \"Arrives tomorrow\"                 )             );         }     } }``\n\n### PaymentSessionListener![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating the `PaymentSessionConfig`, you’ll need to implement `PaymentSessionListener`.\n\nMyPaymentSessionListener.java\n\n``public class MyPaymentSessionListener         implements PaymentSession.PaymentSessionListener {     // Called whenever the PaymentSession's data changes,     // For example, when the user selects a new `PaymentMethod` or enters shipping info.     @Override     public void onPaymentSessionDataChanged(@NonNull PaymentSessionData data) {         if (data.getUseGooglePay()) {             // customer intends to pay with Google Pay         } else {             final PaymentMethod paymentMethod = data.getPaymentMethod();             if (paymentMethod != null) {                 // Display information about the selected payment method             }         }          // Update your UI here with other data         if (data.isPaymentReadyToCharge()) {             // Use the data to complete your charge - see below.         }     }      @Override     public void onCommunicatingStateChanged(boolean isCommunicating) {     }      @Override     public void onError(int errorCode, @NotNull String errorMessage) {     } }``\n\nThis method should also check for whether or not the payment data is complete, according to the `PaymentSessionConfig` specified. If you receive an update for which `PaymentSessionData#isPaymentReadyToCharge()` returns true, you can immediately send a message to your server to complete the charge.\n\n#### `void onCommunicatingStateChanged(boolean isCommunicating)`\n\nThis method is called whenever the network communication state has changed. We recommend showing a spinner or infinite progress bar when it is set to `true`\n\nMyPaymentSessionListener.java\n\n`public class MyPaymentSessionListener         implements PaymentSession.PaymentSessionListener {     @Override     public void onCommunicatingStateChanged(boolean isCommunicating) {         if (isCommunicating) {             // update UI to indicate that network communication is in progress         } else {             // update UI to indicate that network communication has completed         }     } }`\n\n#### `void onError(int errorCode, @Nullable String errorMessage)`\n\nThis method is called whenever an error occurs when connecting to the Stripe API. Make sure users can see the error messages, so display them in an alert dialog.\n\n### Initialize a PaymentSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHaving created your `PaymentSessionConfig` and `PaymentSessionListener`, you can now [initialize](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html) the `PaymentSession`. In the below example, we use anonymous classes to create our listener and config for simplicity.\n\n`public class HostActivity extends Activity {     private PaymentSession paymentSession;     private Button startPaymentFlowButton;      @Override     protected void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         paymentSession = new PaymentSession(             this,             new PaymentSessionConfig.Builder()                 .setPrepopulatedShippingInfo(getDefaultShippingInfo())                 .build()         );         setupPaymentSession();     }      private void setupPaymentSession() {         paymentSession.init(             new PaymentSession.PaymentSessionListener() {                 @Override                 public void onCommunicatingStateChanged(                     boolean isCommunicating                 ) {                     // update UI, such as hiding or showing a progress bar                 }                  @Override                 public void onError(                     int errorCode,                     @Nullable String errorMessage                 ) {                     // handle error                 }                  @Override                 public void onPaymentSessionDataChanged(                     @NonNull PaymentSessionData data                 ) {                     final PaymentMethod paymentMethod = data.getPaymentMethod();                     // use paymentMethod                 }             }         );         startPaymentFlowButton.setEnabled(true);     }      @Override     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (data != null) {             paymentSession.handlePaymentData(requestCode, resultCode, data);         }     }      @NonNull     private ShippingInformation getDefaultShippingInfo() {         // optionally specify default shipping address         return new ShippingInformation();     } }`\n\n[\n\n## Collect the customer's payment and shipping details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-details)\n\nOnce the `PaymentSession` has been initialized, you can use it to make the following calls.\n\n#### `void presentPaymentMethodSelection()`\n\nThis method starts the `PaymentMethodsActivity` to allow the customer to choose a saved payment method, using `CustomerSession` as its data source. If the **Add new card** button is tapped, or there are no existing payment methods, `AddPaymentMethodActivity` is launched to add a credit card.\n\n#### `void presentShippingFlow()`\n\nThis method presents the PaymentFlowActivity to allow the user to enter shipping information, if such information is required according to your `PaymentSessionConfig`.\n\n[\n\n## Complete the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#complete-the-payment)\n\nOnce `PaymentSession#isPaymentReadyToCharge()` returns `true`, submit the payment to Stripe using a [Payment Intent](https://docs.stripe.com/payments/payment-intents). Stripe uses this payment object to track and handle all the states of the payment—even when the bank requires customer intervention, like additional card authentication—until the payment completes.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount and currency and returns its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") to your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Request a `PaymentIntent` from your server\n2.  Assemble a [ConfirmPaymentIntentParams](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-confirm-payment-intent-params/index.html) object with the `PaymentIntent` client secret from your server and the id of `PaymentSessionData#paymentMethod` obtained from `PaymentSessionListenerImpl#onPaymentSessionDataChanged()`.\n3.  Call the [Stripe confirmPayment](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-stripe/confirm-payment.html) method to confirm the payment.\n\n`public class CheckoutActivity extends Activity {     private void confirmPayment(         @NonNull String clientSecret,         @NonNull String paymentMethodId     ) {         stripe.confirmPayment(             this,             ConfirmPaymentIntentParams.createWithPaymentMethodId(                 paymentMethodId,                 clientSecret             )         );     } }`\n\nWhen the payment completes, `onSuccess` is called and the value of the returned PaymentIntent’s `status` is `Succeeded`. Any other value indicates the payment was not successful. Inspect [lastPaymentError](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-payment-intent/index.html#com.stripe.android.model/PaymentIntent/lastPaymentError/#/PointingToDeclaration/) to determine the cause. End the payment session by calling `PaymentSession#onCompleted()`.\n\n[\n\n## Manage PaymentSession in a host Activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#manage)\n\nIn order to get updates for the `PaymentSessionData` object and to handle state during Activity lifecycle, you’ll need to hook up your `PaymentSession` instance to a few key parts of your host Activity lifecycle. The first is in `onActivityResult()`\n\n`public class HostActivity extends Activity {     @Override     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {         super.onActivityResult(requestCode, resultCode, data);         paymentSession.handlePaymentData(requestCode, resultCode, data);     } }`\n\nThis is all you need to do to get updates from the various activities launched by `PaymentSession`. Any updates to the data are reported to the [PaymentSessionListener](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/-payment-session-listener/index.html) argument to [PaymentSession#init()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html).\n\n`public class HostActivity extends Activity {     private PaymentSession paymentSession;      // Can also be re-initialized in onRestoreInstanceState     @Override     public void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);          // other onCreate logic          // Create the PaymentSession         paymentSession = new PaymentSession(             this,             createPaymentSessionConfig()         );          // Attach your listener         paymentSession.init(createPaymentSessionListener());     }      @NonNull     private PaymentSession.PaymentSessionListener createPaymentSessionListener() {         return new PaymentSession.PaymentSessionListener() {             @Override             public void onCommunicatingStateChanged(                 boolean isCommunicating             ) {                 // update UI, such as hiding or showing a progress bar             }              @Override             public void onError(                 int errorCode,                 @NotNull String errorMessage             ) {                 // handle error             }              @Override             public void onPaymentSessionDataChanged(                 @NotNull PaymentSessionData data             ) {                 data.getPaymentMethod();             }         };     }      @NonNull     private PaymentSessionConfig createPaymentSessionConfig() {         return new PaymentSessionConfig.Builder()                 .build();     } }`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
  "title": "Android basic integration | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/dashboard/managing-individual-accounts",
  "markdown": "# Manage individual accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Stripe Dashboard to manage connected accounts.\n\nYou can use the [Stripe Dashboard](https://dashboard.stripe.com/connect/accounts/overview) to inspect, support, and better understand your platform’s [connected accounts](https://docs.stripe.com/connect/accounts).\n\n## Create accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatforms in France can’t create connected accounts in the Dashboard. Due to French regulations, you can only create connected accounts using Stripe-hosted onboarding.\n\nThis feature allows you to onboard connected accounts without writing code and to test before integrating. The user creating the account must be an [Administrator or Developer](https://docs.stripe.com/get-started/account/teams/roles), and the account must have a completed [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n\nTo create a new account, click the **\\+ Create** button on the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page, then select the account type and country.\n\nIf you select the [Express](https://docs.stripe.com/connect/express-accounts) or [Standard](https://docs.stripe.com/connect/standard-accounts) account type, Stripe provides a one-time link for the account holder to complete the onboarding flow and emails you after the account successfully connects. Selecting the [Custom](https://docs.stripe.com/connect/custom-accounts) account type creates the account immediately, and you can [finish onboarding](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts) it on the Account details page. You can’t currently create accounts [without types](https://docs.stripe.com/connect/migrate-to-controller-properties) from the Stripe Dashboard.\n\n![Create an account in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/create-account.474100e68f8c8df37bc4b5fac9e04583.png)\n\nCreate an account in the Dashboard\n\n## Find accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo find a specific connected account, you can [search in the Dashboard](https://docs.stripe.com/dashboard/search) using criteria such as its name, email, or [metadata](https://docs.stripe.com/dashboard/search#metadata-searches). Alternatively, you can [view a list of accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) on the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page and click an account to open its account details page.\n\nBy default, the account details page opens on the **Overview** tab of the Activity section, which provides a detailed breakdown of recent transactions and other activity on the account.\n\n![Connect account activity](https://b.stripecdn.com/docs-statics-srv/assets/activity.3f57e0c746be14db9fc46bbf0e6e5d46.png)\n\nConnect account activity\n\nA banner at the top of the page alerts you when you or the connected account must take action to prevent or remove restrictions on the account’s capabilities. Such restrictions can result from open onboarding, verification, or risk requirements.\n\n![A banner in the connected account details page saying to update this account to avoid an interruption in payouts, with a button to view details](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-detail-actions-required-overview-banner.e0aca7bf27cc14c26492d1b89f970322.png)\n\n#### Note\n\n## View and unblock support cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView support cases your connected accounts have opened with Stripe and help unblock those cases by providing additional context.\n\nThe **Activity** section of a connected account’s details page contains a list of support cases raised by the connected account.\n\n![Support cases](https://b.stripecdn.com/docs-statics-srv/assets/support-cases.efdce627307f4ead05ea96e5f2079733.png)\n\nYou can view support cases from the last 90 days created from any connected account with access to either the full Stripe Dashboard or Express Dashboard. Connected accounts with Stripe Dashboard access who have the following exceptions are not included:\n\n*   Connected accounts who are or have been connected to multiple platforms\n*   Connected accounts who are also platform accounts\n*   Connected accounts who have opted out of sharing their cases.\n\nClick on any conversation in the **Support Cases** section to open the support case details page containing the detailed conversation between the connected account and Stripe.\n\n![Send Stripe Support an email](https://b.stripecdn.com/docs-statics-srv/assets/stripe-support-email.1d56ea6297510ab80f728b808e613972.png)\n\nYou can use the **Send Stripe Support an email** functionality for an existing support case to privately add any additional context that would help Stripe resolve the issue. These messages aren’t visible to the connected account.\n\n## Identify and remediate issues on the Actions required tab ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Actions required** tab displays details about any open requirements on the account. Each row corresponds to a `requirement`, `future_requirement`, or information request from Stripe.\n\n![A screenshot of the Actions required tab showing two actions needed to restore functionality to this connected account.](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-detail-actions-required-tab.f2729f77993262a4e073ef45db4e2128.png)\n\nThe Due Date is the [current deadline](https://docs.stripe.com/api/accounts/object#account_object-requirements-current_deadline) of the corresponding requirement. The following table describes the action statuses.\n\n| Requirement | Issue status |\n| --- | --- |\n| Information request from Stripe | _Various_ |\n| `requirement` in `past_due` | Past due |\n| `requirement` in `currently_due` | Currently due |\n| `future_requirement` | Future requirement |\n| `requirement` in `eventually_due` | Due later |\n\nClicking on a requirement opens a dialog with possible remediation paths for that requirement. To take action, click one of the paths.\n\nAvailable paths depend on the requirement and the account type. They can include submitting information on behalf of the account, sending the account a link that they can use to submit information, or contacting Stripe Support.\n\n### Submit the information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the issue type, this path opens a dialog or form where you can enter and submit the required information.\n\n### Send a remediation link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis path generates an account-specific remediation link that you can copy and send to the account. The link takes them to a page where they can submit the required information.\n\nFor more information about remediation links, see the [remediation link process walkthrough](https://docs.stripe.com/connect/dashboard/remediation-links).\n\n### Contact Support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remediate some issues, you must contact Stripe. This path opens a pre-filled form that you can use to submit a ticket to Stripe Support.\n\n## Update account information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe capabilities of connected accounts change over time depending on their verification status. If your platform is responsible for [collecting updated information](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) from a connected account (including Custom accounts) when requirements change, you can:\n\n*   Update its account information, contact information, and business details in the **Profile** section of the account details page.\n*   Update its [payout](https://docs.stripe.com/payouts \"payout\") schedule in the **Overview** tab of the Activity section under **Account balances**.\n\n### Change the account representative![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can call the [Accounts API](https://docs.stripe.com/api/accounts/update) to change the account representative. For more information, see the [required verification information page](https://docs.stripe.com/connect/required-verification-information#change-verification-info).\n\n### Managing business owners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add, edit, and remove business owners on the connected account details page. To add a new owner, click **\\+ Add owner**. To edit an existing owner, click the overflow menu ().\n\n### Update capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage an account’s [capabilities](https://docs.stripe.com/connect/account-capabilities) by clicking **Edit** in the **Capabilities** section.\n\n![Manage connected account capabilities](https://b.stripecdn.com/docs-statics-srv/assets/edit-capabilities.59a5314539722cc15753c851fa2e1fda.png)\n\nManage connected account capabilities\n\n## Send funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFunds sent to connected accounts come from your platform’s balance. You can add additional funds to your balance by clicking **Add to balance** in the **Balances** section.\n\nTo execute the transfer, go to your **Balances** section and click the **Transfers** tab. Click **New** to open the dialog for sending funds to connected accounts.\n\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can send money directly to a connected account’s bank or debit card. To send funds, a user must have at least [Administrator privileges](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Pull funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Beta\n\nPulling funds is a US-exclusive beta feature. Both the platform’s country and the connected account’s country must be `US`.\n\nYou can pull funds from connected accounts using the **Pull funds** button in the **Account balances** section.\n\n![Pull funds from a connected account](https://b.stripecdn.com/docs-statics-srv/assets/pullfunds.91aed365ffb0bcc44510f00fa64d5761.png)\n\nPull funds from a connected account\n\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can pull money from a connected account’s Stripe balance directly to your platform balance. Pulling funds is restricted to users with at least [Administrator privileges](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Remove accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![Remove connected account from platform](https://b.stripecdn.com/docs-statics-srv/assets/remove_account.2b00800b90522e6b2a46dd8827e1fa7b.png)\n\nRemove a connected account\n\nYou can remove and disconnect any connected account with access to the full Stripe Dashboard from your platform. A removed account no longer appears in your connected accounts list, and you can’t process payments or make API calls for it. You also lose any platform-controlled settings on the removed account, and they aren’t reinstated if the account reconnects later.\n\nRemoving an account only disconnects it from your platform. It still functions as a normal Stripe account.",
  "title": "Manage individual accounts | Stripe Documentation",
  "description": "Use the Stripe Dashboard to manage connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/3d-secure",
  "markdown": "# Cardholder authentication using 3D Secure\n\n## Learn about 3D Secure, an additional layer of authentication used by businesses to combat fraud.\n\n## How 3D Secure works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") uses multi-factor authentication to reduce fraud for online transactions where a card isn’t physically present. 3DS is triggered by businesses in online checkout flows, and requires multi-factor authentication (usually through SMS or email-based one-time passcode that Stripe sends) to complete.\n\n## Example of a 3D Secure flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![A Stripe checkout page with the payment information filled out, including the Pay button](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-1-checkout-page.039294e0dee3a6dede8ea8a32185aae5.png)\n\nStep 1: The customer enters their card details.\n\n![A dialog that displays a loading animation after clicking the Pay button, which now says Processing.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-3-challenge-flow.9052a220f336bbdb75a51799622c6477.png)\n\nStep 2: The acquirer requests 3DS verification. If the Stripe issuing card is enrolled in 3DS, the cardholder sees a prompt to complete an additional verification step.\n\nAs shown above, the additional 3D Secure step at checkout typically involves showing the cardholder an authentication page from their Issuer, where the cardholder sees a prompt to enter a verification code sent to their phone or email.\n\n## Why 3DS is important![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, businesses are responsible for online fraud losses in card-not-present transactions. To protect themselves, businesses can trigger 3DS verification to reduce the chances of accepting a fraudulent transaction. Even if a business triggers 3DS verification, the cardholder only needs to complete the step if your Stripe cards are enrolled in 3DS. In the UK and EU, 3DS is the standard for implementing the regulatory requirements of [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) (SCA).\n\n## Liability shift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a business triggers 3DS verification, liability for fraud shifts from the business to the issuer in most cases. This applies whether or not your Issuing cards are enrolled in 3DS, meaning issuers can take on increased liability without any additional verification.\n\n## 3DS Enrollment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **US**: 3DS enrollment in the US is optional, and your cards won’t be enrolled in 3DS unless you contact support to request enrollment. As part of our [best practices](https://docs.stripe.com/issuing/manage-fraud) for managing transaction fraud, we recommend enrolling your cards in 3DS early in your Issuing program’s life cycle. While enrollment does increase friction for a subset of your cardholder transactions, it helps to significantly reduce the risk of potential losses because of transaction fraud with online, card-not-present transactions. After you request enrollment, we enroll all active cards associated with your account and automatically enroll all cards created going forward.\n    *   Cardholders without a phone number or email on file won’t be enrolled in 3DS. After requesting enrollment, you can add contact information to [Cardholder objects](https://docs.stripe.com/api/issuing/cardholders/object), to auto-enroll those cards. Conversely, removing the contact info for a cardholder results in the card being unenrolled from 3DS.\n*   **UK and EU**: Upon creation, cards are enrolled in 3DS by default because of local regulations.\n    *   To allow the implementation of SCA over 3DS and comply with local regulations, all cards issued within the EU and UK require a valid phone number on file.\n\n## 3DS Authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a 3DS authentication request comes through for your [cardholder](https://docs.stripe.com/api#create_issuing_cardholder), Stripe sends them either a text message or an email containing a one-time verification code.\n\nThe method of authentication depends on the contact information provided for the cardholder. In the UK and EU markets supported by Stripe Issuing, cardholders must have a phone number on file to authenticate with a one-time text message verification code. In the US, the phone number or email on file will be used to authenticate cardholders, but if both the phone number and email are present, then the phone number will be used for authentication. Otherwise, the authentication request uses whichever contact information is available. To enable us to best secure you and your cardholders, we recommend keeping phone numbers and email addresses up to date for cardholders. This enables us to contact them during authentication. You can update your cardholders’ information by changing the field to its new value through the API or Dashboard.\n\nIn the UK and EU, cardholders might also see an additional security question. The cardholder sees a list of transactions on the card, and they can select the transactions they recognize. If the cardholder is using the card for the first time, they select the option indicating they don’t recognize any of the presented transactions.\n\n![A dialog showing a sample security question with choices of payment history. The header has a Your Bank placeholder logo and Card Network placeholder logo. The security question says, From the following list please identify a recent payment you have made using this card. There are 5 options with payment information of whether or not the payment was online, the purchase amount, and the merchant name. The last option says None of the above. There is a blurple button at the bottom that says Verify.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-issuing-knowledge-factor-netcetera.37258cc6c8e63cadf3dbb9b22f94d786.png)\n\nThe list of transactions the cardholder is presented with.\n\n## Choose the 3D Secure language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [preferred\\_locales](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-preferred_locales) field of the Cardholder object determines the display language of the 3DS flow. The default 3DS language is English.\n\nTo pick a 3DS language for a cardholder, use the API to set their `preferred_locales` to an array of preferred languages, in order of preference. If you want, you can provide one language only. The supported languages are English (`en`), French (`fr`), German (`de`), Italian (`it`), and Spanish (`es`).\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=individual \\  -d name=\"Jane D. Rocket\" \\   --data-urlencode email=\"jane@example.com\" \\  -d \"preferred_locales[]\"=fr \\  -d \"preferred_locales[]\"=en \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][country]\"=US \\  -d \"billing[address][postal_code]\"=94111`\n\nIn the US, Stripe also supports authentication through a native iOS and Android application. If you want to use this functionality, [please reach out to support](https://support.stripe.com/contact).\n\nRegardless of the authentication method used, if a cardholder can’t complete three consecutive 3DS attempts in a short period of time, it disables 3DS on their cards for 60 minutes.\n\n## Exemptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain types of low-risk payments might be exempt from SCA. Exemptions limit friction for low-risk payments by reducing the frequency of customer authentication. By default, Stripe might claim the following exemptions for 3DS-eligible cards to limit the friction associated with transactions it deems low risk or low value:\n\n| Type | Meaning |\n| --- | --- |\n| transaction\\_risk\\_analysis (US only) | An issuer (such as Stripe) can do a real-time risk analysis to determine whether or not to claim a low-risk exemption to a transaction. |\n| low\\_value\\_transaction | Transactions below 30 GBP/EUR (or equivalent converted amount) are considered “low value” and might be exempt from SCA. If the exemption has been used five times since the cardholder’s last successful authentication or if the sum of previously exempted payments exceeds 100 GBP or EUR, then the exemption doesn’t apply, and the cardholder must be authenticated. |\n\n#### Note\n\nAcquirers can also request exemptions, and Stripe might honor them. In these scenarios, loss liability stays with the acquirer and doesn’t shift to the issuer.\n\nWhen an issuer-claimed exemption is applied, the [Authorization object](https://docs.stripe.com/api/issuing/authorizations) looks like this:\n\n`{   \"object\": \"issuing.authorization\",   ...   \"verification_data\" : {     ...     \"authentication_exemption\": {       \"type\": \"low_value_transaction\",       \"claimed_by\": \"issuer\"     },     ...   },   ... }`\n\nConversely, when an acquirer-claimed exemption is applied, the [Authorization object](https://docs.stripe.com/api/issuing/authorizations) looks like this:\n\n`{   \"object\": \"issuing.authorization\",   ...   \"verification_data\" : {     ...     \"authentication_exemption\": {       \"type\": \"low_value_transaction\",       \"claimed_by\": \"acquirer\"     },     ...   },   ... }`\n\nIf you’re based in the UK or EU and your use case only requires virtual cards, you can contact Stripe Support to discuss whether a Secure Corporate Payment (SCP) exemption is applicable to your program.\n\n## Managing fraud through 3DS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe includes details about a 3DS attempt through the API in the authorization endpoint. Use the `three_d_secure` hash in the [verification\\_data](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data) hash to determine if an authorization was successfully authenticated. If you maintain your own authorization logic, we suggest using these values as key inputs that determine whether to approve or reject an authorization.\n\nAdditionally, if the business didn’t attempt 3DS, the `three_d_secure` field is null. If 3DS was exempted, then the `authentication_exemption` is present and the `three_d_secure` field is null. An authorization can’t contain both `three_d_secure` and `authentication_exemption`.\n\nYou can find guidelines on what the values represent and how you can use them to combat fraud in the table below.\n\n| Result | Meaning | Suggested action |\n| --- | --- | --- |\n| attempt\\_acknowledged | The business attempted to authenticate the authorization, but the card isn’t enrolled or couldn’t reach Stripe. | There is insufficient evidence to determine if the authorization is fraudulent or not. |\n| authenticated | The shopper was successfully verified as the cardholder as they entered the correct verification code sent to their phone. The online purchase was legitimate and not fraudulent. | Approve the transaction. |\n| failed | The cardholder wasn’t authenticated as the shopper which could mean the cardholder is not the actor making the purchase. | Decline the transaction. |\n| required | The authorization was declined because regulatory requirements mandated an authentication for this transaction but it wasn’t submitted correctly by the merchant, and they didn’t claim an applicable exemption. | Decline the transaction. |\n\n#### Note\n\nIf the card is enrolled in 3DS, when `verification_data.three_d_secure` isn’t present, 3D Secure wasn’t attempted by the merchant on an authorization.\n\n## How to test 3DS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Stripe Payments API to test 3DS.\n\n### Create a PaymentMethod with your issued card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [create a PaymentMethod](https://docs.stripe.com/api#create_payment_method) using your own issued card by running the following command:\n\n`curl https://api.stripe.com/v1/payment_methods \\   -u` \n\n`pk_test_TYooMQauvdEDq54NiTphI7jx`\n\n`: \\   -d type=card \\   -d \"card[number]\"=YOUR_ISSUED_CARD_NUMBER \\   -d \"card[exp_month]\"=YOUR_ISSUED_CARD_EXPIRATION_MONTH \\   -d \"card[exp_year]\"=YOUR_ISSUED_CARD_EXPIRATION_YEAR \\   -d \"card[cvc]\"=YOUR_ISSUED_CARD_CVC`\n\nReplace the following values:\n\n*   `YOUR_ISSUED_CARD_NUMBER` with the card number of your issued card\n*   `YOUR_ISSUED_CARD_CVC` with the CVC of your issued card\n*   `YOUR_ISSUED_CARD_EXPIRATION_MONTH` with the expiration month of your issued card\n*   `YOUR_ISSUED_CARD_EXPIRATION_YEAR` with the expiration year of your issued card\n\n### Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [create a PaymentIntent](https://docs.stripe.com/api#create_payment_intent) by running the following command:\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=15000 \\   -d currency=usd \\   -d \"payment_method_types[]\"=card \\   -d \"payment_method_options[card][request_three_d_secure]\"=any \\   -d \"capture_method\"=manual`\n\nThis command creates a PaymentIntent that initiates a 3D Secure authentication request. Use the `payment_method_options[card][request_three_d_secure]=any` parameter to perform 3D Secure authentication. The amount must be large enough to warrant a challenge. This example uses 150 USD.\n\nThe `\"capture_method\"=manual` parameter enables manual capture for the PaymentIntent, which means the funds are authorized but not captured yet.\n\n### Confirm the PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [confirm the PaymentIntent](https://docs.stripe.com/api#confirm_payment_intent) by running the following command:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_XXX/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payment_method=pm_XXX \\   -d return_url=[https://www.example.com](https://www.example.com/)`\n\nReplace `pi_XXX` with your PaymentIntent ID and `pm_XXX` with your PaymentMethod ID. After confirming the PaymentIntent, the response you receive contains the `next_action` field. That field includes a URL that you can use to redirect the user to complete 3DS authentication.\n\nAfter completing the 3DS challenge and payment authorization, you can [cancel the PaymentIntent](https://docs.stripe.com/api#cancel_payment_intent) without capturing funds.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_XXX/cancel \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"cancellation_reason\"=abandoned`\n\nReplace `pi_XXX` with your PaymentIntent ID.",
  "title": "Cardholder authentication using 3D Secure | Stripe Documentation",
  "description": "Learn about 3D Secure, an additional layer of authentication used by businesses to combat fraud.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/fraud-challenges",
  "markdown": "# Fraud challenges | Stripe DocumentationThe Stripe Docs logo\n\n## Fraud challengesBeta\n\n## Learn about fraud challenges, an additional layer of verification for authorizations.\n\nTurn on fraud challenges to:\n\n*   Minimize accidental blocks on transactions that appear fraudulent, but are in fact legitimate\n*   Conduct additional verification on authorizations Stripe deems high risk\n*   Conduct additional verification on authorizations you determine require it\n\nFraud challenges allow your cardholders to retry non-fraudulent transactions that would otherwise be blocked by fraud controls. When fraud challenges are enabled and a transaction is declined for fraud, Stripe sends the cardholder an SMS message. They can verify whether the transaction was fraudulent by replying to the message. All cardholders with an associated phone number can use fraud challenges.\n\n## High-risk transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe blocks transactions above a certain risk level. The risk level of a transaction is determined by the network you’re using. High-risk authorizations are identified by a value of `suspected_fraud` in the [`request_history.reason`](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason) field, and won’t trigger [`issuing.authorization_request` webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations) when declined.\n\n## Fraud challenge flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe starts sending fraud challenges on high-risk authorizations as soon as you enable the feature in your [card issuing settings](https://dashboard.stripe.com/settings/issuing/authorizations).\n\nYou can see fraud challenge activity with the [Authorizations API](https://docs.stripe.com/api/issuing/authorizations). Declined authorizations that were fraud-challenged have a value in the [fraud\\_challenges](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_challenges) field. Subsequent authorizations that the cardholder verifies as genuine have a value of `true` in the [verified\\_by\\_fraud\\_challenge](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verified_by_fraud_challenge) field.\n\nThe following shows an example of a fraud-challenged and declined authorization:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing_authorization\",   \"approved\": false,   ...   \"fraud_challenges\": [{     \"channel\": \"sms\",     \"status\": \"pending\"   }] }`\n\nThis example shows a subsequent authorization that has been verified by the cardholder:\n\n`{   \"id\": \"iauth_1CmMk28Jx923VfJJwMCejmX\",   \"object\": \"issuing_authorization\",   \"approved\": true,   ...   \"verified_by_fraud_challenge\": true }`\n\n#### Note\n\nVerified, genuine authorizations trigger `issuing_authorization.request` webhooks. If you use [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations), consider `verified_by_fraud_challenge` when deciding whether to approve an authorization. If your cardholder has explicitly confirmed a transaction as genuine, we recommend that you don’t apply any of your own risk controls.\n\nTo use fraud challenges, make sure that:\n\n*   The phone number associated with your cardholder is valid and correct\n*   Existing transaction decline logic in any `issuing_authorization.request` webhook handler doesn’t conflict with fraud challenges\n\n### Cardholder flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour cardholders might receive a challenge and contact your company’s customer service to learn more. Make sure your internal teams are prepared to answer questions that they might receive from your customers about these challenges.\n\nWhen a cardholder receives a fraud challenge, they can override the declined transaction by verifying that the suspicious transaction is legitimate and initiated by them. Fraud challenges are only available to cardholders with an associated [phone number](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-phone_number).\n\nThe cardholder verifies the override with a one-time SMS prompt with the following language:\n\n> Did you attempt a _\\[amount\\]_ transaction at _\\[merchant\\]_? Reply YES if you did, or NO if not. Reply STOP to opt out\n\nIf the cardholder replies “YES”, they receive the following:\n\n> Thanks, please wait a moment and try again.\n\nTo complete the purchase, the cardholder needs to initiate the transaction a second time. After retrying, they won’t receive the SMS prompt, and Stripe will not block the transaction for being high-risk. If the cardholder instead replies “NO”, they receive the following:\n\n> This transaction was declined. We recommend you cancel your card and request a new one. Review your account for other suspicious transactions.\n\nCardholders can reply “STOP” to opt out of fraud challenges, and “START” to opt back in again.\n\n## Trigger fraud challenges yourself ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send fraud challenges on authorizations that haven’t been blocked by Stripe, use [real-time authorization webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations). To trigger challenges in scenarios where you detect spending that appears suspicious and want additional verification (for example, a cardholder using their card out of the country), decline the `issuing_authorization.request` webhook and include the `send_fraud_challenges` field with the `[\"sms\"]` value.\n\nHere’s an example of how to trigger a fraud challenge in a webhook response:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  // Replace with a real secret. You can find your endpoint's secret in your webhook settings. webhookSecret = 'whsec_...'  app.post('/authorization_requests', (request, response) => {   const sig = request.headers['stripe-signature'];   const event = stripe.webhooks.constructEvent(request.body, sig, webhookSecret);    if (event.type === 'issuing_authorization.request') {     const auth = event.data.object;      response.status(200).json({       approved: false,       send_fraud_challenges: ['sms']     });   } });  app.listen(4242);`\n\nFraud challenges that you trigger yourself in webhook responses are sent even if the automatic sending of fraud challenges is disabled in your [Issuing settings](https://dashboard.stripe.com/settings/issuing/authorizations).\n\n## Fraud challenges for Connect platforms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/issuing/connect) with Stripe Issuing, turning on fraud challenges enables it for all cardholders across all connected accounts.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud challenges are only available to cardholders with phone numbers in the following countries. Attempts to send fraud challenges to other phone numbers, or to cardholders who are physically outside of these countries, won’t be delivered.\n\nFraud challenges that can’t be delivered because of an unsupported country code have a [status](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_challenges-status) of `undeliverable`.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud challenge text messages are not sent to cardholders in test mode. To help you integrate with fraud challenges, Stripe provides helper APIs for simulating a fraud challenge flow, including sending and responding to a challenge.\n\nUse helper APIs to [create a test mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create). The risk level of the authorization you create is controllable: you can create a high-risk authorization by overriding the default risk assessment with a high fraud risk level.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2300 \\  -d card=  {{CARD_ID}}   \\  -d \"risk_assessment[fraud_risk][risk_level]\"=high \\  -d \"risk_assessment[fraud_risk][fraud_score]\"=95`\n\nThis authorization will be declined, with a `reason` of `suspected_fraud` in its [request\\_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history). If fraud challenges are turned on, then a fraud challenge is created for this high-risk test mode authorization. See [Before you begin](#prerequisites) for the steps required to turn on fraud challenges.\n\nAlternatively, you can test fraud challenges by issuing a challenge yourself. To induce a fraud challenge in test mode, create a test mode authorization without a risk assessment override, and then respond to an `issuing_authorization.request` webhook. This method does not require fraud challenges to be turned on in your Issuing settings. Read more about how to [trigger fraud challenges yourself](#define-your-own-logic) in webhook responses.\n\n### Step 2: Simulate a response to the fraud challenge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter inducing a test mode fraud challenge, you can simulate a cardholder’s response using another helper API. Call the [test mode fraud challenge response](https://docs.stripe.com/api/issuing/authorization/respond) method, passing the ID of the authorization you created in step 1, and a `confirmed` parameter.\n\nProvide `confirmed=true` to simulate the cardholder responding “yes, I made this transaction, and it isn’t fraudulent”. Provide `confirmed=false` to simulate a response of “no, I did not make this transaction, it is fraudulent”.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/fraud_challenges/respond \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d confirmed=true`\n\n### Step 3: Try the high-risk authorization again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you simulated a response of “yes, I made this transaction” (`confirmed=true`), then you can try the high-risk test mode authorization again. This time, the authorization shouldn’t be declined, because you have simulated a scenario where the cardholder has indicated that the original, declined transaction is actually legitimate.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2300 \\  -d card=  {{CARD_ID}}   \\  -d \"risk_assessment[fraud_risk][risk_level]\"=high \\  -d \"risk_assessment[fraud_risk][fraud_score]\"=95`\n\nThis new authorization shouldn’t be declined for `suspected_fraud`, and instead be approved. It might also be declined for other reasons (such as an insufficient test mode balance), look at the authorization’s [request\\_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history) to learn more.\n\nAdditionally, this new authorization’s [verified\\_by\\_fraud\\_challenge](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verified_by_fraud_challenge) field will be `true`. This indicates that the cardholder has previously completed a fraud challenge for a similar authorization (as simulated in step 2).\n\nIf you’re triggering fraud challenges yourself in a `issuing_authorization.request` webhook handler, then pay attention to the `verified_by_fraud_challenge` field. Stripe recommends that you don’t trigger a fraud challenge on authorizations that have been verified by a previous fraud challenge.",
  "title": "Fraud challenges | Stripe Documentation",
  "description": "Learn about fraud challenges, an additional layer of verification for authorizations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/funding_instructions",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/connect/custom/hosted-onboarding",
  "markdown": "# Stripe hosted onboarding for Custom accounts\n\n## Let Stripe collect identity verification information for your Custom connected accounts.\n\n[Connect Onboarding for Custom Accounts](https://stripe.com/connect/onboarding) is a web form hosted by Stripe that takes care of collecting identity verification information from users. It dynamically adjusts the information that it collects to reflect the connected account’s capabilities, country, and business type. [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding is the recommended solution to collect identity verification information for Custom accounts, and ensures that your flow is optimized for:\n\n*   Mobile browsers\n*   Accessibility\n*   Internationalization and localization\n*   Conversion rate\n*   Intelligently requesting requirements based on what’s already provided on the account\n\nHere’s what the form looks like for Stripe’s sample integration, [Rocket Deliveries](https://rocketdeliveries.io/):\n\n![Screenshot of Connect Onboarding form](https://b.stripecdn.com/docs-statics-srv/assets/hosted_onboarding_form.37ff5a6f7d39a33ebda671e33419971c.png)\n\n## How to use Connect Onboarding for Custom Accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to your [onboarding settings](https://dashboard.stripe.com/settings/connect/onboarding-interface) to customize the visual appearance of the form. You must provide the name, color, and icon of your brand. You must [collect bank account details within the form](https://dashboard.stripe.com/settings/connect/payouts/onboarding), either manually or instantly with [Stripe Financial Connections](https://docs.stripe.com/financial-connections).\n2.  Create a new account and get the account ID, or use an existing account ID (in the form of `acct_XXXXXXXX`).\n3.  If you have information about the account holder (like their name, address, or other details), you can proactively provide this through the [account create or update methods](https://docs.stripe.com/api/accounts). The more information provide through the API, the less information Connect Onboarding prompts your user for.\n4.  Call the [Account Links](https://docs.stripe.com/api/account_links) with the following parameters (see the [API ref](https://docs.stripe.com/api/account_links) for more):\n    *   `account`\n    *   `refresh_url`\n    *   `return_url`\n    *   `type`\n    *   `collection_options` (optional)\n5.  In the onboarding flow for your own platform, redirect your user to the `url` returned by [Account Links](https://docs.stripe.com/api/account_links).\n6.  Handle additional account states, redirecting your user back into the Connect Onboarding flow if necessary. To handle user-initiated updates to information they’ve already provided, create a way for your user to get a new redirect to the Connect Onboarding form from your platform’s Dashboard.\n\n[](#info-to-collect)\n\nConnect Onboarding for Custom Accounts supports upfront or incremental onboarding. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding collects the `currently_due` requirements. For the advantages and disadvantages of each, see [the onboarding flows documentation](https://docs.stripe.com/connect/identity-verification#onboarding-flows).\n\nThe `currently_due` requirements request only the user information needed for verification at this specific point in time; the `eventually_due` requirements include a more complete set of questions that we’ll eventually need to collect.\n\nBased on the needs of your platform, pass either `currently_due` or `eventually_due` as the value of the `collection_options.fields` parameter in your calls to [Account Links](https://docs.stripe.com/api/account_links). Here’s an example request:\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding \\  -d \"collection_options[fields]\"=eventually_due`\n\n[](#redirect)\n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect your user to this link to send them into the flow. You can only use your Account Link URLs one time because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you enable **Collect bank account information for payouts** in your [payout onboarding settings](https://dashboard.stripe.com/settings/connect/payouts/onboarding), or if the `treasury` capability is requested, the user must set up additional authentication with Stripe before entering the onboarding flow.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n[](#return)\n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases in which the user will be redirected back to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while you’re in test mode (for example, to test with localhost), but for live mode only HTTPS is accepted. Be sure you’ve swapped any testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe will issue a redirect back to this URL when the user completes the Connect Onboarding flow, or clicks Save for later at any point in the flow. It does **not** mean that all information has been collected, or that there are no outstanding requirements on the account. It only means the flow was entered and exited properly.\n\nNo state is passed with this URL. After a user is redirected to your `return_url`, check the state of the `requirements` attribute on their account. You can either listen to `account.updated` webhooks or retrieve the [Account](https://docs.stripe.com/api/accounts) object and inspect the state of its `requirements` attribute. See more details in Step 4 below.\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user will be redirected to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes went by since the link was created)\n*   The link was already visited (the user refreshed the page or clicked the **back**/**forward** button)\n*   The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired\n\nYour `refresh_url` should trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again, with the same parameters, and redirect the user back into the Connect Onboarding flow to create a seamless experience.\n\n[](#new-reqs-due)\n\nSet up your integration to listen for changes to account requirements, if you haven’t already done so. We recommend [using webhooks to do so](https://docs.stripe.com/connect/handling-api-verification#verification-process). You can test handling new requirements (and how they may disable charges and [payouts](https://docs.stripe.com/payouts \"payout\")) with our [test mode trigger cards](https://docs.stripe.com/connect/testing#trigger-cards).\n\nWhen [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts, we’ll notify you.\n\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). For embedded onboarding, include the `collectionOptions` attribute in the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). For Stripe-hosted onboarding, specify the `collection_options` parameter when [creating account links](https://docs.stripe.com/api/account_links/create#create_account_link-collection_options).\n\nBased on the verification needs of your application, send the user back into Connect Onboarding as necessary to satisfy `currently_due` or `eventually_due` requirements as described in step 1. You can use this as a signal of _when_ to send your user back into the flow. Keep in mind that using Connect Onboarding means you don’t really need to worry about _what_ the requirements are – sending the user back into Connect Onboarding means it will collect the right information.\n\nFor example, if your user mistypes their information and they can’t be verified, they could be asked to provide an Identity Document (for example, a Driver’s License in the United States). Sending this user into Connect Onboarding prompts them to upload such a document to ensure they become verified.\n\n[](#user-updates)\n\nMost Connect Onboarding usage discussed thus far has been about prompting the user to provide new information. Connect Onboarding also supports user-initiated updates to the information they’ve already provided in the `type` parameter of the [Account Link](https://docs.stripe.com/api/account_links). `type` accepts one of two values: `account_onboarding` or `account_update`.\n\n#### account\\_onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value for `type` provides a form for inputting outstanding requirements. Use it when you’re onboarding a new user, or when an existing user has new requirements; such as when a user had already provided enough information, but you requested a new capability that needs additional info. Send the user to the form in this mode to just collect the new information you need.\n\n#### account\\_update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value for `type` displays the attributes that are already populated on the account object and allows your user to edit previously provided information. Provide an access point in your platform website to a `type=account_update` Account Link for users to make updates themselves (for example, when their address changes). Consider framing the link as “edit my profile” or “update my verification information.”\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHosted onboarding supports the same set of browsers that the [Stripe Dashboard currently supports](https://docs.stripe.com/dashboard/basics#browser-compatibility):\n\n*   The last 20 major versions of Chrome and Firefox\n*   The last two major versions of Safari and Edge\n*   The last two major versions of mobile Safari on iOS\n\nHosted onboarding isn’t supported when embedded through webviews. It’s only supported in standalone browsers.",
  "title": "Stripe hosted onboarding for Custom accounts | Stripe Documentation",
  "description": "Let Stripe collect identity verification information for your Custom connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/funding_instructions/list",
  "markdown": "# List all funding instructions | Stripe API Reference\n\nRetrieve all applicable funding instructions for an Issuing balance.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns all funding instructions for an Issuing balance\n\nGET /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/funding_instructions\",  \"has_more\": false,  \"data\": [    {      \"object\": \"funding_instructions\",      \"bank_transfer\": {        \"country\": \"DE\",        \"financial_addresses\": [          {            \"iban\": {              \"account_holder_name\": \"Stripe Technology Europe Limited\",              \"bic\": \"SXPYDEHH\",              \"country\": \"DE\",              \"iban\": \"DE00000000000000000001\"            },            \"supported_networks\": [              \"sepa\"            ],            \"type\": \"iban\"          }        ],        \"type\": \"eu_bank_transfer\"      },      \"currency\": \"eur\",      \"funding_type\": \"bank_transfer\",      \"livemode\": false    }  ]}\n```\n\n## [Simulate a top up](https://docs.stripe.com/api/issuing/funding_instructions/fund)Test helper\n\nSimulates an external bank transfer and adds funds to an Issuing balance. This method can only be called in test mode.\n\n### Parameters\n\n*   The amount to top up\n    \n*   The currency to top up\n    \n\n### Returns\n\nReturns testmode funding instructions for an Issuing balance\n\nPOST /v1/test\\_helpers/issuing/fund\\_balance\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/fund_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=4242 \\  -d currency=eur\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all funding instructions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/topups/create",
  "markdown": "# Create a top-up | Stripe API Reference\n\nTop up the balance of an account\n\n### Parameters\n\n*   A positive integer representing how much to transfer.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the top-up object.\n\n```\ncurl https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for Jenny Rosen\" \\  -d statement_descriptor=Top-up\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Update a top-up](https://docs.stripe.com/api/topups/update)\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [List all top-ups](https://docs.stripe.com/api/topups/list)\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a top-up](https://docs.stripe.com/api/topups/cancel)\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```",
  "title": "Create a top-up | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/object",
  "markdown": "# The Card object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    The reason why the card was canceled.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `design_rejected`<br><br>The design of this card was rejected by Stripe for violating our [partner guidelines](https://docs.stripe.com/issuing/cards/physical#design-review). |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n\n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.\n    \n*   The expiration month of the card.\n    \n*   The expiration year of the card.\n    \n*   The last 4 digits of the card number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n*   The type of the card.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More attributes\n\n*   #### \n    \n    cvcnullable stringExpandable\n    \n\n*   #### \n    \n    numbernullable stringExpandable\n    \n*   #### \n    \n    personalization\\_designnullable stringExpandable\n    \n*   #### \n    \n    replaced\\_bynullable stringExpandable\n    \n*   #### \n    \n    replacement\\_fornullable stringExpandable\n    \n*   #### \n    \n    replacement\\_reasonnullable enum\n    \n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Create a card](https://docs.stripe.com/api/issuing/cards/create)\n\nCreates an Issuing `Card` object.\n\n### Parameters\n\n*   The currency for the card.\n    \n*   The type of card to issue. Possible values are `physical` or `virtual`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n*   The [Cardholder](https://docs.stripe.com/api#issuing_cardholder_object) object with which the card will be associated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    personalization\\_designstring\n    \n\n### Returns\n\nReturns an Issuing `Card` object if creation succeeds.\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d cardholder=ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -d currency=usd \\  -d type=virtual\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Update a card](https://docs.stripe.com/api/issuing/cards/update)\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    }